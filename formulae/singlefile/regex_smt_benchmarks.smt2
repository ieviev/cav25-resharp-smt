(set-logic QF_S)












(declare-const x String)
(assert (str.in_re x (re.inter (re.inter (re.inter (re.inter (re.inter (re.inter (re.inter (re.++ (re.++ (re.++ (re.++ re.all (re.range "a" "z")) re.all) (re.range "a" "z")) re.all) (re.++ (re.++ (re.++ (re.++ re.all (re.range "A" "Z")) re.all) (re.range "A" "Z")) re.all)) (re.++ (re.++ (re.++ (re.++ re.all (re.range "0" "9")) re.all) (re.range "0" "9")) re.all)) (re.++ (re.++ (re.++ (re.++ re.all (re.union (re.union (re.union (re.union (re.union (re.range (_ char #x0) "/") (re.range ":" "@")) (re.range "[" "^")) (str.to_re "`")) (re.range "{" (_ char #x7F))) (str.to_re "_"))) re.all) (re.union (re.union (re.union (re.union (re.union (re.range (_ char #x0) "/") (re.range ":" "@")) (re.range "[" "^")) (str.to_re "`")) (re.range "{" (_ char #x7F))) (str.to_re "_"))) re.all)) (re.* (re.range "!" "~"))) (re.union (re.inter (re.++ (re.++ (re.++ (re.++ (re.++ (re.++ (re.++ (re.++ (re.++ re.all (re.union (str.to_re "P") (str.to_re "p"))) (re.union (str.to_re "A") (str.to_re "a"))) (re.union (re.union (re.union (str.to_re "$") (str.to_re "5")) (str.to_re "S")) (str.to_re "s"))) (re.union (re.union (re.union (str.to_re "$") (str.to_re "5")) (str.to_re "S")) (str.to_re "s"))) (re.union (str.to_re "W") (str.to_re "w"))) (re.union (re.union (str.to_re "0") (str.to_re "O")) (str.to_re "o"))) (re.union (str.to_re "R") (str.to_re "r"))) (re.union (str.to_re "D") (str.to_re "d"))) re.all) re.none) (re.inter (re.comp (re.++ (re.++ (re.++ (re.++ (re.++ (re.++ (re.++ (re.++ (re.++ re.all (re.union (str.to_re "P") (str.to_re "p"))) (re.union (str.to_re "A") (str.to_re "a"))) (re.union (re.union (re.union (str.to_re "$") (str.to_re "5")) (str.to_re "S")) (str.to_re "s"))) (re.union (re.union (re.union (str.to_re "$") (str.to_re "5")) (str.to_re "S")) (str.to_re "s"))) (re.union (str.to_re "W") (str.to_re "w"))) (re.union (re.union (str.to_re "0") (str.to_re "O")) (str.to_re "o"))) (re.union (str.to_re "R") (str.to_re "r"))) (re.union (str.to_re "D") (str.to_re "d"))) re.all)) re.all))) (re.union (re.inter (re.++ (re.++ re.all (re.union (re.union (re.union (re.union (re.union (re.union (re.union (str.to_re "012") (str.to_re "123")) (str.to_re "234")) (str.to_re "345")) (str.to_re "456")) (str.to_re "567")) (str.to_re "678")) (str.to_re "789"))) re.all) re.none) (re.inter (re.comp (re.++ (re.++ re.all (re.union (re.union (re.union (re.union (re.union (re.union (re.union (str.to_re "012") (str.to_re "123")) (str.to_re "234")) (str.to_re "345")) (str.to_re "456")) (str.to_re "567")) (str.to_re "678")) (str.to_re "789"))) re.all)) re.all))) ((_ re.loop 2 4) re.allchar))))
(check-sat)


(reset)
(set-logic QF_S)






(assert (not (= re.none (re.inter (re.++ (re.++ re.all (str.to_re "a")) re.all) (re.* (str.to_re "b"))))))
(check-sat)

(reset)
(set-logic QF_S)












(declare-const x String)
(assert (str.in_re x (re.inter (re.inter (re.inter (re.inter (re.inter (re.inter (re.inter (re.++ (re.++ (re.++ (re.++ re.all (re.range "a" "z")) re.all) (re.range "a" "z")) re.all) (re.++ (re.++ (re.++ (re.++ re.all (re.range "A" "Z")) re.all) (re.range "A" "Z")) re.all)) (re.++ (re.++ (re.++ (re.++ re.all (re.range "0" "9")) re.all) (re.range "0" "9")) re.all)) (re.++ (re.++ (re.++ (re.++ re.all (re.union (re.union (re.union (re.union (re.union (re.range (_ char #x0) "/") (re.range ":" "@")) (re.range "[" "^")) (str.to_re "`")) (re.range "{" (_ char #x7F))) (str.to_re "_"))) re.all) (re.union (re.union (re.union (re.union (re.union (re.range (_ char #x0) "/") (re.range ":" "@")) (re.range "[" "^")) (str.to_re "`")) (re.range "{" (_ char #x7F))) (str.to_re "_"))) re.all)) (re.* (re.range "!" "~"))) (re.union (re.inter (re.++ (re.++ (re.++ (re.++ (re.++ (re.++ (re.++ (re.++ (re.++ re.all (re.union (str.to_re "P") (str.to_re "p"))) (re.union (str.to_re "A") (str.to_re "a"))) (re.union (re.union (re.union (str.to_re "$") (str.to_re "5")) (str.to_re "S")) (str.to_re "s"))) (re.union (re.union (re.union (str.to_re "$") (str.to_re "5")) (str.to_re "S")) (str.to_re "s"))) (re.union (str.to_re "W") (str.to_re "w"))) (re.union (re.union (str.to_re "0") (str.to_re "O")) (str.to_re "o"))) (re.union (str.to_re "R") (str.to_re "r"))) (re.union (str.to_re "D") (str.to_re "d"))) re.all) re.none) (re.inter (re.comp (re.++ (re.++ (re.++ (re.++ (re.++ (re.++ (re.++ (re.++ (re.++ re.all (re.union (str.to_re "P") (str.to_re "p"))) (re.union (str.to_re "A") (str.to_re "a"))) (re.union (re.union (re.union (str.to_re "$") (str.to_re "5")) (str.to_re "S")) (str.to_re "s"))) (re.union (re.union (re.union (str.to_re "$") (str.to_re "5")) (str.to_re "S")) (str.to_re "s"))) (re.union (str.to_re "W") (str.to_re "w"))) (re.union (re.union (str.to_re "0") (str.to_re "O")) (str.to_re "o"))) (re.union (str.to_re "R") (str.to_re "r"))) (re.union (str.to_re "D") (str.to_re "d"))) re.all)) re.all))) (re.union (re.inter (re.++ (re.++ re.all (re.union (re.union (re.union (re.union (re.union (re.union (re.union (str.to_re "012") (str.to_re "123")) (str.to_re "234")) (str.to_re "345")) (str.to_re "456")) (str.to_re "567")) (str.to_re "678")) (str.to_re "789"))) re.all) re.none) (re.inter (re.comp (re.++ (re.++ re.all (re.union (re.union (re.union (re.union (re.union (re.union (re.union (str.to_re "012") (str.to_re "123")) (str.to_re "234")) (str.to_re "345")) (str.to_re "456")) (str.to_re "567")) (str.to_re "678")) (str.to_re "789"))) re.all)) re.all))) ((_ re.loop 4 7) re.allchar))))
(check-sat)


(reset)
(set-logic QF_S)












(declare-const x String)
(assert (str.in_re x (re.inter (re.inter (re.inter (re.inter (re.inter (re.inter (re.inter (re.++ (re.++ (re.++ (re.++ re.all (re.range "a" "z")) re.all) (re.range "a" "z")) re.all) (re.++ (re.++ (re.++ (re.++ re.all (re.range "A" "Z")) re.all) (re.range "A" "Z")) re.all)) (re.++ (re.++ (re.++ (re.++ re.all (re.range "0" "9")) re.all) (re.range "0" "9")) re.all)) (re.++ (re.++ (re.++ (re.++ re.all (re.union (re.union (re.union (re.union (re.union (re.range (_ char #x0) "/") (re.range ":" "@")) (re.range "[" "^")) (str.to_re "`")) (re.range "{" (_ char #x7F))) (str.to_re "_"))) re.all) (re.union (re.union (re.union (re.union (re.union (re.range (_ char #x0) "/") (re.range ":" "@")) (re.range "[" "^")) (str.to_re "`")) (re.range "{" (_ char #x7F))) (str.to_re "_"))) re.all)) (re.* (re.range "!" "~"))) (re.union (re.inter (re.++ (re.++ (re.++ (re.++ (re.++ (re.++ (re.++ (re.++ (re.++ re.all (re.union (str.to_re "P") (str.to_re "p"))) (re.union (str.to_re "A") (str.to_re "a"))) (re.union (re.union (re.union (str.to_re "$") (str.to_re "5")) (str.to_re "S")) (str.to_re "s"))) (re.union (re.union (re.union (str.to_re "$") (str.to_re "5")) (str.to_re "S")) (str.to_re "s"))) (re.union (str.to_re "W") (str.to_re "w"))) (re.union (re.union (str.to_re "0") (str.to_re "O")) (str.to_re "o"))) (re.union (str.to_re "R") (str.to_re "r"))) (re.union (str.to_re "D") (str.to_re "d"))) re.all) re.none) (re.inter (re.comp (re.++ (re.++ (re.++ (re.++ (re.++ (re.++ (re.++ (re.++ (re.++ re.all (re.union (str.to_re "P") (str.to_re "p"))) (re.union (str.to_re "A") (str.to_re "a"))) (re.union (re.union (re.union (str.to_re "$") (str.to_re "5")) (str.to_re "S")) (str.to_re "s"))) (re.union (re.union (re.union (str.to_re "$") (str.to_re "5")) (str.to_re "S")) (str.to_re "s"))) (re.union (str.to_re "W") (str.to_re "w"))) (re.union (re.union (str.to_re "0") (str.to_re "O")) (str.to_re "o"))) (re.union (str.to_re "R") (str.to_re "r"))) (re.union (str.to_re "D") (str.to_re "d"))) re.all)) re.all))) (re.union (re.inter (re.++ (re.++ re.all (re.union (re.union (re.union (re.union (re.union (re.union (re.union (str.to_re "012") (str.to_re "123")) (str.to_re "234")) (str.to_re "345")) (str.to_re "456")) (str.to_re "567")) (str.to_re "678")) (str.to_re "789"))) re.all) re.none) (re.inter (re.comp (re.++ (re.++ re.all (re.union (re.union (re.union (re.union (re.union (re.union (re.union (str.to_re "012") (str.to_re "123")) (str.to_re "234")) (str.to_re "345")) (str.to_re "456")) (str.to_re "567")) (str.to_re "678")) (str.to_re "789"))) re.all)) re.all))) ((_ re.loop 3 4) re.allchar))))
(check-sat)


(reset)
(set-logic QF_S)












(declare-const x String)
(assert (str.in_re x (re.inter (re.inter (re.inter (re.inter (re.inter (re.inter (re.inter (re.++ (re.++ (re.++ (re.++ re.all (re.range "a" "z")) re.all) (re.range "a" "z")) re.all) (re.++ (re.++ (re.++ (re.++ re.all (re.range "A" "Z")) re.all) (re.range "A" "Z")) re.all)) (re.++ (re.++ (re.++ (re.++ re.all (re.range "0" "9")) re.all) (re.range "0" "9")) re.all)) (re.++ (re.++ (re.++ (re.++ re.all (re.union (re.union (re.union (re.union (re.union (re.range (_ char #x0) "/") (re.range ":" "@")) (re.range "[" "^")) (str.to_re "`")) (re.range "{" (_ char #x7F))) (str.to_re "_"))) re.all) (re.union (re.union (re.union (re.union (re.union (re.range (_ char #x0) "/") (re.range ":" "@")) (re.range "[" "^")) (str.to_re "`")) (re.range "{" (_ char #x7F))) (str.to_re "_"))) re.all)) (re.* (re.range "!" "~"))) (re.union (re.inter (re.++ (re.++ (re.++ (re.++ (re.++ (re.++ (re.++ (re.++ (re.++ re.all (re.union (str.to_re "P") (str.to_re "p"))) (re.union (str.to_re "A") (str.to_re "a"))) (re.union (re.union (re.union (str.to_re "$") (str.to_re "5")) (str.to_re "S")) (str.to_re "s"))) (re.union (re.union (re.union (str.to_re "$") (str.to_re "5")) (str.to_re "S")) (str.to_re "s"))) (re.union (str.to_re "W") (str.to_re "w"))) (re.union (re.union (str.to_re "0") (str.to_re "O")) (str.to_re "o"))) (re.union (str.to_re "R") (str.to_re "r"))) (re.union (str.to_re "D") (str.to_re "d"))) re.all) re.none) (re.inter (re.comp (re.++ (re.++ (re.++ (re.++ (re.++ (re.++ (re.++ (re.++ (re.++ re.all (re.union (str.to_re "P") (str.to_re "p"))) (re.union (str.to_re "A") (str.to_re "a"))) (re.union (re.union (re.union (str.to_re "$") (str.to_re "5")) (str.to_re "S")) (str.to_re "s"))) (re.union (re.union (re.union (str.to_re "$") (str.to_re "5")) (str.to_re "S")) (str.to_re "s"))) (re.union (str.to_re "W") (str.to_re "w"))) (re.union (re.union (str.to_re "0") (str.to_re "O")) (str.to_re "o"))) (re.union (str.to_re "R") (str.to_re "r"))) (re.union (str.to_re "D") (str.to_re "d"))) re.all)) re.all))) (re.union (re.inter (re.++ (re.++ re.all (re.union (re.union (re.union (re.union (re.union (re.union (re.union (str.to_re "012") (str.to_re "123")) (str.to_re "234")) (str.to_re "345")) (str.to_re "456")) (str.to_re "567")) (str.to_re "678")) (str.to_re "789"))) re.all) re.none) (re.inter (re.comp (re.++ (re.++ re.all (re.union (re.union (re.union (re.union (re.union (re.union (re.union (str.to_re "012") (str.to_re "123")) (str.to_re "234")) (str.to_re "345")) (str.to_re "456")) (str.to_re "567")) (str.to_re "678")) (str.to_re "789"))) re.all)) re.all))) ((_ re.loop 3 7) re.allchar))))
(check-sat)


(reset)
(set-logic QF_S)






(declare-const x String)
(assert (str.in_re x (re.inter (re.++ (re.++ re.all (str.to_re "a")) re.all) (re.* (str.to_re "b")))))
(check-sat)

(reset)
(set-logic QF_S)












(declare-const x String)
(assert (str.in_re x (re.inter (re.inter (re.++ (re.++ re.all (re.range "a" "z")) re.all) (re.++ re.allchar (str.to_re "{8-10}"))) (re.++ re.allchar (str.to_re "{11-20}")))))
(check-sat)

(reset)
(set-logic QF_S)
(declare-const x String)
(assert (str.in_re x
    (re.inter
        (re.++ re.all (re.range "0" "0"))
        (re.* (re.range "1" "1"))
)))
(check-sat)

(reset)
(set-logic QF_S)
(assert (=
    (re.inter
        (re.++ re.all (re.range "a" "z") re.all)
        (re.++ re.all (re.range "0" "9") re.all)
        (re.comp (str.to_re "mypass1"))
        (re.comp (str.to_re "mypass2"))
    )
    (re.inter
        (re.++ re.all (re.range "a" "z") re.all)
        (re.++ re.all (re.range "0" "9") re.all)
    )
))

(check-sat)

(reset)
(set-logic QF_S)














(declare-const x String)
(assert (str.in_re x (re.inter (re.inter (re.inter (re.inter (re.++ (re.++ re.all (re.range "a" "z")) re.all) (re.++ (re.++ (re.++ (re.++ re.all (re.range "0" "9")) re.all) (re.range "0" "9")) re.all)) (re.++ (re.++ re.all (re.range "A" "Z")) re.all)) (re.++ (re.++ re.all (re.union (re.union (re.union (re.union (str.to_re "!") (re.range "#" "&")) (re.range "(" "*")) (str.to_re "@")) (str.to_re "^"))) re.all)) ((_ re.loop 1 4) re.allchar))))
(check-sat)

(reset)
(set-logic QF_S)
(assert (not (=
    re.none
    (re.inter
        (re.++ re.all (re.range "a" "z") re.all)
        (re.++ re.all (re.range "0" "9") re.all)
        (re.++ re.all (re.range "A" "Z") re.all)
        ((_ re.loop 8 20) re.allchar)
        (re.* (re.range "A" "Z"))
    )
)))

(check-sat)

(reset)
(set-logic QF_S)












(declare-const x String)
(assert (str.in_re x (re.inter (re.inter (re.inter (re.inter (re.inter (re.inter (re.inter (re.++ (re.++ (re.++ (re.++ re.all (re.range "a" "z")) re.all) (re.range "a" "z")) re.all) (re.++ (re.++ (re.++ (re.++ re.all (re.range "A" "Z")) re.all) (re.range "A" "Z")) re.all)) (re.++ (re.++ (re.++ (re.++ re.all (re.range "0" "9")) re.all) (re.range "0" "9")) re.all)) (re.++ (re.++ (re.++ (re.++ re.all (re.union (re.union (re.union (re.union (re.union (re.range (_ char #x0) "/") (re.range ":" "@")) (re.range "[" "^")) (str.to_re "`")) (re.range "{" (_ char #x7F))) (str.to_re "_"))) re.all) (re.union (re.union (re.union (re.union (re.union (re.range (_ char #x0) "/") (re.range ":" "@")) (re.range "[" "^")) (str.to_re "`")) (re.range "{" (_ char #x7F))) (str.to_re "_"))) re.all)) (re.* (re.range "!" "~"))) (re.union (re.inter (re.++ (re.++ (re.++ (re.++ (re.++ (re.++ (re.++ (re.++ (re.++ re.all (re.union (str.to_re "P") (str.to_re "p"))) (re.union (str.to_re "A") (str.to_re "a"))) (re.union (re.union (re.union (str.to_re "$") (str.to_re "5")) (str.to_re "S")) (str.to_re "s"))) (re.union (re.union (re.union (str.to_re "$") (str.to_re "5")) (str.to_re "S")) (str.to_re "s"))) (re.union (str.to_re "W") (str.to_re "w"))) (re.union (re.union (str.to_re "0") (str.to_re "O")) (str.to_re "o"))) (re.union (str.to_re "R") (str.to_re "r"))) (re.union (str.to_re "D") (str.to_re "d"))) re.all) re.none) (re.inter (re.comp (re.++ (re.++ (re.++ (re.++ (re.++ (re.++ (re.++ (re.++ (re.++ re.all (re.union (str.to_re "P") (str.to_re "p"))) (re.union (str.to_re "A") (str.to_re "a"))) (re.union (re.union (re.union (str.to_re "$") (str.to_re "5")) (str.to_re "S")) (str.to_re "s"))) (re.union (re.union (re.union (str.to_re "$") (str.to_re "5")) (str.to_re "S")) (str.to_re "s"))) (re.union (str.to_re "W") (str.to_re "w"))) (re.union (re.union (str.to_re "0") (str.to_re "O")) (str.to_re "o"))) (re.union (str.to_re "R") (str.to_re "r"))) (re.union (str.to_re "D") (str.to_re "d"))) re.all)) re.all))) (re.union (re.inter (re.++ (re.++ re.all (re.union (re.union (re.union (re.union (re.union (re.union (re.union (str.to_re "012") (str.to_re "123")) (str.to_re "234")) (str.to_re "345")) (str.to_re "456")) (str.to_re "567")) (str.to_re "678")) (str.to_re "789"))) re.all) re.none) (re.inter (re.comp (re.++ (re.++ re.all (re.union (re.union (re.union (re.union (re.union (re.union (re.union (str.to_re "012") (str.to_re "123")) (str.to_re "234")) (str.to_re "345")) (str.to_re "456")) (str.to_re "567")) (str.to_re "678")) (str.to_re "789"))) re.all)) re.all))) ((_ re.loop 6 7) re.allchar))))
(check-sat)


(reset)
(set-logic QF_S)












(declare-const x String)
(assert (str.in_re x (re.inter (re.inter (re.inter (re.inter (re.inter (re.inter (re.inter (re.++ (re.++ (re.++ (re.++ re.all (re.range "a" "z")) re.all) (re.range "a" "z")) re.all) (re.++ (re.++ (re.++ (re.++ re.all (re.range "A" "Z")) re.all) (re.range "A" "Z")) re.all)) (re.++ (re.++ (re.++ (re.++ re.all (re.range "0" "9")) re.all) (re.range "0" "9")) re.all)) (re.++ (re.++ (re.++ (re.++ re.all (re.union (re.union (re.union (re.union (re.union (re.range (_ char #x0) "/") (re.range ":" "@")) (re.range "[" "^")) (str.to_re "`")) (re.range "{" (_ char #x7F))) (str.to_re "_"))) re.all) (re.union (re.union (re.union (re.union (re.union (re.range (_ char #x0) "/") (re.range ":" "@")) (re.range "[" "^")) (str.to_re "`")) (re.range "{" (_ char #x7F))) (str.to_re "_"))) re.all)) (re.* (re.range "!" "~"))) (re.union (re.inter (re.++ (re.++ (re.++ (re.++ (re.++ (re.++ (re.++ (re.++ (re.++ re.all (re.union (str.to_re "P") (str.to_re "p"))) (re.union (str.to_re "A") (str.to_re "a"))) (re.union (re.union (re.union (str.to_re "$") (str.to_re "5")) (str.to_re "S")) (str.to_re "s"))) (re.union (re.union (re.union (str.to_re "$") (str.to_re "5")) (str.to_re "S")) (str.to_re "s"))) (re.union (str.to_re "W") (str.to_re "w"))) (re.union (re.union (str.to_re "0") (str.to_re "O")) (str.to_re "o"))) (re.union (str.to_re "R") (str.to_re "r"))) (re.union (str.to_re "D") (str.to_re "d"))) re.all) re.none) (re.inter (re.comp (re.++ (re.++ (re.++ (re.++ (re.++ (re.++ (re.++ (re.++ (re.++ re.all (re.union (str.to_re "P") (str.to_re "p"))) (re.union (str.to_re "A") (str.to_re "a"))) (re.union (re.union (re.union (str.to_re "$") (str.to_re "5")) (str.to_re "S")) (str.to_re "s"))) (re.union (re.union (re.union (str.to_re "$") (str.to_re "5")) (str.to_re "S")) (str.to_re "s"))) (re.union (str.to_re "W") (str.to_re "w"))) (re.union (re.union (str.to_re "0") (str.to_re "O")) (str.to_re "o"))) (re.union (str.to_re "R") (str.to_re "r"))) (re.union (str.to_re "D") (str.to_re "d"))) re.all)) re.all))) (re.union (re.inter (re.++ (re.++ re.all (re.union (re.union (re.union (re.union (re.union (re.union (re.union (str.to_re "012") (str.to_re "123")) (str.to_re "234")) (str.to_re "345")) (str.to_re "456")) (str.to_re "567")) (str.to_re "678")) (str.to_re "789"))) re.all) re.none) (re.inter (re.comp (re.++ (re.++ re.all (re.union (re.union (re.union (re.union (re.union (re.union (re.union (str.to_re "012") (str.to_re "123")) (str.to_re "234")) (str.to_re "345")) (str.to_re "456")) (str.to_re "567")) (str.to_re "678")) (str.to_re "789"))) re.all)) re.all))) ((_ re.loop 1 7) re.allchar))))
(check-sat)


(reset)
(set-logic QF_S)












(declare-const x String)
(assert (str.in_re x (re.inter (re.inter (re.inter (re.inter (re.inter (re.inter (re.inter (re.++ (re.++ (re.++ (re.++ re.all (re.range "a" "z")) re.all) (re.range "a" "z")) re.all) (re.++ (re.++ (re.++ (re.++ re.all (re.range "A" "Z")) re.all) (re.range "A" "Z")) re.all)) (re.++ (re.++ (re.++ (re.++ re.all (re.range "0" "9")) re.all) (re.range "0" "9")) re.all)) (re.++ (re.++ (re.++ (re.++ re.all (re.union (re.union (re.union (re.union (re.union (re.range (_ char #x0) "/") (re.range ":" "@")) (re.range "[" "^")) (str.to_re "`")) (re.range "{" (_ char #x7F))) (str.to_re "_"))) re.all) (re.union (re.union (re.union (re.union (re.union (re.range (_ char #x0) "/") (re.range ":" "@")) (re.range "[" "^")) (str.to_re "`")) (re.range "{" (_ char #x7F))) (str.to_re "_"))) re.all)) (re.* (re.range "!" "~"))) (re.union (re.inter (re.++ (re.++ (re.++ (re.++ (re.++ (re.++ (re.++ (re.++ (re.++ re.all (re.union (str.to_re "P") (str.to_re "p"))) (re.union (str.to_re "A") (str.to_re "a"))) (re.union (re.union (re.union (str.to_re "$") (str.to_re "5")) (str.to_re "S")) (str.to_re "s"))) (re.union (re.union (re.union (str.to_re "$") (str.to_re "5")) (str.to_re "S")) (str.to_re "s"))) (re.union (str.to_re "W") (str.to_re "w"))) (re.union (re.union (str.to_re "0") (str.to_re "O")) (str.to_re "o"))) (re.union (str.to_re "R") (str.to_re "r"))) (re.union (str.to_re "D") (str.to_re "d"))) re.all) re.none) (re.inter (re.comp (re.++ (re.++ (re.++ (re.++ (re.++ (re.++ (re.++ (re.++ (re.++ re.all (re.union (str.to_re "P") (str.to_re "p"))) (re.union (str.to_re "A") (str.to_re "a"))) (re.union (re.union (re.union (str.to_re "$") (str.to_re "5")) (str.to_re "S")) (str.to_re "s"))) (re.union (re.union (re.union (str.to_re "$") (str.to_re "5")) (str.to_re "S")) (str.to_re "s"))) (re.union (str.to_re "W") (str.to_re "w"))) (re.union (re.union (str.to_re "0") (str.to_re "O")) (str.to_re "o"))) (re.union (str.to_re "R") (str.to_re "r"))) (re.union (str.to_re "D") (str.to_re "d"))) re.all)) re.all))) (re.union (re.inter (re.++ (re.++ re.all (re.union (re.union (re.union (re.union (re.union (re.union (re.union (str.to_re "012") (str.to_re "123")) (str.to_re "234")) (str.to_re "345")) (str.to_re "456")) (str.to_re "567")) (str.to_re "678")) (str.to_re "789"))) re.all) re.none) (re.inter (re.comp (re.++ (re.++ re.all (re.union (re.union (re.union (re.union (re.union (re.union (re.union (str.to_re "012") (str.to_re "123")) (str.to_re "234")) (str.to_re "345")) (str.to_re "456")) (str.to_re "567")) (str.to_re "678")) (str.to_re "789"))) re.all)) re.all))) ((_ re.loop 5 7) re.allchar))))
(check-sat)


(reset)
(set-logic QF_S)












(declare-const x String)
(assert (str.in_re x (re.inter (re.inter (re.inter (re.inter (re.inter (re.inter (re.inter (re.++ (re.++ (re.++ (re.++ re.all (re.range "a" "z")) re.all) (re.range "a" "z")) re.all) (re.++ (re.++ (re.++ (re.++ re.all (re.range "A" "Z")) re.all) (re.range "A" "Z")) re.all)) (re.++ (re.++ (re.++ (re.++ re.all (re.range "0" "9")) re.all) (re.range "0" "9")) re.all)) (re.++ (re.++ (re.++ (re.++ re.all (re.union (re.union (re.union (re.union (re.union (re.range (_ char #x0) "/") (re.range ":" "@")) (re.range "[" "^")) (str.to_re "`")) (re.range "{" (_ char #x7F))) (str.to_re "_"))) re.all) (re.union (re.union (re.union (re.union (re.union (re.range (_ char #x0) "/") (re.range ":" "@")) (re.range "[" "^")) (str.to_re "`")) (re.range "{" (_ char #x7F))) (str.to_re "_"))) re.all)) (re.* (re.range "!" "~"))) (re.union (re.inter (re.++ (re.++ (re.++ (re.++ (re.++ (re.++ (re.++ (re.++ (re.++ re.all (re.union (str.to_re "P") (str.to_re "p"))) (re.union (str.to_re "A") (str.to_re "a"))) (re.union (re.union (re.union (str.to_re "$") (str.to_re "5")) (str.to_re "S")) (str.to_re "s"))) (re.union (re.union (re.union (str.to_re "$") (str.to_re "5")) (str.to_re "S")) (str.to_re "s"))) (re.union (str.to_re "W") (str.to_re "w"))) (re.union (re.union (str.to_re "0") (str.to_re "O")) (str.to_re "o"))) (re.union (str.to_re "R") (str.to_re "r"))) (re.union (str.to_re "D") (str.to_re "d"))) re.all) re.none) (re.inter (re.comp (re.++ (re.++ (re.++ (re.++ (re.++ (re.++ (re.++ (re.++ (re.++ re.all (re.union (str.to_re "P") (str.to_re "p"))) (re.union (str.to_re "A") (str.to_re "a"))) (re.union (re.union (re.union (str.to_re "$") (str.to_re "5")) (str.to_re "S")) (str.to_re "s"))) (re.union (re.union (re.union (str.to_re "$") (str.to_re "5")) (str.to_re "S")) (str.to_re "s"))) (re.union (str.to_re "W") (str.to_re "w"))) (re.union (re.union (str.to_re "0") (str.to_re "O")) (str.to_re "o"))) (re.union (str.to_re "R") (str.to_re "r"))) (re.union (str.to_re "D") (str.to_re "d"))) re.all)) re.all))) (re.union (re.inter (re.++ (re.++ re.all (re.union (re.union (re.union (re.union (re.union (re.union (re.union (str.to_re "012") (str.to_re "123")) (str.to_re "234")) (str.to_re "345")) (str.to_re "456")) (str.to_re "567")) (str.to_re "678")) (str.to_re "789"))) re.all) re.none) (re.inter (re.comp (re.++ (re.++ re.all (re.union (re.union (re.union (re.union (re.union (re.union (re.union (str.to_re "012") (str.to_re "123")) (str.to_re "234")) (str.to_re "345")) (str.to_re "456")) (str.to_re "567")) (str.to_re "678")) (str.to_re "789"))) re.all)) re.all))) ((_ re.loop 2 7) re.allchar))))
(check-sat)


(reset)
(set-logic QF_S)








(declare-const x String)
(assert (str.in_re x (re.inter (re.inter (re.inter (re.++ (re.++ re.all (re.range "a" "z")) re.all) (re.++ (re.++ re.all (re.range "A" "Z")) re.all)) (re.++ (re.++ re.all (re.range "0" "9")) re.all)) (re.* (re.range ":" "~")))))
(check-sat)

(reset)
(set-logic QF_S)








(declare-const x String)
(assert (str.in_re x (re.inter (re.inter (re.inter (re.++ (re.++ re.all (re.range "a" "z")) re.all) (re.++ (re.++ re.all (re.range "A" "Z")) re.all)) (re.++ (re.++ re.all (re.range "0" "9")) re.all)) ((_ re.loop 0 3) (re.range "!" "~")))))
(check-sat)


(reset)
(set-logic QF_S)














(declare-const x String)
(assert (str.in_re x (re.inter (re.inter (re.inter (re.inter (re.++ (re.++ re.all (re.range "a" "z")) re.all) (re.++ (re.++ re.all (re.range "0" "9")) re.all)) (re.++ (re.++ re.all (re.range "A" "Z")) re.all)) ((_ re.loop 8 20) re.allchar)) (re.union (re.inter (re.++ (re.++ (re.++ (re.++ re.all (str.to_re "0")) re.all) (str.to_re "O")) re.all) re.none) (re.inter (re.comp (re.++ (re.++ (re.++ (re.++ re.all (str.to_re "0")) re.all) (str.to_re "O")) re.all)) re.all)))))
(check-sat)


(reset)
(set-logic QF_S)












(declare-const x String)
(assert (str.in_re x (re.inter (re.inter (re.inter (re.inter (re.inter (re.inter (re.inter (re.++ (re.++ (re.++ (re.++ re.all (re.range "a" "z")) re.all) (re.range "a" "z")) re.all) (re.++ (re.++ (re.++ (re.++ re.all (re.range "A" "Z")) re.all) (re.range "A" "Z")) re.all)) (re.++ (re.++ (re.++ (re.++ re.all (re.range "0" "9")) re.all) (re.range "0" "9")) re.all)) (re.++ (re.++ (re.++ (re.++ re.all (re.union (re.union (re.union (re.union (re.union (re.range (_ char #x0) "/") (re.range ":" "@")) (re.range "[" "^")) (str.to_re "`")) (re.range "{" (_ char #x7F))) (str.to_re "_"))) re.all) (re.union (re.union (re.union (re.union (re.union (re.range (_ char #x0) "/") (re.range ":" "@")) (re.range "[" "^")) (str.to_re "`")) (re.range "{" (_ char #x7F))) (str.to_re "_"))) re.all)) (re.* (re.range "!" "~"))) (re.union (re.inter (re.++ (re.++ (re.++ (re.++ (re.++ (re.++ (re.++ (re.++ (re.++ re.all (re.union (str.to_re "P") (str.to_re "p"))) (re.union (str.to_re "A") (str.to_re "a"))) (re.union (re.union (re.union (str.to_re "$") (str.to_re "5")) (str.to_re "S")) (str.to_re "s"))) (re.union (re.union (re.union (str.to_re "$") (str.to_re "5")) (str.to_re "S")) (str.to_re "s"))) (re.union (str.to_re "W") (str.to_re "w"))) (re.union (re.union (str.to_re "0") (str.to_re "O")) (str.to_re "o"))) (re.union (str.to_re "R") (str.to_re "r"))) (re.union (str.to_re "D") (str.to_re "d"))) re.all) re.none) (re.inter (re.comp (re.++ (re.++ (re.++ (re.++ (re.++ (re.++ (re.++ (re.++ (re.++ re.all (re.union (str.to_re "P") (str.to_re "p"))) (re.union (str.to_re "A") (str.to_re "a"))) (re.union (re.union (re.union (str.to_re "$") (str.to_re "5")) (str.to_re "S")) (str.to_re "s"))) (re.union (re.union (re.union (str.to_re "$") (str.to_re "5")) (str.to_re "S")) (str.to_re "s"))) (re.union (str.to_re "W") (str.to_re "w"))) (re.union (re.union (str.to_re "0") (str.to_re "O")) (str.to_re "o"))) (re.union (str.to_re "R") (str.to_re "r"))) (re.union (str.to_re "D") (str.to_re "d"))) re.all)) re.all))) (re.union (re.inter (re.++ (re.++ re.all (re.union (re.union (re.union (re.union (re.union (re.union (re.union (str.to_re "012") (str.to_re "123")) (str.to_re "234")) (str.to_re "345")) (str.to_re "456")) (str.to_re "567")) (str.to_re "678")) (str.to_re "789"))) re.all) re.none) (re.inter (re.comp (re.++ (re.++ re.all (re.union (re.union (re.union (re.union (re.union (re.union (re.union (str.to_re "012") (str.to_re "123")) (str.to_re "234")) (str.to_re "345")) (str.to_re "456")) (str.to_re "567")) (str.to_re "678")) (str.to_re "789"))) re.all)) re.all))) ((_ re.loop 9 12) re.allchar))))
(check-sat)


(reset)
(set-logic QF_S)















(declare-const x String)
(assert (str.in_re x (re.inter (re.inter (re.inter (re.inter (re.inter (re.++ (re.++ re.all (re.range "a" "z")) re.all) (re.++ (re.++ re.all (re.range "0" "9")) re.all)) (re.++ (re.++ re.all (re.range "A" "Z")) re.all)) ((_ re.loop 8 20) re.allchar)) (re.union (re.inter (str.to_re "mypass1") re.none) (re.inter (re.comp (str.to_re "mypass1")) re.all))) (re.union (re.inter (str.to_re "mypass2") re.none) (re.inter (re.comp (str.to_re "mypass2")) re.all)))))
(check-sat)


(reset)
(set-logic QF_S)












(declare-const x String)
(assert (str.in_re x (re.inter (re.inter (re.inter (re.inter (re.inter (re.inter (re.inter (re.++ (re.++ (re.++ (re.++ re.all (re.range "a" "z")) re.all) (re.range "a" "z")) re.all) (re.++ (re.++ (re.++ (re.++ re.all (re.range "A" "Z")) re.all) (re.range "A" "Z")) re.all)) (re.++ (re.++ (re.++ (re.++ re.all (re.range "0" "9")) re.all) (re.range "0" "9")) re.all)) (re.++ (re.++ (re.++ (re.++ re.all (re.union (re.union (re.union (re.union (re.union (re.range (_ char #x0) "/") (re.range ":" "@")) (re.range "[" "^")) (str.to_re "`")) (re.range "{" (_ char #x7F))) (str.to_re "_"))) re.all) (re.union (re.union (re.union (re.union (re.union (re.range (_ char #x0) "/") (re.range ":" "@")) (re.range "[" "^")) (str.to_re "`")) (re.range "{" (_ char #x7F))) (str.to_re "_"))) re.all)) (re.* (re.range "!" "~"))) (re.union (re.inter (re.++ (re.++ (re.++ (re.++ (re.++ (re.++ (re.++ (re.++ (re.++ re.all (re.union (str.to_re "P") (str.to_re "p"))) (re.union (str.to_re "A") (str.to_re "a"))) (re.union (re.union (re.union (str.to_re "$") (str.to_re "5")) (str.to_re "S")) (str.to_re "s"))) (re.union (re.union (re.union (str.to_re "$") (str.to_re "5")) (str.to_re "S")) (str.to_re "s"))) (re.union (str.to_re "W") (str.to_re "w"))) (re.union (re.union (str.to_re "0") (str.to_re "O")) (str.to_re "o"))) (re.union (str.to_re "R") (str.to_re "r"))) (re.union (str.to_re "D") (str.to_re "d"))) re.all) re.none) (re.inter (re.comp (re.++ (re.++ (re.++ (re.++ (re.++ (re.++ (re.++ (re.++ (re.++ re.all (re.union (str.to_re "P") (str.to_re "p"))) (re.union (str.to_re "A") (str.to_re "a"))) (re.union (re.union (re.union (str.to_re "$") (str.to_re "5")) (str.to_re "S")) (str.to_re "s"))) (re.union (re.union (re.union (str.to_re "$") (str.to_re "5")) (str.to_re "S")) (str.to_re "s"))) (re.union (str.to_re "W") (str.to_re "w"))) (re.union (re.union (str.to_re "0") (str.to_re "O")) (str.to_re "o"))) (re.union (str.to_re "R") (str.to_re "r"))) (re.union (str.to_re "D") (str.to_re "d"))) re.all)) re.all))) (re.union (re.inter (re.++ (re.++ re.all (re.union (re.union (re.union (re.union (re.union (re.union (re.union (str.to_re "012") (str.to_re "123")) (str.to_re "234")) (str.to_re "345")) (str.to_re "456")) (str.to_re "567")) (str.to_re "678")) (str.to_re "789"))) re.all) re.none) (re.inter (re.comp (re.++ (re.++ re.all (re.union (re.union (re.union (re.union (re.union (re.union (re.union (str.to_re "012") (str.to_re "123")) (str.to_re "234")) (str.to_re "345")) (str.to_re "456")) (str.to_re "567")) (str.to_re "678")) (str.to_re "789"))) re.all)) re.all))) ((_ re.^ 12) re.allchar))))
(check-sat)


(reset)
(set-logic QF_S)












(declare-const x String)
(assert (str.in_re x (re.inter (re.inter (re.inter (re.inter (re.inter (re.inter (re.inter (re.++ (re.++ re.all (re.range "a" "z")) re.all) (re.++ (re.++ re.all (re.range "A" "Z")) re.all)) (re.++ (re.++ re.all (re.range "0" "9")) re.all)) (re.++ (re.++ re.all (re.union (re.union (re.union (re.union (re.union (re.range (_ char #x0) "/") (re.range ":" "@")) (re.range "[" "^")) (str.to_re "`")) (re.range "{" (_ char #x7F))) (str.to_re "_"))) re.all)) (re.* (re.range "!" "~"))) (re.union (re.inter (re.++ (re.++ (re.++ (re.++ (re.++ (re.++ (re.++ (re.++ (re.++ re.all (re.union (str.to_re "P") (str.to_re "p"))) (re.union (str.to_re "A") (str.to_re "a"))) (re.union (re.union (re.union (str.to_re "$") (str.to_re "5")) (str.to_re "S")) (str.to_re "s"))) (re.union (re.union (re.union (str.to_re "$") (str.to_re "5")) (str.to_re "S")) (str.to_re "s"))) (re.union (str.to_re "W") (str.to_re "w"))) (re.union (re.union (str.to_re "0") (str.to_re "O")) (str.to_re "o"))) (re.union (str.to_re "R") (str.to_re "r"))) (re.union (str.to_re "D") (str.to_re "d"))) re.all) re.none) (re.inter (re.comp (re.++ (re.++ (re.++ (re.++ (re.++ (re.++ (re.++ (re.++ (re.++ re.all (re.union (str.to_re "P") (str.to_re "p"))) (re.union (str.to_re "A") (str.to_re "a"))) (re.union (re.union (re.union (str.to_re "$") (str.to_re "5")) (str.to_re "S")) (str.to_re "s"))) (re.union (re.union (re.union (str.to_re "$") (str.to_re "5")) (str.to_re "S")) (str.to_re "s"))) (re.union (str.to_re "W") (str.to_re "w"))) (re.union (re.union (str.to_re "0") (str.to_re "O")) (str.to_re "o"))) (re.union (str.to_re "R") (str.to_re "r"))) (re.union (str.to_re "D") (str.to_re "d"))) re.all)) re.all))) (re.union (re.inter (re.++ (re.++ re.all (re.union (re.union (re.union (re.union (re.union (re.union (re.union (str.to_re "012") (str.to_re "123")) (str.to_re "234")) (str.to_re "345")) (str.to_re "456")) (str.to_re "567")) (str.to_re "678")) (str.to_re "789"))) re.all) re.none) (re.inter (re.comp (re.++ (re.++ re.all (re.union (re.union (re.union (re.union (re.union (re.union (re.union (str.to_re "012") (str.to_re "123")) (str.to_re "234")) (str.to_re "345")) (str.to_re "456")) (str.to_re "567")) (str.to_re "678")) (str.to_re "789"))) re.all)) re.all))) ((_ re.loop 6 10) re.allchar))))
(check-sat)


(reset)
(set-logic QF_S)












(declare-const x String)
(assert (str.in_re x (re.inter (re.inter (re.inter (re.inter (re.inter (re.inter (re.inter (re.++ (re.++ re.all (re.range "a" "z")) re.all) (re.++ (re.++ re.all (re.range "A" "Z")) re.all)) (re.++ (re.++ re.all (re.range "0" "9")) re.all)) (re.++ (re.++ re.all (re.union (re.union (re.union (re.union (re.union (re.range (_ char #x0) "/") (re.range ":" "@")) (re.range "[" "^")) (str.to_re "`")) (re.range "{" (_ char #x7F))) (str.to_re "_"))) re.all)) (re.* (re.range "!" "~"))) (re.union (re.inter (re.++ (re.++ (re.++ (re.++ (re.++ (re.++ (re.++ (re.++ (re.++ re.all (re.union (str.to_re "P") (str.to_re "p"))) (re.union (str.to_re "A") (str.to_re "a"))) (re.union (re.union (re.union (str.to_re "$") (str.to_re "5")) (str.to_re "S")) (str.to_re "s"))) (re.union (re.union (re.union (str.to_re "$") (str.to_re "5")) (str.to_re "S")) (str.to_re "s"))) (re.union (str.to_re "W") (str.to_re "w"))) (re.union (re.union (str.to_re "0") (str.to_re "O")) (str.to_re "o"))) (re.union (str.to_re "R") (str.to_re "r"))) (re.union (str.to_re "D") (str.to_re "d"))) re.all) re.none) (re.inter (re.comp (re.++ (re.++ (re.++ (re.++ (re.++ (re.++ (re.++ (re.++ (re.++ re.all (re.union (str.to_re "P") (str.to_re "p"))) (re.union (str.to_re "A") (str.to_re "a"))) (re.union (re.union (re.union (str.to_re "$") (str.to_re "5")) (str.to_re "S")) (str.to_re "s"))) (re.union (re.union (re.union (str.to_re "$") (str.to_re "5")) (str.to_re "S")) (str.to_re "s"))) (re.union (str.to_re "W") (str.to_re "w"))) (re.union (re.union (str.to_re "0") (str.to_re "O")) (str.to_re "o"))) (re.union (str.to_re "R") (str.to_re "r"))) (re.union (str.to_re "D") (str.to_re "d"))) re.all)) re.all))) (re.union (re.inter (re.++ (re.++ re.all (re.union (re.union (re.union (re.union (re.union (re.union (re.union (str.to_re "012") (str.to_re "123")) (str.to_re "234")) (str.to_re "345")) (str.to_re "456")) (str.to_re "567")) (str.to_re "678")) (str.to_re "789"))) re.all) re.none) (re.inter (re.comp (re.++ (re.++ re.all (re.union (re.union (re.union (re.union (re.union (re.union (re.union (str.to_re "012") (str.to_re "123")) (str.to_re "234")) (str.to_re "345")) (str.to_re "456")) (str.to_re "567")) (str.to_re "678")) (str.to_re "789"))) re.all)) re.all))) ((_ re.loop 8 10) re.allchar))))
(check-sat)


(reset)
(set-logic QF_S)












(declare-const x String)
(assert (str.in_re x (re.inter (re.inter (re.inter (re.inter (re.inter (re.inter (re.inter (re.++ (re.++ (re.++ (re.++ re.all (re.range "a" "z")) re.all) (re.range "a" "z")) re.all) (re.++ (re.++ (re.++ (re.++ re.all (re.range "A" "Z")) re.all) (re.range "A" "Z")) re.all)) (re.++ (re.++ (re.++ (re.++ re.all (re.range "0" "9")) re.all) (re.range "0" "9")) re.all)) (re.++ (re.++ (re.++ (re.++ re.all (re.union (re.union (re.union (re.union (re.union (re.range (_ char #x0) "/") (re.range ":" "@")) (re.range "[" "^")) (str.to_re "`")) (re.range "{" (_ char #x7F))) (str.to_re "_"))) re.all) (re.union (re.union (re.union (re.union (re.union (re.range (_ char #x0) "/") (re.range ":" "@")) (re.range "[" "^")) (str.to_re "`")) (re.range "{" (_ char #x7F))) (str.to_re "_"))) re.all)) (re.* (re.range "!" "~"))) (re.union (re.inter (re.++ (re.++ (re.++ (re.++ (re.++ (re.++ (re.++ (re.++ (re.++ re.all (re.union (str.to_re "P") (str.to_re "p"))) (re.union (str.to_re "A") (str.to_re "a"))) (re.union (re.union (re.union (str.to_re "$") (str.to_re "5")) (str.to_re "S")) (str.to_re "s"))) (re.union (re.union (re.union (str.to_re "$") (str.to_re "5")) (str.to_re "S")) (str.to_re "s"))) (re.union (str.to_re "W") (str.to_re "w"))) (re.union (re.union (str.to_re "0") (str.to_re "O")) (str.to_re "o"))) (re.union (str.to_re "R") (str.to_re "r"))) (re.union (str.to_re "D") (str.to_re "d"))) re.all) re.none) (re.inter (re.comp (re.++ (re.++ (re.++ (re.++ (re.++ (re.++ (re.++ (re.++ (re.++ re.all (re.union (str.to_re "P") (str.to_re "p"))) (re.union (str.to_re "A") (str.to_re "a"))) (re.union (re.union (re.union (str.to_re "$") (str.to_re "5")) (str.to_re "S")) (str.to_re "s"))) (re.union (re.union (re.union (str.to_re "$") (str.to_re "5")) (str.to_re "S")) (str.to_re "s"))) (re.union (str.to_re "W") (str.to_re "w"))) (re.union (re.union (str.to_re "0") (str.to_re "O")) (str.to_re "o"))) (re.union (str.to_re "R") (str.to_re "r"))) (re.union (str.to_re "D") (str.to_re "d"))) re.all)) re.all))) (re.union (re.inter (re.++ (re.++ re.all (re.union (re.union (re.union (re.union (re.union (re.union (re.union (str.to_re "012") (str.to_re "123")) (str.to_re "234")) (str.to_re "345")) (str.to_re "456")) (str.to_re "567")) (str.to_re "678")) (str.to_re "789"))) re.all) re.none) (re.inter (re.comp (re.++ (re.++ re.all (re.union (re.union (re.union (re.union (re.union (re.union (re.union (str.to_re "012") (str.to_re "123")) (str.to_re "234")) (str.to_re "345")) (str.to_re "456")) (str.to_re "567")) (str.to_re "678")) (str.to_re "789"))) re.all)) re.all))) ((_ re.loop 8 12) re.allchar))))
(check-sat)


(reset)
(set-logic QF_S)
(assert (=
    re.none
    (re.inter
        (re.++ re.all (re.range "a" "z") re.all)
        (re.++ re.all (re.range "0" "9") re.all)
        (re.++ re.all (re.range "A" "Z") re.all)
        ((_ re.loop 8 20) re.allchar)
        (re.* (re.range "A" "z"))
    )
))

(check-sat)

(reset)
(set-logic QF_S)






(assert (= re.none (re.inter (re.++ (re.++ re.all (str.to_re "a")) re.all) (re.* (str.to_re "b")))))
(check-sat)


(reset)
(set-logic QF_S)









(declare-const x String)
(assert (str.in_re x (re.inter (re.inter (re.inter (re.inter (re.++ (re.++ re.all (re.range "a" "z")) re.all) (re.++ (re.++ re.all (re.range "A" "Z")) re.all)) (re.++ (re.++ re.all (re.range "0" "9")) re.all)) (re.* (re.range "!" "~"))) ((_ re.loop 0 3) re.allchar))))
(check-sat)


(reset)
(set-logic QF_S)












(declare-const x String)
(assert (str.in_re x (re.inter (re.inter (re.inter (re.inter (re.inter (re.inter (re.inter (re.++ (re.++ re.all (re.range "a" "z")) re.all) (re.++ (re.++ re.all (re.range "A" "Z")) re.all)) (re.++ (re.++ re.all (re.range "0" "9")) re.all)) (re.++ (re.++ re.all (re.union (re.union (re.union (re.union (re.union (re.range (_ char #x0) "/") (re.range ":" "@")) (re.range "[" "^")) (str.to_re "`")) (re.range "{" (_ char #x7F))) (str.to_re "_"))) re.all)) (re.* (re.range "!" "~"))) (re.union (re.inter (re.++ (re.++ (re.++ (re.++ (re.++ (re.++ (re.++ (re.++ (re.++ re.all (re.union (str.to_re "P") (str.to_re "p"))) (re.union (str.to_re "A") (str.to_re "a"))) (re.union (re.union (re.union (str.to_re "$") (str.to_re "5")) (str.to_re "S")) (str.to_re "s"))) (re.union (re.union (re.union (str.to_re "$") (str.to_re "5")) (str.to_re "S")) (str.to_re "s"))) (re.union (str.to_re "W") (str.to_re "w"))) (re.union (re.union (str.to_re "0") (str.to_re "O")) (str.to_re "o"))) (re.union (str.to_re "R") (str.to_re "r"))) (re.union (str.to_re "D") (str.to_re "d"))) re.all) re.none) (re.inter (re.comp (re.++ (re.++ (re.++ (re.++ (re.++ (re.++ (re.++ (re.++ (re.++ re.all (re.union (str.to_re "P") (str.to_re "p"))) (re.union (str.to_re "A") (str.to_re "a"))) (re.union (re.union (re.union (str.to_re "$") (str.to_re "5")) (str.to_re "S")) (str.to_re "s"))) (re.union (re.union (re.union (str.to_re "$") (str.to_re "5")) (str.to_re "S")) (str.to_re "s"))) (re.union (str.to_re "W") (str.to_re "w"))) (re.union (re.union (str.to_re "0") (str.to_re "O")) (str.to_re "o"))) (re.union (str.to_re "R") (str.to_re "r"))) (re.union (str.to_re "D") (str.to_re "d"))) re.all)) re.all))) (re.union (re.inter (re.++ (re.++ re.all (re.union (re.union (re.union (re.union (re.union (re.union (re.union (str.to_re "012") (str.to_re "123")) (str.to_re "234")) (str.to_re "345")) (str.to_re "456")) (str.to_re "567")) (str.to_re "678")) (str.to_re "789"))) re.all) re.none) (re.inter (re.comp (re.++ (re.++ re.all (re.union (re.union (re.union (re.union (re.union (re.union (re.union (str.to_re "012") (str.to_re "123")) (str.to_re "234")) (str.to_re "345")) (str.to_re "456")) (str.to_re "567")) (str.to_re "678")) (str.to_re "789"))) re.all)) re.all))) ((_ re.loop 4 10) re.allchar))))
(check-sat)


(reset)
(set-logic QF_S)












(declare-const x String)
(assert (str.in_re x (re.inter (re.inter (re.inter (re.inter (re.inter (re.inter (re.inter (re.++ (re.++ (re.++ (re.++ re.all (re.range "a" "z")) re.all) (re.range "a" "z")) re.all) (re.++ (re.++ (re.++ (re.++ re.all (re.range "A" "Z")) re.all) (re.range "A" "Z")) re.all)) (re.++ (re.++ (re.++ (re.++ re.all (re.range "0" "9")) re.all) (re.range "0" "9")) re.all)) (re.++ (re.++ (re.++ (re.++ re.all (re.union (re.union (re.union (re.union (re.union (re.range (_ char #x0) "/") (re.range ":" "@")) (re.range "[" "^")) (str.to_re "`")) (re.range "{" (_ char #x7F))) (str.to_re "_"))) re.all) (re.union (re.union (re.union (re.union (re.union (re.range (_ char #x0) "/") (re.range ":" "@")) (re.range "[" "^")) (str.to_re "`")) (re.range "{" (_ char #x7F))) (str.to_re "_"))) re.all)) (re.* (re.range "!" "~"))) (re.union (re.inter (re.++ (re.++ (re.++ (re.++ (re.++ (re.++ (re.++ (re.++ (re.++ re.all (re.union (str.to_re "P") (str.to_re "p"))) (re.union (str.to_re "A") (str.to_re "a"))) (re.union (re.union (re.union (str.to_re "$") (str.to_re "5")) (str.to_re "S")) (str.to_re "s"))) (re.union (re.union (re.union (str.to_re "$") (str.to_re "5")) (str.to_re "S")) (str.to_re "s"))) (re.union (str.to_re "W") (str.to_re "w"))) (re.union (re.union (str.to_re "0") (str.to_re "O")) (str.to_re "o"))) (re.union (str.to_re "R") (str.to_re "r"))) (re.union (str.to_re "D") (str.to_re "d"))) re.all) re.none) (re.inter (re.comp (re.++ (re.++ (re.++ (re.++ (re.++ (re.++ (re.++ (re.++ (re.++ re.all (re.union (str.to_re "P") (str.to_re "p"))) (re.union (str.to_re "A") (str.to_re "a"))) (re.union (re.union (re.union (str.to_re "$") (str.to_re "5")) (str.to_re "S")) (str.to_re "s"))) (re.union (re.union (re.union (str.to_re "$") (str.to_re "5")) (str.to_re "S")) (str.to_re "s"))) (re.union (str.to_re "W") (str.to_re "w"))) (re.union (re.union (str.to_re "0") (str.to_re "O")) (str.to_re "o"))) (re.union (str.to_re "R") (str.to_re "r"))) (re.union (str.to_re "D") (str.to_re "d"))) re.all)) re.all))) (re.union (re.inter (re.++ (re.++ re.all (re.union (re.union (re.union (re.union (re.union (re.union (re.union (str.to_re "012") (str.to_re "123")) (str.to_re "234")) (str.to_re "345")) (str.to_re "456")) (str.to_re "567")) (str.to_re "678")) (str.to_re "789"))) re.all) re.none) (re.inter (re.comp (re.++ (re.++ re.all (re.union (re.union (re.union (re.union (re.union (re.union (re.union (str.to_re "012") (str.to_re "123")) (str.to_re "234")) (str.to_re "345")) (str.to_re "456")) (str.to_re "567")) (str.to_re "678")) (str.to_re "789"))) re.all)) re.all))) ((_ re.loop 11 12) re.allchar))))
(check-sat)


(reset)
(set-logic QF_S)












(declare-const x String)
(assert (str.in_re x (re.inter (re.inter (re.inter (re.inter (re.inter (re.inter (re.inter (re.++ (re.++ re.all (re.range "a" "z")) re.all) (re.++ (re.++ re.all (re.range "A" "Z")) re.all)) (re.++ (re.++ re.all (re.range "0" "9")) re.all)) (re.++ (re.++ re.all (re.union (re.union (re.union (re.union (re.union (re.range (_ char #x0) "/") (re.range ":" "@")) (re.range "[" "^")) (str.to_re "`")) (re.range "{" (_ char #x7F))) (str.to_re "_"))) re.all)) (re.* (re.range "!" "~"))) (re.union (re.inter (re.++ (re.++ (re.++ (re.++ (re.++ (re.++ (re.++ (re.++ (re.++ re.all (re.union (str.to_re "P") (str.to_re "p"))) (re.union (str.to_re "A") (str.to_re "a"))) (re.union (re.union (re.union (str.to_re "$") (str.to_re "5")) (str.to_re "S")) (str.to_re "s"))) (re.union (re.union (re.union (str.to_re "$") (str.to_re "5")) (str.to_re "S")) (str.to_re "s"))) (re.union (str.to_re "W") (str.to_re "w"))) (re.union (re.union (str.to_re "0") (str.to_re "O")) (str.to_re "o"))) (re.union (str.to_re "R") (str.to_re "r"))) (re.union (str.to_re "D") (str.to_re "d"))) re.all) re.none) (re.inter (re.comp (re.++ (re.++ (re.++ (re.++ (re.++ (re.++ (re.++ (re.++ (re.++ re.all (re.union (str.to_re "P") (str.to_re "p"))) (re.union (str.to_re "A") (str.to_re "a"))) (re.union (re.union (re.union (str.to_re "$") (str.to_re "5")) (str.to_re "S")) (str.to_re "s"))) (re.union (re.union (re.union (str.to_re "$") (str.to_re "5")) (str.to_re "S")) (str.to_re "s"))) (re.union (str.to_re "W") (str.to_re "w"))) (re.union (re.union (str.to_re "0") (str.to_re "O")) (str.to_re "o"))) (re.union (str.to_re "R") (str.to_re "r"))) (re.union (str.to_re "D") (str.to_re "d"))) re.all)) re.all))) (re.union (re.inter (re.++ (re.++ re.all (re.union (re.union (re.union (re.union (re.union (re.union (re.union (str.to_re "012") (str.to_re "123")) (str.to_re "234")) (str.to_re "345")) (str.to_re "456")) (str.to_re "567")) (str.to_re "678")) (str.to_re "789"))) re.all) re.none) (re.inter (re.comp (re.++ (re.++ re.all (re.union (re.union (re.union (re.union (re.union (re.union (re.union (str.to_re "012") (str.to_re "123")) (str.to_re "234")) (str.to_re "345")) (str.to_re "456")) (str.to_re "567")) (str.to_re "678")) (str.to_re "789"))) re.all)) re.all))) ((_ re.loop 9 10) re.allchar))))
(check-sat)


(reset)
(set-logic QF_S)
(assert (=
    re.none
    (re.inter
        (re.++ re.all (re.range "a" "z") re.all)
        (re.* (re.range "A" "Z"))
    )
))

(check-sat)

(reset)
(set-logic QF_S)












(declare-const x String)
(assert (str.in_re x (re.inter (re.inter (re.inter (re.inter (re.inter (re.inter (re.inter (re.++ (re.++ re.all (re.range "a" "z")) re.all) (re.++ (re.++ re.all (re.range "A" "Z")) re.all)) (re.++ (re.++ re.all (re.range "0" "9")) re.all)) (re.++ (re.++ re.all (re.union (re.union (re.union (re.union (re.union (re.range (_ char #x0) "/") (re.range ":" "@")) (re.range "[" "^")) (str.to_re "`")) (re.range "{" (_ char #x7F))) (str.to_re "_"))) re.all)) (re.* (re.range "!" "~"))) (re.union (re.inter (re.++ (re.++ (re.++ (re.++ (re.++ (re.++ (re.++ (re.++ (re.++ re.all (re.union (str.to_re "P") (str.to_re "p"))) (re.union (str.to_re "A") (str.to_re "a"))) (re.union (re.union (re.union (str.to_re "$") (str.to_re "5")) (str.to_re "S")) (str.to_re "s"))) (re.union (re.union (re.union (str.to_re "$") (str.to_re "5")) (str.to_re "S")) (str.to_re "s"))) (re.union (str.to_re "W") (str.to_re "w"))) (re.union (re.union (str.to_re "0") (str.to_re "O")) (str.to_re "o"))) (re.union (str.to_re "R") (str.to_re "r"))) (re.union (str.to_re "D") (str.to_re "d"))) re.all) re.none) (re.inter (re.comp (re.++ (re.++ (re.++ (re.++ (re.++ (re.++ (re.++ (re.++ (re.++ re.all (re.union (str.to_re "P") (str.to_re "p"))) (re.union (str.to_re "A") (str.to_re "a"))) (re.union (re.union (re.union (str.to_re "$") (str.to_re "5")) (str.to_re "S")) (str.to_re "s"))) (re.union (re.union (re.union (str.to_re "$") (str.to_re "5")) (str.to_re "S")) (str.to_re "s"))) (re.union (str.to_re "W") (str.to_re "w"))) (re.union (re.union (str.to_re "0") (str.to_re "O")) (str.to_re "o"))) (re.union (str.to_re "R") (str.to_re "r"))) (re.union (str.to_re "D") (str.to_re "d"))) re.all)) re.all))) (re.union (re.inter (re.++ (re.++ re.all (re.union (re.union (re.union (re.union (re.union (re.union (re.union (str.to_re "012") (str.to_re "123")) (str.to_re "234")) (str.to_re "345")) (str.to_re "456")) (str.to_re "567")) (str.to_re "678")) (str.to_re "789"))) re.all) re.none) (re.inter (re.comp (re.++ (re.++ re.all (re.union (re.union (re.union (re.union (re.union (re.union (re.union (str.to_re "012") (str.to_re "123")) (str.to_re "234")) (str.to_re "345")) (str.to_re "456")) (str.to_re "567")) (str.to_re "678")) (str.to_re "789"))) re.all)) re.all))) ((_ re.loop 7 10) re.allchar))))
(check-sat)


(reset)
(set-logic QF_S)












(declare-const x String)
(assert (str.in_re x (re.inter (re.inter (re.inter (re.inter (re.inter (re.inter (re.inter (re.++ (re.++ (re.++ (re.++ re.all (re.range "a" "z")) re.all) (re.range "a" "z")) re.all) (re.++ (re.++ (re.++ (re.++ re.all (re.range "A" "Z")) re.all) (re.range "A" "Z")) re.all)) (re.++ (re.++ (re.++ (re.++ re.all (re.range "0" "9")) re.all) (re.range "0" "9")) re.all)) (re.++ (re.++ (re.++ (re.++ re.all (re.union (re.union (re.union (re.union (re.union (re.range (_ char #x0) "/") (re.range ":" "@")) (re.range "[" "^")) (str.to_re "`")) (re.range "{" (_ char #x7F))) (str.to_re "_"))) re.all) (re.union (re.union (re.union (re.union (re.union (re.range (_ char #x0) "/") (re.range ":" "@")) (re.range "[" "^")) (str.to_re "`")) (re.range "{" (_ char #x7F))) (str.to_re "_"))) re.all)) (re.* (re.range "!" "~"))) (re.union (re.inter (re.++ (re.++ (re.++ (re.++ (re.++ (re.++ (re.++ (re.++ (re.++ re.all (re.union (str.to_re "P") (str.to_re "p"))) (re.union (str.to_re "A") (str.to_re "a"))) (re.union (re.union (re.union (str.to_re "$") (str.to_re "5")) (str.to_re "S")) (str.to_re "s"))) (re.union (re.union (re.union (str.to_re "$") (str.to_re "5")) (str.to_re "S")) (str.to_re "s"))) (re.union (str.to_re "W") (str.to_re "w"))) (re.union (re.union (str.to_re "0") (str.to_re "O")) (str.to_re "o"))) (re.union (str.to_re "R") (str.to_re "r"))) (re.union (str.to_re "D") (str.to_re "d"))) re.all) re.none) (re.inter (re.comp (re.++ (re.++ (re.++ (re.++ (re.++ (re.++ (re.++ (re.++ (re.++ re.all (re.union (str.to_re "P") (str.to_re "p"))) (re.union (str.to_re "A") (str.to_re "a"))) (re.union (re.union (re.union (str.to_re "$") (str.to_re "5")) (str.to_re "S")) (str.to_re "s"))) (re.union (re.union (re.union (str.to_re "$") (str.to_re "5")) (str.to_re "S")) (str.to_re "s"))) (re.union (str.to_re "W") (str.to_re "w"))) (re.union (re.union (str.to_re "0") (str.to_re "O")) (str.to_re "o"))) (re.union (str.to_re "R") (str.to_re "r"))) (re.union (str.to_re "D") (str.to_re "d"))) re.all)) re.all))) (re.union (re.inter (re.++ (re.++ re.all (re.union (re.union (re.union (re.union (re.union (re.union (re.union (str.to_re "012") (str.to_re "123")) (str.to_re "234")) (str.to_re "345")) (str.to_re "456")) (str.to_re "567")) (str.to_re "678")) (str.to_re "789"))) re.all) re.none) (re.inter (re.comp (re.++ (re.++ re.all (re.union (re.union (re.union (re.union (re.union (re.union (re.union (str.to_re "012") (str.to_re "123")) (str.to_re "234")) (str.to_re "345")) (str.to_re "456")) (str.to_re "567")) (str.to_re "678")) (str.to_re "789"))) re.all)) re.all))) ((_ re.loop 10 12) re.allchar))))
(check-sat)


(reset)
(set-logic QF_S)












(declare-const x String)
(assert (str.in_re x (re.inter (re.inter (re.inter (re.inter (re.inter (re.inter (re.inter (re.++ (re.++ re.all (re.range "a" "z")) re.all) (re.++ (re.++ re.all (re.range "A" "Z")) re.all)) (re.++ (re.++ re.all (re.range "0" "9")) re.all)) (re.++ (re.++ re.all (re.union (re.union (re.union (re.union (re.union (re.range (_ char #x0) "/") (re.range ":" "@")) (re.range "[" "^")) (str.to_re "`")) (re.range "{" (_ char #x7F))) (str.to_re "_"))) re.all)) (re.* (re.range "!" "~"))) (re.union (re.inter (re.++ (re.++ (re.++ (re.++ (re.++ (re.++ (re.++ (re.++ (re.++ re.all (re.union (str.to_re "P") (str.to_re "p"))) (re.union (str.to_re "A") (str.to_re "a"))) (re.union (re.union (re.union (str.to_re "$") (str.to_re "5")) (str.to_re "S")) (str.to_re "s"))) (re.union (re.union (re.union (str.to_re "$") (str.to_re "5")) (str.to_re "S")) (str.to_re "s"))) (re.union (str.to_re "W") (str.to_re "w"))) (re.union (re.union (str.to_re "0") (str.to_re "O")) (str.to_re "o"))) (re.union (str.to_re "R") (str.to_re "r"))) (re.union (str.to_re "D") (str.to_re "d"))) re.all) re.none) (re.inter (re.comp (re.++ (re.++ (re.++ (re.++ (re.++ (re.++ (re.++ (re.++ (re.++ re.all (re.union (str.to_re "P") (str.to_re "p"))) (re.union (str.to_re "A") (str.to_re "a"))) (re.union (re.union (re.union (str.to_re "$") (str.to_re "5")) (str.to_re "S")) (str.to_re "s"))) (re.union (re.union (re.union (str.to_re "$") (str.to_re "5")) (str.to_re "S")) (str.to_re "s"))) (re.union (str.to_re "W") (str.to_re "w"))) (re.union (re.union (str.to_re "0") (str.to_re "O")) (str.to_re "o"))) (re.union (str.to_re "R") (str.to_re "r"))) (re.union (str.to_re "D") (str.to_re "d"))) re.all)) re.all))) (re.union (re.inter (re.++ (re.++ re.all (re.union (re.union (re.union (re.union (re.union (re.union (re.union (str.to_re "012") (str.to_re "123")) (str.to_re "234")) (str.to_re "345")) (str.to_re "456")) (str.to_re "567")) (str.to_re "678")) (str.to_re "789"))) re.all) re.none) (re.inter (re.comp (re.++ (re.++ re.all (re.union (re.union (re.union (re.union (re.union (re.union (re.union (str.to_re "012") (str.to_re "123")) (str.to_re "234")) (str.to_re "345")) (str.to_re "456")) (str.to_re "567")) (str.to_re "678")) (str.to_re "789"))) re.all)) re.all))) ((_ re.loop 5 10) re.allchar))))
(check-sat)


(reset)








(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const regexB RegLan)
(declare-const x String)

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))(re.++ (re.* (re.++ (re.opt (re.range "-" ".")) (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z"))))))(re.++ (re.range "@" "@")(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z"))))(re.++ (re.* (re.++ (re.opt (re.range "-" ".")) (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z"))))))(re.++ (str.to_re (str.++ "." (str.++ " " "")))(re.++ (re.++ (re.union (re.range "A" "Z") (re.range "a" "z")) (re.+ (re.union (re.range "A" "Z") (re.range "a" "z")))) (str.to_re "")))))))))))

(assert (= regexB (re.++ (str.to_re "")(re.++ (re.+ (re.union (re.range "-" ".")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))))(re.++ (re.range "@" "@")(re.++ (re.union ((_ re.loop 1 67) (re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))) (re.++ (re.+ (re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))))(re.++ (re.range "." ".") ((_ re.loop 1 67) (re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))))))(re.++ (re.range "." ".")(re.++ (re.++ ((_ re.loop 2 4) (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))) (re.opt (re.++ (re.range "." ".") ((_ re.loop 2 2) (re.union (re.range "0" "9")(re.union (re.range "A" "A")(re.union (re.range "Z" "Z") (re.range "a" "z")))))))) (str.to_re "")))))))))


(assert (str.in_re x regexA))
(assert (str.in_re x regexB))
(check-sat)

(reset)








(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const regexB RegLan)
(declare-const x String)

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.opt (re.union ((_ re.loop 2 2) (re.range "A" "Z"))(re.union (re.++ ((_ re.loop 2 2) (re.range "a" "z"))(re.++ (re.range " " " ")(re.++ ((_ re.loop 2 2) (re.range "0" "9"))(re.++ (re.range " " " ") ((_ re.loop 1 2) (re.range "A" "Z")))))) (re.++ ((_ re.loop 1 2) (re.range "a" "z"))(re.++ (re.range " " " ") ((_ re.loop 1 4) (re.range "0" "9")))))))(re.++ (re.opt (re.union ((_ re.loop 3 3) (re.range "A" "Z")) (re.++ ((_ re.loop 3 3) (re.range "a" "z"))(re.++ (re.range " " " ") ((_ re.loop 1 4) (re.range "0" "9")))))) (str.to_re ""))))))

(assert (= regexB (re.++ (str.to_re "")(re.++ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))(re.++ (re.* (re.++ (re.opt (re.range "-" ".")) (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z"))))))(re.++ (re.range "@" "@")(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z"))))(re.++ (re.* (re.++ (re.opt (re.range "-" ".")) (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z"))))))(re.++ (str.to_re (str.++ "." (str.++ " " "")))(re.++ (re.++ (re.union (re.range "A" "Z") (re.range "a" "z")) (re.+ (re.union (re.range "A" "Z") (re.range "a" "z")))) (str.to_re "")))))))))))


(assert (str.in_re x regexA))
(assert (str.in_re x regexB))
(check-sat)

(reset)








(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const regexB RegLan)
(declare-const x String)

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.opt (re.range "$" "$"))(re.++ (re.union (re.++ ((_ re.loop 1 3) (re.range "0" "9"))(re.++ (re.opt (re.range "," ","))(re.++ (re.* (re.++ ((_ re.loop 3 3) (re.range "0" "9")) (re.opt (re.range "," ","))))(re.++ ((_ re.loop 3 3) (re.range "0" "9")) (re.opt (re.++ (re.range "." ".") ((_ re.loop 0 2) (re.range "0" "9"))))))))(re.union (re.++ ((_ re.loop 1 3) (re.range "0" "9")) (re.opt (re.++ (re.range "." ".") ((_ re.loop 0 2) (re.range "0" "9"))))) (re.++ (re.range "." ".") (re.opt ((_ re.loop 1 2) (re.range "0" "9")))))) (str.to_re ""))))))

(assert (= regexB (re.++ (str.to_re "")(re.++ (re.+ (re.union (re.range "-" ".")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))))(re.++ (re.range "@" "@")(re.++ (re.union ((_ re.loop 1 67) (re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))) (re.++ (re.+ (re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))))(re.++ (re.range "." ".") ((_ re.loop 1 67) (re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))))))(re.++ (re.range "." ".")(re.++ (re.++ ((_ re.loop 2 4) (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))) (re.opt (re.++ (re.range "." ".") ((_ re.loop 2 2) (re.union (re.range "0" "9")(re.union (re.range "A" "A")(re.union (re.range "Z" "Z") (re.range "a" "z")))))))) (str.to_re "")))))))))


(assert (str.in_re x regexA))
(assert (str.in_re x regexB))
(check-sat)

(reset)








(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const regexB RegLan)
(declare-const x String)

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.opt (re.union (re.range "+" "+") (re.range "-" "-")))(re.++ (re.union (re.++ (re.* (re.range "0" "9"))(re.++ (re.opt (re.range "." ".")) (re.+ (re.range "0" "9")))) (re.++ (re.+ (re.range "0" "9"))(re.++ (re.opt (re.range "." ".")) (re.* (re.range "0" "9")))))(re.++ (re.opt (re.++ (re.union (re.range "E" "E") (re.range "e" "e"))(re.++ (re.opt (re.union (re.range "+" "+") (re.range "-" "-"))) (re.+ (re.range "0" "9"))))) (str.to_re "")))))))

(assert (= regexB (re.++ (str.to_re "")(re.++ (re.+ (re.union (re.range "-" ".")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))))(re.++ (re.range "@" "@")(re.++ (re.union ((_ re.loop 1 67) (re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))) (re.++ (re.+ (re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))))(re.++ (re.range "." ".") ((_ re.loop 1 67) (re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))))))(re.++ (re.range "." ".")(re.++ (re.++ ((_ re.loop 2 4) (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))) (re.opt (re.++ (re.range "." ".") ((_ re.loop 2 2) (re.union (re.range "0" "9")(re.union (re.range "A" "A")(re.union (re.range "Z" "Z") (re.range "a" "z")))))))) (str.to_re "")))))))))


(assert (str.in_re x regexA))
(assert (str.in_re x regexB))
(check-sat)

(reset)








(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const regexB RegLan)
(declare-const x String)

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.opt (re.range "$" "$"))(re.++ (re.union (re.++ ((_ re.loop 1 3) (re.range "0" "9"))(re.++ (re.opt (re.range "," ","))(re.++ (re.* (re.++ ((_ re.loop 3 3) (re.range "0" "9")) (re.opt (re.range "," ","))))(re.++ ((_ re.loop 3 3) (re.range "0" "9")) (re.opt (re.++ (re.range "." ".") ((_ re.loop 0 2) (re.range "0" "9"))))))))(re.union (re.++ ((_ re.loop 1 3) (re.range "0" "9")) (re.opt (re.++ (re.range "." ".") ((_ re.loop 0 2) (re.range "0" "9"))))) (re.++ (re.range "." ".") (re.opt ((_ re.loop 1 2) (re.range "0" "9")))))) (str.to_re ""))))))

(assert (= regexB (re.++ (str.to_re "")(re.++ (re.+ (re.++ (re.+ (re.union (re.range "-" ".")(re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))))(re.++ (re.range "@" "@")(re.++ (re.+ (re.union (re.range "-" ".")(re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))))(re.++ (re.range "." ".") ((_ re.loop 1 25) ((_ re.loop 2 5) (re.union (re.range "A" "Z") (re.range "a" "z")))))))))(re.++ (re.* (re.+ (re.++ (re.+ (re.union (re.range "-" ".")(re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))))(re.++ (re.range "@" "@")(re.++ (re.+ (re.union (re.range "-" ".")(re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))))(re.++ (re.range "." ".") ((_ re.loop 1 25) ((_ re.loop 2 5) (re.union (re.range "A" "Z") (re.range "a" "z")))))))))) (str.to_re ""))))))


(assert (str.in_re x regexA))
(assert (str.in_re x regexB))
(check-sat)

(reset)








(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const regexB RegLan)
(declare-const x String)

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.opt (re.range "$" "$"))(re.++ (re.union (re.++ ((_ re.loop 1 3) (re.range "0" "9"))(re.++ (re.opt (re.range "," ","))(re.++ (re.* (re.++ ((_ re.loop 3 3) (re.range "0" "9")) (re.opt (re.range "," ","))))(re.++ ((_ re.loop 3 3) (re.range "0" "9")) (re.opt (re.++ (re.range "." ".") ((_ re.loop 0 2) (re.range "0" "9"))))))))(re.union (re.++ ((_ re.loop 1 3) (re.range "0" "9")) (re.opt (re.++ (re.range "." ".") ((_ re.loop 0 2) (re.range "0" "9"))))) (re.++ (re.range "." ".") (re.opt ((_ re.loop 1 2) (re.range "0" "9")))))) (str.to_re ""))))))

(assert (= regexB (re.++ (str.to_re "")(re.++ (re.+ (re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))))(re.++ (re.range "@" "@")(re.++ (re.+ (re.++ (re.+ (re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))) (re.range "." ".")))(re.++ (re.+ (re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))) (str.to_re ""))))))))


(assert (str.in_re x regexA))
(assert (str.in_re x regexB))
(check-sat)

(reset)








(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const regexB RegLan)
(declare-const x String)

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.opt (re.union ((_ re.loop 2 2) (re.range "A" "Z"))(re.union (re.++ ((_ re.loop 2 2) (re.range "a" "z"))(re.++ (re.range " " " ")(re.++ ((_ re.loop 2 2) (re.range "0" "9"))(re.++ (re.range " " " ") ((_ re.loop 1 2) (re.range "A" "Z")))))) (re.++ ((_ re.loop 1 2) (re.range "a" "z"))(re.++ (re.range " " " ") ((_ re.loop 1 4) (re.range "0" "9")))))))(re.++ (re.opt (re.union ((_ re.loop 3 3) (re.range "A" "Z")) (re.++ ((_ re.loop 3 3) (re.range "a" "z"))(re.++ (re.range " " " ") ((_ re.loop 1 4) (re.range "0" "9")))))) (str.to_re ""))))))

(assert (= regexB (re.++ (str.to_re "")(re.++ (re.opt (re.union (re.range "+" "+") (re.range "-" "-")))(re.++ (re.union (re.++ (re.* (re.range "0" "9"))(re.++ (re.opt (re.range "." ".")) (re.+ (re.range "0" "9")))) (re.++ (re.+ (re.range "0" "9"))(re.++ (re.opt (re.range "." ".")) (re.* (re.range "0" "9")))))(re.++ (re.opt (re.++ (re.union (re.range "E" "E") (re.range "e" "e"))(re.++ (re.opt (re.union (re.range "+" "+") (re.range "-" "-"))) (re.+ (re.range "0" "9"))))) (str.to_re "")))))))


(assert (str.in_re x regexA))
(assert (str.in_re x regexB))
(check-sat)

(reset)








(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const regexB RegLan)
(declare-const x String)

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.opt (re.union ((_ re.loop 2 2) (re.range "A" "Z"))(re.union (re.++ ((_ re.loop 2 2) (re.range "a" "z"))(re.++ (re.range " " " ")(re.++ ((_ re.loop 2 2) (re.range "0" "9"))(re.++ (re.range " " " ") ((_ re.loop 1 2) (re.range "A" "Z")))))) (re.++ ((_ re.loop 1 2) (re.range "a" "z"))(re.++ (re.range " " " ") ((_ re.loop 1 4) (re.range "0" "9")))))))(re.++ (re.opt (re.union ((_ re.loop 3 3) (re.range "A" "Z")) (re.++ ((_ re.loop 3 3) (re.range "a" "z"))(re.++ (re.range " " " ") ((_ re.loop 1 4) (re.range "0" "9")))))) (str.to_re ""))))))

(assert (= regexB (re.++ (str.to_re "")(re.++ (re.* (re.union (re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))) (re.+ (re.range " " " ")))(re.union (re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))) (re.+ (re.range "-" "-")))(re.union (re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))) (re.+ (re.range "." "."))) (re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))) (re.+ (re.range "+" "+")))))))(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z"))))(re.++ (re.range "@" "@")(re.++ (re.* (re.union (re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))) (re.+ (re.range "-" "-"))) (re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))) (re.range "." "."))))(re.++ ((_ re.loop 1 63) (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))(re.++ (re.range "." ".")(re.++ ((_ re.loop 2 6) (re.union (re.range "A" "Z") (re.range "a" "z"))) (str.to_re "")))))))))))


(assert (str.in_re x regexA))
(assert (str.in_re x regexB))
(check-sat)

(reset)








(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const regexB RegLan)
(declare-const x String)

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.opt (re.range "$" "$"))(re.++ (re.union (re.++ ((_ re.loop 1 3) (re.range "0" "9"))(re.++ (re.opt (re.range "," ","))(re.++ (re.* (re.++ ((_ re.loop 3 3) (re.range "0" "9")) (re.opt (re.range "," ","))))(re.++ ((_ re.loop 3 3) (re.range "0" "9")) (re.opt (re.++ (re.range "." ".") ((_ re.loop 0 2) (re.range "0" "9"))))))))(re.union (re.++ ((_ re.loop 1 3) (re.range "0" "9")) (re.opt (re.++ (re.range "." ".") ((_ re.loop 0 2) (re.range "0" "9"))))) (re.++ (re.range "." ".") (re.opt ((_ re.loop 1 2) (re.range "0" "9")))))) (str.to_re ""))))))

(assert (= regexB (re.++ (str.to_re "")(re.++ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))(re.++ (re.* (re.++ (re.opt (re.range "-" ".")) (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z"))))))(re.++ (re.range "@" "@")(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z"))))(re.++ (re.* (re.++ (re.opt (re.range "-" ".")) (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z"))))))(re.++ (str.to_re (str.++ "." (str.++ " " "")))(re.++ (re.++ (re.union (re.range "A" "Z") (re.range "a" "z")) (re.+ (re.union (re.range "A" "Z") (re.range "a" "z")))) (str.to_re "")))))))))))


(assert (str.in_re x regexA))
(assert (str.in_re x regexB))
(check-sat)

(reset)








(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const regexB RegLan)
(declare-const x String)

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.opt (re.range "$" "$"))(re.++ (re.union (re.++ ((_ re.loop 1 3) (re.range "0" "9"))(re.++ (re.opt (re.range "," ","))(re.++ (re.* (re.++ ((_ re.loop 3 3) (re.range "0" "9")) (re.opt (re.range "," ","))))(re.++ ((_ re.loop 3 3) (re.range "0" "9")) (re.opt (re.++ (re.range "." ".") ((_ re.loop 0 2) (re.range "0" "9"))))))))(re.union (re.++ ((_ re.loop 1 3) (re.range "0" "9")) (re.opt (re.++ (re.range "." ".") ((_ re.loop 0 2) (re.range "0" "9"))))) (re.++ (re.range "." ".") (re.opt ((_ re.loop 1 2) (re.range "0" "9")))))) (str.to_re ""))))))

(assert (= regexB (re.++ (str.to_re "")(re.++ (re.opt (re.union ((_ re.loop 2 2) (re.range "A" "Z"))(re.union (re.++ ((_ re.loop 2 2) (re.range "a" "z"))(re.++ (re.range " " " ")(re.++ ((_ re.loop 2 2) (re.range "0" "9"))(re.++ (re.range " " " ") ((_ re.loop 1 2) (re.range "A" "Z")))))) (re.++ ((_ re.loop 1 2) (re.range "a" "z"))(re.++ (re.range " " " ") ((_ re.loop 1 4) (re.range "0" "9")))))))(re.++ (re.opt (re.union ((_ re.loop 3 3) (re.range "A" "Z")) (re.++ ((_ re.loop 3 3) (re.range "a" "z"))(re.++ (re.range " " " ") ((_ re.loop 1 4) (re.range "0" "9")))))) (str.to_re ""))))))


(assert (str.in_re x regexA))
(assert (str.in_re x regexB))
(check-sat)

(reset)








(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const regexB RegLan)
(declare-const x String)

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.opt (re.union ((_ re.loop 2 2) (re.range "A" "Z"))(re.union (re.++ ((_ re.loop 2 2) (re.range "a" "z"))(re.++ (re.range " " " ")(re.++ ((_ re.loop 2 2) (re.range "0" "9"))(re.++ (re.range " " " ") ((_ re.loop 1 2) (re.range "A" "Z")))))) (re.++ ((_ re.loop 1 2) (re.range "a" "z"))(re.++ (re.range " " " ") ((_ re.loop 1 4) (re.range "0" "9")))))))(re.++ (re.opt (re.union ((_ re.loop 3 3) (re.range "A" "Z")) (re.++ ((_ re.loop 3 3) (re.range "a" "z"))(re.++ (re.range " " " ") ((_ re.loop 1 4) (re.range "0" "9")))))) (str.to_re ""))))))

(assert (= regexB (re.++ (str.to_re "")(re.++ (re.+ (re.++ (re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))(re.++ (re.* (re.++ (re.union (re.range "+" "+") (re.range "-" ".")) (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))))(re.++ (re.range "@" "@")(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))(re.++ (re.* (re.++ (re.range "-" ".") (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))))(re.++ (re.range "." ".")(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))) (re.* (re.++ (re.range "-" ".") (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))))))))))))(re.++ (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (re.opt (re.range "," ",")) (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))))))) (str.to_re "")))))


(assert (str.in_re x regexA))
(assert (str.in_re x regexB))
(check-sat)

(reset)








(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const regexB RegLan)
(declare-const x String)

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))(re.++ (re.* (re.++ (re.union (re.range "+" "+") (re.range "-" ".")) (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))))(re.++ (re.range "@" "@")(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))(re.++ (re.* (re.++ (re.range "-" ".") (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))))(re.++ (re.range "." ".")(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))(re.++ (re.* (re.++ (re.range "-" ".") (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))))(re.++ (re.* (re.++ (re.union (re.range "," ",") (re.range ";" ";"))(re.++ (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))(re.++ (re.* (re.++ (re.union (re.range "+" "+") (re.range "-" ".")) (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))))(re.++ (re.range "@" "@")(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))(re.++ (re.* (re.++ (re.range "-" ".") (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))))(re.++ (re.range "." ".")(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))) (re.* (re.++ (re.range "-" ".") (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))))))))))))))) (str.to_re "")))))))))))))

(assert (= regexB (re.++ (str.to_re "")(re.++ (re.opt (re.union ((_ re.loop 2 2) (re.range "A" "Z"))(re.union (re.++ ((_ re.loop 2 2) (re.range "a" "z"))(re.++ (re.range " " " ")(re.++ ((_ re.loop 2 2) (re.range "0" "9"))(re.++ (re.range " " " ") ((_ re.loop 1 2) (re.range "A" "Z")))))) (re.++ ((_ re.loop 1 2) (re.range "a" "z"))(re.++ (re.range " " " ") ((_ re.loop 1 4) (re.range "0" "9")))))))(re.++ (re.opt (re.union ((_ re.loop 3 3) (re.range "A" "Z")) (re.++ ((_ re.loop 3 3) (re.range "a" "z"))(re.++ (re.range " " " ") ((_ re.loop 1 4) (re.range "0" "9")))))) (str.to_re ""))))))


(assert (str.in_re x regexA))
(assert (str.in_re x regexB))
(check-sat)

(reset)








(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const regexB RegLan)
(declare-const x String)

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.+ (re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))))(re.++ (re.range "@" "@")(re.++ (re.+ (re.++ (re.+ (re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))) (re.range "." ".")))(re.++ (re.+ (re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))) (str.to_re ""))))))))

(assert (= regexB (re.++ (str.to_re "")(re.++ (re.opt (re.union (re.range "+" "+") (re.range "-" "-")))(re.++ (re.union (re.++ (re.* (re.range "0" "9"))(re.++ (re.opt (re.range "." ".")) (re.+ (re.range "0" "9")))) (re.++ (re.+ (re.range "0" "9"))(re.++ (re.opt (re.range "." ".")) (re.* (re.range "0" "9")))))(re.++ (re.opt (re.++ (re.union (re.range "E" "E") (re.range "e" "e"))(re.++ (re.opt (re.union (re.range "+" "+") (re.range "-" "-"))) (re.+ (re.range "0" "9"))))) (str.to_re "")))))))


(assert (str.in_re x regexA))
(assert (str.in_re x regexB))
(check-sat)

(reset)








(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const regexB RegLan)
(declare-const x String)

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.opt (re.union ((_ re.loop 2 2) (re.range "A" "Z"))(re.union (re.++ ((_ re.loop 2 2) (re.range "a" "z"))(re.++ (re.range " " " ")(re.++ ((_ re.loop 2 2) (re.range "0" "9"))(re.++ (re.range " " " ") ((_ re.loop 1 2) (re.range "A" "Z")))))) (re.++ ((_ re.loop 1 2) (re.range "a" "z"))(re.++ (re.range " " " ") ((_ re.loop 1 4) (re.range "0" "9")))))))(re.++ (re.opt (re.union ((_ re.loop 3 3) (re.range "A" "Z")) (re.++ ((_ re.loop 3 3) (re.range "a" "z"))(re.++ (re.range " " " ") ((_ re.loop 1 4) (re.range "0" "9")))))) (str.to_re ""))))))

(assert (= regexB (re.++ (str.to_re "")(re.++ (re.+ (re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))))(re.++ (re.range "@" "@")(re.++ (re.+ (re.++ (re.+ (re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))) (re.range "." ".")))(re.++ (re.+ (re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))) (str.to_re ""))))))))


(assert (str.in_re x regexA))
(assert (str.in_re x regexB))
(check-sat)

(reset)








(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const regexB RegLan)
(declare-const x String)

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))(re.++ (re.* (re.++ (re.opt (re.range "-" ".")) (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z"))))))(re.++ (re.range "@" "@")(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z"))))(re.++ (re.* (re.++ (re.opt (re.range "-" ".")) (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z"))))))(re.++ (str.to_re (str.++ "." (str.++ " " "")))(re.++ (re.++ (re.union (re.range "A" "Z") (re.range "a" "z")) (re.+ (re.union (re.range "A" "Z") (re.range "a" "z")))) (str.to_re "")))))))))))

(assert (= regexB (re.++ (str.to_re "")(re.++ (re.opt (re.union (re.range "+" "+") (re.range "-" "-")))(re.++ (re.union (re.++ (re.* (re.range "0" "9"))(re.++ (re.opt (re.range "." ".")) (re.+ (re.range "0" "9")))) (re.++ (re.+ (re.range "0" "9"))(re.++ (re.opt (re.range "." ".")) (re.* (re.range "0" "9")))))(re.++ (re.opt (re.++ (re.union (re.range "E" "E") (re.range "e" "e"))(re.++ (re.opt (re.union (re.range "+" "+") (re.range "-" "-"))) (re.+ (re.range "0" "9"))))) (str.to_re "")))))))


(assert (str.in_re x regexA))
(assert (str.in_re x regexB))
(check-sat)

(reset)








(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const regexB RegLan)
(declare-const x String)

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))(re.++ (re.* (re.++ (re.union (re.range "+" "+") (re.range "-" ".")) (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))))(re.++ (re.range "@" "@")(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))(re.++ (re.* (re.++ (re.range "-" ".") (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))))(re.++ (re.range "." ".")(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))(re.++ (re.* (re.++ (re.range "-" ".") (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))))(re.++ (re.* (re.++ (re.union (re.range "," ",") (re.range ";" ";"))(re.++ (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))(re.++ (re.* (re.++ (re.union (re.range "+" "+") (re.range "-" ".")) (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))))(re.++ (re.range "@" "@")(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))(re.++ (re.* (re.++ (re.range "-" ".") (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))))(re.++ (re.range "." ".")(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))) (re.* (re.++ (re.range "-" ".") (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))))))))))))))) (str.to_re "")))))))))))))

(assert (= regexB (re.++ (str.to_re "")(re.++ (re.opt (re.union (re.range "+" "+") (re.range "-" "-")))(re.++ (re.union (re.++ (re.* (re.range "0" "9"))(re.++ (re.opt (re.range "." ".")) (re.+ (re.range "0" "9")))) (re.++ (re.+ (re.range "0" "9"))(re.++ (re.opt (re.range "." ".")) (re.* (re.range "0" "9")))))(re.++ (re.opt (re.++ (re.union (re.range "E" "E") (re.range "e" "e"))(re.++ (re.opt (re.union (re.range "+" "+") (re.range "-" "-"))) (re.+ (re.range "0" "9"))))) (str.to_re "")))))))


(assert (str.in_re x regexA))
(assert (str.in_re x regexB))
(check-sat)

(reset)








(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const regexB RegLan)
(declare-const x String)

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.opt (re.union (re.range "+" "+") (re.range "-" "-")))(re.++ (re.union (re.++ (re.* (re.range "0" "9"))(re.++ (re.opt (re.range "." ".")) (re.+ (re.range "0" "9")))) (re.++ (re.+ (re.range "0" "9"))(re.++ (re.opt (re.range "." ".")) (re.* (re.range "0" "9")))))(re.++ (re.opt (re.++ (re.union (re.range "E" "E") (re.range "e" "e"))(re.++ (re.opt (re.union (re.range "+" "+") (re.range "-" "-"))) (re.+ (re.range "0" "9"))))) (str.to_re "")))))))

(assert (= regexB (re.++ (str.to_re "")(re.++ (re.* (re.union (re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))) (re.+ (re.range " " " ")))(re.union (re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))) (re.+ (re.range "-" "-")))(re.union (re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))) (re.+ (re.range "." "."))) (re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))) (re.+ (re.range "+" "+")))))))(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z"))))(re.++ (re.range "@" "@")(re.++ (re.* (re.union (re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))) (re.+ (re.range "-" "-"))) (re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))) (re.range "." "."))))(re.++ ((_ re.loop 1 63) (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))(re.++ (re.range "." ".")(re.++ ((_ re.loop 2 6) (re.union (re.range "A" "Z") (re.range "a" "z"))) (str.to_re "")))))))))))


(assert (str.in_re x regexA))
(assert (str.in_re x regexB))
(check-sat)

(reset)








(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const regexB RegLan)
(declare-const x String)

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))(re.++ (re.* (re.++ (re.opt (re.range "-" ".")) (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z"))))))(re.++ (re.range "@" "@")(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z"))))(re.++ (re.* (re.++ (re.opt (re.range "-" ".")) (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z"))))))(re.++ (str.to_re (str.++ "." (str.++ " " "")))(re.++ (re.++ (re.union (re.range "A" "Z") (re.range "a" "z")) (re.+ (re.union (re.range "A" "Z") (re.range "a" "z")))) (str.to_re "")))))))))))

(assert (= regexB (re.++ (str.to_re "")(re.++ (re.+ (re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))))(re.++ (re.range "@" "@")(re.++ (re.+ (re.++ (re.+ (re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))) (re.range "." ".")))(re.++ (re.+ (re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))) (str.to_re ""))))))))


(assert (str.in_re x regexA))
(assert (str.in_re x regexB))
(check-sat)

(reset)








(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const regexB RegLan)
(declare-const x String)

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.opt (re.union (re.range "+" "+") (re.range "-" "-")))(re.++ (re.union (re.++ (re.* (re.range "0" "9"))(re.++ (re.opt (re.range "." ".")) (re.+ (re.range "0" "9")))) (re.++ (re.+ (re.range "0" "9"))(re.++ (re.opt (re.range "." ".")) (re.* (re.range "0" "9")))))(re.++ (re.opt (re.++ (re.union (re.range "E" "E") (re.range "e" "e"))(re.++ (re.opt (re.union (re.range "+" "+") (re.range "-" "-"))) (re.+ (re.range "0" "9"))))) (str.to_re "")))))))

(assert (= regexB (re.++ (str.to_re "")(re.++ (re.+ (re.++ (re.+ (re.union (re.range "-" ".")(re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))))(re.++ (re.range "@" "@")(re.++ (re.+ (re.union (re.range "-" ".")(re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))))(re.++ (re.range "." ".") ((_ re.loop 1 25) ((_ re.loop 2 5) (re.union (re.range "A" "Z") (re.range "a" "z")))))))))(re.++ (re.* (re.+ (re.++ (re.+ (re.union (re.range "-" ".")(re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))))(re.++ (re.range "@" "@")(re.++ (re.+ (re.union (re.range "-" ".")(re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))))(re.++ (re.range "." ".") ((_ re.loop 1 25) ((_ re.loop 2 5) (re.union (re.range "A" "Z") (re.range "a" "z")))))))))) (str.to_re ""))))))


(assert (str.in_re x regexA))
(assert (str.in_re x regexB))
(check-sat)

(reset)








(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const regexB RegLan)
(declare-const x String)

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.opt (re.range "$" "$"))(re.++ (re.union (re.++ ((_ re.loop 1 3) (re.range "0" "9"))(re.++ (re.opt (re.range "," ","))(re.++ (re.* (re.++ ((_ re.loop 3 3) (re.range "0" "9")) (re.opt (re.range "," ","))))(re.++ ((_ re.loop 3 3) (re.range "0" "9")) (re.opt (re.++ (re.range "." ".") ((_ re.loop 0 2) (re.range "0" "9"))))))))(re.union (re.++ ((_ re.loop 1 3) (re.range "0" "9")) (re.opt (re.++ (re.range "." ".") ((_ re.loop 0 2) (re.range "0" "9"))))) (re.++ (re.range "." ".") (re.opt ((_ re.loop 1 2) (re.range "0" "9")))))) (str.to_re ""))))))

(assert (= regexB (re.++ (str.to_re "")(re.++ (re.* (re.union (re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))) (re.+ (re.range " " " ")))(re.union (re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))) (re.+ (re.range "-" "-")))(re.union (re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))) (re.+ (re.range "." "."))) (re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))) (re.+ (re.range "+" "+")))))))(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z"))))(re.++ (re.range "@" "@")(re.++ (re.* (re.union (re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))) (re.+ (re.range "-" "-"))) (re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))) (re.range "." "."))))(re.++ ((_ re.loop 1 63) (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))(re.++ (re.range "." ".")(re.++ ((_ re.loop 2 6) (re.union (re.range "A" "Z") (re.range "a" "z"))) (str.to_re "")))))))))))


(assert (str.in_re x regexA))
(assert (str.in_re x regexB))
(check-sat)

(reset)








(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const regexB RegLan)
(declare-const x String)

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.opt (re.range "$" "$"))(re.++ (re.union (re.++ ((_ re.loop 1 3) (re.range "0" "9"))(re.++ (re.opt (re.range "," ","))(re.++ (re.* (re.++ ((_ re.loop 3 3) (re.range "0" "9")) (re.opt (re.range "," ","))))(re.++ ((_ re.loop 3 3) (re.range "0" "9")) (re.opt (re.++ (re.range "." ".") ((_ re.loop 0 2) (re.range "0" "9"))))))))(re.union (re.++ ((_ re.loop 1 3) (re.range "0" "9")) (re.opt (re.++ (re.range "." ".") ((_ re.loop 0 2) (re.range "0" "9"))))) (re.++ (re.range "." ".") (re.opt ((_ re.loop 1 2) (re.range "0" "9")))))) (str.to_re ""))))))

(assert (= regexB (re.++ (str.to_re "")(re.++ (re.+ (re.++ (re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))(re.++ (re.* (re.++ (re.union (re.range "+" "+") (re.range "-" ".")) (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))))(re.++ (re.range "@" "@")(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))(re.++ (re.* (re.++ (re.range "-" ".") (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))))(re.++ (re.range "." ".")(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))) (re.* (re.++ (re.range "-" ".") (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))))))))))))(re.++ (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (re.opt (re.range "," ",")) (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))))))) (str.to_re "")))))


(assert (str.in_re x regexA))
(assert (str.in_re x regexB))
(check-sat)

(reset)








(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const regexB RegLan)
(declare-const x String)

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.opt (re.union ((_ re.loop 2 2) (re.range "A" "Z"))(re.union (re.++ ((_ re.loop 2 2) (re.range "a" "z"))(re.++ (re.range " " " ")(re.++ ((_ re.loop 2 2) (re.range "0" "9"))(re.++ (re.range " " " ") ((_ re.loop 1 2) (re.range "A" "Z")))))) (re.++ ((_ re.loop 1 2) (re.range "a" "z"))(re.++ (re.range " " " ") ((_ re.loop 1 4) (re.range "0" "9")))))))(re.++ (re.opt (re.union ((_ re.loop 3 3) (re.range "A" "Z")) (re.++ ((_ re.loop 3 3) (re.range "a" "z"))(re.++ (re.range " " " ") ((_ re.loop 1 4) (re.range "0" "9")))))) (str.to_re ""))))))

(assert (= regexB (re.++ (str.to_re "")(re.++ (re.+ (re.union (re.range "-" ".")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))))(re.++ (re.range "@" "@")(re.++ (re.union ((_ re.loop 1 67) (re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))) (re.++ (re.+ (re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))))(re.++ (re.range "." ".") ((_ re.loop 1 67) (re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))))))(re.++ (re.range "." ".")(re.++ (re.++ ((_ re.loop 2 4) (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))) (re.opt (re.++ (re.range "." ".") ((_ re.loop 2 2) (re.union (re.range "0" "9")(re.union (re.range "A" "A")(re.union (re.range "Z" "Z") (re.range "a" "z")))))))) (str.to_re "")))))))))


(assert (str.in_re x regexA))
(assert (str.in_re x regexB))
(check-sat)

(reset)








(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const regexB RegLan)
(declare-const x String)

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.opt (re.union ((_ re.loop 2 2) (re.range "A" "Z"))(re.union (re.++ ((_ re.loop 2 2) (re.range "a" "z"))(re.++ (re.range " " " ")(re.++ ((_ re.loop 2 2) (re.range "0" "9"))(re.++ (re.range " " " ") ((_ re.loop 1 2) (re.range "A" "Z")))))) (re.++ ((_ re.loop 1 2) (re.range "a" "z"))(re.++ (re.range " " " ") ((_ re.loop 1 4) (re.range "0" "9")))))))(re.++ (re.opt (re.union ((_ re.loop 3 3) (re.range "A" "Z")) (re.++ ((_ re.loop 3 3) (re.range "a" "z"))(re.++ (re.range " " " ") ((_ re.loop 1 4) (re.range "0" "9")))))) (str.to_re ""))))))

(assert (= regexB (re.++ (str.to_re "")(re.++ (re.+ (re.++ (re.+ (re.union (re.range "-" ".")(re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))))(re.++ (re.range "@" "@")(re.++ (re.+ (re.union (re.range "-" ".")(re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))))(re.++ (re.range "." ".") ((_ re.loop 1 25) ((_ re.loop 2 5) (re.union (re.range "A" "Z") (re.range "a" "z")))))))))(re.++ (re.* (re.+ (re.++ (re.+ (re.union (re.range "-" ".")(re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))))(re.++ (re.range "@" "@")(re.++ (re.+ (re.union (re.range "-" ".")(re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))))(re.++ (re.range "." ".") ((_ re.loop 1 25) ((_ re.loop 2 5) (re.union (re.range "A" "Z") (re.range "a" "z")))))))))) (str.to_re ""))))))


(assert (str.in_re x regexA))
(assert (str.in_re x regexB))
(check-sat)

(reset)








(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const regexB RegLan)
(declare-const x String)

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))(re.++ (re.* (re.++ (re.opt (re.range "-" ".")) (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z"))))))(re.++ (re.range "@" "@")(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z"))))(re.++ (re.* (re.++ (re.opt (re.range "-" ".")) (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z"))))))(re.++ (str.to_re (str.++ "." (str.++ " " "")))(re.++ (re.++ (re.union (re.range "A" "Z") (re.range "a" "z")) (re.+ (re.union (re.range "A" "Z") (re.range "a" "z")))) (str.to_re "")))))))))))

(assert (= regexB (re.++ (str.to_re "")(re.++ (re.* (re.union (re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))) (re.+ (re.range " " " ")))(re.union (re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))) (re.+ (re.range "-" "-")))(re.union (re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))) (re.+ (re.range "." "."))) (re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))) (re.+ (re.range "+" "+")))))))(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z"))))(re.++ (re.range "@" "@")(re.++ (re.* (re.union (re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))) (re.+ (re.range "-" "-"))) (re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))) (re.range "." "."))))(re.++ ((_ re.loop 1 63) (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))(re.++ (re.range "." ".")(re.++ ((_ re.loop 2 6) (re.union (re.range "A" "Z") (re.range "a" "z"))) (str.to_re "")))))))))))


(assert (str.in_re x regexA))
(assert (str.in_re x regexB))
(check-sat)

(reset)








(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const regexB RegLan)
(declare-const x String)

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))(re.++ (re.* (re.++ (re.union (re.range "+" "+") (re.range "-" ".")) (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))))(re.++ (re.range "@" "@")(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))(re.++ (re.* (re.++ (re.range "-" ".") (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))))(re.++ (re.range "." ".")(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))(re.++ (re.* (re.++ (re.range "-" ".") (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))))(re.++ (re.* (re.++ (re.union (re.range "," ",") (re.range ";" ";"))(re.++ (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))(re.++ (re.* (re.++ (re.union (re.range "+" "+") (re.range "-" ".")) (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))))(re.++ (re.range "@" "@")(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))(re.++ (re.* (re.++ (re.range "-" ".") (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))))(re.++ (re.range "." ".")(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))) (re.* (re.++ (re.range "-" ".") (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))))))))))))))) (str.to_re "")))))))))))))

(assert (= regexB (re.++ (str.to_re "")(re.++ (re.opt (re.range "$" "$"))(re.++ (re.union (re.++ ((_ re.loop 1 3) (re.range "0" "9"))(re.++ (re.opt (re.range "," ","))(re.++ (re.* (re.++ ((_ re.loop 3 3) (re.range "0" "9")) (re.opt (re.range "," ","))))(re.++ ((_ re.loop 3 3) (re.range "0" "9")) (re.opt (re.++ (re.range "." ".") ((_ re.loop 0 2) (re.range "0" "9"))))))))(re.union (re.++ ((_ re.loop 1 3) (re.range "0" "9")) (re.opt (re.++ (re.range "." ".") ((_ re.loop 0 2) (re.range "0" "9"))))) (re.++ (re.range "." ".") (re.opt ((_ re.loop 1 2) (re.range "0" "9")))))) (str.to_re ""))))))


(assert (str.in_re x regexA))
(assert (str.in_re x regexB))
(check-sat)

(reset)








(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const regexB RegLan)
(declare-const x String)

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))(re.++ (re.* (re.++ (re.opt (re.range "-" ".")) (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z"))))))(re.++ (re.range "@" "@")(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z"))))(re.++ (re.* (re.++ (re.opt (re.range "-" ".")) (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z"))))))(re.++ (str.to_re (str.++ "." (str.++ " " "")))(re.++ (re.++ (re.union (re.range "A" "Z") (re.range "a" "z")) (re.+ (re.union (re.range "A" "Z") (re.range "a" "z")))) (str.to_re "")))))))))))

(assert (= regexB (re.++ (str.to_re "")(re.++ (re.+ (re.++ (re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))(re.++ (re.* (re.++ (re.union (re.range "+" "+") (re.range "-" ".")) (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))))(re.++ (re.range "@" "@")(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))(re.++ (re.* (re.++ (re.range "-" ".") (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))))(re.++ (re.range "." ".")(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))) (re.* (re.++ (re.range "-" ".") (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))))))))))))(re.++ (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (re.opt (re.range "," ",")) (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))))))) (str.to_re "")))))


(assert (str.in_re x regexA))
(assert (str.in_re x regexB))
(check-sat)

(reset)








(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const regexB RegLan)
(declare-const x String)

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))(re.++ (re.* (re.++ (re.union (re.range "+" "+") (re.range "-" ".")) (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))))(re.++ (re.range "@" "@")(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))(re.++ (re.* (re.++ (re.range "-" ".") (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))))(re.++ (re.range "." ".")(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))(re.++ (re.* (re.++ (re.range "-" ".") (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))))(re.++ (re.* (re.++ (re.union (re.range "," ",") (re.range ";" ";"))(re.++ (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))(re.++ (re.* (re.++ (re.union (re.range "+" "+") (re.range "-" ".")) (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))))(re.++ (re.range "@" "@")(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))(re.++ (re.* (re.++ (re.range "-" ".") (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))))(re.++ (re.range "." ".")(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))) (re.* (re.++ (re.range "-" ".") (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))))))))))))))) (str.to_re "")))))))))))))

(assert (= regexB (re.++ (str.to_re "")(re.++ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))(re.++ (re.* (re.++ (re.opt (re.range "-" ".")) (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z"))))))(re.++ (re.range "@" "@")(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z"))))(re.++ (re.* (re.++ (re.opt (re.range "-" ".")) (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z"))))))(re.++ (str.to_re (str.++ "." (str.++ " " "")))(re.++ (re.++ (re.union (re.range "A" "Z") (re.range "a" "z")) (re.+ (re.union (re.range "A" "Z") (re.range "a" "z")))) (str.to_re "")))))))))))


(assert (str.in_re x regexA))
(assert (str.in_re x regexB))
(check-sat)

(reset)








(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const regexB RegLan)
(declare-const x String)

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.opt (re.union (re.range "+" "+") (re.range "-" "-")))(re.++ (re.union (re.++ (re.* (re.range "0" "9"))(re.++ (re.opt (re.range "." ".")) (re.+ (re.range "0" "9")))) (re.++ (re.+ (re.range "0" "9"))(re.++ (re.opt (re.range "." ".")) (re.* (re.range "0" "9")))))(re.++ (re.opt (re.++ (re.union (re.range "E" "E") (re.range "e" "e"))(re.++ (re.opt (re.union (re.range "+" "+") (re.range "-" "-"))) (re.+ (re.range "0" "9"))))) (str.to_re "")))))))

(assert (= regexB (re.++ (str.to_re "")(re.++ (re.+ (re.++ (re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))(re.++ (re.* (re.++ (re.union (re.range "+" "+") (re.range "-" ".")) (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))))(re.++ (re.range "@" "@")(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))(re.++ (re.* (re.++ (re.range "-" ".") (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))))(re.++ (re.range "." ".")(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))) (re.* (re.++ (re.range "-" ".") (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))))))))))))(re.++ (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (re.opt (re.range "," ",")) (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))))))) (str.to_re "")))))


(assert (str.in_re x regexA))
(assert (str.in_re x regexB))
(check-sat)

(reset)








(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const regexB RegLan)
(declare-const x String)

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))(re.++ (re.* (re.++ (re.opt (re.range "-" ".")) (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z"))))))(re.++ (re.range "@" "@")(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z"))))(re.++ (re.* (re.++ (re.opt (re.range "-" ".")) (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z"))))))(re.++ (str.to_re (str.++ "." (str.++ " " "")))(re.++ (re.++ (re.union (re.range "A" "Z") (re.range "a" "z")) (re.+ (re.union (re.range "A" "Z") (re.range "a" "z")))) (str.to_re "")))))))))))

(assert (= regexB (re.++ (str.to_re "")(re.++ (re.+ (re.++ (re.+ (re.union (re.range "-" ".")(re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))))(re.++ (re.range "@" "@")(re.++ (re.+ (re.union (re.range "-" ".")(re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))))(re.++ (re.range "." ".") ((_ re.loop 1 25) ((_ re.loop 2 5) (re.union (re.range "A" "Z") (re.range "a" "z")))))))))(re.++ (re.* (re.+ (re.++ (re.+ (re.union (re.range "-" ".")(re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))))(re.++ (re.range "@" "@")(re.++ (re.+ (re.union (re.range "-" ".")(re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))))(re.++ (re.range "." ".") ((_ re.loop 1 25) ((_ re.loop 2 5) (re.union (re.range "A" "Z") (re.range "a" "z")))))))))) (str.to_re ""))))))


(assert (str.in_re x regexA))
(assert (str.in_re x regexB))
(check-sat)

(reset)








(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const regexB RegLan)
(declare-const x String)


(define-fun Witness () String "")

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.opt (re.union ((_ re.loop 2 2) (re.range "A" "Z"))(re.union (re.++ ((_ re.loop 2 2) (re.range "a" "z"))(re.++ (re.range " " " ")(re.++ ((_ re.loop 2 2) (re.range "1" "9"))(re.++ (re.range " " " ") ((_ re.loop 1 2) (re.range "A" "Z")))))) (re.++ ((_ re.loop 1 2) (re.range "a" "z"))(re.++ (re.range " " " ") ((_ re.loop 1 4) (re.range "1" "9")))))))(re.++ (re.opt (re.union ((_ re.loop 3 3) (re.range "A" "Z")) (re.++ ((_ re.loop 3 3) (re.range "a" "z"))(re.++ (re.range " " " ") ((_ re.loop 1 4) (re.range "1" "9")))))) (str.to_re ""))))))

(assert (= regexB (re.++ (str.to_re "")(re.++ (re.opt (re.union ((_ re.loop 2 2) (re.range "A" "Z"))(re.union (re.++ ((_ re.loop 2 2) (re.range "a" "z"))(re.++ (re.range " " " ")(re.++ ((_ re.loop 2 2) (re.range "0" "9"))(re.++ (re.range " " " ") ((_ re.loop 1 2) (re.range "A" "Z")))))) (re.++ ((_ re.loop 1 2) (re.range "a" "z"))(re.++ (re.range " " " ") ((_ re.loop 1 4) (re.range "0" "9")))))))(re.++ (re.opt (re.union ((_ re.loop 3 3) (re.range "A" "Z")) (re.++ ((_ re.loop 3 3) (re.range "a" "z"))(re.++ (re.range " " " ") ((_ re.loop 1 4) (re.range "0" "9")))))) (str.to_re ""))))))


(assert (str.in_re x regexA))
(assert (str.in_re x regexB))

(assert (str.in_re Witness regexA))
(assert (str.in_re Witness regexB))
(check-sat)

(reset)








(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const regexB RegLan)
(declare-const x String)


(define-fun Witness () String (str.++ "b" (str.++ "@" (str.++ "g" (str.++ "." (str.++ " " (str.++ "N" (str.++ "c" ""))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.union (re.range "0" "8")(re.union (re.range "A" "Z") (re.range "b" "z")))(re.++ (re.* (re.++ (re.opt (re.range "-" ".")) (re.+ (re.union (re.range "0" "8")(re.union (re.range "A" "Z") (re.range "b" "z"))))))(re.++ (re.range "@" "@")(re.++ (re.+ (re.union (re.range "0" "8")(re.union (re.range "A" "Z") (re.range "b" "z"))))(re.++ (re.* (re.++ (re.opt (re.range "-" ".")) (re.+ (re.union (re.range "0" "8")(re.union (re.range "A" "Z") (re.range "b" "z"))))))(re.++ (str.to_re (str.++ "." (str.++ " " "")))(re.++ (re.++ (re.union (re.range "A" "Z") (re.range "b" "z")) (re.+ (re.union (re.range "A" "Z") (re.range "b" "z")))) (str.to_re "")))))))))))

(assert (= regexB (re.++ (str.to_re "")(re.++ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))(re.++ (re.* (re.++ (re.opt (re.range "-" ".")) (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z"))))))(re.++ (re.range "@" "@")(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z"))))(re.++ (re.* (re.++ (re.opt (re.range "-" ".")) (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z"))))))(re.++ (str.to_re (str.++ "." (str.++ " " "")))(re.++ (re.++ (re.union (re.range "A" "Z") (re.range "a" "z")) (re.+ (re.union (re.range "A" "Z") (re.range "a" "z")))) (str.to_re "")))))))))))


(assert (str.in_re x regexA))
(assert (str.in_re x regexB))

(assert (str.in_re Witness regexA))
(assert (str.in_re Witness regexB))
(check-sat)

(reset)








(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const regexB RegLan)
(declare-const x String)


(define-fun Witness () String (str.++ "-" (str.++ "@" (str.++ "\u{e7}" (str.++ "." (str.++ "-" (str.++ "." (str.++ "N" (str.++ "s" "")))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.+ (re.union (re.range "-" ".")(re.union (re.range "1" "9")(re.union (re.range "A" "Z")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))(re.++ (re.range "@" "@")(re.++ (re.union ((_ re.loop 1 67) (re.union (re.range "-" "-")(re.union (re.range "1" "9")(re.union (re.range "A" "Z")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))) (re.++ (re.+ (re.union (re.range "-" "-")(re.union (re.range "1" "9")(re.union (re.range "A" "Z")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))(re.++ (re.range "." ".") ((_ re.loop 1 67) (re.union (re.range "-" "-")(re.union (re.range "1" "9")(re.union (re.range "A" "Z")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))))))(re.++ (re.range "." ".")(re.++ (re.++ ((_ re.loop 2 4) (re.union (re.range "1" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))) (re.opt (re.++ (re.range "." ".") ((_ re.loop 2 2) (re.union (re.range "1" "9")(re.union (re.range "A" "A")(re.union (re.range "Z" "Z") (re.range "a" "z")))))))) (str.to_re "")))))))))

(assert (= regexB (re.++ (str.to_re "")(re.++ (re.+ (re.union (re.range "-" ".")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))))(re.++ (re.range "@" "@")(re.++ (re.union ((_ re.loop 1 67) (re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))) (re.++ (re.+ (re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))))(re.++ (re.range "." ".") ((_ re.loop 1 67) (re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))))))(re.++ (re.range "." ".")(re.++ (re.++ ((_ re.loop 2 4) (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))) (re.opt (re.++ (re.range "." ".") ((_ re.loop 2 2) (re.union (re.range "0" "9")(re.union (re.range "A" "A")(re.union (re.range "Z" "Z") (re.range "a" "z")))))))) (str.to_re "")))))))))


(assert (str.in_re x regexA))
(assert (str.in_re x regexB))

(assert (str.in_re Witness regexA))
(assert (str.in_re Witness regexB))
(check-sat)

(reset)








(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const regexB RegLan)
(declare-const x String)


(define-fun Witness () String (str.++ "5" (str.++ "@" (str.++ "8" (str.++ "." (str.++ "X" (str.++ "u" (str.++ "-" (str.++ "B" (str.++ "@" (str.++ "y" (str.++ "." (str.++ "A" (str.++ "n" (str.++ "." (str.++ "8" (str.++ "@" (str.++ "9" (str.++ "." (str.++ "S" (str.++ "l" "")))))))))))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.+ (re.++ (re.+ (re.union (re.range "-" ".")(re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))))(re.++ (re.range "@" "@")(re.++ (re.+ (re.union (re.range "-" ".")(re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))))(re.++ (re.range "." ".") ((_ re.loop 1 25) ((_ re.loop 2 5) (re.union (re.range "A" "Z") (re.range "a" "z")))))))))(re.++ (re.* (re.+ (re.++ (re.+ (re.union (re.range "-" ".")(re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))))(re.++ (re.range "@" "@")(re.++ (re.+ (re.union (re.range "-" ".")(re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))))(re.++ (re.range "." ".") ((_ re.loop 1 25) ((_ re.loop 2 5) (re.union (re.range "A" "Z") (re.range "a" "z")))))))))) (str.to_re ""))))))

(assert (= regexB (re.++ (str.to_re "")(re.++ (re.+ (re.++ (re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))(re.++ (re.* (re.++ (re.union (re.range "+" "+") (re.range "-" ".")) (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))))(re.++ (re.range "@" "@")(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))(re.++ (re.* (re.++ (re.range "-" ".") (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))))(re.++ (re.range "." ".")(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))) (re.* (re.++ (re.range "-" ".") (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))))))))))))(re.++ (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (re.opt (re.range "," ",")) (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))))))) (str.to_re "")))))


(assert (str.in_re x regexA))
(assert (str.in_re x regexB))

(assert (str.in_re Witness regexA))
(assert (str.in_re Witness regexB))
(check-sat)

(reset)








(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const regexB RegLan)
(declare-const x String)


(define-fun Witness () String (str.++ "\u{f8}" (str.++ "@" (str.++ "p" (str.++ "." (str.++ "\u{c9}" ""))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.+ (re.union (re.range "A" "Z")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))(re.++ (re.* (re.++ (re.union (re.range "+" "+") (re.range "-" ".")) (re.+ (re.union (re.range "A" "Z")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))(re.++ (re.range "@" "@")(re.++ (re.+ (re.union (re.range "A" "Z")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))(re.++ (re.* (re.++ (re.range "-" ".") (re.+ (re.union (re.range "A" "Z")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))(re.++ (re.range "." ".")(re.++ (re.+ (re.union (re.range "A" "Z")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))(re.++ (re.* (re.++ (re.range "-" ".") (re.+ (re.union (re.range "A" "Z")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))(re.++ (re.* (re.++ (re.union (re.range "," ",") (re.range ";" ";"))(re.++ (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (re.+ (re.union (re.range "A" "Z")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))(re.++ (re.* (re.++ (re.union (re.range "+" "+") (re.range "-" ".")) (re.+ (re.union (re.range "A" "Z")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))(re.++ (re.range "@" "@")(re.++ (re.+ (re.union (re.range "A" "Z")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))(re.++ (re.* (re.++ (re.range "-" ".") (re.+ (re.union (re.range "A" "Z")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))(re.++ (re.range "." ".")(re.++ (re.+ (re.union (re.range "A" "Z")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))) (re.* (re.++ (re.range "-" ".") (re.+ (re.union (re.range "A" "Z")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))))))))))))) (str.to_re "")))))))))))))

(assert (= regexB (re.++ (str.to_re "")(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))(re.++ (re.* (re.++ (re.union (re.range "+" "+") (re.range "-" ".")) (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))))(re.++ (re.range "@" "@")(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))(re.++ (re.* (re.++ (re.range "-" ".") (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))))(re.++ (re.range "." ".")(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))(re.++ (re.* (re.++ (re.range "-" ".") (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))))(re.++ (re.* (re.++ (re.union (re.range "," ",") (re.range ";" ";"))(re.++ (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))(re.++ (re.* (re.++ (re.union (re.range "+" "+") (re.range "-" ".")) (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))))(re.++ (re.range "@" "@")(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))(re.++ (re.* (re.++ (re.range "-" ".") (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))))(re.++ (re.range "." ".")(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))) (re.* (re.++ (re.range "-" ".") (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))))))))))))))) (str.to_re "")))))))))))))


(assert (str.in_re x regexA))
(assert (str.in_re x regexB))

(assert (str.in_re Witness regexA))
(assert (str.in_re Witness regexB))
(check-sat)

(reset)








(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const regexB RegLan)
(declare-const x String)


(define-fun Witness () String (str.++ "." ""))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.opt (re.range "$" "$"))(re.++ (re.union (re.++ ((_ re.loop 1 3) (re.range "1" "9"))(re.++ (re.opt (re.range "," ","))(re.++ (re.* (re.++ ((_ re.loop 3 3) (re.range "1" "9")) (re.opt (re.range "," ","))))(re.++ ((_ re.loop 3 3) (re.range "1" "9")) (re.opt (re.++ (re.range "." ".") ((_ re.loop 0 2) (re.range "1" "9"))))))))(re.union (re.++ ((_ re.loop 1 3) (re.range "1" "9")) (re.opt (re.++ (re.range "." ".") ((_ re.loop 0 2) (re.range "1" "9"))))) (re.++ (re.range "." ".") (re.opt ((_ re.loop 1 2) (re.range "1" "9")))))) (str.to_re ""))))))

(assert (= regexB (re.++ (str.to_re "")(re.++ (re.opt (re.range "$" "$"))(re.++ (re.union (re.++ ((_ re.loop 1 3) (re.range "0" "9"))(re.++ (re.opt (re.range "," ","))(re.++ (re.* (re.++ ((_ re.loop 3 3) (re.range "0" "9")) (re.opt (re.range "," ","))))(re.++ ((_ re.loop 3 3) (re.range "0" "9")) (re.opt (re.++ (re.range "." ".") ((_ re.loop 0 2) (re.range "0" "9"))))))))(re.union (re.++ ((_ re.loop 1 3) (re.range "0" "9")) (re.opt (re.++ (re.range "." ".") ((_ re.loop 0 2) (re.range "0" "9"))))) (re.++ (re.range "." ".") (re.opt ((_ re.loop 1 2) (re.range "0" "9")))))) (str.to_re ""))))))


(assert (str.in_re x regexA))
(assert (str.in_re x regexB))

(assert (str.in_re Witness regexA))
(assert (str.in_re Witness regexB))
(check-sat)

(reset)








(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const regexB RegLan)
(declare-const x String)


(define-fun Witness () String (str.++ "." (str.++ "4" "")))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.opt (re.range "$" "$"))(re.++ (re.union (re.++ ((_ re.loop 1 3) (re.range "0" "9"))(re.++ (re.opt (re.range "," ","))(re.++ (re.* (re.++ ((_ re.loop 3 3) (re.range "0" "9")) (re.opt (re.range "," ","))))(re.++ ((_ re.loop 3 3) (re.range "0" "9")) (re.opt (re.++ (re.range "." ".") ((_ re.loop 0 2) (re.range "0" "9"))))))))(re.union (re.++ ((_ re.loop 1 3) (re.range "0" "9")) (re.opt (re.++ (re.range "." ".") ((_ re.loop 0 2) (re.range "0" "9"))))) (re.++ (re.range "." ".") (re.opt ((_ re.loop 1 2) (re.range "0" "9")))))) (str.to_re ""))))))

(assert (= regexB (re.++ (str.to_re "")(re.++ (re.opt (re.union (re.range "+" "+") (re.range "-" "-")))(re.++ (re.union (re.++ (re.* (re.range "0" "9"))(re.++ (re.opt (re.range "." ".")) (re.+ (re.range "0" "9")))) (re.++ (re.+ (re.range "0" "9"))(re.++ (re.opt (re.range "." ".")) (re.* (re.range "0" "9")))))(re.++ (re.opt (re.++ (re.union (re.range "E" "E") (re.range "e" "e"))(re.++ (re.opt (re.union (re.range "+" "+") (re.range "-" "-"))) (re.+ (re.range "0" "9"))))) (str.to_re "")))))))


(assert (str.in_re x regexA))
(assert (str.in_re x regexB))

(assert (str.in_re Witness regexA))
(assert (str.in_re Witness regexB))
(check-sat)

(reset)








(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const regexB RegLan)
(declare-const x String)


(define-fun Witness () String (str.++ "-" (str.++ "@" (str.++ "G" (str.++ "." (str.++ "c" (str.++ "G" "")))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.+ (re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))))(re.++ (re.range "@" "@")(re.++ (re.+ (re.++ (re.+ (re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))) (re.range "." ".")))(re.++ (re.+ (re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))) (str.to_re ""))))))))

(assert (= regexB (re.++ (str.to_re "")(re.++ (re.+ (re.++ (re.+ (re.union (re.range "-" ".")(re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))))(re.++ (re.range "@" "@")(re.++ (re.+ (re.union (re.range "-" ".")(re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))))(re.++ (re.range "." ".") ((_ re.loop 1 25) ((_ re.loop 2 5) (re.union (re.range "A" "Z") (re.range "a" "z")))))))))(re.++ (re.* (re.+ (re.++ (re.+ (re.union (re.range "-" ".")(re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))))(re.++ (re.range "@" "@")(re.++ (re.+ (re.union (re.range "-" ".")(re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))))(re.++ (re.range "." ".") ((_ re.loop 1 25) ((_ re.loop 2 5) (re.union (re.range "A" "Z") (re.range "a" "z")))))))))) (str.to_re ""))))))


(assert (str.in_re x regexA))
(assert (str.in_re x regexB))

(assert (str.in_re Witness regexA))
(assert (str.in_re Witness regexB))
(check-sat)

(reset)








(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const regexB RegLan)
(declare-const x String)


(define-fun Witness () String (str.++ "j" (str.++ "@" (str.++ "9" (str.++ "." (str.++ "J" (str.++ "e" "")))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.* (re.union (re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))) (re.+ (re.range " " " ")))(re.union (re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))) (re.+ (re.range "-" "-")))(re.union (re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))) (re.+ (re.range "." "."))) (re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))) (re.+ (re.range "+" "+")))))))(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z"))))(re.++ (re.range "@" "@")(re.++ (re.* (re.union (re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))) (re.+ (re.range "-" "-"))) (re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))) (re.range "." "."))))(re.++ ((_ re.loop 1 63) (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))(re.++ (re.range "." ".")(re.++ ((_ re.loop 2 6) (re.union (re.range "A" "Z") (re.range "a" "z"))) (str.to_re "")))))))))))

(assert (= regexB (re.++ (str.to_re "")(re.++ (re.+ (re.++ (re.+ (re.union (re.range "-" ".")(re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))))(re.++ (re.range "@" "@")(re.++ (re.+ (re.union (re.range "-" ".")(re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))))(re.++ (re.range "." ".") ((_ re.loop 1 25) ((_ re.loop 2 5) (re.union (re.range "A" "Z") (re.range "a" "z")))))))))(re.++ (re.* (re.+ (re.++ (re.+ (re.union (re.range "-" ".")(re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))))(re.++ (re.range "@" "@")(re.++ (re.+ (re.union (re.range "-" ".")(re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))))(re.++ (re.range "." ".") ((_ re.loop 1 25) ((_ re.loop 2 5) (re.union (re.range "A" "Z") (re.range "a" "z")))))))))) (str.to_re ""))))))


(assert (str.in_re x regexA))
(assert (str.in_re x regexB))

(assert (str.in_re Witness regexA))
(assert (str.in_re Witness regexB))
(check-sat)

(reset)








(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const regexB RegLan)
(declare-const x String)


(define-fun Witness () String (str.++ "9" (str.++ "@" (str.++ "1" (str.++ "." (str.++ "D" (str.++ "i" "")))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))(re.++ (re.* (re.++ (re.union (re.range "+" "+") (re.range "-" ".")) (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))))(re.++ (re.range "@" "@")(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))(re.++ (re.* (re.++ (re.range "-" ".") (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))))(re.++ (re.range "." ".")(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))(re.++ (re.* (re.++ (re.range "-" ".") (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))))(re.++ (re.* (re.++ (re.union (re.range "," ",") (re.range ";" ";"))(re.++ (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))(re.++ (re.* (re.++ (re.union (re.range "+" "+") (re.range "-" ".")) (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))))(re.++ (re.range "@" "@")(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))(re.++ (re.* (re.++ (re.range "-" ".") (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))))(re.++ (re.range "." ".")(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))) (re.* (re.++ (re.range "-" ".") (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))))))))))))))) (str.to_re "")))))))))))))

(assert (= regexB (re.++ (str.to_re "")(re.++ (re.+ (re.++ (re.+ (re.union (re.range "-" ".")(re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))))(re.++ (re.range "@" "@")(re.++ (re.+ (re.union (re.range "-" ".")(re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))))(re.++ (re.range "." ".") ((_ re.loop 1 25) ((_ re.loop 2 5) (re.union (re.range "A" "Z") (re.range "a" "z")))))))))(re.++ (re.* (re.+ (re.++ (re.+ (re.union (re.range "-" ".")(re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))))(re.++ (re.range "@" "@")(re.++ (re.+ (re.union (re.range "-" ".")(re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))))(re.++ (re.range "." ".") ((_ re.loop 1 25) ((_ re.loop 2 5) (re.union (re.range "A" "Z") (re.range "a" "z")))))))))) (str.to_re ""))))))


(assert (str.in_re x regexA))
(assert (str.in_re x regexB))

(assert (str.in_re Witness regexA))
(assert (str.in_re Witness regexB))
(check-sat)

(reset)








(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const regexB RegLan)
(declare-const x String)


(define-fun Witness () String (str.++ "z" (str.++ "@" (str.++ "u" (str.++ "." (str.++ "9" ""))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))(re.++ (re.* (re.++ (re.union (re.range "+" "+") (re.range "-" ".")) (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))))(re.++ (re.range "@" "@")(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))(re.++ (re.* (re.++ (re.range "-" ".") (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))))(re.++ (re.range "." ".")(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))(re.++ (re.* (re.++ (re.range "-" ".") (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))))(re.++ (re.* (re.++ (re.union (re.range "," ",") (re.range ";" ";"))(re.++ (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))(re.++ (re.* (re.++ (re.union (re.range "+" "+") (re.range "-" ".")) (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))))(re.++ (re.range "@" "@")(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))(re.++ (re.* (re.++ (re.range "-" ".") (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))))(re.++ (re.range "." ".")(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))) (re.* (re.++ (re.range "-" ".") (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))))))))))))))) (str.to_re "")))))))))))))

(assert (= regexB (re.++ (str.to_re "")(re.++ (re.+ (re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))))(re.++ (re.range "@" "@")(re.++ (re.+ (re.++ (re.+ (re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))) (re.range "." ".")))(re.++ (re.+ (re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))) (str.to_re ""))))))))


(assert (str.in_re x regexA))
(assert (str.in_re x regexB))

(assert (str.in_re Witness regexA))
(assert (str.in_re Witness regexB))
(check-sat)

(reset)








(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const regexB RegLan)
(declare-const x String)


(define-fun Witness () String (str.++ "G" (str.++ "@" (str.++ "\u{de}" (str.++ "." (str.++ "v" (str.++ "." (str.++ "7" (str.++ "S" (str.++ "." (str.++ "w" (str.++ "x" ""))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.+ (re.union (re.range "-" ".")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))))(re.++ (re.range "@" "@")(re.++ (re.union ((_ re.loop 1 67) (re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))) (re.++ (re.+ (re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))))(re.++ (re.range "." ".") ((_ re.loop 1 67) (re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))))))(re.++ (re.range "." ".")(re.++ (re.++ ((_ re.loop 2 4) (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))) (re.opt (re.++ (re.range "." ".") ((_ re.loop 2 2) (re.union (re.range "0" "9")(re.union (re.range "A" "A")(re.union (re.range "Z" "Z") (re.range "a" "z")))))))) (str.to_re "")))))))))

(assert (= regexB (re.++ (str.to_re "")(re.++ (re.* (re.union (re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))) (re.+ (re.range " " " ")))(re.union (re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))) (re.+ (re.range "-" "-")))(re.union (re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))) (re.+ (re.range "." "."))) (re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))) (re.+ (re.range "+" "+")))))))(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z"))))(re.++ (re.range "@" "@")(re.++ (re.* (re.union (re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))) (re.+ (re.range "-" "-"))) (re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))) (re.range "." "."))))(re.++ ((_ re.loop 1 63) (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))(re.++ (re.range "." ".")(re.++ ((_ re.loop 2 6) (re.union (re.range "A" "Z") (re.range "a" "z"))) (str.to_re "")))))))))))


(assert (str.in_re x regexA))
(assert (str.in_re x regexB))

(assert (str.in_re Witness regexA))
(assert (str.in_re Witness regexB))
(check-sat)

(reset)








(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const regexB RegLan)
(declare-const x String)


(define-fun Witness () String (str.++ "z" (str.++ "@" (str.++ "\u{b5}" (str.++ "." (str.++ "S" ""))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.+ (re.++ (re.++ (re.+ (re.union (re.range "A" "Z")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))(re.++ (re.* (re.++ (re.union (re.range "+" "+") (re.range "-" ".")) (re.+ (re.union (re.range "A" "Z")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))(re.++ (re.range "@" "@")(re.++ (re.+ (re.union (re.range "A" "Z")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))(re.++ (re.* (re.++ (re.range "-" ".") (re.+ (re.union (re.range "A" "Z")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))(re.++ (re.range "." ".")(re.++ (re.+ (re.union (re.range "A" "Z")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))) (re.* (re.++ (re.range "-" ".") (re.+ (re.union (re.range "A" "Z")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))))))))))(re.++ (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (re.opt (re.range "," ",")) (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))))))) (str.to_re "")))))

(assert (= regexB (re.++ (str.to_re "")(re.++ (re.+ (re.++ (re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))(re.++ (re.* (re.++ (re.union (re.range "+" "+") (re.range "-" ".")) (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))))(re.++ (re.range "@" "@")(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))(re.++ (re.* (re.++ (re.range "-" ".") (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))))(re.++ (re.range "." ".")(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))) (re.* (re.++ (re.range "-" ".") (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))))))))))))(re.++ (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (re.opt (re.range "," ",")) (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))))))) (str.to_re "")))))


(assert (str.in_re x regexA))
(assert (str.in_re x regexB))

(assert (str.in_re Witness regexA))
(assert (str.in_re Witness regexB))
(check-sat)

(reset)








(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const regexB RegLan)
(declare-const x String)


(define-fun Witness () String (str.++ "7" (str.++ "@" (str.++ "\u{ba}" (str.++ "." (str.++ "f" (str.++ "x" "")))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.* (re.union (re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))) (re.+ (re.range " " " ")))(re.union (re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))) (re.+ (re.range "-" "-")))(re.union (re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))) (re.+ (re.range "." "."))) (re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))) (re.+ (re.range "+" "+")))))))(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z"))))(re.++ (re.range "@" "@")(re.++ (re.* (re.union (re.++ (re.+ (re.union (re.range "A" "Z")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))) (re.+ (re.range "-" "-"))) (re.++ (re.+ (re.union (re.range "A" "Z")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))) (re.range "." "."))))(re.++ ((_ re.loop 1 63) (re.union (re.range "A" "Z")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))(re.++ (re.range "." ".")(re.++ ((_ re.loop 2 6) (re.union (re.range "A" "Z") (re.range "a" "z"))) (str.to_re "")))))))))))

(assert (= regexB (re.++ (str.to_re "")(re.++ (re.* (re.union (re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))) (re.+ (re.range " " " ")))(re.union (re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))) (re.+ (re.range "-" "-")))(re.union (re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))) (re.+ (re.range "." "."))) (re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))) (re.+ (re.range "+" "+")))))))(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z"))))(re.++ (re.range "@" "@")(re.++ (re.* (re.union (re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))) (re.+ (re.range "-" "-"))) (re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))) (re.range "." "."))))(re.++ ((_ re.loop 1 63) (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))(re.++ (re.range "." ".")(re.++ ((_ re.loop 2 6) (re.union (re.range "A" "Z") (re.range "a" "z"))) (str.to_re "")))))))))))


(assert (str.in_re x regexA))
(assert (str.in_re x regexB))

(assert (str.in_re Witness regexA))
(assert (str.in_re Witness regexB))
(check-sat)

(reset)








(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const regexB RegLan)
(declare-const x String)


(define-fun Witness () String (str.++ "0" (str.++ "@" (str.++ "0" (str.++ "." (str.++ "9" (str.++ "." (str.++ "Z" (str.++ "z" "")))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.+ (re.union (re.range "-" ".")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))))(re.++ (re.range "@" "@")(re.++ (re.union ((_ re.loop 1 67) (re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))) (re.++ (re.+ (re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))))(re.++ (re.range "." ".") ((_ re.loop 1 67) (re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))))))(re.++ (re.range "." ".")(re.++ (re.++ ((_ re.loop 2 4) (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))) (re.opt (re.++ (re.range "." ".") ((_ re.loop 2 2) (re.union (re.range "0" "9")(re.union (re.range "A" "A")(re.union (re.range "Z" "Z") (re.range "a" "z")))))))) (str.to_re "")))))))))

(assert (= regexB (re.++ (str.to_re "")(re.++ (re.+ (re.++ (re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))(re.++ (re.* (re.++ (re.union (re.range "+" "+") (re.range "-" ".")) (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))))(re.++ (re.range "@" "@")(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))(re.++ (re.* (re.++ (re.range "-" ".") (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))))(re.++ (re.range "." ".")(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))) (re.* (re.++ (re.range "-" ".") (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))))))))))))(re.++ (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (re.opt (re.range "," ",")) (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))))))) (str.to_re "")))))


(assert (str.in_re x regexA))
(assert (str.in_re x regexB))

(assert (str.in_re Witness regexA))
(assert (str.in_re Witness regexB))
(check-sat)

(reset)








(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const regexB RegLan)
(declare-const x String)


(define-fun Witness () String (str.++ "J" (str.++ "@" (str.++ "E" (str.++ "." (str.++ "\u{aa}" (str.++ "." (str.++ "5" (str.++ "L" "")))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.+ (re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))))(re.++ (re.range "@" "@")(re.++ (re.+ (re.++ (re.+ (re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))) (re.range "." ".")))(re.++ (re.+ (re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))) (str.to_re ""))))))))

(assert (= regexB (re.++ (str.to_re "")(re.++ (re.+ (re.union (re.range "-" ".")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))))(re.++ (re.range "@" "@")(re.++ (re.union ((_ re.loop 1 67) (re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))) (re.++ (re.+ (re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))))(re.++ (re.range "." ".") ((_ re.loop 1 67) (re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))))))(re.++ (re.range "." ".")(re.++ (re.++ ((_ re.loop 2 4) (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))) (re.opt (re.++ (re.range "." ".") ((_ re.loop 2 2) (re.union (re.range "0" "9")(re.union (re.range "A" "A")(re.union (re.range "Z" "Z") (re.range "a" "z")))))))) (str.to_re "")))))))))


(assert (str.in_re x regexA))
(assert (str.in_re x regexB))

(assert (str.in_re Witness regexA))
(assert (str.in_re Witness regexB))
(check-sat)

(reset)








(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const regexB RegLan)
(declare-const x String)


(define-fun Witness () String (str.++ "\u{aa}" (str.++ "@" (str.++ "\u{aa}" (str.++ "." (str.++ "4" (str.++ "." (str.++ "t" (str.++ "4" "")))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))(re.++ (re.* (re.++ (re.union (re.range "+" "+") (re.range "-" ".")) (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))))(re.++ (re.range "@" "@")(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))(re.++ (re.* (re.++ (re.range "-" ".") (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))))(re.++ (re.range "." ".")(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))(re.++ (re.* (re.++ (re.range "-" ".") (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))))(re.++ (re.* (re.++ (re.union (re.range "," ",") (re.range ";" ";"))(re.++ (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))(re.++ (re.* (re.++ (re.union (re.range "+" "+") (re.range "-" ".")) (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))))(re.++ (re.range "@" "@")(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))(re.++ (re.* (re.++ (re.range "-" ".") (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))))(re.++ (re.range "." ".")(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))) (re.* (re.++ (re.range "-" ".") (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))))))))))))))) (str.to_re "")))))))))))))

(assert (= regexB (re.++ (str.to_re "")(re.++ (re.+ (re.union (re.range "-" ".")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))))(re.++ (re.range "@" "@")(re.++ (re.union ((_ re.loop 1 67) (re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))) (re.++ (re.+ (re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))))(re.++ (re.range "." ".") ((_ re.loop 1 67) (re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))))))(re.++ (re.range "." ".")(re.++ (re.++ ((_ re.loop 2 4) (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))) (re.opt (re.++ (re.range "." ".") ((_ re.loop 2 2) (re.union (re.range "0" "9")(re.union (re.range "A" "A")(re.union (re.range "Z" "Z") (re.range "a" "z")))))))) (str.to_re "")))))))))


(assert (str.in_re x regexA))
(assert (str.in_re x regexB))

(assert (str.in_re Witness regexA))
(assert (str.in_re Witness regexB))
(check-sat)

(reset)








(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const regexB RegLan)
(declare-const x String)


(define-fun Witness () String (str.++ "8" (str.++ "@" (str.++ "\u{e8}" (str.++ "." (str.++ "t" (str.++ "b" "")))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))(re.++ (re.* (re.++ (re.union (re.range "+" "+") (re.range "-" ".")) (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))))(re.++ (re.range "@" "@")(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))(re.++ (re.* (re.++ (re.range "-" ".") (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))))(re.++ (re.range "." ".")(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))(re.++ (re.* (re.++ (re.range "-" ".") (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))))(re.++ (re.* (re.++ (re.union (re.range "," ",") (re.range ";" ";"))(re.++ (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))(re.++ (re.* (re.++ (re.union (re.range "+" "+") (re.range "-" ".")) (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))))(re.++ (re.range "@" "@")(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))(re.++ (re.* (re.++ (re.range "-" ".") (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))))(re.++ (re.range "." ".")(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))) (re.* (re.++ (re.range "-" ".") (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))))))))))))))) (str.to_re "")))))))))))))

(assert (= regexB (re.++ (str.to_re "")(re.++ (re.* (re.union (re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))) (re.+ (re.range " " " ")))(re.union (re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))) (re.+ (re.range "-" "-")))(re.union (re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))) (re.+ (re.range "." "."))) (re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))) (re.+ (re.range "+" "+")))))))(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z"))))(re.++ (re.range "@" "@")(re.++ (re.* (re.union (re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))) (re.+ (re.range "-" "-"))) (re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))) (re.range "." "."))))(re.++ ((_ re.loop 1 63) (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))(re.++ (re.range "." ".")(re.++ ((_ re.loop 2 6) (re.union (re.range "A" "Z") (re.range "a" "z"))) (str.to_re "")))))))))))


(assert (str.in_re x regexA))
(assert (str.in_re x regexB))

(assert (str.in_re Witness regexA))
(assert (str.in_re Witness regexB))
(check-sat)

(reset)








(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const regexB RegLan)
(declare-const x String)


(define-fun Witness () String (str.++ "a" (str.++ "@" (str.++ "9" (str.++ "." (str.++ "z" (str.++ "." (str.++ "g" (str.++ "z" "")))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.+ (re.union (re.range "-" ".")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))))(re.++ (re.range "@" "@")(re.++ (re.union ((_ re.loop 1 67) (re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))) (re.++ (re.+ (re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))))(re.++ (re.range "." ".") ((_ re.loop 1 67) (re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))))))(re.++ (re.range "." ".")(re.++ (re.++ ((_ re.loop 2 4) (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))) (re.opt (re.++ (re.range "." ".") ((_ re.loop 2 2) (re.union (re.range "0" "9")(re.union (re.range "A" "A")(re.union (re.range "Z" "Z") (re.range "a" "z")))))))) (str.to_re "")))))))))

(assert (= regexB (re.++ (str.to_re "")(re.++ (re.+ (re.++ (re.+ (re.union (re.range "-" ".")(re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))))(re.++ (re.range "@" "@")(re.++ (re.+ (re.union (re.range "-" ".")(re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))))(re.++ (re.range "." ".") ((_ re.loop 1 25) ((_ re.loop 2 5) (re.union (re.range "A" "Z") (re.range "a" "z")))))))))(re.++ (re.* (re.+ (re.++ (re.+ (re.union (re.range "-" ".")(re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))))(re.++ (re.range "@" "@")(re.++ (re.+ (re.union (re.range "-" ".")(re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))))(re.++ (re.range "." ".") ((_ re.loop 1 25) ((_ re.loop 2 5) (re.union (re.range "A" "Z") (re.range "a" "z")))))))))) (str.to_re ""))))))


(assert (str.in_re x regexA))
(assert (str.in_re x regexB))

(assert (str.in_re Witness regexA))
(assert (str.in_re Witness regexB))
(check-sat)

(reset)








(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const regexB RegLan)
(declare-const x String)


(define-fun Witness () String (str.++ "1" (str.++ "@" (str.++ "\u{f8}" (str.++ "." (str.++ "t" (str.++ "d" "")))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.+ (re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))))(re.++ (re.range "@" "@")(re.++ (re.+ (re.++ (re.+ (re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))) (re.range "." ".")))(re.++ (re.+ (re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))) (str.to_re ""))))))))

(assert (= regexB (re.++ (str.to_re "")(re.++ (re.* (re.union (re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))) (re.+ (re.range " " " ")))(re.union (re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))) (re.+ (re.range "-" "-")))(re.union (re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))) (re.+ (re.range "." "."))) (re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))) (re.+ (re.range "+" "+")))))))(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z"))))(re.++ (re.range "@" "@")(re.++ (re.* (re.union (re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))) (re.+ (re.range "-" "-"))) (re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))) (re.range "." "."))))(re.++ ((_ re.loop 1 63) (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))(re.++ (re.range "." ".")(re.++ ((_ re.loop 2 6) (re.union (re.range "A" "Z") (re.range "a" "z"))) (str.to_re "")))))))))))


(assert (str.in_re x regexA))
(assert (str.in_re x regexB))

(assert (str.in_re Witness regexA))
(assert (str.in_re Witness regexB))
(check-sat)

(reset)








(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const regexB RegLan)
(declare-const x String)


(define-fun Witness () String (str.++ "0" ""))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.opt (re.union (re.range "+" "+") (re.range "-" "-")))(re.++ (re.union (re.++ (re.* (re.range "0" "8"))(re.++ (re.opt (re.range "." ".")) (re.+ (re.range "0" "8")))) (re.++ (re.+ (re.range "0" "8"))(re.++ (re.opt (re.range "." ".")) (re.* (re.range "0" "8")))))(re.++ (re.opt (re.++ (re.union (re.range "E" "E") (re.range "e" "e"))(re.++ (re.opt (re.union (re.range "+" "+") (re.range "-" "-"))) (re.+ (re.range "0" "8"))))) (str.to_re "")))))))

(assert (= regexB (re.++ (str.to_re "")(re.++ (re.opt (re.union (re.range "+" "+") (re.range "-" "-")))(re.++ (re.union (re.++ (re.* (re.range "0" "9"))(re.++ (re.opt (re.range "." ".")) (re.+ (re.range "0" "9")))) (re.++ (re.+ (re.range "0" "9"))(re.++ (re.opt (re.range "." ".")) (re.* (re.range "0" "9")))))(re.++ (re.opt (re.++ (re.union (re.range "E" "E") (re.range "e" "e"))(re.++ (re.opt (re.union (re.range "+" "+") (re.range "-" "-"))) (re.+ (re.range "0" "9"))))) (str.to_re "")))))))


(assert (str.in_re x regexA))
(assert (str.in_re x regexB))

(assert (str.in_re Witness regexA))
(assert (str.in_re Witness regexB))
(check-sat)

(reset)








(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const regexB RegLan)
(declare-const x String)


(define-fun Witness () String (str.++ "I" (str.++ "@" (str.++ "-" (str.++ "." (str.++ "R" ""))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.+ (re.union (re.range "-" "-")(re.union (re.range "A" "Z")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))(re.++ (re.range "@" "@")(re.++ (re.+ (re.++ (re.+ (re.union (re.range "-" "-")(re.union (re.range "A" "Z")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))) (re.range "." ".")))(re.++ (re.+ (re.union (re.range "-" "-")(re.union (re.range "A" "Z")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))) (str.to_re ""))))))))

(assert (= regexB (re.++ (str.to_re "")(re.++ (re.+ (re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))))(re.++ (re.range "@" "@")(re.++ (re.+ (re.++ (re.+ (re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))) (re.range "." ".")))(re.++ (re.+ (re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))) (str.to_re ""))))))))


(assert (str.in_re x regexA))
(assert (str.in_re x regexB))

(assert (str.in_re Witness regexA))
(assert (str.in_re Witness regexB))
(check-sat)

(reset)








(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const regexB RegLan)
(declare-const x String)


(define-fun Witness () String (str.++ "a" (str.++ "@" (str.++ "\u{aa}" (str.++ "." (str.++ "1" ""))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.+ (re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))))(re.++ (re.range "@" "@")(re.++ (re.+ (re.++ (re.+ (re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))) (re.range "." ".")))(re.++ (re.+ (re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))) (str.to_re ""))))))))

(assert (= regexB (re.++ (str.to_re "")(re.++ (re.+ (re.++ (re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))(re.++ (re.* (re.++ (re.union (re.range "+" "+") (re.range "-" ".")) (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))))(re.++ (re.range "@" "@")(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))(re.++ (re.* (re.++ (re.range "-" ".") (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))))(re.++ (re.range "." ".")(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))) (re.* (re.++ (re.range "-" ".") (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))))))))))))(re.++ (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (re.opt (re.range "," ",")) (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))))))) (str.to_re "")))))


(assert (str.in_re x regexA))
(assert (str.in_re x regexB))

(assert (str.in_re Witness regexA))
(assert (str.in_re Witness regexB))
(check-sat)

(reset)








(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const regexB RegLan)
(declare-const x String)


(define-fun Witness () String (str.++ "1" (str.++ "@" (str.++ "-" (str.++ "." (str.++ "D" (str.++ "d" "")))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.+ (re.++ (re.+ (re.union (re.range "-" ".")(re.union (re.range "0" "8")(re.union (re.range "A" "Z") (re.range "b" "z")))))(re.++ (re.range "@" "@")(re.++ (re.+ (re.union (re.range "-" ".")(re.union (re.range "0" "8")(re.union (re.range "A" "Z") (re.range "b" "z")))))(re.++ (re.range "." ".") ((_ re.loop 1 25) ((_ re.loop 2 5) (re.union (re.range "A" "Z") (re.range "b" "z")))))))))(re.++ (re.* (re.+ (re.++ (re.+ (re.union (re.range "-" ".")(re.union (re.range "0" "8")(re.union (re.range "A" "Z") (re.range "b" "z")))))(re.++ (re.range "@" "@")(re.++ (re.+ (re.union (re.range "-" ".")(re.union (re.range "0" "8")(re.union (re.range "A" "Z") (re.range "b" "z")))))(re.++ (re.range "." ".") ((_ re.loop 1 25) ((_ re.loop 2 5) (re.union (re.range "A" "Z") (re.range "b" "z")))))))))) (str.to_re ""))))))

(assert (= regexB (re.++ (str.to_re "")(re.++ (re.+ (re.++ (re.+ (re.union (re.range "-" ".")(re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))))(re.++ (re.range "@" "@")(re.++ (re.+ (re.union (re.range "-" ".")(re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))))(re.++ (re.range "." ".") ((_ re.loop 1 25) ((_ re.loop 2 5) (re.union (re.range "A" "Z") (re.range "a" "z")))))))))(re.++ (re.* (re.+ (re.++ (re.+ (re.union (re.range "-" ".")(re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))))(re.++ (re.range "@" "@")(re.++ (re.+ (re.union (re.range "-" ".")(re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))))(re.++ (re.range "." ".") ((_ re.loop 1 25) ((_ re.loop 2 5) (re.union (re.range "A" "Z") (re.range "a" "z")))))))))) (str.to_re ""))))))


(assert (str.in_re x regexA))
(assert (str.in_re x regexB))

(assert (str.in_re Witness regexA))
(assert (str.in_re Witness regexB))
(check-sat)

(reset)








(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const regexB RegLan)
(declare-const x String)


(define-fun Witness () String (str.++ "\u{d2}" (str.++ "@" (str.++ "v" (str.++ "." (str.++ "X" ""))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))(re.++ (re.* (re.++ (re.union (re.range "+" "+") (re.range "-" ".")) (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))))(re.++ (re.range "@" "@")(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))(re.++ (re.* (re.++ (re.range "-" ".") (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))))(re.++ (re.range "." ".")(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))(re.++ (re.* (re.++ (re.range "-" ".") (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))))(re.++ (re.* (re.++ (re.union (re.range "," ",") (re.range ";" ";"))(re.++ (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))(re.++ (re.* (re.++ (re.union (re.range "+" "+") (re.range "-" ".")) (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))))(re.++ (re.range "@" "@")(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))(re.++ (re.* (re.++ (re.range "-" ".") (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))))(re.++ (re.range "." ".")(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))) (re.* (re.++ (re.range "-" ".") (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))))))))))))))) (str.to_re "")))))))))))))

(assert (= regexB (re.++ (str.to_re "")(re.++ (re.+ (re.++ (re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))(re.++ (re.* (re.++ (re.union (re.range "+" "+") (re.range "-" ".")) (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))))(re.++ (re.range "@" "@")(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))(re.++ (re.* (re.++ (re.range "-" ".") (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))))(re.++ (re.range "." ".")(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))) (re.* (re.++ (re.range "-" ".") (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))))))))))))(re.++ (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (re.opt (re.range "," ",")) (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))))))) (str.to_re "")))))


(assert (str.in_re x regexA))
(assert (str.in_re x regexB))

(assert (str.in_re Witness regexA))
(assert (str.in_re Witness regexB))
(check-sat)

(reset)








(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const regexB RegLan)
(declare-const x String)


(define-fun Witness () String (str.++ "8" (str.++ "@" (str.++ "8" (str.++ "." (str.++ "Q" (str.++ "n" "")))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.* (re.union (re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))) (re.+ (re.range " " " ")))(re.union (re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))) (re.+ (re.range "-" "-")))(re.union (re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))) (re.+ (re.range "." "."))) (re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))) (re.+ (re.range "+" "+")))))))(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z"))))(re.++ (re.range "@" "@")(re.++ (re.* (re.union (re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))) (re.+ (re.range "-" "-"))) (re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))) (re.range "." "."))))(re.++ ((_ re.loop 1 63) (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))(re.++ (re.range "." ".")(re.++ ((_ re.loop 2 6) (re.union (re.range "A" "Z") (re.range "a" "z"))) (str.to_re "")))))))))))

(assert (= regexB (re.++ (str.to_re "")(re.++ (re.+ (re.++ (re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))(re.++ (re.* (re.++ (re.union (re.range "+" "+") (re.range "-" ".")) (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))))(re.++ (re.range "@" "@")(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))(re.++ (re.* (re.++ (re.range "-" ".") (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))))(re.++ (re.range "." ".")(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))) (re.* (re.++ (re.range "-" ".") (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))))))))))))(re.++ (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (re.opt (re.range "," ",")) (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))))))) (str.to_re "")))))


(assert (str.in_re x regexA))
(assert (str.in_re x regexB))

(assert (str.in_re Witness regexA))
(assert (str.in_re Witness regexB))
(check-sat)

(reset)
(set-logic QF_S)









(declare-const x String)
(assert (str.in_re x (re.inter (re.++ ((_ re.^ 10) re.allchar) (re.union (str.to_re "a") (re.++ re.allchar re.allchar))) (re.inter (re.inter (re.++ (re.++ (re.++ (re.++ (re.++ (re.++ (re.range "0" "3") (re.range "0" "9")) (str.to_re "-")) ((_ re.^ 3) (re.union (re.range "A" "Z") (re.range "a" "z")))) (str.to_re "-")) ((_ re.^ 4) (re.range "0" "9"))) (str.to_re "")) (re.++ (re.++ re.all (re.union (re.++ (re.++ (re.union (str.to_re "J") (str.to_re "j")) (re.union (str.to_re "A") (str.to_re "a"))) (re.union (str.to_re "N") (str.to_re "n"))) (re.++ (re.++ (re.union (str.to_re "M") (str.to_re "m")) (re.union (str.to_re "A") (str.to_re "a"))) (re.union (str.to_re "R") (str.to_re "r"))))) re.all)) (re.union (re.inter (re.++ (re.++ (re.++ (re.++ re.all (re.union (str.to_re "F") (str.to_re "f"))) (re.union (str.to_re "E") (str.to_re "e"))) (re.union (str.to_re "B") (str.to_re "b"))) re.all) (re.++ (re.range "0" "2") re.all)) (re.inter (re.comp (re.++ (re.++ (re.++ (re.++ re.all (re.union (str.to_re "F") (str.to_re "f"))) (re.union (str.to_re "E") (str.to_re "e"))) (re.union (str.to_re "B") (str.to_re "b"))) re.all)) re.all))))))
(check-sat)


(reset)
(set-logic QF_S)
(declare-fun field_date () String)
(assert (let ((a!1 (re.++ (re.union (re.range "A" "Z") (re.range "a" "z"))
                  (re.++ (str.to_re "-")
                         (re.++ (re.range "0" "9") (re.range "0" "9")))))
      (a!5 (re.++ (str.to_re "2")
                  (re.++ (str.to_re "0")
                         (re.++ (str.to_re "1") (str.to_re "9")))))
      (a!6 (re.++ (str.to_re "2")
                  (re.++ (str.to_re "0")
                         (re.++ (str.to_re "2") (str.to_re "0"))))))
(let ((a!2 (re.++ (re.union (re.range "A" "Z") (re.range "a" "z"))
                  (re.++ (re.union (re.range "A" "Z") (re.range "a" "z")) a!1))))
(let ((a!3 (re.++ (re.range "0" "9")
                  (re.++ (re.range "0" "9") (re.++ (str.to_re "-") a!2)))))
(let ((a!4 (str.in_re field_date
                      (re.++ (re.range "0" "9") (re.++ (re.range "0" "9") a!3)))))
  (and a!4
       (or (str.in_re field_date (re.++ re.all a!5))
           (str.in_re field_date (re.++ re.all a!6)))))))))

(check-sat)

(reset)
(set-logic QF_S)







(declare-const x String)
(assert (str.in_re x (re.inter (re.inter (re.++ (re.++ re.all (re.union (re.union (re.union (re.union (re.union (re.union (str.to_re "monday") (str.to_re "tuesday")) (str.to_re "wednesday")) (str.to_re "thursday")) (str.to_re "friday")) (str.to_re "saturday")) (str.to_re "sunday"))) re.all) (re.++ (re.++ re.all (re.union (re.union (re.union (re.union (re.union (re.union (re.union (re.union (re.union (re.union (re.union (str.to_re "january") (str.to_re "february")) (str.to_re "march")) (str.to_re "april")) (str.to_re "may")) (str.to_re "june")) (str.to_re "july")) (str.to_re "august")) (str.to_re "september")) (str.to_re "october")) (str.to_re "november")) (str.to_re "december"))) re.all)) (re.* (re.range "a" "x")))))
(check-sat)

(reset)
(set-logic QF_S)















(declare-const x String)
(assert (str.in_re x (re.inter
    (re.++
        (re.inter
            (re.++
                (re.range "0" "3")
                (re.range "0" "9")
                (str.to_re "-")
                ((_ re.^ 3) (re.union (re.range "A" "Z") (re.range "a" "z")))
                (str.to_re "-")
                ((_ re.^ 4) (re.range "0" "9")))
            (re.++
                re.all
                (re.union (str.to_re "jan") (str.to_re "feb") (str.to_re "jul"))
                re.all)
            (re.comp
                (re.++
                    (str.to_re "3")
                    re.all
                    (str.to_re "feb")
                    re.all))
        ) (re.+ (str.to_re "a")))
    (re.++ ((_ re.^ 11) re.allchar) (re.* (str.to_re "b")))
)))

(check-sat)


(reset)
(set-logic QF_S)







(declare-const x String)
(assert (str.in_re x (re.inter (re.inter (re.++ (re.++ re.all (re.union (re.union (re.union (re.union (re.union (re.union (re.++ (re.++ (re.++ (re.++ (re.++ (re.union (str.to_re "M") (str.to_re "m")) (re.union (str.to_re "O") (str.to_re "o"))) (re.union (str.to_re "N") (str.to_re "n"))) (re.union (str.to_re "D") (str.to_re "d"))) (re.union (str.to_re "A") (str.to_re "a"))) (re.union (str.to_re "Y") (str.to_re "y"))) (re.++ (re.++ (re.++ (re.++ (re.++ (re.++ (re.union (str.to_re "T") (str.to_re "t")) (re.union (str.to_re "U") (str.to_re "u"))) (re.union (str.to_re "E") (str.to_re "e"))) (re.union (str.to_re "S") (str.to_re "s"))) (re.union (str.to_re "D") (str.to_re "d"))) (re.union (str.to_re "A") (str.to_re "a"))) (re.union (str.to_re "Y") (str.to_re "y")))) (re.++ (re.++ (re.++ (re.++ (re.++ (re.++ (re.++ (re.++ (re.union (str.to_re "W") (str.to_re "w")) (re.union (str.to_re "E") (str.to_re "e"))) (re.union (str.to_re "D") (str.to_re "d"))) (re.union (str.to_re "N") (str.to_re "n"))) (re.union (str.to_re "E") (str.to_re "e"))) (re.union (str.to_re "S") (str.to_re "s"))) (re.union (str.to_re "D") (str.to_re "d"))) (re.union (str.to_re "A") (str.to_re "a"))) (re.union (str.to_re "Y") (str.to_re "y")))) (re.++ (re.++ (re.++ (re.++ (re.++ (re.++ (re.++ (re.union (str.to_re "T") (str.to_re "t")) (re.union (str.to_re "H") (str.to_re "h"))) (re.union (str.to_re "U") (str.to_re "u"))) (re.union (str.to_re "R") (str.to_re "r"))) (re.union (str.to_re "S") (str.to_re "s"))) (re.union (str.to_re "D") (str.to_re "d"))) (re.union (str.to_re "A") (str.to_re "a"))) (re.union (str.to_re "Y") (str.to_re "y")))) (re.++ (re.++ (re.++ (re.++ (re.++ (re.union (str.to_re "F") (str.to_re "f")) (re.union (str.to_re "R") (str.to_re "r"))) (re.union (str.to_re "I") (str.to_re "i"))) (re.union (str.to_re "D") (str.to_re "d"))) (re.union (str.to_re "A") (str.to_re "a"))) (re.union (str.to_re "Y") (str.to_re "y")))) (re.++ (re.++ (re.++ (re.++ (re.++ (re.++ (re.++ (re.union (str.to_re "S") (str.to_re "s")) (re.union (str.to_re "A") (str.to_re "a"))) (re.union (str.to_re "T") (str.to_re "t"))) (re.union (str.to_re "U") (str.to_re "u"))) (re.union (str.to_re "R") (str.to_re "r"))) (re.union (str.to_re "D") (str.to_re "d"))) (re.union (str.to_re "A") (str.to_re "a"))) (re.union (str.to_re "Y") (str.to_re "y")))) (re.++ (re.++ (re.++ (re.++ (re.++ (re.union (str.to_re "S") (str.to_re "s")) (re.union (str.to_re "U") (str.to_re "u"))) (re.union (str.to_re "N") (str.to_re "n"))) (re.union (str.to_re "D") (str.to_re "d"))) (re.union (str.to_re "A") (str.to_re "a"))) (re.union (str.to_re "Y") (str.to_re "y"))))) re.all) (re.++ (re.++ re.all (re.union (re.union (re.union (re.union (re.union (re.union (re.union (re.union (re.union (re.union (re.union (re.++ (re.++ (re.++ (re.++ (re.++ (re.++ (re.union (str.to_re "J") (str.to_re "j")) (re.union (str.to_re "A") (str.to_re "a"))) (re.union (str.to_re "N") (str.to_re "n"))) (re.union (str.to_re "U") (str.to_re "u"))) (re.union (str.to_re "A") (str.to_re "a"))) (re.union (str.to_re "R") (str.to_re "r"))) (re.union (str.to_re "Y") (str.to_re "y"))) (re.++ (re.++ (re.++ (re.++ (re.++ (re.++ (re.++ (re.union (str.to_re "F") (str.to_re "f")) (re.union (str.to_re "E") (str.to_re "e"))) (re.union (str.to_re "B") (str.to_re "b"))) (re.union (str.to_re "R") (str.to_re "r"))) (re.union (str.to_re "U") (str.to_re "u"))) (re.union (str.to_re "A") (str.to_re "a"))) (re.union (str.to_re "R") (str.to_re "r"))) (re.union (str.to_re "Y") (str.to_re "y")))) (re.++ (re.++ (re.++ (re.++ (re.union (str.to_re "M") (str.to_re "m")) (re.union (str.to_re "A") (str.to_re "a"))) (re.union (str.to_re "R") (str.to_re "r"))) (re.union (str.to_re "C") (str.to_re "c"))) (re.union (str.to_re "H") (str.to_re "h")))) (re.++ (re.++ (re.++ (re.++ (re.union (str.to_re "A") (str.to_re "a")) (re.union (str.to_re "P") (str.to_re "p"))) (re.union (str.to_re "R") (str.to_re "r"))) (re.union (str.to_re "I") (str.to_re "i"))) (re.union (str.to_re "L") (str.to_re "l")))) (re.++ (re.++ (re.union (str.to_re "M") (str.to_re "m")) (re.union (str.to_re "A") (str.to_re "a"))) (re.union (str.to_re "Y") (str.to_re "y")))) (re.++ (re.++ (re.++ (re.union (str.to_re "J") (str.to_re "j")) (re.union (str.to_re "U") (str.to_re "u"))) (re.union (str.to_re "N") (str.to_re "n"))) (re.union (str.to_re "E") (str.to_re "e")))) (re.++ (re.++ (re.++ (re.union (str.to_re "J") (str.to_re "j")) (re.union (str.to_re "U") (str.to_re "u"))) (re.union (str.to_re "L") (str.to_re "l"))) (re.union (str.to_re "Y") (str.to_re "y")))) (re.++ (re.++ (re.++ (re.++ (re.++ (re.union (str.to_re "A") (str.to_re "a")) (re.union (str.to_re "U") (str.to_re "u"))) (re.union (str.to_re "G") (str.to_re "g"))) (re.union (str.to_re "U") (str.to_re "u"))) (re.union (str.to_re "S") (str.to_re "s"))) (re.union (str.to_re "T") (str.to_re "t")))) (re.++ (re.++ (re.++ (re.++ (re.++ (re.++ (re.++ (re.++ (re.union (str.to_re "S") (str.to_re "s")) (re.union (str.to_re "E") (str.to_re "e"))) (re.union (str.to_re "P") (str.to_re "p"))) (re.union (str.to_re "T") (str.to_re "t"))) (re.union (str.to_re "E") (str.to_re "e"))) (re.union (str.to_re "M") (str.to_re "m"))) (re.union (str.to_re "B") (str.to_re "b"))) (re.union (str.to_re "E") (str.to_re "e"))) (re.union (str.to_re "R") (str.to_re "r")))) (re.++ (re.++ (re.++ (re.++ (re.++ (re.++ (re.union (str.to_re "O") (str.to_re "o")) (re.union (str.to_re "C") (str.to_re "c"))) (re.union (str.to_re "T") (str.to_re "t"))) (re.union (str.to_re "O") (str.to_re "o"))) (re.union (str.to_re "B") (str.to_re "b"))) (re.union (str.to_re "E") (str.to_re "e"))) (re.union (str.to_re "R") (str.to_re "r")))) (re.++ (re.++ (re.++ (re.++ (re.++ (re.++ (re.++ (re.union (str.to_re "N") (str.to_re "n")) (re.union (str.to_re "O") (str.to_re "o"))) (re.union (str.to_re "V") (str.to_re "v"))) (re.union (str.to_re "E") (str.to_re "e"))) (re.union (str.to_re "M") (str.to_re "m"))) (re.union (str.to_re "B") (str.to_re "b"))) (re.union (str.to_re "E") (str.to_re "e"))) (re.union (str.to_re "R") (str.to_re "r")))) (re.++ (re.++ (re.++ (re.++ (re.++ (re.++ (re.++ (re.union (str.to_re "D") (str.to_re "d")) (re.union (str.to_re "E") (str.to_re "e"))) (re.union (str.to_re "C") (str.to_re "c"))) (re.union (str.to_re "E") (str.to_re "e"))) (re.union (str.to_re "M") (str.to_re "m"))) (re.union (str.to_re "B") (str.to_re "b"))) (re.union (str.to_re "E") (str.to_re "e"))) (re.union (str.to_re "R") (str.to_re "r"))))) re.all)) (re.* (re.union (re.range "A" "X") (re.range "a" "x"))))))
(check-sat)

(reset)
(set-logic QF_S)












(declare-const x String)
(assert (str.in_re x (re.inter (re.++ ((_ re.^ 10) re.allchar) (re.union (str.to_re "a") (re.++ re.allchar re.allchar))) (re.inter (re.inter (re.inter (re.inter (re.inter (re.++ (re.++ (re.++ (re.++ (re.++ ((_ re.^ 2) (re.range "0" "9")) (str.to_re "-")) ((_ re.^ 3) (re.union (re.range "A" "Z") (re.range "a" "z")))) (str.to_re "-")) ((_ re.^ 4) (re.range "0" "9"))) (str.to_re "")) (re.++ (re.++ re.all (re.union (re.union (re.union (re.union (re.union (re.++ (re.++ (re.union (str.to_re "J") (str.to_re "j")) (re.union (str.to_re "A") (str.to_re "a"))) (re.union (str.to_re "N") (str.to_re "n"))) (re.++ (re.++ (re.union (str.to_re "F") (str.to_re "f")) (re.union (str.to_re "E") (str.to_re "e"))) (re.union (str.to_re "B") (str.to_re "b")))) (re.++ (re.++ (re.union (str.to_re "M") (str.to_re "m")) (re.union (str.to_re "A") (str.to_re "a"))) (re.union (str.to_re "R") (str.to_re "r")))) (re.++ (re.++ (re.union (str.to_re "A") (str.to_re "a")) (re.union (str.to_re "P") (str.to_re "p"))) (re.union (str.to_re "R") (str.to_re "r")))) (re.++ (re.++ (re.union (str.to_re "M") (str.to_re "m")) (re.union (str.to_re "A") (str.to_re "a"))) (re.union (str.to_re "Y") (str.to_re "y")))) (re.++ (re.++ (re.union (str.to_re "J") (str.to_re "j")) (re.union (str.to_re "U") (str.to_re "u"))) (re.union (str.to_re "N") (str.to_re "n"))))) re.all)) (re.union (re.++ (re.++ (str.to_re "3") (re.range "0" "1")) re.all) (re.++ (re.range "0" "2") re.all))) (re.union (re.inter (re.++ (re.++ (re.++ (re.++ re.all (re.union (str.to_re "F") (str.to_re "f"))) (re.union (str.to_re "E") (str.to_re "e"))) (re.union (str.to_re "B") (str.to_re "b"))) re.all) (re.++ (re.range "0" "2") re.all)) (re.inter (re.comp (re.++ (re.++ (re.++ (re.++ re.all (re.union (str.to_re "F") (str.to_re "f"))) (re.union (str.to_re "E") (str.to_re "e"))) (re.union (str.to_re "B") (str.to_re "b"))) re.all)) re.all))) (re.union (re.++ (re.++ (re.++ re.all (str.to_re "19")) re.allchar) re.allchar) (re.++ (re.++ (re.++ re.all (str.to_re "20")) re.allchar) re.allchar))) (re.union (re.inter (re.++ (re.++ re.all (re.union (re.++ (re.++ (re.union (str.to_re "A") (str.to_re "a")) (re.union (str.to_re "P") (str.to_re "p"))) (re.union (str.to_re "R") (str.to_re "r"))) (re.++ (re.++ (re.union (str.to_re "J") (str.to_re "j")) (re.union (str.to_re "U") (str.to_re "u"))) (re.union (str.to_re "N") (str.to_re "n"))))) re.all) (re.union (re.++ (re.range "0" "2") re.all) (re.++ (str.to_re "30") re.all))) (re.inter (re.comp (re.++ (re.++ re.all (re.union (re.++ (re.++ (re.union (str.to_re "A") (str.to_re "a")) (re.union (str.to_re "P") (str.to_re "p"))) (re.union (str.to_re "R") (str.to_re "r"))) (re.++ (re.++ (re.union (str.to_re "J") (str.to_re "j")) (re.union (str.to_re "U") (str.to_re "u"))) (re.union (str.to_re "N") (str.to_re "n"))))) re.all)) re.all))))))
(check-sat)


(reset)
(set-logic QF_S)
(declare-fun field_date () String)
(assert (let ((a!1 (re.++ (re.range "0" "9")
                  (re.++ (re.range "0" "9")
                         (re.++ (re.range "0" "9") (re.range "0" "9")))))
      (a!5 (str.in_re field_date
                      (re.++ (str.to_re "3") (re.++ (str.to_re "0") re.all))))
      (a!6 (str.in_re field_date
                      (re.++ (str.to_re "3") (re.++ (str.to_re "1") re.all))))
      (a!8 (str.in_re field_date
                      (re.++ (str.to_re "0") (re.++ (str.to_re "0") re.all))))
      (a!9 (re.++ (re.union (str.to_re "a") (str.to_re "A"))
                  (re.++ (re.union (str.to_re "n") (str.to_re "N")) re.all)))
      (a!11 (re.++ (re.union (str.to_re "e") (str.to_re "E"))
                   (re.++ (re.union (str.to_re "b") (str.to_re "B")) re.all)))
      (a!13 (re.++ (re.union (str.to_re "a") (str.to_re "A"))
                   (re.++ (re.union (str.to_re "r") (str.to_re "R")) re.all)))
      (a!15 (re.++ (re.union (str.to_re "p") (str.to_re "P"))
                   (re.++ (re.union (str.to_re "r") (str.to_re "R")) re.all)))
      (a!17 (re.++ (re.union (str.to_re "a") (str.to_re "A"))
                   (re.++ (re.union (str.to_re "y") (str.to_re "Y")) re.all)))
      (a!19 (re.++ (re.union (str.to_re "u") (str.to_re "U"))
                   (re.++ (re.union (str.to_re "n") (str.to_re "N")) re.all)))
      (a!21 (re.++ (re.union (str.to_re "u") (str.to_re "U"))
                   (re.++ (re.union (str.to_re "l") (str.to_re "L")) re.all)))
      (a!23 (re.++ (re.union (str.to_re "u") (str.to_re "U"))
                   (re.++ (re.union (str.to_re "g") (str.to_re "G")) re.all)))
      (a!25 (re.++ (re.union (str.to_re "e") (str.to_re "E"))
                   (re.++ (re.union (str.to_re "p") (str.to_re "P")) re.all)))
      (a!27 (re.++ (re.union (str.to_re "c") (str.to_re "C"))
                   (re.++ (re.union (str.to_re "t") (str.to_re "T")) re.all)))
      (a!29 (re.++ (re.union (str.to_re "o") (str.to_re "O"))
                   (re.++ (re.union (str.to_re "v") (str.to_re "V")) re.all)))
      (a!31 (re.++ (re.union (str.to_re "e") (str.to_re "E"))
                   (re.++ (re.union (str.to_re "c") (str.to_re "C")) re.all))))
(let ((a!2 (re.++ (re.union (re.range "A" "Z") (re.range "a" "z"))
                  (re.++ (re.union (re.range "A" "Z") (re.range "a" "z"))
                         (re.++ (str.to_re "-") a!1))))
      (a!7 (or (str.in_re field_date (re.++ (str.to_re "0") re.all))
               (str.in_re field_date (re.++ (str.to_re "1") re.all))
               (str.in_re field_date (re.++ (str.to_re "2") re.all))
               a!5
               a!6))
      (a!10 (re.++ re.all
                   (re.++ (re.union (str.to_re "j") (str.to_re "J")) a!9)))
      (a!12 (re.++ re.all
                   (re.++ (re.union (str.to_re "f") (str.to_re "F")) a!11)))
      (a!14 (re.++ re.all
                   (re.++ (re.union (str.to_re "m") (str.to_re "M")) a!13)))
      (a!16 (re.++ re.all
                   (re.++ (re.union (str.to_re "a") (str.to_re "A")) a!15)))
      (a!18 (re.++ re.all
                   (re.++ (re.union (str.to_re "m") (str.to_re "M")) a!17)))
      (a!20 (re.++ re.all
                   (re.++ (re.union (str.to_re "j") (str.to_re "J")) a!19)))
      (a!22 (re.++ re.all
                   (re.++ (re.union (str.to_re "j") (str.to_re "J")) a!21)))
      (a!24 (re.++ re.all
                   (re.++ (re.union (str.to_re "a") (str.to_re "A")) a!23)))
      (a!26 (re.++ re.all
                   (re.++ (re.union (str.to_re "s") (str.to_re "S")) a!25)))
      (a!28 (re.++ re.all
                   (re.++ (re.union (str.to_re "o") (str.to_re "O")) a!27)))
      (a!30 (re.++ re.all
                   (re.++ (re.union (str.to_re "n") (str.to_re "N")) a!29)))
      (a!32 (re.++ re.all
                   (re.++ (re.union (str.to_re "d") (str.to_re "D")) a!31))))
(let ((a!3 (re.++ (str.to_re "-")
                  (re.++ (re.union (re.range "A" "Z") (re.range "a" "z")) a!2)))
      (a!33 (or (not (str.in_re field_date a!12)) (and (not a!5) (not a!6))))
      (a!34 (or (and (not (str.in_re field_date a!16))
                     (not (str.in_re field_date a!20))
                     (not (str.in_re field_date a!26))
                     (not (str.in_re field_date a!30)))
                (not a!6))))
(let ((a!4 (str.in_re field_date
                      (re.++ (re.range "0" "9") (re.++ (re.range "0" "9") a!3)))))
(let ((a!35 (not (and a!4
                      a!7
                      (not a!8)
                      (or (str.in_re field_date a!10)
                          (str.in_re field_date a!12)
                          (str.in_re field_date a!14)
                          (str.in_re field_date a!16)
                          (str.in_re field_date a!18)
                          (str.in_re field_date a!20)
                          (str.in_re field_date a!22)
                          (str.in_re field_date a!24)
                          (str.in_re field_date a!26)
                          (str.in_re field_date a!28)
                          (str.in_re field_date a!30)
                          (str.in_re field_date a!32))
                      a!33
                      a!34))))
(let ((a!36 (or a!35
                (and a!4
                     a!7
                     (not a!8)
                     (or (str.in_re field_date a!10)
                         (str.in_re field_date a!12))
                     a!33))))
  (not a!36))))))))

(check-sat)

(reset)
(set-logic QF_S)







(declare-const x String)
(assert (str.in_re x (re.inter (re.inter (re.++ (re.++ re.all (re.union (re.union (re.union (re.union (re.union (re.union (str.to_re "monday") (str.to_re "tuesday")) (str.to_re "wednesday")) (str.to_re "thursday")) (str.to_re "friday")) (str.to_re "saturday")) (str.to_re "sunday"))) re.all) (re.++ (re.++ re.all (re.union (re.union (re.union (re.union (re.union (re.union (re.union (re.union (re.union (re.union (re.union (str.to_re "january") (str.to_re "february")) (str.to_re "march")) (str.to_re "april")) (str.to_re "may")) (str.to_re "june")) (str.to_re "july")) (str.to_re "august")) (str.to_re "september")) (str.to_re "october")) (str.to_re "november")) (str.to_re "december"))) re.all)) (re.* (re.range "!" "~")))))
(check-sat)


(reset)
(set-logic QF_S)







(declare-const x String)
(assert (str.in_re x (re.inter (re.inter (re.++ (re.++ (re.++ (re.++ (re.++ (re.++ (re.range "0" "3") (re.range "0" "9")) (str.to_re "-")) ((_ re.^ 3) (re.union (re.range "A" "Z") (re.range "a" "z")))) (str.to_re "-")) ((_ re.^ 4) (re.range "0" "9"))) (str.to_re "")) (re.++ (re.++ re.all (re.union (re.++ (re.++ (re.union (str.to_re "J") (str.to_re "j")) (re.union (str.to_re "A") (str.to_re "a"))) (re.union (str.to_re "N") (str.to_re "n"))) (re.++ (re.++ (re.union (str.to_re "M") (str.to_re "m")) (re.union (str.to_re "A") (str.to_re "a"))) (re.union (str.to_re "R") (str.to_re "r"))))) re.all)) (re.union (re.inter (re.++ (re.++ (re.++ (re.++ re.all (re.union (str.to_re "F") (str.to_re "f"))) (re.union (str.to_re "E") (str.to_re "e"))) (re.union (str.to_re "B") (str.to_re "b"))) re.all) (re.++ (re.range "0" "2") re.all)) (re.inter (re.comp (re.++ (re.++ (re.++ (re.++ re.all (re.union (str.to_re "F") (str.to_re "f"))) (re.union (str.to_re "E") (str.to_re "e"))) (re.union (str.to_re "B") (str.to_re "b"))) re.all)) re.all)))))
(check-sat)


(reset)
(set-logic QF_S)










(declare-const x String)
(assert (str.in_re x (re.inter (re.inter (re.inter (re.inter (re.inter (re.++ (re.++ (re.++ (re.++ (re.++ ((_ re.^ 2) (re.range "0" "9")) (str.to_re "-")) ((_ re.^ 3) (re.union (re.range "A" "Z") (re.range "a" "z")))) (str.to_re "-")) ((_ re.^ 4) (re.range "0" "9"))) (str.to_re "")) (re.++ (re.++ re.all (re.union (re.union (re.union (re.union (re.union (re.++ (re.++ (re.union (str.to_re "J") (str.to_re "j")) (re.union (str.to_re "A") (str.to_re "a"))) (re.union (str.to_re "N") (str.to_re "n"))) (re.++ (re.++ (re.union (str.to_re "F") (str.to_re "f")) (re.union (str.to_re "E") (str.to_re "e"))) (re.union (str.to_re "B") (str.to_re "b")))) (re.++ (re.++ (re.union (str.to_re "M") (str.to_re "m")) (re.union (str.to_re "A") (str.to_re "a"))) (re.union (str.to_re "R") (str.to_re "r")))) (re.++ (re.++ (re.union (str.to_re "A") (str.to_re "a")) (re.union (str.to_re "P") (str.to_re "p"))) (re.union (str.to_re "R") (str.to_re "r")))) (re.++ (re.++ (re.union (str.to_re "M") (str.to_re "m")) (re.union (str.to_re "A") (str.to_re "a"))) (re.union (str.to_re "Y") (str.to_re "y")))) (re.++ (re.++ (re.union (str.to_re "J") (str.to_re "j")) (re.union (str.to_re "U") (str.to_re "u"))) (re.union (str.to_re "N") (str.to_re "n"))))) re.all)) (re.union (re.++ (re.++ (str.to_re "3") (re.range "0" "1")) re.all) (re.++ (re.range "0" "2") re.all))) (re.union (re.inter (re.++ (re.++ (re.++ (re.++ re.all (re.union (str.to_re "F") (str.to_re "f"))) (re.union (str.to_re "E") (str.to_re "e"))) (re.union (str.to_re "B") (str.to_re "b"))) re.all) (re.++ (re.range "0" "2") re.all)) (re.inter (re.comp (re.++ (re.++ (re.++ (re.++ re.all (re.union (str.to_re "F") (str.to_re "f"))) (re.union (str.to_re "E") (str.to_re "e"))) (re.union (str.to_re "B") (str.to_re "b"))) re.all)) re.all))) (re.union (re.++ (re.++ (re.++ re.all (str.to_re "19")) re.allchar) re.allchar) (re.++ (re.++ (re.++ re.all (str.to_re "20")) re.allchar) re.allchar))) (re.union (re.inter (re.++ (re.++ re.all (re.union (re.++ (re.++ (re.union (str.to_re "A") (str.to_re "a")) (re.union (str.to_re "P") (str.to_re "p"))) (re.union (str.to_re "R") (str.to_re "r"))) (re.++ (re.++ (re.union (str.to_re "J") (str.to_re "j")) (re.union (str.to_re "U") (str.to_re "u"))) (re.union (str.to_re "N") (str.to_re "n"))))) re.all) (re.union (re.++ (re.range "0" "2") re.all) (re.++ (str.to_re "30") re.all))) (re.inter (re.comp (re.++ (re.++ re.all (re.union (re.++ (re.++ (re.union (str.to_re "A") (str.to_re "a")) (re.union (str.to_re "P") (str.to_re "p"))) (re.union (str.to_re "R") (str.to_re "r"))) (re.++ (re.++ (re.union (str.to_re "J") (str.to_re "j")) (re.union (str.to_re "U") (str.to_re "u"))) (re.union (str.to_re "N") (str.to_re "n"))))) re.all)) re.all)))))
(check-sat)


(reset)
(set-logic QF_S)











(declare-const x String)
(assert (str.in_re x (re.inter (re.inter (re.inter (re.inter (re.inter (re.inter (re.++ (re.++ (re.++ (re.++ (re.++ ((_ re.^ 2) (re.range "0" "9")) (str.to_re "-")) ((_ re.^ 3) (re.union (re.range "A" "Z") (re.range "a" "z")))) (str.to_re "-")) ((_ re.^ 4) (re.range "0" "9"))) (str.to_re "")) (re.++ (re.++ re.all (re.union (re.union (re.union (re.union (re.union (re.++ (re.++ (re.union (str.to_re "J") (str.to_re "j")) (re.union (str.to_re "A") (str.to_re "a"))) (re.union (str.to_re "N") (str.to_re "n"))) (re.++ (re.++ (re.union (str.to_re "F") (str.to_re "f")) (re.union (str.to_re "E") (str.to_re "e"))) (re.union (str.to_re "B") (str.to_re "b")))) (re.++ (re.++ (re.union (str.to_re "M") (str.to_re "m")) (re.union (str.to_re "A") (str.to_re "a"))) (re.union (str.to_re "R") (str.to_re "r")))) (re.++ (re.++ (re.union (str.to_re "A") (str.to_re "a")) (re.union (str.to_re "P") (str.to_re "p"))) (re.union (str.to_re "R") (str.to_re "r")))) (re.++ (re.++ (re.union (str.to_re "M") (str.to_re "m")) (re.union (str.to_re "A") (str.to_re "a"))) (re.union (str.to_re "Y") (str.to_re "y")))) (re.++ (re.++ (re.union (str.to_re "J") (str.to_re "j")) (re.union (str.to_re "U") (str.to_re "u"))) (re.union (str.to_re "N") (str.to_re "n"))))) re.all)) (re.union (re.++ (re.++ (str.to_re "3") (re.range "0" "1")) re.all) (re.++ (re.range "0" "2") re.all))) (re.union (re.inter (re.++ (re.++ (re.++ (re.++ re.all (re.union (str.to_re "F") (str.to_re "f"))) (re.union (str.to_re "E") (str.to_re "e"))) (re.union (str.to_re "B") (str.to_re "b"))) re.all) (re.++ (re.range "0" "2") re.all)) (re.inter (re.comp (re.++ (re.++ (re.++ (re.++ re.all (re.union (str.to_re "F") (str.to_re "f"))) (re.union (str.to_re "E") (str.to_re "e"))) (re.union (str.to_re "B") (str.to_re "b"))) re.all)) re.all))) (re.union (re.++ (re.++ (re.++ re.all (str.to_re "19")) re.allchar) re.allchar) (re.++ (re.++ (re.++ re.all (str.to_re "20")) re.allchar) re.allchar))) (re.union (re.inter (re.++ (re.++ re.all (re.union (re.++ (re.++ (re.union (str.to_re "A") (str.to_re "a")) (re.union (str.to_re "P") (str.to_re "p"))) (re.union (str.to_re "R") (str.to_re "r"))) (re.++ (re.++ (re.union (str.to_re "J") (str.to_re "j")) (re.union (str.to_re "U") (str.to_re "u"))) (re.union (str.to_re "N") (str.to_re "n"))))) re.all) (re.union (re.++ (re.range "0" "2") re.all) (re.++ (str.to_re "30") re.all))) (re.inter (re.comp (re.++ (re.++ re.all (re.union (re.++ (re.++ (re.union (str.to_re "A") (str.to_re "a")) (re.union (str.to_re "P") (str.to_re "p"))) (re.union (str.to_re "R") (str.to_re "r"))) (re.++ (re.++ (re.union (str.to_re "J") (str.to_re "j")) (re.union (str.to_re "U") (str.to_re "u"))) (re.union (str.to_re "N") (str.to_re "n"))))) re.all)) re.all))) (re.union (re.inter (re.++ (str.to_re "00") re.all) re.none) (re.inter (re.comp (re.++ (str.to_re "00") re.all)) re.all)))))
(check-sat)


(reset)
(set-logic QF_S)
(declare-fun field_date () String)
(assert (let ((a!1 (re.++ (re.range "0" "9")
                  (re.++ (re.range "0" "9")
                         (re.++ (re.range "0" "9") (re.range "0" "9")))))
      (a!5 (str.in_re field_date
                      (re.++ (str.to_re "3") (re.++ (str.to_re "0") re.all))))
      (a!6 (str.in_re field_date
                      (re.++ (str.to_re "3") (re.++ (str.to_re "1") re.all))))
      (a!8 (str.in_re field_date
                      (re.++ (str.to_re "0") (re.++ (str.to_re "0") re.all)))))
(let ((a!2 (re.++ (re.union (re.range "A" "Z") (re.range "a" "z"))
                  (re.++ (re.union (re.range "A" "Z") (re.range "a" "z"))
                         (re.++ (str.to_re "-") a!1))))
      (a!7 (or (str.in_re field_date (re.++ (str.to_re "0") re.all))
               (str.in_re field_date (re.++ (str.to_re "1") re.all))
               (str.in_re field_date (re.++ (str.to_re "2") re.all))
               a!5
               a!6)))
(let ((a!3 (re.++ (str.to_re "-")
                  (re.++ (re.union (re.range "A" "Z") (re.range "a" "z")) a!2))))
(let ((a!4 (str.in_re field_date
                      (re.++ (re.range "0" "9") (re.++ (re.range "0" "9") a!3)))))
  (and a!4 a!7 (not a!8)))))))

(check-sat)


(reset)
(set-logic QF_S)






(declare-const x String)
(assert (str.in_re x (re.inter (re.++ (re.++ re.all (re.union (re.union (re.union (re.union (re.union (re.union (re.++ (re.++ (re.++ (re.++ (re.++ (re.union (str.to_re "M") (str.to_re "m")) (re.union (str.to_re "O") (str.to_re "o"))) (re.union (str.to_re "N") (str.to_re "n"))) (re.union (str.to_re "D") (str.to_re "d"))) (re.union (str.to_re "A") (str.to_re "a"))) (re.union (str.to_re "Y") (str.to_re "y"))) (re.++ (re.++ (re.++ (re.++ (re.++ (re.++ (re.union (str.to_re "T") (str.to_re "t")) (re.union (str.to_re "U") (str.to_re "u"))) (re.union (str.to_re "E") (str.to_re "e"))) (re.union (str.to_re "S") (str.to_re "s"))) (re.union (str.to_re "D") (str.to_re "d"))) (re.union (str.to_re "A") (str.to_re "a"))) (re.union (str.to_re "Y") (str.to_re "y")))) (re.++ (re.++ (re.++ (re.++ (re.++ (re.++ (re.++ (re.++ (re.union (str.to_re "W") (str.to_re "w")) (re.union (str.to_re "E") (str.to_re "e"))) (re.union (str.to_re "D") (str.to_re "d"))) (re.union (str.to_re "N") (str.to_re "n"))) (re.union (str.to_re "E") (str.to_re "e"))) (re.union (str.to_re "S") (str.to_re "s"))) (re.union (str.to_re "D") (str.to_re "d"))) (re.union (str.to_re "A") (str.to_re "a"))) (re.union (str.to_re "Y") (str.to_re "y")))) (re.++ (re.++ (re.++ (re.++ (re.++ (re.++ (re.++ (re.union (str.to_re "T") (str.to_re "t")) (re.union (str.to_re "H") (str.to_re "h"))) (re.union (str.to_re "U") (str.to_re "u"))) (re.union (str.to_re "R") (str.to_re "r"))) (re.union (str.to_re "S") (str.to_re "s"))) (re.union (str.to_re "D") (str.to_re "d"))) (re.union (str.to_re "A") (str.to_re "a"))) (re.union (str.to_re "Y") (str.to_re "y")))) (re.++ (re.++ (re.++ (re.++ (re.++ (re.union (str.to_re "F") (str.to_re "f")) (re.union (str.to_re "R") (str.to_re "r"))) (re.union (str.to_re "I") (str.to_re "i"))) (re.union (str.to_re "D") (str.to_re "d"))) (re.union (str.to_re "A") (str.to_re "a"))) (re.union (str.to_re "Y") (str.to_re "y")))) (re.++ (re.++ (re.++ (re.++ (re.++ (re.++ (re.++ (re.union (str.to_re "S") (str.to_re "s")) (re.union (str.to_re "A") (str.to_re "a"))) (re.union (str.to_re "T") (str.to_re "t"))) (re.union (str.to_re "U") (str.to_re "u"))) (re.union (str.to_re "R") (str.to_re "r"))) (re.union (str.to_re "D") (str.to_re "d"))) (re.union (str.to_re "A") (str.to_re "a"))) (re.union (str.to_re "Y") (str.to_re "y")))) (re.++ (re.++ (re.++ (re.++ (re.++ (re.union (str.to_re "S") (str.to_re "s")) (re.union (str.to_re "U") (str.to_re "u"))) (re.union (str.to_re "N") (str.to_re "n"))) (re.union (str.to_re "D") (str.to_re "d"))) (re.union (str.to_re "A") (str.to_re "a"))) (re.union (str.to_re "Y") (str.to_re "y"))))) re.all) (re.++ (re.++ re.all (re.union (re.union (re.union (re.union (re.union (re.union (re.union (re.union (re.union (re.union (re.union (re.++ (re.++ (re.++ (re.++ (re.++ (re.++ (re.union (str.to_re "J") (str.to_re "j")) (re.union (str.to_re "A") (str.to_re "a"))) (re.union (str.to_re "N") (str.to_re "n"))) (re.union (str.to_re "U") (str.to_re "u"))) (re.union (str.to_re "A") (str.to_re "a"))) (re.union (str.to_re "R") (str.to_re "r"))) (re.union (str.to_re "Y") (str.to_re "y"))) (re.++ (re.++ (re.++ (re.++ (re.++ (re.++ (re.++ (re.union (str.to_re "F") (str.to_re "f")) (re.union (str.to_re "E") (str.to_re "e"))) (re.union (str.to_re "B") (str.to_re "b"))) (re.union (str.to_re "R") (str.to_re "r"))) (re.union (str.to_re "U") (str.to_re "u"))) (re.union (str.to_re "A") (str.to_re "a"))) (re.union (str.to_re "R") (str.to_re "r"))) (re.union (str.to_re "Y") (str.to_re "y")))) (re.++ (re.++ (re.++ (re.++ (re.union (str.to_re "M") (str.to_re "m")) (re.union (str.to_re "A") (str.to_re "a"))) (re.union (str.to_re "R") (str.to_re "r"))) (re.union (str.to_re "C") (str.to_re "c"))) (re.union (str.to_re "H") (str.to_re "h")))) (re.++ (re.++ (re.++ (re.++ (re.union (str.to_re "A") (str.to_re "a")) (re.union (str.to_re "P") (str.to_re "p"))) (re.union (str.to_re "R") (str.to_re "r"))) (re.union (str.to_re "I") (str.to_re "i"))) (re.union (str.to_re "L") (str.to_re "l")))) (re.++ (re.++ (re.union (str.to_re "M") (str.to_re "m")) (re.union (str.to_re "A") (str.to_re "a"))) (re.union (str.to_re "Y") (str.to_re "y")))) (re.++ (re.++ (re.++ (re.union (str.to_re "J") (str.to_re "j")) (re.union (str.to_re "U") (str.to_re "u"))) (re.union (str.to_re "N") (str.to_re "n"))) (re.union (str.to_re "E") (str.to_re "e")))) (re.++ (re.++ (re.++ (re.union (str.to_re "J") (str.to_re "j")) (re.union (str.to_re "U") (str.to_re "u"))) (re.union (str.to_re "L") (str.to_re "l"))) (re.union (str.to_re "Y") (str.to_re "y")))) (re.++ (re.++ (re.++ (re.++ (re.++ (re.union (str.to_re "A") (str.to_re "a")) (re.union (str.to_re "U") (str.to_re "u"))) (re.union (str.to_re "G") (str.to_re "g"))) (re.union (str.to_re "U") (str.to_re "u"))) (re.union (str.to_re "S") (str.to_re "s"))) (re.union (str.to_re "T") (str.to_re "t")))) (re.++ (re.++ (re.++ (re.++ (re.++ (re.++ (re.++ (re.++ (re.union (str.to_re "S") (str.to_re "s")) (re.union (str.to_re "E") (str.to_re "e"))) (re.union (str.to_re "P") (str.to_re "p"))) (re.union (str.to_re "T") (str.to_re "t"))) (re.union (str.to_re "E") (str.to_re "e"))) (re.union (str.to_re "M") (str.to_re "m"))) (re.union (str.to_re "B") (str.to_re "b"))) (re.union (str.to_re "E") (str.to_re "e"))) (re.union (str.to_re "R") (str.to_re "r")))) (re.++ (re.++ (re.++ (re.++ (re.++ (re.++ (re.union (str.to_re "O") (str.to_re "o")) (re.union (str.to_re "C") (str.to_re "c"))) (re.union (str.to_re "T") (str.to_re "t"))) (re.union (str.to_re "O") (str.to_re "o"))) (re.union (str.to_re "B") (str.to_re "b"))) (re.union (str.to_re "E") (str.to_re "e"))) (re.union (str.to_re "R") (str.to_re "r")))) (re.++ (re.++ (re.++ (re.++ (re.++ (re.++ (re.++ (re.union (str.to_re "N") (str.to_re "n")) (re.union (str.to_re "O") (str.to_re "o"))) (re.union (str.to_re "V") (str.to_re "v"))) (re.union (str.to_re "E") (str.to_re "e"))) (re.union (str.to_re "M") (str.to_re "m"))) (re.union (str.to_re "B") (str.to_re "b"))) (re.union (str.to_re "E") (str.to_re "e"))) (re.union (str.to_re "R") (str.to_re "r")))) (re.++ (re.++ (re.++ (re.++ (re.++ (re.++ (re.++ (re.union (str.to_re "D") (str.to_re "d")) (re.union (str.to_re "E") (str.to_re "e"))) (re.union (str.to_re "C") (str.to_re "c"))) (re.union (str.to_re "E") (str.to_re "e"))) (re.union (str.to_re "M") (str.to_re "m"))) (re.union (str.to_re "B") (str.to_re "b"))) (re.union (str.to_re "E") (str.to_re "e"))) (re.union (str.to_re "R") (str.to_re "r"))))) re.all))))
(check-sat)


(reset)
(set-logic QF_S)







(declare-const x String)
(assert (str.in_re x (re.inter
    (re.++
        (re.range "0" "3")
        (re.range "0" "9")
        (str.to_re "-")
        ((_ re.^ 3) (re.union (re.range "A" "Z") (re.range "a" "z")))
        (str.to_re "-")
        ((_ re.^ 4) (re.range "0" "9")))
    (re.++
        re.all
        (re.union (str.to_re "jan") (str.to_re "feb") (str.to_re "jul"))
        re.all)
    (re.comp
        (re.++
            (str.to_re "3")
            re.all
            (str.to_re "feb")
            re.all))
)))

(check-sat)


(reset)
(set-logic QF_S)
(declare-fun field_date () String)
(assert (let ((a!1 (re.++ (re.range "0" "9")
                  (re.++ (re.range "0" "9")
                         (re.++ (re.range "0" "9") (re.range "0" "9")))))
      (a!5 (str.in_re field_date
                      (re.++ (str.to_re "3") (re.++ (str.to_re "0") re.all))))
      (a!6 (str.in_re field_date
                      (re.++ (str.to_re "3") (re.++ (str.to_re "1") re.all))))
      (a!8 (str.in_re field_date
                      (re.++ (str.to_re "0") (re.++ (str.to_re "0") re.all))))
      (a!9 (re.++ (re.union (str.to_re "a") (str.to_re "A"))
                  (re.++ (re.union (str.to_re "n") (str.to_re "N")) re.all)))
      (a!11 (re.++ (re.union (str.to_re "e") (str.to_re "E"))
                   (re.++ (re.union (str.to_re "b") (str.to_re "B")) re.all)))
      (a!13 (re.++ (re.union (str.to_re "a") (str.to_re "A"))
                   (re.++ (re.union (str.to_re "r") (str.to_re "R")) re.all)))
      (a!15 (re.++ (re.union (str.to_re "p") (str.to_re "P"))
                   (re.++ (re.union (str.to_re "r") (str.to_re "R")) re.all)))
      (a!17 (re.++ (re.union (str.to_re "a") (str.to_re "A"))
                   (re.++ (re.union (str.to_re "y") (str.to_re "Y")) re.all)))
      (a!19 (re.++ (re.union (str.to_re "u") (str.to_re "U"))
                   (re.++ (re.union (str.to_re "n") (str.to_re "N")) re.all)))
      (a!21 (re.++ (re.union (str.to_re "u") (str.to_re "U"))
                   (re.++ (re.union (str.to_re "l") (str.to_re "L")) re.all)))
      (a!23 (re.++ (re.union (str.to_re "u") (str.to_re "U"))
                   (re.++ (re.union (str.to_re "g") (str.to_re "G")) re.all)))
      (a!25 (re.++ (re.union (str.to_re "e") (str.to_re "E"))
                   (re.++ (re.union (str.to_re "p") (str.to_re "P")) re.all)))
      (a!27 (re.++ (re.union (str.to_re "c") (str.to_re "C"))
                   (re.++ (re.union (str.to_re "t") (str.to_re "T")) re.all)))
      (a!29 (re.++ (re.union (str.to_re "o") (str.to_re "O"))
                   (re.++ (re.union (str.to_re "v") (str.to_re "V")) re.all)))
      (a!31 (re.++ (re.union (str.to_re "e") (str.to_re "E"))
                   (re.++ (re.union (str.to_re "c") (str.to_re "C")) re.all))))
(let ((a!2 (re.++ (re.union (re.range "A" "Z") (re.range "a" "z"))
                  (re.++ (re.union (re.range "A" "Z") (re.range "a" "z"))
                         (re.++ (str.to_re "-") a!1))))
      (a!7 (or (str.in_re field_date (re.++ (str.to_re "0") re.all))
               (str.in_re field_date (re.++ (str.to_re "1") re.all))
               (str.in_re field_date (re.++ (str.to_re "2") re.all))
               a!5
               a!6))
      (a!10 (re.++ re.all
                   (re.++ (re.union (str.to_re "j") (str.to_re "J")) a!9)))
      (a!12 (re.++ re.all
                   (re.++ (re.union (str.to_re "f") (str.to_re "F")) a!11)))
      (a!14 (re.++ re.all
                   (re.++ (re.union (str.to_re "m") (str.to_re "M")) a!13)))
      (a!16 (re.++ re.all
                   (re.++ (re.union (str.to_re "a") (str.to_re "A")) a!15)))
      (a!18 (re.++ re.all
                   (re.++ (re.union (str.to_re "m") (str.to_re "M")) a!17)))
      (a!20 (re.++ re.all
                   (re.++ (re.union (str.to_re "j") (str.to_re "J")) a!19)))
      (a!22 (re.++ re.all
                   (re.++ (re.union (str.to_re "j") (str.to_re "J")) a!21)))
      (a!24 (re.++ re.all
                   (re.++ (re.union (str.to_re "a") (str.to_re "A")) a!23)))
      (a!26 (re.++ re.all
                   (re.++ (re.union (str.to_re "s") (str.to_re "S")) a!25)))
      (a!28 (re.++ re.all
                   (re.++ (re.union (str.to_re "o") (str.to_re "O")) a!27)))
      (a!30 (re.++ re.all
                   (re.++ (re.union (str.to_re "n") (str.to_re "N")) a!29)))
      (a!32 (re.++ re.all
                   (re.++ (re.union (str.to_re "d") (str.to_re "D")) a!31))))
(let ((a!3 (re.++ (str.to_re "-")
                  (re.++ (re.union (re.range "A" "Z") (re.range "a" "z")) a!2)))
      (a!33 (or (and (not (str.in_re field_date a!16))
                     (not (str.in_re field_date a!20))
                     (not (str.in_re field_date a!26))
                     (not (str.in_re field_date a!30)))
                (not a!6))))
(let ((a!4 (str.in_re field_date
                      (re.++ (re.range "0" "9") (re.++ (re.range "0" "9") a!3)))))
(let ((a!34 (and a!4
                 a!7
                 (not a!8)
                 (or (str.in_re field_date a!10)
                     (str.in_re field_date a!12)
                     (str.in_re field_date a!14)
                     (str.in_re field_date a!16)
                     (str.in_re field_date a!18)
                     (str.in_re field_date a!20)
                     (str.in_re field_date a!22)
                     (str.in_re field_date a!24)
                     (str.in_re field_date a!26)
                     (str.in_re field_date a!28)
                     (str.in_re field_date a!30)
                     (str.in_re field_date a!32))
                 (or (not (str.in_re field_date a!12))
                     (and (not a!5) (not a!6)))
                 a!33)))
  (not a!34)))))))

(check-sat)


(reset)
(set-logic QF_S)
(declare-fun field_date () String)
(assert (let ((a!1 (re.++ (re.range "0" "9")
                  (re.++ (re.range "0" "9")
                         (re.++ (re.range "0" "9") (re.range "0" "9")))))
      (a!5 (str.in_re field_date
                      (re.++ (str.to_re "3") (re.++ (str.to_re "0") re.all))))
      (a!6 (str.in_re field_date
                      (re.++ (str.to_re "3") (re.++ (str.to_re "1") re.all))))
      (a!8 (str.in_re field_date
                      (re.++ (str.to_re "0") (re.++ (str.to_re "0") re.all))))
      (a!9 (re.++ (re.union (str.to_re "a") (str.to_re "A"))
                  (re.++ (re.union (str.to_re "n") (str.to_re "N")) re.all)))
      (a!11 (re.++ (re.union (str.to_re "e") (str.to_re "E"))
                   (re.++ (re.union (str.to_re "b") (str.to_re "B")) re.all)))
      (a!13 (re.++ (re.union (str.to_re "a") (str.to_re "A"))
                   (re.++ (re.union (str.to_re "r") (str.to_re "R")) re.all)))
      (a!15 (re.++ (re.union (str.to_re "p") (str.to_re "P"))
                   (re.++ (re.union (str.to_re "r") (str.to_re "R")) re.all)))
      (a!17 (re.++ (re.union (str.to_re "a") (str.to_re "A"))
                   (re.++ (re.union (str.to_re "y") (str.to_re "Y")) re.all)))
      (a!19 (re.++ (re.union (str.to_re "u") (str.to_re "U"))
                   (re.++ (re.union (str.to_re "n") (str.to_re "N")) re.all)))
      (a!21 (re.++ (re.union (str.to_re "u") (str.to_re "U"))
                   (re.++ (re.union (str.to_re "l") (str.to_re "L")) re.all)))
      (a!23 (re.++ (re.union (str.to_re "u") (str.to_re "U"))
                   (re.++ (re.union (str.to_re "g") (str.to_re "G")) re.all)))
      (a!25 (re.++ (re.union (str.to_re "e") (str.to_re "E"))
                   (re.++ (re.union (str.to_re "p") (str.to_re "P")) re.all)))
      (a!27 (re.++ (re.union (str.to_re "c") (str.to_re "C"))
                   (re.++ (re.union (str.to_re "t") (str.to_re "T")) re.all)))
      (a!29 (re.++ (re.union (str.to_re "o") (str.to_re "O"))
                   (re.++ (re.union (str.to_re "v") (str.to_re "V")) re.all)))
      (a!31 (re.++ (re.union (str.to_re "e") (str.to_re "E"))
                   (re.++ (re.union (str.to_re "c") (str.to_re "C")) re.all))))
(let ((a!2 (re.++ (re.union (re.range "A" "Z") (re.range "a" "z"))
                  (re.++ (re.union (re.range "A" "Z") (re.range "a" "z"))
                         (re.++ (str.to_re "-") a!1))))
      (a!7 (or (str.in_re field_date (re.++ (str.to_re "0") re.all))
               (str.in_re field_date (re.++ (str.to_re "1") re.all))
               (str.in_re field_date (re.++ (str.to_re "2") re.all))
               a!5
               a!6))
      (a!10 (re.++ re.all
                   (re.++ (re.union (str.to_re "j") (str.to_re "J")) a!9)))
      (a!12 (re.++ re.all
                   (re.++ (re.union (str.to_re "f") (str.to_re "F")) a!11)))
      (a!14 (re.++ re.all
                   (re.++ (re.union (str.to_re "m") (str.to_re "M")) a!13)))
      (a!16 (re.++ re.all
                   (re.++ (re.union (str.to_re "a") (str.to_re "A")) a!15)))
      (a!18 (re.++ re.all
                   (re.++ (re.union (str.to_re "m") (str.to_re "M")) a!17)))
      (a!20 (re.++ re.all
                   (re.++ (re.union (str.to_re "j") (str.to_re "J")) a!19)))
      (a!22 (re.++ re.all
                   (re.++ (re.union (str.to_re "j") (str.to_re "J")) a!21)))
      (a!24 (re.++ re.all
                   (re.++ (re.union (str.to_re "a") (str.to_re "A")) a!23)))
      (a!26 (re.++ re.all
                   (re.++ (re.union (str.to_re "s") (str.to_re "S")) a!25)))
      (a!28 (re.++ re.all
                   (re.++ (re.union (str.to_re "o") (str.to_re "O")) a!27)))
      (a!30 (re.++ re.all
                   (re.++ (re.union (str.to_re "n") (str.to_re "N")) a!29)))
      (a!32 (re.++ re.all
                   (re.++ (re.union (str.to_re "d") (str.to_re "D")) a!31))))
(let ((a!3 (re.++ (str.to_re "-")
                  (re.++ (re.union (re.range "A" "Z") (re.range "a" "z")) a!2)))
      (a!33 (or (and (not (str.in_re field_date a!16))
                     (not (str.in_re field_date a!20))
                     (not (str.in_re field_date a!26))
                     (not (str.in_re field_date a!30)))
                (not a!6))))
(let ((a!4 (str.in_re field_date
                      (re.++ (re.range "0" "9") (re.++ (re.range "0" "9") a!3)))))
  (and a!4
       a!7
       (not a!8)
       (or (str.in_re field_date a!10)
           (str.in_re field_date a!12)
           (str.in_re field_date a!14)
           (str.in_re field_date a!16)
           (str.in_re field_date a!18)
           (str.in_re field_date a!20)
           (str.in_re field_date a!22)
           (str.in_re field_date a!24)
           (str.in_re field_date a!26)
           (str.in_re field_date a!28)
           (str.in_re field_date a!30)
           (str.in_re field_date a!32))
       (or (not (str.in_re field_date a!12)) (and (not a!5) (not a!6)))
       a!33))))))

(check-sat)


(reset)
(set-logic QF_S)






(declare-const x String)
(assert (str.in_re x (re.inter (re.++ (re.++ re.all (re.union (re.union (re.union (re.union (re.union (re.union (str.to_re "monday") (str.to_re "tuesday")) (str.to_re "wednesday")) (str.to_re "thursday")) (str.to_re "friday")) (str.to_re "saturday")) (str.to_re "sunday"))) re.all) (re.++ (re.++ re.all (re.union (re.union (re.union (re.union (re.union (re.union (re.union (re.union (re.union (re.union (re.union (str.to_re "january") (str.to_re "february")) (str.to_re "march")) (str.to_re "april")) (str.to_re "may")) (str.to_re "june")) (str.to_re "july")) (str.to_re "august")) (str.to_re "september")) (str.to_re "october")) (str.to_re "november")) (str.to_re "december"))) re.all))))
(check-sat)


(reset)
(set-logic QF_S)







(declare-const x String)
(assert (str.in_re x (re.inter (re.inter (re.++ (re.++ re.all (re.union (re.union (re.union (re.union (re.union (re.union (str.to_re "monday") (str.to_re "tuesday")) (str.to_re "wednesday")) (str.to_re "thursday")) (str.to_re "friday")) (str.to_re "saturday")) (str.to_re "sunday"))) re.all) (re.++ (re.++ re.all (re.union (re.union (re.union (re.union (re.union (re.union (re.union (re.union (re.union (re.union (re.union (str.to_re "january") (str.to_re "february")) (str.to_re "march")) (str.to_re "april")) (str.to_re "may")) (str.to_re "june")) (str.to_re "july")) (str.to_re "august")) (str.to_re "september")) (str.to_re "october")) (str.to_re "november")) (str.to_re "december"))) re.all)) ((_ re.loop 0 9) (re.range "!" "~")))))
(check-sat)


(reset)
(set-logic QF_S)
(declare-fun field_date () String)
(assert (let ((a!1 (re.++ (re.range "0" "9")
                  (re.++ (re.range "0" "9")
                         (re.++ (re.range "0" "9") (re.range "0" "9")))))
      (a!5 (str.in_re field_date
                      (re.++ (str.to_re "3") (re.++ (str.to_re "0") re.all))))
      (a!6 (str.in_re field_date
                      (re.++ (str.to_re "3") (re.++ (str.to_re "1") re.all))))
      (a!8 (str.in_re field_date
                      (re.++ (str.to_re "0") (re.++ (str.to_re "0") re.all))))
      (a!9 (re.++ (re.union (str.to_re "a") (str.to_re "A"))
                  (re.++ (re.union (str.to_re "n") (str.to_re "N")) re.all)))
      (a!11 (re.++ (re.union (str.to_re "e") (str.to_re "E"))
                   (re.++ (re.union (str.to_re "b") (str.to_re "B")) re.all))))
(let ((a!2 (re.++ (re.union (re.range "A" "Z") (re.range "a" "z"))
                  (re.++ (re.union (re.range "A" "Z") (re.range "a" "z"))
                         (re.++ (str.to_re "-") a!1))))
      (a!7 (or (str.in_re field_date (re.++ (str.to_re "0") re.all))
               (str.in_re field_date (re.++ (str.to_re "1") re.all))
               (str.in_re field_date (re.++ (str.to_re "2") re.all))
               a!5
               a!6))
      (a!10 (re.++ re.all
                   (re.++ (re.union (str.to_re "j") (str.to_re "J")) a!9)))
      (a!12 (re.++ re.all
                   (re.++ (re.union (str.to_re "f") (str.to_re "F")) a!11))))
(let ((a!3 (re.++ (str.to_re "-")
                  (re.++ (re.union (re.range "A" "Z") (re.range "a" "z")) a!2))))
(let ((a!4 (str.in_re field_date
                      (re.++ (re.range "0" "9") (re.++ (re.range "0" "9") a!3)))))
  (and a!4
       a!7
       (not a!8)
       (or (str.in_re field_date a!10) (str.in_re field_date a!12))
       (or (not (str.in_re field_date a!12)) (and (not a!5) (not a!6)))))))))

(check-sat)


(reset)
(set-logic QF_S)
(declare-const x String)
(declare-const R RegLan)



(assert (= R (re.comp (re.* (re.comp (str.to_re "cab"))))))
(assert (str.in_re x R))
(check-sat)

(reset)
(set-logic QF_S)
(assert (not (=
    re.none
    (re.inter
        (re.++ re.all (str.to_re "a"))
        (re.+ (str.to_re "b"))
    )
)))

(check-sat)

(reset)
(set-logic QF_S)
(assert (= re.none (re.diff ((_ re.^ 9) re.allchar) (re.comp (re.++ (re.++ re.all (str.to_re "a")) ((_ re.^ 8) re.allchar))))))
(check-sat)

(reset)
(set-logic QF_S)





(declare-const x String)
(assert (str.in_re x (re.++ (re.++ (re.++ (re.++ (re.++ (re.++ (re.++ (re.++ (re.++ (re.++ (re.* (re.++ (str.to_re "a") (re.* (str.to_re "bc")))) (str.to_re "d")) (re.+ (str.to_re "bc"))) (re.* (re.++ (str.to_re "a") (re.* (str.to_re "bc"))))) (str.to_re "dabc")) (re.* (re.++ (str.to_re "a") (re.* (str.to_re "bc"))))) (str.to_re "d")) (re.+ (str.to_re "bc"))) (re.* (re.++ (str.to_re "a") (re.* (str.to_re "bc"))))) (str.to_re "d")) (re.inter (re.++ re.all (str.to_re "a")) (re.* (str.to_re "b"))))))
(check-sat)

(reset)
(set-logic QF_S)
(declare-const x String)
(assert (str.in_re x
    (re.inter
        (re.* (str.to_re "aaa"))
        (re.++ (str.to_re "a") (re.* (str.to_re "aaa")))
)))
(check-sat)

(reset)
(set-logic QF_S)







(declare-const x String)
(assert (str.in_re x (re.inter (re.inter (re.++ (re.++ (re.* (str.to_re "b")) (str.to_re "a")) (re.* (str.to_re "b"))) (re.++ (re.++ (re.++ (re.++ re.all (str.to_re "b")) re.all) (str.to_re "b")) re.all)) (re.* (str.to_re "ab")))))
(check-sat)


(reset)
(set-logic QF_S)
(declare-const x String)
(assert (str.in_re x (re.++
    (str.to_re "ab")
    re.all
    (str.to_re "b")
    re.all
    (str.to_re "b")
    re.all
    (str.to_re "b")
)))
(assert (not (str.in_re x (re.++
    (str.to_re "a")
    re.all
    (str.to_re "b")
    re.all
    (str.to_re "b")
    re.all
    (str.to_re "b")
))))

(check-sat)

(reset)
(set-logic QF_S)





(declare-const x String)
(assert (str.in_re x (re.++ (re.++ (re.++ (re.++ (re.++ (re.++ (re.++ (re.++ (re.++ (re.++ (re.* (re.++ (str.to_re "a") (re.* (str.to_re "bc")))) (str.to_re "d")) (re.+ (str.to_re "bc"))) (re.* (re.++ (str.to_re "a") (re.* (str.to_re "bc"))))) (str.to_re "dabc")) (re.* (re.++ (str.to_re "a") (re.* (str.to_re "bc"))))) (str.to_re "d")) (re.+ (str.to_re "bc"))) (re.* (re.++ (str.to_re "a") (re.* (str.to_re "bc"))))) (str.to_re "d")) (re.inter (str.to_re "a") (str.to_re "b")))))
(check-sat)

(reset)
(set-logic QF_S)





(declare-const x String)
(assert (str.in_re x (re.inter (re.++ (re.++ (re.++ (re.++ (re.++ (re.++ (str.to_re "ab") re.all) (str.to_re "b")) re.all) (str.to_re "b")) re.all) (str.to_re "b")) (re.union (re.inter (re.++ (re.++ (re.++ (re.++ (re.++ (re.++ (str.to_re "a") re.all) (str.to_re "b")) re.all) (str.to_re "b")) re.all) (str.to_re "b")) re.none) (re.inter (re.comp (re.++ (re.++ (re.++ (re.++ (re.++ (re.++ (str.to_re "a") re.all) (str.to_re "b")) re.all) (str.to_re "b")) re.all) (str.to_re "b"))) re.all)))))
(check-sat)


(reset)
(set-logic QF_S)
(declare-const x String)
(assert (str.in_re x
    (re.inter
        (re.* (str.to_re "ab"))
        (re.++ (str.to_re "a") (re.* (str.to_re "ba")))
)))
(check-sat)

(reset)
(set-logic QF_S)






(declare-const x String)
(assert (str.in_re x
    (re.inter
        (re.++ (re.++ (re.+ (re.++ (re.+ (re.range (_ char #x1) (_ char #x7F))) re.allchar)) (str.to_re (_ char #x0))) (re.+ (re.range (_ char #x1) (_ char #x7F))))
    (re.* (re.union (str.to_re "a") (str.to_re "b")))
)))
(check-sat)

(reset)
(set-logic QF_S)








(declare-const x String)
(assert (str.in_re x (re.inter (re.++ (re.++ (re.+ (re.++ (re.+ (re.range "a" "z")) re.allchar)) (re.range "A" "Z")) (re.+ (re.range "a" "z"))) (str.to_re "aaaaaaaaaaaaaaaaaaaa"))))
(check-sat)

(reset)
(set-logic QF_S)







(assert (not (= re.none (re.inter (re.++ (re.++ (re.+ (re.++ (re.+ (re.range "a" "z")) re.allchar)) (re.range "A" "Z")) (re.+ (re.range "a" "z"))) (str.to_re "aaaaaaaaaaaaaaaaaaaa")))))
(check-sat)

(reset)
(set-logic QF_S)





(declare-const x String)
(assert (str.in_re x (re.++ (re.++ (str.to_re "xyzbc") (re.* (str.to_re "abcde"))) (re.++ (str.to_re "abxxxxxxxxxxxxxxxxxxxxxx") (re.inter
    (re.+ (str.to_re "a"))
    (re.* (str.to_re "b"))
)))))
(check-sat)

(reset)
(set-logic QF_S)
(assert (= re.none (re.diff ((_ re.^ 7) re.allchar) (re.comp (re.++ (re.++ re.all (str.to_re "a")) ((_ re.^ 7) re.allchar))))))
(check-sat)

(reset)
(set-logic QF_S)





(declare-const x String)
(assert (str.in_re x (re.union (re.union (re.++ (re.++ (re.++ (str.to_re "abcd") (re.* (str.to_re "bcd"))) (str.to_re "cd")) (re.inter (str.to_re "a") (str.to_re "b"))) (re.++ (re.++ (str.to_re "abcde") (re.+ (str.to_re "f"))) (str.to_re "g"))) (re.++ (re.++ (str.to_re "abe") (re.+ (str.to_re "f"))) (str.to_re "g")))))
(check-sat)


(reset)
(set-logic QF_S)
(declare-const x String)
(assert (str.in_re x (re.comp (re.++ (re.++ re.all (str.to_re "a")) ((_ re.^ 8) re.allchar)))))
(check-sat)

(reset)
(set-logic QF_S)






(declare-const x String)
(assert (str.in_re x (re.++ (re.++ (re.+ (re.++ (re.+ (re.range (_ char #x1) (_ char #x7F))) re.allchar)) (str.to_re (_ char #x0))) (re.+ (re.range (_ char #x1) (_ char #x7F))))))
(check-sat)


(reset)
(set-logic QF_S)







(assert (= re.none (re.inter (re.++ (re.++ (re.+ (re.++ (re.+ (re.range "a" "z")) re.allchar)) (re.range "A" "Z")) (re.+ (re.range "a" "z"))) (str.to_re "aaaaaaaaaaaaaaaaaaaa"))))
(check-sat)

(reset)
(set-logic QF_S)





(declare-const x String)
(assert (str.in_re x (re.union (re.++ (re.++ (re.++ (str.to_re "abcd") (re.* (str.to_re "bcd"))) (str.to_re "cd")) (re.inter (str.to_re "a") (str.to_re "b"))) (str.to_re "abcdefg"))))
(check-sat)


(reset)
(set-logic QF_S)





(declare-const x String)
(assert (str.in_re x (re.++ (re.++ (re.++ (re.++ (re.++ (re.* (re.++ (str.to_re "a") (re.* (str.to_re "bc")))) (str.to_re "d")) (re.+ (str.to_re "bc"))) (re.* (re.++ (str.to_re "a") (re.* (str.to_re "bc"))))) (str.to_re "d")) (re.* (re.++ (re.++ (re.++ (re.++ (re.++ (re.++ (str.to_re "abc") (re.* (re.++ (str.to_re "a") (re.* (str.to_re "bc"))))) (str.to_re "d")) (re.+ (str.to_re "bc"))) (re.* (re.++ (str.to_re "a") (re.* (str.to_re "bc"))))) (str.to_re "d")) (re.inter (str.to_re "a") (str.to_re "b")))))))
(check-sat)


(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "%" (str.++ "[" (str.++ "b" (str.++ "i" (str.++ "b" (str.++ "l" (str.++ "e" (str.++ "=" (str.++ "\u{f6}" (str.++ "\u{e4}" (str.++ "]" (str.++ "\u{eb}" (str.++ "\u{f6}" (str.++ "l" (str.++ "[" (str.++ "9" (str.++ "[" (str.++ "\u{5c}" (str.++ "/" (str.++ "b" (str.++ "i" (str.++ "b" (str.++ "l" (str.++ "e" (str.++ "]" (str.++ "\u{a0}" (str.++ "\u{5c}" (str.++ "\u{e3}" (str.++ "\u{a1}" ""))))))))))))))))))))))))))))))

(define-fun Witness2 () String (str.++ "\u{e0}" (str.++ "[" (str.++ "b" (str.++ "i" (str.++ "b" (str.++ "l" (str.++ "e" (str.++ "]" (str.++ "4" (str.++ "[" (str.++ "w" (str.++ "t" (str.++ "v" (str.++ "[" (str.++ "9" (str.++ "[" (str.++ "\u{5c}" (str.++ "/" (str.++ "b" (str.++ "i" (str.++ "b" (str.++ "l" (str.++ "e" (str.++ "]" (str.++ "*" ""))))))))))))))))))))))))))

(assert (= regexA (re.++ (str.to_re (str.++ "[" (str.++ "b" (str.++ "i" (str.++ "b" (str.++ "l" (str.++ "e" "")))))))(re.++ (re.opt (re.range "=" "="))(re.++ (re.* (re.union (re.range "a" "z")(re.union (re.range "\u{e4}" "\u{e4}")(re.union (re.range "\u{e6}" "\u{e6}")(re.union (re.range "\u{eb}" "\u{eb}")(re.union (re.range "\u{ef}" "\u{ef}")(re.union (re.range "\u{f6}" "\u{f6}")(re.union (re.range "\u{f8}" "\u{f8}") (re.range "\u{fc}" "\u{fc}")))))))))(re.++ (re.range "]" "]")(re.++ (re.++ (re.++ (re.opt (re.++ (re.range "0" "9") (re.opt (re.range "[" "["))))(re.++ (re.* (re.union (re.range "a" "z")(re.union (re.range "\u{e4}" "\u{e4}")(re.union (re.range "\u{e6}" "\u{e6}")(re.union (re.range "\u{eb}" "\u{eb}")(re.union (re.range "\u{ef}" "\u{ef}")(re.union (re.range "\u{f6}" "\u{f6}")(re.union (re.range "\u{f8}" "\u{f8}") (re.range "\u{fc}" "\u{fc}")))))))))(re.++ (re.range "[" "[") (re.opt (re.++ (re.* (re.union (re.range "a" "z")(re.union (re.range "\u{e4}" "\u{e4}")(re.union (re.range "\u{e6}" "\u{e6}")(re.union (re.range "\u{eb}" "\u{eb}")(re.union (re.range "\u{ef}" "\u{ef}")(re.union (re.range "\u{f6}" "\u{f6}")(re.union (re.range "\u{f8}" "\u{f8}") (re.range "\u{fc}" "\u{fc}")))))))))(re.++ (re.opt (re.range "[" "["))(re.++ (re.* (re.union (re.range "a" "z")(re.union (re.range "\u{e4}" "\u{e4}")(re.union (re.range "\u{e6}" "\u{e6}")(re.union (re.range "\u{eb}" "\u{eb}")(re.union (re.range "\u{ef}" "\u{ef}")(re.union (re.range "\u{f6}" "\u{f6}")(re.union (re.range "\u{f8}" "\u{f8}") (re.range "\u{fc}" "\u{fc}"))))))))) (re.range "[" "["))))))))(re.++ ((_ re.loop 1 3) (re.range "0" "9")) (re.opt (re.++ (re.range ":" ":")(re.++ ((_ re.loop 1 3) (re.range "0" "9")) (re.opt (re.++ (re.range "-" "-") ((_ re.loop 1 3) (re.range "0" "9"))))))))) (str.to_re (str.++ "[" (str.++ "\u{5c}" (str.++ "/" (str.++ "b" (str.++ "i" (str.++ "b" (str.++ "l" (str.++ "e" (str.++ "]" "")))))))))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "H" (str.++ "h" (str.++ "t" (str.++ "t" (str.++ "p" (str.++ ":" (str.++ "/" (str.++ "/" (str.++ "w" (str.++ "w" (str.++ "w" (str.++ "." (str.++ "u" (str.++ "p" (str.++ "l" (str.++ "o" (str.++ "a" (str.++ "d" (str.++ "e" (str.++ "d" (str.++ "." (str.++ "t" (str.++ "o" (str.++ "/" (str.++ "?" (str.++ "i" (str.++ "d" (str.++ "=" (str.++ "z" (str.++ "9" (str.++ "1" (str.++ "s" (str.++ "2" (str.++ "3" "")))))))))))))))))))))))))))))))))))

(define-fun Witness2 () String (str.++ "h" (str.++ "t" (str.++ "t" (str.++ "p" (str.++ ":" (str.++ "/" (str.++ "/" (str.++ "u" (str.++ "p" (str.++ "l" (str.++ "o" (str.++ "a" (str.++ "d" (str.++ "e" (str.++ "d" (str.++ "." (str.++ "t" (str.++ "o" (str.++ "/" (str.++ "?" (str.++ "i" (str.++ "d" (str.++ "=" (str.++ "9" (str.++ "p" (str.++ "w" (str.++ "7" (str.++ "a" (str.++ "9" (str.++ "\u{95}" "")))))))))))))))))))))))))))))))

(assert (= regexA (re.++ (str.to_re (str.++ "h" (str.++ "t" (str.++ "t" (str.++ "p" (str.++ ":" (str.++ "/" (str.++ "/" ""))))))))(re.++ (re.union (str.to_re (str.++ "w" (str.++ "w" (str.++ "w" (str.++ "." ""))))) (str.to_re ""))(re.++ (str.to_re (str.++ "u" (str.++ "p" (str.++ "l" (str.++ "o" (str.++ "a" (str.++ "d" (str.++ "e" (str.++ "d" (str.++ "." (str.++ "t" (str.++ "o" (str.++ "/" (str.++ "?" (str.++ "i" (str.++ "d" (str.++ "=" ""))))))))))))))))) ((_ re.loop 6 6) (re.union (re.range "0" "9") (re.range "a" "z"))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "W" (str.++ "5" (str.++ "1" (str.++ "0" (str.++ "1" (str.++ "9" (str.++ "9" (str.++ "3" (str.++ "\u{be}" ""))))))))))

(define-fun Witness2 () String (str.++ "1" (str.++ "0" (str.++ "1" (str.++ "9" (str.++ "9" (str.++ "9" (str.++ "z" (str.++ "\u{09}" "")))))))))

(assert (= regexA (re.++ (re.union (re.++ (re.range "0" "0") (re.range "1" "9"))(re.union (str.to_re (str.++ "1" (str.++ "0" "")))(re.union (str.to_re (str.++ "1" (str.++ "1" ""))) (str.to_re (str.++ "1" (str.++ "2" "")))))) (re.union (re.++ (str.to_re (str.++ "1" (str.++ "9" "")))(re.++ (re.range "0" "9") (re.range "0" "9"))) (re.++ (re.range "2" "2")(re.++ (re.range "0" "9")(re.++ (re.range "0" "9") (re.range "0" "9"))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "C" (str.++ ":" (str.++ "d" (str.++ "9" (str.++ "9" (str.++ "F" (str.++ ":" (str.++ "4" (str.++ "A" (str.++ "8" (str.++ ":" (str.++ "A" (str.++ "A" (str.++ ":" (str.++ ":" (str.++ ":" (str.++ "9" (str.++ "c" (str.++ "E" (str.++ "8" (str.++ ":" (str.++ "2" (str.++ "8" (str.++ "F" "")))))))))))))))))))))))))

(define-fun Witness2 () String (str.++ " " (str.++ "\u{a6}" (str.++ "[" (str.++ "\u{f3}" (str.++ "\u{16}" (str.++ "0" (str.++ "9" (str.++ "8" (str.++ ":" (str.++ "7" (str.++ "f" (str.++ "e" (str.++ "7" (str.++ ":" (str.++ "2" (str.++ ":" (str.++ "A" (str.++ "8" (str.++ "8" (str.++ ":" (str.++ "9" (str.++ "5" (str.++ "A" (str.++ ":" (str.++ "9" (str.++ "A" (str.++ "B" (str.++ ":" (str.++ "0" (str.++ ":" (str.++ "8" (str.++ "f" (str.++ "\u{0a}" (str.++ "\u{10}" (str.++ "\u{1d}" (str.++ "\u{9c}" (str.++ "\u{90}" ""))))))))))))))))))))))))))))))))))))))

(assert (= regexA (re.union (re.++ (str.to_re "") (re.++ ((_ re.loop 3 3) (re.++ (re.union (re.++ (re.opt (re.++ (re.opt (re.range "1" "1")) (re.range "0" "9"))) (re.range "0" "9"))(re.union (re.++ (re.range "2" "2")(re.++ (re.range "0" "4") (re.range "0" "9"))) (re.++ (str.to_re (str.++ "2" (str.++ "5" ""))) (re.range "0" "5")))) (re.range "." "."))) (re.union (re.++ (re.opt (re.++ (re.opt (re.range "1" "1")) (re.range "0" "9"))) (re.range "0" "9"))(re.union (re.++ (re.range "2" "2")(re.++ (re.range "0" "4") (re.range "0" "9"))) (re.++ (str.to_re (str.++ "2" (str.++ "5" ""))) (re.range "0" "5"))))))(re.union (re.++ ((_ re.loop 1 4) (re.union (re.range "0" "9")(re.union (re.range "A" "F") (re.range "a" "f")))) ((_ re.loop 7 7) (re.++ (re.range ":" ":") ((_ re.loop 1 4) (re.union (re.range "0" "9")(re.union (re.range "A" "F") (re.range "a" "f"))))))) (re.++ (re.++ ((_ re.loop 0 5) (re.++ ((_ re.loop 1 4) (re.union (re.range "0" "9")(re.union (re.range "A" "F") (re.range "a" "f")))) (re.range ":" ":")))(re.++ (str.to_re (str.++ ":" (str.++ ":" "")))(re.++ ((_ re.loop 0 5) (re.++ ((_ re.loop 1 4) (re.union (re.range "0" "9")(re.union (re.range "A" "F") (re.range "a" "f")))) (re.range ":" ":"))) ((_ re.loop 1 4) (re.union (re.range "0" "9")(re.union (re.range "A" "F") (re.range "a" "f"))))))) (str.to_re ""))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "\u{ca}" (str.++ "\u{0d}" (str.++ "\u{fc}" (str.++ "\u{c7}" (str.++ "o" (str.++ "1" (str.++ "9" (str.++ "6" (str.++ "1" (str.++ "/" (str.++ "6" (str.++ "8" (str.++ "0" (str.++ "9" (str.++ "0" (str.++ "5" (str.++ "/" (str.++ "7" (str.++ "9" (str.++ "\u{ca}" "")))))))))))))))))))))

(define-fun Witness2 () String (str.++ "\u{d7}" (str.++ "\u{8c}" (str.++ "2" (str.++ "0" (str.++ "2" (str.++ "8" (str.++ "/" (str.++ "4" (str.++ "7" (str.++ "9" (str.++ "2" (str.++ "1" (str.++ "8" (str.++ "/" (str.++ "9" (str.++ "6" "")))))))))))))))))

(assert (= regexA (re.++ (re.union (str.to_re (str.++ "1" (str.++ "9" ""))) (str.to_re (str.++ "2" (str.++ "0" ""))))(re.++ ((_ re.loop 2 2) (re.range "0" "9"))(re.++ (re.range "/" "/")(re.++ ((_ re.loop 6 6) (re.range "0" "9"))(re.++ (re.range "/" "/") ((_ re.loop 2 2) (re.range "0" "9")))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "&" (str.++ "O" (str.++ "9" (str.++ "\u{cb}" (str.++ "9" (str.++ "\u{aa}" (str.++ "." (str.++ "E" (str.++ "-" (str.++ "S" "")))))))))))

(define-fun Witness2 () String (str.++ "\u{aa}" (str.++ "q" (str.++ "A" (str.++ "\u{fd}" (str.++ "B" (str.++ "\u{0d}" (str.++ "Y" (str.++ "9" (str.++ "\u{da}" (str.++ "\u{b5}" (str.++ "T" (str.++ "9" (str.++ "z" (str.++ "-" (str.++ "\u{aa}" ""))))))))))))))))

(assert (= regexA (re.++ (re.++ (re.range "A" "Z")(re.++ (re.opt (re.range "." "."))(re.++ (re.* (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))(re.++ (re.opt (re.range "-" "-"))(re.++ (re.opt (re.range "A" "Z")) (re.* (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))))))))(re.++ (re.opt (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (re.union (re.++ (re.range "A" "Z") (re.* (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))) (re.++ (re.opt (re.range "A" "Z")) (re.opt (re.range "." "."))))(re.++ (re.opt (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (re.++ (re.range "A" "Z")(re.++ (re.* (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))(re.++ (re.opt (re.range "-" "-"))(re.++ (re.opt (re.range "A" "Z")) (re.* (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))))))(re.++ (re.union (re.++ (re.range "," ",") (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))) (str.to_re "")) (re.union (str.to_re (str.++ "J" (str.++ "r" (str.++ "." ""))))(re.union (str.to_re (str.++ "S" (str.++ "r" (str.++ "." ""))))(re.union (str.to_re (str.++ "I" (str.++ "V" "")))(re.union (str.to_re (str.++ "I" (str.++ "I" (str.++ "I" ""))))(re.union (str.to_re (str.++ "I" (str.++ "I" ""))) (str.to_re ""))))))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "-" (str.++ "_" (str.++ "-" (str.++ "@" (str.++ "T" ""))))))

(define-fun Witness2 () String (str.++ "-" (str.++ "@" (str.++ "a" (str.++ "\u{85}" (str.++ "\u{11}" ""))))))

(assert (= regexA (re.++ (re.+ (re.union (re.range "-" ".")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_") (re.range "a" "z")))))) (re.++ (re.range "@" "@") (re.+ (re.union (re.range "-" ".")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_") (re.range "a" "z"))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "p" (str.++ "o" (str.++ "s" (str.++ "t" (str.++ "|" (str.++ "o" (str.++ "." (str.++ "|" (str.++ "Q" (str.++ "\u{de}" (str.++ "\u{a5}" ""))))))))))))

(define-fun Witness2 () String (str.++ "p" (str.++ "o" (str.++ "f" (str.++ "f" (str.++ "i" (str.++ "c" (str.++ "e" (str.++ "." (str.++ "\u{e9}" (str.++ "]" (str.++ "]" (str.++ "]" "")))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.range "p" "p")(re.++ (re.opt (str.to_re (str.++ "o" (str.++ "s" (str.++ "t" "")))))(re.++ (re.* (re.union (re.range " " " ")(re.union (re.range "." ".") (re.range "|" "|"))))(re.++ (re.range "o" "o")(re.++ (re.opt (str.to_re (str.++ "f" (str.++ "f" (str.++ "i" (str.++ "c" (str.++ "e" "")))))))(re.++ (re.* (re.union (re.range " " " ")(re.union (re.range "." ".") (re.range "|" "|"))))(re.++ (re.opt (str.to_re (str.++ "b" (str.++ "o" (str.++ "x" "")))))(re.++ (re.* (re.union (re.range " " " ") (re.range "0" "9")))(re.++ (re.union (re.range "\u{00}" "\u{1f}")(re.union (re.range "!" "Z")(re.union (re.range "\u{5c}" "`") (re.range "{" "\u{ff}")))) (re.* (re.range "]" "]"))))))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "\u{0a}" (str.++ "P" (str.++ "L" (str.++ "8" (str.++ "5" (str.++ " " (str.++ "7" (str.++ "7" (str.++ "9" (str.++ "8" (str.++ " " (str.++ "9" (str.++ "9" (str.++ "1" (str.++ "5" (str.++ " " (str.++ "8" (str.++ "8" (str.++ "8" (str.++ "8" (str.++ " " (str.++ "8" (str.++ "9" (str.++ "9" (str.++ "7" (str.++ " " (str.++ "9" (str.++ "8" (str.++ "4" (str.++ "0" (str.++ " " (str.++ "5" (str.++ "2" (str.++ "2" (str.++ "3" ""))))))))))))))))))))))))))))))))))))

(define-fun Witness2 () String (str.++ "n" (str.++ "P" (str.++ "L" (str.++ "8" (str.++ "9" (str.++ " " (str.++ "6" (str.++ "5" (str.++ "5" (str.++ "7" (str.++ " " (str.++ "8" (str.++ "4" (str.++ "8" (str.++ "3" (str.++ " " (str.++ "9" (str.++ "7" (str.++ "8" (str.++ "8" (str.++ " " (str.++ "9" (str.++ "9" (str.++ "0" (str.++ "8" (str.++ " " (str.++ "1" (str.++ "1" (str.++ "7" (str.++ "1" (str.++ " " (str.++ "5" (str.++ "1" (str.++ "9" (str.++ "4" (str.++ "\u{f2}" (str.++ "\u{95}" ""))))))))))))))))))))))))))))))))))))))

(assert (= regexA (re.union (re.++ (str.to_re (str.++ "P" (str.++ "L" "")))(re.++ ((_ re.loop 2 2) (re.range "0" "9"))(re.++ (re.range " " " ")(re.++ ((_ re.loop 4 4) (re.range "0" "9"))(re.++ (re.range " " " ")(re.++ ((_ re.loop 4 4) (re.range "0" "9"))(re.++ (re.range " " " ")(re.++ ((_ re.loop 4 4) (re.range "0" "9"))(re.++ (re.range " " " ")(re.++ ((_ re.loop 4 4) (re.range "0" "9"))(re.++ (re.range " " " ")(re.++ ((_ re.loop 4 4) (re.range "0" "9"))(re.++ (re.range " " " ") ((_ re.loop 4 4) (re.range "0" "9"))))))))))))))) (re.++ (str.to_re (str.++ "P" (str.++ "L" ""))) ((_ re.loop 26 26) (re.range "0" "9"))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "8" (str.++ "3" (str.++ "4" (str.++ "." (str.++ "9" (str.++ "." (str.++ "2" (str.++ "1" (str.++ "7" (str.++ "." (str.++ "8" (str.++ " " (str.++ "\u{fc}" (str.++ "\u{0c}" (str.++ "\u{1b}" (str.++ "\u{09}" (str.++ "[" (str.++ "4" (str.++ "7" (str.++ "/" (str.++ "\u{d0}" (str.++ "\u{89}" (str.++ "\u{10}" (str.++ "/" (str.++ "9" (str.++ "2" (str.++ "1" (str.++ "7" (str.++ ":" (str.++ "8" (str.++ "8" (str.++ ":" (str.++ "6" (str.++ "0" (str.++ ":" (str.++ "8" (str.++ "9" (str.++ "\u{0d}" (str.++ "\u{98}" (str.++ "1" (str.++ "3" (str.++ "6" (str.++ "9" (str.++ "]" (str.++ "\u{09}" (str.++ "&" (str.++ "q" (str.++ "u" (str.++ "o" (str.++ "t" (str.++ ";" (str.++ "\u{a0}" (str.++ "\u{08}" (str.++ "U" (str.++ " " (str.++ "&" (str.++ "q" (str.++ "u" (str.++ "o" (str.++ "t" (str.++ ";" (str.++ " " (str.++ "9" (str.++ "9" (str.++ "\u{0c}" (str.++ " " (str.++ "&" (str.++ "q" (str.++ "u" (str.++ "o" (str.++ "t" (str.++ ";" (str.++ "&" (str.++ "q" (str.++ "u" (str.++ "o" (str.++ "t" (str.++ ";" (str.++ "\u{a0}" (str.++ "&" (str.++ "q" (str.++ "u" (str.++ "o" (str.++ "t" (str.++ ";" (str.++ ">" (str.++ "&" (str.++ "q" (str.++ "u" (str.++ "o" (str.++ "t" (str.++ ";" (str.++ "\u{d0}" ""))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(define-fun Witness2 () String (str.++ "\u{bc}" (str.++ "\u{17}" (str.++ "9" (str.++ "9" (str.++ "5" (str.++ "." (str.++ "9" (str.++ "." (str.++ "6" (str.++ "." (str.++ "9" (str.++ "3" (str.++ "\u{85}" (str.++ "\u{f7}" (str.++ "\u{09}" (str.++ "\u{e2}" (str.++ " " (str.++ "[" (str.++ "9" (str.++ "5" (str.++ "/" (str.++ "$" (str.++ "f" (str.++ "\u{af}" (str.++ "/" (str.++ "8" (str.++ "6" (str.++ "8" (str.++ "0" (str.++ ":" (str.++ "6" (str.++ "8" (str.++ ":" (str.++ "2" (str.++ "9" (str.++ ":" (str.++ "6" (str.++ "\u{0c}" (str.++ "\u{9e}" (str.++ "8" (str.++ "5" (str.++ "8" (str.++ "9" (str.++ "]" (str.++ "\u{85}" (str.++ "&" (str.++ "q" (str.++ "u" (str.++ "o" (str.++ "t" (str.++ ";" (str.++ "K" (str.++ "\u{d3}" (str.++ "6" (str.++ "\u{0d}" (str.++ "\u{09}" (str.++ "\u{7f}" (str.++ "&" (str.++ "q" (str.++ "u" (str.++ "o" (str.++ "t" (str.++ ";" (str.++ " " (str.++ "9" (str.++ " " (str.++ "\u{84}" (str.++ "f" (str.++ "`" (str.++ "\u{85}" (str.++ "&" (str.++ "q" (str.++ "u" (str.++ "o" (str.++ "t" (str.++ ";" (str.++ "&" (str.++ "q" (str.++ "u" (str.++ "o" (str.++ "t" (str.++ ";" (str.++ "\u{a0}" (str.++ "&" (str.++ "q" (str.++ "u" (str.++ "o" (str.++ "t" (str.++ ";" (str.++ "&" (str.++ "q" (str.++ "u" (str.++ "o" (str.++ "t" (str.++ ";" ""))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(assert (= regexA (re.++ ((_ re.loop 1 3) (re.range "0" "9"))(re.++ (re.range "." ".")(re.++ ((_ re.loop 1 3) (re.range "0" "9"))(re.++ (re.range "." ".")(re.++ ((_ re.loop 1 3) (re.range "0" "9"))(re.++ (re.range "." ".")(re.++ ((_ re.loop 1 3) (re.range "0" "9"))(re.++ (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))(re.++ (re.union (re.range "\u{00}" "\u{09}") (re.range "\u{0b}" "\u{ff}"))(re.++ (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))(re.++ (re.union (re.range "\u{00}" "\u{09}") (re.range "\u{0b}" "\u{ff}"))(re.++ (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))(re.++ (re.range "[" "[")(re.++ ((_ re.loop 2 2) (re.range "0" "9"))(re.++ (re.range "/" "/")(re.++ ((_ re.loop 3 3) (re.union (re.range "\u{00}" "/") (re.range ":" "\u{ff}")))(re.++ (re.range "/" "/")(re.++ ((_ re.loop 4 4) (re.range "0" "9"))(re.++ (re.range ":" ":")(re.++ ((_ re.loop 1 2) (re.range "0" "9"))(re.++ (re.range ":" ":")(re.++ ((_ re.loop 1 2) (re.range "0" "9"))(re.++ (re.range ":" ":")(re.++ ((_ re.loop 1 2) (re.range "0" "9"))(re.++ (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))(re.++ (re.union (re.range "\u{00}" "\u{09}") (re.range "\u{0b}" "\u{ff}"))(re.++ ((_ re.loop 4 4) (re.range "0" "9"))(re.++ (re.range "]" "]")(re.++ (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))(re.++ (str.to_re (str.++ "&" (str.++ "q" (str.++ "u" (str.++ "o" (str.++ "t" (str.++ ";" "")))))))(re.++ (re.* (re.union (re.range "\u{00}" "\u{08}")(re.union (re.range "\u{0e}" "\u{1f}")(re.union (re.range "!" "\u{84}")(re.union (re.range "\u{86}" "\u{9f}") (re.range "\u{a1}" "\u{ff}"))))))(re.++ (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))(re.++ (re.* (re.union (re.range "\u{00}" "\u{08}")(re.union (re.range "\u{0e}" "\u{1f}")(re.union (re.range "!" "\u{84}")(re.union (re.range "\u{86}" "\u{9f}") (re.range "\u{a1}" "\u{ff}"))))))(re.++ (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))(re.++ (re.* (re.union (re.range "\u{00}" "\u{08}")(re.union (re.range "\u{0e}" "\u{1f}")(re.union (re.range "!" "\u{84}")(re.union (re.range "\u{86}" "\u{9f}") (re.range "\u{a1}" "\u{ff}"))))))(re.++ (str.to_re (str.++ "&" (str.++ "q" (str.++ "u" (str.++ "o" (str.++ "t" (str.++ ";" "")))))))(re.++ (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))(re.++ ((_ re.loop 1 3) (re.range "0" "9"))(re.++ (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))(re.++ (re.* (re.union (re.range "\u{00}" "\u{08}")(re.union (re.range "\u{0e}" "\u{1f}")(re.union (re.range "!" "\u{84}")(re.union (re.range "\u{86}" "\u{9f}") (re.range "\u{a1}" "\u{ff}"))))))(re.++ (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))(re.++ (str.to_re (str.++ "&" (str.++ "q" (str.++ "u" (str.++ "o" (str.++ "t" (str.++ ";" "")))))))(re.++ (re.* (re.union (re.range "\u{00}" "\u{09}") (re.range "\u{0b}" "\u{ff}")))(re.++ (str.to_re (str.++ "&" (str.++ "q" (str.++ "u" (str.++ "o" (str.++ "t" (str.++ ";" "")))))))(re.++ (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))(re.++ (str.to_re (str.++ "&" (str.++ "q" (str.++ "u" (str.++ "o" (str.++ "t" (str.++ ";" "")))))))(re.++ (re.* (re.union (re.range "\u{00}" "\u{09}") (re.range "\u{0b}" "\u{ff}"))) (str.to_re (str.++ "&" (str.++ "q" (str.++ "u" (str.++ "o" (str.++ "t" (str.++ ";" ""))))))))))))))))))))))))))))))))))))))))))))))))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "\u{ae}" (str.++ "<" (str.++ "L" (str.++ "\u{85}" (str.++ "\u{a0}" (str.++ "/" (str.++ ">" (str.++ "\u{e1}" "")))))))))

(define-fun Witness2 () String (str.++ "<" (str.++ "z" (str.++ "N" (str.++ "z" (str.++ "\u{a0}" (str.++ "Y" (str.++ "\u{a0}" (str.++ "=" (str.++ "'" (str.++ "'" (str.++ "\u{09}" (str.++ "\u{09}" (str.++ "I" (str.++ "\u{85}" (str.++ "=" (str.++ "'" (str.++ "'" (str.++ "\u{a0}" (str.++ " " (str.++ "/" (str.++ ">" ""))))))))))))))))))))))

(assert (= regexA (re.++ (re.range "<" "<")(re.++ (re.+ (re.union (re.range "A" "Z") (re.range "a" "z")))(re.++ (re.* (re.++ (re.+ (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (re.+ (re.union (re.range "A" "Z") (re.range "a" "z")))(re.++ (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (re.range "=" "=")(re.++ (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))) (re.union (re.++ (re.range "\u{22}" "\u{22}")(re.++ (re.* (re.union (re.range "\u{00}" "!") (re.range "#" "\u{ff}"))) (re.range "\u{22}" "\u{22}"))) (re.++ (re.range "'" "'")(re.++ (re.* (re.union (re.range "\u{00}" "&") (re.range "(" "\u{ff}"))) (re.range "'" "'"))))))))))(re.++ (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))) (str.to_re (str.++ "/" (str.++ ">" "")))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "S" (str.++ "[" (str.++ "9" (str.++ "]" (str.++ "\u{0a}" (str.++ "\u{5c}" "")))))))

(define-fun Witness2 () String (str.++ "O" (str.++ "[" (str.++ "8" (str.++ "]" (str.++ "\u{05}" (str.++ "\u{e6}" (str.++ "\u{c3}" (str.++ "\u{f9}" (str.++ "\u{01}" (str.++ "\u{87}" "")))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ ((_ re.loop 1 3) (re.union (re.range "A" "Z") (re.range "a" "z")))(re.++ (re.range "[" "[")(re.++ ((_ re.loop 1 3) (re.range "0" "9")) (re.range "]" "]")))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "+" (str.++ "9" (str.++ "8" (str.++ "4" (str.++ "0" (str.++ "8" (str.++ "9" (str.++ "\u{85}" (str.++ "\u{85}" (str.++ "\u{0b}" (str.++ "c" (str.++ "m" (str.++ "o" ""))))))))))))))

(define-fun Witness2 () String (str.++ "\u{02}" (str.++ "\u{bc}" (str.++ "+" (str.++ "8" (str.++ "." (str.++ "8" (str.++ "5" (str.++ "5" (str.++ "9" (str.++ " " (str.++ "\u{a0}" (str.++ "c" (str.++ "m" (str.++ "\u{81}" "")))))))))))))))

(assert (= regexA (re.++ (re.++ (re.opt (re.union (re.range "+" "+") (re.range "-" "-"))) (re.union (re.++ (re.* (re.range "0" "9"))(re.++ (re.range "," ",") (re.+ (re.range "0" "9"))))(re.union (re.++ (re.* (re.range "0" "9"))(re.++ (re.range "." ".") (re.+ (re.range "0" "9")))) (re.+ (re.range "0" "9")))))(re.++ (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))) (re.union (str.to_re (str.++ "m" (str.++ "m" "")))(re.union (str.to_re (str.++ "c" (str.++ "m" "")))(re.union (str.to_re (str.++ "d" (str.++ "m" "")))(re.union (str.to_re (str.++ "m" (str.++ "i" (str.++ "n" ""))))(re.union (str.to_re (str.++ "k" (str.++ "m" ""))) (re.union (re.range "h" "h")(re.union (re.range "m" "m") (re.range "s" "s"))))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "\u{b7}" (str.++ "2" (str.++ "9" (str.++ "-" (str.++ "2" (str.++ "/" (str.++ "9" (str.++ "6" (str.++ "0" (str.++ "0" (str.++ "I" (str.++ "\u{0d}" "")))))))))))))

(define-fun Witness2 () String (str.++ "3" (str.++ "\u{e7}" (str.++ "2" (str.++ "6" (str.++ "/" (str.++ "2" (str.++ "-" (str.++ "8" (str.++ "4" (str.++ "8" (str.++ "9" ""))))))))))))

(assert (= regexA (re.union (re.++ (re.union (re.++ (re.* (re.range "0" "0")) (re.range "1" "9"))(re.union (re.++ (re.range "1" "2") (re.range "0" "9")) (re.++ (re.range "3" "3") (re.range "0" "1"))))(re.++ (re.range "-" "/")(re.++ (re.union (re.++ (re.* (re.range "0" "0")) (re.union (re.range "1" "1")(re.union (re.range "3" "3")(re.union (re.range "5" "5") (re.range "7" "8")))))(re.union (str.to_re (str.++ "1" (str.++ "0" ""))) (str.to_re (str.++ "1" (str.++ "2" "")))))(re.++ (re.range "-" "/") ((_ re.loop 4 4) (re.range "0" "9"))))))(re.union (re.++ (re.union (re.++ (re.* (re.range "0" "0")) (re.range "1" "9"))(re.union (re.++ (re.range "1" "2") (re.range "0" "9")) (str.to_re (str.++ "3" (str.++ "0" "")))))(re.++ (re.range "-" "/")(re.++ (re.union (re.++ (re.* (re.range "0" "0")) (re.union (re.range "4" "4")(re.union (re.range "6" "6") (re.range "9" "9")))) (str.to_re (str.++ "1" (str.++ "1" ""))))(re.++ (re.range "-" "/") ((_ re.loop 4 4) (re.range "0" "9"))))))(re.union (re.++ (re.union (re.++ (re.* (re.range "0" "0")) (re.range "1" "9"))(re.union (re.++ (re.range "1" "1") (re.range "0" "9")) (re.++ (re.range "2" "2") (re.range "0" "8"))))(re.++ (re.range "-" "/")(re.++ (re.union (str.to_re (str.++ "0" (str.++ "2" ""))) (re.range "2" "2"))(re.++ (re.range "-" "/") ((_ re.loop 4 4) (re.range "0" "9"))))))(re.union (re.++ (str.to_re (str.++ "2" (str.++ "9" "")))(re.++ (re.range "-" "/")(re.++ (re.union (str.to_re (str.++ "0" (str.++ "2" ""))) (re.range "2" "2"))(re.++ (re.range "-" "/") (re.++ (re.union (re.range "0" "0")(re.union (re.range "2" "2")(re.union (re.range "4" "4")(re.union (re.range "6" "6") (re.range "8" "8")))))(re.++ (re.union (re.range "0" "0")(re.union (re.range "4" "4") (re.range "8" "8"))) (str.to_re (str.++ "0" (str.++ "0" "")))))))))(re.union (re.++ (str.to_re (str.++ "2" (str.++ "9" "")))(re.++ (re.range "-" "/")(re.++ (re.union (str.to_re (str.++ "0" (str.++ "2" ""))) (re.range "2" "2"))(re.++ (re.range "-" "/") (re.++ (re.union (re.range "1" "1")(re.union (re.range "3" "3")(re.union (re.range "5" "5")(re.union (re.range "7" "7") (re.range "9" "9")))))(re.++ (re.union (re.range "2" "2") (re.range "6" "6")) (str.to_re (str.++ "0" (str.++ "0" "")))))))))(re.union (re.++ (str.to_re (str.++ "2" (str.++ "9" "")))(re.++ (re.range "-" "/")(re.++ (re.union (str.to_re (str.++ "0" (str.++ "2" ""))) (re.range "2" "2"))(re.++ (re.range "-" "/") (re.++ (re.range "0" "9")(re.++ (re.range "0" "9")(re.++ (re.range "0" "0") (re.union (re.range "4" "4") (re.range "8" "8")))))))))(re.union (re.++ (str.to_re (str.++ "2" (str.++ "9" "")))(re.++ (re.range "-" "/")(re.++ (re.union (str.to_re (str.++ "0" (str.++ "2" ""))) (re.range "2" "2"))(re.++ (re.range "-" "/") (re.++ (re.range "0" "9")(re.++ (re.range "0" "9")(re.++ (re.union (re.range "2" "2")(re.union (re.range "4" "4")(re.union (re.range "6" "6") (re.range "8" "8")))) (re.union (re.range "0" "0")(re.union (re.range "4" "4") (re.range "8" "8")))))))))) (re.++ (str.to_re (str.++ "2" (str.++ "9" "")))(re.++ (re.range "-" "/")(re.++ (re.union (str.to_re (str.++ "0" (str.++ "2" ""))) (re.range "2" "2"))(re.++ (re.range "-" "/") (re.++ (re.range "0" "9")(re.++ (re.range "0" "9")(re.++ (re.union (re.range "1" "1")(re.union (re.range "3" "3")(re.union (re.range "5" "5")(re.union (re.range "7" "7") (re.range "9" "9"))))) (re.union (re.range "2" "2") (re.range "6" "6"))))))))))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "&" (str.++ "l" (str.++ "t" (str.++ ";" (str.++ "`" ""))))))

(define-fun Witness2 () String (str.++ "%" (str.++ "3" (str.++ "c" ""))))

(assert (= regexA (re.union (str.to_re (str.++ "s" (str.++ "c" (str.++ "r" (str.++ "i" (str.++ "p" (str.++ "t" "")))))))(re.union (str.to_re (str.++ "&" (str.++ "l" (str.++ "t" (str.++ ";" "")))))(re.union (str.to_re (str.++ "&" (str.++ "g" (str.++ "t" (str.++ ";" "")))))(re.union (str.to_re (str.++ "%" (str.++ "3" (str.++ "c" ""))))(re.union (str.to_re (str.++ "%" (str.++ "3" (str.++ "e" ""))))(re.union (re.++ (str.to_re (str.++ "S" (str.++ "E" (str.++ "L" (str.++ "E" (str.++ "C" (str.++ "T" ""))))))) (re.range " " " "))(re.union (re.++ (str.to_re (str.++ "U" (str.++ "P" (str.++ "D" (str.++ "A" (str.++ "T" (str.++ "E" ""))))))) (re.range " " " "))(re.union (re.++ (str.to_re (str.++ "I" (str.++ "N" (str.++ "S" (str.++ "E" (str.++ "R" (str.++ "T" ""))))))) (re.range " " " "))(re.union (str.to_re (str.++ "D" (str.++ "E" (str.++ "L" (str.++ "E" (str.++ "T" (str.++ "E" "")))))))(re.union (re.++ (str.to_re (str.++ "G" (str.++ "R" (str.++ "A" (str.++ "N" (str.++ "T" "")))))) (re.range " " " "))(re.union (str.to_re (str.++ "R" (str.++ "E" (str.++ "V" (str.++ "O" (str.++ "K" (str.++ "E" "")))))))(re.union (str.to_re (str.++ "U" (str.++ "N" (str.++ "I" (str.++ "O" (str.++ "N" ""))))))(re.union (str.to_re (str.++ "&" (str.++ "a" (str.++ "m" (str.++ "p" (str.++ ";" (str.++ "l" (str.++ "t" (str.++ ";" ""))))))))) (str.to_re (str.++ "&" (str.++ "a" (str.++ "m" (str.++ "p" (str.++ ";" (str.++ "g" (str.++ "t" (str.++ ";" ""))))))))))))))))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "\u{e6}" (str.++ "\u{de}" (str.++ "\u{0d}" (str.++ "p" (str.++ "\u{aa}" (str.++ "%" (str.++ "\u{a0}" (str.++ "l" (str.++ "X" ""))))))))))

(define-fun Witness2 () String (str.++ "^" (str.++ "%" (str.++ "u" ""))))

(assert (= regexA (re.++ (re.range "%" "%")(re.++ (re.opt (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "#" "#")(re.union (re.range "+" "+")(re.union (re.range "-" "-")(re.union (re.range "0" "0")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))))))(re.++ (re.opt (re.+ (re.range "0" "9")))(re.++ (re.opt (re.++ (re.range "." ".") (re.+ (re.range "0" "9"))))(re.++ (re.opt (re.union (re.range "I" "I")(re.union (re.range "h" "h") (re.range "l" "l")))) (re.union (re.range "C" "C")(re.union (re.range "E" "E")(re.union (re.range "G" "G")(re.union (re.range "S" "S")(re.union (re.range "X" "X")(re.union (re.range "c" "g")(re.union (re.range "i" "i")(re.union (re.range "n" "p")(re.union (re.range "s" "s")(re.union (re.range "u" "u") (re.range "x" "x"))))))))))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "2" (str.++ "8" (str.++ "9" (str.++ "9" (str.++ "(" (str.++ "0" (str.++ ")" (str.++ "\u{0d}" (str.++ "5" (str.++ "3" (str.++ "-" (str.++ "8" (str.++ "9" (str.++ "4" (str.++ "-" (str.++ "1" (str.++ "9" (str.++ "0" (str.++ "9" (str.++ "\u{e4}" "")))))))))))))))))))))

(define-fun Witness2 () String (str.++ "+" (str.++ "9" (str.++ "3" (str.++ "\u{0d}" (str.++ "(" (str.++ "0" (str.++ ")" (str.++ "\u{09}" (str.++ "8" (str.++ "4" (str.++ "\u{09}" (str.++ "-" (str.++ "8" (str.++ "4" (str.++ "8" (str.++ "\u{0d}" (str.++ "9" (str.++ "9" (str.++ "8" (str.++ "6" "")))))))))))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.opt (re.range "+" "+"))(re.++ ((_ re.loop 2 4) (re.range "0" "9"))(re.++ (re.opt (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (re.opt (re.range "-" "-"))(re.++ (re.opt (str.to_re (str.++ "(" (str.++ "0" (str.++ ")" "")))))(re.++ (re.opt (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ ((_ re.loop 2 2) (re.range "0" "9"))(re.++ (re.opt (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (re.opt (re.range "-" "-"))(re.++ ((_ re.loop 3 3) (re.range "0" "9"))(re.++ (re.opt (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (re.opt (re.range "-" "-"))(re.++ ((_ re.loop 2 2) (re.range "0" "9"))(re.++ (re.opt (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (re.opt (re.range "-" "-")) ((_ re.loop 2 2) (re.range "0" "9"))))))))))))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "i" (str.++ "f" (str.++ "\u{0d}" (str.++ "(" (str.++ "K" (str.++ "\u{0a}" (str.++ "=" (str.++ " " "")))))))))

(define-fun Witness2 () String (str.++ "i" (str.++ "f" (str.++ " " (str.++ "(" (str.++ "\u{a0}" (str.++ "=" (str.++ "\u{85}" (str.++ "\u{85}" "")))))))))

(assert (= regexA (re.++ (str.to_re (str.++ "i" (str.++ "f" "")))(re.++ (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))(re.++ (re.range "(" "(")(re.++ (re.* (re.union (re.range "A" "Z") (re.range "a" "z")))(re.++ (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))(re.++ (re.range "=" "=") (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "8" (str.++ "-" (str.++ "(" (str.++ "6" (str.++ "6" (str.++ "7" (str.++ "-" (str.++ "7" (str.++ "9" (str.++ "9" (str.++ "-" (str.++ "9" (str.++ "2" (str.++ "-" (str.++ "1" (str.++ "e" "")))))))))))))))))

(define-fun Witness2 () String (str.++ "\u{cf}" (str.++ "8" (str.++ "(" (str.++ "8" (str.++ "2" (str.++ "9" (str.++ "0" (str.++ ")" (str.++ "0" (str.++ "2" (str.++ "1" (str.++ "-" (str.++ "3" (str.++ "-" (str.++ "5" (str.++ "4" (str.++ "-" (str.++ "1" (str.++ "1" (str.++ "-" (str.++ ":" ""))))))))))))))))))))))

(assert (= regexA (re.++ (re.opt (re.++ (re.union (re.range "8" "8") (str.to_re (str.++ "+" (str.++ "7" "")))) (re.opt (re.range "-" "-"))))(re.++ (re.opt (re.range "(" "("))(re.++ ((_ re.loop 3 5) (re.range "0" "9"))(re.++ (re.opt (re.range ")" ")"))(re.++ (re.opt (re.range "-" "-"))(re.++ (re.range "0" "9")(re.++ (re.opt (re.range "-" "-"))(re.++ (re.range "0" "9")(re.++ (re.opt (re.range "-" "-"))(re.++ (re.range "0" "9")(re.++ (re.opt (re.range "-" "-"))(re.++ (re.range "0" "9")(re.++ (re.opt (re.range "-" "-"))(re.++ (re.range "0" "9") (re.opt (re.++ (re.opt (re.++ (re.opt (re.range "-" "-")) (re.range "0" "9")))(re.++ (re.opt (re.range "-" "-")) (re.range "0" "9"))))))))))))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "\u{f9}" (str.++ "\u{ba}" (str.++ "\u{b1}" (str.++ "S" (str.++ "\u{c2}" (str.++ "\u{91}" (str.++ "f" (str.++ "t" (str.++ "p" (str.++ ":" (str.++ "/" (str.++ "/" (str.++ "x" (str.++ "8" (str.++ "9" (str.++ "9" (str.++ "." (str.++ "X" (str.++ "8" (str.++ "7" (str.++ "I" (str.++ "-" (str.++ "-" (str.++ "." (str.++ "9" (str.++ "j" (str.++ "." (str.++ "-" (str.++ "t" (str.++ "z" (str.++ "." (str.++ "1" (str.++ "-" (str.++ "." (str.++ "8" (str.++ "." (str.++ "-" (str.++ "-" (str.++ "b" (str.++ "-" (str.++ "-" (str.++ "8" (str.++ "8" (str.++ "." (str.++ "J" (str.++ "N" (str.++ "." (str.++ "9" (str.++ "8" ""))))))))))))))))))))))))))))))))))))))))))))))))))

(define-fun Witness2 () String (str.++ "\u{08}" (str.++ "n" (str.++ "\u{e0}" (str.++ "\u{cd}" (str.++ "\u{7f}" (str.++ "\u{bd}" (str.++ "\u{a8}" (str.++ "\u{8e}" (str.++ "f" (str.++ "t" (str.++ "p" (str.++ ":" (str.++ "/" (str.++ "/" (str.++ "Z" (str.++ "." (str.++ "X" (str.++ "G" (str.++ "w" (str.++ "." (str.++ "f" (str.++ "P" (str.++ "9" (str.++ "." (str.++ "-" (str.++ "." (str.++ "6" (str.++ "-" (str.++ "I" (str.++ "." (str.++ "-" (str.++ "." (str.++ "y" (str.++ "/" (str.++ "_" (str.++ "/" (str.++ "L" (str.++ "L" (str.++ "'" (str.++ "\u{b0}" "")))))))))))))))))))))))))))))))))))))))))

(assert (= regexA (re.++ (re.union (re.++ (str.to_re (str.++ "h" (str.++ "t" (str.++ "t" (str.++ "p" ""))))) (re.opt (re.range "s" "s"))) (str.to_re (str.++ "f" (str.++ "t" (str.++ "p" "")))))(re.++ (str.to_re (str.++ ":" (str.++ "/" (str.++ "/" ""))))(re.++ (re.+ (re.++ (re.* (re.++ (re.+ (re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z"))))) (re.range "." "."))) (re.++ (re.+ (re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))))(re.++ (re.range "." ".") (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))))))) (re.opt (re.++ (re.opt (re.range "/" "/")) (re.++ (re.+ (re.union (re.range "-" ".")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_") (re.range "a" "z"))))))(re.++ (re.opt (re.range "/" "/")) (re.* (re.union (re.range "." "9")(re.union (re.range "A" "Z") (re.range "a" "z")))))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ ")" (str.++ "," (str.++ ";" (str.++ ")" (str.++ "[" (str.++ "g" (str.++ "," (str.++ ">" (str.++ "a" ""))))))))))

(define-fun Witness2 () String (str.++ "\u{19}" (str.++ "V" (str.++ "L" (str.++ ")" (str.++ "," (str.++ "%" (str.++ "r" (str.++ "(" (str.++ "\u{91}" (str.++ "\u{d6}" (str.++ "U" (str.++ "\u{09}" (str.++ "\u{b6}" ""))))))))))))))

(assert (= regexA (re.++ (re.union (re.range "(" ")")(re.union (re.range "," ",")(re.union (re.range "/" "/")(re.union (re.range "V" "V")(re.union (re.range "\u{5c}" "\u{5c}") (re.range "v" "v"))))))(re.++ (re.union (re.union (re.range "\u{00}" "/")(re.union (re.range ":" "@")(re.union (re.range "[" "^")(re.union (re.range "`" "`")(re.union (re.range "{" "\u{a9}")(re.union (re.range "\u{ab}" "\u{b4}")(re.union (re.range "\u{b6}" "\u{b9}")(re.union (re.range "\u{bb}" "\u{bf}")(re.union (re.range "\u{d7}" "\u{d7}") (re.range "\u{f7}" "\u{f7}")))))))))) (str.to_re ""))(re.++ (re.union (re.range "," ",")(re.union (re.range "1" "1")(re.union (re.range "I" "I")(re.union (re.range "L" "L")(re.union (re.range "i" "i") (re.range "l" "l"))))))(re.++ (re.union (re.union (re.range "\u{00}" "/")(re.union (re.range ":" "@")(re.union (re.range "[" "^")(re.union (re.range "`" "`")(re.union (re.range "{" "\u{a9}")(re.union (re.range "\u{ab}" "\u{b4}")(re.union (re.range "\u{b6}" "\u{b9}")(re.union (re.range "\u{bb}" "\u{bf}")(re.union (re.range "\u{d7}" "\u{d7}") (re.range "\u{f7}" "\u{f7}")))))))))) (str.to_re ""))(re.++ (re.union (re.range "(" ")")(re.union (re.range "," ",")(re.union (re.range "/" "/")(re.union (re.range "@" "A")(re.union (re.range "\u{5c}" "\u{5c}") (re.range "a" "a"))))))(re.++ (re.union (re.union (re.range "\u{00}" "/")(re.union (re.range ":" "@")(re.union (re.range "[" "^")(re.union (re.range "`" "`")(re.union (re.range "{" "\u{a9}")(re.union (re.range "\u{ab}" "\u{b4}")(re.union (re.range "\u{b6}" "\u{b9}")(re.union (re.range "\u{bb}" "\u{bf}")(re.union (re.range "\u{d7}" "\u{d7}") (re.range "\u{f7}" "\u{f7}")))))))))) (str.to_re ""))(re.++ (re.union (re.range "," ",")(re.union (re.range "G" "G") (re.range "g" "g")))(re.++ (re.union (re.union (re.range "\u{00}" "/")(re.union (re.range ":" "@")(re.union (re.range "[" "^")(re.union (re.range "`" "`")(re.union (re.range "{" "\u{a9}")(re.union (re.range "\u{ab}" "\u{b4}")(re.union (re.range "\u{b6}" "\u{b9}")(re.union (re.range "\u{bb}" "\u{bf}")(re.union (re.range "\u{d7}" "\u{d7}") (re.range "\u{f7}" "\u{f7}")))))))))) (str.to_re ""))(re.++ (re.union (re.range "," ",")(re.union (re.range "R" "R") (re.range "r" "r")))(re.++ (re.union (re.union (re.range "\u{00}" "/")(re.union (re.range ":" "@")(re.union (re.range "[" "^")(re.union (re.range "`" "`")(re.union (re.range "{" "\u{a9}")(re.union (re.range "\u{ab}" "\u{b4}")(re.union (re.range "\u{b6}" "\u{b9}")(re.union (re.range "\u{bb}" "\u{bf}")(re.union (re.range "\u{d7}" "\u{d7}") (re.range "\u{f7}" "\u{f7}")))))))))) (str.to_re "")) (re.union (re.range "(" ")")(re.union (re.range "," ",")(re.union (re.range "/" "/")(re.union (re.range "@" "A")(re.union (re.range "\u{5c}" "\u{5c}") (re.range "a" "a"))))))))))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "q" (str.++ "x" (str.++ "f" (str.++ "z" (str.++ "P" (str.++ "e" (str.++ "K" (str.++ "Z" (str.++ ":" (str.++ "/" (str.++ "/" (str.++ "." (str.++ "i" (str.++ "%" (str.++ "I" ""))))))))))))))))

(define-fun Witness2 () String (str.++ "I" (str.++ "y" (str.++ "Y" (str.++ "s" (str.++ ":" (str.++ "/" (str.++ "/" (str.++ "Q" (str.++ "\u{f2}" ""))))))))))

(assert (= regexA (re.++ (re.++ ((_ re.loop 3 3) (re.union (re.range "A" "Z") (re.range "a" "z"))) (re.* (re.union (re.range "A" "Z") (re.range "a" "z"))))(re.++ (str.to_re (str.++ ":" (str.++ "/" (str.++ "/" ""))))(re.++ (re.+ (re.union (re.range "." ".")(re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))))(re.++ (re.* (re.range "/" "/"))(re.++ (re.* (re.union (re.range "%" "%")(re.union (re.range "." "9")(re.union (re.range "A" "Z")(re.union (re.range "\u{5c}" "\u{5c}")(re.union (re.range "_" "_") (re.range "a" "z")))))))(re.++ (re.* (re.range "?" "?")) (re.* (re.union (re.range "%" "&")(re.union (re.range "." "9")(re.union (re.range ";" ";")(re.union (re.range "=" "=")(re.union (re.range "A" "Z")(re.union (re.range "\u{5c}" "\u{5c}")(re.union (re.range "_" "_") (re.range "a" "z")))))))))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "h" (str.++ "Q" (str.++ "\u{ac}" ""))))

(define-fun Witness2 () String (str.++ ")" (str.++ "\u{ef}" (str.++ "\u{1e}" (str.++ "K" (str.++ "[" (str.++ "\u{13}" (str.++ "\u{9b}" (str.++ "\u{cd}" "")))))))))

(assert (= regexA (re.union (re.range "\u{00}" "\u{1f}")(re.union (re.range "!" "/")(re.union (re.range ":" "@")(re.union (re.range "[" "`") (re.range "{" "\u{ff}")))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "'" (str.++ "/" (str.++ "h" (str.++ "t" (str.++ "t" (str.++ "p" (str.++ ":" (str.++ "\u{5c}" (str.++ "/" (str.++ "/" (str.++ "w" (str.++ "w" (str.++ "w" (str.++ "2" (str.++ "c" (str.++ "l" (str.++ "i" (str.++ "p" (str.++ "s" (str.++ "e" (str.++ "r" (str.++ "." (str.++ "c" (str.++ "o" (str.++ "m" (str.++ "/" (str.++ "w" (str.++ "a" (str.++ "t" (str.++ "c" (str.++ "h" (str.++ "_" (str.++ "v" (str.++ "i" (str.++ "d" (str.++ "e" (str.++ "o" (str.++ "/" (str.++ "z" (str.++ "_" (str.++ "-" (str.++ "/" (str.++ "i" (str.++ "'" (str.++ "#" (str.++ "I" "")))))))))))))))))))))))))))))))))))))))))))))))

(define-fun Witness2 () String (str.++ "\u{ad}" (str.++ "'" (str.++ "/" (str.++ "h" (str.++ "t" (str.++ "t" (str.++ "p" (str.++ ":" (str.++ "\u{5c}" (str.++ "/" (str.++ "/" (str.++ "c" (str.++ "l" (str.++ "i" (str.++ "p" (str.++ "s" (str.++ "e" (str.++ "r" (str.++ "." (str.++ "c" (str.++ "o" (str.++ "m" (str.++ "/" (str.++ "w" (str.++ "a" (str.++ "t" (str.++ "c" (str.++ "h" (str.++ "_" (str.++ "v" (str.++ "i" (str.++ "d" (str.++ "e" (str.++ "o" (str.++ "/" (str.++ "r" (str.++ "/" (str.++ "i" (str.++ "'" (str.++ "#" "")))))))))))))))))))))))))))))))))))))))))

(assert (= regexA (re.++ (str.to_re (str.++ "'" (str.++ "/" (str.++ "h" (str.++ "t" (str.++ "t" (str.++ "p" (str.++ ":" (str.++ "\u{5c}" (str.++ "/" (str.++ "/" "")))))))))))(re.++ (re.opt (re.++ (str.to_re (str.++ "w" (str.++ "w" (str.++ "w" "")))) (re.union (re.range "\u{00}" "\u{09}") (re.range "\u{0b}" "\u{ff}"))))(re.++ (str.to_re (str.++ "c" (str.++ "l" (str.++ "i" (str.++ "p" (str.++ "s" (str.++ "e" (str.++ "r" (str.++ "." (str.++ "c" (str.++ "o" (str.++ "m" (str.++ "/" (str.++ "w" (str.++ "a" (str.++ "t" (str.++ "c" (str.++ "h" (str.++ "_" (str.++ "v" (str.++ "i" (str.++ "d" (str.++ "e" (str.++ "o" (str.++ "/" "")))))))))))))))))))))))))(re.++ (re.+ (re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "_" "_") (re.range "a" "z"))))) (str.to_re (str.++ "/" (str.++ "i" (str.++ "'" ""))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "`" (str.++ "\u{a0}" (str.++ "o" (str.++ "\u{ef}" "")))))

(define-fun Witness2 () String (str.++ "\u{0a}" (str.++ "K" (str.++ "L" ""))))

(assert (= regexA (re.union (re.++ (str.to_re "") (re.union (re.range "A" "Z") (re.range "a" "z"))) (re.++ (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))) (re.union (re.range "A" "Z") (re.range "a" "z"))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "c" (str.++ "o" (str.++ "n" (str.++ "t" (str.++ "e" (str.++ "n" (str.++ "t" (str.++ "\u{85}" (str.++ "=" (str.++ " " (str.++ " " (str.++ "\u{09}" (str.++ "\u{85}" (str.++ "\u{a0}" (str.++ "\u{0b}" (str.++ "\u{0a}" (str.++ "\u{09}" (str.++ "'" (str.++ "\u{22}" (str.++ "\u{b2}" (str.++ "0" (str.++ "\u{1d}" (str.++ "\u{dc}" (str.++ "Q" "")))))))))))))))))))))))))

(define-fun Witness2 () String (str.++ "&" (str.++ "\u{a4}" (str.++ "<" (str.++ "m" (str.++ "e" (str.++ "t" (str.++ "a" (str.++ "\u{85}" (str.++ "n" (str.++ "a" (str.++ "m" (str.++ "e" (str.++ "\u{85}" (str.++ "=" (str.++ " " (str.++ "\u{85}" (str.++ "'" (str.++ "\u{a3}" (str.++ "\u{22}" (str.++ "\u{fa}" "")))))))))))))))))))))

(assert (= regexA (re.++ (re.* (re.++ (str.to_re (str.++ "<" (str.++ "m" (str.++ "e" (str.++ "t" (str.++ "a" "")))))) (re.+ (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))))) (re.union (re.++ (str.to_re (str.++ "n" (str.++ "a" (str.++ "m" (str.++ "e" "")))))(re.++ (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (re.range "=" "=")(re.++ (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (re.union (re.range "\u{22}" "\u{22}") (re.range "'" "'"))(re.++ (re.* (re.union (re.range "\u{00}" "!")(re.union (re.range "#" "&")(re.union (re.range "*" "{") (re.range "}" "\u{ff}"))))) (re.union (re.range "\u{22}" "\u{22}") (re.range "'" "'"))))))))(re.union (re.++ (str.to_re (str.++ "c" (str.++ "o" (str.++ "n" (str.++ "t" (str.++ "e" (str.++ "n" (str.++ "t" ""))))))))(re.++ (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (re.range "=" "=")(re.++ (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (re.union (re.range "\u{22}" "\u{22}") (re.range "'" "'"))(re.++ (re.* (re.union (re.range "\u{00}" "!")(re.union (re.range "#" "&")(re.union (re.range "*" "{") (re.range "}" "\u{ff}"))))) (re.union (re.range "\u{22}" "\u{22}") (re.range "'" "'")))))))) (re.++ (str.to_re (str.++ "s" (str.++ "c" (str.++ "h" (str.++ "e" (str.++ "m" (str.++ "e" "")))))))(re.++ (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (re.range "=" "=")(re.++ (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (re.union (re.range "\u{22}" "\u{22}") (re.range "'" "'"))(re.++ (re.* (re.union (re.range "\u{00}" "!")(re.union (re.range "#" "&")(re.union (re.range "*" "{") (re.range "}" "\u{ff}"))))) (re.union (re.range "\u{22}" "\u{22}") (re.range "'" "'")))))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "\u{06}" (str.++ "f" (str.++ "$" (str.++ "\u{bb}" (str.++ "`" (str.++ "'" "")))))))

(define-fun Witness2 () String (str.++ "`" (str.++ "\u{ff}" (str.++ "\u{8e}" ""))))

(assert (= regexA (re.union (re.range "\u{00}" "/")(re.union (re.range ":" "@")(re.union (re.range "[" "`") (re.range "{" "\u{ff}"))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "(" (str.++ "2" (str.++ "9" (str.++ "9" (str.++ "9" (str.++ "9" (str.++ ")" (str.++ "\u{df}" (str.++ "7" (str.++ "7" (str.++ "9" (str.++ "8" (str.++ "9" (str.++ "7" (str.++ "2" ""))))))))))))))))

(define-fun Witness2 () String (str.++ "+" (str.++ "4" (str.++ "4" (str.++ "7" (str.++ "9" (str.++ "8" (str.++ "9" (str.++ "Q" (str.++ "2" (str.++ "9" (str.++ "6" (str.++ "6" (str.++ "\u{09}" (str.++ "9" (str.++ "4" (str.++ "9" (str.++ "8" (str.++ "\u{c2}" "")))))))))))))))))))

(assert (= regexA (re.++ (re.union (re.++ (str.to_re (str.++ "+" (str.++ "4" (str.++ "4" ""))))(re.++ (re.opt (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (str.to_re (str.++ "(" (str.++ "0" (str.++ ")" ""))))(re.++ (re.opt (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))) ((_ re.loop 2 4) (re.range "0" "9"))))))(re.union (re.++ (str.to_re (str.++ "+" (str.++ "4" (str.++ "4" ""))))(re.++ (re.opt (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (re.union (str.to_re (str.++ "0" (str.++ "1" "")))(re.union (str.to_re (str.++ "0" (str.++ "2" "")))(re.union (str.to_re (str.++ "0" (str.++ "3" "")))(re.union (str.to_re (str.++ "0" (str.++ "7" ""))) (str.to_re (str.++ "0" (str.++ "8" ""))))))) ((_ re.loop 2 3) (re.range "0" "9")))))(re.union (re.++ (str.to_re (str.++ "+" (str.++ "4" (str.++ "4" ""))))(re.++ (re.opt (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (re.union (re.range "1" "3") (re.range "7" "8")) ((_ re.loop 2 3) (re.range "0" "9")))))(re.union (re.++ (str.to_re (str.++ "(" (str.++ "+" (str.++ "4" (str.++ "4" (str.++ ")" ""))))))(re.++ (re.opt (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))) ((_ re.loop 3 4) (re.range "0" "9"))))(re.union (re.++ (re.range "(" "(")(re.++ ((_ re.loop 5 5) (re.range "0" "9")) (re.range ")" ")")))(re.union (re.++ (re.union (str.to_re (str.++ "0" (str.++ "1" "")))(re.union (str.to_re (str.++ "0" (str.++ "2" "")))(re.union (str.to_re (str.++ "0" (str.++ "3" "")))(re.union (str.to_re (str.++ "0" (str.++ "7" ""))) (str.to_re (str.++ "0" (str.++ "8" ""))))))) ((_ re.loop 2 3) (re.range "0" "9"))) ((_ re.loop 5 5) (re.range "0" "9"))))))))(re.++ (re.union (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "-" "-")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))) (re.union (re.range "\u{00}" "\u{09}") (re.range "\u{0b}" "\u{ff}"))) (re.union (re.++ ((_ re.loop 3 4) (re.range "0" "9"))(re.++ (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "-" "-")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))) ((_ re.loop 3 4) (re.range "0" "9")))) ((_ re.loop 6 7) (re.range "0" "9")))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "\u{c4}" (str.++ "-" (str.++ "3" (str.++ "3" (str.++ "H" ""))))))

(define-fun Witness2 () String (str.++ "\u{c4}" (str.++ "-" (str.++ "J" (str.++ "9" (str.++ "9" (str.++ "H" (str.++ "\u{b3}" ""))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ ((_ re.loop 1 3) (re.union (re.range "A" "Z")(re.union (re.range "\u{c4}" "\u{c4}")(re.union (re.range "\u{d6}" "\u{d6}") (re.range "\u{dc}" "\u{dc}")))))(re.++ (re.range "-" "-")(re.++ (re.opt (re.range " " " "))(re.++ ((_ re.loop 0 2) (re.range "A" "Z"))(re.++ ((_ re.loop 1 4) (re.range "0" "9")) (re.opt (re.range "H" "H"))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "c" (str.++ "l" (str.++ "i" (str.++ "p" (str.++ "v" (str.++ "n" "")))))))

(define-fun Witness2 () String (str.++ "\u{f3}" (str.++ "\u{b9}" (str.++ "c" (str.++ "l" (str.++ "i" (str.++ "p" (str.++ "v" (str.++ "n" (str.++ "\u{e9}" (str.++ "9" (str.++ "W" ""))))))))))))

(assert (= regexA (str.to_re (str.++ "c" (str.++ "l" (str.++ "i" (str.++ "p" (str.++ "v" (str.++ "n" "")))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "D" (str.++ "\u{ea}" (str.++ "D" (str.++ "6" (str.++ "." (str.++ "v" (str.++ "Y" (str.++ "#" (str.++ "@" (str.++ "H" (str.++ "0" (str.++ "3" (str.++ "5" (str.++ "2" (str.++ "." (str.++ "N" (str.++ "3" (str.++ "9" (str.++ "a" (str.++ "I" (str.++ "k" (str.++ "-" (str.++ "0" ""))))))))))))))))))))))))

(define-fun Witness2 () String (str.++ "1" (str.++ "." (str.++ "^" (str.++ "@" (str.++ "9" (str.++ "9" (str.++ "g" ""))))))))

(assert (= regexA (re.++ (re.+ (re.union (re.range "!" "!")(re.union (re.range "#" "'")(re.union (re.range "*" "+")(re.union (re.range "-" "-")(re.union (re.range "/" "9")(re.union (re.range "=" "=")(re.union (re.range "?" "?")(re.union (re.range "A" "Z") (re.range "^" "~"))))))))))(re.++ (re.* (re.++ (re.range "." ".") (re.+ (re.union (re.range "!" "!")(re.union (re.range "#" "'")(re.union (re.range "*" "+")(re.union (re.range "-" "-")(re.union (re.range "/" "9")(re.union (re.range "=" "=")(re.union (re.range "?" "?")(re.union (re.range "A" "Z") (re.range "^" "~"))))))))))))(re.++ (re.range "@" "@")(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z"))))(re.++ (re.* (re.++ (re.range "-" "-") (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))))) (re.* (re.++ (re.range "." ".")(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))) (re.* (re.++ (re.range "-" "-") (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z"))))))))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "e" (str.++ "2" (str.++ "/" (str.++ "2" (str.++ "9" (str.++ "." (str.++ "4" (str.++ "0" (str.++ "0" (str.++ "0" "")))))))))))

(define-fun Witness2 () String (str.++ "P" (str.++ "." (str.++ "\u{d5}" (str.++ "1" (str.++ "1" (str.++ "-" (str.++ "2" (str.++ "9" (str.++ "-" (str.++ "1" (str.++ "9" (str.++ "4" (str.++ "3" (str.++ "\u{cb}" "")))))))))))))))

(assert (= regexA (re.union (re.++ (re.union (re.++ (re.range "0" "0") (re.union (re.range "1" "1")(re.union (re.range "3" "3")(re.union (re.range "5" "5") (re.range "7" "8")))))(re.union (str.to_re (str.++ "1" (str.++ "0" ""))) (str.to_re (str.++ "1" (str.++ "2" "")))))(re.++ (re.range "-" "/")(re.++ (re.union (re.++ (re.range "0" "0") (re.range "1" "9"))(re.union (re.++ (re.range "1" "2") (re.range "0" "9")) (re.++ (re.range "3" "3") (re.range "0" "1"))))(re.++ (re.range "-" "/") ((_ re.loop 4 4) (re.range "0" "9"))))))(re.union (re.++ (re.union (re.++ (re.range "0" "0") (re.union (re.range "4" "4")(re.union (re.range "6" "6") (re.range "9" "9")))) (str.to_re (str.++ "1" (str.++ "1" ""))))(re.++ (re.range "-" "/")(re.++ (re.union (re.++ (re.range "0" "0") (re.range "1" "9"))(re.union (re.++ (re.range "1" "2") (re.range "0" "9")) (str.to_re (str.++ "3" (str.++ "0" "")))))(re.++ (re.range "-" "/") ((_ re.loop 4 4) (re.range "0" "9"))))))(re.union (re.++ (re.range "2" "2")(re.++ (re.range "-" "/")(re.++ (re.union (re.++ (re.range "0" "0") (re.range "1" "9"))(re.union (re.++ (re.range "1" "1") (re.range "0" "9")) (re.++ (re.range "2" "2") (re.range "0" "8"))))(re.++ (re.range "-" "/") ((_ re.loop 4 4) (re.range "0" "9"))))))(re.union (re.++ (re.range "2" "2")(re.++ (re.range "-" "/")(re.++ (str.to_re (str.++ "2" (str.++ "9" "")))(re.++ (re.range "-" "/") (re.++ (re.union (re.range "0" "0")(re.union (re.range "2" "2")(re.union (re.range "4" "4")(re.union (re.range "6" "6") (re.range "8" "8")))))(re.++ (re.union (re.range "0" "0")(re.union (re.range "4" "4") (re.range "8" "8"))) (str.to_re (str.++ "0" (str.++ "0" "")))))))))(re.union (re.++ (re.range "2" "2")(re.++ (re.range "-" "/")(re.++ (str.to_re (str.++ "2" (str.++ "9" "")))(re.++ (re.range "-" "/") (re.++ (re.union (re.range "1" "1")(re.union (re.range "3" "3")(re.union (re.range "5" "5")(re.union (re.range "7" "7") (re.range "9" "9")))))(re.++ (re.union (re.range "2" "2") (re.range "6" "6")) (str.to_re (str.++ "0" (str.++ "0" "")))))))))(re.union (re.++ (re.range "2" "2")(re.++ (re.range "-" "/")(re.++ (str.to_re (str.++ "2" (str.++ "9" "")))(re.++ (re.range "-" "/") (re.++ (re.range "0" "9")(re.++ (re.range "0" "9")(re.++ (re.range "0" "0") (re.union (re.range "4" "4") (re.range "8" "8")))))))))(re.union (re.++ (re.range "2" "2")(re.++ (re.range "-" "/")(re.++ (str.to_re (str.++ "2" (str.++ "9" "")))(re.++ (re.range "-" "/") (re.++ (re.range "0" "9")(re.++ (re.range "0" "9")(re.++ (re.union (re.range "2" "2")(re.union (re.range "4" "4")(re.union (re.range "6" "6") (re.range "8" "8")))) (re.union (re.range "0" "0")(re.union (re.range "4" "4") (re.range "8" "8")))))))))) (re.++ (re.range "2" "2")(re.++ (re.range "-" "/")(re.++ (str.to_re (str.++ "2" (str.++ "9" "")))(re.++ (re.range "-" "/") (re.++ (re.range "0" "9")(re.++ (re.range "0" "9")(re.++ (re.union (re.range "1" "1")(re.union (re.range "3" "3")(re.union (re.range "5" "5")(re.union (re.range "7" "7") (re.range "9" "9"))))) (re.union (re.range "2" "2") (re.range "6" "6"))))))))))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "1" (str.++ "." (str.++ "0" (str.++ "4" (str.++ "8" ""))))))

(define-fun Witness2 () String (str.++ "\u{c6}" (str.++ "\u{e1}" (str.++ "\u{ca}" (str.++ "8" (str.++ "." (str.++ "3" (str.++ "4" (str.++ "2" "")))))))))

(assert (= regexA (re.++ (re.range "0" "9")(re.++ (re.range "." ".")(re.++ ((_ re.loop 3 3) (re.range "0" "9")) (str.to_re ""))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "V" (str.++ "`" (str.++ "\u{a4}" (str.++ "!" "")))))

(define-fun Witness2 () String (str.++ "\u{0e}" (str.++ "E" (str.++ "o" ""))))

(assert (= regexA (re.* (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z"))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "\u{85}" (str.++ "u" (str.++ "\u{19}" (str.++ "a" (str.++ "^" (str.++ "$" (str.++ "0" (str.++ "6" (str.++ "4" (str.++ "," (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "," (str.++ "4" (str.++ "9" (str.++ "3" (str.++ "." (str.++ "9" (str.++ "7" "")))))))))))))))))))))

(define-fun Witness2 () String (str.++ "$" (str.++ "3" (str.++ "8" (str.++ "," (str.++ "0" (str.++ "2" (str.++ "3" ""))))))))

(assert (= regexA (re.++ (re.range "$" "$")(re.++ (re.opt (re.range "0" "9"))(re.++ (re.opt (re.range "0" "9"))(re.++ (re.opt (re.range "0" "9"))(re.++ (re.opt (re.* (re.++ (re.range "," ",")(re.++ (re.range "0" "9")(re.++ (re.range "0" "9") (re.range "0" "9"))))))(re.++ (re.opt (re.++ (re.range "." ".")(re.++ (re.range "0" "9") (re.opt (re.range "0" "9"))))) (str.to_re "")))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "+" (str.++ " " (str.++ "9" (str.++ "(" (str.++ "7" (str.++ "0" (str.++ "9" (str.++ ")" (str.++ "\u{85}" (str.++ "1" (str.++ "9" (str.++ "0" (str.++ "-" (str.++ "8" (str.++ "9" (str.++ "8" (str.++ "8" (str.++ "\u{a0}" (str.++ "e" (str.++ "x" (str.++ "t" (str.++ " " (str.++ "5" (str.++ "8" (str.++ "\u{0f}" (str.++ "6" "")))))))))))))))))))))))))))

(define-fun Witness2 () String (str.++ "f" (str.++ "\u{b6}" (str.++ "+" (str.++ "\u{09}" (str.++ "4" (str.++ "6" (str.++ "8" (str.++ "9" (str.++ "8" (str.++ "9" (str.++ "4" (str.++ "0" (str.++ "9" (str.++ "3" (str.++ "7" (str.++ "=" "")))))))))))))))))

(assert (= regexA (re.++ (re.opt (re.range "+" "+"))(re.++ (re.opt (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (re.opt (re.++ (re.range "0" "9") (re.opt (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "-" "-")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))))))(re.++ (re.union (re.++ (re.range "(" "(")(re.++ ((_ re.loop 3 3) (re.range "0" "9"))(re.++ (re.range ")" ")") (re.opt (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))))) (re.++ ((_ re.loop 3 3) (re.range "0" "9")) (re.opt (re.range "-" "-"))))(re.++ ((_ re.loop 3 3) (re.range "0" "9"))(re.++ (re.opt (re.union (re.range "-" "-") (re.++ (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))(re.++ (re.range "-" "-") (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))))))(re.++ ((_ re.loop 4 4) (re.range "0" "9")) (re.opt (re.++ (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))(re.++ (re.union (str.to_re (str.++ "e" (str.++ "x" ""))) (str.to_re (str.++ "e" (str.++ "x" (str.++ "t" "")))))(re.++ (re.opt (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))) (re.+ (re.range "0" "9")))))))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "s" (str.++ "r" (str.++ "c" (str.++ "\u{03}" (str.++ "\u{22}" (str.++ "g" (str.++ "i" (str.++ "f" (str.++ "&" (str.++ "q" (str.++ "u" (str.++ "o" (str.++ "t" (str.++ ";" (str.++ "H" ""))))))))))))))))

(define-fun Witness2 () String (str.++ "/" (str.++ "s" (str.++ "r" (str.++ "c" (str.++ "a" (str.++ "\u{c1}" (str.++ "b" (str.++ "m" (str.++ "p" (str.++ "&" (str.++ "q" (str.++ "u" (str.++ "o" (str.++ "t" (str.++ ";" ""))))))))))))))))

(assert (= regexA (re.++ (str.to_re (str.++ "s" (str.++ "r" (str.++ "c" ""))))(re.++ (re.* (re.union (re.range "\u{00}" "%")(re.union (re.range "'" ":")(re.union (re.range "<" "f")(re.union (re.range "h" "s") (re.range "u" "\u{ff}"))))))(re.++ (re.union (re.range "\u{00}" ".") (re.range "0" "\u{ff}"))(re.++ (re.union (re.range "\u{00}" "\u{09}") (re.range "\u{0b}" "\u{ff}"))(re.++ (re.union (str.to_re (str.++ "j" (str.++ "p" (str.++ "g" ""))))(re.union (str.to_re (str.++ "b" (str.++ "m" (str.++ "p" "")))) (str.to_re (str.++ "g" (str.++ "i" (str.++ "f" "")))))) (re.union (str.to_re (str.++ "&" (str.++ "q" (str.++ "u" (str.++ "o" (str.++ "t" (str.++ ";" ""))))))) (re.range "'" "'")))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "\u{1a}" (str.++ "\u{ab}" (str.++ "B" (str.++ "J" (str.++ "\u{00}" (str.++ "," (str.++ "<" (str.++ "4" (str.++ "6" (str.++ "9" (str.++ "7" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "9" (str.++ "9" (str.++ "8" (str.++ "6" (str.++ "8" (str.++ "@" (str.++ "l" (str.++ "\u{f3}" (str.++ "r" (str.++ "\u{a3}" "")))))))))))))))))))))))))

(define-fun Witness2 () String (str.++ "\u{ed}" (str.++ "8" (str.++ "8" (str.++ "8" (str.++ "8" (str.++ "8" (str.++ "5" (str.++ "6" (str.++ "8" (str.++ "7" (str.++ "4" (str.++ "8" (str.++ "@" (str.++ "G" (str.++ "\u{9c}" (str.++ "r" (str.++ "@" (str.++ "C" "")))))))))))))))))))

(assert (= regexA (re.++ ((_ re.loop 10 12) (re.range "0" "9"))(re.++ (re.range "@" "@")(re.++ (re.union (re.range "A" "Z") (re.range "a" "z"))(re.++ (re.union (re.range "\u{00}" "\u{09}") (re.range "\u{0b}" "\u{ff}"))(re.++ (re.union (re.range "A" "Z") (re.range "a" "z")) (re.* (re.union (re.range "\u{00}" "\u{09}") (re.range "\u{0b}" "\u{ff}"))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "\u{7f}" (str.++ "\u{a5}" (str.++ "=" (str.++ "\u{22}" (str.++ "*" (str.++ "\u{22}" (str.++ "\u{f2}" ""))))))))

(define-fun Witness2 () String (str.++ "\u{1f}" (str.++ "z" (str.++ "\u{95}" (str.++ "\u{c6}" (str.++ "=" (str.++ "\u{22}" (str.++ "\u{22}" ""))))))))

(assert (= regexA (re.++ (re.* (re.union (re.range "\u{00}" "\u{08}")(re.union (re.range "\u{0e}" "\u{1f}")(re.union (re.range "!" "\u{84}")(re.union (re.range "\u{86}" "\u{9f}") (re.range "\u{a1}" "\u{ff}"))))))(re.++ (str.to_re (str.++ "=" (str.++ "\u{22}" "")))(re.++ (re.* (re.union (re.range "\u{00}" "!") (re.range "#" "\u{ff}"))) (re.range "\u{22}" "\u{22}"))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "(" (str.++ "2" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "8" (str.++ "9" (str.++ "5" (str.++ "4" (str.++ "9" (str.++ "9" (str.++ "\u{85}" (str.++ "*" (str.++ "n" "")))))))))))))))

(define-fun Witness2 () String (str.++ "(" (str.++ "1" (str.++ "3" (str.++ "8" (str.++ "/" (str.++ "0" (str.++ "4" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "3" (str.++ "2" (str.++ " " (str.++ "\u{eb}" "")))))))))))))))

(assert (= regexA (re.++ (re.opt (re.range "(" "("))(re.++ ((_ re.loop 3 3) (re.range "0" "9"))(re.++ (re.union (re.* (re.range ")" ")"))(re.union (re.++ (re.range ")" ")")(re.++ (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))) (re.* (re.range "-" "-"))))(re.union (re.* (re.range "." "."))(re.union (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.union (re.* (re.range "/" "/")) (str.to_re ""))))))(re.++ ((_ re.loop 3 3) (re.range "0" "9"))(re.++ (re.union (re.* (re.range ")" ")"))(re.union (re.* (re.range "-" "-"))(re.union (re.* (re.range "." "."))(re.union (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.union (re.* (re.range "/" "/")) (str.to_re ""))))))(re.++ ((_ re.loop 4 4) (re.range "0" "9")) (re.union (re.opt (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))) (re.++ (re.range "," ",") (re.opt (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "1" (str.++ "9" (str.++ "8" (str.++ "0" (str.++ "7" (str.++ "-" (str.++ "4" (str.++ "4" (str.++ "4" (str.++ "9" (str.++ "\u{ed}" ""))))))))))))

(define-fun Witness2 () String (str.++ "-" (str.++ "3" (str.++ "2" (str.++ "6" (str.++ "9" (str.++ "\u{07}" (str.++ "~" (str.++ "y" "")))))))))

(assert (= regexA (re.union (re.++ (str.to_re "") (re.++ (re.* ((_ re.loop 5 5) (re.range "0" "9")))(re.++ (re.range "-" "-") ((_ re.loop 4 4) (re.range "0" "9"))))) (re.++ ((_ re.loop 5 5) (re.range "0" "9")) (str.to_re "")))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "X" (str.++ "-" (str.++ "S" (str.++ "p" (str.++ "a" (str.++ "m" (str.++ "-" (str.++ "L" (str.++ "e" (str.++ "v" (str.++ "e" (str.++ "l" (str.++ ":" (str.++ "\u{85}" (str.++ "*" (str.++ "*" (str.++ "*" (str.++ "*" (str.++ "*" (str.++ "*" (str.++ "*" (str.++ "*" (str.++ "*" (str.++ "*" (str.++ "*" ""))))))))))))))))))))))))))

(define-fun Witness2 () String (str.++ "X" (str.++ "-" (str.++ "S" (str.++ "p" (str.++ "a" (str.++ "m" (str.++ "-" (str.++ "L" (str.++ "e" (str.++ "v" (str.++ "e" (str.++ "l" (str.++ ":" (str.++ "\u{85}" (str.++ "*" (str.++ "*" (str.++ "*" (str.++ "*" (str.++ "*" (str.++ "*" (str.++ "*" (str.++ "*" (str.++ "*" (str.++ "*" (str.++ "*" (str.++ "\u{dc}" (str.++ "v" ""))))))))))))))))))))))))))))

(assert (= regexA (re.++ (str.to_re (str.++ "X" (str.++ "-" (str.++ "S" (str.++ "p" (str.++ "a" (str.++ "m" (str.++ "-" (str.++ "L" (str.++ "e" (str.++ "v" (str.++ "e" (str.++ "l" (str.++ ":" ""))))))))))))))(re.++ (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))) ((_ re.loop 11 11) (re.range "*" "*"))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "9" (str.++ "9" (str.++ "0" (str.++ "2" (str.++ "U" (str.++ "N" "")))))))

(define-fun Witness2 () String (str.++ "\u{1c}" (str.++ "9" (str.++ "9" (str.++ "3" (str.++ "8" (str.++ "C" (str.++ "J" (str.++ "\u{0d}" (str.++ "\u{14}" ""))))))))))

(assert (= regexA (re.++ ((_ re.loop 4 4) (re.range "0" "9")) ((_ re.loop 2 2) (re.range "A" "Z")))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "6" (str.++ "\u{ed}" (str.++ "7" (str.++ "'" (str.++ ";" (str.++ "\u{87}" (str.++ "'" (str.++ ")" "")))))))))

(define-fun Witness2 () String (str.++ "K" (str.++ "'" (str.++ "'" (str.++ ")" (str.++ "v" (str.++ "\u{c3}" "")))))))

(assert (= regexA (re.++ (re.range "'" "'")(re.++ (re.* (re.union (re.range "\u{00}" "\u{09}") (re.range "\u{0b}" "\u{ff}")))(re.++ (str.to_re (str.++ "'" (str.++ ")" ""))) (re.* (re.union (re.range "\u{00}" "\u{09}") (re.range "\u{0b}" "\u{ff}"))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "\u{b3}" (str.++ "." (str.++ "c" (str.++ "o" (str.++ "m" (str.++ "/" (str.++ "8" ""))))))))

(define-fun Witness2 () String (str.++ "\u{0c}" (str.++ "\u{93}" (str.++ "v" (str.++ "." (str.++ "c" (str.++ "o" (str.++ "m" (str.++ "/" (str.++ "1" (str.++ "8" "")))))))))))

(assert (= regexA (re.++ (str.to_re (str.++ "." (str.++ "c" (str.++ "o" (str.++ "m" (str.++ "/" ""))))))(re.++ (re.+ (re.range "0" "9")) (str.to_re "")))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "\u{84}" (str.++ "R" (str.++ "\u{91}" (str.++ "Y" (str.++ " " (str.++ " " (str.++ "\u{11}" (str.++ "\u{b5}" "")))))))))

(define-fun Witness2 () String (str.++ " " (str.++ " " "")))

(assert (= regexA (re.union (str.to_re (str.++ " " (str.++ " " ""))) (str.to_re (str.++ " " (str.++ " " (str.++ " " (str.++ " " (str.++ " " (str.++ " " (str.++ " " (str.++ "#" (str.++ " " (str.++ "n" (str.++ "o" (str.++ " " (str.++ "p" (str.++ "o" (str.++ "u" (str.++ "n" (str.++ "d" (str.++ " " (str.++ "s" (str.++ "i" (str.++ "g" (str.++ "n" (str.++ " " (str.++ "a" (str.++ "f" (str.++ "t" (str.++ "e" (str.++ "r" (str.++ " " (str.++ "a" (str.++ "m" (str.++ "p" (str.++ "e" (str.++ "r" (str.++ "s" (str.++ "a" (str.++ "n" (str.++ "d" ""))))))))))))))))))))))))))))))))))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "2" (str.++ "9" (str.++ "/" (str.++ "0" (str.++ "2" (str.++ "/" (str.++ "5" (str.++ "2" (str.++ "0" (str.++ "0" (str.++ "\u{03}" ""))))))))))))

(define-fun Witness2 () String (str.++ "1" (str.++ "0" (str.++ "/" (str.++ "0" (str.++ "4" (str.++ "/" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "0" "")))))))))))

(assert (= regexA (re.union (re.++ (re.union (re.++ (re.range "0" "0") (re.range "1" "9"))(re.union (re.++ (re.range "1" "2") (re.range "0" "9")) (re.++ (re.range "3" "3") (re.range "0" "1"))))(re.++ (re.range "/" "/")(re.++ (re.union (re.++ (re.range "0" "0") (re.union (re.range "1" "1")(re.union (re.range "3" "3")(re.union (re.range "5" "5") (re.range "7" "8")))))(re.union (str.to_re (str.++ "1" (str.++ "0" ""))) (str.to_re (str.++ "1" (str.++ "2" "")))))(re.++ (re.range "/" "/") ((_ re.loop 4 4) (re.range "0" "9"))))))(re.union (re.++ (re.union (re.++ (re.range "0" "0") (re.range "1" "9"))(re.union (re.++ (re.range "1" "2") (re.range "0" "9")) (str.to_re (str.++ "3" (str.++ "0" "")))))(re.++ (re.range "/" "/")(re.++ (re.union (re.++ (re.range "0" "0") (re.union (re.range "4" "4")(re.union (re.range "6" "6") (re.range "9" "9")))) (str.to_re (str.++ "1" (str.++ "1" ""))))(re.++ (re.range "/" "/") ((_ re.loop 4 4) (re.range "0" "9"))))))(re.union (re.++ (re.union (re.++ (re.range "0" "0") (re.range "1" "9"))(re.union (re.++ (re.range "1" "1") (re.range "0" "9")) (re.++ (re.range "2" "2") (re.range "0" "8"))))(re.++ (re.range "/" "/")(re.++ (str.to_re (str.++ "0" (str.++ "2" "")))(re.++ (re.range "/" "/") ((_ re.loop 4 4) (re.range "0" "9"))))))(re.union (re.++ (str.to_re (str.++ "2" (str.++ "9" "")))(re.++ (re.range "-" "/")(re.++ (str.to_re (str.++ "0" (str.++ "2" "")))(re.++ (re.range "/" "/") (re.++ (re.union (re.range "0" "0")(re.union (re.range "2" "2")(re.union (re.range "4" "4")(re.union (re.range "6" "6") (re.range "8" "8")))))(re.++ (re.union (re.range "0" "0")(re.union (re.range "4" "4") (re.range "8" "8"))) (str.to_re (str.++ "0" (str.++ "0" "")))))))))(re.union (re.++ (str.to_re (str.++ "2" (str.++ "9" "")))(re.++ (re.range "/" "/")(re.++ (str.to_re (str.++ "0" (str.++ "2" "")))(re.++ (re.range "/" "/") (re.++ (re.union (re.range "1" "1")(re.union (re.range "3" "3")(re.union (re.range "5" "5")(re.union (re.range "7" "7") (re.range "9" "9")))))(re.++ (re.union (re.range "2" "2") (re.range "6" "6")) (str.to_re (str.++ "0" (str.++ "0" "")))))))))(re.union (re.++ (str.to_re (str.++ "2" (str.++ "9" "")))(re.++ (re.range "/" "/")(re.++ (str.to_re (str.++ "0" (str.++ "2" "")))(re.++ (re.range "/" "/") (re.++ (re.range "0" "9")(re.++ (re.range "0" "9")(re.++ (re.range "0" "0") (re.union (re.range "4" "4") (re.range "8" "8")))))))))(re.union (re.++ (str.to_re (str.++ "2" (str.++ "9" "")))(re.++ (re.range "/" "/")(re.++ (str.to_re (str.++ "0" (str.++ "2" "")))(re.++ (re.range "/" "/") (re.++ (re.range "0" "9")(re.++ (re.range "0" "9")(re.++ (re.union (re.range "2" "2")(re.union (re.range "4" "4")(re.union (re.range "6" "6") (re.range "8" "8")))) (re.union (re.range "0" "0")(re.union (re.range "4" "4") (re.range "8" "8")))))))))) (re.++ (str.to_re (str.++ "2" (str.++ "9" "")))(re.++ (re.range "/" "/")(re.++ (str.to_re (str.++ "0" (str.++ "2" "")))(re.++ (re.range "/" "/") (re.++ (re.range "0" "9")(re.++ (re.range "0" "9")(re.++ (re.union (re.range "1" "1")(re.union (re.range "3" "3")(re.union (re.range "5" "5")(re.union (re.range "7" "7") (re.range "9" "9"))))) (re.union (re.range "2" "2") (re.range "6" "6"))))))))))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "\u{c8}" (str.++ " " "")))

(define-fun Witness2 () String (str.++ "\u{09}" ""))

(assert (= regexA (re.union (re.++ (str.to_re "") (re.+ (re.union (re.range "\u{09}" "\u{09}") (re.range " " " ")))) (re.++ (re.+ (re.union (re.range "\u{09}" "\u{09}") (re.range " " " "))) (str.to_re "")))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "\u{13}" (str.++ "\u{22}" (str.++ "\u{22}" ""))))

(define-fun Witness2 () String (str.++ "9" (str.++ "\u{22}" (str.++ "\u{5c}" (str.++ "\u{d9}" (str.++ "\u{95}" (str.++ "\u{89}" (str.++ "\u{5c}" (str.++ ":" (str.++ "\u{5c}" (str.++ "\u{f3}" (str.++ "q" (str.++ "\u{22}" "")))))))))))))

(assert (= regexA (re.++ (re.range "\u{22}" "\u{22}")(re.++ (re.* (re.union (re.union (re.range "\u{00}" "!")(re.union (re.range "#" "[") (re.range "]" "\u{ff}"))) (re.++ (re.range "\u{5c}" "\u{5c}") (re.union (re.range "\u{00}" "\u{09}") (re.range "\u{0b}" "\u{ff}"))))) (re.range "\u{22}" "\u{22}")))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "\u{ed}" (str.++ "9" (str.++ "5" ""))))

(define-fun Witness2 () String (str.++ "\u{c5}" (str.++ "\u{b5}" (str.++ "8" (str.++ "0" (str.++ "2" ""))))))

(assert (= regexA (re.union (re.++ (str.to_re "")(re.++ (re.range "$" "$") (re.++ (re.range "0" "9")(re.++ (re.range "," ",")(re.++ ((_ re.loop 1 3) (re.range "0" "9")) (re.++ (re.range "," ",") ((_ re.loop 3 3) (re.range "0" "9"))))))))(re.union (re.++ ((_ re.loop 1 3) (re.range "0" "9")) (re.++ (re.range "," ",") ((_ re.loop 3 3) (re.range "0" "9")))) (re.++ (re.opt ((_ re.loop 1 3) (re.range "0" "9"))) (str.to_re ""))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "S" (str.++ "h" (str.++ ":" (str.++ "%" (str.++ "3" (str.++ "7" (str.++ "8" (str.++ "R" "")))))))))

(define-fun Witness2 () String (str.++ "\u{17}" (str.++ "T" (str.++ ":" (str.++ "%" (str.++ "E" (str.++ "9" (str.++ "%" (str.++ "d" (str.++ "0" (str.++ "+" (str.++ "%" (str.++ "d" (str.++ "1" (str.++ "/" (str.++ "M" (str.++ "%" (str.++ "9" (str.++ "a" "")))))))))))))))))))

(assert (= regexA (re.++ (re.++ (re.union (re.range "A" "Z") (re.range "a" "z")) (re.* (re.union (re.range "+" "+")(re.union (re.range "-" ".")(re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))))))(re.++ (re.range ":" ":")(re.++ (re.opt (re.union (re.++ (str.to_re (str.++ "/" (str.++ "/" "")))(re.++ (re.opt (re.++ (re.+ (re.union (re.union (re.range "!" "!")(re.union (re.range "$" "$")(re.union (re.range "&" ".")(re.union (re.range "0" "9")(re.union (re.range ";" ";")(re.union (re.range "=" "=")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z") (re.range "~" "~")))))))))) (re.++ (re.range "%" "%") ((_ re.loop 2 2) (re.union (re.range "0" "9")(re.union (re.range "A" "F") (re.range "a" "f")))))))(re.++ (re.opt (re.range ":" ":"))(re.++ (re.* (re.union (re.union (re.range "!" "!")(re.union (re.range "$" "$")(re.union (re.range "&" ".")(re.union (re.range "0" "9")(re.union (re.range ";" ";")(re.union (re.range "=" "=")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z") (re.range "~" "~")))))))))) (re.++ (re.range "%" "%") ((_ re.loop 2 2) (re.union (re.range "0" "9")(re.union (re.range "A" "F") (re.range "a" "f"))))))) (re.range "@" "@")))))(re.++ (re.* (re.union (re.union (re.range "!" "!")(re.union (re.range "$" "$")(re.union (re.range "&" ".")(re.union (re.range "0" "9")(re.union (re.range ";" ";")(re.union (re.range "=" "=")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z") (re.range "~" "~")))))))))) (re.++ (re.range "%" "%") ((_ re.loop 2 2) (re.union (re.range "0" "9")(re.union (re.range "A" "F") (re.range "a" "f")))))))(re.++ (re.opt (re.++ (re.range ":" ":") (re.* (re.range "0" "9")))) (re.* (re.++ (re.range "/" "/") (re.* (re.union (re.union (re.range "!" "!")(re.union (re.range "$" "$")(re.union (re.range "&" ".")(re.union (re.range "0" ";")(re.union (re.range "=" "=")(re.union (re.range "@" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z") (re.range "~" "~"))))))))) (re.++ (re.range "%" "%") ((_ re.loop 2 2) (re.union (re.range "0" "9")(re.union (re.range "A" "F") (re.range "a" "f")))))))))))))(re.union (re.++ (re.range "/" "/") (re.opt (re.++ (re.+ (re.union (re.union (re.range "!" "!")(re.union (re.range "$" "$")(re.union (re.range "&" ".")(re.union (re.range "0" ";")(re.union (re.range "=" "=")(re.union (re.range "@" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z") (re.range "~" "~"))))))))) (re.++ (re.range "%" "%") ((_ re.loop 2 2) (re.union (re.range "0" "9")(re.union (re.range "A" "F") (re.range "a" "f"))))))) (re.* (re.++ (re.range "/" "/") (re.* (re.union (re.union (re.range "!" "!")(re.union (re.range "$" "$")(re.union (re.range "&" ".")(re.union (re.range "0" ";")(re.union (re.range "=" "=")(re.union (re.range "@" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z") (re.range "~" "~"))))))))) (re.++ (re.range "%" "%") ((_ re.loop 2 2) (re.union (re.range "0" "9")(re.union (re.range "A" "F") (re.range "a" "f")))))))))))) (re.++ (re.+ (re.union (re.union (re.range "!" "!")(re.union (re.range "$" "$")(re.union (re.range "&" ".")(re.union (re.range "0" ";")(re.union (re.range "=" "=")(re.union (re.range "@" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z") (re.range "~" "~"))))))))) (re.++ (re.range "%" "%") ((_ re.loop 2 2) (re.union (re.range "0" "9")(re.union (re.range "A" "F") (re.range "a" "f"))))))) (re.* (re.++ (re.range "/" "/") (re.* (re.union (re.union (re.range "!" "!")(re.union (re.range "$" "$")(re.union (re.range "&" ".")(re.union (re.range "0" ";")(re.union (re.range "=" "=")(re.union (re.range "@" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z") (re.range "~" "~"))))))))) (re.++ (re.range "%" "%") ((_ re.loop 2 2) (re.union (re.range "0" "9")(re.union (re.range "A" "F") (re.range "a" "f")))))))))))))(re.++ (re.opt (re.++ (re.range "?" "?") (re.* (re.union (re.union (re.range "!" "!")(re.union (re.range "$" "$")(re.union (re.range "&" ";")(re.union (re.range "=" "=")(re.union (re.range "?" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z") (re.range "~" "~")))))))) (re.++ (re.range "%" "%") ((_ re.loop 2 2) (re.union (re.range "0" "9")(re.union (re.range "A" "F") (re.range "a" "f"))))))))) (re.opt (re.++ (re.range "#" "#") (re.* (re.union (re.union (re.range "!" "!")(re.union (re.range "$" "$")(re.union (re.range "&" ";")(re.union (re.range "=" "=")(re.union (re.range "?" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z") (re.range "~" "~")))))))) (re.++ (re.range "%" "%") ((_ re.loop 2 2) (re.union (re.range "0" "9")(re.union (re.range "A" "F") (re.range "a" "f")))))))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "9" (str.++ "3" (str.++ "8" (str.++ "-" (str.++ "8" (str.++ "4" (str.++ "-" (str.++ "7" (str.++ "6" (str.++ "9" (str.++ "8" ""))))))))))))

(define-fun Witness2 () String (str.++ "\u{fd}" (str.++ "8" (str.++ "9" (str.++ "8" (str.++ "1" (str.++ "3" (str.++ "3" (str.++ "0" (str.++ "9" (str.++ "7" "")))))))))))

(assert (= regexA (re.union (re.++ (str.to_re "") (re.++ ((_ re.loop 3 3) (re.range "0" "9"))(re.++ (re.range "-" "-")(re.++ ((_ re.loop 2 2) (re.range "0" "9"))(re.++ (re.range "-" "-") ((_ re.loop 4 4) (re.range "0" "9"))))))) (re.++ (re.++ ((_ re.loop 3 3) (re.range "0" "9"))(re.++ ((_ re.loop 2 2) (re.range "0" "9")) ((_ re.loop 4 4) (re.range "0" "9")))) (str.to_re "")))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "G" (str.++ "-" (str.++ "4" (str.++ "." (str.++ "4" (str.++ "F" (str.++ "3" (str.++ "." (str.++ "g" (str.++ "@" (str.++ "C" (str.++ "-" (str.++ "." (str.++ "L" "")))))))))))))))

(define-fun Witness2 () String (str.++ "'" (str.++ "\u{7f}" (str.++ "{" (str.++ "8" (str.++ "8" (str.++ "@" (str.++ "c" (str.++ "." (str.++ "." (str.++ "o" (str.++ "\u{e6}" ""))))))))))))

(assert (= regexA (re.++ (re.+ (re.union (re.range "-" ".")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_") (re.range "a" "z"))))))(re.++ (re.range "@" "@")(re.++ (re.+ (re.union (re.range "-" ".")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_") (re.range "a" "z"))))))(re.++ (re.range "." ".") (re.+ (re.union (re.range "-" ".")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_") (re.range "a" "z"))))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "t" (str.++ "V" (str.++ "D" (str.++ " " (str.++ "Z" (str.++ "A" (str.++ "," (str.++ " " (str.++ "4" (str.++ "9" (str.++ "x" (str.++ ":" (str.++ " " (str.++ " " (str.++ "-" (str.++ ";" (str.++ "v" (str.++ "," (str.++ "8" (str.++ "4" (str.++ "\u{f6}" ""))))))))))))))))))))))

(define-fun Witness2 () String (str.++ "2" (str.++ "5" (str.++ " " (str.++ " " (str.++ "A" (str.++ "\u{cf}" (str.++ "\u{b5}" (str.++ "," (str.++ " " (str.++ " " (str.++ " " (str.++ " " (str.++ "8" (str.++ "5" (str.++ "." (str.++ " " (str.++ " " (str.++ "2" (str.++ "," (str.++ "," (str.++ "C" (str.++ "V" (str.++ "v" (str.++ "," (str.++ " " (str.++ " " (str.++ "3" (str.++ " " (str.++ "8" ""))))))))))))))))))))))))))))))

(assert (= regexA (re.++ (re.++ (re.* (re.range "0" "9"))(re.++ ((_ re.loop 0 2) (re.range " " " "))(re.++ (re.range "A" "Z")(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))(re.++ (re.opt (re.union (re.range "," ",")(re.union (re.range "." ".") (re.range ":" ";"))))(re.++ ((_ re.loop 0 4) (re.range " " " "))(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "C" "C")(re.union (re.range "I" "I")(re.union (re.range "L" "L")(re.union (re.range "V" "V")(re.union (re.range "X" "X")(re.union (re.range "c" "c")(re.union (re.range "i" "i")(re.union (re.range "l" "l")(re.union (re.range "v" "v") (re.range "x" "x"))))))))))))(re.++ (re.union (re.range "," ",")(re.union (re.range "." ".") (re.range ":" ";"))) (re.+ (re.++ ((_ re.loop 0 2) (re.range " " " ")) ((_ re.loop 1 7) (re.union (re.range "," "-") (re.range "0" "9"))))))))))))) (re.* (re.++ (re.union (re.range "," ",")(re.union (re.range "." ".") (re.range ":" ";")))(re.++ ((_ re.loop 0 4) (re.range " " " "))(re.++ (re.* (re.union (re.range "C" "C")(re.union (re.range "I" "I")(re.union (re.range "L" "L")(re.union (re.range "V" "V")(re.union (re.range "X" "X")(re.union (re.range "c" "c")(re.union (re.range "i" "i")(re.union (re.range "l" "l")(re.union (re.range "v" "v") (re.range "x" "x")))))))))))(re.++ (re.union (re.range "," ",")(re.union (re.range "." ".") (re.range ":" ";"))) (re.+ (re.++ ((_ re.loop 0 2) (re.range " " " ")) ((_ re.loop 1 7) (re.union (re.range "," "-") (re.range "0" "9")))))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "4" (str.++ "h" (str.++ "t" (str.++ "t" (str.++ "p" (str.++ ":" (str.++ "/" (str.++ "/" (str.++ "\u{aa}" (str.++ "\u{ba}" (str.++ "\u{aa}" (str.++ "/" (str.++ "S" (str.++ "z" (str.++ "\u{db}" (str.++ "\u{ba}" (str.++ "\u{aa}" (str.++ "\u{ba}" (str.++ "." (str.++ "g" (str.++ "i" (str.++ "f" (str.++ "\u{90}" (str.++ "a" (str.++ "\u{0c}" ""))))))))))))))))))))))))))

(define-fun Witness2 () String (str.++ "\u{b0}" (str.++ "h" (str.++ "t" (str.++ "t" (str.++ "p" (str.++ "s" (str.++ ":" (str.++ "/" (str.++ "/" (str.++ "j" (str.++ "\u{b5}" (str.++ "." (str.++ "/" (str.++ "\u{b5}" (str.++ "." (str.++ "g" (str.++ "i" (str.++ "f" (str.++ "l" ""))))))))))))))))))))

(assert (= regexA (re.++ (str.to_re (str.++ "h" (str.++ "t" (str.++ "t" (str.++ "p" "")))))(re.++ (re.opt (re.range "s" "s"))(re.++ (str.to_re (str.++ ":" (str.++ "/" (str.++ "/" ""))))(re.++ (re.+ (re.union (re.range "." "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))(re.++ (re.range "/" "/")(re.++ (re.+ (re.union (re.range "." "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))(re.++ (re.range "." ".") (re.union (str.to_re (str.++ "b" (str.++ "m" (str.++ "p" ""))))(re.union (str.to_re (str.++ "p" (str.++ "n" (str.++ "g" ""))))(re.union (str.to_re (str.++ "j" (str.++ "p" (str.++ "g" "")))) (str.to_re (str.++ "g" (str.++ "i" (str.++ "f" ""))))))))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "[" (str.++ "\u{e1}" (str.++ "\u{c7}" (str.++ "\u{b5}" (str.++ "9" (str.++ "9" (str.++ "\u{ff}" (str.++ "]" (str.++ "\u{a0}" (str.++ "\u{85}" (str.++ "\u{85}" (str.++ " " (str.++ "\u{85}" (str.++ "\u{bd}" "")))))))))))))))

(define-fun Witness2 () String (str.++ "[" (str.++ "\u{df}" (str.++ "]" (str.++ "\u{a0}" (str.++ "=" (str.++ "\u{0c}" (str.++ "\u{85}" (str.++ "\u{ab}" (str.++ ";" (str.++ "#" (str.++ "=" (str.++ "H" (str.++ " " (str.++ "\u{9d}" "")))))))))))))))

(assert (= regexA (re.++ (re.range "[" "[")(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))(re.++ (re.range "]" "]")(re.++ (re.+ (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))) (re.union (re.* (re.++ (re.* (re.union (re.range "\u{00}" "\u{09}") (re.range "\u{0b}" "\u{ff}")))(re.++ (re.range "=" "=")(re.++ (re.* (re.union (re.range "\u{00}" "\u{09}") (re.range "\u{0b}" "\u{ff}"))) (re.+ (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))))))) (re.union (re.range "\u{00}" "Z") (re.range "\u{5c}" "\u{ff}")))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "," (str.++ "\u{22}" (str.++ "\u{22}" (str.++ "^" "")))))

(define-fun Witness2 () String (str.++ "\u{ee}" (str.++ "1" (str.++ "\u{15}" (str.++ "," (str.++ "\u{22}" (str.++ "\u{5c}" (str.++ "s" (str.++ "\u{5c}" (str.++ "\u{c0}" (str.++ "\u{5c}" (str.++ "2" (str.++ "\u{5c}" (str.++ "1" (str.++ "i" (str.++ "\u{22}" ""))))))))))))))))

(assert (= regexA (re.++ (re.range "\u{22}" "\u{22}")(re.++ (re.* (re.union (re.++ (re.range "\u{5c}" "\u{5c}") (re.union (re.range "\u{00}" "\u{09}") (re.range "\u{0b}" "\u{ff}"))) (re.union (re.range "\u{00}" "!") (re.range "#" "\u{ff}")))) (re.range "\u{22}" "\u{22}")))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "\u{0e}" (str.++ "\u{16}" (str.++ "I" (str.++ "\u{13}" (str.++ "\u{9d}" (str.++ "B" (str.++ "l" (str.++ "+" (str.++ "7" (str.++ "@" (str.++ "R" (str.++ "9" (str.++ "9" (str.++ "." (str.++ "T" (str.++ "M" (str.++ "\u{ad}" ""))))))))))))))))))

(define-fun Witness2 () String (str.++ "K" (str.++ "_" (str.++ "\u{b5}" (str.++ "\u{b5}" (str.++ "+" (str.++ "H" (str.++ "\u{aa}" (str.++ "Z" (str.++ "." (str.++ "@" (str.++ "U" (str.++ "R" (str.++ "." (str.++ "V" (str.++ "." (str.++ "Z" (str.++ "J" ""))))))))))))))))))

(assert (= regexA (re.++ (re.++ (re.range "A" "Z") (re.+ (re.union (re.range "-" ".")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))))(re.++ (re.opt (re.++ (re.range "+" "+") (re.+ (re.union (re.range "-" ".")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))))))(re.++ (re.range "@" "@") (re.++ (re.union (re.range "0" "9") (re.range "A" "Z"))(re.++ (re.* (re.union (re.range "-" ".")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))))(re.++ (re.union (re.range "0" "9") (re.range "A" "Z"))(re.++ (re.range "." ".")(re.++ (re.range "A" "Z")(re.++ (re.* (re.union (re.range "." ".") (re.range "A" "Z"))) (re.range "A" "Z"))))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "8" (str.++ "4" (str.++ "\u{c7}" (str.++ "7" (str.++ "\u{0b}" (str.++ "S" (str.++ "e" (str.++ " " (str.++ "O" (str.++ "V" "")))))))))))

(define-fun Witness2 () String (str.++ "8" (str.++ "\u{0b}" (str.++ "\u{a0}" (str.++ "P" (str.++ "P" (str.++ "\u{0c}" (str.++ "o" (str.++ "N" (str.++ "Y" (str.++ "\u{1b}" (str.++ "\u{8a}" (str.++ "\u{a6}" "")))))))))))))

(assert (= regexA (re.++ ((_ re.loop 1 3) (re.range "0" "9"))(re.++ (re.opt (re.union (re.range "\u{00}" "\u{09}") (re.range "\u{0b}" "\u{ff}")))(re.++ ((_ re.loop 0 3) (re.range "0" "9"))(re.++ (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))(re.++ ((_ re.loop 2 30) (re.union (re.range "A" "Z") (re.range "a" "z")))(re.++ (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))) ((_ re.loop 2 15) (re.union (re.range "A" "Z") (re.range "a" "z")))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "3" (str.++ "8" (str.++ "6" (str.++ "D" (str.++ "3" (str.++ "8" (str.++ "5" (str.++ "\u{be}" (str.++ "9" (str.++ "3" (str.++ "9" (str.++ "-" (str.++ "6" (str.++ "9" "")))))))))))))))

(define-fun Witness2 () String (str.++ "A" (str.++ "9" (str.++ "2" (str.++ "4" (str.++ "9" (str.++ "5" (str.++ "9" (str.++ "8" (str.++ "4" (str.++ "4" (str.++ "8" (str.++ "1" "")))))))))))))

(assert (= regexA (re.union (re.++ (str.to_re "") (re.++ ((_ re.loop 3 3) (re.range "0" "9"))(re.++ (re.union (re.range "\u{00}" "\u{09}") (re.range "\u{0b}" "\u{ff}"))(re.++ ((_ re.loop 3 3) (re.range "0" "9"))(re.++ (re.union (re.range "\u{00}" "\u{09}") (re.range "\u{0b}" "\u{ff}"))(re.++ ((_ re.loop 3 3) (re.range "0" "9"))(re.++ (re.range "-" "-") ((_ re.loop 2 2) (re.range "0" "9"))))))))) (re.++ ((_ re.loop 11 11) (re.range "0" "9")) (str.to_re "")))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ ">" (str.++ "4" (str.++ "4" (str.++ "-" (str.++ "9" (str.++ "-" (str.++ "9" (str.++ "\u{09}" (str.++ "\u{18}" (str.++ "\u{fd}" (str.++ "\u{a5}" (str.++ "i" (str.++ "\u{c6}" ""))))))))))))))

(define-fun Witness2 () String (str.++ "q" (str.++ "0" (str.++ "H" (str.++ "3" (str.++ "9" (str.++ "-" (str.++ "9" (str.++ "9" (str.++ "-" (str.++ "2" (str.++ "2" ""))))))))))))

(assert (= regexA (re.++ (re.union ((_ re.loop 4 4) (re.range "0" "9")) ((_ re.loop 2 2) (re.range "0" "9")))(re.++ (re.range "-" "-")(re.++ ((_ re.loop 1 2) (re.range "0" "9"))(re.++ (re.range "-" "-") ((_ re.loop 1 2) (re.range "0" "9"))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "\u{15}" (str.++ "1" (str.++ " " (str.++ "(" (str.++ "8" (str.++ "8" (str.++ "6" (str.++ ")" (str.++ " " (str.++ "8" (str.++ "7" (str.++ "8" (str.++ " " (str.++ "8" (str.++ "8" (str.++ "9" (str.++ "9" ""))))))))))))))))))

(define-fun Witness2 () String (str.++ "\u{0d}" (str.++ "\u{99}" (str.++ "\u{a0}" (str.++ "1" (str.++ "(" (str.++ "1" (str.++ "5" (str.++ "8" (str.++ ")" (str.++ "+" (str.++ "5" (str.++ "9" (str.++ "4" (str.++ "7" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "\u{f8}" (str.++ "\u{02}" ""))))))))))))))))))))

(assert (= regexA (re.++ (re.opt (re.range "1" "1"))(re.++ (re.opt (re.union (re.range " " " ")(re.union (re.range "+" "+") (re.range "-" "."))))(re.++ (re.opt (re.range "(" "("))(re.++ (re.opt ((_ re.loop 3 3) (re.range "0" "9")))(re.++ (re.opt (re.range ")" ")"))(re.++ (re.opt (re.union (re.range " " " ")(re.union (re.range "+" "+") (re.range "-" "."))))(re.++ ((_ re.loop 3 3) (re.range "0" "9"))(re.++ (re.opt (re.union (re.range " " " ")(re.union (re.range "+" "+") (re.range "-" ".")))) ((_ re.loop 4 4) (re.range "0" "9"))))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "\u{80}" (str.++ "9" (str.++ "8" (str.++ "6" (str.++ "8" (str.++ "8" (str.++ "5" (str.++ "3" (str.++ "5" (str.++ "0" (str.++ "9" ""))))))))))))

(define-fun Witness2 () String (str.++ "8" (str.++ "5" (str.++ "5" (str.++ "6" (str.++ "4" (str.++ "8" (str.++ "9" (str.++ "9" (str.++ "9" (str.++ "9" "")))))))))))

(assert (= regexA (re.++ (re.++ (re.range "2" "9")(re.++ ((_ re.loop 2 2) (re.range "0" "9"))(re.++ ((_ re.loop 3 3) (re.range "0" "9")) ((_ re.loop 4 4) (re.range "0" "9"))))) (str.to_re ""))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "." (str.++ "<" (str.++ "B" (str.++ "O" (str.++ "D" (str.++ "Y" (str.++ "\u{8d}" (str.++ ">" (str.++ "l" (str.++ "\u{a9}" (str.++ "p" ""))))))))))))

(define-fun Witness2 () String (str.++ "<" (str.++ "B" (str.++ "O" (str.++ "D" (str.++ "Y" (str.++ "\u{e7}" (str.++ "1" (str.++ ">" "")))))))))

(assert (= regexA (re.++ (re.union (str.to_re (str.++ "<" (str.++ "b" (str.++ "o" (str.++ "d" (str.++ "y" "")))))) (str.to_re (str.++ "<" (str.++ "B" (str.++ "O" (str.++ "D" (str.++ "Y" "")))))))(re.++ (re.* (re.union (re.range "\u{00}" "=") (re.range "?" "\u{ff}"))) (re.range ">" ">")))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "9" (str.++ "5" (str.++ "1" ""))))

(define-fun Witness2 () String (str.++ "9" (str.++ "5" (str.++ "1" (str.++ "\u{88}" (str.++ "\u{b4}" (str.++ "\u{85}" "")))))))

(assert (= regexA (re.union (str.to_re (str.++ "(" (str.++ "7" (str.++ "1" (str.++ "4" "")))))(re.union (str.to_re (str.++ "7" (str.++ "6" (str.++ "0" ""))))(re.union (str.to_re (str.++ "9" (str.++ "4" (str.++ "9" ""))))(re.union (str.to_re (str.++ "6" (str.++ "1" (str.++ "9" ""))))(re.union (str.to_re (str.++ "9" (str.++ "0" (str.++ "9" ""))))(re.union (str.to_re (str.++ "9" (str.++ "5" (str.++ "1" ""))))(re.union (str.to_re (str.++ "8" (str.++ "1" (str.++ "8" ""))))(re.union (str.to_re (str.++ "3" (str.++ "1" (str.++ "0" ""))))(re.union (str.to_re (str.++ "3" (str.++ "2" (str.++ "3" ""))))(re.union (str.to_re (str.++ "2" (str.++ "1" (str.++ "3" ""))))(re.union (str.to_re (str.++ "3" (str.++ "2" (str.++ "3" ""))))(re.union (str.to_re (str.++ "5" (str.++ "6" (str.++ "2" "")))) (re.++ (str.to_re (str.++ "6" (str.++ "2" (str.++ "6" (str.++ ")" (str.++ " " ""))))))(re.++ ((_ re.loop 3 3) (re.range "0" "9"))(re.++ (re.range "-" "-") ((_ re.loop 4 4) (re.range "0" "9")))))))))))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "/" (str.++ "\u{b8}" (str.++ "\u{86}" (str.++ "\u{1b}" "")))))

(define-fun Witness2 () String (str.++ "\u{c6}" (str.++ "/" (str.++ "\u{ac}" (str.++ "\u{5c}" "")))))

(assert (= regexA (re.++ (re.range "/" "/")(re.++ (re.+ (re.union (re.range "\u{00}" ".") (re.range "0" "\u{ff}"))) (str.to_re "")))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "\u{1b}" (str.++ "." (str.++ "<" (str.++ "?" (str.++ "x" (str.++ "m" (str.++ "l" (str.++ "<" (str.++ "/" (str.++ "n" (str.++ "o" (str.++ "t" (str.++ "e" (str.++ ">" (str.++ "\u{10}" (str.++ "\u{0f}" "")))))))))))))))))

(define-fun Witness2 () String (str.++ "]" (str.++ "\u{94}" (str.++ "<" (str.++ "?" (str.++ "x" (str.++ "m" (str.++ "l" (str.++ "\u{13}" (str.++ "O" (str.++ "<" (str.++ "/" (str.++ "n" (str.++ "o" (str.++ "t" (str.++ "e" (str.++ ">" "")))))))))))))))))

(assert (= regexA (re.++ (str.to_re (str.++ "<" (str.++ "?" (str.++ "x" (str.++ "m" (str.++ "l" ""))))))(re.++ (re.* (re.union (re.range "\u{00}" "\u{09}") (re.range "\u{0b}" "\u{ff}"))) (str.to_re (str.++ "<" (str.++ "/" (str.++ "n" (str.++ "o" (str.++ "t" (str.++ "e" (str.++ ">" ""))))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "\u{a8}" (str.++ "\u{ab}" (str.++ "\u{99}" (str.++ "0" (str.++ " " (str.++ "8" (str.++ " " (str.++ "8" (str.++ "8" (str.++ "\u{a0}" (str.++ "P" (str.++ "\u{dd}" "")))))))))))))

(define-fun Witness2 () String (str.++ "\u{bf}" (str.++ "8" (str.++ "\u{a0}" (str.++ "4" (str.++ "\u{85}" (str.++ "9" (str.++ "8" (str.++ "\u{85}" (str.++ "\u{85}" (str.++ "\u{0b}" (str.++ "P" (str.++ "M" (str.++ "\u{d8}" (str.++ "\u{02}" (str.++ "\u{f1}" (str.++ "\u{b0}" "")))))))))))))))))

(assert (= regexA (re.++ ((_ re.loop 1 2) (re.range "0" "9"))(re.++ (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range ":" ":")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ ((_ re.loop 1 2) (re.range "0" "9"))(re.++ (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range ":" ":")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ ((_ re.loop 1 2) (re.range "0" "9"))(re.++ (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))) (re.union (str.to_re (str.++ "A" (str.++ "M" "")))(re.union (str.to_re (str.++ "P" (str.++ "M" ""))) (re.union (re.range "A" "A") (re.range "P" "P"))))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "\u{ce}" (str.++ "c" (str.++ " " (str.++ "\u{ff}" (str.++ "-" ""))))))

(define-fun Witness2 () String (str.++ "-" (str.++ "\u{cb}" (str.++ " " (str.++ "\u{fa}" (str.++ "\u{c5}" (str.++ "6" "")))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.++ ((_ re.loop 2 2) (re.union (re.range "-" "-")(re.union (re.range "a" "z") (re.range "\u{c0}" "\u{ff}")))) (re.* (re.union (re.range "-" "-")(re.union (re.range "a" "z") (re.range "\u{c0}" "\u{ff}")))))(re.++ (re.range " " " ") (re.++ ((_ re.loop 2 2) (re.union (re.range "'" "'")(re.union (re.range "-" "-")(re.union (re.range "a" "z") (re.range "\u{c0}" "\u{ff}"))))) (re.* (re.union (re.range "'" "'")(re.union (re.range "-" "-")(re.union (re.range "a" "z") (re.range "\u{c0}" "\u{ff}")))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "6" (str.++ "8" (str.++ "." (str.++ "8" (str.++ "." (str.++ "8" (str.++ "1" (str.++ "." (str.++ "0" (str.++ "5" (str.++ "8" ""))))))))))))

(define-fun Witness2 () String (str.++ "\u{1a}" (str.++ "0" (str.++ "8" (str.++ "9" (str.++ "." (str.++ "3" (str.++ "3" (str.++ "." (str.++ "8" (str.++ "." (str.++ "2" (str.++ "8" (str.++ "6" (str.++ "\u{19}" "")))))))))))))))

(assert (= regexA (re.union (re.++ (re.union (re.++ (re.union (str.to_re (str.++ "h" (str.++ "t" ""))) (re.range "f" "f"))(re.++ (str.to_re (str.++ "t" (str.++ "p" "")))(re.++ (re.opt (re.range "s" "s")) (str.to_re (str.++ ":" (str.++ "/" (str.++ "/" "")))))))(re.union (re.++ (str.to_re (str.++ "w" (str.++ "w" (str.++ "w" (str.++ "." ""))))) (re.+ (re.union (re.range "\u{00}" "\u{08}")(re.union (re.range "\u{0b}" "\u{0c}")(re.union (re.range "\u{0e}" "\u{1f}")(re.union (re.range "!" "'")(re.union (re.range "*" "Z")(re.union (re.range "\u{5c}" "\u{5c}") (re.range "^" "\u{ff}"))))))))) (re.++ (re.++ ((_ re.loop 3 3) (re.++ (re.opt (re.range "0" "2"))(re.++ ((_ re.loop 1 2) (re.range "0" "9")) (re.range "." "."))))(re.++ (re.opt (re.range "0" "2")) ((_ re.loop 1 2) (re.range "0" "9")))) (re.range "/" "/"))))(re.++ (re.+ (re.union (re.range "\u{00}" "\u{08}")(re.union (re.range "\u{0b}" "\u{0c}")(re.union (re.range "\u{0e}" "\u{1f}")(re.union (re.range "!" "%")(re.union (re.range "*" "+")(re.union (re.range "-" ":")(re.union (re.range "<" "Z")(re.union (re.range "\u{5c}" "\u{5c}")(re.union (re.range "^" "f")(re.union (re.range "h" "k")(re.union (re.range "m" "n")(re.union (re.range "p" "p")(re.union (re.range "r" "s") (re.range "v" "\u{ff}"))))))))))))))) (re.union (re.range "\u{00}" "\u{08}")(re.union (re.range "\u{0b}" "\u{0c}")(re.union (re.range "\u{0e}" "\u{1f}")(re.union (re.range "!" "%")(re.union (re.range "*" "+")(re.union (re.range "-" "-")(re.union (re.range "/" ":")(re.union (re.range "<" "Z")(re.union (re.range "\u{5c}" "\u{5c}")(re.union (re.range "^" "f")(re.union (re.range "h" "k")(re.union (re.range "m" "n")(re.union (re.range "p" "p")(re.union (re.range "r" "s") (re.range "v" "\u{ff}"))))))))))))))))) (re.++ ((_ re.loop 3 3) (re.++ (re.opt (re.range "0" "2"))(re.++ ((_ re.loop 1 2) (re.range "0" "9")) (re.range "." "."))))(re.++ (re.opt (re.range "0" "2")) ((_ re.loop 1 2) (re.range "0" "9")))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "0" (str.++ "1" (str.++ "3" (str.++ "8" (str.++ "9" (str.++ "6" (str.++ "6" (str.++ "9" (str.++ "2" (str.++ "5" "")))))))))))

(define-fun Witness2 () String (str.++ "0" (str.++ "1" (str.++ "5" (str.++ "3" (str.++ "7" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "7" (str.++ "6" (str.++ "\u{87}" (str.++ "\u{c8}" "")))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (str.to_re (str.++ "0" (str.++ "1" ""))) ((_ re.loop 8 8) (re.range "0" "9"))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "4" (str.++ "6" (str.++ "-" (str.++ "2" (str.++ "j" (str.++ "o" (str.++ " " (str.++ "\u{e8}" (str.++ "\u{89}" ""))))))))))

(define-fun Witness2 () String (str.++ "-" (str.++ "3" (str.++ "4" (str.++ "9" (str.++ "-" (str.++ "2" (str.++ "\u{0c}" (str.++ "d" "")))))))))

(assert (= regexA (re.++ (re.opt (re.+ (re.range "0" "9")))(re.++ (re.opt (re.range "-" "-"))(re.++ (re.+ (re.range "0" "9"))(re.++ (re.range "-" "-") (re.+ (re.range "0" "9"))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "." ""))

(define-fun Witness2 () String (str.++ "." (str.++ "\u{95}" "")))

(assert (= regexA (re.++ (str.to_re "") (re.range "." "."))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "9" (str.++ ":" (str.++ "/" (str.++ "\u{ac}" (str.++ "\u{b5}" (str.++ "/" "")))))))

(define-fun Witness2 () String (str.++ "\u{5c}" (str.++ "\u{5c}" (str.++ "\u{c2}" (str.++ "/" (str.++ "\u{0d}" (str.++ "\u{05}" (str.++ ")" (str.++ "f" "")))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.opt (re.++ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))) (re.range ":" ":")))(re.++ (re.union (re.range "/" "/") (str.to_re (str.++ "\u{5c}" (str.++ "\u{5c}" ""))))(re.++ (re.* (re.union (re.range "\u{00}" ".")(re.union (re.range "0" "[")(re.union (re.range "]" "{") (re.range "}" "\u{ff}"))))) (re.union (re.range "/" "/") (re.range "\u{5c}" "\u{5c}"))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "k" (str.++ "<" (str.++ "s" (str.++ "c" (str.++ "r" (str.++ "i" (str.++ "p" (str.++ "t" (str.++ "|" (str.++ "\u{12}" (str.++ "1" (str.++ ">" (str.++ "\u{80}" (str.++ "<" (str.++ "/" (str.++ "s" (str.++ "c" (str.++ "r" (str.++ "i" (str.++ "p" (str.++ "t" (str.++ ">" (str.++ "\u{ab}" ""))))))))))))))))))))))))

(define-fun Witness2 () String (str.++ "\u{a4}" (str.++ "<" (str.++ "s" (str.++ "c" (str.++ "r" (str.++ "i" (str.++ "p" (str.++ "t" (str.++ "\u{fa}" (str.++ "\u{cd}" (str.++ "?" (str.++ "\u{ef}" (str.++ ">" (str.++ "\u{e2}" (str.++ "\u{9b}" (str.++ "<" (str.++ "/" (str.++ "s" (str.++ "c" (str.++ "r" (str.++ "i" (str.++ "p" (str.++ "t" (str.++ ">" "")))))))))))))))))))))))))

(assert (= regexA (re.++ (str.to_re (str.++ "<" (str.++ "s" (str.++ "c" (str.++ "r" (str.++ "i" (str.++ "p" (str.++ "t" ""))))))))(re.++ (re.* (re.union (re.range "\u{00}" "=") (re.range "?" "\u{ff}")))(re.++ (re.range ">" ">")(re.++ (re.* (re.range "\u{00}" "\u{ff}")) (str.to_re (str.++ "<" (str.++ "/" (str.++ "s" (str.++ "c" (str.++ "r" (str.++ "i" (str.++ "p" (str.++ "t" (str.++ ">" ""))))))))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "!" (str.++ "5" (str.++ "<" (str.++ "/" (str.++ "a" (str.++ ">" (str.++ "\u{d9}" (str.++ "\u{1a}" (str.++ "\u{ea}" (str.++ "V" (str.++ "\u{83}" ""))))))))))))

(define-fun Witness2 () String (str.++ "4" (str.++ "2" (str.++ "<" (str.++ "/" (str.++ "a" (str.++ ">" "")))))))

(assert (= regexA (re.++ (re.+ (re.range "0" "9")) (str.to_re (str.++ "<" (str.++ "/" (str.++ "a" (str.++ ">" ""))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "\u{0c}" (str.++ "\u{85}" "")))

(define-fun Witness2 () String (str.++ "\u{85}" (str.++ "8" "")))

(assert (= regexA (re.union (re.++ (str.to_re "") (re.+ (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))) (re.++ (re.+ (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))) (str.to_re "")))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "\u{b2}" (str.++ "q" (str.++ "\u{b3}" (str.++ "\u{e5}" (str.++ "x" (str.++ "B" (str.++ "\u{9a}" (str.++ "\u{a6}" (str.++ "'" (str.++ "\u{86}" (str.++ "v" (str.++ "c" (str.++ "l" (str.++ "i" (str.++ "p" (str.++ "v" (str.++ "n" ""))))))))))))))))))

(define-fun Witness2 () String (str.++ "c" (str.++ "l" (str.++ "i" (str.++ "p" (str.++ "v" (str.++ "n" (str.++ "\u{5c}" ""))))))))

(assert (= regexA (str.to_re (str.++ "c" (str.++ "l" (str.++ "i" (str.++ "p" (str.++ "v" (str.++ "n" "")))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "v" (str.++ "\u{a0}" (str.++ "w" (str.++ "h" (str.++ "o" (str.++ "\u{a0}" (str.++ "\u{7f}" ""))))))))

(define-fun Witness2 () String (str.++ " " (str.++ "i" (str.++ "n" (str.++ " " (str.++ "\u{cf}" ""))))))

(assert (= regexA (re.union (re.++ (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))(re.++ (re.range "a" "a") (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))))(re.union (re.++ (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))(re.++ (str.to_re (str.++ "a" (str.++ "b" (str.++ "o" (str.++ "u" (str.++ "t" "")))))) (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))))(re.union (re.++ (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))(re.++ (str.to_re (str.++ "a" (str.++ "n" ""))) (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))))(re.union (re.++ (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))(re.++ (str.to_re (str.++ "a" (str.++ "r" (str.++ "e" "")))) (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))))(re.union (re.++ (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))(re.++ (str.to_re (str.++ "a" (str.++ "s" ""))) (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))))(re.union (re.++ (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))(re.++ (str.to_re (str.++ "a" (str.++ "t" ""))) (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))))(re.union (re.++ (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))(re.++ (str.to_re (str.++ "b" (str.++ "e" ""))) (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))))(re.union (re.++ (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))(re.++ (str.to_re (str.++ "b" (str.++ "y" ""))) (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))))(re.union (re.++ (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))(re.++ (str.to_re (str.++ "f" (str.++ "o" (str.++ "r" "")))) (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))))(re.union (re.++ (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))(re.++ (str.to_re (str.++ "f" (str.++ "r" (str.++ "o" (str.++ "m" ""))))) (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))))(re.union (re.++ (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))(re.++ (str.to_re (str.++ "h" (str.++ "o" (str.++ "w" "")))) (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))))(re.union (re.++ (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))(re.++ (str.to_re (str.++ "i" (str.++ "n" ""))) (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))))(re.union (re.++ (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))(re.++ (str.to_re (str.++ "i" (str.++ "s" ""))) (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))))(re.union (re.++ (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))(re.++ (str.to_re (str.++ "i" (str.++ "t" ""))) (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))))(re.union (re.++ (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))(re.++ (str.to_re (str.++ "o" (str.++ "f" ""))) (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))))(re.union (re.++ (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))(re.++ (str.to_re (str.++ "o" (str.++ "n" ""))) (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))))(re.union (re.++ (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))(re.++ (str.to_re (str.++ "o" (str.++ "r" ""))) (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))))(re.union (re.++ (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))(re.++ (str.to_re (str.++ "t" (str.++ "h" (str.++ "a" (str.++ "t" ""))))) (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))))(re.union (re.++ (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))(re.++ (str.to_re (str.++ "t" (str.++ "h" (str.++ "e" "")))) (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))))(re.union (re.++ (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))(re.++ (str.to_re (str.++ "t" (str.++ "h" (str.++ "i" (str.++ "s" ""))))) (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))))(re.union (re.++ (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))(re.++ (str.to_re (str.++ "t" (str.++ "o" ""))) (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))))(re.union (re.++ (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))(re.++ (str.to_re (str.++ "w" (str.++ "a" (str.++ "s" "")))) (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))))(re.union (re.++ (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))(re.++ (str.to_re (str.++ "w" (str.++ "h" (str.++ "a" (str.++ "t" ""))))) (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))))(re.union (re.++ (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))(re.++ (str.to_re (str.++ "w" (str.++ "h" (str.++ "e" (str.++ "n" ""))))) (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))))(re.union (re.++ (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))(re.++ (str.to_re (str.++ "w" (str.++ "h" (str.++ "e" (str.++ "r" (str.++ "e" "")))))) (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))))(re.union (re.++ (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))(re.++ (str.to_re (str.++ "w" (str.++ "h" (str.++ "o" "")))) (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))))(re.union (re.++ (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))(re.++ (str.to_re (str.++ "w" (str.++ "i" (str.++ "l" (str.++ "l" ""))))) (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))))(re.union (re.++ (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))(re.++ (str.to_re (str.++ "w" (str.++ "i" (str.++ "t" (str.++ "h" ""))))) (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))))(re.union (re.++ (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))(re.++ (str.to_re (str.++ "t" (str.++ "h" (str.++ "e" "")))) (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))) (re.++ (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))(re.++ (str.to_re (str.++ "w" (str.++ "w" (str.++ "w" "")))) (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))))))))))))))))))))))))))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "\u{e4}" (str.++ "," (str.++ "\u{d3}" (str.++ "-" (str.++ "4" (str.++ "." (str.++ "8" (str.++ "8" (str.++ "9" (str.++ "8" (str.++ " " ""))))))))))))

(define-fun Witness2 () String (str.++ "6" (str.++ "E" (str.++ "+" (str.++ "3" (str.++ "7" ""))))))

(assert (= regexA (re.++ (re.++ (re.++ (re.opt (re.union (re.range "+" "+") (re.range "-" "-"))) (re.union (re.++ (re.* (re.range "0" "9"))(re.++ (re.range "." ".") (re.+ (re.range "0" "9")))) (re.+ (re.range "0" "9")))) (re.opt (re.++ (re.range "E" "E")(re.++ (re.opt (re.union (re.range "+" "+") (re.range "-" "-"))) (re.+ (re.range "0" "9")))))) (re.opt (re.++ (re.range " " " ")(re.++ (re.opt (re.union (re.range "G" "G")(re.union (re.range "M" "M")(re.union (re.range "P" "P")(re.union (re.range "T" "T")(re.union (re.range "f" "f")(re.union (re.range "k" "k")(re.union (re.range "m" "n")(re.union (re.range "p" "p") (re.range "u" "u")))))))))) (re.opt (re.+ (re.union (re.range "A" "Z") (re.range "a" "z"))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "\u{b9}" (str.++ "\u{8e}" (str.++ "s" (str.++ "r" (str.++ "c" (str.++ "=" (str.++ "-" (str.++ "\u{a2}" (str.++ "p" (str.++ "n" (str.++ "g" (str.++ "'" (str.++ "0" (str.++ "\u{f3}" "")))))))))))))))

(define-fun Witness2 () String (str.++ "o" (str.++ "s" (str.++ "r" (str.++ "c" (str.++ "=" (str.++ "'" (str.++ "\u{91}" (str.++ "\u{ab}" (str.++ "\u{f1}" (str.++ "j" (str.++ "p" (str.++ "g" "")))))))))))))

(assert (= regexA (re.++ (str.to_re (str.++ "s" (str.++ "r" (str.++ "c" (str.++ "=" "")))))(re.++ (re.opt (re.union (re.range "\u{22}" "\u{22}") (re.range "'" "'")))(re.++ (re.++ (re.* (re.union (re.range "\u{00}" "=") (re.range "?" "\u{ff}")))(re.++ (re.union (re.range "\u{00}" ".") (re.range "0" "\u{ff}"))(re.++ (re.union (re.range "\u{00}" "\u{09}") (re.range "\u{0b}" "\u{ff}")) (re.union (str.to_re (str.++ "j" (str.++ "p" (str.++ "g" ""))))(re.union (str.to_re (str.++ "b" (str.++ "m" (str.++ "p" ""))))(re.union (str.to_re (str.++ "g" (str.++ "i" (str.++ "f" "")))) (str.to_re (str.++ "p" (str.++ "n" (str.++ "g" "")))))))))) (re.opt (re.union (re.range "\u{22}" "\u{22}") (re.range "'" "'"))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "\u{08}" (str.++ "\u{e2}" (str.++ "G" (str.++ "-" (str.++ "I" (str.++ "." (str.++ "+" (str.++ "@" (str.++ "X" (str.++ "." (str.++ "n" (str.++ "a" (str.++ "m" (str.++ "e" (str.++ "@" ""))))))))))))))))

(define-fun Witness2 () String (str.++ "+" (str.++ "X" (str.++ "." (str.++ "-" (str.++ "+" (str.++ "@" (str.++ "l" (str.++ "." (str.++ "a" (str.++ "e" (str.++ "r" (str.++ "o" (str.++ ">" (str.++ "\u{ba}" "")))))))))))))))

(assert (= regexA (re.++ (re.++ (re.opt (re.range "#" "#"))(re.++ (re.+ (re.union (re.range "+" "+")(re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_") (re.range "a" "z"))))))) (re.* (re.++ (re.range "." ".") (re.+ (re.union (re.range "+" "+")(re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_") (re.range "a" "z")))))))))))(re.++ (re.range "@" "@") (re.++ (re.+ (re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))))(re.++ (re.* (re.++ (re.range "." ".") (re.+ (re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))))))(re.++ (re.range "." ".") (re.union ((_ re.loop 1 3) (re.range "0" "9"))(re.union ((_ re.loop 2 3) (re.union (re.range "A" "Z") (re.range "a" "z"))) (re.union (str.to_re (str.++ "a" (str.++ "e" (str.++ "r" (str.++ "o" "")))))(re.union (str.to_re (str.++ "c" (str.++ "o" (str.++ "o" (str.++ "p" "")))))(re.union (str.to_re (str.++ "i" (str.++ "n" (str.++ "f" (str.++ "o" "")))))(re.union (str.to_re (str.++ "m" (str.++ "u" (str.++ "s" (str.++ "e" (str.++ "u" (str.++ "m" ""))))))) (str.to_re (str.++ "n" (str.++ "a" (str.++ "m" (str.++ "e" ""))))))))))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "1" (str.++ "4" (str.++ "8" (str.++ "8" (str.++ "\u{a0}" (str.++ "x" (str.++ "J" (str.++ "s" "")))))))))

(define-fun Witness2 () String (str.++ "5" (str.++ "4" (str.++ "9" (str.++ "9" (str.++ "\u{0c}" (str.++ "\u{85}" (str.++ " " (str.++ "X" (str.++ "L" (str.++ "\u{02}" (str.++ "%" ""))))))))))))

(assert (= regexA (re.++ ((_ re.loop 4 4) (re.range "0" "9"))(re.++ (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))) ((_ re.loop 2 2) (re.union (re.range "A" "Z") (re.range "a" "z")))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "I" (str.++ "\u{f0}" (str.++ "\u{e4}" (str.++ "\u{ed}" (str.++ "\u{09}" (str.++ "o" (str.++ "\u{d7}" (str.++ "\u{e8}" (str.++ "'" (str.++ "\u{04}" "")))))))))))

(define-fun Witness2 () String (str.++ "E" (str.++ "\u{e1}" (str.++ "\u{e1}" (str.++ "'" (str.++ "'" (str.++ "\u{a0}" (str.++ "x" (str.++ "\u{e3}" (str.++ "\u{e9}" (str.++ "\u{ee}" (str.++ "'" (str.++ "\u{a1}" "")))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.union (re.range "A" "Z") (re.range "\u{c0}" "\u{dc}"))(re.++ (re.+ (re.union (re.range "'" "'")(re.union (re.range "a" "z") (re.range "\u{e0}" "\u{fc}"))))(re.++ (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))(re.++ (re.+ (re.union (re.range "A" "Z")(re.union (re.range "a" "z")(re.union (re.range "\u{c0}" "\u{dc}") (re.range "\u{e0}" "\u{fc}"))))) (re.union (re.union (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "'" "'")(re.union (re.range "." ".")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))) (re.+ (re.union (re.range "'" "'")(re.union (re.range "a" "z") (re.range "\u{e0}" "\u{fc}"))))) (re.++ (re.+ (re.union (re.range "'" "'")(re.union (re.range "a" "z") (re.range "\u{e0}" "\u{fc}")))) (re.+ (re.union (re.range "'" "'")(re.union (re.range "A" "Z")(re.union (re.range "a" "z")(re.union (re.range "\u{c0}" "\u{dc}") (re.range "\u{e0}" "\u{fc}")))))))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "\u{e9}" (str.++ "\u{ae}" "")))

(define-fun Witness2 () String (str.++ "\u{13}" (str.++ "\u{05}" (str.++ "6" (str.++ "\u{ae}" "")))))

(assert (= regexA (re.range "\u{ae}" "\u{ae}")))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "J" (str.++ ":" (str.++ "\u{5c}" (str.++ ">" "")))))

(define-fun Witness2 () String (str.++ "O" (str.++ ":" (str.++ "\u{5c}" (str.++ "\u{87}" (str.++ ">" (str.++ ";" (str.++ "9" (str.++ "\u{d5}" "")))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.union (re.range "A" "Z") (re.range "a" "z"))(re.++ (re.range ":" ":")(re.++ (re.union (re.range "\u{5c}" "\u{5c}") (re.+ (re.++ (re.range "\u{5c}" "\u{5c}") (re.+ (re.union (re.range "\u{00}" "\u{08}")(re.union (re.range "\u{0e}" "\u{1f}")(re.union (re.range "!" "!")(re.union (re.range "#" ")")(re.union (re.range "+" ".")(re.union (re.range "0" "9")(re.union (re.range ";" ";")(re.union (re.range "=" "=")(re.union (re.range "?" "[")(re.union (re.range "]" "{")(re.union (re.range "}" "\u{84}")(re.union (re.range "\u{86}" "\u{9f}") (re.range "\u{a1}" "\u{ff}"))))))))))))))))) (re.range ">" ">")))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "3" (str.++ "9" (str.++ "9" (str.++ "9" (str.++ "-" (str.++ "2" (str.++ "8" (str.++ "9" (str.++ "9" (str.++ "1" (str.++ "6" (str.++ "-" (str.++ "0" (str.++ "4" (str.++ "9" (str.++ "3" (str.++ "7" (str.++ "\u{d8}" "")))))))))))))))))))

(define-fun Witness2 () String (str.++ "3" (str.++ "8" (str.++ "7" (str.++ "0" (str.++ "9" (str.++ "9" (str.++ "3" (str.++ "9" (str.++ "1" (str.++ "8" (str.++ "9" (str.++ "9" (str.++ "8" (str.++ "8" (str.++ "3" ""))))))))))))))))

(assert (= regexA (re.union (re.union (re.++ (str.to_re "")(re.++ (re.range "4" "5")(re.++ ((_ re.loop 3 3) (re.range "0" "9"))(re.++ (re.opt (re.range "-" "-"))(re.++ ((_ re.loop 4 4) (re.range "0" "9"))(re.++ (re.opt (re.range "-" "-"))(re.++ ((_ re.loop 4 4) (re.range "0" "9"))(re.++ (re.opt (re.range "-" "-")) ((_ re.loop 4 4) (re.range "0" "9")))))))))) (re.++ (re.range "4" "5") ((_ re.loop 15 15) (re.range "0" "9"))))(re.union (re.union (re.++ (str.to_re "")(re.++ (str.to_re (str.++ "6" (str.++ "0" (str.++ "1" (str.++ "1" "")))))(re.++ (re.opt (re.range "-" "-"))(re.++ ((_ re.loop 4 4) (re.range "0" "9"))(re.++ (re.opt (re.range "-" "-"))(re.++ ((_ re.loop 4 4) (re.range "0" "9"))(re.++ (re.opt (re.range "-" "-")) ((_ re.loop 4 4) (re.range "0" "9"))))))))) (re.++ (str.to_re (str.++ "6" (str.++ "0" (str.++ "1" (str.++ "1" "")))))(re.++ (re.opt (re.range "-" "-")) ((_ re.loop 12 12) (re.range "0" "9"))))) (re.union (re.++ (str.to_re "")(re.++ (re.++ (re.range "3" "3") ((_ re.loop 3 3) (re.range "0" "9")))(re.++ (re.range "-" "-")(re.++ ((_ re.loop 6 6) (re.range "0" "9"))(re.++ (re.range "-" "-") ((_ re.loop 5 5) (re.range "0" "9"))))))) (re.++ (str.to_re "") (re.++ (re.range "3" "3") ((_ re.loop 14 14) (re.range "0" "9")))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "h" (str.++ "m" (str.++ "\u{87}" (str.++ "1" (str.++ "." (str.++ "8" (str.++ "E" (str.++ "+" (str.++ "4" (str.++ "1" "")))))))))))

(define-fun Witness2 () String (str.++ "\u{8e}" (str.++ "-" (str.++ "7" (str.++ "." (str.++ "8" (str.++ "E" (str.++ "-" (str.++ "2" (str.++ "9" ""))))))))))

(assert (= regexA (re.++ (re.opt (re.union (re.range "+" "+") (re.range "-" "-")))(re.++ (re.range "0" "9")(re.++ (re.opt (re.++ (re.range "." ".") (re.+ (re.range "0" "9"))))(re.++ (re.union (re.range "E" "E") (re.range "e" "e"))(re.++ (re.opt (re.union (re.range "+" "+") (re.range "-" "-"))) (re.+ (re.range "0" "9")))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "0" (str.++ "9" (str.++ "/" (str.++ "2" (str.++ "8" (str.++ "/" (str.++ "1" (str.++ "9" (str.++ "2" (str.++ "3" "")))))))))))

(define-fun Witness2 () String (str.++ "0" (str.++ "2" (str.++ "/" (str.++ "2" (str.++ "9" (str.++ "/" (str.++ "2" (str.++ "1" (str.++ "5" (str.++ "5" (str.++ "q" (str.++ "\u{9d}" (str.++ "\u{f2}" ""))))))))))))))

(assert (= regexA (re.++ (re.union (re.++ (re.union (str.to_re (str.++ "0" (str.++ "4" "")))(re.union (str.to_re (str.++ "0" (str.++ "6" "")))(re.union (str.to_re (str.++ "0" (str.++ "9" ""))) (str.to_re (str.++ "1" (str.++ "1" ""))))))(re.++ (re.range "/" "/") (re.union (re.++ (re.range "0" "2") (re.range "0" "9")) (str.to_re (str.++ "3" (str.++ "0" ""))))))(re.union (re.++ (re.union (re.++ (re.range "0" "0") (re.union (re.range "1" "1")(re.union (re.range "3" "3")(re.union (re.range "5" "5") (re.range "7" "9"))))) (re.++ (re.range "1" "1") (re.union (re.range "0" "0") (re.range "2" "2"))))(re.++ (re.range "/" "/") (re.union (re.++ (re.range "0" "2") (re.range "0" "9"))(re.union (str.to_re (str.++ "3" (str.++ "0" ""))) (str.to_re (str.++ "3" (str.++ "1" ""))))))) (re.++ (str.to_re (str.++ "0" (str.++ "2" (str.++ "/" ""))))(re.++ (re.range "0" "2") (re.range "0" "9")))))(re.++ (re.range "/" "/")(re.++ (re.union (str.to_re (str.++ "1" (str.++ "9" "")))(re.union (str.to_re (str.++ "2" (str.++ "0" ""))) (str.to_re (str.++ "2" (str.++ "1" "")))))(re.++ (re.range "0" "9") (re.range "0" "9")))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "\u{e9}" (str.++ "\u{96}" (str.++ "&" (str.++ "l" (str.++ "t" (str.++ ";" (str.++ "a" (str.++ "s" (str.++ "p" (str.++ ":" (str.++ "r" (str.++ "e" (str.++ "q" (str.++ "u" (str.++ "i" (str.++ "r" (str.++ "e" (str.++ "d" (str.++ "f" (str.++ "i" (str.++ "e" (str.++ "l" (str.++ "d" (str.++ "v" (str.++ "a" (str.++ "l" (str.++ "i" (str.++ "d" (str.++ "a" (str.++ "t" (str.++ "o" (str.++ "r" (str.++ "\u{85}" (str.++ " " (str.++ "\u{c7}" (str.++ " " (str.++ "\u{a0}" (str.++ "=" (str.++ "\u{0d}" (str.++ "\u{a0}" (str.++ "&" (str.++ "q" (str.++ "u" (str.++ "o" (str.++ "t" (str.++ ";" (str.++ "\u{85}" (str.++ "9" (str.++ "\u{85}" (str.++ "\u{0b}" (str.++ "&" (str.++ "q" (str.++ "u" (str.++ "o" (str.++ "t" (str.++ ";" (str.++ " " (str.++ "\u{09}" (str.++ "\u{85}" (str.++ "\u{a0}" (str.++ "\u{09}" (str.++ " " (str.++ " " (str.++ "&" (str.++ "g" (str.++ "t" (str.++ ";" (str.++ " " (str.++ "\u{0d}" (str.++ "\u{0c}" (str.++ "&" (str.++ "l" (str.++ "t" (str.++ ";" (str.++ "/" (str.++ "a" (str.++ "s" (str.++ "p" (str.++ ":" (str.++ "r" (str.++ "e" (str.++ "q" (str.++ "u" (str.++ "i" (str.++ "r" (str.++ "e" (str.++ "d" (str.++ "f" (str.++ "i" (str.++ "e" (str.++ "l" (str.++ "d" (str.++ "v" (str.++ "a" (str.++ "l" (str.++ "i" (str.++ "d" (str.++ "a" (str.++ "t" (str.++ "o" (str.++ "r" (str.++ "&" (str.++ "g" (str.++ "t" (str.++ ";" ""))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(define-fun Witness2 () String (str.++ "&" (str.++ "l" (str.++ "t" (str.++ ";" (str.++ "a" (str.++ "s" (str.++ "p" (str.++ ":" (str.++ "r" (str.++ "e" (str.++ "q" (str.++ "u" (str.++ "i" (str.++ "r" (str.++ "e" (str.++ "d" (str.++ "f" (str.++ "i" (str.++ "e" (str.++ "l" (str.++ "d" (str.++ "v" (str.++ "a" (str.++ "l" (str.++ "i" (str.++ "d" (str.++ "a" (str.++ "t" (str.++ "o" (str.++ "r" (str.++ "\u{85}" (str.++ "\u{0d}" (str.++ "I" (str.++ "0" (str.++ "2" (str.++ "2" (str.++ "=" (str.++ "&" (str.++ "q" (str.++ "u" (str.++ "o" (str.++ "t" (str.++ ";" (str.++ "\u{a0}" (str.++ "\u{85}" (str.++ "\u{0b}" (str.++ "Y" (str.++ "\u{09}" (str.++ "&" (str.++ "q" (str.++ "u" (str.++ "o" (str.++ "t" (str.++ "\u{0c}" (str.++ " " (str.++ "\u{85}" (str.++ "\u{ba}" (str.++ "\u{aa}" (str.++ "\u{85}" (str.++ "=" (str.++ "\u{0d}" (str.++ "\u{85}" (str.++ " " (str.++ "\u{0d}" (str.++ "&" (str.++ "q" (str.++ "u" (str.++ "o" (str.++ "t" (str.++ ";" (str.++ "\u{09}" (str.++ "\u{a0}" (str.++ "\u{0c}" (str.++ "\u{b5}" (str.++ "4" (str.++ " " (str.++ " " (str.++ "&" (str.++ "q" (str.++ "u" (str.++ "o" (str.++ "t" (str.++ "\u{85}" (str.++ " " (str.++ "\u{a0}" (str.++ "&" (str.++ "g" (str.++ "t" (str.++ ";" (str.++ "\u{85}" (str.++ "&" (str.++ "l" (str.++ "t" (str.++ ";" (str.++ "/" (str.++ "a" (str.++ "s" (str.++ "p" (str.++ ":" (str.++ "r" (str.++ "e" (str.++ "q" (str.++ "u" (str.++ "i" (str.++ "r" (str.++ "e" (str.++ "d" (str.++ "f" (str.++ "i" (str.++ "e" (str.++ "l" (str.++ "d" (str.++ "v" (str.++ "a" (str.++ "l" (str.++ "i" (str.++ "d" (str.++ "a" (str.++ "t" (str.++ "o" (str.++ "r" (str.++ "&" (str.++ "g" (str.++ "t" (str.++ ";" ""))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(assert (= regexA (re.++ (str.to_re (str.++ "&" (str.++ "l" (str.++ "t" (str.++ ";" (str.++ "a" (str.++ "s" (str.++ "p" (str.++ ":" (str.++ "r" (str.++ "e" (str.++ "q" (str.++ "u" (str.++ "i" (str.++ "r" (str.++ "e" (str.++ "d" (str.++ "f" (str.++ "i" (str.++ "e" (str.++ "l" (str.++ "d" (str.++ "v" (str.++ "a" (str.++ "l" (str.++ "i" (str.++ "d" (str.++ "a" (str.++ "t" (str.++ "o" (str.++ "r" "")))))))))))))))))))))))))))))))(re.++ (re.+ (re.++ (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))(re.++ (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (re.range "=" "=")(re.++ (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (str.to_re (str.++ "&" (str.++ "q" (str.++ "u" (str.++ "o" (str.++ "t" ""))))))(re.++ (re.opt (re.range ";" ";"))(re.++ (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))(re.++ (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (str.to_re (str.++ "&" (str.++ "q" (str.++ "u" (str.++ "o" (str.++ "t" ""))))))(re.++ (re.opt (re.range ";" ";")) (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))))))))))))))))(re.++ (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (str.to_re (str.++ "&" (str.++ "g" (str.++ "t" (str.++ ";" "")))))(re.++ (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))) (str.to_re (str.++ "&" (str.++ "l" (str.++ "t" (str.++ ";" (str.++ "/" (str.++ "a" (str.++ "s" (str.++ "p" (str.++ ":" (str.++ "r" (str.++ "e" (str.++ "q" (str.++ "u" (str.++ "i" (str.++ "r" (str.++ "e" (str.++ "d" (str.++ "f" (str.++ "i" (str.++ "e" (str.++ "l" (str.++ "d" (str.++ "v" (str.++ "a" (str.++ "l" (str.++ "i" (str.++ "d" (str.++ "a" (str.++ "t" (str.++ "o" (str.++ "r" (str.++ "&" (str.++ "g" (str.++ "t" (str.++ ";" "")))))))))))))))))))))))))))))))))))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "P" (str.++ "@" (str.++ "9" (str.++ "9" (str.++ "\u{5c}" (str.++ "X" (str.++ "4" (str.++ "\u{5c}" (str.++ "\u{1f}" (str.++ "9" (str.++ "Q" (str.++ "\u{5c}" (str.++ "(" (str.++ "c" (str.++ "o" (str.++ "m" "")))))))))))))))))

(define-fun Witness2 () String (str.++ "\u{f4}" (str.++ "\u{8d}" (str.++ "4" (str.++ "@" (str.++ "y" (str.++ "\u{5c}" (str.++ "|" (str.++ "Z" (str.++ "\u{5c}" (str.++ "t" (str.++ "n" (str.++ "\u{5c}" (str.++ "e" (str.++ "3" (str.++ "d" (str.++ "8" (str.++ "g" (str.++ "\u{5c}" (str.++ "\u{8b}" (str.++ "b" (str.++ "\u{5c}" (str.++ "\u{b3}" (str.++ "c" (str.++ "o" (str.++ "m" (str.++ "W" "")))))))))))))))))))))))))))

(assert (= regexA (re.++ (re.+ (re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "\u{5c}" "\u{5c}")(re.union (re.range "_" "_") (re.range "a" "z")))))))(re.++ (re.range "@" "@")(re.++ (re.+ (re.++ (re.+ (re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "\u{5c}" "\u{5c}")(re.union (re.range "_" "_") (re.range "a" "z")))))))(re.++ (re.range "\u{5c}" "\u{5c}") (re.union (re.range "\u{00}" "\u{09}") (re.range "\u{0b}" "\u{ff}"))))) (str.to_re (str.++ "c" (str.++ "o" (str.++ "m" "")))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "\u{8a}" (str.++ "h" (str.++ "t" (str.++ "t" (str.++ "p" (str.++ ":" (str.++ "/" (str.++ "/" (str.++ "O" (str.++ "\u{e3}" (str.++ "z" (str.++ "." (str.++ "\u{e9}" (str.++ "x" (str.++ "." (str.++ "-" "")))))))))))))))))

(define-fun Witness2 () String (str.++ "\u{a8}" (str.++ "f" (str.++ "t" (str.++ "p" (str.++ ":" (str.++ "/" (str.++ "/" (str.++ "\u{c1}" (str.++ "." (str.++ "-" "")))))))))))

(assert (= regexA (re.++ (re.union (str.to_re (str.++ "h" (str.++ "t" (str.++ "t" (str.++ "p" "")))))(re.union (str.to_re (str.++ "f" (str.++ "t" (str.++ "p" "")))) (str.to_re (str.++ "h" (str.++ "t" (str.++ "t" (str.++ "p" (str.++ "s" ""))))))))(re.++ (str.to_re (str.++ ":" (str.++ "/" (str.++ "/" ""))))(re.++ (re.+ (re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))))(re.++ (re.+ (re.++ (re.range "." ".") (re.+ (re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))))) (re.opt (re.++ (re.* (re.union (re.range "#" "#")(re.union (re.range "%" "&")(re.union (re.range "+" ";")(re.union (re.range "=" "=")(re.union (re.range "?" "Z")(re.union (re.range "^" "_")(re.union (re.range "a" "z")(re.union (re.range "~" "~")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))))))) (re.union (re.range "#" "#")(re.union (re.range "%" "&")(re.union (re.range "+" "+")(re.union (re.range "-" "-")(re.union (re.range "/" "9")(re.union (re.range ";" ";")(re.union (re.range "=" "=")(re.union (re.range "?" "Z")(re.union (re.range "^" "_")(re.union (re.range "a" "z")(re.union (re.range "~" "~")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))))))))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "\u{a0}" (str.++ "\u{8b}" (str.++ "\u{0a}" ""))))

(define-fun Witness2 () String (str.++ "\u{0c}" (str.++ "\u{af}" (str.++ "\u{c1}" (str.++ "\u{0a}" (str.++ "X" (str.++ "m" "")))))))

(assert (= regexA (re.++ (re.union (re.++ (str.to_re "")(re.++ (re.+ (re.union (re.range "\u{00}" "\u{08}")(re.union (re.range "\u{0e}" "\u{1f}")(re.union (re.range "!" "\u{84}")(re.union (re.range "\u{86}" "\u{9f}") (re.range "\u{a1}" "\u{ff}")))))) (re.range ":" ":"))) (re.++ (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))) (str.to_re "")))(re.++ (re.* (re.union (re.range "\u{00}" "\u{09}") (re.range "\u{0b}" "\u{ff}"))) (re.range "\u{0a}" "\u{0a}")))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "d" (str.++ "f" "")))

(define-fun Witness2 () String (str.++ "L" (str.++ "\u{83}" (str.++ "f" (str.++ "\u{c7}" (str.++ "d" (str.++ "f" (str.++ "`" ""))))))))

(assert (= regexA (str.to_re (str.++ "d" (str.++ "f" "")))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "\u{c3}" (str.++ "-" (str.++ "9" (str.++ " " "")))))

(define-fun Witness2 () String (str.++ " " (str.++ "8" (str.++ "-" (str.++ "\u{1f}" (str.++ "\u{bc}" (str.++ "2" "")))))))

(assert (= regexA (re.++ (re.union (re.++ (re.range "-" "-")(re.++ (re.+ (re.range "0" "9")) (re.range " " " ")))(re.union (re.++ (re.range " " " ")(re.++ (re.+ (re.range "0" "9")) (re.range " " " ")))(re.union (re.++ (re.range " " " ")(re.++ (re.+ (re.range "0" "9"))(re.++ (re.range "-" "-")(re.++ (re.+ (re.range "0" "9")) (re.range " " " "))))) (re.++ (re.range " " " ")(re.++ (re.+ (re.range "0" "9")) (re.range "-" "-")))))) (re.* (re.++ (re.range "," ",") (re.union (re.++ (re.range "-" "-")(re.++ (re.+ (re.range "0" "9")) (re.range " " " ")))(re.union (re.++ (re.range " " " ")(re.++ (re.+ (re.range "0" "9")) (re.range " " " ")))(re.union (re.++ (re.range " " " ")(re.++ (re.+ (re.range "0" "9"))(re.++ (re.range "-" "-")(re.++ (re.+ (re.range "0" "9")) (re.range " " " "))))) (re.++ (re.range " " " ") (re.+ (re.range "0" "9")))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "+" (str.++ "=" (str.++ "\u{aa}" (str.++ "8" (str.++ "a" (str.++ "y" (str.++ "\u{be}" (str.++ "3" "")))))))))

(define-fun Witness2 () String (str.++ "\u{ff}" (str.++ "=" "")))

(assert (= regexA (re.++ (re.union (re.range "\u{00}" "%")(re.union (re.range "'" "'")(re.union (re.range "*" ":")(re.union (re.range "<" "`")(re.union (re.range "b" "l")(re.union (re.range "n" "o") (re.range "q" "\u{ff}")))))))(re.++ (re.+ (re.* (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))))(re.++ (re.range "=" "=") (re.* (re.union (re.range " " " ")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "h" (str.++ "t" (str.++ "t" (str.++ "p" (str.++ "s" (str.++ ":" (str.++ "/" (str.++ "/" (str.++ "w" (str.++ "w" (str.++ "w" (str.++ "4" (str.++ "\u{94}" (str.++ "\u{b5}" (str.++ "s" (str.++ "@" (str.++ "\u{ce}" (str.++ "6" (str.++ "3" (str.++ "g" (str.++ "r" (str.++ "g" (str.++ "9" (str.++ "%" (str.++ "9" (str.++ "-" (str.++ "\u{ab}" (str.++ "m" (str.++ "a" (str.++ "y" (str.++ "o" (str.++ ":" (str.++ "1" (str.++ "/" (str.++ "i" (str.++ "8" "")))))))))))))))))))))))))))))))))))))

(define-fun Witness2 () String (str.++ "w" (str.++ "w" (str.++ "w" (str.++ "x" (str.++ "\u{c6}" (str.++ "@" (str.++ "F" (str.++ "j" (str.++ "\u{e0}" (str.++ "t" (str.++ "x" (str.++ "p" (str.++ "p" (str.++ "j" (str.++ "r" (str.++ ":" (str.++ "8" (str.++ "2" (str.++ "\u{a0}" (str.++ "5" (str.++ "\u{85}" (str.++ "\u{a0}" (str.++ "%" (str.++ "\u{85}" (str.++ "?" (str.++ "r" (str.++ "\u{c8}" (str.++ "\u{a9}" (str.++ "\u{e2}" (str.++ "\u{b8}" "")))))))))))))))))))))))))))))))

(assert (= regexA (re.++ (re.union (re.++ (re.union (str.to_re (str.++ "h" (str.++ "t" (str.++ "t" (str.++ "p" "")))))(re.union (str.to_re (str.++ "f" (str.++ "t" (str.++ "p" "")))) (str.to_re (str.++ "h" (str.++ "t" (str.++ "t" (str.++ "p" (str.++ "s" ""))))))))(re.++ (str.to_re (str.++ ":" (str.++ "/" (str.++ "/" ""))))(re.++ ((_ re.loop 3 3) (re.range "w" "w"))(re.++ (re.* (re.range "0" "9")) (re.union (re.range "\u{00}" "\u{09}") (re.range "\u{0b}" "\u{ff}"))))))(re.union (re.++ (re.union (str.to_re (str.++ "h" (str.++ "t" (str.++ "t" (str.++ "p" "")))))(re.union (str.to_re (str.++ "f" (str.++ "t" (str.++ "p" "")))) (str.to_re (str.++ "h" (str.++ "t" (str.++ "t" (str.++ "p" (str.++ "s" "")))))))) (str.to_re (str.++ ":" (str.++ "/" (str.++ "/" ""))))) (re.++ ((_ re.loop 3 3) (re.range "w" "w"))(re.++ (re.* (re.range "0" "9")) (re.union (re.range "\u{00}" "\u{09}") (re.range "\u{0b}" "\u{ff}"))))))(re.++ (re.opt (re.++ (re.+ (re.union (re.range "#" "#")(re.union (re.range "(" ")")(re.union (re.range "," ".")(re.union (re.range "0" ";")(re.union (re.range "A" "]")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))))))(re.++ (re.range "@" "@") (re.union (re.range "#" "#")(re.union (re.range "(" ")")(re.union (re.range "," ".")(re.union (re.range "0" ";")(re.union (re.range "A" "]")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))))))))(re.++ (re.* (re.++ (re.+ (re.union (re.range "0" "9") (re.range "a" "z"))) (re.union (re.range "\u{00}" "\u{09}") (re.range "\u{0b}" "\u{ff}"))))(re.++ (re.+ (re.union (re.range "-" "-")(re.union (re.range "0" "9") (re.range "a" "z"))))(re.++ (re.union (re.range "\u{00}" "\u{09}") (re.range "\u{0b}" "\u{ff}"))(re.++ (re.opt ((_ re.loop 2 3) (re.range "a" "z")))(re.++ ((_ re.loop 2 6) (re.range "a" "z"))(re.++ (re.opt (re.++ (re.range ":" ":") (re.+ (re.range "0" "9"))))(re.++ (re.* (re.++ (re.range "/" "/") (re.+ (re.union (re.range "," "9")(re.union (re.range "_" "_") (re.range "a" "z"))))))(re.++ (re.+ (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "%" "%")(re.union (re.range "-" ".")(re.union (re.range "0" "9")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))))))) (re.opt (re.++ (re.range "?" "?") (re.+ (re.union (re.range "#" "#")(re.union (re.range "%" "&")(re.union (re.range "," ".")(re.union (re.range "0" "9")(re.union (re.range ";" ";")(re.union (re.range "=" "=") (re.range "a" "z"))))))))))))))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "8" (str.++ "5" (str.++ "2" (str.++ "9" (str.++ "9" (str.++ "9" (str.++ "q" ""))))))))

(define-fun Witness2 () String (str.++ "9" (str.++ "8" (str.++ "7" (str.++ "8" (str.++ "8" (str.++ "4" "")))))))

(assert (= regexA (re.++ (str.to_re "") ((_ re.loop 6 6) (re.range "0" "9")))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "U" (str.++ "(" (str.++ "0" (str.++ "0" (str.++ "4" (str.++ "2" (str.++ "0" (str.++ "-" (str.++ "8" (str.++ "6" (str.++ "9" (str.++ "8" (str.++ "7" (str.++ " " (str.++ "9" (str.++ "2" (str.++ "6" (str.++ "5" (str.++ "\u{1c}" (str.++ "\u{f8}" (str.++ "\u{f2}" ""))))))))))))))))))))))

(define-fun Witness2 () String (str.++ "\u{d3}" (str.++ "\u{09}" (str.++ "\u{19}" (str.++ "\u{ba}" (str.++ "7" (str.++ "0" (str.++ "9" (str.++ " " (str.++ "6" (str.++ "4" (str.++ "1" (str.++ "0" (str.++ " " (str.++ "0" (str.++ "6" (str.++ "W" "")))))))))))))))))

(assert (= regexA (re.++ (re.union (re.range "\u{00}" "/") (re.range ":" "\u{ff}"))(re.++ (re.union (re.++ (re.opt (re.++ (re.opt (re.range "(" "("))(re.++ (re.union (str.to_re (str.++ "+" (str.++ "4" (str.++ "2" (str.++ "0" ""))))) (str.to_re (str.++ "0" (str.++ "0" (str.++ "4" (str.++ "2" (str.++ "0" "")))))))(re.++ (re.opt (re.range ")" ")")) (re.opt (re.union (re.range " " " ") (re.range "-" "-"))))))) (re.++ ((_ re.loop 3 3) (re.range "0" "9"))(re.++ (re.opt (re.range " " " ")) (re.union (re.++ ((_ re.loop 3 3) (re.range "0" "9"))(re.++ (re.opt (re.range " " " ")) ((_ re.loop 3 3) (re.range "0" "9")))) (re.++ ((_ re.loop 2 2) (re.range "0" "9"))(re.++ (re.opt (re.range " " " "))(re.++ ((_ re.loop 2 2) (re.range "0" "9"))(re.++ (re.opt (re.range " " " ")) ((_ re.loop 2 2) (re.range "0" "9")))))))))) (re.++ ((_ re.loop 3 3) (re.range "0" "9"))(re.++ (re.range "-" "-") (re.union (re.++ ((_ re.loop 3 3) (re.range "0" "9"))(re.++ (re.range "-" "-") ((_ re.loop 3 3) (re.range "0" "9")))) (re.++ ((_ re.loop 2 2) (re.range "0" "9"))(re.++ (re.range "-" "-")(re.++ ((_ re.loop 2 2) (re.range "0" "9"))(re.++ (re.range "-" "-") ((_ re.loop 2 2) (re.range "0" "9")))))))))) (re.union (re.range "\u{00}" ".")(re.union (re.range ":" "{") (re.range "}" "\u{ff}")))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "u" (str.++ "r" (str.++ "n" (str.++ ":" (str.++ "r" (str.++ "f" (str.++ "c" (str.++ "8" (str.++ ":" (str.++ "@" (str.++ "@" (str.++ "@" (str.++ "e" (str.++ "k" (str.++ "4" ""))))))))))))))))

(define-fun Witness2 () String (str.++ "}" (str.++ "K" (str.++ "u" (str.++ "r" (str.++ "n" (str.++ ":" (str.++ "8" (str.++ "-" (str.++ "-" (str.++ ":" (str.++ "_" (str.++ "@" (str.++ "\u{b8}" (str.++ "\u{ac}" (str.++ "\u{c6}" ""))))))))))))))))

(assert (= regexA (re.++ (str.to_re (str.++ "u" (str.++ "r" (str.++ "n" (str.++ ":" "")))))(re.++ (re.union (re.range "0" "9") (re.range "a" "z"))(re.++ ((_ re.loop 1 31) (re.union (re.range "-" "-")(re.union (re.range "0" "9") (re.range "a" "z"))))(re.++ (re.range ":" ":") (re.+ (re.union (re.range "!" "!")(re.union (re.range "#" "%")(re.union (re.range "'" ";")(re.union (re.range "=" "=")(re.union (re.range "?" "@")(re.union (re.range "_" "_") (re.range "a" "z"))))))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "g" (str.++ "\u{06}" (str.++ "\u{f7}" ""))))

(define-fun Witness2 () String (str.++ "i" (str.++ "\u{81}" "")))

(assert (= regexA (re.union (re.range "\u{00}" "`") (re.range "d" "\u{ff}"))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "0" (str.++ "4" (str.++ "5" (str.++ "9" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "3" (str.++ "9" (str.++ "1" (str.++ "\u{80}" ""))))))))))))

(define-fun Witness2 () String (str.++ "0" (str.++ "4" (str.++ "9" (str.++ "9" (str.++ "9" (str.++ "8" (str.++ "3" (str.++ "3" (str.++ "7" (str.++ "4" "")))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (str.to_re (str.++ "0" (str.++ "4" ""))) ((_ re.loop 8 8) (re.range "0" "9"))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "\u{dd}" (str.++ "\u{90}" (str.++ "a" (str.++ "n" (str.++ "t" (str.++ "i" (str.++ "f" (str.++ "r" (str.++ "a" (str.++ "u" (str.++ "d" (str.++ "." (str.++ "r" (str.++ "e" (str.++ "f" (str.++ "." (str.++ "n" (str.++ "u" (str.++ "m" (str.++ "8" (str.++ "4" (str.++ "@" (str.++ "c" (str.++ "i" (str.++ "t" (str.++ "i" (str.++ "b" (str.++ "a" (str.++ "n" (str.++ "k" (str.++ "." (str.++ "c" (str.++ "o" (str.++ "m" (str.++ "G" ""))))))))))))))))))))))))))))))))))))

(define-fun Witness2 () String (str.++ "\u{a3}" (str.++ "T" (str.++ "a" (str.++ "n" (str.++ "t" (str.++ "i" (str.++ "f" (str.++ "r" (str.++ "a" (str.++ "u" (str.++ "d" (str.++ "." (str.++ "r" (str.++ "e" (str.++ "f" (str.++ "." (str.++ "n" (str.++ "u" (str.++ "m" (str.++ "6" (str.++ "9" (str.++ "@" (str.++ "c" (str.++ "i" (str.++ "t" (str.++ "i" (str.++ "b" (str.++ "a" (str.++ "n" (str.++ "k" (str.++ "." (str.++ "c" (str.++ "o" (str.++ "m" "")))))))))))))))))))))))))))))))))))

(assert (= regexA (re.++ (str.to_re (str.++ "a" (str.++ "n" (str.++ "t" (str.++ "i" (str.++ "f" (str.++ "r" (str.++ "a" (str.++ "u" (str.++ "d" (str.++ "." (str.++ "r" (str.++ "e" (str.++ "f" (str.++ "." (str.++ "n" (str.++ "u" (str.++ "m" ""))))))))))))))))))(re.++ (re.* (re.range "0" "9")) (str.to_re (str.++ "@" (str.++ "c" (str.++ "i" (str.++ "t" (str.++ "i" (str.++ "b" (str.++ "a" (str.++ "n" (str.++ "k" (str.++ "." (str.++ "c" (str.++ "o" (str.++ "m" ""))))))))))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "H" (str.++ "1" (str.++ "D" (str.++ "9" (str.++ "-" (str.++ "8" (str.++ "8" ""))))))))

(define-fun Witness2 () String (str.++ "d" (str.++ "4" (str.++ "Y" (str.++ "\u{ce}" "")))))

(assert (= regexA (re.++ (re.opt ((_ re.loop 1 2) (re.range "1" "9")))(re.++ (re.union (re.range "D" "D") (re.range "d" "d"))(re.++ ((_ re.loop 1 3) (re.range "1" "9")) (re.opt (re.++ (re.union (re.range "+" "+") (re.range "-" "-")) ((_ re.loop 1 3) (re.range "1" "9")))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "h" (str.++ "t" (str.++ "t" (str.++ "p" (str.++ ":" (str.++ "/" (str.++ "/" (str.++ "w" (str.++ "w" (str.++ "w" (str.++ "\u{f9}" (str.++ "c" (str.++ "a" (str.++ "r" (str.++ "r" (str.++ "e" (str.++ "g" (str.++ "\u{a7}" (str.++ "c" (str.++ "o" (str.++ "O" (str.++ "u" (str.++ "k" (str.++ "/" (str.++ "n" (str.++ "u" (str.++ "m" (str.++ "b" (str.++ "e" (str.++ "r" (str.++ "_" (str.++ "p" (str.++ "l" (str.++ "a" (str.++ "t" (str.++ "e" (str.++ "s" (str.++ "/" (str.++ "r" (str.++ "e" (str.++ "g" (str.++ "i" (str.++ "s" (str.++ "t" (str.++ "r" (str.++ "a" (str.++ "t" (str.++ "i" (str.++ "o" (str.++ "n" (str.++ "_" (str.++ "n" (str.++ "u" (str.++ "m" (str.++ "b" (str.++ "e" (str.++ "r" (str.++ "s" (str.++ "\u{87}" (str.++ "\u{c1}" "")))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(define-fun Witness2 () String (str.++ "\u{ec}" (str.++ "\u{d5}" (str.++ "h" (str.++ "t" (str.++ "t" (str.++ "p" (str.++ ":" (str.++ "/" (str.++ "/" (str.++ "w" (str.++ "w" (str.++ "w" (str.++ ";" (str.++ "c" (str.++ "a" (str.++ "r" (str.++ "r" (str.++ "e" (str.++ "g" (str.++ "\u{92}" (str.++ "c" (str.++ "o" (str.++ "-" (str.++ "u" (str.++ "k" (str.++ "/" (str.++ "n" (str.++ "u" (str.++ "m" (str.++ "b" (str.++ "e" (str.++ "r" (str.++ "_" (str.++ "p" (str.++ "l" (str.++ "a" (str.++ "t" (str.++ "e" (str.++ "s" (str.++ "/" (str.++ "r" (str.++ "e" (str.++ "g" (str.++ "i" (str.++ "s" (str.++ "t" (str.++ "r" (str.++ "a" (str.++ "t" (str.++ "i" (str.++ "o" (str.++ "n" (str.++ "_" (str.++ "n" (str.++ "u" (str.++ "m" (str.++ "b" (str.++ "e" (str.++ "r" (str.++ "s" (str.++ "\u{d9}" ""))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(assert (= regexA (re.++ (str.to_re (str.++ "h" (str.++ "t" (str.++ "t" (str.++ "p" (str.++ ":" (str.++ "/" (str.++ "/" (str.++ "w" (str.++ "w" (str.++ "w" "")))))))))))(re.++ (re.union (re.range "\u{00}" "\u{09}") (re.range "\u{0b}" "\u{ff}"))(re.++ (str.to_re (str.++ "c" (str.++ "a" (str.++ "r" (str.++ "r" (str.++ "e" (str.++ "g" "")))))))(re.++ (re.union (re.range "\u{00}" "\u{09}") (re.range "\u{0b}" "\u{ff}"))(re.++ (str.to_re (str.++ "c" (str.++ "o" "")))(re.++ (re.union (re.range "\u{00}" "\u{09}") (re.range "\u{0b}" "\u{ff}")) (str.to_re (str.++ "u" (str.++ "k" (str.++ "/" (str.++ "n" (str.++ "u" (str.++ "m" (str.++ "b" (str.++ "e" (str.++ "r" (str.++ "_" (str.++ "p" (str.++ "l" (str.++ "a" (str.++ "t" (str.++ "e" (str.++ "s" (str.++ "/" (str.++ "r" (str.++ "e" (str.++ "g" (str.++ "i" (str.++ "s" (str.++ "t" (str.++ "r" (str.++ "a" (str.++ "t" (str.++ "i" (str.++ "o" (str.++ "n" (str.++ "_" (str.++ "n" (str.++ "u" (str.++ "m" (str.++ "b" (str.++ "e" (str.++ "r" (str.++ "s" ""))))))))))))))))))))))))))))))))))))))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "4" (str.++ "9" (str.++ "9" (str.++ "5" (str.++ "-" (str.++ "\u{a0}" (str.++ "8" (str.++ "9" (str.++ "8" (str.++ "8" (str.++ "6" (str.++ "8" (str.++ "0" (str.++ "8" (str.++ "-" (str.++ "5" (str.++ "8" (str.++ "8" (str.++ "8" (str.++ "P" (str.++ "\u{f1}" (str.++ "\u{f7}" "")))))))))))))))))))))))

(define-fun Witness2 () String (str.++ "4" (str.++ "9" (str.++ "6" (str.++ "4" (str.++ "-" (str.++ "\u{09}" (str.++ "3" (str.++ "8" (str.++ "6" (str.++ "9" (str.++ "-" (str.++ "\u{a0}" (str.++ "1" (str.++ "9" (str.++ "4" (str.++ "4" (str.++ "-" (str.++ "9" (str.++ "0" (str.++ "7" (str.++ "1" (str.++ "1" "")))))))))))))))))))))))

(assert (= regexA (re.union (re.++ (str.to_re "")(re.++ (re.union (re.++ (str.to_re (str.++ "6" (str.++ "7" ""))) ((_ re.loop 2 2) (re.range "0" "9")))(re.union (re.++ (re.range "4" "4") ((_ re.loop 3 3) (re.range "0" "9")))(re.union (re.++ (re.range "5" "5")(re.++ (re.range "1" "5") ((_ re.loop 2 2) (re.range "0" "9")))) (str.to_re (str.++ "6" (str.++ "0" (str.++ "1" (str.++ "1" ""))))))))(re.++ (re.opt (re.range "-" "-"))(re.++ (re.opt (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ ((_ re.loop 4 4) (re.range "0" "9"))(re.++ (re.opt (re.range "-" "-"))(re.++ (re.opt (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ ((_ re.loop 4 4) (re.range "0" "9"))(re.++ (re.opt (re.range "-" "-"))(re.++ (re.opt (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))) ((_ re.loop 4 4) (re.range "0" "9")))))))))))) (re.++ (re.range "3" "3")(re.++ (re.union (re.range "," ",")(re.union (re.range "4" "4") (re.range "7" "7")))(re.++ ((_ re.loop 13 13) (re.range "0" "9")) (str.to_re "")))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "D" (str.++ "9" (str.++ "P" (str.++ " " (str.++ "9" (str.++ "Y" (str.++ "Z" ""))))))))

(define-fun Witness2 () String (str.++ "\u{c6}" (str.++ "\u{b6}" (str.++ "G" (str.++ "I" (str.++ "R" (str.++ " " (str.++ "0" (str.++ "A" (str.++ "A" ""))))))))))

(assert (= regexA (re.union (re.++ (str.to_re "") (re.++ (re.++ ((_ re.loop 1 2) (re.range "A" "Z"))(re.++ (re.range "0" "9") (re.opt (re.union (re.range "0" "9") (re.range "A" "Z")))))(re.++ (re.range " " " ") (re.++ (re.range "0" "9") ((_ re.loop 2 2) (re.range "A" "Z")))))) (re.++ (str.to_re (str.++ "G" (str.++ "I" (str.++ "R" (str.++ " " (str.++ "0" (str.++ "A" (str.++ "A" "")))))))) (str.to_re "")))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "=" (str.++ "\u{13}" (str.++ "h" (str.++ "t" (str.++ "t" (str.++ "p" (str.++ ":" (str.++ "/" (str.++ "/" (str.++ "\u{fc}" (str.++ "2" (str.++ "4" (str.++ "." (str.++ "a" (str.++ "e" (str.++ "r" (str.++ "o" (str.++ "/" (str.++ "\u{b1}" (str.++ "\u{e7}" (str.++ "C" (str.++ "\u{c4}" (str.++ "\u{f8}" (str.++ "\u{c3}" (str.++ "\u{ed}" ""))))))))))))))))))))))))))

(define-fun Witness2 () String (str.++ "f" (str.++ "t" (str.++ "p" (str.++ "s" (str.++ ":" (str.++ "/" (str.++ "/" (str.++ "\u{d0}" (str.++ "\u{ba}" (str.++ "j" (str.++ "." (str.++ "n" (str.++ "a" (str.++ "m" (str.++ "e" (str.++ "n" (str.++ "a" (str.++ "m" (str.++ "e" (str.++ "O" (str.++ "Z" (str.++ "T" (str.++ "\u{94}" ""))))))))))))))))))))))))

(assert (= regexA (re.++ (re.opt (re.++ (re.union (str.to_re (str.++ "h" (str.++ "t" (str.++ "t" (str.++ "p" "")))))(re.union (str.to_re (str.++ "f" (str.++ "t" (str.++ "p" ""))))(re.union (str.to_re (str.++ "h" (str.++ "t" (str.++ "t" (str.++ "p" (str.++ "s" "")))))) (str.to_re (str.++ "f" (str.++ "t" (str.++ "p" (str.++ "s" "")))))))) (str.to_re (str.++ ":" (str.++ "/" (str.++ "/" ""))))))(re.++ (re.+ (re.union (re.range "-" ".")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))))(re.++ (re.range "." ".")(re.++ (re.+ (re.union ((_ re.loop 1 3) (re.range "0" "9"))(re.union ((_ re.loop 2 3) (re.union (re.range "A" "Z") (re.range "a" "z"))) (re.union (str.to_re (str.++ "a" (str.++ "e" (str.++ "r" (str.++ "o" "")))))(re.union (str.to_re (str.++ "c" (str.++ "o" (str.++ "o" (str.++ "p" "")))))(re.union (str.to_re (str.++ "i" (str.++ "n" (str.++ "f" (str.++ "o" "")))))(re.union (str.to_re (str.++ "m" (str.++ "u" (str.++ "s" (str.++ "e" (str.++ "u" (str.++ "m" ""))))))) (str.to_re (str.++ "n" (str.++ "a" (str.++ "m" (str.++ "e" ""))))))))))))(re.++ (re.opt (re.++ (re.range ":" ":") (re.+ (re.range "0" "9"))))(re.++ (re.opt (re.range "/" "/")) (re.opt (re.++ (re.++ (re.* (re.union (re.range "#" "#")(re.union (re.range "%" "%")(re.union (re.range "+" ":")(re.union (re.range "@" "Z")(re.union (re.range "^" "_")(re.union (re.range "a" "z")(re.union (re.range "~" "~")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))))) (re.union (re.range "#" "#")(re.union (re.range "%" "%")(re.union (re.range "+" "+")(re.union (re.range "-" "-")(re.union (re.range "/" "9")(re.union (re.range "@" "Z")(re.union (re.range "^" "_")(re.union (re.range "a" "z")(re.union (re.range "~" "~")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))))))) (re.opt (re.++ (re.+ (re.++ (re.range "?" "?")(re.++ (re.* (re.union (re.range "#" "%")(re.union (re.range "'" "'")(re.union (re.range "+" ".")(re.union (re.range "0" "9")(re.union (re.range "=" "=")(re.union (re.range "A" "[")(re.union (re.range "]" "]")(re.union (re.range "_" "_")(re.union (re.range "a" "z") (re.range "~" "~")))))))))))(re.++ (re.range "=" "=") (re.* (re.union (re.range "#" "%")(re.union (re.range "'" "'")(re.union (re.range "+" ".")(re.union (re.range "0" "9")(re.union (re.range "=" "=")(re.union (re.range "A" "[")(re.union (re.range "]" "]")(re.union (re.range "_" "_")(re.union (re.range "a" "z") (re.range "~" "~"))))))))))))))) (re.* (re.++ (re.range "&" "&")(re.++ (re.* (re.union (re.range "#" "%")(re.union (re.range "'" "'")(re.union (re.range "+" ".")(re.union (re.range "0" "9")(re.union (re.range "=" "=")(re.union (re.range "A" "[")(re.union (re.range "]" "]")(re.union (re.range "_" "_")(re.union (re.range "a" "z") (re.range "~" "~")))))))))))(re.++ (re.range "=" "=") (re.* (re.union (re.range "#" "%")(re.union (re.range "'" "'")(re.union (re.range "+" ".")(re.union (re.range "0" "9")(re.union (re.range "=" "=")(re.union (re.range "A" "[")(re.union (re.range "]" "]")(re.union (re.range "_" "_")(re.union (re.range "a" "z") (re.range "~" "~")))))))))))))))))))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "&" (str.++ "l" (str.++ "t" (str.++ ";" (str.++ "\u{19}" (str.++ "~" (str.++ "&" (str.++ "g" (str.++ "t" (str.++ ";" (str.++ "~" ""))))))))))))

(define-fun Witness2 () String (str.++ "\u{cb}" (str.++ "&" (str.++ "l" (str.++ "t" (str.++ ";" (str.++ "\u{9a}" (str.++ "&" (str.++ "g" (str.++ "t" (str.++ ";" (str.++ "r" (str.++ "1" "")))))))))))))

(assert (= regexA (re.++ (str.to_re (str.++ "&" (str.++ "l" (str.++ "t" (str.++ ";" "")))))(re.++ (re.+ (re.union (re.range "\u{00}" "%")(re.union (re.range "'" ":")(re.union (re.range "<" "f")(re.union (re.range "h" "s") (re.range "u" "\u{ff}")))))) (str.to_re (str.++ "&" (str.++ "g" (str.++ "t" (str.++ ";" "")))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "\u{0e}" (str.++ "C" (str.++ "O" (str.++ "M" (str.++ "3" (str.++ "\u{a0}" (str.++ "\u{0d}" ""))))))))

(define-fun Witness2 () String (str.++ "P" (str.++ "R" (str.++ "N" (str.++ "L" (str.++ "P" (str.++ "T" (str.++ "1" (str.++ "L" (str.++ "P" (str.++ "T" (str.++ "9" (str.++ "A" (str.++ "U" (str.++ "X" (str.++ "\u{a0}" (str.++ " " "")))))))))))))))))

(assert (= regexA (re.++ (re.+ (re.union (str.to_re (str.++ "A" (str.++ "U" (str.++ "X" ""))))(re.union (str.to_re (str.++ "P" (str.++ "R" (str.++ "N" ""))))(re.union (str.to_re (str.++ "N" (str.++ "U" (str.++ "L" ""))))(re.union (re.++ (str.to_re (str.++ "C" (str.++ "O" (str.++ "M" "")))) (re.range "0" "9")) (re.++ (str.to_re (str.++ "L" (str.++ "P" (str.++ "T" "")))) (re.range "0" "9")))))))(re.++ (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))) (str.to_re "")))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "G" (str.++ "B" (str.++ "8" (str.++ "8" (str.++ "0" (str.++ " " (str.++ "9" (str.++ "1" (str.++ "9" (str.++ "8" (str.++ " " (str.++ "8" (str.++ "5" (str.++ "\u{ca}" "")))))))))))))))

(define-fun Witness2 () String (str.++ "1" (str.++ "5" (str.++ "9" (str.++ " " (str.++ "6" (str.++ "4" (str.++ "3" (str.++ "5" (str.++ " " (str.++ "8" (str.++ "1" (str.++ "\u{b8}" (str.++ "\u{1e}" (str.++ "\u{e4}" (str.++ "\u{b1}" (str.++ "\u{f7}" (str.++ "9" ""))))))))))))))))))

(assert (= regexA (re.union (re.++ (str.to_re "")(re.++ (re.opt (str.to_re (str.++ "G" (str.++ "B" "")))) (re.++ (re.range "1" "9")(re.++ ((_ re.loop 2 2) (re.range "0" "9"))(re.++ (re.range " " " ")(re.++ ((_ re.loop 4 4) (re.range "0" "9"))(re.++ (re.range " " " ") ((_ re.loop 2 2) (re.range "0" "9")))))))))(re.union (re.++ (re.range "1" "9")(re.++ ((_ re.loop 2 2) (re.range "0" "9"))(re.++ (re.range " " " ")(re.++ ((_ re.loop 4 4) (re.range "0" "9"))(re.++ (re.range " " " ")(re.++ ((_ re.loop 2 2) (re.range "0" "9"))(re.++ (re.range " " " ") ((_ re.loop 3 3) (re.range "0" "9"))))))))) (re.++ (re.++ (re.union (str.to_re (str.++ "G" (str.++ "D" ""))) (str.to_re (str.++ "H" (str.++ "A" "")))) ((_ re.loop 3 3) (re.range "0" "9"))) (str.to_re ""))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)

(assert (= regexA (re.++ (re.range "/" "/")(re.++ (re.++ re.none (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))) (str.to_re (str.++ "/" (str.++ "u" "")))))))


(assert (str.in_re x regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "\u{ba}" (str.++ "\u{a2}" (str.++ " " (str.++ "\u{00}" "")))))

(define-fun Witness2 () String (str.++ "\u{fb}" (str.++ "." "")))

(assert (= regexA (re.++ (str.to_re "")(re.++ ((_ re.loop 1 20) (re.range "\u{00}" "\u{ff}")) (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "." ".")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "R" (str.++ "\u{0c}" (str.++ "2" (str.++ "9" (str.++ "1" (str.++ "-" (str.++ "7" (str.++ "4" (str.++ "8" (str.++ "-" (str.++ "8" (str.++ "5" (str.++ "9" (str.++ "0" (str.++ "e" (str.++ "X" (str.++ "T" (str.++ ":" (str.++ "1" (str.++ "#" (str.++ "I" (str.++ "\u{1a}" (str.++ "\u{90}" (str.++ "c" (str.++ "R" (str.++ "V" "")))))))))))))))))))))))))))

(define-fun Witness2 () String (str.++ "3" (str.++ "8" (str.++ "0" (str.++ "-" (str.++ "6" (str.++ "8" (str.++ "0" (str.++ "-" (str.++ "8" (str.++ "3" (str.++ "9" (str.++ "9" (str.++ "\u{85}" (str.++ "\u{f2}" "")))))))))))))))

(assert (= regexA (re.++ (re.union (re.++ ((_ re.loop 0 2) (re.range "0" "9"))(re.++ (re.range "(" "(")(re.++ ((_ re.loop 3 3) (re.range "0" "9")) (re.range ")" ")")))) (re.++ ((_ re.loop 3 3) (re.range "0" "9")) (re.range "-" "-")))(re.++ ((_ re.loop 3 3) (re.range "0" "9"))(re.++ (re.range "-" "-")(re.++ ((_ re.loop 4 4) (re.range "0" "9"))(re.++ (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))) (re.opt (re.++ (re.union (re.++ (re.union (re.range "E" "E") (re.range "e" "e"))(re.++ (re.union (re.range "X" "X") (re.range "x" "x")) (re.union (re.range "T" "T") (re.range "t" "t")))) (re.++ (re.union (re.range "P" "P") (re.range "p" "p"))(re.++ (re.union (re.range "O" "O") (re.range "o" "o"))(re.++ (re.union (re.range "S" "S") (re.range "s" "s"))(re.++ (re.union (re.range "T" "T") (re.range "t" "t")) (re.union (re.range "E" "E") (re.range "e" "e")))))))(re.++ (re.range ":" ":") ((_ re.loop 1 5) (re.range "0" "9"))))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "\u{d0}" (str.++ "\u{ed}" (str.++ "\u{b8}" (str.++ "s" (str.++ "a" (str.++ "t" "")))))))

(define-fun Witness2 () String (str.++ "f" (str.++ "r" (str.++ "i" (str.++ "d" (str.++ "a" (str.++ "y" (str.++ "\u{de}" (str.++ "\u{1b}" "")))))))))

(assert (= regexA (re.union (re.++ (re.range "t" "t") (re.union (re.++ (str.to_re (str.++ "u" (str.++ "e" ""))) (re.opt (str.to_re (str.++ "s" (str.++ "d" (str.++ "a" (str.++ "y" ""))))))) (re.++ (str.to_re (str.++ "h" (str.++ "u" ""))) (re.opt (str.to_re (str.++ "r" (str.++ "s" (str.++ "d" (str.++ "a" (str.++ "y" ""))))))))))(re.union (re.++ (re.range "s" "s") (re.union (re.++ (str.to_re (str.++ "u" (str.++ "n" ""))) (re.opt (str.to_re (str.++ "d" (str.++ "a" (str.++ "y" "")))))) (re.++ (str.to_re (str.++ "a" (str.++ "t" ""))) (re.opt (str.to_re (str.++ "u" (str.++ "r" (str.++ "d" (str.++ "a" (str.++ "y" ""))))))))))(re.union (re.++ (str.to_re (str.++ "w" (str.++ "e" (str.++ "d" "")))) (re.opt (str.to_re (str.++ "n" (str.++ "e" (str.++ "s" (str.++ "d" (str.++ "a" (str.++ "y" ""))))))))) (re.++ (re.union (str.to_re (str.++ "m" (str.++ "o" (str.++ "n" "")))) (str.to_re (str.++ "f" (str.++ "r" (str.++ "i" ""))))) (re.opt (str.to_re (str.++ "d" (str.++ "a" (str.++ "y" "")))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "J" (str.++ "\u{a2}" (str.++ "&" (str.++ " " "")))))

(define-fun Witness2 () String (str.++ "&" (str.++ " " "")))

(assert (= regexA (re.++ (re.range "&" "&") (re.range " " " "))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "0" (str.++ "-" (str.++ "9" (str.++ "9" (str.++ "8" (str.++ "8" (str.++ "9" (str.++ "9" (str.++ "7" (str.++ "0" (str.++ "8" (str.++ "5" "")))))))))))))

(define-fun Witness2 () String (str.++ "\u{10}" (str.++ "-" (str.++ "+" (str.++ "9" (str.++ "1" (str.++ "-" (str.++ "9" (str.++ "9" (str.++ "5" (str.++ "2" (str.++ "2" (str.++ "8" (str.++ "7" (str.++ "1" (str.++ "9" (str.++ "9" (str.++ "\u{d4}" (str.++ "\u{ca}" (str.++ "\u{c1}" (str.++ "\u{d7}" "")))))))))))))))))))))

(assert (= regexA (re.++ (re.opt (re.union (re.++ (str.to_re (str.++ "+" (str.++ "9" (str.++ "1" "")))) (re.opt (re.range "-" "-")))(re.union (re.++ (str.to_re (str.++ "9" (str.++ "1" ""))) (re.opt (re.range "-" "-"))) (re.++ (re.range "0" "0") (re.opt (re.range "-" "-"))))))(re.++ (re.range "9" "9") ((_ re.loop 9 9) (re.range "0" "9"))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "\u{10}" (str.++ "a" (str.++ "\u{94}" (str.++ "\u{e7}" (str.++ "&" (str.++ "W" "")))))))

(define-fun Witness2 () String (str.++ "&" (str.++ "\u{f3}" (str.++ "\u{d0}" (str.++ "[" "")))))

(assert (= regexA (re.range "&" "&")))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "N" (str.++ "U" (str.++ "L" (str.++ "L" "")))))

(define-fun Witness2 () String (str.++ "\u{0d}" (str.++ "c" (str.++ "\u{00}" (str.++ "y" (str.++ "'" (str.++ "\u{c6}" (str.++ "\u{16}" (str.++ "'" "")))))))))

(assert (= regexA (re.union (re.++ (re.range "'" "'")(re.++ (re.* (re.union (str.to_re (str.++ "\u{5c}" (str.++ "'" ""))) (re.union (re.range "\u{00}" "&") (re.range "(" "\u{ff}")))) (re.range "'" "'"))) (str.to_re (str.++ "N" (str.++ "U" (str.++ "L" (str.++ "L" ""))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "d" (str.++ "a" (str.++ "t" (str.++ "e" "")))))

(define-fun Witness2 () String (str.++ "d" (str.++ "a" (str.++ "t" (str.++ "e" (str.++ "-" (str.++ "0" "")))))))

(assert (= regexA (str.to_re (str.++ "d" (str.++ "a" (str.++ "t" (str.++ "e" "")))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "\u{d3}" (str.++ "\u{f7}" (str.++ "V" (str.++ "8" (str.++ "5" (str.++ "\u{0d}" (str.++ "d" (str.++ "\u{0d}" (str.++ "0" (str.++ "9" (str.++ ":" (str.++ "5" (str.++ "4" (str.++ ":" (str.++ "1" (str.++ "5" "")))))))))))))))))

(define-fun Witness2 () String (str.++ "\u{e7}" (str.++ "\u{cb}" (str.++ "\u{87}" (str.++ "\u{a3}" (str.++ "8" (str.++ "\u{85}" (str.++ "d" (str.++ "\u{85}" (str.++ "2" (str.++ "3" (str.++ ":" (str.++ "4" (str.++ "3" (str.++ ":" (str.++ "0" (str.++ "7" (str.++ "C" (str.++ "C" "")))))))))))))))))))

(assert (= regexA (re.++ (re.+ (re.range "0" "9"))(re.++ (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))(re.++ (re.range "d" "d")(re.++ (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))(re.++ (re.union (re.++ (re.range "0" "1") (re.range "0" "9")) (re.++ (re.range "2" "2") (re.range "0" "3")))(re.++ (re.range ":" ":")(re.++ (re.++ (re.range "0" "5") (re.range "0" "9"))(re.++ (re.range ":" ":") (re.++ (re.range "0" "5") (re.range "0" "9"))))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ ":" (str.++ "\u{c0}" (str.++ "\u{f0}" (str.++ "\u{b7}" (str.++ "\u{8f}" (str.++ "!" (str.++ "~" (str.++ "C" (str.++ "@" (str.++ "o" (str.++ "\u{f4}" (str.++ "\u{ed}" (str.++ "\u{16}" (str.++ " " (str.++ "\u{e0}" (str.++ "D" (str.++ "\u{91}" (str.++ "\u{f7}" (str.++ "Y" (str.++ "\u{90}" (str.++ "\u{b0}" (str.++ "d" (str.++ "i" (str.++ "\u{fb}" (str.++ "\u{c2}" ""))))))))))))))))))))))))))

(define-fun Witness2 () String (str.++ "$" (str.++ "\u{d5}" (str.++ "\u{ef}" (str.++ "\u{e7}" (str.++ "\u{ea}" (str.++ "G" (str.++ ":" (str.++ "\u{05}" (str.++ "\u{14}" (str.++ "\u{c9}" (str.++ "1" (str.++ "\u{b6}" (str.++ "!" (str.++ "~" (str.++ "\u{ef}" (str.++ "@" (str.++ "\u{1b}" (str.++ "\u{be}" (str.++ "\u{db}" (str.++ " " (str.++ "\u{c0}" (str.++ "\u{b3}" (str.++ "B" (str.++ "\u{a1}" (str.++ "\u{d8}" (str.++ "6" (str.++ "h" ""))))))))))))))))))))))))))))

(assert (= regexA (re.++ (re.range ":" ":")(re.++ (re.++ (re.opt (re.++ (re.+ (re.union (re.range "\u{00}" " ") (re.range "\u{22}" "\u{ff}")))(re.++ (re.range "!" "!")(re.++ (re.opt (re.range "~" "~"))(re.++ (re.+ (re.union (re.range "\u{00}" "?") (re.range "A" "\u{ff}"))) (re.range "@" "@")))))) (re.+ (re.union (re.range "\u{00}" "\u{08}")(re.union (re.range "\u{0e}" "\u{1f}")(re.union (re.range "!" "\u{84}")(re.union (re.range "\u{86}" "\u{9f}") (re.range "\u{a1}" "\u{ff}")))))))(re.++ (re.range " " " ")(re.++ (re.+ (re.union (re.range "\u{00}" "\u{08}")(re.union (re.range "\u{0e}" "\u{1f}")(re.union (re.range "!" "\u{84}")(re.union (re.range "\u{86}" "\u{9f}") (re.range "\u{a1}" "\u{ff}"))))))(re.++ (re.opt (re.range " " " "))(re.++ (re.opt (re.+ (re.union (re.range "\u{00}" "9") (re.range ";" "\u{ff}"))))(re.++ (re.opt (re.range ":" ":")) (re.opt (re.+ (re.union (re.range "\u{00}" "\u{09}")(re.union (re.range "\u{0b}" "\u{0c}")(re.union (re.range "\u{0e}" "]") (re.range "_" "\u{ff}")))))))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "6" (str.++ "@" (str.++ "R" ""))))

(define-fun Witness2 () String (str.++ "Y" (str.++ "A" (str.++ "\u{91}" (str.++ "@" (str.++ "u" (str.++ "p" "")))))))

(assert (= regexA (re.++ (re.range "@" "@") (re.+ (re.union (re.range "A" "Z")(re.union (re.range "_" "_") (re.range "a" "z")))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "8" (str.++ "8" (str.++ "0" (str.++ "\u{85}" (str.++ "9" (str.++ "4" (str.++ "9" (str.++ "2" (str.++ "9" (str.++ "0" (str.++ "9" (str.++ "7" (str.++ "#" (str.++ "\u{0b}" (str.++ "E" (str.++ "\u{02}" (str.++ "\u{e2}" (str.++ "T" (str.++ "\u{07}" ""))))))))))))))))))))

(define-fun Witness2 () String (str.++ "\u{ee}" (str.++ "9" (str.++ "8" (str.++ "1" (str.++ "7" (str.++ "3" (str.++ "9" (str.++ "0" (str.++ "/" (str.++ "0" (str.++ "1" (str.++ "5" (str.++ "6" (str.++ "\u{09}" (str.++ "\u{d5}" (str.++ "b" (str.++ "t" (str.++ "\u{f2}" (str.++ "q" (str.++ "\u{bb}" (str.++ "\u{b2}" (str.++ "\u{0b}" "")))))))))))))))))))))))

(assert (= regexA (re.++ (re.union (re.++ (re.range "(" "(")(re.++ ((_ re.loop 3 3) (re.range "0" "9")) (re.opt (re.range ")" ")")))) ((_ re.loop 3 3) (re.range "0" "9")))(re.++ (re.opt (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "-" "/")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))))(re.++ ((_ re.loop 3 3) (re.range "0" "9"))(re.++ (re.opt (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "-" "/")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))) ((_ re.loop 4 4) (re.range "0" "9"))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "W" (str.++ "r" (str.++ "u" (str.++ "n" (str.++ "e" (str.++ "s" (str.++ "c" (str.++ "a" (str.++ "p" (str.++ "e" (str.++ "\u{a7}" (str.++ "\u{cf}" (str.++ "\u{e5}" ""))))))))))))))

(define-fun Witness2 () String (str.++ "4" (str.++ "\u{7f}" (str.++ "I" (str.++ "r" (str.++ "u" (str.++ "n" (str.++ "e" (str.++ "s" (str.++ "c" (str.++ "a" (str.++ "p" (str.++ "e" "")))))))))))))

(assert (= regexA (str.to_re (str.++ "r" (str.++ "u" (str.++ "n" (str.++ "e" (str.++ "s" (str.++ "c" (str.++ "a" (str.++ "p" (str.++ "e" ""))))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "d" (str.++ "|" (str.++ "W" (str.++ "r" (str.++ "i" (str.++ "t" (str.++ "e" (str.++ " " (str.++ "m" (str.++ "o" (str.++ "d" (str.++ "u" (str.++ "l" (str.++ "e" (str.++ "s" (str.++ " " (str.++ "f" (str.++ "o" (str.++ "r" (str.++ " " (str.++ "D" (str.++ "r" (str.++ "u" (str.++ "p" (str.++ "a" (str.++ "l" (str.++ "\u{dc}" ""))))))))))))))))))))))))))))

(define-fun Witness2 () String (str.++ "\u{22}" (str.++ "\u{ec}" (str.++ "W" (str.++ "r" (str.++ "i" (str.++ "t" (str.++ "e" (str.++ " " (str.++ "m" (str.++ "o" (str.++ "d" (str.++ "u" (str.++ "l" (str.++ "e" (str.++ "s" (str.++ " " (str.++ "f" (str.++ "o" (str.++ "r" (str.++ " " (str.++ "D" (str.++ "r" (str.++ "u" (str.++ "p" (str.++ "a" (str.++ "l" (str.++ "\u{ab}" (str.++ "n" (str.++ "r" ""))))))))))))))))))))))))))))))

(assert (= regexA (str.to_re (str.++ "W" (str.++ "r" (str.++ "i" (str.++ "t" (str.++ "e" (str.++ " " (str.++ "m" (str.++ "o" (str.++ "d" (str.++ "u" (str.++ "l" (str.++ "e" (str.++ "s" (str.++ " " (str.++ "f" (str.++ "o" (str.++ "r" (str.++ " " (str.++ "D" (str.++ "r" (str.++ "u" (str.++ "p" (str.++ "a" (str.++ "l" "")))))))))))))))))))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "m" (str.++ "\u{a6}" (str.++ "\u{e7}" (str.++ "\u{e8}" (str.++ "E" (str.++ "Q" (str.++ "D" (str.++ "\u{d4}" (str.++ "'" (str.++ "R" (str.++ "F" (str.++ "F" (str.++ "'" (str.++ "R" (str.++ "F" (str.++ "F" (str.++ "'" (str.++ "T" (str.++ "M" (str.++ "D" (str.++ "'" (str.++ "T" (str.++ "M" (str.++ "D" (str.++ "\u{94}" (str.++ "'" (str.++ "D" (str.++ "T" (str.++ "M" (str.++ "\u{8e}" (str.++ "'" (str.++ "L" (str.++ "O" (str.++ "C" (str.++ "'" (str.++ "L" (str.++ "O" (str.++ "C" (str.++ "'" (str.++ "M" (str.++ "E" (str.++ "A" (str.++ "\u{d1}" (str.++ "'" (str.++ "D" (str.++ "I" (str.++ "M" (str.++ "!" (str.++ "'" (str.++ "T" (str.++ "M" (str.++ "P" (str.++ "'" (str.++ "T" (str.++ "M" (str.++ "P" (str.++ "'" (str.++ "R" (str.++ "N" (str.++ "G" (str.++ "p" (str.++ "'" (str.++ "R" (str.++ "N" (str.++ "G" (str.++ "'" (str.++ "S" (str.++ "E" (str.++ "L" (str.++ "'" (str.++ "F" (str.++ "T" (str.++ "X" (str.++ "N" (str.++ "\u{0f}" (str.++ "\u{99}" (str.++ "v" (str.++ "\u{1c}" (str.++ "o" (str.++ "'" (str.++ "D" (str.++ "G" (str.++ "S" (str.++ "'" (str.++ "D" (str.++ "G" (str.++ "S" (str.++ "'" (str.++ "D" (str.++ "G" (str.++ "S" (str.++ "'" (str.++ "E" (str.++ "Q" (str.++ "A" (str.++ "\u{0d}" (str.++ "'" (str.++ "E" (str.++ "Q" (str.++ "A" (str.++ "'" ""))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(define-fun Witness2 () String (str.++ "E" (str.++ "Q" (str.++ "D" (str.++ "'" (str.++ "R" (str.++ "F" (str.++ "F" (str.++ "'" (str.++ "R" (str.++ "F" (str.++ "F" (str.++ "/" (str.++ "K" (str.++ "'" (str.++ "R" (str.++ "F" (str.++ "F" (str.++ "\u{d7}" (str.++ "'" (str.++ "T" (str.++ "M" (str.++ "D" (str.++ "'" (str.++ "T" (str.++ "M" (str.++ "D" (str.++ "'" (str.++ "T" (str.++ "M" (str.++ "D" (str.++ "'" (str.++ "D" (str.++ "T" (str.++ "M" (str.++ "'" (str.++ "D" (str.++ "T" (str.++ "M" (str.++ "'" (str.++ "D" (str.++ "T" (str.++ "M" (str.++ "'" (str.++ "L" (str.++ "O" (str.++ "C" (str.++ "'" (str.++ "L" (str.++ "O" (str.++ "C" (str.++ "\u{c8}" (str.++ "W" (str.++ "'" (str.++ "M" (str.++ "E" (str.++ "A" (str.++ "'" (str.++ "D" (str.++ "I" (str.++ "M" (str.++ "2" (str.++ "\u{f1}" (str.++ "'" (str.++ "T" (str.++ "M" (str.++ "P" (str.++ "a" (str.++ "\u{b2}" (str.++ "W" (str.++ "'" (str.++ "T" (str.++ "M" (str.++ "P" (str.++ "\u{17}" (str.++ "\u{a7}" (str.++ "'" (str.++ "R" (str.++ "N" (str.++ "G" (str.++ "'" (str.++ "R" (str.++ "N" (str.++ "G" (str.++ "'" (str.++ "S" (str.++ "E" (str.++ "L" (str.++ "J" (str.++ "K" (str.++ "'" (str.++ "S" (str.++ "E" (str.++ "L" (str.++ "'" (str.++ "F" (str.++ "T" (str.++ "X" (str.++ "'" (str.++ "F" (str.++ "T" (str.++ "X" (str.++ "\u{d7}" (str.++ "\u{07}" (str.++ "'" (str.++ "D" (str.++ "G" (str.++ "S" (str.++ "(" (str.++ "'" (str.++ "D" (str.++ "G" (str.++ "S" (str.++ "'" (str.++ "D" (str.++ "G" (str.++ "S" (str.++ "'" (str.++ "D" (str.++ "G" (str.++ "S" (str.++ "\u{00}" (str.++ "'" (str.++ "E" (str.++ "Q" (str.++ "A" (str.++ "'" "")))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(assert (= regexA (re.++ (re.++ (re.++ (str.to_re (str.++ "E" (str.++ "Q" (str.++ "D" ""))))(re.++ (re.* (re.union (re.range "\u{00}" "&") (re.range "(" "\u{ff}"))) (re.range "'" "'")))(re.++ ((_ re.loop 0 9) (re.++ (str.to_re (str.++ "R" (str.++ "F" (str.++ "F" ""))))(re.++ (re.* (re.union (re.range "\u{00}" "&") (re.range "(" "\u{ff}"))) (re.range "'" "'"))))(re.++ (re.opt (re.++ (str.to_re (str.++ "E" (str.++ "Q" (str.++ "N" ""))))(re.++ (re.* (re.union (re.range "\u{00}" "&") (re.range "(" "\u{ff}"))) (re.range "'" "'"))))(re.++ ((_ re.loop 0 9) (re.++ (str.to_re (str.++ "T" (str.++ "M" (str.++ "D" ""))))(re.++ (re.* (re.union (re.range "\u{00}" "&") (re.range "(" "\u{ff}"))) (re.range "'" "'"))))(re.++ ((_ re.loop 0 9) (re.++ (str.to_re (str.++ "D" (str.++ "T" (str.++ "M" ""))))(re.++ (re.* (re.union (re.range "\u{00}" "&") (re.range "(" "\u{ff}"))) (re.range "'" "'"))))(re.++ ((_ re.loop 0 9) (re.++ (str.to_re (str.++ "L" (str.++ "O" (str.++ "C" ""))))(re.++ (re.* (re.union (re.range "\u{00}" "&") (re.range "(" "\u{ff}"))) (re.range "'" "'"))))(re.++ ((_ re.loop 0 9) (re.++ (str.to_re (str.++ "M" (str.++ "E" (str.++ "A" ""))))(re.++ (re.* (re.union (re.range "\u{00}" "&") (re.range "(" "\u{ff}"))) (re.range "'" "'"))))(re.++ ((_ re.loop 0 9) (re.++ (str.to_re (str.++ "D" (str.++ "I" (str.++ "M" ""))))(re.++ (re.* (re.union (re.range "\u{00}" "&") (re.range "(" "\u{ff}"))) (re.range "'" "'"))))(re.++ ((_ re.loop 0 9) (re.++ (str.to_re (str.++ "T" (str.++ "M" (str.++ "P" ""))))(re.++ (re.* (re.union (re.range "\u{00}" "&") (re.range "(" "\u{ff}"))) (re.range "'" "'"))))(re.++ ((_ re.loop 0 9) (re.++ (str.to_re (str.++ "R" (str.++ "N" (str.++ "G" ""))))(re.++ (re.* (re.union (re.range "\u{00}" "&") (re.range "(" "\u{ff}"))) (re.range "'" "'"))))(re.++ ((_ re.loop 0 9) (re.++ (str.to_re (str.++ "S" (str.++ "E" (str.++ "L" ""))))(re.++ (re.* (re.union (re.range "\u{00}" "&") (re.range "(" "\u{ff}"))) (re.range "'" "'"))))(re.++ ((_ re.loop 0 9) (re.++ (str.to_re (str.++ "F" (str.++ "T" (str.++ "X" ""))))(re.++ (re.* (re.union (re.range "\u{00}" "&") (re.range "(" "\u{ff}"))) (re.range "'" "'"))))(re.++ ((_ re.loop 0 9) (re.++ (str.to_re (str.++ "D" (str.++ "G" (str.++ "S" ""))))(re.++ (re.* (re.union (re.range "\u{00}" "&") (re.range "(" "\u{ff}"))) (re.range "'" "'"))))(re.++ ((_ re.loop 0 9) (re.++ (str.to_re (str.++ "E" (str.++ "Q" (str.++ "A" ""))))(re.++ (re.* (re.union (re.range "\u{00}" "&") (re.range "(" "\u{ff}"))) (re.range "'" "'")))) (re.opt (re.++ (str.to_re (str.++ "N" (str.++ "A" (str.++ "D" ""))))(re.++ (re.* (re.union (re.range "\u{00}" "&") (re.range "(" "\u{ff}"))) (re.range "'" "'")))))))))))))))))) (re.opt (re.++ (re.++ (str.to_re (str.++ "T" (str.++ "D" (str.++ "T" ""))))(re.++ (re.* (re.union (re.range "\u{00}" "&") (re.range "(" "\u{ff}"))) (re.range "'" "'")))(re.++ ((_ re.loop 0 9) (re.++ (str.to_re (str.++ "R" (str.++ "F" (str.++ "F" ""))))(re.++ (re.* (re.union (re.range "\u{00}" "&") (re.range "(" "\u{ff}"))) (re.range "'" "'"))))(re.++ ((_ re.loop 0 9) (re.++ (str.to_re (str.++ "L" (str.++ "O" (str.++ "C" ""))))(re.++ (re.* (re.union (re.range "\u{00}" "&") (re.range "(" "\u{ff}"))) (re.range "'" "'")))) ((_ re.loop 0 9) (re.++ (str.to_re (str.++ "D" (str.++ "T" (str.++ "M" ""))))(re.++ (re.* (re.union (re.range "\u{00}" "&") (re.range "(" "\u{ff}"))) (re.range "'" "'")))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "<" (str.++ "s" (str.++ "a" (str.++ "m" (str.++ "p" (str.++ ">" (str.++ "\u{bf}" (str.++ "f" "")))))))))

(define-fun Witness2 () String (str.++ "<" (str.++ "/" (str.++ "s" (str.++ "t" (str.++ "r" (str.++ "i" (str.++ "k" (str.++ "e" (str.++ "\u{a0}" (str.++ "\u{22}" (str.++ "\u{a8}" (str.++ "\u{1e}" (str.++ "\u{09}" (str.++ ">" (str.++ "\u{94}" (str.++ "\u{e1}" (str.++ "\u{84}" (str.++ "\u{d3}" (str.++ "S" ""))))))))))))))))))))

(assert (= regexA (re.++ (re.range "<" "<")(re.++ (re.opt (re.range "/" "/"))(re.++ (re.union (re.range "a" "a")(re.union (str.to_re (str.++ "a" (str.++ "b" (str.++ "b" (str.++ "r" "")))))(re.union (str.to_re (str.++ "a" (str.++ "c" (str.++ "r" (str.++ "o" (str.++ "n" (str.++ "y" (str.++ "m" ""))))))))(re.union (str.to_re (str.++ "a" (str.++ "d" (str.++ "d" (str.++ "r" (str.++ "e" (str.++ "s" (str.++ "s" ""))))))))(re.union (str.to_re (str.++ "a" (str.++ "p" (str.++ "p" (str.++ "l" (str.++ "e" (str.++ "t" "")))))))(re.union (str.to_re (str.++ "a" (str.++ "r" (str.++ "e" (str.++ "a" "")))))(re.union (re.range "b" "b")(re.union (str.to_re (str.++ "b" (str.++ "a" (str.++ "s" (str.++ "e" "")))))(re.union (str.to_re (str.++ "b" (str.++ "a" (str.++ "s" (str.++ "e" (str.++ "f" (str.++ "o" (str.++ "n" (str.++ "t" "")))))))))(re.union (str.to_re (str.++ "b" (str.++ "d" (str.++ "o" ""))))(re.union (str.to_re (str.++ "b" (str.++ "i" (str.++ "g" ""))))(re.union (str.to_re (str.++ "b" (str.++ "l" (str.++ "o" (str.++ "c" (str.++ "k" (str.++ "q" (str.++ "u" (str.++ "o" (str.++ "t" (str.++ "e" "")))))))))))(re.union (str.to_re (str.++ "b" (str.++ "o" (str.++ "d" (str.++ "y" "")))))(re.union (str.to_re (str.++ "b" (str.++ "r" "")))(re.union (str.to_re (str.++ "b" (str.++ "u" (str.++ "t" (str.++ "t" (str.++ "o" (str.++ "n" "")))))))(re.union (str.to_re (str.++ "c" (str.++ "a" (str.++ "p" (str.++ "t" (str.++ "i" (str.++ "o" (str.++ "n" ""))))))))(re.union (str.to_re (str.++ "c" (str.++ "e" (str.++ "n" (str.++ "t" (str.++ "e" (str.++ "r" "")))))))(re.union (str.to_re (str.++ "c" (str.++ "i" (str.++ "t" (str.++ "e" "")))))(re.union (str.to_re (str.++ "c" (str.++ "o" (str.++ "d" (str.++ "e" "")))))(re.union (str.to_re (str.++ "c" (str.++ "o" (str.++ "l" ""))))(re.union (str.to_re (str.++ "c" (str.++ "o" (str.++ "l" (str.++ "g" (str.++ "r" (str.++ "o" (str.++ "u" (str.++ "p" "")))))))))(re.union (str.to_re (str.++ "d" (str.++ "d" "")))(re.union (str.to_re (str.++ "d" (str.++ "e" (str.++ "l" ""))))(re.union (str.to_re (str.++ "d" (str.++ "i" (str.++ "r" ""))))(re.union (str.to_re (str.++ "d" (str.++ "i" (str.++ "v" ""))))(re.union (str.to_re (str.++ "d" (str.++ "f" (str.++ "n" ""))))(re.union (str.to_re (str.++ "d" (str.++ "l" "")))(re.union (str.to_re (str.++ "d" (str.++ "t" "")))(re.union (str.to_re (str.++ "e" (str.++ "m" "")))(re.union (str.to_re (str.++ "f" (str.++ "i" (str.++ "e" (str.++ "l" (str.++ "d" (str.++ "s" (str.++ "e" (str.++ "t" "")))))))))(re.union (str.to_re (str.++ "f" (str.++ "o" (str.++ "n" (str.++ "t" "")))))(re.union (str.to_re (str.++ "f" (str.++ "o" (str.++ "r" (str.++ "m" "")))))(re.union (str.to_re (str.++ "f" (str.++ "r" (str.++ "a" (str.++ "m" (str.++ "e" ""))))))(re.union (str.to_re (str.++ "f" (str.++ "r" (str.++ "a" (str.++ "m" (str.++ "e" (str.++ "s" (str.++ "e" (str.++ "t" "")))))))))(re.union (re.++ (re.range "h" "h") (re.range "1" "6"))(re.union (str.to_re (str.++ "h" (str.++ "e" (str.++ "a" (str.++ "d" "")))))(re.union (str.to_re (str.++ "h" (str.++ "r" "")))(re.union (str.to_re (str.++ "h" (str.++ "t" (str.++ "m" (str.++ "l" "")))))(re.union (re.range "i" "i")(re.union (str.to_re (str.++ "i" (str.++ "f" (str.++ "r" (str.++ "a" (str.++ "m" (str.++ "e" "")))))))(re.union (str.to_re (str.++ "i" (str.++ "m" (str.++ "g" ""))))(re.union (str.to_re (str.++ "i" (str.++ "n" (str.++ "p" (str.++ "u" (str.++ "t" ""))))))(re.union (str.to_re (str.++ "i" (str.++ "n" (str.++ "s" ""))))(re.union (str.to_re (str.++ "i" (str.++ "s" (str.++ "i" (str.++ "n" (str.++ "d" (str.++ "e" (str.++ "x" ""))))))))(re.union (str.to_re (str.++ "k" (str.++ "b" (str.++ "d" ""))))(re.union (str.to_re (str.++ "l" (str.++ "a" (str.++ "b" (str.++ "e" (str.++ "l" ""))))))(re.union (str.to_re (str.++ "l" (str.++ "e" (str.++ "g" (str.++ "e" (str.++ "n" (str.++ "d" "")))))))(re.union (str.to_re (str.++ "l" (str.++ "i" "")))(re.union (str.to_re (str.++ "l" (str.++ "i" (str.++ "n" (str.++ "k" "")))))(re.union (str.to_re (str.++ "m" (str.++ "a" (str.++ "p" ""))))(re.union (str.to_re (str.++ "m" (str.++ "e" (str.++ "n" (str.++ "u" "")))))(re.union (str.to_re (str.++ "m" (str.++ "e" (str.++ "t" (str.++ "a" "")))))(re.union (str.to_re (str.++ "n" (str.++ "o" (str.++ "f" (str.++ "r" (str.++ "a" (str.++ "m" (str.++ "e" (str.++ "s" "")))))))))(re.union (str.to_re (str.++ "n" (str.++ "o" (str.++ "s" (str.++ "c" (str.++ "r" (str.++ "i" (str.++ "p" (str.++ "t" "")))))))))(re.union (str.to_re (str.++ "o" (str.++ "b" (str.++ "j" (str.++ "e" (str.++ "c" (str.++ "t" "")))))))(re.union (str.to_re (str.++ "o" (str.++ "l" "")))(re.union (str.to_re (str.++ "o" (str.++ "p" (str.++ "t" (str.++ "g" (str.++ "r" (str.++ "o" (str.++ "u" (str.++ "p" "")))))))))(re.union (str.to_re (str.++ "o" (str.++ "p" (str.++ "t" (str.++ "i" (str.++ "o" (str.++ "n" "")))))))(re.union (re.range "p" "p")(re.union (str.to_re (str.++ "p" (str.++ "a" (str.++ "r" (str.++ "a" (str.++ "m" ""))))))(re.union (str.to_re (str.++ "p" (str.++ "r" (str.++ "e" ""))))(re.union (re.union (re.range "q" "q") (re.range "s" "s"))(re.union (str.to_re (str.++ "s" (str.++ "a" (str.++ "m" (str.++ "p" "")))))(re.union (str.to_re (str.++ "s" (str.++ "c" (str.++ "r" (str.++ "i" (str.++ "p" (str.++ "t" "")))))))(re.union (str.to_re (str.++ "s" (str.++ "e" (str.++ "l" (str.++ "e" (str.++ "c" (str.++ "t" "")))))))(re.union (str.to_re (str.++ "s" (str.++ "m" (str.++ "a" (str.++ "l" (str.++ "l" ""))))))(re.union (str.to_re (str.++ "s" (str.++ "p" (str.++ "a" (str.++ "n" "")))))(re.union (str.to_re (str.++ "s" (str.++ "t" (str.++ "r" (str.++ "i" (str.++ "k" (str.++ "e" "")))))))(re.union (str.to_re (str.++ "s" (str.++ "t" (str.++ "r" (str.++ "o" (str.++ "n" (str.++ "g" "")))))))(re.union (str.to_re (str.++ "s" (str.++ "t" (str.++ "y" (str.++ "l" (str.++ "e" ""))))))(re.union (str.to_re (str.++ "s" (str.++ "u" (str.++ "b" ""))))(re.union (str.to_re (str.++ "s" (str.++ "u" (str.++ "p" ""))))(re.union (str.to_re (str.++ "t" (str.++ "a" (str.++ "b" (str.++ "l" (str.++ "e" ""))))))(re.union (str.to_re (str.++ "t" (str.++ "b" (str.++ "o" (str.++ "d" (str.++ "y" ""))))))(re.union (str.to_re (str.++ "t" (str.++ "d" "")))(re.union (str.to_re (str.++ "t" (str.++ "e" (str.++ "x" (str.++ "t" (str.++ "a" (str.++ "r" (str.++ "e" (str.++ "a" "")))))))))(re.union (str.to_re (str.++ "t" (str.++ "f" (str.++ "o" (str.++ "o" (str.++ "t" ""))))))(re.union (str.to_re (str.++ "t" (str.++ "h" "")))(re.union (str.to_re (str.++ "t" (str.++ "h" (str.++ "e" (str.++ "a" (str.++ "d" ""))))))(re.union (str.to_re (str.++ "t" (str.++ "i" (str.++ "t" (str.++ "l" (str.++ "e" ""))))))(re.union (str.to_re (str.++ "t" (str.++ "r" "")))(re.union (str.to_re (str.++ "t" (str.++ "t" "")))(re.union (re.range "u" "u")(re.union (str.to_re (str.++ "u" (str.++ "l" "")))(re.union (str.to_re (str.++ "v" (str.++ "a" (str.++ "r" "")))) (str.to_re (str.++ "x" (str.++ "m" (str.++ "p" "")))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))(re.++ (re.* (re.++ (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))) (re.* (re.union (re.++ (re.range "\u{22}" "\u{22}")(re.++ (re.* (re.union (re.range "\u{00}" "!") (re.range "#" "\u{ff}"))) (re.* (re.range "\u{22}" "\u{22}")))) (re.union (re.range "\u{00}" "=") (re.range "?" "\u{ff}")))))) (re.range ">" ">")))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "\u{cb}" (str.++ "t" (str.++ "\u{a3}" (str.++ "\u{8e}" (str.++ "\u{5c}" ""))))))

(define-fun Witness2 () String (str.++ "x" (str.++ "\u{a3}" (str.++ "\u{e5}" (str.++ "\u{9d}" (str.++ "\u{04}" ""))))))

(assert (= regexA (re.range "\u{a3}" "\u{a3}")))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "9" (str.++ "." (str.++ "_" (str.++ "-" "")))))

(define-fun Witness2 () String (str.++ "6" (str.++ "\u{e8}" (str.++ "m" (str.++ "_" (str.++ "." (str.++ "8" "")))))))

(assert (= regexA (re.++ (re.++ (re.+ (re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "_" "_") (re.range "a" "z")))))(re.++ (re.range "." ".") ((_ re.loop 1 3) (re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "_" "_") (re.range "a" "z"))))))) (str.to_re ""))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "2" (str.++ "Z" (str.++ "2" (str.++ "F" (str.++ " " (str.++ "5" (str.++ "W" (str.++ "0" "")))))))))

(define-fun Witness2 () String (str.++ "5" (str.++ "7" (str.++ "9" (str.++ "0" (str.++ "8" (str.++ "-" (str.++ "1" (str.++ "7" (str.++ "9" (str.++ "9" "")))))))))))

(assert (= regexA (re.union (re.++ (str.to_re "")(re.++ ((_ re.loop 5 5) (re.range "0" "9"))(re.++ (re.range "-" "-") ((_ re.loop 4 4) (re.range "0" "9")))))(re.union ((_ re.loop 5 5) (re.range "0" "9")) (re.++ (re.range "A" "Z")(re.++ (re.range "0" "9")(re.++ (re.range "A" "Z")(re.++ (re.range " " " ")(re.++ (re.range "0" "9")(re.++ (re.range "A" "Z")(re.++ (re.range "0" "9") (str.to_re ""))))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "(" (str.++ "7" (str.++ "8" (str.++ "1" (str.++ ")" (str.++ " " (str.++ "6" (str.++ "8" (str.++ "9" (str.++ "-" (str.++ "8" (str.++ "9" (str.++ "4" (str.++ "2" (str.++ "1" (str.++ "\u{f6}" "")))))))))))))))))

(define-fun Witness2 () String (str.++ "\u{08}" (str.++ "(" (str.++ "2" (str.++ "5" (str.++ "8" (str.++ ")" (str.++ " " (str.++ "8" (str.++ "9" (str.++ "8" (str.++ "-" (str.++ "1" (str.++ "0" (str.++ "1" (str.++ "4" ""))))))))))))))))

(assert (= regexA (re.++ (re.range "(" "(")(re.++ ((_ re.loop 3 3) (re.range "0" "9"))(re.++ (str.to_re (str.++ ")" (str.++ " " "")))(re.++ ((_ re.loop 3 3) (re.range "0" "9"))(re.++ (re.range "-" "-") ((_ re.loop 4 4) (re.range "0" "9")))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "U" (str.++ "." (str.++ "-" (str.++ "\u{fb}" (str.++ "\u{0d}" (str.++ "Y" (str.++ "7" (str.++ "\u{a0}" (str.++ "S" (str.++ "N" (str.++ "C" ""))))))))))))

(define-fun Witness2 () String (str.++ "}" (str.++ "\u{1e}" (str.++ "H" (str.++ "-" (str.++ "z" (str.++ "\u{f8}" (str.++ "E" (str.++ "." (str.++ "\u{0d}" (str.++ "D" (str.++ "\u{d0}" (str.++ "-" (str.++ "," (str.++ "\u{85}" (str.++ "S" (str.++ "r" (str.++ "." ""))))))))))))))))))

(assert (= regexA (re.++ (re.++ (re.range "A" "Z")(re.++ (re.opt (re.range "." "."))(re.++ (re.* (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))(re.++ (re.opt (re.range "-" "-"))(re.++ (re.opt (re.range "A" "Z")) (re.* (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))))))))(re.++ (re.opt (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (re.union (re.++ (re.range "A" "Z") (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))) (re.++ (re.opt (re.range "A" "Z")) (re.opt (re.range "." "."))))(re.++ (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))(re.++ (re.++ (re.opt (re.union (re.++ (re.range "A" "Z") ((_ re.loop 1 3) (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))) (re.++ (str.to_re (str.++ "S" (str.++ "t" (str.++ "." "")))) (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))))(re.++ (re.range "A" "Z")(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))(re.++ (re.opt (re.range "-" "-"))(re.++ (re.opt (re.range "A" "Z")) (re.* (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))))))))(re.++ (re.union (re.++ (re.range "," ",") (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))) (str.to_re "")) (re.union (str.to_re (str.++ "J" (str.++ "r" (str.++ "." ""))))(re.union (str.to_re (str.++ "S" (str.++ "r" (str.++ "." ""))))(re.union (str.to_re (str.++ "I" (str.++ "V" "")))(re.union (str.to_re (str.++ "I" (str.++ "I" (str.++ "I" ""))))(re.union (str.to_re (str.++ "I" (str.++ "I" ""))) (str.to_re ""))))))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "v" (str.++ "i" (str.++ "v" (str.++ "d" "")))))

(define-fun Witness2 () String (str.++ "d" (str.++ "\u{04}" "")))

(assert (= regexA (re.++ (re.opt (re.++ (str.to_re (str.++ "v" (str.++ "i" ""))) (re.range "v" "v"))) (re.range "d" "d"))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "\u{22}" (str.++ "\u{00}" (str.++ "\u{22}" (str.++ "\u{c8}" (str.++ "\u{a4}" (str.++ "\u{03}" "")))))))

(define-fun Witness2 () String (str.++ "\u{22}" (str.++ "\u{22}" (str.++ "\u{ac}" (str.++ "h" "")))))

(assert (= regexA (re.++ (re.range "\u{22}" "\u{22}")(re.++ (re.* (re.union (re.range "\u{00}" "\u{09}")(re.union (re.range "\u{0b}" "\u{0c}")(re.union (re.range "\u{0e}" "!") (re.range "#" "\u{ff}"))))) (re.range "\u{22}" "\u{22}")))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "\u{84}" (str.++ "\u{e0}" (str.++ "/" (str.++ "<" (str.++ "\u{d6}" (str.++ "\u{9b}" (str.++ ">" (str.++ "/" (str.++ "e" (str.++ "\u{07}" "")))))))))))

(define-fun Witness2 () String (str.++ "/" (str.++ "<" (str.++ "/" (str.++ "\u{b5}" (str.++ "3" (str.++ "\u{a3}" (str.++ "\u{a4}" (str.++ ">" (str.++ "/" (str.++ "e" "")))))))))))

(assert (= regexA (re.++ (re.range "/" "/")(re.++ (re.++ (re.range "<" "<") (re.opt (re.range "/" "/")))(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))(re.++ (re.++ (re.* (re.union (re.range "\u{00}" "=") (re.range "?" "\u{ff}"))) (re.range ">" ">")) (str.to_re (str.++ "/" (str.++ "e" "")))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "\u{ed}" (str.++ "M" (str.++ "\u{e4}" (str.++ "&" (str.++ "l" (str.++ "t" (str.++ ";" (str.++ "i" (str.++ "m" (str.++ "g" (str.++ "O" (str.++ "\u{05}" (str.++ "7" (str.++ "/" (str.++ "t" (str.++ "}" "")))))))))))))))))

(define-fun Witness2 () String (str.++ "\u{1d}" (str.++ "&" (str.++ "l" (str.++ "t" (str.++ ";" (str.++ "i" (str.++ "m" (str.++ "g" (str.++ "~" (str.++ "\u{02}" (str.++ "/" (str.++ "t" (str.++ "r" ""))))))))))))))

(assert (= regexA (re.++ (str.to_re (str.++ "&" (str.++ "l" (str.++ "t" (str.++ ";" "")))))(re.++ (re.union (re.range "I" "I") (re.range "i" "i"))(re.++ (re.union (re.range "M" "M") (re.range "m" "m"))(re.++ (re.union (re.range "G" "G") (re.range "g" "g")) (re.++ (re.* (re.union (re.range "\u{00}" "%")(re.union (re.range "'" ":")(re.union (re.range "<" "f")(re.union (re.range "h" "s") (re.range "u" "\u{ff}"))))))(re.++ (re.* (re.union (re.range "\u{00}" "%")(re.union (re.range "'" ".")(re.union (re.range "0" ":")(re.union (re.range "<" "f")(re.union (re.range "h" "s") (re.range "u" "\u{ff}")))))))(re.++ (re.* (re.union (re.range "&" "&")(re.union (re.range "/" "/")(re.union (re.range ";" ";")(re.union (re.range "g" "g") (re.range "t" "t")))))) (re.union (re.range "&" "&")(re.union (re.range ";" ";")(re.union (re.range "g" "g") (re.range "t" "t")))))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "9" (str.++ "8" (str.++ "T" (str.++ "\u{83}" (str.++ "l" (str.++ ">" (str.++ "\u{bb}" (str.++ "\u{dd}" (str.++ "\u{a2}" ""))))))))))

(define-fun Witness2 () String (str.++ "9" (str.++ "9" (str.++ "7" ""))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.opt (re.range "-" "-"))(re.++ (re.* (re.range "0" "9"))(re.++ (re.opt (re.range "." "."))(re.++ (re.opt (re.range "0" "9"))(re.++ (re.opt (re.range "0" "9"))(re.++ (re.opt (re.range "0" "9")) (re.opt (re.range "0" "9")))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "8" (str.++ "6" (str.++ "3" (str.++ "8" (str.++ "3" (str.++ "8" (str.++ "9" (str.++ "9" (str.++ "8" (str.++ "9" (str.++ "\u{bb}" (str.++ "\u{fa}" "")))))))))))))

(define-fun Witness2 () String (str.++ "8" (str.++ "5" (str.++ "7" (str.++ "1" (str.++ "9" (str.++ "6" (str.++ "4" (str.++ "4" (str.++ "1" (str.++ "9" (str.++ "\u{0b}" ""))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.range "8" "9") ((_ re.loop 9 9) (re.range "0" "9"))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "3" (str.++ "P" (str.++ "H" (str.++ "\u{14}" (str.++ "A" (str.++ "\u{dc}" (str.++ "\u{90}" (str.++ "\u{d7}" (str.++ "r" (str.++ "M" (str.++ "A" (str.++ "C" (str.++ "y" (str.++ "y" (str.++ "\u{1f}" ""))))))))))))))))

(define-fun Witness2 () String (str.++ "P" (str.++ "h" (str.++ "A" (str.++ "R" (str.++ "m" (str.++ "a" (str.++ "C" (str.++ "y" "")))))))))

(assert (= regexA (re.union (str.to_re (str.++ "p" (str.++ "h" (str.++ "a" (str.++ "r" (str.++ "m" (str.++ "a" (str.++ "c" (str.++ "y" ""))))))))) (re.++ (re.range "p" "p")(re.++ (re.opt ((_ re.loop 1 3) (re.union (re.range "\u{00}" "\u{09}") (re.range "\u{0b}" "\u{ff}"))))(re.++ (re.range "h" "h")(re.++ (re.opt ((_ re.loop 1 3) (re.union (re.range "\u{00}" "\u{09}") (re.range "\u{0b}" "\u{ff}"))))(re.++ (re.range "a" "a")(re.++ (re.opt ((_ re.loop 1 3) (re.union (re.range "\u{00}" "\u{09}") (re.range "\u{0b}" "\u{ff}"))))(re.++ (re.range "r" "r")(re.++ (re.opt (re.++ (re.union (re.range "\u{00}" "\u{09}") (re.range "\u{0b}" "\u{ff}")) (str.to_re (str.++ "{" (str.++ "1" (str.++ "," (str.++ "3" "")))))))(re.++ (re.range "m" "m")(re.++ (re.opt ((_ re.loop 1 3) (re.union (re.range "\u{00}" "\u{09}") (re.range "\u{0b}" "\u{ff}"))))(re.++ (re.range "a" "a")(re.++ (re.opt ((_ re.loop 1 3) (re.union (re.range "\u{00}" "\u{09}") (re.range "\u{0b}" "\u{ff}"))))(re.++ (re.range "c" "c")(re.++ (re.opt ((_ re.loop 1 3) (re.union (re.range "\u{00}" "\u{09}") (re.range "\u{0b}" "\u{ff}")))) (re.range "y" "y"))))))))))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "\u{b6}" (str.++ "\u{98}" (str.++ "\u{ba}" (str.++ "\u{18}" (str.++ "M" (str.++ "2" (str.++ "5" (str.++ "." (str.++ "0" (str.++ "0" "")))))))))))

(define-fun Witness2 () String (str.++ "2" (str.++ "1" "")))

(assert (= regexA (re.union (re.++ (str.to_re "")(re.++ (re.++ (re.union (re.range "0" "9")(re.union (re.++ (re.range "1" "1") (re.range "0" "9")) (re.++ (re.range "2" "2") (re.range "0" "4")))) (re.opt (re.++ (re.range "." ".")(re.++ (re.range "0" "9") (re.opt (re.range "0" "9")))))) (str.to_re ""))) (re.++ (re.++ (str.to_re (str.++ "2" (str.++ "5" ""))) (re.opt (re.++ (str.to_re (str.++ "." (str.++ "0" ""))) (re.opt (re.range "0" "0"))))) (str.to_re "")))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "W" (str.++ "o" (str.++ "r" (str.++ "l" (str.++ "d" (str.++ " " (str.++ "o" (str.++ "f" (str.++ " " (str.++ "W" (str.++ "a" (str.++ "r" (str.++ "c" (str.++ "r" (str.++ "a" (str.++ "f" (str.++ "t" (str.++ " " (str.++ "P" (str.++ "o" (str.++ "w" (str.++ "e" (str.++ "r" (str.++ "l" (str.++ "e" (str.++ "v" (str.++ "e" (str.++ "l" (str.++ "i" (str.++ "n" (str.++ "g" (str.++ "\u{13}" (str.++ "\u{ca}" ""))))))))))))))))))))))))))))))))))

(define-fun Witness2 () String (str.++ "\u{05}" (str.++ "\u{88}" (str.++ "5" (str.++ "W" (str.++ "o" (str.++ "r" (str.++ "l" (str.++ "d" (str.++ " " (str.++ "o" (str.++ "f" (str.++ " " (str.++ "W" (str.++ "a" (str.++ "r" (str.++ "c" (str.++ "r" (str.++ "a" (str.++ "f" (str.++ "t" (str.++ " " (str.++ "P" (str.++ "o" (str.++ "w" (str.++ "e" (str.++ "r" (str.++ "l" (str.++ "e" (str.++ "v" (str.++ "e" (str.++ "l" (str.++ "i" (str.++ "n" (str.++ "g" "")))))))))))))))))))))))))))))))))))

(assert (= regexA (str.to_re (str.++ "W" (str.++ "o" (str.++ "r" (str.++ "l" (str.++ "d" (str.++ " " (str.++ "o" (str.++ "f" (str.++ " " (str.++ "W" (str.++ "a" (str.++ "r" (str.++ "c" (str.++ "r" (str.++ "a" (str.++ "f" (str.++ "t" (str.++ " " (str.++ "P" (str.++ "o" (str.++ "w" (str.++ "e" (str.++ "r" (str.++ "l" (str.++ "e" (str.++ "v" (str.++ "e" (str.++ "l" (str.++ "i" (str.++ "n" (str.++ "g" ""))))))))))))))))))))))))))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "\u{c0}" (str.++ "f" (str.++ "0" (str.++ "9" (str.++ "7" ""))))))

(define-fun Witness2 () String (str.++ "," (str.++ "9" (str.++ "5" ""))))

(assert (= regexA (re.++ (re.* (re.range "0" "9"))(re.++ (re.++ (re.range "\u{00}" "\u{ff}") (re.+ (re.range "0" "9"))) (re.opt (re.++ (re.union (re.range "+" "+") (re.range "-" "-")) (re.range "0" "9")))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "<" (str.++ "R" (str.++ "\u{f9}" (str.++ "\u{a9}" (str.++ "\u{a0}" (str.++ "o" (str.++ "n" (str.++ "\u{b5}" (str.++ "=" (str.++ "\u{22}" (str.++ "\u{c5}" (str.++ "\u{22}" (str.++ ">" (str.++ "\u{10}" "")))))))))))))))

(define-fun Witness2 () String (str.++ "<" (str.++ "h" (str.++ "\u{8f}" (str.++ "\u{9b}" (str.++ "\u{09}" (str.++ "o" (str.++ "n" (str.++ "k" (str.++ "=" (str.++ "\u{22}" (str.++ "\u{22}" (str.++ ">" "")))))))))))))

(assert (= regexA (re.++ (re.range "<" "<")(re.++ (re.union (re.range "A" "Z") (re.range "a" "z"))(re.++ (re.* (re.union (re.range "\u{00}" "=") (re.range "?" "\u{ff}")))(re.++ (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))(re.++ (str.to_re (str.++ "o" (str.++ "n" "")))(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))(re.++ (re.range "=" "=")(re.++ (re.union (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))(re.union (re.++ (re.range "'" "'")(re.++ (re.* (re.union (re.range "\u{00}" "&") (re.range "(" "\u{ff}"))) (re.range "'" "'"))) (re.++ (re.range "\u{22}" "\u{22}")(re.++ (re.* (re.union (re.range "\u{00}" "!") (re.range "#" "\u{ff}"))) (re.range "\u{22}" "\u{22}")))))(re.++ (re.* (re.union (re.range "\u{00}" "=") (re.range "?" "\u{ff}"))) (re.range ">" ">"))))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "V" (str.++ "j" (str.++ "h" (str.++ "k" (str.++ "j" (str.++ "h" (str.++ "k" ""))))))))

(define-fun Witness2 () String (str.++ "\u{f8}" (str.++ "\u{eb}" (str.++ "j" (str.++ "h" (str.++ "k" (str.++ "j" (str.++ "h" (str.++ "k" (str.++ "l" ""))))))))))

(assert (= regexA (str.to_re (str.++ "j" (str.++ "h" (str.++ "k" (str.++ "j" (str.++ "h" (str.++ "k" "")))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "\u{7f}" (str.++ "9" (str.++ "?" ""))))

(define-fun Witness2 () String (str.++ "2" (str.++ "-" "")))

(assert (= regexA (re.++ (re.* (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))) (re.opt (re.union (re.range "!" "\u{22}")(re.union (re.range "(" ")")(re.union (re.range "," ".")(re.union (re.range ":" ";") (re.range "?" "?")))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "\u{b8}" (str.++ "*" (str.++ "&" (str.++ "#" (str.++ "8" (str.++ "9" (str.++ "4" (str.++ ";" (str.++ "\u{f6}" ""))))))))))

(define-fun Witness2 () String (str.++ "&" (str.++ "#" (str.++ "9" (str.++ "3" (str.++ "2" (str.++ "2" (str.++ ";" (str.++ "B" "")))))))))

(assert (= regexA (re.++ (str.to_re (str.++ "&" (str.++ "#" "")))(re.++ ((_ re.loop 2 5) (re.range "0" "9")) (re.range ";" ";")))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "g" (str.++ "f" (str.++ "t" (str.++ "p" (str.++ ":" (str.++ "/" (str.++ "/" (str.++ "H" (str.++ "Y" (str.++ "." (str.++ "o" (str.++ "r" (str.++ "g" ""))))))))))))))

(define-fun Witness2 () String (str.++ "t" (str.++ "e" (str.++ "l" (str.++ "n" (str.++ "e" (str.++ "t" (str.++ ":" (str.++ "/" (str.++ "/" (str.++ "f" (str.++ "G" (str.++ "a" (str.++ "." (str.++ "a" (str.++ "m" ""))))))))))))))))

(assert (= regexA (re.++ (re.union (str.to_re (str.++ "h" (str.++ "t" (str.++ "t" (str.++ "p" (str.++ ":" (str.++ "/" (str.++ "/" ""))))))))(re.union (str.to_re (str.++ "f" (str.++ "t" (str.++ "p" (str.++ ":" (str.++ "/" (str.++ "/" "")))))))(re.union (str.to_re (str.++ "h" (str.++ "t" (str.++ "t" (str.++ "p" (str.++ "s" (str.++ ":" (str.++ "/" (str.++ "/" "")))))))))(re.union (str.to_re (str.++ "f" (str.++ "t" (str.++ "p" (str.++ "s" (str.++ ":" (str.++ "/" (str.++ "/" ""))))))))(re.union (str.to_re (str.++ "f" (str.++ "i" (str.++ "l" (str.++ "e" (str.++ ":" (str.++ "/" (str.++ "/" ""))))))))(re.union (str.to_re (str.++ "t" (str.++ "e" (str.++ "l" (str.++ "n" (str.++ "e" (str.++ "t" (str.++ ":" (str.++ "/" (str.++ "/" "")))))))))) (str.to_re (str.++ "w" (str.++ "w" (str.++ "w" (str.++ "." "")))))))))))(re.++ (re.opt (re.union (re.range "." ".") (re.range "w" "w")))(re.++ (re.+ (re.union (re.range "-" ".")(re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))))(re.++ (re.range "." ".") (re.union (str.to_re (str.++ "d" (str.++ "e" "")))(re.union (str.to_re (str.++ "n" (str.++ "e" (str.++ "t" ""))))(re.union (str.to_re (str.++ "o" (str.++ "r" (str.++ "g" ""))))(re.union (str.to_re (str.++ "t" (str.++ "o" "")))(re.union (str.to_re (str.++ "c" (str.++ "o" (str.++ "m" ""))))(re.union (str.to_re (str.++ "b" (str.++ "i" (str.++ "z" ""))))(re.union (str.to_re (str.++ "c" (str.++ "o" "")))(re.union (str.to_re (str.++ "u" (str.++ "k" "")))(re.union (str.to_re (str.++ "a" (str.++ "m" ""))) (str.to_re (str.++ "p" (str.++ "l" ""))))))))))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "9" (str.++ "5" (str.++ "2" (str.++ "-" (str.++ "9" (str.++ "4" (str.++ "0" (str.++ "8" (str.++ "8" (str.++ "8" (str.++ "\u{c1}" ""))))))))))))

(define-fun Witness2 () String (str.++ "\u{09}" (str.++ "7" (str.++ "1" (str.++ "5" (str.++ "-" (str.++ "8" (str.++ "5" (str.++ "3" (str.++ "8" (str.++ "5" (str.++ "8" (str.++ "+" "")))))))))))))

(assert (= regexA (re.++ ((_ re.loop 3 3) (re.range "0" "9"))(re.++ (re.range "-" "-") ((_ re.loop 6 6) (re.range "0" "9"))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "\u{a6}" (str.++ "\u{ca}" (str.++ "]" (str.++ "o" (str.++ "N" (str.++ "r" (str.++ "E" (str.++ "S" (str.++ "E" (str.++ "T" "")))))))))))

(define-fun Witness2 () String (str.++ "I" (str.++ "`" (str.++ "O" (str.++ "n" (str.++ "F" (str.++ "o" (str.++ "C" (str.++ "U" (str.++ "s" (str.++ "\u{c5}" "")))))))))))

(assert (= regexA (re.++ (str.to_re (str.++ "o" (str.++ "n" ""))) (re.union (str.to_re (str.++ "b" (str.++ "l" (str.++ "u" (str.++ "r" "")))))(re.union (re.++ (re.range "c" "c") (re.union (str.to_re (str.++ "h" (str.++ "a" (str.++ "n" (str.++ "g" (str.++ "e" "")))))) (str.to_re (str.++ "l" (str.++ "i" (str.++ "c" (str.++ "k" "")))))))(re.union (str.to_re (str.++ "d" (str.++ "b" (str.++ "l" (str.++ "c" (str.++ "l" (str.++ "i" (str.++ "c" (str.++ "k" "")))))))))(re.union (str.to_re (str.++ "f" (str.++ "o" (str.++ "c" (str.++ "u" (str.++ "s" ""))))))(re.union (str.to_re (str.++ "k" (str.++ "e" (str.++ "y" (str.++ "p" (str.++ "r" (str.++ "e" (str.++ "s" (str.++ "s" "")))))))))(re.union (re.++ (re.union (str.to_re (str.++ "k" (str.++ "e" (str.++ "y" "")))) (str.to_re (str.++ "m" (str.++ "o" (str.++ "u" (str.++ "s" (str.++ "e" ""))))))) (re.union (str.to_re (str.++ "d" (str.++ "o" (str.++ "w" (str.++ "n" ""))))) (str.to_re (str.++ "u" (str.++ "p" "")))))(re.union (re.++ (re.opt (str.to_re (str.++ "u" (str.++ "n" "")))) (str.to_re (str.++ "l" (str.++ "o" (str.++ "a" (str.++ "d" ""))))))(re.union (re.++ (str.to_re (str.++ "m" (str.++ "o" (str.++ "u" (str.++ "s" (str.++ "e" "")))))) (re.union (str.to_re (str.++ "m" (str.++ "o" (str.++ "v" (str.++ "e" ""))))) (re.++ (re.range "o" "o") (re.union (str.to_re (str.++ "u" (str.++ "t" ""))) (str.to_re (str.++ "v" (str.++ "e" (str.++ "r" ""))))))))(re.union (str.to_re (str.++ "r" (str.++ "e" (str.++ "s" (str.++ "e" (str.++ "t" "")))))) (re.++ (re.range "s" "s") (re.union (str.to_re (str.++ "e" (str.++ "l" (str.++ "e" (str.++ "c" (str.++ "t" "")))))) (str.to_re (str.++ "u" (str.++ "b" (str.++ "m" (str.++ "i" (str.++ "t" ""))))))))))))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "," (str.++ "\u{b2}" (str.++ "d" (str.++ "\u{bb}" (str.++ "|" (str.++ "6" (str.++ "-" (str.++ "B" (str.++ "G" (str.++ "y" (str.++ "-" (str.++ "9" (str.++ "8" ""))))))))))))))

(define-fun Witness2 () String (str.++ "\u{e2}" (str.++ "\u{95}" (str.++ "3" (str.++ "3" (str.++ "5" (str.++ "-" (str.++ "y" (str.++ "k" (str.++ "J" (str.++ "-" (str.++ "8" (str.++ "0" (str.++ "\u{db}" ""))))))))))))))

(assert (= regexA (re.union (re.++ ((_ re.loop 3 3) (re.union (re.range "A" "Z") (re.range "a" "z"))) ((_ re.loop 3 3) (re.range "0" "9")))(re.union (re.++ ((_ re.loop 2 2) (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))(re.++ (re.range "-" "-")(re.++ ((_ re.loop 2 2) (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))(re.++ (re.range "-" "-") ((_ re.loop 2 2) (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))))))(re.union (re.++ ((_ re.loop 2 2) (re.range "0" "9"))(re.++ (re.range "-" "-")(re.++ ((_ re.loop 3 3) (re.union (re.range "A" "Z") (re.range "a" "z")))(re.++ (re.range "-" "-") (re.range "0" "9")))))(re.union (re.++ (re.range "0" "9")(re.++ (re.range "-" "-")(re.++ ((_ re.loop 3 3) (re.union (re.range "A" "Z") (re.range "a" "z")))(re.++ (re.range "-" "-") ((_ re.loop 2 2) (re.range "0" "9")))))) (re.++ (re.union (re.range "A" "Z") (re.range "a" "z"))(re.++ (re.range "-" "-")(re.++ ((_ re.loop 3 3) (re.range "0" "9"))(re.++ (re.range "-" "-") ((_ re.loop 2 2) (re.union (re.range "A" "Z") (re.range "a" "z")))))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "&" (str.++ "l" (str.++ "t" (str.++ ";" (str.++ "I" (str.++ "F" (str.++ "R" (str.++ "A" (str.++ "M" (str.++ "E" (str.++ "t" ""))))))))))))

(define-fun Witness2 () String (str.++ "\u{ea}" (str.++ "&" (str.++ "l" (str.++ "t" (str.++ ";" (str.++ "I" (str.++ "f" (str.++ "r" (str.++ "A" (str.++ "m" (str.++ "E" (str.++ "p" (str.++ "\u{a0}" (str.++ "\u{91}" (str.++ "{" (str.++ "\u{cf}" (str.++ "\u{de}" (str.++ "\u{8d}" (str.++ "\u{d9}" (str.++ "g" (str.++ "\u{88}" ""))))))))))))))))))))))

(assert (= regexA (re.++ (str.to_re (str.++ "&" (str.++ "l" (str.++ "t" (str.++ ";" "")))))(re.++ (re.union (re.range "I" "I") (re.range "i" "i"))(re.++ (re.union (re.range "F" "F") (re.range "f" "f"))(re.++ (re.union (re.range "R" "R") (re.range "r" "r"))(re.++ (re.union (re.range "A" "A") (re.range "a" "a"))(re.++ (re.union (re.range "M" "M") (re.range "m" "m"))(re.++ (re.union (re.range "E" "E") (re.range "e" "e")) (re.++ (re.* (re.union (re.range "\u{00}" "%")(re.union (re.range "'" ":")(re.union (re.range "<" "f")(re.union (re.range "h" "s") (re.range "u" "\u{ff}"))))))(re.++ (re.* (re.union (re.range "\u{00}" "%")(re.union (re.range "'" ".")(re.union (re.range "0" ":")(re.union (re.range "<" "f")(re.union (re.range "h" "s") (re.range "u" "\u{ff}")))))))(re.++ (re.* (re.union (re.range "&" "&")(re.union (re.range "/" "/")(re.union (re.range ";" ";")(re.union (re.range "g" "g") (re.range "t" "t")))))) (re.union (re.range "&" "&")(re.union (re.range ";" ";")(re.union (re.range "g" "g") (re.range "t" "t"))))))))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "\u{22}" (str.++ "3" (str.++ "\u{22}" (str.++ "," (str.++ "\u{22}" (str.++ "8" (str.++ "\u{22}" (str.++ ")" "")))))))))

(define-fun Witness2 () String (str.++ "\u{bf}" (str.++ "\u{ce}" (str.++ "\u{00}" (str.++ "\u{22}" (str.++ "9" (str.++ "\u{22}" (str.++ "," (str.++ "\u{22}" (str.++ "9" (str.++ "8" (str.++ "8" (str.++ "\u{22}" (str.++ ")" ""))))))))))))))

(assert (= regexA (re.++ (re.range "\u{22}" "\u{22}")(re.++ (re.* (re.range "0" "9"))(re.++ (str.to_re (str.++ "\u{22}" (str.++ "," (str.++ "\u{22}" ""))))(re.++ (re.* (re.range "0" "9")) (str.to_re (str.++ "\u{22}" (str.++ ")" "")))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "E" (str.++ "x" (str.++ "c" (str.++ "e" (str.++ "p" (str.++ "t" (str.++ "i" (str.++ "o" (str.++ "n" (str.++ "\u{a0}" (str.++ "\u{b6}" ""))))))))))))

(define-fun Witness2 () String (str.++ "E" (str.++ "x" (str.++ "c" (str.++ "e" (str.++ "p" (str.++ "t" (str.++ "i" (str.++ "o" (str.++ "n" ""))))))))))

(assert (= regexA (re.union (str.to_re (str.++ "E" (str.++ "r" (str.++ "r" (str.++ "o" (str.++ "r" ""))))))(re.union (str.to_re (str.++ "W" (str.++ "a" (str.++ "r" (str.++ "n" (str.++ "i" (str.++ "n" (str.++ "g" "")))))))) (str.to_re (str.++ "E" (str.++ "x" (str.++ "c" (str.++ "e" (str.++ "p" (str.++ "t" (str.++ "i" (str.++ "o" (str.++ "n" ""))))))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "}" (str.++ "w" (str.++ "x" (str.++ "8" (str.++ "9" ""))))))

(define-fun Witness2 () String (str.++ "c" (str.++ "0" (str.++ "9" ""))))

(assert (= regexA (re.++ (re.union (re.range "A" "P")(re.union (re.range "R" "U")(re.union (re.range "W" "W")(re.union (re.range "Y" "Z")(re.union (re.range "a" "p")(re.union (re.range "r" "u")(re.union (re.range "w" "w") (re.range "y" "z")))))))) (re.union ((_ re.loop 1 2) (re.range "0" "9"))(re.union (re.union (re.++ (re.union (re.range "A" "H")(re.union (re.range "K" "Y")(re.union (re.range "a" "h") (re.range "k" "y")))) (re.range "0" "9")) (re.++ (re.union (re.range "A" "H")(re.union (re.range "K" "Y")(re.union (re.range "a" "h") (re.range "k" "y"))))(re.++ (re.range "0" "9") (re.union (re.range "0" "9")(re.union (re.range "A" "B")(re.union (re.range "E" "E")(re.union (re.range "H" "H")(re.union (re.range "M" "N")(re.union (re.range "P" "P")(re.union (re.range "R" "R")(re.union (re.range "V" "Y")(re.union (re.range "a" "b")(re.union (re.range "e" "e")(re.union (re.range "h" "h")(re.union (re.range "m" "n")(re.union (re.range "p" "p")(re.union (re.range "r" "r") (re.range "v" "y")))))))))))))))))) (re.++ (re.range "0" "9") (re.union (re.range "A" "H")(re.union (re.range "J" "K")(re.union (re.range "S" "U")(re.union (re.range "W" "W")(re.union (re.range "a" "h")(re.union (re.range "j" "k")(re.union (re.range "s" "u") (re.range "w" "w"))))))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "_" (str.++ "\u{cb}" (str.++ "G" (str.++ "0" (str.++ "`" (str.++ "L" (str.++ "O" (str.++ "C" (str.++ "'" (str.++ "G" (str.++ "D" (str.++ "S" (str.++ "'" (str.++ "F" (str.++ "T" (str.++ "X" (str.++ "'" (str.++ "F" (str.++ "T" (str.++ "X" (str.++ "m" (str.++ "'" (str.++ "F" (str.++ "T" (str.++ "X" (str.++ "\u{13}" (str.++ "'" (str.++ "M" (str.++ "E" (str.++ "A" (str.++ "\u{89}" (str.++ "\u{c5}" (str.++ "'" (str.++ "M" (str.++ "E" (str.++ "A" (str.++ "'" (str.++ "M" (str.++ "E" (str.++ "A" (str.++ "'" (str.++ "D" (str.++ "I" (str.++ "M" (str.++ "'" (str.++ "D" (str.++ "I" (str.++ "M" (str.++ "'" (str.++ "T" (str.++ "M" (str.++ "P" (str.++ "0" (str.++ "'" (str.++ "L" (str.++ "O" (str.++ "C" (str.++ "'" (str.++ "L" (str.++ "O" (str.++ "C" (str.++ "'" (str.++ "R" (str.++ "F" (str.++ "F" (str.++ "\u{a6}" (str.++ "\u{f9}" (str.++ "\u{90}" (str.++ "\u{da}" (str.++ "\u{22}" (str.++ "\u{97}" (str.++ "'" (str.++ "E" (str.++ "Q" (str.++ "D" (str.++ ":" (str.++ "{" (str.++ "'" (str.++ "E" (str.++ "Q" (str.++ "A" (str.++ "6" (str.++ ">" (str.++ "\u{fe}" (str.++ "," (str.++ "'" (str.++ "E" (str.++ "Q" (str.++ "A" (str.++ "'" (str.++ "E" (str.++ "Q" (str.++ "D" (str.++ "'" (str.++ "E" (str.++ "Q" (str.++ "A" (str.++ "\u{fd}" (str.++ "'" (str.++ "E" (str.++ "Q" (str.++ "A" (str.++ "'" ""))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(define-fun Witness2 () String (str.++ "L" (str.++ "O" (str.++ "C" (str.++ "\u{97}" (str.++ "'" (str.++ "G" (str.++ "I" (str.++ "D" (str.++ "'" (str.++ "F" (str.++ "T" (str.++ "X" (str.++ "'" (str.++ "F" (str.++ "T" (str.++ "X" (str.++ "'" (str.++ "M" (str.++ "E" (str.++ "A" (str.++ "T" (str.++ "\u{f3}" (str.++ "'" (str.++ "M" (str.++ "E" (str.++ "A" (str.++ "\u{08}" (str.++ "\u{0e}" (str.++ "3" (str.++ "'" (str.++ "M" (str.++ "E" (str.++ "A" (str.++ "'" (str.++ "D" (str.++ "I" (str.++ "M" (str.++ "'" (str.++ "T" (str.++ "M" (str.++ "P" (str.++ "\u{a0}" (str.++ "'" (str.++ "R" (str.++ "N" (str.++ "G" (str.++ "\u{c4}" (str.++ "\u{af}" (str.++ "'" (str.++ "L" (str.++ "O" (str.++ "C" (str.++ "'" (str.++ "L" (str.++ "O" (str.++ "C" (str.++ "'" (str.++ "L" (str.++ "O" (str.++ "C" (str.++ "'" (str.++ "R" (str.++ "F" (str.++ "F" (str.++ "\u{94}" (str.++ "'" (str.++ "E" (str.++ "Q" (str.++ "D" (str.++ "|" (str.++ "'" (str.++ "E" (str.++ "Q" (str.++ "A" (str.++ "'" (str.++ "E" (str.++ "Q" (str.++ "A" (str.++ "'" (str.++ "N" (str.++ "A" (str.++ "D" (str.++ "\u{9b}" (str.++ "\u{ad}" (str.++ "S" (str.++ "Z" (str.++ "\u{cc}" (str.++ "'" (str.++ "\u{da}" ""))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(assert (= regexA (re.++ (re.++ (str.to_re (str.++ "L" (str.++ "O" (str.++ "C" ""))))(re.++ (re.* (re.union (re.range "\u{00}" "&") (re.range "(" "\u{ff}"))) (re.range "'" "'")))(re.++ (re.opt (re.++ (str.to_re (str.++ "G" (str.++ "I" (str.++ "D" ""))))(re.++ (re.* (re.union (re.range "\u{00}" "&") (re.range "(" "\u{ff}"))) (re.range "'" "'"))))(re.++ (re.opt (re.++ (str.to_re (str.++ "G" (str.++ "D" (str.++ "S" ""))))(re.++ (re.* (re.union (re.range "\u{00}" "&") (re.range "(" "\u{ff}"))) (re.range "'" "'"))))(re.++ ((_ re.loop 0 9) (re.++ (str.to_re (str.++ "F" (str.++ "T" (str.++ "X" ""))))(re.++ (re.* (re.union (re.range "\u{00}" "&") (re.range "(" "\u{ff}"))) (re.range "'" "'"))))(re.++ ((_ re.loop 1 9) (re.++ (str.to_re (str.++ "M" (str.++ "E" (str.++ "A" ""))))(re.++ (re.* (re.union (re.range "\u{00}" "&") (re.range "(" "\u{ff}"))) (re.range "'" "'"))))(re.++ ((_ re.loop 0 9) (re.++ (str.to_re (str.++ "D" (str.++ "I" (str.++ "M" ""))))(re.++ (re.* (re.union (re.range "\u{00}" "&") (re.range "(" "\u{ff}"))) (re.range "'" "'"))))(re.++ (re.opt (re.++ (str.to_re (str.++ "T" (str.++ "M" (str.++ "P" ""))))(re.++ (re.* (re.union (re.range "\u{00}" "&") (re.range "(" "\u{ff}"))) (re.range "'" "'"))))(re.++ (re.opt (re.++ (str.to_re (str.++ "R" (str.++ "N" (str.++ "G" ""))))(re.++ (re.* (re.union (re.range "\u{00}" "&") (re.range "(" "\u{ff}"))) (re.range "'" "'"))))(re.++ ((_ re.loop 0 9) (re.++ (str.to_re (str.++ "L" (str.++ "O" (str.++ "C" ""))))(re.++ (re.* (re.union (re.range "\u{00}" "&") (re.range "(" "\u{ff}"))) (re.range "'" "'"))))(re.++ (re.++ (str.to_re (str.++ "R" (str.++ "F" (str.++ "F" ""))))(re.++ (re.* (re.union (re.range "\u{00}" "&") (re.range "(" "\u{ff}"))) (re.range "'" "'"))) ((_ re.loop 0 3) (re.++ (re.++ (str.to_re (str.++ "E" (str.++ "Q" (str.++ "D" ""))))(re.++ (re.* (re.union (re.range "\u{00}" "&") (re.range "(" "\u{ff}"))) (re.range "'" "'")))(re.++ ((_ re.loop 0 9) (re.++ (str.to_re (str.++ "E" (str.++ "Q" (str.++ "A" ""))))(re.++ (re.* (re.union (re.range "\u{00}" "&") (re.range "(" "\u{ff}"))) (re.range "'" "'")))) (re.opt (re.++ (str.to_re (str.++ "N" (str.++ "A" (str.++ "D" ""))))(re.++ (re.* (re.union (re.range "\u{00}" "&") (re.range "(" "\u{ff}"))) (re.range "'" "'")))))))))))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "h" (str.++ "t" (str.++ "t" (str.++ "p" (str.++ ":" (str.++ "/" (str.++ "/" (str.++ "w" (str.++ "w" (str.++ "w" (str.++ "." (str.++ "-" (str.++ "." (str.++ "-" (str.++ "." (str.++ "z" (str.++ "K" (str.++ "q" (str.++ "U" (str.++ "." "")))))))))))))))))))))

(define-fun Witness2 () String (str.++ "h" (str.++ "t" (str.++ "t" (str.++ "p" (str.++ ":" (str.++ "/" (str.++ "/" (str.++ "w" (str.++ "w" (str.++ "w" (str.++ "." (str.++ "." (str.++ "Z" (str.++ "a" (str.++ "B" (str.++ "." (str.++ "&" (str.++ "\u{11}" (str.++ "y" (str.++ "\u{db}" (str.++ "\u{00}" ""))))))))))))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (str.to_re (str.++ "h" (str.++ "t" (str.++ "t" (str.++ "p" (str.++ ":" (str.++ "/" (str.++ "/" ""))))))))(re.++ (re.union (re.++ (str.to_re (str.++ "w" (str.++ "w" (str.++ "w" (str.++ "." ""))))) (re.+ (re.++ (re.* (re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z"))))) (re.range "." ".")))) ((_ re.loop 1 10) (re.++ (re.* (re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z"))))) (re.range "." "."))))(re.++ (re.++ ((_ re.loop 2 6) (re.union (re.range "A" "Z") (re.range "a" "z"))) (re.range "." ".")) (re.* (re.union (re.range "#" "'")(re.union (re.range "+" "9")(re.union (re.range ";" ";")(re.union (re.range "=" "=")(re.union (re.range "?" "?")(re.union (re.range "A" "Z")(re.union (re.range "\u{5c}" "\u{5c}")(re.union (re.range "_" "_")(re.union (re.range "a" "z") (re.range "~" "~")))))))))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "\u{93}" (str.++ "\u{ce}" (str.++ "B" (str.++ "Y" (str.++ "5" (str.++ "P" (str.++ " " (str.++ "7" (str.++ "S" (str.++ "U" "")))))))))))

(define-fun Witness2 () String (str.++ "\u{09}" (str.++ "j" (str.++ "\u{1f}" (str.++ "o" (str.++ "H" (str.++ "8" (str.++ "9" (str.++ "T" (str.++ "Y" ""))))))))))

(assert (= regexA (re.union (re.++ (str.to_re "") (re.++ (str.to_re (str.++ "G" (str.++ "I" (str.++ "R" ""))))(re.++ (re.opt (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))) (str.to_re (str.++ "0" (str.++ "A" (str.++ "A" ""))))))) (re.++ (re.union (re.++ (re.union (re.range "A" "P")(re.union (re.range "R" "U")(re.union (re.range "W" "W") (re.range "Y" "Z"))))(re.++ (re.range "0" "9") (re.opt (re.range "0" "9"))))(re.union (re.++ (re.union (re.range "A" "P")(re.union (re.range "R" "U")(re.union (re.range "W" "W") (re.range "Y" "Z"))))(re.++ (re.union (re.range "A" "H") (re.range "K" "Y"))(re.++ (re.range "0" "9") (re.opt (re.range "0" "9")))))(re.union (re.++ (re.union (re.range "A" "P")(re.union (re.range "R" "U")(re.union (re.range "W" "W") (re.range "Y" "Z"))))(re.++ (re.range "0" "9") (re.union (re.range "A" "H")(re.union (re.range "J" "K")(re.union (re.range "S" "U") (re.range "W" "W")))))) (re.++ (re.union (re.range "A" "P")(re.union (re.range "R" "U")(re.union (re.range "W" "W") (re.range "Y" "Z"))))(re.++ (re.union (re.range "A" "H") (re.range "K" "Y"))(re.++ (re.range "0" "9") (re.union (re.range "A" "B")(re.union (re.range "E" "E")(re.union (re.range "H" "H")(re.union (re.range "M" "N")(re.union (re.range "P" "P")(re.union (re.range "R" "R") (re.range "V" "Y")))))))))))))(re.++ (re.opt (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (re.++ (re.range "0" "9") ((_ re.loop 2 2) (re.union (re.range "A" "B")(re.union (re.range "D" "H")(re.union (re.range "J" "J")(re.union (re.range "L" "L")(re.union (re.range "N" "N")(re.union (re.range "P" "U") (re.range "W" "Z"))))))))) (str.to_re "")))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "\u{8c}" (str.++ "u" (str.++ "\u{e1}" (str.++ "\u{a4}" "")))))

(define-fun Witness2 () String (str.++ "\u{93}" (str.++ "k" (str.++ "4" (str.++ "W" (str.++ "y" ""))))))

(assert (= regexA (re.union (re.range "A" "A")(re.union (re.range "E" "E")(re.union (re.range "I" "I")(re.union (re.range "O" "O")(re.union (re.range "U" "U")(re.union (re.range "Y" "Y")(re.union (re.range "a" "a")(re.union (re.range "e" "e")(re.union (re.range "i" "i")(re.union (re.range "o" "o")(re.union (re.range "u" "u") (re.range "y" "y"))))))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "\u{13}" (str.++ "o" (str.++ "7" (str.++ "9" (str.++ "2" (str.++ "3" (str.++ "8" (str.++ "8" "")))))))))

(define-fun Witness2 () String (str.++ "3" (str.++ "9" (str.++ "8" (str.++ "\u{0d}" (str.++ "9" (str.++ "7" (str.++ "8" ""))))))))

(assert (= regexA (re.union ((_ re.loop 6 6) (re.range "0" "9")) (re.++ ((_ re.loop 3 3) (re.range "0" "9"))(re.++ (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))) ((_ re.loop 3 3) (re.range "0" "9")))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ " " (str.++ "\u{83}" (str.++ "B" (str.++ "8" (str.++ ":" (str.++ "1" (str.++ "8" (str.++ ":" (str.++ "f" (str.++ "e" (str.++ ":" (str.++ "F" (str.++ "9" (str.++ ":" (str.++ "8" (str.++ "9" (str.++ ":" (str.++ "8" (str.++ "9" (str.++ "\u{0b}" "")))))))))))))))))))))

(define-fun Witness2 () String (str.++ "F" (str.++ "9" (str.++ "-" (str.++ "d" (str.++ "6" (str.++ "-" (str.++ "F" (str.++ "1" (str.++ "-" (str.++ "f" (str.++ "e" (str.++ "-" (str.++ "C" (str.++ "3" (str.++ "-" (str.++ "E" (str.++ "1" (str.++ "k" (str.++ "q" (str.++ "\u{e2}" "")))))))))))))))))))))

(assert (= regexA (re.union (re.++ ((_ re.loop 2 2) (re.union (re.range "0" "9")(re.union (re.range "A" "F") (re.range "a" "f"))))(re.++ (re.range ":" ":")(re.++ ((_ re.loop 2 2) (re.union (re.range "0" "9")(re.union (re.range "A" "F") (re.range "a" "f"))))(re.++ (re.range ":" ":")(re.++ ((_ re.loop 2 2) (re.union (re.range "0" "9")(re.union (re.range "A" "F") (re.range "a" "f"))))(re.++ (re.range ":" ":")(re.++ ((_ re.loop 2 2) (re.union (re.range "0" "9")(re.union (re.range "A" "F") (re.range "a" "f"))))(re.++ (re.range ":" ":")(re.++ ((_ re.loop 2 2) (re.union (re.range "0" "9")(re.union (re.range "A" "F") (re.range "a" "f"))))(re.++ (re.range ":" ":") ((_ re.loop 2 2) (re.union (re.range "0" "9")(re.union (re.range "A" "F") (re.range "a" "f")))))))))))))) (re.++ ((_ re.loop 2 2) (re.union (re.range "0" "9")(re.union (re.range "A" "F") (re.range "a" "f"))))(re.++ (re.range "-" "-")(re.++ ((_ re.loop 2 2) (re.union (re.range "0" "9")(re.union (re.range "A" "F") (re.range "a" "f"))))(re.++ (re.range "-" "-")(re.++ ((_ re.loop 2 2) (re.union (re.range "0" "9")(re.union (re.range "A" "F") (re.range "a" "f"))))(re.++ (re.range "-" "-")(re.++ ((_ re.loop 2 2) (re.union (re.range "0" "9")(re.union (re.range "A" "F") (re.range "a" "f"))))(re.++ (re.range "-" "-")(re.++ ((_ re.loop 2 2) (re.union (re.range "0" "9")(re.union (re.range "A" "F") (re.range "a" "f"))))(re.++ (re.range "-" "-") ((_ re.loop 2 2) (re.union (re.range "0" "9")(re.union (re.range "A" "F") (re.range "a" "f")))))))))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "G" (str.++ "\u{98}" (str.++ "h" (str.++ "t" (str.++ "t" (str.++ "p" (str.++ ":" (str.++ "/" (str.++ "/" (str.++ "t" (str.++ "e" (str.++ "l" (str.++ "n" (str.++ "e" (str.++ "t" (str.++ ":" (str.++ "/" (str.++ "/" (str.++ "f" (str.++ "t" (str.++ "p" (str.++ ":" (str.++ "/" (str.++ "/" (str.++ "g" (str.++ "o" (str.++ "p" (str.++ "h" (str.++ "e" (str.++ "r" (str.++ ":" (str.++ "/" (str.++ "/" (str.++ "f" (str.++ "t" (str.++ "p" (str.++ ":" (str.++ "/" (str.++ "/" (str.++ "f" (str.++ "t" (str.++ "p" (str.++ ":" (str.++ "/" (str.++ "/" (str.++ "g" (str.++ "o" (str.++ "p" (str.++ "h" (str.++ "e" (str.++ "r" (str.++ ":" (str.++ "/" (str.++ "/" (str.++ "n" (str.++ "n" (str.++ "t" (str.++ "p" (str.++ ":" (str.++ "/" (str.++ "/" (str.++ "f" (str.++ "t" (str.++ "p" (str.++ "s" (str.++ ":" (str.++ "/" (str.++ "/" (str.++ "h" (str.++ "t" (str.++ "t" (str.++ "p" (str.++ ":" (str.++ "/" (str.++ "/" (str.++ "s" (str.++ "f" (str.++ "t" (str.++ "p" (str.++ ":" (str.++ "/" (str.++ "/" (str.++ "g" (str.++ "o" (str.++ "p" (str.++ "h" (str.++ "e" (str.++ "r" (str.++ ":" (str.++ "/" (str.++ "/" (str.++ "t" (str.++ "e" (str.++ "l" (str.++ "n" (str.++ "e" (str.++ "t" (str.++ ":" (str.++ "/" (str.++ "/" (str.++ "h" (str.++ "t" (str.++ "t" (str.++ "p" (str.++ "s" (str.++ ":" (str.++ "/" (str.++ "/" (str.++ "s" (str.++ "f" (str.++ "t" (str.++ "p" (str.++ ":" (str.++ "/" (str.++ "/" (str.++ "s" (str.++ "f" (str.++ "t" (str.++ "p" (str.++ ":" (str.++ "/" (str.++ "/" (str.++ "n" (str.++ "e" (str.++ "w" (str.++ "s" (str.++ ":" (str.++ "/" (str.++ "/" (str.++ "n" (str.++ "e" (str.++ "w" (str.++ "s" (str.++ ":" (str.++ "/" (str.++ "/" (str.++ "s" (str.++ "f" (str.++ "t" (str.++ "p" (str.++ ":" (str.++ "/" (str.++ "/" (str.++ "f" (str.++ "t" (str.++ "p" (str.++ "s" (str.++ ":" (str.++ "/" (str.++ "/" (str.++ "n" (str.++ "n" (str.++ "t" (str.++ "p" (str.++ ":" (str.++ "/" (str.++ "/" (str.++ "n" (str.++ "n" (str.++ "t" (str.++ "p" (str.++ ":" (str.++ "/" (str.++ "/" (str.++ "h" (str.++ "t" (str.++ "t" (str.++ "p" (str.++ ":" (str.++ "/" (str.++ "/" (str.++ "g" (str.++ "o" (str.++ "p" (str.++ "h" (str.++ "e" (str.++ "r" (str.++ ":" (str.++ "/" (str.++ "/" (str.++ "f" (str.++ "t" (str.++ "p" (str.++ ":" (str.++ "/" (str.++ "/" (str.++ "n" (str.++ "n" (str.++ "t" (str.++ "p" (str.++ ":" (str.++ "/" (str.++ "/" (str.++ "h" (str.++ "t" (str.++ "t" (str.++ "p" (str.++ "s" (str.++ ":" (str.++ "/" (str.++ "/" (str.++ "n" (str.++ "e" (str.++ "w" (str.++ "s" (str.++ ":" (str.++ "/" (str.++ "/" (str.++ "g" (str.++ "o" (str.++ "p" (str.++ "h" (str.++ "e" (str.++ "r" (str.++ ":" (str.++ "/" (str.++ "/" (str.++ "n" (str.++ "e" (str.++ "w" (str.++ "s" (str.++ ":" (str.++ "/" (str.++ "/" (str.++ "n" (str.++ "n" (str.++ "t" (str.++ "p" (str.++ ":" (str.++ "/" (str.++ "/" (str.++ "w" (str.++ "w" (str.++ "w" (str.++ "." (str.++ "t" (str.++ "e" (str.++ "l" (str.++ "n" (str.++ "e" (str.++ "t" (str.++ ":" (str.++ "/" (str.++ "/" (str.++ "h" (str.++ "t" (str.++ "t" (str.++ "p" (str.++ "s" (str.++ ":" (str.++ "/" (str.++ "/" (str.++ "w" (str.++ "w" (str.++ "w" (str.++ "." (str.++ "f" (str.++ "t" (str.++ "p" (str.++ "s" (str.++ ":" (str.++ "/" (str.++ "/" (str.++ "f" (str.++ "i" (str.++ "l" (str.++ "e" (str.++ ":" (str.++ "/" (str.++ "/" (str.++ "t" (str.++ "e" (str.++ "l" (str.++ "n" (str.++ "e" (str.++ "t" (str.++ ":" (str.++ "/" (str.++ "/" (str.++ "h" (str.++ "t" (str.++ "t" (str.++ "p" (str.++ "s" (str.++ ":" (str.++ "/" (str.++ "/" (str.++ "n" (str.++ "n" (str.++ "t" (str.++ "p" (str.++ ":" (str.++ "/" (str.++ "/" (str.++ "f" (str.++ "t" (str.++ "p" (str.++ ":" (str.++ "/" (str.++ "/" (str.++ "h" (str.++ "t" (str.++ "t" (str.++ "p" (str.++ "s" (str.++ ":" (str.++ "/" (str.++ "/" (str.++ "5" (str.++ "." (str.++ "3" (str.++ "." (str.++ "8" (str.++ "0" (str.++ "9" (str.++ "." (str.++ "6" (str.++ "1" "")))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(define-fun Witness2 () String (str.++ "t" (str.++ "e" (str.++ "l" (str.++ "n" (str.++ "e" (str.++ "t" (str.++ ":" (str.++ "/" (str.++ "/" (str.++ "g" (str.++ "o" (str.++ "p" (str.++ "h" (str.++ "e" (str.++ "r" (str.++ ":" (str.++ "/" (str.++ "/" (str.++ "s" (str.++ "f" (str.++ "t" (str.++ "p" (str.++ ":" (str.++ "/" (str.++ "/" (str.++ "h" (str.++ "t" (str.++ "t" (str.++ "p" (str.++ "s" (str.++ ":" (str.++ "/" (str.++ "/" (str.++ "f" (str.++ "t" (str.++ "p" (str.++ ":" (str.++ "/" (str.++ "/" (str.++ "n" (str.++ "n" (str.++ "t" (str.++ "p" (str.++ ":" (str.++ "/" (str.++ "/" (str.++ "f" (str.++ "t" (str.++ "p" (str.++ "s" (str.++ ":" (str.++ "/" (str.++ "/" (str.++ "f" (str.++ "t" (str.++ "p" (str.++ ":" (str.++ "/" (str.++ "/" (str.++ "h" (str.++ "t" (str.++ "t" (str.++ "p" (str.++ ":" (str.++ "/" (str.++ "/" (str.++ "w" (str.++ "w" (str.++ "w" (str.++ "." (str.++ "h" (str.++ "t" (str.++ "t" (str.++ "p" (str.++ ":" (str.++ "/" (str.++ "/" (str.++ "w" (str.++ "w" (str.++ "w" (str.++ "." (str.++ "n" (str.++ "e" (str.++ "w" (str.++ "s" (str.++ ":" (str.++ "/" (str.++ "/" (str.++ "f" (str.++ "t" (str.++ "p" (str.++ "s" (str.++ ":" (str.++ "/" (str.++ "/" (str.++ "h" (str.++ "t" (str.++ "t" (str.++ "p" (str.++ "s" (str.++ ":" (str.++ "/" (str.++ "/" (str.++ "s" (str.++ "f" (str.++ "t" (str.++ "p" (str.++ ":" (str.++ "/" (str.++ "/" (str.++ "h" (str.++ "t" (str.++ "t" (str.++ "p" (str.++ "s" (str.++ ":" (str.++ "/" (str.++ "/" (str.++ "h" (str.++ "t" (str.++ "t" (str.++ "p" (str.++ ":" (str.++ "/" (str.++ "/" (str.++ "g" (str.++ "o" (str.++ "p" (str.++ "h" (str.++ "e" (str.++ "r" (str.++ ":" (str.++ "/" (str.++ "/" (str.++ "w" (str.++ "w" (str.++ "w" (str.++ "." (str.++ "f" (str.++ "t" (str.++ "p" (str.++ ":" (str.++ "/" (str.++ "/" (str.++ "w" (str.++ "w" (str.++ "w" (str.++ "." (str.++ "h" (str.++ "t" (str.++ "t" (str.++ "p" (str.++ "s" (str.++ ":" (str.++ "/" (str.++ "/" (str.++ "h" (str.++ "t" (str.++ "t" (str.++ "p" (str.++ "s" (str.++ ":" (str.++ "/" (str.++ "/" (str.++ "h" (str.++ "t" (str.++ "t" (str.++ "p" (str.++ ":" (str.++ "/" (str.++ "/" (str.++ "t" (str.++ "e" (str.++ "l" (str.++ "n" (str.++ "e" (str.++ "t" (str.++ ":" (str.++ "/" (str.++ "/" (str.++ "n" (str.++ "n" (str.++ "t" (str.++ "p" (str.++ ":" (str.++ "/" (str.++ "/" (str.++ "f" (str.++ "t" (str.++ "p" (str.++ "s" (str.++ ":" (str.++ "/" (str.++ "/" (str.++ "f" (str.++ "t" (str.++ "p" (str.++ ":" (str.++ "/" (str.++ "/" (str.++ "h" (str.++ "t" (str.++ "t" (str.++ "p" (str.++ ":" (str.++ "/" (str.++ "/" (str.++ "f" (str.++ "t" (str.++ "p" (str.++ ":" (str.++ "/" (str.++ "/" (str.++ "t" (str.++ "e" (str.++ "l" (str.++ "n" (str.++ "e" (str.++ "t" (str.++ ":" (str.++ "/" (str.++ "/" (str.++ "f" (str.++ "t" (str.++ "p" (str.++ ":" (str.++ "/" (str.++ "/" (str.++ "w" (str.++ "w" (str.++ "w" (str.++ "." (str.++ "s" (str.++ "f" (str.++ "t" (str.++ "p" (str.++ ":" (str.++ "/" (str.++ "/" (str.++ "n" (str.++ "e" (str.++ "w" (str.++ "s" (str.++ ":" (str.++ "/" (str.++ "/" (str.++ "w" (str.++ "w" (str.++ "w" (str.++ "." (str.++ "f" (str.++ "t" (str.++ "p" (str.++ ":" (str.++ "/" (str.++ "/" (str.++ "t" (str.++ "e" (str.++ "l" (str.++ "n" (str.++ "e" (str.++ "t" (str.++ ":" (str.++ "/" (str.++ "/" (str.++ "n" (str.++ "n" (str.++ "t" (str.++ "p" (str.++ ":" (str.++ "/" (str.++ "/" (str.++ "n" (str.++ "e" (str.++ "w" (str.++ "s" (str.++ ":" (str.++ "/" (str.++ "/" (str.++ "t" (str.++ "e" (str.++ "l" (str.++ "n" (str.++ "e" (str.++ "t" (str.++ ":" (str.++ "/" (str.++ "/" (str.++ "f" (str.++ "t" (str.++ "p" (str.++ "s" (str.++ ":" (str.++ "/" (str.++ "/" (str.++ "g" (str.++ "o" (str.++ "p" (str.++ "h" (str.++ "e" (str.++ "r" (str.++ ":" (str.++ "/" (str.++ "/" (str.++ "f" (str.++ "i" (str.++ "l" (str.++ "e" (str.++ ":" (str.++ "/" (str.++ "/" (str.++ "t" (str.++ "e" (str.++ "l" (str.++ "n" (str.++ "e" (str.++ "t" (str.++ ":" (str.++ "/" (str.++ "/" (str.++ "w" (str.++ "w" (str.++ "w" (str.++ "." (str.++ "n" (str.++ "e" (str.++ "w" (str.++ "s" (str.++ ":" (str.++ "/" (str.++ "/" (str.++ "f" (str.++ "i" (str.++ "l" (str.++ "e" (str.++ ":" (str.++ "/" (str.++ "/" (str.++ "f" (str.++ "t" (str.++ "p" (str.++ ":" (str.++ "/" (str.++ "/" (str.++ "s" (str.++ "f" (str.++ "t" (str.++ "p" (str.++ ":" (str.++ "/" (str.++ "/" (str.++ "w" (str.++ "w" (str.++ "w" (str.++ "." (str.++ "s" (str.++ "f" (str.++ "t" (str.++ "p" (str.++ ":" (str.++ "/" (str.++ "/" (str.++ "f" (str.++ "i" (str.++ "l" (str.++ "e" (str.++ ":" (str.++ "/" (str.++ "/" (str.++ "f" (str.++ "i" (str.++ "l" (str.++ "e" (str.++ ":" (str.++ "/" (str.++ "/" (str.++ "f" (str.++ "t" (str.++ "p" (str.++ "s" (str.++ ":" (str.++ "/" (str.++ "/" (str.++ "n" (str.++ "e" (str.++ "w" (str.++ "s" (str.++ ":" (str.++ "/" (str.++ "/" (str.++ "g" (str.++ "o" (str.++ "p" (str.++ "h" (str.++ "e" (str.++ "r" (str.++ ":" (str.++ "/" (str.++ "/" (str.++ "a" (str.++ "." (str.++ "J" (str.++ "t" ""))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(assert (= regexA (re.++ (re.+ (re.union (re.++ (re.union (str.to_re (str.++ "f" (str.++ "i" (str.++ "l" (str.++ "e" "")))))(re.union (str.to_re (str.++ "g" (str.++ "o" (str.++ "p" (str.++ "h" (str.++ "e" (str.++ "r" "")))))))(re.union (str.to_re (str.++ "n" (str.++ "e" (str.++ "w" (str.++ "s" "")))))(re.union (str.to_re (str.++ "n" (str.++ "n" (str.++ "t" (str.++ "p" "")))))(re.union (str.to_re (str.++ "t" (str.++ "e" (str.++ "l" (str.++ "n" (str.++ "e" (str.++ "t" "")))))))(re.union (str.to_re (str.++ "h" (str.++ "t" (str.++ "t" (str.++ "p" "")))))(re.union (str.to_re (str.++ "f" (str.++ "t" (str.++ "p" ""))))(re.union (str.to_re (str.++ "h" (str.++ "t" (str.++ "t" (str.++ "p" (str.++ "s" ""))))))(re.union (str.to_re (str.++ "f" (str.++ "t" (str.++ "p" (str.++ "s" ""))))) (str.to_re (str.++ "s" (str.++ "f" (str.++ "t" (str.++ "p" "")))))))))))))) (str.to_re (str.++ ":" (str.++ "/" (str.++ "/" ""))))) (str.to_re (str.++ "w" (str.++ "w" (str.++ "w" (str.++ "." "")))))))(re.++ (re.union (re.++ (re.+ (re.union (re.range "-" ".")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_") (re.range "a" "z"))))))(re.++ (re.range "." ".") ((_ re.loop 2 6) (re.union (re.range "A" "Z") (re.range "a" "z"))))) (re.++ ((_ re.loop 1 3) (re.range "0" "9"))(re.++ (re.range "." ".")(re.++ ((_ re.loop 1 3) (re.range "0" "9"))(re.++ (re.range "." ".")(re.++ ((_ re.loop 1 3) (re.range "0" "9"))(re.++ (re.range "." ".") ((_ re.loop 1 3) (re.range "0" "9"))))))))) (re.opt (re.++ (re.range "/" "/") (re.* (re.union (re.range "%" "&") (re.range "-" "~")))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "\u{f1}" (str.++ "0" (str.++ "1" (str.++ "5" (str.++ "9" (str.++ "8" (str.++ "8" (str.++ "-" (str.++ " " (str.++ " " (str.++ "1" (str.++ "8" "")))))))))))))

(define-fun Witness2 () String (str.++ "\u{13}" (str.++ "3" (str.++ "9" (str.++ "8" (str.++ "6" (str.++ "3" (str.++ ")" (str.++ "-" (str.++ "1" (str.++ "5" (str.++ "0" (str.++ "-" (str.++ " " (str.++ "9" (str.++ "-" (str.++ " " "")))))))))))))))))

(assert (= regexA (re.++ (re.opt (re.++ (re.opt (re.range "(" "("))(re.++ ((_ re.loop 2 5) (re.range "0" "9")) (re.opt (re.range ")" ")")))))(re.++ (re.opt (re.union (re.range " " " ")(re.union (re.range "-" "-") (re.range "0" "9")))) (re.++ (str.to_re (str.++ "1" (str.++ "5" ""))) ((_ re.loop 6 13) (re.union (re.range " " " ")(re.union (re.range "-" "-") (re.range "0" "9")))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "\u{a6}" (str.++ "l" (str.++ "\u{db}" (str.++ "0" (str.++ "2" (str.++ "/" (str.++ "2" (str.++ "9" (str.++ "/" (str.++ "1" (str.++ "9" (str.++ "2" (str.++ "0" ""))))))))))))))

(define-fun Witness2 () String (str.++ "9" (str.++ "/" (str.++ "2" (str.++ "0" (str.++ "/" (str.++ "8" (str.++ "2" (str.++ "m" "")))))))))

(assert (= regexA (re.union (re.++ (str.to_re "") (re.++ (re.union (re.++ (re.union (re.++ (re.opt (re.range "0" "0")) (re.union (re.range "1" "1")(re.union (re.range "3" "3")(re.union (re.range "5" "5") (re.range "7" "8"))))) (re.++ (re.range "1" "1") (re.union (re.range "0" "0") (re.range "2" "2"))))(re.++ (re.range "/" "/") (re.union (re.++ (re.opt (re.range "0" "2")) (re.range "1" "9"))(re.union (str.to_re (str.++ "2" (str.++ "0" ""))) (re.++ (re.range "3" "3") (re.range "0" "1"))))))(re.union (re.++ (re.union (re.++ (re.opt (re.range "0" "0")) (re.union (re.range "4" "4")(re.union (re.range "6" "6") (re.range "9" "9")))) (str.to_re (str.++ "1" (str.++ "1" ""))))(re.++ (re.range "/" "/") (re.union (re.++ (re.opt (re.range "0" "2")) (re.range "1" "9"))(re.union (str.to_re (str.++ "2" (str.++ "0" ""))) (str.to_re (str.++ "3" (str.++ "0" ""))))))) (re.++ (re.opt (re.range "0" "0"))(re.++ (str.to_re (str.++ "2" (str.++ "/" ""))) (re.union (re.++ (re.opt (re.range "0" "1")) (re.range "1" "9")) (re.++ (re.range "2" "2") (re.range "0" "8")))))))(re.++ (re.range "/" "/") (re.++ (re.opt (re.union (str.to_re (str.++ "1" (str.++ "9" ""))) (str.to_re (str.++ "2" (str.++ "0" ""))))) ((_ re.loop 2 2) (re.range "0" "9")))))) (re.++ (re.++ (re.opt (re.range "0" "0"))(re.++ (str.to_re (str.++ "2" (str.++ "/" (str.++ "2" (str.++ "9" (str.++ "/" "")))))) (re.union (re.++ (re.opt (re.union (str.to_re (str.++ "1" (str.++ "9" ""))) (str.to_re (str.++ "2" (str.++ "0" ""))))) (re.union (str.to_re (str.++ "0" (str.++ "4" "")))(re.union (str.to_re (str.++ "0" (str.++ "8" "")))(re.union (str.to_re (str.++ "1" (str.++ "2" "")))(re.union (str.to_re (str.++ "1" (str.++ "6" "")))(re.union (str.to_re (str.++ "2" (str.++ "0" "")))(re.union (str.to_re (str.++ "2" (str.++ "4" "")))(re.union (str.to_re (str.++ "2" (str.++ "8" "")))(re.union (str.to_re (str.++ "3" (str.++ "2" "")))(re.union (str.to_re (str.++ "3" (str.++ "6" "")))(re.union (str.to_re (str.++ "4" (str.++ "0" "")))(re.union (str.to_re (str.++ "4" (str.++ "4" "")))(re.union (str.to_re (str.++ "4" (str.++ "8" "")))(re.union (str.to_re (str.++ "5" (str.++ "2" "")))(re.union (str.to_re (str.++ "5" (str.++ "6" "")))(re.union (str.to_re (str.++ "6" (str.++ "0" "")))(re.union (str.to_re (str.++ "6" (str.++ "4" "")))(re.union (str.to_re (str.++ "6" (str.++ "8" "")))(re.union (str.to_re (str.++ "7" (str.++ "2" "")))(re.union (str.to_re (str.++ "7" (str.++ "6" "")))(re.union (str.to_re (str.++ "8" (str.++ "0" "")))(re.union (str.to_re (str.++ "8" (str.++ "4" "")))(re.union (str.to_re (str.++ "8" (str.++ "8" "")))(re.union (str.to_re (str.++ "9" (str.++ "2" ""))) (str.to_re (str.++ "9" (str.++ "6" ""))))))))))))))))))))))))))) (str.to_re (str.++ "2" (str.++ "0" (str.++ "0" (str.++ "0" "")))))))) (str.to_re "")))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "=" (str.++ "\u{1b}" (str.++ "l" (str.++ "2" (str.++ "S" (str.++ "F" "")))))))

(define-fun Witness2 () String (str.++ "A" (str.++ "\u{af}" (str.++ "\u{f8}" (str.++ "\u{13}" "")))))

(assert (= regexA (re.union (re.++ (str.to_re "")(re.++ (re.range "A" "A") (re.opt (re.range "-" "-"))))(re.union (re.++ (re.range "B" "D") (re.opt (re.union (re.range "+" "+") (re.range "-" "-"))))(re.union (re.++ (re.opt (re.union (re.range "N" "N") (re.range "S" "S"))) (re.range "F" "F")) (re.++ (re.range "W" "W") (str.to_re "")))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "V" (str.++ "a" (str.++ "l" (str.++ "i" (str.++ "d" (str.++ "a" (str.++ "t" (str.++ "i" (str.++ "o" (str.++ "n" (str.++ " " (str.++ "o" (str.++ "f" (str.++ " " (str.++ "M" (str.++ "e" (str.++ "x" (str.++ "i" (str.++ "c" (str.++ "a" (str.++ "n" (str.++ " " (str.++ "R" (str.++ "F" (str.++ "C" (str.++ " " (str.++ "f" (str.++ "o" (str.++ "r" (str.++ " " (str.++ "t" (str.++ "a" (str.++ "x" (str.++ " " (str.++ "p" (str.++ "a" (str.++ "y" (str.++ "e" (str.++ "r" (str.++ "s" (str.++ " " (str.++ "i" (str.++ "n" (str.++ "d" (str.++ "i" (str.++ "v" (str.++ "i" (str.++ "d" (str.++ "u" (str.++ "a" (str.++ "l" (str.++ "s" "")))))))))))))))))))))))))))))))))))))))))))))))))))))

(define-fun Witness2 () String (str.++ "L" (str.++ "[" (str.++ "\u{ce}" (str.++ "V" (str.++ "a" (str.++ "l" (str.++ "i" (str.++ "d" (str.++ "a" (str.++ "t" (str.++ "i" (str.++ "o" (str.++ "n" (str.++ " " (str.++ "o" (str.++ "f" (str.++ " " (str.++ "M" (str.++ "e" (str.++ "x" (str.++ "i" (str.++ "c" (str.++ "a" (str.++ "n" (str.++ " " (str.++ "R" (str.++ "F" (str.++ "C" (str.++ " " (str.++ "f" (str.++ "o" (str.++ "r" (str.++ " " (str.++ "t" (str.++ "a" (str.++ "x" (str.++ " " (str.++ "p" (str.++ "a" (str.++ "y" (str.++ "e" (str.++ "r" (str.++ "s" (str.++ " " (str.++ "i" (str.++ "n" (str.++ "d" (str.++ "i" (str.++ "v" (str.++ "i" (str.++ "d" (str.++ "u" (str.++ "a" (str.++ "l" (str.++ "s" (str.++ "Y" "")))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(assert (= regexA (re.++ (str.to_re (str.++ "V" (str.++ "a" (str.++ "l" (str.++ "i" (str.++ "d" (str.++ "a" (str.++ "t" (str.++ "i" (str.++ "o" (str.++ "n" (str.++ " " (str.++ "o" (str.++ "f" (str.++ " " (str.++ "M" (str.++ "e" (str.++ "x" (str.++ "i" (str.++ "c" (str.++ "a" (str.++ "n" (str.++ " " (str.++ "R" (str.++ "F" (str.++ "C" (str.++ " " (str.++ "f" (str.++ "o" (str.++ "r" (str.++ " " (str.++ "t" (str.++ "a" (str.++ "x" (str.++ " " (str.++ "p" (str.++ "a" (str.++ "y" (str.++ "e" (str.++ "r" (str.++ "s" (str.++ " " "")))))))))))))))))))))))))))))))))))))))))) (str.to_re (str.++ "i" (str.++ "n" (str.++ "d" (str.++ "i" (str.++ "v" (str.++ "i" (str.++ "d" (str.++ "u" (str.++ "a" (str.++ "l" (str.++ "s" "")))))))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "q" (str.++ "\u{b5}" (str.++ "." (str.++ "\u{aa}" (str.++ "J" (str.++ "@" (str.++ "\u{ba}" (str.++ "z" (str.++ "\u{f0}" (str.++ "\u{c8}" (str.++ "\u{aa}" (str.++ "." (str.++ "8" (str.++ "\u{e7}" (str.++ "8" (str.++ "b" "")))))))))))))))))

(define-fun Witness2 () String (str.++ "," (str.++ "3" (str.++ "." (str.++ "\u{aa}" (str.++ "@" (str.++ "Z" (str.++ "Z" (str.++ "." (str.++ "0" (str.++ "\u{b5}" (str.++ "8" ""))))))))))))

(assert (= regexA (re.++ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))(re.++ (re.* (re.union (re.range "-" ".")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))))(re.++ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))(re.++ (re.range "@" "@")(re.++ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))(re.++ (re.* (re.union (re.range "-" ".")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))))(re.++ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))(re.++ (re.range "." ".") ((_ re.loop 2 3) (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "=" (str.++ "J" (str.++ "C" (str.++ "." (str.++ "T" (str.++ "t" (str.++ "Z" (str.++ "." (str.++ "e" (str.++ "d" (str.++ "u" (str.++ "/" (str.++ "4" ""))))))))))))))

(define-fun Witness2 () String (str.++ "R" (str.++ "M" (str.++ "8" (str.++ "2" (str.++ "f" (str.++ "1" (str.++ "." (str.++ "n" (str.++ "T" (str.++ "." (str.++ "n" (str.++ "r" (str.++ "\u{e5}" (str.++ "\u{ba}" "")))))))))))))))

(assert (= regexA (re.++ (re.union (re.++ (re.++ (re.union (re.++ (str.to_re (str.++ "h" (str.++ "t" (str.++ "t" (str.++ "p" ""))))) (re.opt (re.range "s" "s"))) (str.to_re (str.++ "f" (str.++ "t" (str.++ "p" ""))))) (str.to_re (str.++ ":" (str.++ "/" (str.++ "/" "")))))(re.++ (re.opt (re.++ (re.+ (re.union (re.range "-" ".")(re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))))(re.++ (re.* (re.++ (re.range ":" ":") (re.+ (re.union (re.range "$" "&")(re.union (re.range "-" ".")(re.union (re.range "0" "9")(re.union (re.range ";" ";")(re.union (re.range "A" "Z") (re.range "a" "z"))))))))) (re.range "@" "@"))))(re.++ (re.union (re.range "A" "Z") (re.range "a" "z")) (re.+ (re.union (re.range "-" ".")(re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))))))) (re.++ (re.union (re.range "A" "Z") (re.range "a" "z"))(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z"))))(re.++ (re.range "." ".")(re.++ (re.union (re.range "A" "Z") (re.range "a" "z")) (re.+ (re.union (re.range "-" ".")(re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z"))))))))))(re.++ (re.range "." ".")(re.++ (re.union (str.to_re (str.++ "c" (str.++ "o" (str.++ "m" ""))))(re.union (str.to_re (str.++ "e" (str.++ "d" (str.++ "u" ""))))(re.union (str.to_re (str.++ "g" (str.++ "o" (str.++ "v" ""))))(re.union (str.to_re (str.++ "m" (str.++ "i" (str.++ "l" ""))))(re.union (str.to_re (str.++ "n" (str.++ "e" (str.++ "t" ""))))(re.union (str.to_re (str.++ "o" (str.++ "r" (str.++ "g" ""))))(re.union (str.to_re (str.++ "b" (str.++ "i" (str.++ "z" ""))))(re.union (str.to_re (str.++ "p" (str.++ "r" (str.++ "o" ""))))(re.union (str.to_re (str.++ "i" (str.++ "n" (str.++ "f" (str.++ "o" "")))))(re.union (str.to_re (str.++ "n" (str.++ "a" (str.++ "m" (str.++ "e" "")))))(re.union (str.to_re (str.++ "m" (str.++ "u" (str.++ "s" (str.++ "e" (str.++ "u" (str.++ "m" "")))))))(re.union (str.to_re (str.++ "a" (str.++ "c" "")))(re.union (str.to_re (str.++ "a" (str.++ "d" "")))(re.union (str.to_re (str.++ "a" (str.++ "e" "")))(re.union (str.to_re (str.++ "a" (str.++ "f" "")))(re.union (str.to_re (str.++ "a" (str.++ "g" "")))(re.union (str.to_re (str.++ "a" (str.++ "i" "")))(re.union (str.to_re (str.++ "a" (str.++ "l" "")))(re.union (str.to_re (str.++ "a" (str.++ "m" "")))(re.union (str.to_re (str.++ "a" (str.++ "n" "")))(re.union (str.to_re (str.++ "a" (str.++ "o" "")))(re.union (str.to_re (str.++ "a" (str.++ "q" "")))(re.union (str.to_re (str.++ "a" (str.++ "r" "")))(re.union (str.to_re (str.++ "a" (str.++ "s" "")))(re.union (str.to_re (str.++ "a" (str.++ "t" "")))(re.union (str.to_re (str.++ "a" (str.++ "u" "")))(re.union (str.to_re (str.++ "a" (str.++ "w" "")))(re.union (str.to_re (str.++ "a" (str.++ "z" "")))(re.union (str.to_re (str.++ "a" (str.++ "x" "")))(re.union (str.to_re (str.++ "b" (str.++ "a" "")))(re.union (str.to_re (str.++ "b" (str.++ "b" "")))(re.union (str.to_re (str.++ "b" (str.++ "d" "")))(re.union (str.to_re (str.++ "b" (str.++ "e" "")))(re.union (str.to_re (str.++ "b" (str.++ "f" "")))(re.union (str.to_re (str.++ "b" (str.++ "g" "")))(re.union (str.to_re (str.++ "b" (str.++ "h" "")))(re.union (str.to_re (str.++ "b" (str.++ "i" "")))(re.union (str.to_re (str.++ "b" (str.++ "j" "")))(re.union (str.to_re (str.++ "b" (str.++ "m" "")))(re.union (str.to_re (str.++ "b" (str.++ "n" "")))(re.union (str.to_re (str.++ "b" (str.++ "o" "")))(re.union (str.to_re (str.++ "b" (str.++ "r" "")))(re.union (str.to_re (str.++ "b" (str.++ "s" "")))(re.union (str.to_re (str.++ "b" (str.++ "t" "")))(re.union (str.to_re (str.++ "b" (str.++ "v" "")))(re.union (str.to_re (str.++ "b" (str.++ "w" "")))(re.union (str.to_re (str.++ "b" (str.++ "y" "")))(re.union (str.to_re (str.++ "b" (str.++ "z" "")))(re.union (str.to_re (str.++ "c" (str.++ "a" "")))(re.union (str.to_re (str.++ "c" (str.++ "c" "")))(re.union (str.to_re (str.++ "c" (str.++ "d" "")))(re.union (str.to_re (str.++ "c" (str.++ "f" "")))(re.union (str.to_re (str.++ "c" (str.++ "g" "")))(re.union (str.to_re (str.++ "c" (str.++ "h" "")))(re.union (str.to_re (str.++ "c" (str.++ "i" "")))(re.union (str.to_re (str.++ "c" (str.++ "k" "")))(re.union (str.to_re (str.++ "c" (str.++ "l" "")))(re.union (str.to_re (str.++ "c" (str.++ "m" "")))(re.union (str.to_re (str.++ "c" (str.++ "n" "")))(re.union (str.to_re (str.++ "c" (str.++ "o" "")))(re.union (str.to_re (str.++ "c" (str.++ "r" "")))(re.union (str.to_re (str.++ "c" (str.++ "s" "")))(re.union (str.to_re (str.++ "c" (str.++ "u" "")))(re.union (str.to_re (str.++ "c" (str.++ "v" "")))(re.union (str.to_re (str.++ "c" (str.++ "x" "")))(re.union (str.to_re (str.++ "c" (str.++ "y" "")))(re.union (str.to_re (str.++ "c" (str.++ "z" "")))(re.union (str.to_re (str.++ "d" (str.++ "e" "")))(re.union (str.to_re (str.++ "d" (str.++ "j" "")))(re.union (str.to_re (str.++ "d" (str.++ "k" "")))(re.union (str.to_re (str.++ "d" (str.++ "m" "")))(re.union (str.to_re (str.++ "d" (str.++ "o" "")))(re.union (str.to_re (str.++ "d" (str.++ "z" "")))(re.union (str.to_re (str.++ "e" (str.++ "c" "")))(re.union (str.to_re (str.++ "e" (str.++ "e" "")))(re.union (str.to_re (str.++ "e" (str.++ "g" "")))(re.union (str.to_re (str.++ "e" (str.++ "h" "")))(re.union (str.to_re (str.++ "e" (str.++ "r" "")))(re.union (str.to_re (str.++ "e" (str.++ "s" "")))(re.union (str.to_re (str.++ "e" (str.++ "t" "")))(re.union (str.to_re (str.++ "e" (str.++ "u" "")))(re.union (str.to_re (str.++ "f" (str.++ "i" "")))(re.union (str.to_re (str.++ "f" (str.++ "j" "")))(re.union (str.to_re (str.++ "f" (str.++ "k" "")))(re.union (str.to_re (str.++ "f" (str.++ "m" "")))(re.union (str.to_re (str.++ "f" (str.++ "o" "")))(re.union (str.to_re (str.++ "f" (str.++ "r" "")))(re.union (str.to_re (str.++ "g" (str.++ "a" "")))(re.union (str.to_re (str.++ "g" (str.++ "b" "")))(re.union (str.to_re (str.++ "g" (str.++ "d" "")))(re.union (str.to_re (str.++ "g" (str.++ "e" "")))(re.union (str.to_re (str.++ "g" (str.++ "f" "")))(re.union (str.to_re (str.++ "g" (str.++ "g" "")))(re.union (str.to_re (str.++ "g" (str.++ "h" "")))(re.union (str.to_re (str.++ "g" (str.++ "i" "")))(re.union (str.to_re (str.++ "g" (str.++ "l" "")))(re.union (str.to_re (str.++ "g" (str.++ "m" "")))(re.union (str.to_re (str.++ "g" (str.++ "n" "")))(re.union (str.to_re (str.++ "g" (str.++ "p" "")))(re.union (str.to_re (str.++ "g" (str.++ "q" "")))(re.union (str.to_re (str.++ "g" (str.++ "r" "")))(re.union (str.to_re (str.++ "g" (str.++ "s" "")))(re.union (str.to_re (str.++ "g" (str.++ "t" "")))(re.union (str.to_re (str.++ "g" (str.++ "u" "")))(re.union (str.to_re (str.++ "g" (str.++ "w" "")))(re.union (str.to_re (str.++ "h" (str.++ "k" "")))(re.union (str.to_re (str.++ "h" (str.++ "m" "")))(re.union (str.to_re (str.++ "h" (str.++ "n" "")))(re.union (str.to_re (str.++ "h" (str.++ "r" "")))(re.union (str.to_re (str.++ "h" (str.++ "t" "")))(re.union (str.to_re (str.++ "h" (str.++ "u" "")))(re.union (str.to_re (str.++ "i" (str.++ "d" "")))(re.union (str.to_re (str.++ "i" (str.++ "e" "")))(re.union (str.to_re (str.++ "i" (str.++ "l" "")))(re.union (str.to_re (str.++ "i" (str.++ "m" "")))(re.union (str.to_re (str.++ "i" (str.++ "n" "")))(re.union (str.to_re (str.++ "i" (str.++ "o" "")))(re.union (str.to_re (str.++ "i" (str.++ "q" "")))(re.union (str.to_re (str.++ "i" (str.++ "r" "")))(re.union (str.to_re (str.++ "i" (str.++ "s" "")))(re.union (str.to_re (str.++ "i" (str.++ "t" "")))(re.union (str.to_re (str.++ "j" (str.++ "e" "")))(re.union (str.to_re (str.++ "j" (str.++ "m" "")))(re.union (str.to_re (str.++ "j" (str.++ "o" "")))(re.union (str.to_re (str.++ "j" (str.++ "p" "")))(re.union (str.to_re (str.++ "k" (str.++ "e" "")))(re.union (str.to_re (str.++ "k" (str.++ "g" "")))(re.union (str.to_re (str.++ "k" (str.++ "h" "")))(re.union (str.to_re (str.++ "k" (str.++ "i" "")))(re.union (str.to_re (str.++ "k" (str.++ "m" "")))(re.union (str.to_re (str.++ "k" (str.++ "n" "")))(re.union (str.to_re (str.++ "k" (str.++ "p" "")))(re.union (str.to_re (str.++ "k" (str.++ "r" "")))(re.union (str.to_re (str.++ "k" (str.++ "w" "")))(re.union (str.to_re (str.++ "k" (str.++ "y" "")))(re.union (str.to_re (str.++ "k" (str.++ "z" "")))(re.union (str.to_re (str.++ "l" (str.++ "a" "")))(re.union (str.to_re (str.++ "l" (str.++ "b" "")))(re.union (str.to_re (str.++ "l" (str.++ "c" "")))(re.union (str.to_re (str.++ "l" (str.++ "i" "")))(re.union (str.to_re (str.++ "l" (str.++ "k" "")))(re.union (str.to_re (str.++ "l" (str.++ "r" "")))(re.union (str.to_re (str.++ "l" (str.++ "s" "")))(re.union (str.to_re (str.++ "l" (str.++ "t" "")))(re.union (str.to_re (str.++ "l" (str.++ "u" "")))(re.union (str.to_re (str.++ "l" (str.++ "v" "")))(re.union (str.to_re (str.++ "l" (str.++ "y" "")))(re.union (str.to_re (str.++ "m" (str.++ "a" "")))(re.union (str.to_re (str.++ "m" (str.++ "c" "")))(re.union (str.to_re (str.++ "m" (str.++ "d" "")))(re.union (str.to_re (str.++ "m" (str.++ "g" "")))(re.union (str.to_re (str.++ "m" (str.++ "h" "")))(re.union (str.to_re (str.++ "m" (str.++ "k" "")))(re.union (str.to_re (str.++ "m" (str.++ "l" "")))(re.union (str.to_re (str.++ "m" (str.++ "m" "")))(re.union (str.to_re (str.++ "m" (str.++ "n" "")))(re.union (str.to_re (str.++ "m" (str.++ "o" "")))(re.union (str.to_re (str.++ "m" (str.++ "p" "")))(re.union (str.to_re (str.++ "m" (str.++ "q" "")))(re.union (str.to_re (str.++ "m" (str.++ "r" "")))(re.union (str.to_re (str.++ "m" (str.++ "s" "")))(re.union (str.to_re (str.++ "m" (str.++ "t" "")))(re.union (str.to_re (str.++ "m" (str.++ "u" "")))(re.union (str.to_re (str.++ "m" (str.++ "v" "")))(re.union (str.to_re (str.++ "m" (str.++ "w" "")))(re.union (str.to_re (str.++ "m" (str.++ "x" "")))(re.union (str.to_re (str.++ "m" (str.++ "y" "")))(re.union (str.to_re (str.++ "m" (str.++ "z" "")))(re.union (str.to_re (str.++ "n" (str.++ "a" "")))(re.union (str.to_re (str.++ "n" (str.++ "c" "")))(re.union (str.to_re (str.++ "n" (str.++ "e" "")))(re.union (str.to_re (str.++ "n" (str.++ "f" "")))(re.union (str.to_re (str.++ "n" (str.++ "g" "")))(re.union (str.to_re (str.++ "n" (str.++ "i" "")))(re.union (str.to_re (str.++ "n" (str.++ "l" "")))(re.union (str.to_re (str.++ "n" (str.++ "o" "")))(re.union (str.to_re (str.++ "n" (str.++ "p" "")))(re.union (str.to_re (str.++ "n" (str.++ "r" "")))(re.union (str.to_re (str.++ "n" (str.++ "u" "")))(re.union (str.to_re (str.++ "n" (str.++ "z" "")))(re.union (str.to_re (str.++ "o" (str.++ "m" "")))(re.union (str.to_re (str.++ "p" (str.++ "a" "")))(re.union (str.to_re (str.++ "p" (str.++ "e" "")))(re.union (str.to_re (str.++ "p" (str.++ "f" "")))(re.union (str.to_re (str.++ "p" (str.++ "g" "")))(re.union (str.to_re (str.++ "p" (str.++ "h" "")))(re.union (str.to_re (str.++ "p" (str.++ "k" "")))(re.union (str.to_re (str.++ "p" (str.++ "l" "")))(re.union (str.to_re (str.++ "p" (str.++ "m" "")))(re.union (str.to_re (str.++ "p" (str.++ "n" "")))(re.union (str.to_re (str.++ "p" (str.++ "r" "")))(re.union (str.to_re (str.++ "p" (str.++ "s" "")))(re.union (str.to_re (str.++ "p" (str.++ "t" "")))(re.union (str.to_re (str.++ "p" (str.++ "w" "")))(re.union (str.to_re (str.++ "p" (str.++ "y" "")))(re.union (str.to_re (str.++ "q" (str.++ "a" "")))(re.union (str.to_re (str.++ "r" (str.++ "e" "")))(re.union (str.to_re (str.++ "r" (str.++ "o" "")))(re.union (str.to_re (str.++ "r" (str.++ "u" "")))(re.union (str.to_re (str.++ "r" (str.++ "w" "")))(re.union (str.to_re (str.++ "s" (str.++ "a" "")))(re.union (str.to_re (str.++ "s" (str.++ "b" "")))(re.union (str.to_re (str.++ "s" (str.++ "c" "")))(re.union (str.to_re (str.++ "s" (str.++ "d" "")))(re.union (str.to_re (str.++ "s" (str.++ "e" "")))(re.union (str.to_re (str.++ "s" (str.++ "g" "")))(re.union (str.to_re (str.++ "s" (str.++ "h" "")))(re.union (str.to_re (str.++ "s" (str.++ "i" "")))(re.union (str.to_re (str.++ "s" (str.++ "j" "")))(re.union (str.to_re (str.++ "s" (str.++ "k" "")))(re.union (str.to_re (str.++ "s" (str.++ "l" "")))(re.union (str.to_re (str.++ "s" (str.++ "m" "")))(re.union (str.to_re (str.++ "s" (str.++ "n" "")))(re.union (str.to_re (str.++ "s" (str.++ "o" "")))(re.union (str.to_re (str.++ "s" (str.++ "r" "")))(re.union (str.to_re (str.++ "s" (str.++ "t" "")))(re.union (str.to_re (str.++ "s" (str.++ "v" "")))(re.union (str.to_re (str.++ "s" (str.++ "y" "")))(re.union (str.to_re (str.++ "s" (str.++ "z" "")))(re.union (str.to_re (str.++ "t" (str.++ "c" "")))(re.union (str.to_re (str.++ "t" (str.++ "d" "")))(re.union (str.to_re (str.++ "t" (str.++ "f" "")))(re.union (str.to_re (str.++ "t" (str.++ "g" "")))(re.union (str.to_re (str.++ "t" (str.++ "h" "")))(re.union (str.to_re (str.++ "t" (str.++ "j" "")))(re.union (str.to_re (str.++ "t" (str.++ "k" "")))(re.union (str.to_re (str.++ "t" (str.++ "l" "")))(re.union (str.to_re (str.++ "t" (str.++ "n" "")))(re.union (str.to_re (str.++ "t" (str.++ "o" "")))(re.union (str.to_re (str.++ "t" (str.++ "p" "")))(re.union (str.to_re (str.++ "t" (str.++ "r" "")))(re.union (str.to_re (str.++ "t" (str.++ "t" "")))(re.union (str.to_re (str.++ "t" (str.++ "v" "")))(re.union (str.to_re (str.++ "t" (str.++ "w" "")))(re.union (str.to_re (str.++ "t" (str.++ "z" "")))(re.union (str.to_re (str.++ "u" (str.++ "a" "")))(re.union (str.to_re (str.++ "u" (str.++ "g" "")))(re.union (str.to_re (str.++ "u" (str.++ "k" "")))(re.union (str.to_re (str.++ "u" (str.++ "m" "")))(re.union (str.to_re (str.++ "u" (str.++ "s" "")))(re.union (str.to_re (str.++ "u" (str.++ "y" "")))(re.union (str.to_re (str.++ "u" (str.++ "z" "")))(re.union (str.to_re (str.++ "v" (str.++ "a" "")))(re.union (str.to_re (str.++ "v" (str.++ "c" "")))(re.union (str.to_re (str.++ "v" (str.++ "e" "")))(re.union (str.to_re (str.++ "v" (str.++ "g" "")))(re.union (str.to_re (str.++ "v" (str.++ "i" "")))(re.union (str.to_re (str.++ "v" (str.++ "n" "")))(re.union (str.to_re (str.++ "v" (str.++ "u" "")))(re.union (str.to_re (str.++ "w" (str.++ "f" "")))(re.union (str.to_re (str.++ "w" (str.++ "s" "")))(re.union (str.to_re (str.++ "y" (str.++ "e" "")))(re.union (str.to_re (str.++ "y" (str.++ "t" "")))(re.union (str.to_re (str.++ "y" (str.++ "u" "")))(re.union (str.to_re (str.++ "z" (str.++ "a" "")))(re.union (str.to_re (str.++ "z" (str.++ "m" ""))) (str.to_re (str.++ "z" (str.++ "w" "")))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))(re.++ (re.* (re.++ (re.range ":" ":") (re.+ (re.range "0" "9")))) (re.* (re.++ (re.range "/" "/") (re.+ (re.union (re.range "#" "'")(re.union (re.range "+" ".")(re.union (re.range "0" "9")(re.union (re.range ";" ";")(re.union (re.range "=" "=")(re.union (re.range "?" "?")(re.union (re.range "A" "Z")(re.union (re.range "\u{5c}" "\u{5c}")(re.union (re.range "_" "_")(re.union (re.range "a" "z") (re.range "~" "~"))))))))))))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "(" (str.++ "2" (str.++ "9" (str.++ "5" (str.++ ")" (str.++ "7" (str.++ "9" (str.++ "8" (str.++ "-" (str.++ "6" (str.++ "0" (str.++ "3" (str.++ "8" ""))))))))))))))

(define-fun Witness2 () String (str.++ "9" (str.++ "8" (str.++ "6" (str.++ "-" (str.++ "9" (str.++ "5" (str.++ "2" (str.++ "-" (str.++ "0" (str.++ "0" (str.++ "9" (str.++ "8" (str.++ "\u{90}" ""))))))))))))))

(assert (= regexA (re.++ (re.opt (re.union (re.++ (re.range "(" "(")(re.++ ((_ re.loop 3 3) (re.range "0" "9"))(re.++ (re.range ")" ")") (re.opt (re.range " " " "))))) (re.++ ((_ re.loop 3 3) (re.range "0" "9")) (re.range "-" "-"))))(re.++ ((_ re.loop 3 3) (re.range "0" "9"))(re.++ (re.range "-" "-") ((_ re.loop 4 4) (re.range "0" "9")))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "\u{00}" (str.++ "8" (str.++ "4" (str.++ "9" (str.++ "8" (str.++ "\u{9e}" "")))))))

(define-fun Witness2 () String (str.++ "t" (str.++ "5" (str.++ "0" (str.++ "8" (str.++ "0" (str.++ "\u{09}" (str.++ "9" (str.++ "9" (str.++ "\u{82}" (str.++ "7" (str.++ "3" ""))))))))))))

(assert (= regexA (re.union (re.++ ((_ re.loop 1 2) (re.range "0" "9"))(re.++ (re.+ (re.union (re.range "\u{00}" "/")(re.union (re.range ":" "@")(re.union (re.range "[" "^")(re.union (re.range "`" "`")(re.union (re.range "{" "\u{a9}")(re.union (re.range "\u{ab}" "\u{b4}")(re.union (re.range "\u{b6}" "\u{b9}")(re.union (re.range "\u{bb}" "\u{bf}")(re.union (re.range "\u{d7}" "\u{d7}") (re.range "\u{f7}" "\u{f7}")))))))))))(re.++ ((_ re.loop 1 2) (re.range "0" "9"))(re.++ (re.* (re.union (re.range "\u{00}" "/")(re.union (re.range ":" "@")(re.union (re.range "[" "^")(re.union (re.range "`" "`")(re.union (re.range "{" "\u{a9}")(re.union (re.range "\u{ab}" "\u{b4}")(re.union (re.range "\u{b6}" "\u{b9}")(re.union (re.range "\u{bb}" "\u{bf}")(re.union (re.range "\u{d7}" "\u{d7}") (re.range "\u{f7}" "\u{f7}"))))))))))) (re.opt ((_ re.loop 2 4) (re.range "0" "9")))))))(re.union (re.++ ((_ re.loop 4 4) (re.range "0" "9"))(re.++ (re.union (re.range "\u{00}" "/")(re.union (re.range ":" "@")(re.union (re.range "[" "^")(re.union (re.range "`" "`")(re.union (re.range "{" "\u{a9}")(re.union (re.range "\u{ab}" "\u{b4}")(re.union (re.range "\u{b6}" "\u{b9}")(re.union (re.range "\u{bb}" "\u{bf}")(re.union (re.range "\u{d7}" "\u{d7}") (re.range "\u{f7}" "\u{f7}"))))))))))(re.++ ((_ re.loop 1 2) (re.range "0" "9"))(re.++ (re.union (re.range "\u{00}" "/")(re.union (re.range ":" "@")(re.union (re.range "[" "^")(re.union (re.range "`" "`")(re.union (re.range "{" "\u{a9}")(re.union (re.range "\u{ab}" "\u{b4}")(re.union (re.range "\u{b6}" "\u{b9}")(re.union (re.range "\u{bb}" "\u{bf}")(re.union (re.range "\u{d7}" "\u{d7}") (re.range "\u{f7}" "\u{f7}")))))))))) ((_ re.loop 1 2) (re.range "0" "9"))))))(re.union (re.++ (re.+ (re.union (re.range "A" "Z") (re.range "a" "z")))(re.++ (re.* (re.union (re.range "\u{00}" "/")(re.union (re.range ":" "@")(re.union (re.range "[" "^")(re.union (re.range "`" "`")(re.union (re.range "{" "\u{a9}")(re.union (re.range "\u{ab}" "\u{b4}")(re.union (re.range "\u{b6}" "\u{b9}")(re.union (re.range "\u{bb}" "\u{bf}")(re.union (re.range "\u{d7}" "\u{d7}") (re.range "\u{f7}" "\u{f7}")))))))))))(re.++ ((_ re.loop 1 2) (re.range "0" "9"))(re.++ (re.+ (re.union (re.range "\u{00}" "/")(re.union (re.range ":" "@")(re.union (re.range "[" "^")(re.union (re.range "`" "`")(re.union (re.range "{" "\u{a9}")(re.union (re.range "\u{ab}" "\u{b4}")(re.union (re.range "\u{b6}" "\u{b9}")(re.union (re.range "\u{bb}" "\u{bf}")(re.union (re.range "\u{d7}" "\u{d7}") (re.range "\u{f7}" "\u{f7}"))))))))))) ((_ re.loop 2 4) (re.range "0" "9"))))))(re.union (re.++ ((_ re.loop 4 4) (re.range "0" "9"))(re.++ (re.* (re.union (re.range "\u{00}" "/")(re.union (re.range ":" "@")(re.union (re.range "[" "^")(re.union (re.range "`" "`")(re.union (re.range "{" "\u{a9}")(re.union (re.range "\u{ab}" "\u{b4}")(re.union (re.range "\u{b6}" "\u{b9}")(re.union (re.range "\u{bb}" "\u{bf}")(re.union (re.range "\u{d7}" "\u{d7}") (re.range "\u{f7}" "\u{f7}")))))))))))(re.++ (re.+ (re.union (re.range "A" "Z") (re.range "a" "z")))(re.++ (re.* (re.union (re.range "\u{00}" "/")(re.union (re.range ":" "@")(re.union (re.range "[" "^")(re.union (re.range "`" "`")(re.union (re.range "{" "\u{a9}")(re.union (re.range "\u{ab}" "\u{b4}")(re.union (re.range "\u{b6}" "\u{b9}")(re.union (re.range "\u{bb}" "\u{bf}")(re.union (re.range "\u{d7}" "\u{d7}") (re.range "\u{f7}" "\u{f7}"))))))))))) ((_ re.loop 1 2) (re.range "0" "9"))))))(re.union (re.++ ((_ re.loop 1 2) (re.range "0" "9"))(re.++ (re.* (re.union (re.range "\u{00}" "/")(re.union (re.range ":" "@")(re.union (re.range "[" "^")(re.union (re.range "`" "`")(re.union (re.range "{" "\u{a9}")(re.union (re.range "\u{ab}" "\u{b4}")(re.union (re.range "\u{b6}" "\u{b9}")(re.union (re.range "\u{bb}" "\u{bf}")(re.union (re.range "\u{d7}" "\u{d7}") (re.range "\u{f7}" "\u{f7}")))))))))))(re.++ (re.+ (re.union (re.range "A" "Z") (re.range "a" "z")))(re.++ (re.* (re.union (re.range "\u{00}" "/")(re.union (re.range ":" "@")(re.union (re.range "[" "^")(re.union (re.range "`" "`")(re.union (re.range "{" "\u{a9}")(re.union (re.range "\u{ab}" "\u{b4}")(re.union (re.range "\u{b6}" "\u{b9}")(re.union (re.range "\u{bb}" "\u{bf}")(re.union (re.range "\u{d7}" "\u{d7}") (re.range "\u{f7}" "\u{f7}"))))))))))) ((_ re.loop 2 4) (re.range "0" "9"))))))(re.union (re.++ ((_ re.loop 1 2) (re.range "0" "9"))(re.++ (re.* (re.union (re.range "\u{00}" "/")(re.union (re.range ":" "@")(re.union (re.range "[" "^")(re.union (re.range "`" "`")(re.union (re.range "{" "\u{a9}")(re.union (re.range "\u{ab}" "\u{b4}")(re.union (re.range "\u{b6}" "\u{b9}")(re.union (re.range "\u{bb}" "\u{bf}")(re.union (re.range "\u{d7}" "\u{d7}") (re.range "\u{f7}" "\u{f7}"))))))))))) (re.+ (re.union (re.range "A" "Z") (re.range "a" "z")))))(re.union (re.++ (re.+ (re.union (re.range "A" "Z") (re.range "a" "z")))(re.++ (re.* (re.union (re.range "\u{00}" "/")(re.union (re.range ":" "@")(re.union (re.range "[" "^")(re.union (re.range "`" "`")(re.union (re.range "{" "\u{a9}")(re.union (re.range "\u{ab}" "\u{b4}")(re.union (re.range "\u{b6}" "\u{b9}")(re.union (re.range "\u{bb}" "\u{bf}")(re.union (re.range "\u{d7}" "\u{d7}") (re.range "\u{f7}" "\u{f7}"))))))))))) ((_ re.loop 1 2) (re.range "0" "9")))) (re.++ ((_ re.loop 2 2) (re.range "0" "9"))(re.++ ((_ re.loop 2 2) (re.range "0" "9")) (re.opt ((_ re.loop 2 4) (re.range "0" "9"))))))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "\u{00}" (str.++ "9" (str.++ "5" (str.++ "2" (str.++ "-" (str.++ "9" (str.++ "7" (str.++ "9" (str.++ "-" (str.++ "0" (str.++ "8" (str.++ "8" (str.++ "4" ""))))))))))))))

(define-fun Witness2 () String (str.++ "9" (str.++ "9" (str.++ "9" (str.++ "-" (str.++ "2" (str.++ "5" (str.++ "5" (str.++ "-" (str.++ "4" (str.++ "8" (str.++ "8" (str.++ "9" (str.++ "\u{0d}" (str.++ "\u{be}" (str.++ ":" ""))))))))))))))))

(assert (= regexA (re.++ (re.opt (re.union (re.++ (re.range "(" "(")(re.++ ((_ re.loop 3 3) (re.range "0" "9"))(re.++ (re.range ")" ")") (re.opt (re.range " " " "))))) (re.++ ((_ re.loop 3 3) (re.range "0" "9")) (re.range "-" "-"))))(re.++ ((_ re.loop 3 3) (re.range "0" "9"))(re.++ (re.range "-" "-") ((_ re.loop 4 4) (re.range "0" "9")))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "t" (str.++ "a" (str.++ "r" (str.++ "g" (str.++ "e" (str.++ "t" (str.++ " " (str.++ "=" (str.++ ";" (str.++ "o" (str.++ "i" ""))))))))))))

(define-fun Witness2 () String (str.++ "\u{dd}" (str.++ "6" (str.++ "t" (str.++ "a" (str.++ "r" (str.++ "g" (str.++ "e" (str.++ "t" (str.++ "=" (str.++ "_" (str.++ "_" (str.++ "_" (str.++ "_" (str.++ "_" (str.++ "K" (str.++ "9" (str.++ "o" (str.++ "&" (str.++ ";" (str.++ "a" "")))))))))))))))))))))

(assert (= regexA (re.++ (str.to_re (str.++ "t" (str.++ "a" (str.++ "r" (str.++ "g" (str.++ "e" (str.++ "t" "")))))))(re.++ (re.* (re.range " " " "))(re.++ (re.range "=" "=")(re.++ (re.* (re.range " " " "))(re.++ (re.* (re.union (re.range "&" "'")(re.union (re.range ";" ";")(re.union (re.range "o" "o")(re.union (re.range "q" "q") (re.range "t" "u"))))))(re.++ (re.* (re.range "_" "_"))(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))) (re.* (re.union (re.range "&" "&")(re.union (re.range ";" ";")(re.union (re.range "o" "o")(re.union (re.range "q" "q") (re.range "t" "u")))))))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "\u{bb}" (str.++ "x" (str.++ "\u{e4}" (str.++ "I" (str.++ "T" (str.++ "8" (str.++ "4" (str.++ "Q" (str.++ "1" (str.++ "4" (str.++ "8" (str.++ "5" (str.++ "3" (str.++ "2" (str.++ "5" (str.++ "9" (str.++ "1" (str.++ "3" (str.++ "9" (str.++ "1" (str.++ "6" (str.++ "8" (str.++ "9" (str.++ "5" (str.++ "6" (str.++ "9" (str.++ "0" (str.++ "8" (str.++ "9" (str.++ "8" (str.++ "g" ""))))))))))))))))))))))))))))))))

(define-fun Witness2 () String (str.++ "}" (str.++ "I" (str.++ "T" (str.++ "8" (str.++ "4" (str.++ " " (str.++ "J" (str.++ "5" (str.++ "4" (str.++ "7" (str.++ " " (str.++ "4" (str.++ "1" (str.++ "9" (str.++ "4" (str.++ " " (str.++ "9" (str.++ "7" (str.++ "8" (str.++ "6" (str.++ " " (str.++ "1" (str.++ "9" (str.++ "6" (str.++ "3" (str.++ " " (str.++ "8" (str.++ "8" (str.++ "8" (str.++ "6" (str.++ " " (str.++ "8" (str.++ "2" (str.++ "7" "")))))))))))))))))))))))))))))))))))

(assert (= regexA (re.union (re.++ (str.to_re (str.++ "I" (str.++ "T" "")))(re.++ ((_ re.loop 2 2) (re.range "0" "9"))(re.++ (re.range " " " ")(re.++ (re.union (re.range "A" "Z") (re.range "a" "z"))(re.++ ((_ re.loop 3 3) (re.range "0" "9"))(re.++ (re.range " " " ")(re.++ ((_ re.loop 4 4) (re.range "0" "9"))(re.++ (re.range " " " ")(re.++ ((_ re.loop 4 4) (re.range "0" "9"))(re.++ (re.range " " " ")(re.++ ((_ re.loop 4 4) (re.range "0" "9"))(re.++ (re.range " " " ")(re.++ ((_ re.loop 4 4) (re.range "0" "9"))(re.++ (re.range " " " ") ((_ re.loop 3 3) (re.range "0" "9")))))))))))))))) (re.++ (str.to_re (str.++ "I" (str.++ "T" "")))(re.++ ((_ re.loop 2 2) (re.range "0" "9"))(re.++ (re.union (re.range "A" "Z") (re.range "a" "z")) ((_ re.loop 22 22) (re.range "0" "9"))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "(" (str.++ "8" (str.++ "6" (str.++ "8" (str.++ ")" (str.++ " " (str.++ "8" (str.++ "7" (str.++ "9" (str.++ " " (str.++ "8" (str.++ "9" (str.++ "8" (str.++ "1" "")))))))))))))))

(define-fun Witness2 () String (str.++ "\u{ce}" (str.++ "5" (str.++ "3" (str.++ "1" (str.++ "-" (str.++ "9" (str.++ "9" (str.++ "8" (str.++ "-" (str.++ "8" (str.++ "9" (str.++ "6" (str.++ "0" (str.++ " " (str.++ "\u{fa}" ""))))))))))))))))

(assert (= regexA (re.++ (re.union (re.+ (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))) (str.to_re ""))(re.++ (re.opt (re.union (re.++ (re.range "(" "(")(re.++ ((_ re.loop 3 3) (re.range "0" "9"))(re.++ (re.range ")" ")") (re.+ (re.range " " " ")))))(re.union (re.++ ((_ re.loop 3 3) (re.range "0" "9")) (re.range "-" "-")) (re.++ ((_ re.loop 3 3) (re.range "0" "9")) (re.+ (re.range " " " "))))))(re.++ ((_ re.loop 3 3) (re.range "0" "9"))(re.++ (re.union (re.range "-" "-") (re.+ (re.range " " " ")))(re.++ ((_ re.loop 4 4) (re.range "0" "9"))(re.++ (re.opt (re.++ (re.+ (re.range " " " "))(re.++ (re.range "x" "x") ((_ re.loop 1 4) (re.range "0" "9"))))) (re.union (re.+ (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))) (str.to_re ""))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "\u{e2}" (str.++ "@" (str.++ "8" (str.++ "." (str.++ "2" (str.++ "9" (str.++ "\u{cd}" (str.++ ":" "")))))))))

(define-fun Witness2 () String (str.++ "6" (str.++ "@" (str.++ "\u{c2}" (str.++ "." (str.++ "z" (str.++ "\u{aa}" (str.++ "\u{ba}" ""))))))))

(assert (= regexA (re.++ (re.+ (re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))))(re.++ (re.range "@" "@")(re.++ (re.+ (re.++ (re.+ (re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))) (re.range "." "."))) (re.+ (re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "\u{ff}" (str.++ "8" (str.++ "6" (str.++ ":" (str.++ ":" (str.++ "a" (str.++ ":" (str.++ "8" (str.++ "8" ""))))))))))

(define-fun Witness2 () String (str.++ "f" (str.++ ":" (str.++ "B" (str.++ ":" (str.++ "9" (str.++ ":" (str.++ "b" (str.++ "4" (str.++ "5" (str.++ ":" (str.++ ":" (str.++ "c" (str.++ "0" (str.++ "d" "")))))))))))))))

(assert (= regexA (re.union (str.to_re (str.++ ":" (str.++ ":" "")))(re.union (re.++ (re.union (re.++ ((_ re.loop 5 5) (str.to_re (str.++ "0" (str.++ ":" "")))) (re.union (re.range "0" "0") ((_ re.loop 4 4) (re.union (re.range "F" "F") (re.range "f" "f"))))) (re.++ (re.range ":" ":") (re.opt (re.++ (re.range ":" ":") ((_ re.loop 4 4) (re.union (re.range "F" "F") (re.range "f" "f")))))))(re.++ (re.range ":" ":") (re.++ (re.union (re.++ (str.to_re (str.++ "2" (str.++ "5" ""))) (re.range "0" "5"))(re.union (re.++ (re.range "2" "2")(re.++ (re.range "0" "4") (re.range "0" "9")))(re.union (re.++ (re.range "1" "1") ((_ re.loop 2 2) (re.range "0" "9")))(re.union (re.++ (re.range "1" "9") (re.opt (re.range "0" "9"))) (re.range "0" "0"))))) ((_ re.loop 3 3) (re.++ (re.range "." ".") (re.union (re.++ (str.to_re (str.++ "2" (str.++ "5" ""))) (re.range "0" "5"))(re.union (re.++ (re.range "2" "2")(re.++ (re.range "0" "4") (re.range "0" "9")))(re.union (re.++ (re.range "1" "1") ((_ re.loop 2 2) (re.range "0" "9")))(re.union (re.++ (re.range "1" "9") (re.opt (re.range "0" "9"))) (re.range "0" "0"))))))))))(re.union (re.++ ((_ re.loop 7 7) (re.++ ((_ re.loop 1 4) (re.union (re.range "0" "9")(re.union (re.range "A" "F") (re.range "a" "f")))) (re.range ":" ":"))) ((_ re.loop 1 4) (re.union (re.range "0" "9")(re.union (re.range "A" "F") (re.range "a" "f")))))(re.union (re.++ (re.range ":" ":") ((_ re.loop 1 6) (re.++ (re.range ":" ":") ((_ re.loop 1 4) (re.union (re.range "0" "9")(re.union (re.range "A" "F") (re.range "a" "f")))))))(re.union (re.++ ((_ re.loop 1 6) (re.++ ((_ re.loop 1 4) (re.union (re.range "0" "9")(re.union (re.range "A" "F") (re.range "a" "f")))) (re.range ":" ":"))) (re.range ":" ":"))(re.union (re.++ (re.++ ((_ re.loop 1 4) (re.union (re.range "0" "9")(re.union (re.range "A" "F") (re.range "a" "f")))) (re.range ":" ":")) ((_ re.loop 1 6) (re.++ (re.range ":" ":") ((_ re.loop 1 4) (re.union (re.range "0" "9")(re.union (re.range "A" "F") (re.range "a" "f")))))))(re.union (re.++ ((_ re.loop 2 2) (re.++ ((_ re.loop 1 4) (re.union (re.range "0" "9")(re.union (re.range "A" "F") (re.range "a" "f")))) (re.range ":" ":"))) ((_ re.loop 1 5) (re.++ (re.range ":" ":") ((_ re.loop 1 4) (re.union (re.range "0" "9")(re.union (re.range "A" "F") (re.range "a" "f")))))))(re.union (re.++ ((_ re.loop 3 3) (re.++ ((_ re.loop 1 4) (re.union (re.range "0" "9")(re.union (re.range "A" "F") (re.range "a" "f")))) (re.range ":" ":"))) ((_ re.loop 1 4) (re.++ (re.range ":" ":") ((_ re.loop 1 4) (re.union (re.range "0" "9")(re.union (re.range "A" "F") (re.range "a" "f")))))))(re.union (re.++ ((_ re.loop 4 4) (re.++ ((_ re.loop 1 4) (re.union (re.range "0" "9")(re.union (re.range "A" "F") (re.range "a" "f")))) (re.range ":" ":"))) ((_ re.loop 1 3) (re.++ (re.range ":" ":") ((_ re.loop 1 4) (re.union (re.range "0" "9")(re.union (re.range "A" "F") (re.range "a" "f"))))))) (re.++ ((_ re.loop 5 5) (re.++ ((_ re.loop 1 4) (re.union (re.range "0" "9")(re.union (re.range "A" "F") (re.range "a" "f")))) (re.range ":" ":"))) ((_ re.loop 1 2) (re.++ (re.range ":" ":") ((_ re.loop 1 4) (re.union (re.range "0" "9")(re.union (re.range "A" "F") (re.range "a" "f"))))))))))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "9" (str.++ "3" (str.++ "-" (str.++ "Y" (str.++ "T" (str.++ "A" (str.++ "-" (str.++ "8" "")))))))))

(define-fun Witness2 () String (str.++ "5" (str.++ "4" (str.++ "-" (str.++ "7" (str.++ "8" (str.++ "-" (str.++ "Q" (str.++ "Z" (str.++ "\u{9e}" ""))))))))))

(assert (= regexA (re.union (re.++ (str.to_re "")(re.++ ((_ re.loop 2 2) (re.range "A" "Z"))(re.++ (re.range "-" "-")(re.++ ((_ re.loop 2 2) (re.range "0" "9"))(re.++ (re.range "-" "-") ((_ re.loop 2 2) (re.range "0" "9")))))))(re.union (re.++ ((_ re.loop 2 2) (re.range "0" "9"))(re.++ (re.range "-" "-")(re.++ ((_ re.loop 2 2) (re.range "0" "9"))(re.++ (re.range "-" "-") ((_ re.loop 2 2) (re.range "A" "Z"))))))(re.union (re.++ ((_ re.loop 2 2) (re.range "0" "9"))(re.++ (re.range "-" "-")(re.++ ((_ re.loop 2 2) (re.range "A" "Z"))(re.++ (re.range "-" "-") ((_ re.loop 2 2) (re.range "0" "9"))))))(re.union (re.++ ((_ re.loop 2 2) (re.range "A" "Z"))(re.++ (re.range "-" "-")(re.++ ((_ re.loop 2 2) (re.range "0" "9"))(re.++ (re.range "-" "-") ((_ re.loop 2 2) (re.range "A" "Z"))))))(re.union (re.++ ((_ re.loop 2 2) (re.range "A" "Z"))(re.++ (re.range "-" "-")(re.++ ((_ re.loop 2 2) (re.range "A" "Z"))(re.++ (re.range "-" "-") ((_ re.loop 2 2) (re.range "0" "9"))))))(re.union (re.range "}" "}")(re.union (re.++ ((_ re.loop 2 2) (re.range "0" "9"))(re.++ (re.range "-" "-")(re.++ ((_ re.loop 2 2) (re.range "A" "Z"))(re.++ (re.range "-" "-") ((_ re.loop 2 2) (re.range "A" "Z"))))))(re.union (re.++ ((_ re.loop 2 2) (re.range "0" "9"))(re.++ (re.range "-" "-")(re.++ ((_ re.loop 3 3) (re.range "A" "Z"))(re.++ (re.range "-" "-") (re.range "0" "9"))))) (re.++ (re.range "0" "9")(re.++ (re.range "-" "-")(re.++ ((_ re.loop 3 3) (re.range "A" "Z"))(re.++ (re.range "-" "-")(re.++ ((_ re.loop 2 2) (re.range "0" "9")) (str.to_re ""))))))))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "9" (str.++ "\u{9e}" (str.++ "\u{cf}" (str.++ "\u{8b}" (str.++ "]" (str.++ "e" (str.++ "v" (str.++ "i" "")))))))))

(define-fun Witness2 () String (str.++ "s" (str.++ "\u{b5}" (str.++ "\u{ce}" (str.++ "e" "")))))

(assert (= regexA (re.++ (re.range "e" "e") (re.opt (re.++ (re.range "v" "v") (re.opt (re.range "i" "i")))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "\u{cf}" (str.++ "\u{be}" (str.++ "," (str.++ "\u{22}" (str.++ "\u{c8}" (str.++ "\u{16}" (str.++ "\u{22}" ""))))))))

(define-fun Witness2 () String (str.++ "\u{22}" (str.++ "\u{d0}" (str.++ "\u{22}" (str.++ "1" "")))))

(assert (= regexA (re.++ (re.range "\u{22}" "\u{22}")(re.++ (re.* (re.union (re.++ (re.range "\u{5c}" "\u{5c}") (re.union (re.range "\u{00}" "\u{09}") (re.range "\u{0b}" "\u{ff}"))) (re.union (re.range "\u{00}" "!")(re.union (re.range "#" "[") (re.range "]" "\u{ff}"))))) (re.range "\u{22}" "\u{22}")))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "R" (str.++ "." (str.++ "4" (str.++ "]" (str.++ "@" (str.++ "R" (str.++ "5" (str.++ "]" (str.++ "." (str.++ "." (str.++ "8" ""))))))))))))

(define-fun Witness2 () String (str.++ "z" (str.++ "@" (str.++ "F" (str.++ "3" (str.++ "]" (str.++ "." (str.++ "." (str.++ "9" (str.++ "]" (str.++ "]" (str.++ "\u{a7}" (str.++ "b" (str.++ "\u{95}" ""))))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.union (re.range "A" "Z") (re.range "a" "z"))(re.++ (re.* (re.++ (re.union (re.range "." ".")(re.union (re.range "A" "[")(re.union (re.range "_" "_") (re.range "a" "z"))))(re.++ (re.range "0" "9") (re.range "]" "]"))))(re.++ (re.range "@" "@")(re.++ (re.union (re.range "." ".")(re.union (re.range "A" "[") (re.range "a" "z")))(re.++ (re.range "0" "9")(re.++ (re.* (re.range "]" "]"))(re.++ (re.range "." ".")(re.++ (re.union (re.range "." ".")(re.union (re.range "[" "[") (re.range "a" "z")))(re.++ (re.range "0" "9") (re.* (re.range "]" "]"))))))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "7" (str.++ "\u{1a}" (str.++ "9" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "\u{85}" (str.++ "8" (str.++ "5" (str.++ "1" (str.++ "5" (str.++ "\u{0c}" (str.++ "8" (str.++ "4" (str.++ "8" (str.++ "4" (str.++ "\u{85}" (str.++ "0" (str.++ "7" (str.++ "8" (str.++ "2" ""))))))))))))))))))))))

(define-fun Witness2 () String (str.++ "3" (str.++ "3" (str.++ "4" (str.++ "8" (str.++ "\u{0a}" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "9" (str.++ "\u{a0}" (str.++ "0" (str.++ "9" (str.++ "2" (str.++ "0" (str.++ " " (str.++ "9" (str.++ "4" (str.++ "6" (str.++ "7" ""))))))))))))))))))))

(assert (= regexA (re.++ ((_ re.loop 4 4) (re.range "0" "9"))(re.++ (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))(re.++ ((_ re.loop 4 4) (re.range "0" "9"))(re.++ (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))(re.++ ((_ re.loop 4 4) (re.range "0" "9"))(re.++ (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))(re.++ ((_ re.loop 4 4) (re.range "0" "9")) (str.to_re ""))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "\u{22}" (str.++ "h" (str.++ "t" (str.++ "t" (str.++ "p" (str.++ ":" (str.++ "/" (str.++ "/" (str.++ "v" (str.++ "i" (str.++ "d" (str.++ "e" (str.++ "o" (str.++ "." (str.++ "g" (str.++ "o" (str.++ "o" (str.++ "g" (str.++ "l" (str.++ "e" (str.++ "." (str.++ "c" (str.++ "o" (str.++ "m" (str.++ "/" (str.++ "g" (str.++ "o" (str.++ "o" (str.++ "g" (str.++ "l" (str.++ "e" (str.++ "p" (str.++ "l" (str.++ "a" (str.++ "y" (str.++ "e" (str.++ "r" (str.++ "." (str.++ "s" (str.++ "w" (str.++ "f" (str.++ "?" (str.++ "d" (str.++ "o" (str.++ "c" (str.++ "I" (str.++ "d" (str.++ "=" (str.++ "9" (str.++ "8" (str.++ "3" (str.++ "9" (str.++ "8" (str.++ "1" (str.++ "8" (str.++ "8" (str.++ "1" (str.++ "9" (str.++ "0" (str.++ "9" (str.++ "0" (str.++ "5" (str.++ "8" (str.++ "3" (str.++ "8" (str.++ "8" (str.++ "4" (str.++ "&" (str.++ "h" (str.++ "l" (str.++ "=" (str.++ "k" (str.++ "o" (str.++ "\u{22}" "")))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(define-fun Witness2 () String (str.++ "\u{ad}" (str.++ "\u{01}" (str.++ "\u{22}" (str.++ "h" (str.++ "t" (str.++ "t" (str.++ "p" (str.++ ":" (str.++ "/" (str.++ "/" (str.++ "v" (str.++ "i" (str.++ "d" (str.++ "e" (str.++ "o" (str.++ "." (str.++ "g" (str.++ "o" (str.++ "o" (str.++ "g" (str.++ "l" (str.++ "e" (str.++ "." (str.++ "c" (str.++ "o" (str.++ "m" (str.++ "/" (str.++ "g" (str.++ "o" (str.++ "o" (str.++ "g" (str.++ "l" (str.++ "e" (str.++ "p" (str.++ "l" (str.++ "a" (str.++ "y" (str.++ "e" (str.++ "r" (str.++ "." (str.++ "s" (str.++ "w" (str.++ "f" (str.++ "?" (str.++ "d" (str.++ "o" (str.++ "c" (str.++ "I" (str.++ "d" (str.++ "=" (str.++ "8" (str.++ "9" (str.++ "8" (str.++ "9" (str.++ "5" (str.++ "8" (str.++ "5" (str.++ "5" (str.++ "6" (str.++ "1" (str.++ "4" (str.++ "4" (str.++ "8" (str.++ "1" (str.++ "4" (str.++ "1" (str.++ "2" (str.++ "4" (str.++ "8" (str.++ "&" (str.++ "h" (str.++ "l" (str.++ "=" (str.++ "d" (str.++ "a" (str.++ "\u{22}" "")))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(assert (= regexA (re.++ (str.to_re (str.++ "\u{22}" (str.++ "h" (str.++ "t" (str.++ "t" (str.++ "p" (str.++ ":" (str.++ "/" (str.++ "/" (str.++ "v" (str.++ "i" (str.++ "d" (str.++ "e" (str.++ "o" (str.++ "." (str.++ "g" (str.++ "o" (str.++ "o" (str.++ "g" (str.++ "l" (str.++ "e" (str.++ "." (str.++ "c" (str.++ "o" (str.++ "m" (str.++ "/" (str.++ "g" (str.++ "o" (str.++ "o" (str.++ "g" (str.++ "l" (str.++ "e" (str.++ "p" (str.++ "l" (str.++ "a" (str.++ "y" (str.++ "e" (str.++ "r" (str.++ "." (str.++ "s" (str.++ "w" (str.++ "f" (str.++ "?" (str.++ "d" (str.++ "o" (str.++ "c" (str.++ "I" (str.++ "d" (str.++ "=" "")))))))))))))))))))))))))))))))))))))))))))))))))(re.++ ((_ re.loop 19 19) (re.range "0" "9"))(re.++ (str.to_re (str.++ "&" (str.++ "h" (str.++ "l" (str.++ "=" "")))))(re.++ ((_ re.loop 2 2) (re.range "a" "z")) (re.range "\u{22}" "\u{22}")))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "\u{dd}" (str.++ "\u{d1}" (str.++ "." (str.++ "w" (str.++ "m" (str.++ "A" (str.++ "x" ""))))))))

(define-fun Witness2 () String (str.++ "M" (str.++ "p" (str.++ "3" ""))))

(assert (= regexA (re.union (re.++ (re.* (re.union (re.range "\u{00}" "\u{09}") (re.range "\u{0b}" "\u{ff}")))(re.++ (re.range "." ".") (re.++ (re.union (re.range "W" "W") (re.range "w" "w"))(re.++ (re.union (re.range "M" "M") (re.range "m" "m")) (re.union (re.range "A" "A") (re.range "a" "a")))))) (re.++ (re.++ (re.union (re.range "M" "M") (re.range "m" "m"))(re.++ (re.union (re.range "P" "P") (re.range "p" "p")) (re.range "3" "3"))) (str.to_re "")))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "\u{db}" (str.++ "\u{11}" (str.++ "\u{02}" (str.++ "h" (str.++ "t" (str.++ "t" (str.++ "p" (str.++ ":" (str.++ "/" (str.++ "/" (str.++ "\u{aa}" (str.++ "." (str.++ "h" (str.++ "t" (str.++ "t" (str.++ "p" (str.++ ":" (str.++ "/" (str.++ "/" (str.++ "-" (str.++ "." (str.++ "h" (str.++ "t" (str.++ "t" (str.++ "p" (str.++ ":" (str.++ "/" (str.++ "/" (str.++ "S" (str.++ "\u{aa}" (str.++ "\u{b5}" (str.++ "-" (str.++ "_" (str.++ "\u{aa}" (str.++ "." (str.++ "/" (str.++ "\u{aa}" ""))))))))))))))))))))))))))))))))))))))

(define-fun Witness2 () String (str.++ "_" (str.++ "." (str.++ "h" (str.++ "t" (str.++ "t" (str.++ "p" (str.++ ":" (str.++ "/" (str.++ "/" (str.++ "\u{b5}" (str.++ "8" (str.++ "." (str.++ "/" (str.++ "\u{8e}" (str.++ "\u{80}" ""))))))))))))))))

(assert (= regexA (re.++ (re.+ (re.union (re.++ (str.to_re (str.++ "h" (str.++ "t" (str.++ "t" (str.++ "p" (str.++ ":" (str.++ "/" (str.++ "/" "")))))))) (re.++ (re.+ (re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))) (re.range "." "."))) (re.++ (re.+ (re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))) (re.range "." "."))))(re.++ (re.* (re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))) (re.opt (re.++ (re.range "/" "/") (re.* (re.union (re.range " " " ")(re.union (re.range "%" "%")(re.union (re.range "-" "9")(re.union (re.range "=" "=")(re.union (re.range "?" "?")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "\u{22}" (str.++ "\u{ad}" (str.++ "\u{22}" (str.++ " " (str.++ "." (str.++ "\u{0d}" (str.++ "@" (str.++ "u" (str.++ "3" (str.++ "q" (str.++ "." (str.++ "8" (str.++ "x" (str.++ ">" (str.++ ";" ""))))))))))))))))

(define-fun Witness2 () String (str.++ "5" (str.++ "4" (str.++ "\u{e9}" (str.++ "@" (str.++ "k" (str.++ "." (str.++ "a" (str.++ "0" (str.++ "1" (str.++ "\u{ea}" "")))))))))))

(assert (= regexA (re.++ (re.opt (re.++ (re.range "\u{22}" "\u{22}")(re.++ (re.+ (re.union (re.range "\u{00}" "\u{09}") (re.range "\u{0b}" "\u{ff}")))(re.++ (re.range "\u{22}" "\u{22}") (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))))))(re.++ (re.opt (re.range "<" "<"))(re.++ (re.+ (re.union (re.range "." ".")(re.union (re.range "0" "9")(re.union (re.range "_" "_") (re.range "a" "z")))))(re.++ (re.union (re.range "\u{00}" "-")(re.union (re.range "/" "^") (re.range "`" "\u{ff}")))(re.++ (re.range "@" "@")(re.++ (re.+ (re.++ (re.+ (re.union (re.range "0" "9") (re.range "a" "z"))) (re.range "." ".")))(re.++ ((_ re.loop 2 6) (re.union (re.range "0" "9") (re.range "a" "z")))(re.++ (re.opt (re.range ">" ">")) (re.opt (re.range ";" ";"))))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ ":" (str.++ "+" (str.++ "g" (str.++ "t" (str.++ "&" (str.++ "\u{82}" (str.++ "\u{90}" ""))))))))

(define-fun Witness2 () String (str.++ "\u{b4}" (str.++ "\u{a8}" (str.++ ":" (str.++ "t" (str.++ "\u{c4}" (str.++ "X" (str.++ "\u{8e}" (str.++ "r" (str.++ "\u{05}" ""))))))))))

(assert (= regexA (re.++ (re.range ":" ":")(re.++ (re.opt (re.union (re.range "+" "+")(re.union (re.range "-" "-")(re.union (re.range "o" "o") (re.range "~" "~"))))) (re.+ (re.union (re.range "&" "&")(re.union (re.range ")" ")")(re.union (re.range ";" ";")(re.union (re.range "g" "g") (re.range "t" "t"))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "6" (str.++ "7" "")))

(define-fun Witness2 () String (str.++ "\u{92}" (str.++ "9" (str.++ "5" (str.++ "3" "")))))

(assert (= regexA ((_ re.loop 2 4) (re.range "0" "9"))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "&" (str.++ "l" (str.++ "t" (str.++ ";" (str.++ "a" (str.++ " " (str.++ "'" (str.++ "." (str.++ "h" (str.++ "r" (str.++ "e" (str.++ "f" (str.++ "N" (str.++ "u" (str.++ "&" (str.++ "g" (str.++ "t" (str.++ ";" (str.++ "E" (str.++ "." (str.++ "3" (str.++ "c" (str.++ "&" (str.++ "l" (str.++ "t" (str.++ ";" (str.++ "/" (str.++ "a" (str.++ "&" (str.++ "g" (str.++ "t" (str.++ ";" (str.++ "E" ""))))))))))))))))))))))))))))))))))

(define-fun Witness2 () String (str.++ "&" (str.++ "l" (str.++ "t" (str.++ ";" (str.++ "a" (str.++ " " (str.++ "h" (str.++ "r" (str.++ "e" (str.++ "f" (str.++ "=" (str.++ "=" (str.++ "=" (str.++ "3" (str.++ "%" (str.++ "&" (str.++ "g" (str.++ "t" (str.++ ";" (str.++ "V" (str.++ "6" (str.++ "&" (str.++ "l" (str.++ "t" (str.++ ";" (str.++ " " (str.++ "/" (str.++ "a" (str.++ "&" (str.++ "g" (str.++ "t" (str.++ ";" "")))))))))))))))))))))))))))))))))

(assert (= regexA (re.++ (str.to_re (str.++ "&" (str.++ "l" (str.++ "t" (str.++ ";" (str.++ "a" (str.++ " " "")))))))(re.++ (re.* (re.union (re.range " " " ")(re.union (re.range "&" "'")(re.union (re.range "." ".")(re.union (re.range "0" ";")(re.union (re.range "=" "=")(re.union (re.range "?" "?")(re.union (re.range "A" "Z") (re.range "a" "z")))))))))(re.++ (str.to_re (str.++ "h" (str.++ "r" (str.++ "e" (str.++ "f" "")))))(re.++ (re.* (re.range "=" "="))(re.++ (re.* (re.union (re.range " " " ")(re.union (re.range "&" "'")(re.union (re.range "." ".")(re.union (re.range "0" ";")(re.union (re.range "=" "=")(re.union (re.range "?" "?")(re.union (re.range "A" "Z") (re.range "a" "z")))))))))(re.++ (re.* (re.union (re.range "\u{00}" "%")(re.union (re.range "'" ":")(re.union (re.range "<" "f")(re.union (re.range "h" "s") (re.range "u" "\u{ff}"))))))(re.++ (str.to_re (str.++ "&" (str.++ "g" (str.++ "t" (str.++ ";" "")))))(re.++ (re.++ (re.* (re.union (re.range " " " ")(re.union (re.range "&" "'")(re.union (re.range "." ".")(re.union (re.range "0" ";")(re.union (re.range "=" "=")(re.union (re.range "?" "?")(re.union (re.range "A" "Z") (re.range "a" "z")))))))))(re.++ (re.* (re.union (re.range "\u{00}" "%")(re.union (re.range "'" ":")(re.union (re.range "<" "k")(re.union (re.range "m" "s") (re.range "u" "\u{ff}")))))) (str.to_re (str.++ "&" (str.++ "l" (str.++ "t" (str.++ ";" "")))))))(re.++ (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (str.to_re (str.++ "/" (str.++ "a" "")))(re.++ (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))) (str.to_re (str.++ "&" (str.++ "g" (str.++ "t" (str.++ ";" ""))))))))))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "\u{9a}" (str.++ "\u{0a}" (str.++ "9" (str.++ "$" (str.++ "6" (str.++ "6" (str.++ "9" ""))))))))

(define-fun Witness2 () String (str.++ "$" (str.++ "0" (str.++ "6" (str.++ "9" (str.++ "," (str.++ "4" (str.++ "8" (str.++ "9" (str.++ "," (str.++ "8" (str.++ "5" (str.++ "8" (str.++ "," (str.++ "0" (str.++ "9" (str.++ "8" (str.++ "," (str.++ "9" (str.++ "8" (str.++ "0" "")))))))))))))))))))))

(assert (= regexA (re.++ (re.range "$" "$")(re.++ (re.opt (re.range "0" "9"))(re.++ (re.opt (re.range "0" "9"))(re.++ (re.opt (re.range "0" "9"))(re.++ (re.opt (re.* (re.++ (re.range "," ",")(re.++ (re.range "0" "9")(re.++ (re.range "0" "9") (re.range "0" "9"))))))(re.++ (re.opt (re.++ (re.range "." ".")(re.++ (re.range "0" "9") (re.range "0" "9")))) (str.to_re "")))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "9" (str.++ "-" (str.++ "8" (str.++ "9" (str.++ "8" (str.++ "-" (str.++ "4" (str.++ "1" (str.++ "9" (str.++ "5" (str.++ "1" (str.++ "\u{b5}" (str.++ "\u{c1}" ""))))))))))))))

(define-fun Witness2 () String (str.++ "1" (str.++ "8" (str.++ "9" (str.++ "-" (str.++ "0" (str.++ "6" (str.++ "9" (str.++ "-" (str.++ "0" (str.++ "7" (str.++ "6" (str.++ "8" "")))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.opt (re.union (re.++ (re.range "(" "(")(re.++ ((_ re.loop 3 3) (re.range "0" "9"))(re.++ (re.range ")" ")") (re.opt (re.range " " " ")))))(re.union (re.++ ((_ re.loop 3 3) (re.range "0" "9")) (re.range "-" "-"))(re.union (re.++ (re.range "(" "(")(re.++ ((_ re.loop 2 2) (re.range "0" "9"))(re.++ (re.range ")" ")") (re.opt (re.range " " " ")))))(re.union (re.++ ((_ re.loop 2 2) (re.range "0" "9")) (re.range "-" "-"))(re.union (re.++ (re.range "(" "(")(re.++ (re.range "0" "9")(re.++ (re.range ")" ")") (re.opt (re.range " " " "))))) (re.++ (re.range "0" "9") (re.range "-" "-"))))))))(re.++ ((_ re.loop 3 3) (re.range "0" "9"))(re.++ (re.range "-" "-") (re.union ((_ re.loop 3 3) (re.range "0" "9")) ((_ re.loop 4 4) (re.range "0" "9")))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "\u{8e}" (str.++ "]" (str.++ "\u{b1}" ""))))

(define-fun Witness2 () String (str.++ "=" ""))

(assert (= regexA (re.union (re.range "+" "+")(re.union (re.range "<" ">")(re.union (re.range "|" "|")(re.union (re.range "~" "~")(re.union (re.range "\u{ac}" "\u{ac}")(re.union (re.range "\u{b1}" "\u{b1}")(re.union (re.range "\u{d7}" "\u{d7}") (re.range "\u{f7}" "\u{f7}"))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "\u{ee}" (str.++ "0" (str.++ "6" (str.++ "6" (str.++ "8" (str.++ "8" (str.++ ")" (str.++ "\u{09}" (str.++ "8" (str.++ "2" (str.++ "8" (str.++ "9" (str.++ "8" (str.++ "8" (str.++ "\u{0d}" ""))))))))))))))))

(define-fun Witness2 () String (str.++ "\u{ab}" (str.++ "#" (str.++ "|" (str.++ "\u{85}" (str.++ "(" (str.++ "0" (str.++ "9" (str.++ "8" (str.++ "9" (str.++ "\u{85}" (str.++ "8" (str.++ "8" (str.++ "9" (str.++ "\u{a0}" (str.++ "2" (str.++ "3" (str.++ "9" (str.++ "9" (str.++ "\u{0d}" (str.++ "\u{b7}" (str.++ "\u{f0}" (str.++ "F" (str.++ "\u{0a}" ""))))))))))))))))))))))))

(assert (= regexA (re.union (re.++ (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (re.opt (re.range "(" "("))(re.++ (re.range "0" "0")(re.++ ((_ re.loop 4 4) (re.range "0" "9"))(re.++ (re.opt (re.range ")" ")"))(re.++ (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ ((_ re.loop 6 6) (re.range "0" "9")) (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))))))))) (re.++ (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (re.opt (re.range "(" "("))(re.++ (re.range "0" "0")(re.++ ((_ re.loop 3 3) (re.range "0" "9"))(re.++ (re.opt (re.range ")" ")"))(re.++ (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ ((_ re.loop 3 3) (re.range "0" "9"))(re.++ (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ ((_ re.loop 4 4) (re.range "0" "9")) (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))))))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "v" (str.++ ":" (str.++ "\u{5c}" (str.++ "0" (str.++ "\u{f9}" (str.++ "x" (str.++ "l" (str.++ "s" (str.++ "\u{0e}" ""))))))))))

(define-fun Witness2 () String (str.++ "\u{91}" (str.++ "x" (str.++ "l" (str.++ "s" "")))))

(assert (= regexA (re.++ (re.opt (re.++ (re.union (re.range "A" "Z") (re.range "a" "z"))(re.++ (re.range ":" ":")(re.++ (re.* (re.++ (re.range "\u{5c}" "\u{5c}") (re.+ (re.range "w" "w"))))(re.++ (re.range "\u{5c}" "\u{5c}") (re.+ (re.union (re.range "0" "0")(re.union (re.range "9" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_") (re.range "a" "z")))))))))))(re.++ (re.union (re.range "\u{00}" "\u{09}") (re.range "\u{0b}" "\u{ff}")) (str.to_re (str.++ "x" (str.++ "l" (str.++ "s" ""))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "\u{ab}" (str.++ "'" (str.++ "&" (str.++ "q" (str.++ "u" (str.++ "o" (str.++ "t" (str.++ ";" "")))))))))

(define-fun Witness2 () String (str.++ "b" (str.++ "'" (str.++ "&" (str.++ "q" (str.++ "u" (str.++ "o" (str.++ "t" (str.++ ";" "")))))))))

(assert (= regexA (str.to_re (str.++ "'" (str.++ "&" (str.++ "q" (str.++ "u" (str.++ "o" (str.++ "t" (str.++ ";" ""))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "r" (str.++ "e" (str.++ "g" (str.++ "e" (str.++ "x" (str.++ "S" "")))))))

(define-fun Witness2 () String (str.++ "i" (str.++ "r" (str.++ "e" (str.++ "g" (str.++ "e" (str.++ "x" "")))))))

(assert (= regexA (str.to_re (str.++ "r" (str.++ "e" (str.++ "g" (str.++ "e" (str.++ "x" ""))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "v" (str.++ "<" (str.++ "b" (str.++ "o" (str.++ "d" (str.++ "y" (str.++ "\u{c1}" (str.++ ">" "")))))))))

(define-fun Witness2 () String (str.++ "\u{16}" (str.++ "\u{07}" (str.++ "<" (str.++ "b" (str.++ "o" (str.++ "d" (str.++ "y" (str.++ ">" (str.++ "\u{c2}" ""))))))))))

(assert (= regexA (re.++ (str.to_re (str.++ "<" (str.++ "b" (str.++ "o" (str.++ "d" (str.++ "y" ""))))))(re.++ (re.* (re.range "\u{00}" "\u{ff}")) (re.range ">" ">")))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "w" (str.++ "w" (str.++ "w" (str.++ "\u{be}" (str.++ "r" (str.++ "u" (str.++ "n" (str.++ "e" (str.++ "s" (str.++ "c" (str.++ "a" (str.++ "p" (str.++ "e" (str.++ "-" (str.++ "m" (str.++ "o" (str.++ "n" (str.++ "e" (str.++ "y" (str.++ "H" (str.++ "e" (str.++ "u" (str.++ "\u{c5}" (str.++ "!" "")))))))))))))))))))))))))

(define-fun Witness2 () String (str.++ "\u{c5}" (str.++ "\u{b9}" (str.++ "w" (str.++ "w" (str.++ "w" (str.++ ")" (str.++ "r" (str.++ "u" (str.++ "n" (str.++ "e" (str.++ "s" (str.++ "c" (str.++ "a" (str.++ "p" (str.++ "e" (str.++ "-" (str.++ "m" (str.++ "o" (str.++ "n" (str.++ "e" (str.++ "y" (str.++ "\u{d3}" (str.++ "e" (str.++ "u" "")))))))))))))))))))))))))

(assert (= regexA (re.++ (str.to_re (str.++ "w" (str.++ "w" (str.++ "w" ""))))(re.++ (re.union (re.range "\u{00}" "\u{09}") (re.range "\u{0b}" "\u{ff}"))(re.++ (str.to_re (str.++ "r" (str.++ "u" (str.++ "n" (str.++ "e" (str.++ "s" (str.++ "c" (str.++ "a" (str.++ "p" (str.++ "e" (str.++ "-" (str.++ "m" (str.++ "o" (str.++ "n" (str.++ "e" (str.++ "y" ""))))))))))))))))(re.++ (re.union (re.range "\u{00}" "\u{09}") (re.range "\u{0b}" "\u{ff}")) (str.to_re (str.++ "e" (str.++ "u" "")))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "h" (str.++ "r" (str.++ "e" (str.++ "f" (str.++ "=" (str.++ "'" (str.++ "&" (str.++ "q" (str.++ "u" (str.++ "o" (str.++ "t" (str.++ ";" (str.++ "\u{a3}" (str.++ "\u{11}" (str.++ "\u{88}" (str.++ "\u{a2}" (str.++ "|" ""))))))))))))))))))

(define-fun Witness2 () String (str.++ "\u{c7}" (str.++ ";" (str.++ "h" (str.++ "r" (str.++ "e" (str.++ "f" (str.++ "=" (str.++ " " (str.++ " " (str.++ " " (str.++ " " (str.++ " " (str.++ " " (str.++ "&" (str.++ "q" (str.++ "u" (str.++ "o" (str.++ "t" (str.++ ";" (str.++ "\u{7f}" (str.++ "\u{bf}" (str.++ "\u{04}" (str.++ "&" (str.++ "q" (str.++ "u" (str.++ "o" (str.++ "t" (str.++ ";" (str.++ "\u{d5}" ""))))))))))))))))))))))))))))))

(assert (= regexA (re.++ (str.to_re (str.++ "h" (str.++ "r" (str.++ "e" (str.++ "f" "")))))(re.++ (re.* (re.range " " " "))(re.++ (re.range "=" "=")(re.++ (re.* (re.range " " " "))(re.++ (re.union (re.range "'" "'") (str.to_re (str.++ "&" (str.++ "q" (str.++ "u" (str.++ "o" (str.++ "t" (str.++ ";" ""))))))))(re.++ (re.* (re.union (re.range "\u{00}" "%")(re.union (re.range "(" ":")(re.union (re.range "<" "n")(re.union (re.range "p" "p")(re.union (re.range "r" "s") (re.range "v" "\u{ff}"))))))) (re.union (re.range "'" "'") (str.to_re (str.++ "&" (str.++ "q" (str.++ "u" (str.++ "o" (str.++ "t" (str.++ ";" ""))))))))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "9" (str.++ "5" (str.++ "3" (str.++ "," (str.++ "8" (str.++ "8" "")))))))

(define-fun Witness2 () String (str.++ "\u{08}" (str.++ "1" (str.++ "9" (str.++ "3" (str.++ "9" (str.++ "8" (str.++ "9" (str.++ "," (str.++ "5" (str.++ "-" (str.++ "7" (str.++ "7" (str.++ "8" (str.++ "-" (str.++ "9" (str.++ "2" (str.++ "9" (str.++ "3" (str.++ "\u{a2}" (str.++ "\u{fb}" (str.++ "\u{b3}" ""))))))))))))))))))))))

(assert (= regexA (re.++ (re.+ (re.++ (re.+ (re.range "0" "9")) (re.* (re.++ (re.range "-" "-") (re.+ (re.range "0" "9")))))) (re.* (re.++ (re.range "," ",")(re.++ (re.+ (re.range "0" "9")) (re.* (re.++ (re.range "-" "-") (re.+ (re.range "0" "9"))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "5" (str.++ "2" (str.++ "7" (str.++ "9" (str.++ "F" ""))))))

(define-fun Witness2 () String (str.++ "\u{b0}" (str.++ "1" (str.++ "8" (str.++ "8" (str.++ "0" ""))))))

(assert (= regexA ((_ re.loop 4 6) (re.range "0" "9"))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "/" (str.++ "r" (str.++ "a" (str.++ "p" (str.++ "i" (str.++ "d" (str.++ "s" (str.++ "h" (str.++ "a" (str.++ "r" (str.++ "e" (str.++ "." (str.++ "c" (str.++ "o" (str.++ "m" (str.++ "/" (str.++ "f" (str.++ "i" (str.++ "l" (str.++ "e" (str.++ "s" (str.++ "/" (str.++ "9" (str.++ "/" (str.++ "\u{80}" (str.++ "/" (str.++ "\u{04}" (str.++ ")" (str.++ "\u{ee}" ""))))))))))))))))))))))))))))))

(define-fun Witness2 () String (str.++ "/" (str.++ "r" (str.++ "a" (str.++ "p" (str.++ "i" (str.++ "d" (str.++ "s" (str.++ "h" (str.++ "a" (str.++ "r" (str.++ "e" (str.++ "." (str.++ "c" (str.++ "o" (str.++ "m" (str.++ "/" (str.++ "f" (str.++ "i" (str.++ "l" (str.++ "e" (str.++ "s" (str.++ "/" (str.++ "9" (str.++ "/" (str.++ "d" (str.++ "}" (str.++ "/" (str.++ "\u{15}" "")))))))))))))))))))))))))))))

(assert (= regexA (re.++ (str.to_re (str.++ "/" (str.++ "r" (str.++ "a" (str.++ "p" (str.++ "i" (str.++ "d" (str.++ "s" (str.++ "h" (str.++ "a" (str.++ "r" (str.++ "e" (str.++ "." (str.++ "c" (str.++ "o" (str.++ "m" (str.++ "/" (str.++ "f" (str.++ "i" (str.++ "l" (str.++ "e" (str.++ "s" (str.++ "/" "")))))))))))))))))))))))(re.++ (re.+ (re.range "0" "9"))(re.++ (re.range "/" "/")(re.++ (re.+ (re.union (re.range "\u{00}" "\u{08}")(re.union (re.range "\u{0e}" "\u{1f}")(re.union (re.range "!" "!")(re.union (re.range "#" "&")(re.union (re.range "(" ".")(re.union (re.range "0" ";")(re.union (re.range "=" "=")(re.union (re.range "?" "[")(re.union (re.range "]" "]")(re.union (re.range "_" "\u{84}")(re.union (re.range "\u{86}" "\u{9f}") (re.range "\u{a1}" "\u{ff}"))))))))))))) (re.range "/" "/")))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ " " (str.++ "f" (str.++ "t" (str.++ "p" (str.++ ":" (str.++ "/" (str.++ "/" (str.++ "\u{e1}" (str.++ " " (str.++ "4" (str.++ "\u{da}" (str.++ "\u{1b}" "")))))))))))))

(define-fun Witness2 () String (str.++ "q" (str.++ " " (str.++ "f" (str.++ "t" (str.++ "p" (str.++ "s" (str.++ ":" (str.++ "/" (str.++ "/" (str.++ "\u{d8}" (str.++ "\u{ea}" (str.++ "E" (str.++ " " (str.++ "#" (str.++ "\u{cb}" (str.++ "#" (str.++ " " (str.++ "\u{a6}" "")))))))))))))))))))

(assert (= regexA (re.++ (re.range " " " ")(re.++ (re.union (str.to_re (str.++ "m" (str.++ "a" (str.++ "i" (str.++ "l" (str.++ "t" (str.++ "o" (str.++ ":" "")))))))) (re.++ (re.union (str.to_re (str.++ "n" (str.++ "e" (str.++ "w" (str.++ "s" ""))))) (re.++ (re.union (str.to_re (str.++ "h" (str.++ "t" ""))) (re.range "f" "f"))(re.++ (str.to_re (str.++ "t" (str.++ "p" ""))) (re.opt (re.range "s" "s"))))) (str.to_re (str.++ ":" (str.++ "/" (str.++ "/" ""))))))(re.++ (re.union (re.+ (re.union (re.range "\u{00}" "Z") (re.range "\u{5c}" "\u{ff}"))) (re.++ (re.+ (re.union (re.range "\u{00}" "Z") (re.range "\u{5c}" "\u{ff}"))) (re.opt (re.++ (str.to_re (str.++ " " (str.++ "#" "")))(re.++ (re.+ (re.union (re.range "\u{00}" "\u{22}") (re.range "$" "\u{ff}"))) (re.range "#" "#")))))) (re.range " " " "))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "o" (str.++ "<" (str.++ "i" (str.++ "m" (str.++ "g" (str.++ "\u{83}" (str.++ "a" (str.++ ">" "")))))))))

(define-fun Witness2 () String (str.++ "<" (str.++ "i" (str.++ "m" (str.++ "g" (str.++ "\u{0f}" (str.++ "\u{ed}" (str.++ "\u{bf}" (str.++ ">" (str.++ "\u{c2}" ""))))))))))

(assert (= regexA (re.++ (str.to_re (str.++ "<" (str.++ "i" (str.++ "m" (str.++ "g" "")))))(re.++ (re.++ (re.* (re.union (re.range "\u{00}" "=") (re.range "?" "\u{ff}"))) (re.union (re.range "\u{00}" ".") (re.range "0" "\u{ff}"))) (re.range ">" ">")))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "\u{01}" (str.++ "\u{a8}" (str.++ "%" (str.++ "L" (str.++ ":" (str.++ "\u{5c}" (str.++ "\u{18}" (str.++ "\u{09}" (str.++ "." (str.++ "9" (str.++ "x" (str.++ "\u{c6}" "")))))))))))))

(define-fun Witness2 () String (str.++ "C" (str.++ "Y" (str.++ "\u{11}" (str.++ "R" (str.++ ":" (str.++ "\u{5c}" (str.++ "H" (str.++ "." (str.++ "e" (str.++ "\u{c9}" (str.++ "j" (str.++ "B" (str.++ "\u{ee}" (str.++ "9" (str.++ "*" (str.++ "J" "")))))))))))))))))

(assert (= regexA (re.union (re.++ (re.range "A" "Z")(re.++ (str.to_re (str.++ ":" (str.++ "\u{5c}" "")))(re.++ (re.+ (re.union (re.range "\u{00}" ")")(re.union (re.range "+" ".")(re.union (re.range "0" "9")(re.union (re.range ";" ";")(re.union (re.range "=" "=")(re.union (re.range "@" "{") (re.range "}" "\u{ff}"))))))))(re.++ (re.range "." ".") ((_ re.loop 2 6) (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))))))) (re.++ ((_ re.loop 2 2) (re.range "\u{5c}" "\u{5c}"))(re.++ (re.+ (re.union (re.range "\u{00}" ")")(re.union (re.range "+" ".")(re.union (re.range "0" "9")(re.union (re.range ";" ";")(re.union (re.range "=" "=")(re.union (re.range "@" "{") (re.range "}" "\u{ff}"))))))))(re.++ (re.range "." ".") ((_ re.loop 2 6) (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "2" (str.++ "2" (str.++ "8" (str.++ "." (str.++ "0" ""))))))

(define-fun Witness2 () String (str.++ "\u{0a}" (str.++ "v" (str.++ "0" (str.++ "." (str.++ "\u{83}" ""))))))

(assert (= regexA (re.union (re.++ (re.+ (re.range "0" "9"))(re.++ (re.range "." ".") (re.* (re.range "0" "9"))))(re.union (re.++ (re.* (re.range "0" "9"))(re.++ (re.range "." ".") (re.+ (re.range "0" "9")))) (re.+ (re.range "0" "9"))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "&" (str.++ "a" (str.++ "m" (str.++ "p" (str.++ ";" (str.++ "I" (str.++ "c" (str.++ "i" (str.++ "r" (str.++ "c" (str.++ ";" (str.++ "\u{88}" "")))))))))))))

(define-fun Witness2 () String (str.++ "&" (str.++ "a" (str.++ "m" (str.++ "p" (str.++ ";" (str.++ "#" (str.++ "1" (str.++ "0" (str.++ "5" (str.++ ";" (str.++ "\u{b5}" ""))))))))))))

(assert (= regexA (re.union (str.to_re (str.++ "&" (str.++ "#" (str.++ "1" (str.++ "6" (str.++ "1" (str.++ ";" "")))))))(re.union (str.to_re (str.++ "&" (str.++ "#" (str.++ "2" (str.++ "0" (str.++ "4" (str.++ ";" "")))))))(re.union (str.to_re (str.++ "&" (str.++ "#" (str.++ "2" (str.++ "0" (str.++ "5" (str.++ ";" "")))))))(re.union (str.to_re (str.++ "&" (str.++ "#" (str.++ "2" (str.++ "0" (str.++ "6" (str.++ ";" "")))))))(re.union (str.to_re (str.++ "&" (str.++ "#" (str.++ "2" (str.++ "0" (str.++ "7" (str.++ ";" "")))))))(re.union (str.to_re (str.++ "&" (str.++ "#" (str.++ "2" (str.++ "3" (str.++ "6" (str.++ ";" "")))))))(re.union (str.to_re (str.++ "&" (str.++ "#" (str.++ "2" (str.++ "3" (str.++ "7" (str.++ ";" "")))))))(re.union (str.to_re (str.++ "&" (str.++ "#" (str.++ "2" (str.++ "3" (str.++ "8" (str.++ ";" "")))))))(re.union (str.to_re (str.++ "&" (str.++ "#" (str.++ "2" (str.++ "3" (str.++ "9" (str.++ ";" "")))))))(re.union (str.to_re (str.++ "&" (str.++ "a" (str.++ "m" (str.++ "p" (str.++ ";" (str.++ "#" (str.++ "0" (str.++ "3" (str.++ "3" (str.++ ";" "")))))))))))(re.union (str.to_re (str.++ "&" (str.++ "a" (str.++ "m" (str.++ "p" (str.++ ";" (str.++ "#" (str.++ "1" (str.++ "6" (str.++ "1" (str.++ ";" "")))))))))))(re.union (str.to_re (str.++ "&" (str.++ "a" (str.++ "m" (str.++ "p" (str.++ ";" (str.++ "i" (str.++ "e" (str.++ "x" (str.++ "c" (str.++ "l" (str.++ ";" ""))))))))))))(re.union (str.to_re (str.++ "&" (str.++ "a" (str.++ "m" (str.++ "p" (str.++ ";" (str.++ "#" (str.++ "1" (str.++ "8" (str.++ "5" (str.++ ";" "")))))))))))(re.union (str.to_re (str.++ "&" (str.++ "a" (str.++ "m" (str.++ "p" (str.++ ";" (str.++ "s" (str.++ "u" (str.++ "p" (str.++ "1" (str.++ ";" "")))))))))))(re.union (str.to_re (str.++ "&" (str.++ "a" (str.++ "m" (str.++ "p" (str.++ ";" (str.++ "b" (str.++ "r" (str.++ "v" (str.++ "b" (str.++ "a" (str.++ "r" (str.++ ";" "")))))))))))))(re.union (str.to_re (str.++ "&" (str.++ "a" (str.++ "m" (str.++ "p" (str.++ ";" (str.++ "I" (str.++ "g" (str.++ "r" (str.++ "a" (str.++ "v" (str.++ "e" (str.++ ";" "")))))))))))))(re.union (str.to_re (str.++ "&" (str.++ "a" (str.++ "m" (str.++ "p" (str.++ ";" (str.++ "I" (str.++ "a" (str.++ "c" (str.++ "u" (str.++ "t" (str.++ "e" (str.++ ";" "")))))))))))))(re.union (str.to_re (str.++ "&" (str.++ "a" (str.++ "m" (str.++ "p" (str.++ ";" (str.++ "I" (str.++ "c" (str.++ "i" (str.++ "r" (str.++ "c" (str.++ ";" ""))))))))))))(re.union (str.to_re (str.++ "&" (str.++ "a" (str.++ "m" (str.++ "p" (str.++ ";" (str.++ "I" (str.++ "u" (str.++ "m" (str.++ "l" (str.++ ";" "")))))))))))(re.union (str.to_re (str.++ "&" (str.++ "a" (str.++ "m" (str.++ "p" (str.++ ";" (str.++ "i" (str.++ "g" (str.++ "r" (str.++ "a" (str.++ "v" (str.++ "e" (str.++ ";" "")))))))))))))(re.union (str.to_re (str.++ "&" (str.++ "a" (str.++ "m" (str.++ "p" (str.++ ";" (str.++ "i" (str.++ "a" (str.++ "c" (str.++ "u" (str.++ "t" (str.++ "e" (str.++ ";" "")))))))))))))(re.union (str.to_re (str.++ "&" (str.++ "a" (str.++ "m" (str.++ "p" (str.++ ";" (str.++ "i" (str.++ "u" (str.++ "m" (str.++ "l" (str.++ ";" "")))))))))))(re.union (str.to_re (str.++ "&" (str.++ "a" (str.++ "m" (str.++ "p" (str.++ ";" (str.++ "#" (str.++ "2" (str.++ "0" (str.++ "4" (str.++ ";" "")))))))))))(re.union (str.to_re (str.++ "&" (str.++ "a" (str.++ "m" (str.++ "p" (str.++ ";" (str.++ "#" (str.++ "2" (str.++ "0" (str.++ "5" (str.++ ";" "")))))))))))(re.union (str.to_re (str.++ "&" (str.++ "a" (str.++ "m" (str.++ "p" (str.++ ";" (str.++ "#" (str.++ "2" (str.++ "0" (str.++ "6" (str.++ ";" "")))))))))))(re.union (str.to_re (str.++ "&" (str.++ "a" (str.++ "m" (str.++ "p" (str.++ ";" (str.++ "#" (str.++ "2" (str.++ "0" (str.++ "7" (str.++ ";" "")))))))))))(re.union (str.to_re (str.++ "&" (str.++ "a" (str.++ "m" (str.++ "p" (str.++ ";" (str.++ "#" (str.++ "2" (str.++ "3" (str.++ "6" (str.++ ";" "")))))))))))(re.union (str.to_re (str.++ "&" (str.++ "a" (str.++ "m" (str.++ "p" (str.++ ";" (str.++ "#" (str.++ "2" (str.++ "3" (str.++ "7" (str.++ ";" "")))))))))))(re.union (str.to_re (str.++ "&" (str.++ "a" (str.++ "m" (str.++ "p" (str.++ ";" (str.++ "#" (str.++ "2" (str.++ "3" (str.++ "8" (str.++ ";" "")))))))))))(re.union (str.to_re (str.++ "&" (str.++ "a" (str.++ "m" (str.++ "p" (str.++ ";" (str.++ "#" (str.++ "2" (str.++ "3" (str.++ "9" (str.++ ";" "")))))))))))(re.union (str.to_re (str.++ "&" (str.++ "a" (str.++ "m" (str.++ "p" (str.++ ";" (str.++ "#" (str.++ "0" (str.++ "7" (str.++ "3" (str.++ ";" ""))))))))))) (str.to_re (str.++ "&" (str.++ "a" (str.++ "m" (str.++ "p" (str.++ ";" (str.++ "#" (str.++ "1" (str.++ "0" (str.++ "5" (str.++ ";" ""))))))))))))))))))))))))))))))))))))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "e" (str.++ "\u{d8}" (str.++ "0" (str.++ "9" (str.++ "6" (str.++ "8" (str.++ "-" (str.++ "3" (str.++ "2" (str.++ "7" (str.++ "-" (str.++ "8" (str.++ "8" (str.++ "6" (str.++ "9" ""))))))))))))))))

(define-fun Witness2 () String (str.++ "\u{85}" (str.++ "\u{85}" (str.++ "\u{0c}" (str.++ "\u{a0}" (str.++ "(" (str.++ "0" (str.++ "0" (str.++ "9" (str.++ "7" (str.++ "-" (str.++ "6" (str.++ "9" (str.++ "7" (str.++ "-" (str.++ "3" (str.++ "0" (str.++ "9" (str.++ "9" (str.++ "\u{0d}" (str.++ "\u{85}" "")))))))))))))))))))))

(assert (= regexA (re.union (re.++ (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (re.opt (re.range "(" "("))(re.++ (re.range "0" "0")(re.++ ((_ re.loop 4 4) (re.range "0" "9"))(re.++ (re.opt (re.range ")" ")"))(re.++ (re.union (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))) (re.range "-" "-"))(re.++ ((_ re.loop 3 3) (re.range "0" "9"))(re.++ (re.union (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))) (re.range "-" "-"))(re.++ ((_ re.loop 3 3) (re.range "0" "9")) (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))))))))))))(re.union (re.++ (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (re.opt (re.range "(" "("))(re.++ (re.range "0" "0")(re.++ ((_ re.loop 3 3) (re.range "0" "9"))(re.++ (re.opt (re.range ")" ")"))(re.++ (re.union (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))) (re.range "-" "-"))(re.++ ((_ re.loop 3 3) (re.range "0" "9"))(re.++ (re.union (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))) (re.range "-" "-"))(re.++ ((_ re.loop 4 4) (re.range "0" "9")) (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))))))))))) (re.++ (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (re.range "7" "8")(re.++ (re.union ((_ re.loop 7 7) (re.range "0" "9")) (re.++ ((_ re.loop 3 3) (re.range "0" "9"))(re.++ (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "-" "-")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))) ((_ re.loop 4 4) (re.range "0" "9"))))) (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "\u{e9}" (str.++ "\u{fa}" (str.++ "E" (str.++ "." (str.++ "^" (str.++ "9" (str.++ "4" (str.++ ")" (str.++ "." (str.++ "0" (str.++ "3" (str.++ "2" (str.++ "9" (str.++ "9" (str.++ "6" (str.++ "6" (str.++ "g" ""))))))))))))))))))

(define-fun Witness2 () String (str.++ "\u{d3}" (str.++ "^" (str.++ "3" (str.++ "8" (str.++ "2" (str.++ "3" (str.++ "2" (str.++ "7" (str.++ "6" (str.++ "9" (str.++ "0" (str.++ "L" (str.++ "D" ""))))))))))))))

(assert (= regexA (re.++ (re.opt (re.++ (re.opt (re.range "+" "+"))(re.++ (re.range "1" "1") (re.opt (re.union (re.range " " " ") (re.range "-" "."))))))(re.++ (re.opt (re.union (re.range "(" "(") (re.range "." ".")))(re.++ (re.union (re.range "0" "9") (re.range "^" "^"))(re.++ ((_ re.loop 2 2) (re.range "0" "9"))(re.++ (re.opt (re.range ")" ")"))(re.++ (re.opt (re.union (re.range " " " ") (re.range "-" ".")))(re.++ ((_ re.loop 3 3) (re.range "0" "9"))(re.++ (re.opt (re.union (re.range " " " ") (re.range "-" "."))) ((_ re.loop 4 4) (re.range "0" "9"))))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "d" (str.++ "9" (str.++ "," (str.++ "1" (str.++ "5" (str.++ "#" "")))))))

(define-fun Witness2 () String (str.++ "f" (str.++ "d" (str.++ "9" (str.++ "," (str.++ "1" (str.++ "5" (str.++ "w" ""))))))))

(assert (= regexA (re.++ (re.* (re.range "/" "/"))(re.++ (re.range "d" "d") (str.to_re (str.++ "9" (str.++ "," (str.++ "1" (str.++ "5" "")))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "e" (str.++ "2" (str.++ "/" (str.++ "6" (str.++ "5" (str.++ "/" (str.++ "8" (str.++ "2" (str.++ "\u{9e}" ""))))))))))

(define-fun Witness2 () String (str.++ "\u{84}" (str.++ "C" (str.++ "k" (str.++ "]" (str.++ "+" (str.++ "J" (str.++ "\u{b7}" (str.++ "9" (str.++ "/" (str.++ "5" (str.++ "/" (str.++ "9" (str.++ "8" ""))))))))))))))

(assert (= regexA (re.++ (re.union ((_ re.loop 2 2) (re.range "0" "9")) (re.range "0" "9"))(re.++ (re.range "/" "/")(re.++ (re.union ((_ re.loop 2 2) (re.range "0" "9")) (re.range "0" "9"))(re.++ (re.range "/" "/") (re.union ((_ re.loop 4 4) (re.range "0" "9")) ((_ re.loop 2 2) (re.range "0" "9")))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "-" (str.++ "1" (str.++ "2" (str.++ ":" (str.++ "0" (str.++ "0" "")))))))

(define-fun Witness2 () String (str.++ "\u{a7}" (str.++ "-" (str.++ "0" (str.++ "9" (str.++ ":" (str.++ "0" (str.++ "0" (str.++ "e" (str.++ "\u{b0}" (str.++ "$" "")))))))))))

(assert (= regexA (re.++ (re.union (re.range "+" "+") (re.range "-" "-")) (re.union (re.++ (re.union (re.++ (re.range "0" "0") (re.range "0" "9")) (re.++ (re.range "1" "1") (re.range "0" "3")))(re.++ (re.range ":" ":") (re.union (re.++ (re.union (re.range "0" "0") (re.range "3" "3")) (re.range "0" "0")) (str.to_re (str.++ "4" (str.++ "5" "")))))) (str.to_re (str.++ "1" (str.++ "4" (str.++ ":" (str.++ "0" (str.++ "0" ""))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ " " (str.++ "8" (str.++ "5" (str.++ "8" (str.++ "4" (str.++ "_" (str.++ "4" (str.++ "3" (str.++ "8" (str.++ "7" (str.++ "(" (str.++ "8" (str.++ "8" (str.++ "6" (str.++ "5" (str.++ "8" (str.++ "4" (str.++ "9" (str.++ "(" (str.++ "m" (str.++ "\u{96}" (str.++ "<" (str.++ "u" (str.++ "6" (str.++ "$" (str.++ "A" "")))))))))))))))))))))))))))

(define-fun Witness2 () String (str.++ "+" (str.++ "7" (str.++ "9" (str.++ "9" (str.++ "8" (str.++ "0" (str.++ "7" (str.++ "_" (str.++ "#" ""))))))))))

(assert (= regexA (re.++ (re.opt (re.range "+" "+")) ((_ re.loop 2 10) (re.++ (re.opt (re.union (re.range " " " ")(re.union (re.range "(" ")")(re.union (re.range "-" ".") (re.range "_" "_")))))(re.++ ((_ re.loop 3 20) (re.range "0" "9")) (re.opt (re.union (re.range " " " ")(re.union (re.range "(" ")")(re.union (re.range "-" ".") (re.range "_" "_")))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "4" (str.++ "5" (str.++ "9" (str.++ "6" (str.++ "-" (str.++ "8" (str.++ "2" (str.++ "-" (str.++ "5" (str.++ "1" (str.++ "T" (str.++ "." (str.++ "5" (str.++ "2" (str.++ "7" (str.++ "1" (str.++ "-" (str.++ "1" (str.++ "6" (str.++ ":" (str.++ "8" (str.++ "3" (str.++ "'" (str.++ "\u{ed}" "")))))))))))))))))))))))))

(define-fun Witness2 () String (str.++ ">" (str.++ "0" (str.++ "3" (str.++ "8" (str.++ "9" (str.++ "-" (str.++ "3" (str.++ "5" (str.++ "-" (str.++ "8" (str.++ "9" (str.++ "T" (str.++ "4" (str.++ "5" (str.++ ":" (str.++ "9" (str.++ "8" ""))))))))))))))))))

(assert (= regexA (re.++ (re.++ ((_ re.loop 4 4) (re.range "0" "9"))(re.++ (re.range "-" "-")(re.++ ((_ re.loop 2 2) (re.range "0" "9"))(re.++ (re.range "-" "-") ((_ re.loop 2 2) (re.range "0" "9")))))) (re.opt (re.++ (re.range "T" "T") (re.++ (re.opt (re.++ ((_ re.loop 2 2) (re.range "0" "9"))(re.++ (re.range ":" ":")(re.++ ((_ re.loop 2 2) (re.range "0" "9")) (re.opt (re.++ (re.range ":" ":") ((_ re.loop 2 2) (re.range "0" "9"))))))))(re.++ (re.opt (re.++ (re.range "." ".") ((_ re.loop 1 7) (re.range "0" "9")))) (re.opt (re.++ (re.range "-" "-")(re.++ ((_ re.loop 2 2) (re.range "0" "9"))(re.++ (re.range ":" ":") ((_ re.loop 2 2) (re.range "0" "9")))))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "p" (str.++ "u" (str.++ "b" (str.++ "l" (str.++ "i" (str.++ "c" (str.++ "\u{a0}" (str.++ "z" (str.++ "(" (str.++ ")" (str.++ "\u{f9}" ""))))))))))))

(define-fun Witness2 () String (str.++ "0" (str.++ "\u{9d}" (str.++ "p" (str.++ "r" (str.++ "i" (str.++ "v" (str.++ "a" (str.++ "t" (str.++ "e" (str.++ " " (str.++ "0" (str.++ "\u{1a}" (str.++ "(" (str.++ "\u{b3}" (str.++ "\u{80}" (str.++ "E" (str.++ ")" (str.++ "\u{da}" "")))))))))))))))))))

(assert (= regexA (re.++ (re.union (str.to_re (str.++ "p" (str.++ "r" (str.++ "i" (str.++ "v" (str.++ "a" (str.++ "t" (str.++ "e" ""))))))))(re.union (str.to_re (str.++ "p" (str.++ "u" (str.++ "b" (str.++ "l" (str.++ "i" (str.++ "c" ""))))))) (str.to_re (str.++ "p" (str.++ "r" (str.++ "o" (str.++ "t" (str.++ "e" (str.++ "c" (str.++ "t" (str.++ "e" (str.++ "d" ""))))))))))))(re.++ (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))(re.++ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))(re.++ (re.* (re.union (re.range "\u{00}" "\u{09}") (re.range "\u{0b}" "\u{ff}")))(re.++ (re.range "(" "(")(re.++ (re.* (re.union (re.range "\u{00}" "\u{09}") (re.range "\u{0b}" "\u{ff}")))(re.++ (re.range ")" ")") (re.union (re.range "\u{00}" ":") (re.range "<" "\u{ff}")))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "D" (str.++ "W" (str.++ "S" (str.++ "d" (str.++ "\u{a0}" (str.++ "F" (str.++ "\u{03}" ""))))))))

(define-fun Witness2 () String (str.++ "X" (str.++ "0" (str.++ "Z" (str.++ "Q" (str.++ "X" (str.++ "K" "")))))))

(assert (= regexA (re.union (re.++ (str.to_re "") (re.++ ((_ re.loop 3 3) (re.range "A" "Z"))(re.++ (re.opt (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (re.union ((_ re.loop 3 3) (re.range "0" "9"))(re.union ((_ re.loop 2 2) (re.range "0" "9")) (re.range "d" "d")))(re.++ (re.opt (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))) (re.range "A" "Z"))))))(re.union (re.++ (re.range "A" "Z")(re.++ (re.opt (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (re.union ((_ re.loop 3 3) (re.range "0" "9"))(re.union ((_ re.loop 2 2) (re.range "0" "9")) (re.range "0" "9")))(re.++ (re.opt (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))) ((_ re.loop 3 3) (re.range "A" "Z")))))) (re.++ (re.++ (re.++ (re.union (re.range "A" "H")(re.union (re.range "K" "P")(re.union (re.range "R" "S")(re.union (re.range "V" "W") (re.range "Y" "Y"))))) (re.union (re.range "A" "H")(re.union (re.range "J" "P") (re.range "R" "Y"))))(re.++ (re.opt (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (re.union (re.++ (re.range "0" "0") (re.range "2" "9")) (re.++ (re.range "1" "9") (re.range "0" "9")))(re.++ (re.opt (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))) ((_ re.loop 3 3) (re.union (re.range "A" "H")(re.union (re.range "J" "P") (re.range "R" "Z")))))))) (str.to_re ""))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "\u{00}" (str.++ "<" (str.++ "G" (str.++ "=" (str.++ "\u{22}" (str.++ "\u{22}" (str.++ "\u{22}" (str.++ "j" (str.++ "a" (str.++ "v" (str.++ "a" (str.++ "s" (str.++ "c" (str.++ "r" (str.++ "i" (str.++ "p" (str.++ "t" (str.++ ":" (str.++ "8" (str.++ "'" (str.++ ">" (str.++ "X" (str.++ "\u{9a}" ""))))))))))))))))))))))))

(define-fun Witness2 () String (str.++ "<" (str.++ "/" (str.++ "s" (str.++ "c" (str.++ "r" (str.++ "i" (str.++ "p" (str.++ "t" (str.++ ">" (str.++ "\u{0f}" (str.++ "\u{da}" ""))))))))))))

(assert (= regexA (re.union (re.++ (str.to_re (str.++ "<" (str.++ "s" (str.++ "c" (str.++ "r" (str.++ "i" (str.++ "p" (str.++ "t" ""))))))))(re.++ (re.* (re.union (re.range "\u{00}" "\u{09}") (re.range "\u{0b}" "\u{ff}")))(re.++ (re.* (re.range "/" "/")) (re.range ">" ">"))))(re.union (str.to_re (str.++ "<" (str.++ "/" (str.++ "s" (str.++ "c" (str.++ "r" (str.++ "i" (str.++ "p" (str.++ "t" (str.++ ">" ""))))))))))(re.union (re.++ (re.range "<" "<")(re.++ (re.union (re.range "A" "Z") (re.range "a" "z"))(re.++ (re.* (re.union (re.range "\u{00}" "=") (re.range "?" "\u{ff}")))(re.++ (re.range "=" "=")(re.++ (re.+ (re.union (re.range "\u{22}" "\u{22}") (re.range "'" "'")))(re.++ (str.to_re (str.++ "j" (str.++ "a" (str.++ "v" (str.++ "a" (str.++ "s" (str.++ "c" (str.++ "r" (str.++ "i" (str.++ "p" (str.++ "t" (str.++ ":" ""))))))))))))(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))(re.++ (re.* (re.union (re.range "\u{00}" "\u{09}") (re.range "\u{0b}" "\u{ff}")))(re.++ (re.+ (re.union (re.range "\u{22}" "\u{22}") (re.range "'" "'"))) (re.range ">" ">")))))))))) (re.++ (re.range "<" "<")(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))(re.++ (re.* (re.union (re.range "\u{00}" "=") (re.range "?" "\u{ff}")))(re.++ (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))(re.++ (str.to_re (str.++ "o" (str.++ "n" "")))(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))(re.++ (re.range "=" "=")(re.++ (re.* (re.union (re.range "\u{00}" "\u{09}") (re.range "\u{0b}" "\u{ff}")))(re.++ (re.* (re.union (re.range " " " ") (re.range "/" "/"))) (re.range ">" ">")))))))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "\u{e0}" (str.++ "1" (str.++ "8" (str.++ "0" (str.++ "\u{b0}" (str.++ "'" (str.++ " " (str.++ "'" (str.++ "3" (str.++ "9" (str.++ "." (str.++ "9" (str.++ "\u{b4}" (str.++ "'" (str.++ " " (str.++ "'" (str.++ "W" ""))))))))))))))))))

(define-fun Witness2 () String (str.++ "\u{e8}" (str.++ "1" (str.++ "1" (str.++ "9" (str.++ "\u{b0}" (str.++ "'" (str.++ " " (str.++ "'" (str.++ "0" (str.++ "5" (str.++ "." (str.++ "1" (str.++ "\u{b4}" (str.++ "'" (str.++ " " (str.++ "'" (str.++ "W" ""))))))))))))))))))

(assert (= regexA (re.++ (re.union (re.++ (re.union (re.++ (re.range "0" "1") (re.range "0" "7")) (re.++ (re.range "0" "0") (re.range "0" "9"))) (re.range "0" "9")) (str.to_re (str.++ "1" (str.++ "8" (str.++ "0" "")))))(re.++ (str.to_re (str.++ "\u{b0}" (str.++ "'" (str.++ " " (str.++ "'" "")))))(re.++ (re.range "0" "9")(re.++ (re.range "0" "9")(re.++ (re.range "." ".")(re.++ (re.range "0" "9")(re.++ (str.to_re (str.++ "\u{b4}" (str.++ "'" (str.++ " " (str.++ "'" ""))))) (re.union (re.range "E" "E") (re.range "W" "W")))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "K" (str.++ "8" (str.++ "4" (str.++ "3" (str.++ "0" (str.++ "-" (str.++ "1" (str.++ "1" (str.++ "-" (str.++ "0" (str.++ "6" ""))))))))))))

(define-fun Witness2 () String (str.++ "3" (str.++ "5" (str.++ "3" (str.++ "6" (str.++ "-" (str.++ "0" (str.++ "1" (str.++ "-" (str.++ "2" (str.++ "9" (str.++ ")" (str.++ "\u{ac}" "")))))))))))))

(assert (= regexA (re.++ ((_ re.loop 4 4) (re.range "0" "9"))(re.++ (re.range "-" "-")(re.++ (re.union (re.++ (re.range "0" "0") (re.range "0" "9")) (re.++ (re.range "1" "1") (re.range "0" "2")))(re.++ (re.range "-" "-") (re.union (re.++ (re.range "0" "0") (re.range "0" "9"))(re.union (re.++ (re.range "1" "1") (re.range "0" "9"))(re.union (re.++ (re.range "2" "2") (re.range "0" "9")) (re.++ (re.range "3" "3") (re.range "0" "1")))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "\u{17}" (str.++ "5" (str.++ "." (str.++ "0" (str.++ "." (str.++ "8" (str.++ "8" ""))))))))

(define-fun Witness2 () String (str.++ "9" (str.++ "8" (str.++ "8" (str.++ "." (str.++ "1" (str.++ "8" (str.++ "2" (str.++ "7" (str.++ "6" (str.++ "." (str.++ "2" ""))))))))))))

(assert (= regexA (re.union ((_ re.loop 5 12) (re.range "0" "9"))(re.union (re.++ ((_ re.loop 1 10) (re.range "0" "9"))(re.++ (re.range "." ".")(re.++ ((_ re.loop 1 10) (re.range "0" "9"))(re.++ (re.range "." ".") ((_ re.loop 1 10) (re.range "0" "9")))))) (re.++ ((_ re.loop 1 10) (re.range "0" "9"))(re.++ (re.range "." ".") ((_ re.loop 1 10) (re.range "0" "9"))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "\u{0e}" (str.++ "9" (str.++ "0" (str.++ "0" (str.++ "8" (str.++ "-" (str.++ "0" (str.++ "2" (str.++ "-" (str.++ "1" (str.++ "8" ""))))))))))))

(define-fun Witness2 () String (str.++ "1" (str.++ "9" (str.++ "0" (str.++ "8" (str.++ "-" (str.++ "0" (str.++ "2" (str.++ "-" (str.++ "2" (str.++ "8" "")))))))))))

(assert (= regexA (re.union (re.++ (str.to_re "")(re.++ (re.++ (re.union (re.++ (re.range "1" "1") (re.range "6" "9")) (re.++ (re.range "2" "9") (re.range "0" "9")))(re.++ ((_ re.loop 2 2) (re.range "0" "9"))(re.++ (re.range "-" "-")(re.++ (re.union (re.++ (re.range "0" "0") (re.union (re.range "1" "1")(re.union (re.range "3" "3")(re.union (re.range "5" "5") (re.range "7" "8"))))) (re.++ (re.range "1" "1") (re.union (re.range "0" "0") (re.range "2" "2"))))(re.++ (re.range "-" "-") (re.union (re.++ (re.range "0" "0") (re.range "1" "9"))(re.union (re.++ (re.range "1" "2") (re.range "0" "9")) (re.++ (re.range "3" "3") (re.range "0" "1"))))))))) (str.to_re "")))(re.union (re.++ (str.to_re "")(re.++ (re.++ (re.union (re.++ (re.range "1" "1") (re.range "6" "9")) (re.++ (re.range "2" "9") (re.range "0" "9")))(re.++ ((_ re.loop 2 2) (re.range "0" "9"))(re.++ (re.range "-" "-")(re.++ (re.union (re.++ (re.range "0" "0") (re.union (re.range "4" "4")(re.union (re.range "6" "6") (re.range "9" "9")))) (str.to_re (str.++ "1" (str.++ "1" ""))))(re.++ (re.range "-" "-") (re.union (re.++ (re.range "0" "0") (re.range "1" "9"))(re.union (re.++ (re.range "1" "2") (re.range "0" "9")) (str.to_re (str.++ "3" (str.++ "0" "")))))))))) (str.to_re "")))(re.union (re.++ (str.to_re "") (re.++ (re.union (str.to_re (str.++ "1" (str.++ "6" "")))(re.union (re.++ (re.union (re.range "2" "2")(re.union (re.range "4" "4") (re.range "8" "8"))) (re.union (re.range "0" "0")(re.union (re.range "4" "4") (re.range "8" "8")))) (re.++ (re.union (re.range "3" "3")(re.union (re.range "5" "5")(re.union (re.range "7" "7") (re.range "9" "9")))) (re.union (re.range "2" "2") (re.range "6" "6"))))) (str.to_re (str.++ "0" (str.++ "0" "")))))(re.union (re.++ (re.union (re.++ (re.range "1" "1") (re.range "6" "9")) (re.++ (re.range "2" "9") (re.range "0" "9")))(re.++ (re.union (re.++ (re.range "0" "0") (re.union (re.range "4" "4") (re.range "8" "8")))(re.union (re.++ (re.union (re.range "1" "1")(re.union (re.range "3" "3")(re.union (re.range "5" "5")(re.union (re.range "7" "7") (re.range "9" "9"))))) (re.union (re.range "2" "2") (re.range "6" "6"))) (re.++ (re.union (re.range "2" "2")(re.union (re.range "4" "4")(re.union (re.range "6" "6") (re.range "8" "8")))) (re.union (re.range "0" "0")(re.union (re.range "4" "4") (re.range "8" "8"))))))(re.++ (str.to_re (str.++ "-" (str.++ "0" (str.++ "2" (str.++ "-" "")))))(re.++ (re.union (re.++ (re.range "0" "0") (re.range "1" "9"))(re.union (re.++ (re.range "1" "1") (re.range "0" "9")) (re.++ (re.range "2" "2") (re.range "0" "9")))) (str.to_re ""))))) (re.++ (str.to_re "")(re.++ (re.union (re.++ (re.range "1" "1") (re.range "6" "9")) (re.++ (re.range "2" "9") (re.range "0" "9")))(re.++ ((_ re.loop 2 2) (re.range "0" "9"))(re.++ (str.to_re (str.++ "-" (str.++ "0" (str.++ "2" (str.++ "-" "")))))(re.++ (re.union (re.++ (re.range "0" "0") (re.range "1" "9"))(re.union (re.++ (re.range "1" "1") (re.range "0" "9")) (re.++ (re.range "2" "2") (re.range "0" "8")))) (str.to_re ""))))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "s" (str.++ "a" (str.++ "m" (str.++ "p" (str.++ "l" (str.++ "e" (str.++ "\u{a4}" (str.++ "h" "")))))))))

(define-fun Witness2 () String (str.++ "s" (str.++ "a" (str.++ "m" (str.++ "p" (str.++ "l" (str.++ "e" (str.++ "\u{d1}" ""))))))))

(assert (= regexA (str.to_re (str.++ "s" (str.++ "a" (str.++ "m" (str.++ "p" (str.++ "l" (str.++ "e" "")))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "\u{be}" (str.++ "/" (str.++ "A" (str.++ "B" (str.++ "-" (str.++ "/" "")))))))

(define-fun Witness2 () String (str.++ "/" (str.++ "O" (str.++ "+" (str.++ "/" "")))))

(assert (= regexA (re.++ (re.range "/" "/")(re.++ (re.union (re.range "A" "B")(re.union (str.to_re (str.++ "A" (str.++ "B" ""))) (re.range "O" "O")))(re.++ (re.union (re.range "+" "+") (re.range "-" "-")) (re.range "/" "/"))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "2" (str.++ "6" (str.++ "6" (str.++ "6" (str.++ "8" (str.++ "0" (str.++ " " (str.++ "9" (str.++ "5" (str.++ "9" (str.++ "+" ""))))))))))))

(define-fun Witness2 () String (str.++ "+" (str.++ "8" (str.++ "1" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ " " (str.++ "9" (str.++ "9" (str.++ "8" (str.++ " " (str.++ "3" (str.++ "0" (str.++ "7" "")))))))))))))))

(assert (= regexA (re.union (re.++ (str.to_re "") (re.++ ((_ re.loop 3 3) (re.range "0" "9"))(re.++ (re.opt (re.union (re.range " " " ")(re.union (re.range "-" "-") (re.range "/" "/"))))(re.++ ((_ re.loop 3 3) (re.range "0" "9"))(re.++ (re.opt (re.union (re.range " " " ")(re.union (re.range "-" "-") (re.range "/" "/")))) ((_ re.loop 3 3) (re.range "0" "9")))))))(re.union ((_ re.loop 9 9) (re.range "0" "9")) (re.++ (re.++ (re.opt (re.range "+" "+"))(re.++ ((_ re.loop 3 3) (re.range "0" "9"))(re.++ (re.opt (re.union (re.range " " " ")(re.union (re.range "-" "-") (re.range "/" "/"))))(re.++ ((_ re.loop 2 2) (re.range "0" "9"))(re.++ (re.opt (re.union (re.range " " " ")(re.union (re.range "-" "-") (re.range "/" "/"))))(re.++ ((_ re.loop 3 3) (re.range "0" "9"))(re.++ (re.opt (re.union (re.range " " " ")(re.union (re.range "-" "-") (re.range "/" "/")))) ((_ re.loop 3 3) (re.range "0" "9"))))))))) (str.to_re ""))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "P" (str.++ "O" (str.++ " " (str.++ "B" (str.++ "o" (str.++ "x" (str.++ "V" (str.++ "i" (str.++ "c" (str.++ "t" (str.++ "o" (str.++ "r" (str.++ "i" (str.++ "a" (str.++ "\u{0c}" (str.++ "\u{ad}" "")))))))))))))))))

(define-fun Witness2 () String (str.++ "P" (str.++ "O" (str.++ "B" (str.++ "o" (str.++ "x" (str.++ "\u{0a}" (str.++ "9" (str.++ " " (str.++ "\u{aa}" (str.++ "u" (str.++ "\u{85}" (str.++ "s" (str.++ "t" (str.++ "\u{09}" (str.++ "b" (str.++ "k" (str.++ "6" (str.++ " " (str.++ "p" (str.++ "a" (str.++ "t" (str.++ "h" (str.++ " " (str.++ " " (str.++ "," (str.++ "\u{d6}" (str.++ "T" (str.++ "A" (str.++ "S" ""))))))))))))))))))))))))))))))

(assert (= regexA (re.++ (re.opt (re.++ (re.++ (re.union (str.to_re (str.++ "P" (str.++ "O" (str.++ "B" (str.++ "o" (str.++ "x" "")))))) (re.++ (str.to_re (str.++ "P" (str.++ "O" "")))(re.++ (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))) (str.to_re (str.++ "B" (str.++ "o" (str.++ "x" "")))))))(re.++ (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))) (re.* (re.range "0" "9"))))(re.++ (re.opt (re.range "," ",")) (re.opt (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))))))(re.++ (re.opt (re.++ (re.opt (re.++ (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "," ",")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{85}" "\u{85}")(re.union (re.range "\u{a0}" "\u{a0}")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))))))))(re.++ (re.range "," ",") (re.opt (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))))) (re.++ (re.range " " " ")(re.++ (re.++ (re.++ (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{85}" "\u{85}")(re.union (re.range "\u{a0}" "\u{a0}")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))))))))(re.++ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))(re.++ (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))(re.++ (re.opt (re.++ (str.to_re (str.++ "s" (str.++ "t" ""))) (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))))(re.++ (re.* (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))(re.++ (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))) (re.union (str.to_re (str.++ "s" (str.++ "t" (str.++ "r" (str.++ "e" (str.++ "e" (str.++ "t" "")))))))(re.union (str.to_re (str.++ "s" (str.++ "t" "")))(re.union (str.to_re (str.++ "r" (str.++ "o" (str.++ "a" (str.++ "d" "")))))(re.union (str.to_re (str.++ "r" (str.++ "d" "")))(re.union (str.to_re (str.++ "c" (str.++ "l" (str.++ "o" (str.++ "s" (str.++ "e" ""))))))(re.union (str.to_re (str.++ "c" (str.++ "l" "")))(re.union (str.to_re (str.++ "a" (str.++ "v" (str.++ "e" (str.++ "n" (str.++ "u" (str.++ "e" "")))))))(re.union (str.to_re (str.++ "a" (str.++ "v" (str.++ "e" ""))))(re.union (str.to_re (str.++ "a" (str.++ "v" "")))(re.union (str.to_re (str.++ "p" (str.++ "a" (str.++ "t" (str.++ "h" "")))))(re.union (str.to_re (str.++ "p" (str.++ "h" "")))(re.union (str.to_re (str.++ "d" (str.++ "r" (str.++ "i" (str.++ "v" (str.++ "e" ""))))))(re.union (str.to_re (str.++ "d" (str.++ "r" (str.++ "v" ""))))(re.union (str.to_re (str.++ "L" (str.++ "O" (str.++ "O" (str.++ "P" "")))))(re.union (str.to_re (str.++ "C" (str.++ "O" (str.++ "U" (str.++ "R" (str.++ "T" ""))))))(re.union (str.to_re (str.++ "C" (str.++ "T" "")))(re.union (str.to_re (str.++ "C" (str.++ "I" (str.++ "R" (str.++ "C" (str.++ "L" (str.++ "E" "")))))))(re.union (str.to_re (str.++ "L" (str.++ "A" (str.++ "N" (str.++ "E" ""))))) (str.to_re (str.++ "L" (str.++ "N" ""))))))))))))))))))))))))))) (str.to_re (str.++ " " (str.++ " " ""))))(re.++ (re.opt (re.range "," ",")) (re.opt (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))))))))(re.++ (re.opt (re.++ (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{85}" "\u{85}")(re.union (re.range "\u{a0}" "\u{a0}")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))))))(re.++ (re.opt (re.range "," ",")) (re.opt (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))))))(re.++ (re.opt (re.++ (re.union (str.to_re (str.++ "V" (str.++ "i" (str.++ "c" (str.++ "t" (str.++ "o" (str.++ "r" (str.++ "i" (str.++ "a" "")))))))))(re.union (str.to_re (str.++ "V" (str.++ "I" (str.++ "C" ""))))(re.union (str.to_re (str.++ "N" (str.++ "e" (str.++ "w" (str.++ " " (str.++ "S" (str.++ "o" (str.++ "u" (str.++ "t" (str.++ "h" (str.++ " " (str.++ "W" (str.++ "a" (str.++ "l" (str.++ "e" (str.++ "s" ""))))))))))))))))(re.union (str.to_re (str.++ "N" (str.++ "S" (str.++ "W" ""))))(re.union (str.to_re (str.++ "S" (str.++ "o" (str.++ "u" (str.++ "t" (str.++ "h" (str.++ " " (str.++ "A" (str.++ "u" (str.++ "s" (str.++ "t" (str.++ "r" (str.++ "a" (str.++ "l" (str.++ "i" (str.++ "a" ""))))))))))))))))(re.union (str.to_re (str.++ "S" (str.++ "A" "")))(re.union (str.to_re (str.++ "N" (str.++ "o" (str.++ "r" (str.++ "t" (str.++ "h" (str.++ "e" (str.++ "r" (str.++ "n" (str.++ " " (str.++ "T" (str.++ "e" (str.++ "r" (str.++ "r" (str.++ "i" (str.++ "t" (str.++ "o" (str.++ "r" (str.++ "y" "")))))))))))))))))))(re.union (str.to_re (str.++ "N" (str.++ "T" "")))(re.union (str.to_re (str.++ "W" (str.++ "e" (str.++ "s" (str.++ "t" (str.++ " " (str.++ "A" (str.++ "u" (str.++ "s" (str.++ "t" (str.++ "r" (str.++ "a" (str.++ "l" (str.++ "i" (str.++ "a" "")))))))))))))))(re.union (str.to_re (str.++ "W" (str.++ "A" "")))(re.union (str.to_re (str.++ "T" (str.++ "a" (str.++ "s" (str.++ "m" (str.++ "a" (str.++ "n" (str.++ "i" (str.++ "a" "")))))))))(re.union (str.to_re (str.++ "T" (str.++ "A" (str.++ "S" ""))))(re.union (str.to_re (str.++ "A" (str.++ "C" (str.++ "T" ""))))(re.union (str.to_re (str.++ "Q" (str.++ "u" (str.++ "e" (str.++ "e" (str.++ "n" (str.++ "s" (str.++ "l" (str.++ "a" (str.++ "n" (str.++ "d" ""))))))))))) (str.to_re (str.++ "Q" (str.++ "L" (str.++ "D" "")))))))))))))))))) (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))))(re.++ (re.opt (re.++ ((_ re.loop 4 4) (re.range "0" "9"))(re.++ (re.opt (re.range "," ",")) (re.opt (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))))) (re.opt (str.to_re (str.++ "A" (str.++ "u" (str.++ "s" (str.++ "t" (str.++ "r" (str.++ "a" (str.++ "l" (str.++ "i" (str.++ "a" ""))))))))))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "\u{95}" (str.++ "G" (str.++ "I" (str.++ "R" (str.++ " " (str.++ "0" (str.++ "A" (str.++ "A" "")))))))))

(define-fun Witness2 () String (str.++ "F" (str.++ "E" (str.++ "4" (str.++ "D" (str.++ " " (str.++ "9" (str.++ "M" (str.++ "N" "")))))))))

(assert (= regexA (re.union (re.++ (str.to_re "")(re.++ ((_ re.loop 1 2) (re.range "A" "Z"))(re.++ (re.range "1" "9")(re.++ (re.opt (re.range "0" "9"))(re.++ (re.opt (re.range "A" "Z"))(re.++ (re.range " " " ")(re.++ (re.range "0" "9") (re.++ ((_ re.loop 2 2) (re.range "A" "Z")) (re.* (re.range "A" "Z")))))))))) (re.++ (str.to_re (str.++ "G" (str.++ "I" (str.++ "R" (str.++ " " (str.++ "0" (str.++ "A" (str.++ "A" "")))))))) (str.to_re "")))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "\u{e8}" (str.++ "\u{a1}" (str.++ "\u{81}" (str.++ ">" (str.++ "\u{c1}" (str.++ "+" (str.++ "\u{9b}" ""))))))))

(define-fun Witness2 () String (str.++ ">" ""))

(assert (= regexA (re.++ (re.range ">" ">") (re.* (re.union (re.range "\u{00}" ";") (re.range "=" "\u{ff}"))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "C" (str.++ "H" (str.++ "7" (str.++ "0" (str.++ " " (str.++ "9" (str.++ "9" (str.++ "9" (str.++ "8" (str.++ " " (str.++ "8" (str.++ "9" (str.++ "8" (str.++ "0" (str.++ " " (str.++ "5" (str.++ "5" (str.++ "0" (str.++ "8" (str.++ " " (str.++ "8" (str.++ "8" (str.++ "4" (str.++ "6" (str.++ " " (str.++ "0" "")))))))))))))))))))))))))))

(define-fun Witness2 () String (str.++ "C" (str.++ "H" (str.++ "4" (str.++ "9" (str.++ " " (str.++ "4" (str.++ "9" (str.++ "9" (str.++ "8" (str.++ " " (str.++ "8" (str.++ "0" (str.++ "4" (str.++ "8" (str.++ " " (str.++ "0" (str.++ "1" (str.++ "5" (str.++ "8" (str.++ " " (str.++ "9" (str.++ "3" (str.++ "9" (str.++ "1" (str.++ " " (str.++ "7" (str.++ "\u{f3}" (str.++ "\u{f0}" (str.++ "\u{b7}" ""))))))))))))))))))))))))))))))

(assert (= regexA (re.union (re.++ (str.to_re (str.++ "C" (str.++ "H" "")))(re.++ ((_ re.loop 2 2) (re.range "0" "9"))(re.++ (re.range " " " ")(re.++ ((_ re.loop 4 4) (re.range "0" "9"))(re.++ (re.range " " " ")(re.++ ((_ re.loop 4 4) (re.range "0" "9"))(re.++ (re.range " " " ")(re.++ ((_ re.loop 4 4) (re.range "0" "9"))(re.++ (re.range " " " ")(re.++ ((_ re.loop 4 4) (re.range "0" "9"))(re.++ (re.range " " " ") (re.range "0" "9")))))))))))) (re.++ (str.to_re (str.++ "C" (str.++ "H" ""))) ((_ re.loop 19 19) (re.range "0" "9"))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "(" (str.++ "1" (str.++ "9" (str.++ ")" (str.++ "3" (str.++ "9" (str.++ "8" (str.++ "-" (str.++ " " (str.++ "7" (str.++ "8" (str.++ "7" (str.++ "8" ""))))))))))))))

(define-fun Witness2 () String (str.++ "\u{e5}" (str.++ "(" (str.++ "0" (str.++ "x" (str.++ "x" (str.++ "8" (str.++ "9" (str.++ ")" (str.++ "8" (str.++ "9" (str.++ "9" (str.++ "6" (str.++ "-" (str.++ "2" (str.++ "0" (str.++ "9" (str.++ "9" ""))))))))))))))))))

(assert (= regexA (re.++ (re.range "(" "(")(re.++ (re.union ((_ re.loop 2 2) (re.range "0" "9")) (re.++ (re.range "0" "0") (re.++ ((_ re.loop 2 2) (re.union (re.range "0" "9") (re.range "x" "x"))) ((_ re.loop 2 2) (re.range "0" "9")))))(re.++ (re.range ")" ")")(re.++ (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ ((_ re.loop 3 4) (re.range "0" "9"))(re.++ (re.* (re.union (re.range " " " ") (re.range "-" "-"))) ((_ re.loop 4 4) (re.range "0" "9"))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "B" (str.++ "u" (str.++ "y" (str.++ " " (str.++ "W" (str.++ "o" (str.++ "W" (str.++ " " (str.++ "G" (str.++ "o" (str.++ "l" (str.++ "d" "")))))))))))))

(define-fun Witness2 () String (str.++ "B" (str.++ "u" (str.++ "y" (str.++ " " (str.++ "W" (str.++ "o" (str.++ "W" (str.++ " " (str.++ "G" (str.++ "o" (str.++ "l" (str.++ "d" (str.++ ":" ""))))))))))))))

(assert (= regexA (str.to_re (str.++ "B" (str.++ "u" (str.++ "y" (str.++ " " (str.++ "W" (str.++ "o" (str.++ "W" (str.++ " " (str.++ "G" (str.++ "o" (str.++ "l" (str.++ "d" "")))))))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "0" (str.++ "7" (str.++ "2" (str.++ "-" (str.++ "8" (str.++ "5" (str.++ "6" (str.++ " " (str.++ "1" (str.++ "7" (str.++ "3" (str.++ "5" "")))))))))))))

(define-fun Witness2 () String (str.++ "0" (str.++ "7" (str.++ "2" (str.++ "3" (str.++ "3" (str.++ "8" (str.++ "3" (str.++ "2" (str.++ "3" (str.++ "6" (str.++ "\u{5c}" (str.++ "\u{c2}" (str.++ "\u{9d}" ""))))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.range "0" "0")(re.++ (re.range "7" "8")(re.++ (re.union (re.range "2" "4") (re.range "6" "7")) (re.union ((_ re.loop 7 7) (re.range "0" "9"))(re.union (re.++ (re.union (re.range " " " ") (re.range "-" "-"))(re.++ ((_ re.loop 3 3) (re.range "0" "9"))(re.++ (re.union (re.range " " " ") (re.range "-" "-")) ((_ re.loop 4 4) (re.range "0" "9"))))) (re.++ (re.union (re.range " " " ") (re.range "-" "-")) ((_ re.loop 7 7) (re.range "0" "9")))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "0" (str.++ "x" (str.++ "C" (str.++ "c" (str.++ "\u{d1}" (str.++ "x" "")))))))

(define-fun Witness2 () String (str.++ "\u{0c}" (str.++ "]" (str.++ "\u{9b}" (str.++ "\u{e6}" (str.++ "\u{19}" (str.++ "0" (str.++ "x" (str.++ "0" (str.++ "9" (str.++ "c" (str.++ "A" ""))))))))))))

(assert (= regexA (re.++ (str.to_re (str.++ "0" (str.++ "x" ""))) (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "F") (re.range "a" "f")))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "1" (str.++ "0" (str.++ "4" (str.++ "5" (str.++ "9" (str.++ "5" (str.++ "9" (str.++ "\u{97}" "")))))))))

(define-fun Witness2 () String (str.++ " " (str.++ " " (str.++ " " (str.++ " " (str.++ " " (str.++ " " (str.++ " " ""))))))))

(assert (= regexA (re.union (str.to_re (str.++ " " (str.++ " " (str.++ " " (str.++ " " (str.++ " " (str.++ " " (str.++ " " "")))))))) (re.++ (str.to_re (str.++ "1" (str.++ "0" (str.++ "4" ""))))(re.++ (re.range "0" "7") ((_ re.loop 3 3) (re.range "0" "9")))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "\u{be}" (str.++ "\u{f5}" (str.++ "\u{0b}" (str.++ "j" "")))))

(define-fun Witness2 () String (str.++ ":" (str.++ "\u{1c}" (str.++ "\u{e6}" (str.++ "S" "")))))

(assert (= regexA (re.++ (re.union (re.range " " " ")(re.union (re.range "A" "Z")(re.union (re.range "a" "z")(re.union (re.range "\u{c1}" "\u{da}") (re.range "\u{e1}" "\u{fa}")))))(re.++ (re.+ (re.union (re.range "\u{00}" "/") (re.range ":" "\u{ff}"))) (str.to_re "")))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "h" (str.++ "t" (str.++ "t" (str.++ "p" (str.++ ":" (str.++ "/" (str.++ "/" (str.++ "\u{9f}" (str.++ "." (str.++ "c" (str.++ "o" (str.++ "m" (str.++ " " ""))))))))))))))

(define-fun Witness2 () String (str.++ "h" (str.++ "t" (str.++ "t" (str.++ "p" (str.++ ":" (str.++ "/" (str.++ "/" (str.++ "w" (str.++ "w" (str.++ "w" (str.++ "." (str.++ "\u{ff}" (str.++ "{" (str.++ "." (str.++ "c" (str.++ "o" (str.++ "m" (str.++ " " (str.++ "\u{9a}" (str.++ "e" "")))))))))))))))))))))

(assert (= regexA (re.++ (str.to_re (str.++ "h" (str.++ "t" (str.++ "t" (str.++ "p" (str.++ ":" (str.++ "/" (str.++ "/" ""))))))))(re.++ (re.opt (str.to_re (str.++ "w" (str.++ "w" (str.++ "w" (str.++ "." ""))))))(re.++ (re.+ (re.union (re.range "\u{00}" "-") (re.range "/" "\u{ff}"))) (str.to_re (str.++ "." (str.++ "c" (str.++ "o" (str.++ "m" (str.++ " " "")))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "p" (str.++ "w" (str.++ "d" (str.++ "=" (str.++ "'" (str.++ "I" (str.++ "\u{9a}" (str.++ "'" "")))))))))

(define-fun Witness2 () String (str.++ "\u{e6}" (str.++ "\u{15}" (str.++ "\u{ee}" (str.++ "p" (str.++ "a" (str.++ "s" (str.++ "s" (str.++ "w" (str.++ "o" (str.++ "r" (str.++ "d" (str.++ "=" (str.++ "\u{09}" (str.++ "B" "")))))))))))))))

(assert (= regexA (re.++ (re.union (str.to_re (str.++ "p" (str.++ "w" (str.++ "d" "")))) (str.to_re (str.++ "p" (str.++ "a" (str.++ "s" (str.++ "s" (str.++ "w" (str.++ "o" (str.++ "r" (str.++ "d" ""))))))))))(re.++ (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (re.range "=" "=")(re.++ (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))) (re.union (re.++ (re.range "'" "'")(re.++ (re.+ (re.union (re.union (re.range "\u{00}" "&") (re.range "(" "\u{ff}")) (str.to_re (str.++ "'" (str.++ "'" ""))))) (re.range "'" "'"))) (re.+ (re.union (re.range "\u{00}" "&")(re.union (re.range "(" ":") (re.range "<" "\u{ff}")))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "(" (str.++ "." (str.++ "_" (str.++ "." (str.++ ")" (str.++ "\u{85}" (str.++ "x" ""))))))))

(define-fun Witness2 () String (str.++ "O" (str.++ "o" (str.++ ")" ""))))

(assert (= regexA (re.++ (re.union (str.to_re "") (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (re.* (re.union (re.range "(" "(")(re.union (re.range "[" "[") (re.range "{" "{"))))(re.++ (re.union (re.++ (re.union (re.range "#" "%")(re.union (re.range "'" "'")(re.union (re.range "*" "+")(re.union (re.range "-" "-")(re.union (re.range "0" "0")(re.union (re.range "<" "<")(re.union (re.range ">" ">")(re.union (re.range "@" "@")(re.union (re.range "O" "O")(re.union (re.range "T" "T")(re.union (re.range "V" "V")(re.union (re.range "X" "X")(re.union (re.range "Z" "Z")(re.union (re.range "^" "^")(re.union (re.range "o" "o")(re.union (re.range "t" "t")(re.union (re.range "v" "v")(re.union (re.range "x" "x")(re.union (re.range "z" "z") (re.range "\u{ac}" "\u{ac}"))))))))))))))))))))(re.++ (re.union (re.+ (re.range "_" "_")) (re.range "." ".")) (re.union (re.range "#" "%")(re.union (re.range "'" "'")(re.union (re.range "*" "+")(re.union (re.range "-" "-")(re.union (re.range "0" "0")(re.union (re.range "<" "<")(re.union (re.range ">" ">")(re.union (re.range "@" "@")(re.union (re.range "O" "O")(re.union (re.range "T" "T")(re.union (re.range "V" "V")(re.union (re.range "X" "X")(re.union (re.range "Z" "Z")(re.union (re.range "^" "^")(re.union (re.range "o" "o")(re.union (re.range "t" "t")(re.union (re.range "v" "v")(re.union (re.range "x" "x")(re.union (re.range "z" "z") (re.range "\u{ac}" "\u{ac}"))))))))))))))))))))))(re.union (str.to_re (str.++ "." (str.++ "_" (str.++ "." ""))))(re.union (re.++ (re.union (re.range "#" "%")(re.union (re.range "'" "'")(re.union (re.range "*" "*")(re.union (re.range "0" "0")(re.union (re.range "<" "<")(re.union (re.range ">" ">")(re.union (re.range "@" "@")(re.union (re.range "O" "O")(re.union (re.range "T" "T")(re.union (re.range "V" "V")(re.union (re.range "X" "X")(re.union (re.range "Z" "Z")(re.union (re.range "^" "^")(re.union (re.range "o" "o")(re.union (re.range "t" "t") (re.range "x" "x"))))))))))))))))(re.++ (re.range "-" "-") (re.union (re.range "#" "%")(re.union (re.range "'" "'")(re.union (re.range "*" "*")(re.union (re.range "0" "0")(re.union (re.range "<" "<")(re.union (re.range ">" ">")(re.union (re.range "@" "@")(re.union (re.range "O" "O")(re.union (re.range "T" "T")(re.union (re.range "V" "V")(re.union (re.range "X" "X")(re.union (re.range "Z" "Z")(re.union (re.range "^" "^")(re.union (re.range "o" "o")(re.union (re.range "t" "t") (re.range "x" "x"))))))))))))))))))(re.union (str.to_re (str.++ ">" (str.++ ">" "")))(re.union (str.to_re (str.++ ">" (str.++ "<" "")))(re.union (str.to_re (str.++ "<" (str.++ "<" "")))(re.union (re.++ (re.range "o" "o") (re.union (re.range "0" "0") (re.range "O" "O"))) (re.++ (re.union (re.range "0" "0") (re.range "O" "O")) (re.range "o" "o")))))))))(re.++ (re.* (re.union (re.range ")" ")")(re.union (re.range "]" "]") (re.range "}" "}"))))(re.++ (re.* (re.union (re.range "." ".")(re.union (re.range ";" ";") (re.range "?" "?"))))(re.++ (re.opt (re.union (re.range "\u{22}" "\u{22}") (re.range "'" "'"))) (re.union (str.to_re "") (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "(" (str.++ " " (str.++ "7" (str.++ "9" (str.++ "9" (str.++ "\u{85}" (str.++ ")" (str.++ "9" (str.++ "9" (str.++ "3" (str.++ "\u{09}" (str.++ "\u{a0}" (str.++ "." (str.++ "8" (str.++ "9" (str.++ "1" (str.++ "9" ""))))))))))))))))))

(define-fun Witness2 () String (str.++ "\u{9b}" (str.++ "\u{5c}" (str.++ "\u{a7}" (str.++ "z" (str.++ "3" (str.++ "6" (str.++ "2" (str.++ "\u{a0}" (str.++ "." (str.++ "8" (str.++ "6" (str.++ "8" (str.++ "\u{a0}" (str.++ "\u{0c}" (str.++ "\u{a0}" (str.++ " " (str.++ "." (str.++ "\u{0d}" (str.++ "7" (str.++ "6" (str.++ "8" (str.++ "2" (str.++ "X" (str.++ "." (str.++ "9" (str.++ "9" (str.++ "\u{ab}" ""))))))))))))))))))))))))))))

(assert (= regexA (re.++ (re.opt (re.range "(" "("))(re.++ (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ ((_ re.loop 3 3) (re.range "0" "9"))(re.++ (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (re.opt (re.union (re.range ")" ")") (re.range "-" ".")))(re.++ (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ ((_ re.loop 3 3) (re.range "0" "9"))(re.++ (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (re.opt (re.range "-" "."))(re.++ (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ ((_ re.loop 4 4) (re.range "0" "9"))(re.++ (re.* (re.union (re.range "\u{00}" "/") (re.range ":" "\u{ff}"))) (re.* (re.range "0" "9"))))))))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "\u{22}" (str.++ "Q" (str.++ "\u{22}" (str.++ "0" (str.++ "t" ""))))))

(define-fun Witness2 () String (str.++ "\u{22}" (str.++ "a" (str.++ "\u{0c}" (str.++ "\u{22}" (str.++ "\u{98}" ""))))))

(assert (= regexA (re.union (re.++ (re.range "\u{22}" "\u{22}")(re.++ (re.+ (re.union (re.range "\u{00}" "!") (re.range "#" "\u{ff}"))) (re.range "\u{22}" "\u{22}")))(re.union (re.++ (re.range "(" "(")(re.++ (re.+ (re.union (re.range "\u{00}" "(") (re.range "*" "\u{ff}"))) (re.range ")" ")"))) (re.+ (re.union (re.range "\u{00}" "\u{08}")(re.union (re.range "\u{0e}" "\u{1f}")(re.union (re.range "!" "!")(re.union (re.range "#" "'")(re.union (re.range "*" "\u{84}")(re.union (re.range "\u{86}" "\u{9f}") (re.range "\u{a1}" "\u{ff}"))))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "\u{22}" (str.++ "h" (str.++ "t" (str.++ "t" (str.++ "p" (str.++ ":" (str.++ "/" (str.++ "/" (str.++ "w" (str.++ "w" (str.++ "w" (str.++ "." (str.++ "y" (str.++ "o" (str.++ "u" (str.++ "t" (str.++ "u" (str.++ "b" (str.++ "e" (str.++ "." (str.++ "c" (str.++ "o" (str.++ "m" (str.++ "/" (str.++ "v" (str.++ "/" (str.++ "E" (str.++ "\u{aa}" (str.++ "\u{aa}" (str.++ "\u{d5}" (str.++ "0" (str.++ "I" (str.++ "\u{f3}" (str.++ "F" (str.++ "9" (str.++ "C" (str.++ "\u{aa}" (str.++ "&" (str.++ "r" (str.++ "e" (str.++ "l" (str.++ "=" (str.++ "1" (str.++ "\u{22}" (str.++ "\u{02}" ""))))))))))))))))))))))))))))))))))))))))))))))

(define-fun Witness2 () String (str.++ "\u{f4}" (str.++ "~" (str.++ "\u{22}" (str.++ "h" (str.++ "t" (str.++ "t" (str.++ "p" (str.++ ":" (str.++ "/" (str.++ "/" (str.++ "w" (str.++ "w" (str.++ "w" (str.++ "." (str.++ "y" (str.++ "o" (str.++ "u" (str.++ "t" (str.++ "u" (str.++ "b" (str.++ "e" (str.++ "." (str.++ "c" (str.++ "o" (str.++ "m" (str.++ "/" (str.++ "v" (str.++ "/" (str.++ "_" (str.++ "V" (str.++ "\u{b5}" (str.++ "E" (str.++ "\u{c4}" (str.++ "\u{ba}" (str.++ "i" (str.++ "3" (str.++ "o" (str.++ "3" (str.++ "\u{aa}" (str.++ "&" (str.++ "r" (str.++ "e" (str.++ "l" (str.++ "=" (str.++ "1" (str.++ "\u{22}" (str.++ "/" (str.++ "\u{ed}" (str.++ "\u{d8}" ""))))))))))))))))))))))))))))))))))))))))))))))))))

(assert (= regexA (re.++ (str.to_re (str.++ "\u{22}" (str.++ "h" (str.++ "t" (str.++ "t" (str.++ "p" (str.++ ":" (str.++ "/" (str.++ "/" (str.++ "w" (str.++ "w" (str.++ "w" (str.++ "." (str.++ "y" (str.++ "o" (str.++ "u" (str.++ "t" (str.++ "u" (str.++ "b" (str.++ "e" (str.++ "." (str.++ "c" (str.++ "o" (str.++ "m" (str.++ "/" (str.++ "v" (str.++ "/" "")))))))))))))))))))))))))))(re.++ ((_ re.loop 11 11) (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))) (str.to_re (str.++ "&" (str.++ "r" (str.++ "e" (str.++ "l" (str.++ "=" (str.++ "1" (str.++ "\u{22}" ""))))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "L" (str.++ "g" (str.++ "t" (str.++ "\u{a4}" (str.++ "J" (str.++ "d" (str.++ "\u{85}" (str.++ "\u{85}" (str.++ " " (str.++ "B" (str.++ "\u{0d}" (str.++ "\u{09}" (str.++ "\u{a0}" (str.++ "9" (str.++ "3" (str.++ "4" (str.++ "0" (str.++ "1" (str.++ "9" ""))))))))))))))))))))

(define-fun Witness2 () String (str.++ "\u{c7}" (str.++ "\u{c2}" (str.++ "\u{04}" (str.++ "\u{07}" (str.++ "q" (str.++ "w" (str.++ "q" (str.++ "Z" (str.++ "." (str.++ "9" (str.++ "3" (str.++ "8" (str.++ "9" (str.++ "8" (str.++ "9" (str.++ "\u{98}" "")))))))))))))))))

(assert (= regexA (re.union (re.++ (re.* (re.union (re.range "A" "Z") (re.range "a" "z")))(re.++ (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "," ",")(re.union (re.range "." ".")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))))(re.++ (re.+ (re.union (re.range "A" "Z") (re.range "a" "z")))(re.++ (re.+ (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "." ".")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))))(re.++ ((_ re.loop 1 2) (re.range "0" "9"))(re.++ (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "," ",")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))) ((_ re.loop 4 4) (re.range "0" "9"))))))))(re.union (re.++ (re.range " " " ") (re.++ ((_ re.loop 0 4) (re.range "0" "9"))(re.++ (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "," "-")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))))(re.++ ((_ re.loop 3 9) (re.union (re.range "A" "Z") (re.range "a" "z")))(re.++ (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "," "-")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))))(re.++ ((_ re.loop 1 2) (re.range "0" "9"))(re.++ (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "," "-")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))) ((_ re.loop 0 8) (re.union (re.range "A" "Z") (re.range "a" "z")))))))))) (re.++ (re.range " " " ") (re.++ ((_ re.loop 1 4) (re.range "0" "9"))(re.++ (re.range "-" "/")(re.++ ((_ re.loop 1 4) (re.range "0" "9"))(re.++ (re.range "-" "/") ((_ re.loop 1 4) (re.range "0" "9")))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "s" ""))

(define-fun Witness2 () String (str.++ "\u{e3}" (str.++ "D" (str.++ "9" ""))))

(assert (= regexA (re.++ (re.opt (re.range "." "."))(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))) (str.to_re "")))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "[" (str.++ "a" (str.++ " " (str.++ "u" (str.++ "r" (str.++ "l" (str.++ "=" (str.++ "\u{22}" (str.++ "\u{d0}" (str.++ "\u{b8}" (str.++ "\u{a0}" (str.++ "\u{c1}" (str.++ "\u{22}" (str.++ "]" (str.++ "\u{bd}" (str.++ "[" (str.++ "/" (str.++ "a" (str.++ "]" ""))))))))))))))))))))

(define-fun Witness2 () String (str.++ "P" (str.++ "\u{e5}" (str.++ "\u{d4}" (str.++ "[" (str.++ "a" (str.++ " " (str.++ "u" (str.++ "r" (str.++ "l" (str.++ "=" (str.++ "\u{22}" (str.++ "\u{22}" (str.++ "]" (str.++ "0" (str.++ "[" (str.++ "/" (str.++ "a" (str.++ "]" (str.++ "}" (str.++ "\u{d2}" "")))))))))))))))))))))

(assert (= regexA (re.++ (re.++ (str.to_re (str.++ "[" (str.++ "a" (str.++ " " (str.++ "u" (str.++ "r" (str.++ "l" (str.++ "=" (str.++ "\u{22}" "")))))))))(re.++ (re.* (re.union (re.range "\u{00}" "!")(re.union (re.range "#" "Z")(re.union (re.range "\u{5c}" "\u{5c}") (re.range "^" "\u{ff}"))))) (str.to_re (str.++ "\u{22}" (str.++ "]" "")))))(re.++ (re.+ (re.union (re.range "\u{00}" "Z")(re.union (re.range "\u{5c}" "\u{5c}") (re.range "^" "\u{ff}")))) (str.to_re (str.++ "[" (str.++ "/" (str.++ "a" (str.++ "]" "")))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "\u{e2}" (str.++ "\u{05}" (str.++ "0" (str.++ "." (str.++ "1" ""))))))

(define-fun Witness2 () String (str.++ "\u{b8}" (str.++ "g" (str.++ "i" (str.++ "+" (str.++ "8" (str.++ "8" (str.++ "9" (str.++ "," (str.++ "4" (str.++ "8" (str.++ "8" (str.++ "." (str.++ "2" (str.++ "9" "")))))))))))))))

(assert (= regexA (re.++ (re.opt (re.union (re.range "+" "+") (re.range "-" "-")))(re.++ (re.union (re.range "0" "0") (re.++ (re.range "1" "9")(re.++ ((_ re.loop 0 2) (re.range "0" "9")) (re.* (re.++ (re.range "," ",") ((_ re.loop 3 3) (re.range "0" "9"))))))) (re.opt (re.++ (re.range "." ".") (re.+ (re.range "0" "9"))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "<" (str.++ "f" (str.++ "o" (str.++ "n" (str.++ "t" (str.++ ">" "")))))))

(define-fun Witness2 () String (str.++ "x" (str.++ "\u{bd}" (str.++ "<" (str.++ "f" (str.++ "o" (str.++ "n" (str.++ "t" (str.++ ">" "")))))))))

(assert (= regexA (re.++ (str.to_re (str.++ "<" (str.++ "f" (str.++ "o" (str.++ "n" (str.++ "t" ""))))))(re.++ (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " "=")(re.union (re.range "?" "~")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))) (re.range ">" ">")))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "4" (str.++ "9" (str.++ "8" (str.++ "-" (str.++ "6" (str.++ "8" (str.++ "-" (str.++ "7" (str.++ "8" (str.++ "3" (str.++ "6" (str.++ "\u{81}" (str.++ "\u{8e}" ""))))))))))))))

(define-fun Witness2 () String (str.++ "6" (str.++ "2" (str.++ "2" (str.++ "-" (str.++ "9" (str.++ "9" (str.++ "-" (str.++ "5" (str.++ "6" (str.++ "0" (str.++ "8" (str.++ "i" "")))))))))))))

(assert (= regexA (re.++ ((_ re.loop 3 3) (re.range "0" "9"))(re.++ (re.range "-" "-")(re.++ ((_ re.loop 2 2) (re.range "0" "9"))(re.++ (re.range "-" "-") ((_ re.loop 4 4) (re.range "0" "9"))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "}" (str.++ "8" (str.++ "7" (str.++ "\u{7f}" (str.++ "-" (str.++ "8" (str.++ "8" (str.++ "4" (str.++ "-" (str.++ "5" (str.++ "9" (str.++ "9" (str.++ "6" (str.++ "u" "")))))))))))))))

(define-fun Witness2 () String (str.++ "8" (str.++ "9" (str.++ "s" (str.++ "-" (str.++ "8" (str.++ "5" (str.++ "6" (str.++ "-" (str.++ "0" (str.++ "9" (str.++ "9" (str.++ "0" (str.++ "\u{80}" ""))))))))))))))

(assert (= regexA (re.++ (re.union (re.++ (re.range "8" "8")(re.++ (re.union (re.range "\u{00}" "/") (re.range "1" "\u{ff}")) (re.range "0" "9")))(re.union (re.++ (re.range "8" "8")(re.++ (re.range "0" "9") (re.union (re.range "\u{00}" "/") (re.range "1" "\u{ff}")))) (re.++ (re.union (re.range "0" "7") (re.range "9" "9")) ((_ re.loop 2 2) (re.range "0" "9")))))(re.++ (re.range "-" "-")(re.++ ((_ re.loop 3 3) (re.range "0" "9"))(re.++ (re.range "-" "-") ((_ re.loop 4 4) (re.range "0" "9"))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String "")

(define-fun Witness2 () String (str.++ "\u{c0}" (str.++ "1" (str.++ "9" (str.++ "8" (str.++ "9" (str.++ "9" (str.++ "5" (str.++ "\u{8e}" (str.++ "\u{ee}" ""))))))))))

(assert (= regexA (re.* (re.++ (re.* (re.union (re.range "0" "0")(re.union (re.range "3" "3")(re.union (re.range "6" "6") (re.range "9" "9")))))(re.++ (re.* (re.union (re.++ (re.union (re.range "1" "1")(re.union (re.range "4" "4") (re.range "7" "7")))(re.++ (re.* (re.union (re.range "0" "0")(re.union (re.range "3" "3")(re.union (re.range "6" "6") (re.range "9" "9")))))(re.++ (re.* (re.++ (re.union (re.range "1" "1")(re.union (re.range "4" "4") (re.range "7" "7")))(re.++ (re.* (re.union (re.range "0" "0")(re.union (re.range "3" "3")(re.union (re.range "6" "6") (re.range "9" "9"))))) (re.union (re.range "2" "2")(re.union (re.range "5" "5") (re.range "8" "8"))))))(re.++ (re.* (re.union (re.range "0" "0")(re.union (re.range "3" "3")(re.union (re.range "6" "6") (re.range "9" "9")))))(re.++ (re.union (re.range "1" "1")(re.union (re.range "4" "4") (re.range "7" "7")))(re.++ (re.* (re.union (re.range "0" "0")(re.union (re.range "3" "3")(re.union (re.range "6" "6") (re.range "9" "9")))))(re.++ (re.* (re.++ (re.union (re.range "2" "2")(re.union (re.range "5" "5") (re.range "8" "8")))(re.++ (re.* (re.union (re.range "0" "0")(re.union (re.range "3" "3")(re.union (re.range "6" "6") (re.range "9" "9"))))) (re.union (re.range "1" "1")(re.union (re.range "4" "4") (re.range "7" "7"))))))(re.++ (re.* (re.union (re.range "0" "0")(re.union (re.range "3" "3")(re.union (re.range "6" "6") (re.range "9" "9")))))(re.++ (re.* (re.union (re.range "0" "0")(re.union (re.range "3" "3")(re.union (re.range "6" "6") (re.range "9" "9")))))(re.++ (re.* (re.++ (re.union (re.range "2" "2")(re.union (re.range "5" "5") (re.range "8" "8")))(re.++ (re.* (re.union (re.range "0" "0")(re.union (re.range "3" "3")(re.union (re.range "6" "6") (re.range "9" "9"))))) (re.union (re.range "1" "1")(re.union (re.range "4" "4") (re.range "7" "7"))))))(re.++ (re.* (re.union (re.range "0" "0")(re.union (re.range "3" "3")(re.union (re.range "6" "6") (re.range "9" "9"))))) (re.union (re.range "1" "1")(re.union (re.range "4" "4") (re.range "7" "7"))))))))))))))(re.union (re.++ (re.union (re.range "2" "2")(re.union (re.range "5" "5") (re.range "8" "8")))(re.++ (re.* (re.union (re.range "0" "0")(re.union (re.range "3" "3")(re.union (re.range "6" "6") (re.range "9" "9")))))(re.++ (re.* (re.++ (re.union (re.range "2" "2")(re.union (re.range "5" "5") (re.range "8" "8")))(re.++ (re.* (re.union (re.range "0" "0")(re.union (re.range "3" "3")(re.union (re.range "6" "6") (re.range "9" "9"))))) (re.union (re.range "1" "1")(re.union (re.range "4" "4") (re.range "7" "7"))))))(re.++ (re.* (re.union (re.range "0" "0")(re.union (re.range "3" "3")(re.union (re.range "6" "6") (re.range "9" "9")))))(re.++ (re.union (re.range "2" "2")(re.union (re.range "5" "5") (re.range "8" "8")))(re.++ (re.* (re.union (re.range "0" "0")(re.union (re.range "3" "3")(re.union (re.range "6" "6") (re.range "9" "9")))))(re.++ (re.* (re.++ (re.union (re.range "1" "1")(re.union (re.range "4" "4") (re.range "7" "7")))(re.++ (re.* (re.union (re.range "0" "0")(re.union (re.range "3" "3")(re.union (re.range "6" "6") (re.range "9" "9"))))) (re.union (re.range "2" "2")(re.union (re.range "5" "5") (re.range "8" "8"))))))(re.++ (re.* (re.union (re.range "0" "0")(re.union (re.range "3" "3")(re.union (re.range "6" "6") (re.range "9" "9")))))(re.++ (re.* (re.union (re.range "0" "0")(re.union (re.range "3" "3")(re.union (re.range "6" "6") (re.range "9" "9")))))(re.++ (re.* (re.++ (re.union (re.range "1" "1")(re.union (re.range "4" "4") (re.range "7" "7")))(re.++ (re.* (re.union (re.range "0" "0")(re.union (re.range "3" "3")(re.union (re.range "6" "6") (re.range "9" "9"))))) (re.union (re.range "2" "2")(re.union (re.range "5" "5") (re.range "8" "8"))))))(re.++ (re.* (re.union (re.range "0" "0")(re.union (re.range "3" "3")(re.union (re.range "6" "6") (re.range "9" "9"))))) (re.union (re.range "2" "2")(re.union (re.range "5" "5") (re.range "8" "8"))))))))))))))(re.union (re.++ (re.union (re.range "1" "1")(re.union (re.range "4" "4") (re.range "7" "7")))(re.++ (re.* (re.union (re.range "0" "0")(re.union (re.range "3" "3")(re.union (re.range "6" "6") (re.range "9" "9")))))(re.++ (re.* (re.++ (re.union (re.range "1" "1")(re.union (re.range "4" "4") (re.range "7" "7")))(re.++ (re.* (re.union (re.range "0" "0")(re.union (re.range "3" "3")(re.union (re.range "6" "6") (re.range "9" "9"))))) (re.union (re.range "2" "2")(re.union (re.range "5" "5") (re.range "8" "8"))))))(re.++ (re.* (re.union (re.range "0" "0")(re.union (re.range "3" "3")(re.union (re.range "6" "6") (re.range "9" "9"))))) (re.union (re.range "2" "2")(re.union (re.range "5" "5") (re.range "8" "8"))))))) (re.++ (re.union (re.range "2" "2")(re.union (re.range "5" "5") (re.range "8" "8")))(re.++ (re.* (re.union (re.range "0" "0")(re.union (re.range "3" "3")(re.union (re.range "6" "6") (re.range "9" "9")))))(re.++ (re.* (re.++ (re.union (re.range "2" "2")(re.union (re.range "5" "5") (re.range "8" "8")))(re.++ (re.* (re.union (re.range "0" "0")(re.union (re.range "3" "3")(re.union (re.range "6" "6") (re.range "9" "9"))))) (re.union (re.range "1" "1")(re.union (re.range "4" "4") (re.range "7" "7"))))))(re.++ (re.* (re.union (re.range "0" "0")(re.union (re.range "3" "3")(re.union (re.range "6" "6") (re.range "9" "9"))))) (re.union (re.range "1" "1")(re.union (re.range "4" "4") (re.range "7" "7"))))))))))) (re.* (re.union (re.range "0" "0")(re.union (re.range "3" "3")(re.union (re.range "6" "6") (re.range "9" "9"))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "\u{02}" (str.++ " " (str.++ "/" (str.++ "/" (str.++ "Z" (str.++ "\u{ba}" (str.++ "." (str.++ "f" (str.++ "B" (str.++ "." (str.++ "\u{c3}" (str.++ "\u{aa}" (str.++ "3" (str.++ "w" (str.++ ":" (str.++ "9" (str.++ "#" (str.++ "Z" "")))))))))))))))))))

(define-fun Witness2 () String (str.++ "\u{e1}" (str.++ "/" (str.++ "/" (str.++ "%" (str.++ "f" (str.++ "P" (str.++ "\u{aa}" (str.++ "\u{aa}" (str.++ "%" (str.++ "3" (str.++ "2" (str.++ "z" (str.++ "%" (str.++ "2" (str.++ "S" (str.++ "%" (str.++ "X" (str.++ "\u{5c}" (str.++ "%" (str.++ "J" (str.++ "9" (str.++ "\u{aa}" (str.++ ":" (str.++ "%" (str.++ "8" (str.++ "f" (str.++ "\u{b5}" (str.++ "@" (str.++ "1" (str.++ "\u{fc}" (str.++ "." (str.++ "1" (str.++ "8" (str.++ "." (str.++ "\u{f6}" (str.++ "5" (str.++ "\u{c4}" (str.++ "\u{dc}" (str.++ ":" (str.++ "3" (str.++ "#" ""))))))))))))))))))))))))))))))))))))))))))

(assert (= regexA (re.++ (re.opt (re.++ (re.opt (re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))) (re.range ":" ":"))) (str.to_re (str.++ "/" (str.++ "/" "")))))(re.++ (re.opt (re.++ (re.+ (re.union (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))) (re.++ (re.range "%" "%") ((_ re.loop 2 2) (re.union (re.range "0" "9") (re.range "A" "f"))))))(re.++ (re.opt (re.++ (re.range ":" ":") (re.+ (re.union (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))) (re.++ (re.range "%" "%") ((_ re.loop 2 2) (re.union (re.range "0" "9") (re.range "A" "f")))))))) (re.range "@" "@"))))(re.++ (re.+ (re.++ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))(re.++ ((_ re.loop 0 253) (re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))))(re.++ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))) (re.range "." ".")))))(re.++ ((_ re.loop 2 4) (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))(re.++ (re.opt (re.++ (re.range ":" ":") (re.+ (re.range "0" "9"))))(re.++ (re.* (re.++ (re.range "/" "/") (re.* (re.union (re.union (re.range "+" "+")(re.union (re.range "-" ".")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "~" "~")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))))) (re.++ (re.range "%" "%") ((_ re.loop 2 2) (re.union (re.range "0" "9") (re.range "A" "f"))))))))(re.++ (re.opt (re.++ (re.range "?" "?") (re.* (re.++ (re.opt (re.range "&" "&"))(re.++ (re.union (re.union (re.range "+" "+")(re.union (re.range "-" ".")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "~" "~")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))))) (re.++ (re.range "%" "%") ((_ re.loop 2 2) (re.union (re.range "0" "9") (re.range "A" "f"))))) (re.opt (re.range "=" "="))))))) (re.opt (re.++ (re.range "#" "#") (re.* (re.union (re.union (re.range "+" "+")(re.union (re.range "-" ".")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "~" "~")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))))) (re.++ (re.range "%" "%") ((_ re.loop 2 2) (re.union (re.range "0" "9") (re.range "A" "f")))))))))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "\u{09}" ""))

(define-fun Witness2 () String (str.++ " " (str.++ "\u{0c}" (str.++ "\u{85}" (str.++ "\u{b8}" "")))))

(assert (= regexA (re.+ (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "U" (str.++ "i" (str.++ "S" (str.++ "T" (str.++ " " (str.++ "." (str.++ "R" (str.++ " " (str.++ "," (str.++ "," (str.++ "\u{09}" (str.++ " " (str.++ "M" (str.++ "A" (str.++ "R" (str.++ "Y" (str.++ "L" (str.++ "A" (str.++ "N" (str.++ "D" (str.++ "\u{0a}" (str.++ "-" (str.++ "9" (str.++ "-" (str.++ " " (str.++ "9" "")))))))))))))))))))))))))))

(define-fun Witness2 () String (str.++ "\u{fd}" (str.++ "P" (str.++ "L" (str.++ "Z" (str.++ "A" (str.++ "," (str.++ "\u{09}" (str.++ "\u{09}" (str.++ "\u{09}" (str.++ "\u{0a}" (str.++ "B" (str.++ "L" (str.++ "D" (str.++ "G" (str.++ "z" (str.++ "," (str.++ "." (str.++ "," (str.++ "\u{09}" (str.++ "V" (str.++ "I" (str.++ "R" (str.++ "G" (str.++ "I" (str.++ "N" (str.++ "I" (str.++ "A" (str.++ "," (str.++ "," (str.++ "\u{09}" (str.++ "\u{09}" (str.++ "\u{09}" (str.++ "\u{0c}" ""))))))))))))))))))))))))))))))))))

(assert (= regexA (re.++ (re.++ (re.* (re.union (re.range " " " ")(re.union (re.range "-" ".")(re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))))) (re.union (str.to_re (str.++ "C" (str.++ "I" (str.++ "R" (str.++ "C" (str.++ "L" (str.++ "E" "")))))))(re.union (str.to_re (str.++ "C" (str.++ "I" (str.++ "R" ""))))(re.union (str.to_re (str.++ "M" (str.++ "O" (str.++ "U" (str.++ "N" (str.++ "T" (str.++ "A" (str.++ "I" (str.++ "N" "")))))))))(re.union (str.to_re (str.++ "M" (str.++ "T" (str.++ "N" ""))))(re.union (str.to_re (str.++ "P" (str.++ "A" (str.++ "R" (str.++ "K" (str.++ "W" (str.++ "A" (str.++ "Y" ""))))))))(re.union (str.to_re (str.++ "P" (str.++ "K" (str.++ "W" (str.++ "Y" "")))))(re.union (str.to_re (str.++ "P" (str.++ "K" (str.++ "Y" ""))))(re.union (str.to_re (str.++ "P" (str.++ "L" (str.++ "A" (str.++ "Z" (str.++ "A" ""))))))(re.union (str.to_re (str.++ "P" (str.++ "L" (str.++ "Z" (str.++ "A" "")))))(re.union (str.to_re (str.++ "P" (str.++ "L" (str.++ "Z" ""))))(re.union (str.to_re (str.++ "R" (str.++ "I" (str.++ "D" (str.++ "G" (str.++ "E" ""))))))(re.union (str.to_re (str.++ "R" (str.++ "D" (str.++ "G" ""))))(re.union (str.to_re (str.++ "R" (str.++ "O" (str.++ "U" (str.++ "T" (str.++ "E" ""))))))(re.union (str.to_re (str.++ "R" (str.++ "T" (str.++ "E" ""))))(re.union (str.to_re (str.++ "T" (str.++ "U" (str.++ "R" (str.++ "N" (str.++ "P" (str.++ "I" (str.++ "K" (str.++ "E" "")))))))))(re.union (str.to_re (str.++ "T" (str.++ "U" (str.++ "R" (str.++ "N" (str.++ "P" (str.++ "K" "")))))))(re.union (str.to_re (str.++ "T" (str.++ "P" (str.++ "K" (str.++ "E" "")))))(re.union (str.to_re (str.++ "T" (str.++ "P" (str.++ "K" ""))))(re.union (str.to_re (str.++ "W" (str.++ "A" (str.++ "Y" ""))))(re.union (str.to_re (str.++ "W" (str.++ "Y" "")))(re.union (str.to_re (str.++ "S" (str.++ "O" (str.++ "U" (str.++ "T" (str.++ "H" (str.++ "E" (str.++ "A" (str.++ "S" (str.++ "T" ""))))))))))(re.union (str.to_re (str.++ "S" (str.++ "O" (str.++ "U" (str.++ "T" (str.++ "H" (str.++ "W" (str.++ "E" (str.++ "S" (str.++ "T" ""))))))))))(re.union (str.to_re (str.++ "S" (str.++ "O" (str.++ "U" (str.++ "T" (str.++ "H" ""))))))(re.union (str.to_re (str.++ "E" (str.++ "A" (str.++ "S" (str.++ "T" "")))))(re.union (str.to_re (str.++ "N" (str.++ "O" (str.++ "R" (str.++ "T" (str.++ "H" (str.++ "E" (str.++ "A" (str.++ "S" (str.++ "T" ""))))))))))(re.union (str.to_re (str.++ "N" (str.++ "O" (str.++ "R" (str.++ "T" (str.++ "H" (str.++ "W" (str.++ "E" (str.++ "S" (str.++ "T" ""))))))))))(re.union (str.to_re (str.++ "N" (str.++ "O" (str.++ "R" (str.++ "T" (str.++ "H" ""))))))(re.union (str.to_re (str.++ "W" (str.++ "E" (str.++ "S" (str.++ "T" "")))))(re.union (str.to_re (str.++ "A" (str.++ "R" (str.++ "C" (str.++ "A" (str.++ "D" (str.++ "E" "")))))))(re.union (str.to_re (str.++ "A" (str.++ "R" (str.++ "C" (str.++ "." "")))))(re.union (str.to_re (str.++ "A" (str.++ "R" (str.++ "C" ""))))(re.union (str.to_re (str.++ "A" (str.++ "V" (str.++ "E" (str.++ "N" (str.++ "U" (str.++ "E" "")))))))(re.union (str.to_re (str.++ "A" (str.++ "V" (str.++ "E" (str.++ "." "")))))(re.union (str.to_re (str.++ "A" (str.++ "V" (str.++ "E" ""))))(re.union (str.to_re (str.++ "B" (str.++ "O" (str.++ "U" (str.++ "L" (str.++ "E" (str.++ "V" (str.++ "A" (str.++ "R" (str.++ "D" ""))))))))))(re.union (str.to_re (str.++ "B" (str.++ "V" (str.++ "D" (str.++ "." "")))))(re.union (str.to_re (str.++ "B" (str.++ "V" (str.++ "D" ""))))(re.union (str.to_re (str.++ "B" (str.++ "L" (str.++ "V" (str.++ "D" (str.++ "." ""))))))(re.union (str.to_re (str.++ "B" (str.++ "L" (str.++ "V" (str.++ "D" "")))))(re.union (str.to_re (str.++ "C" (str.++ "L" (str.++ "O" (str.++ "S" (str.++ "E" ""))))))(re.union (str.to_re (str.++ "C" (str.++ "L" (str.++ "." ""))))(re.union (str.to_re (str.++ "C" (str.++ "L" "")))(re.union (str.to_re (str.++ "C" (str.++ "R" (str.++ "E" (str.++ "S" (str.++ "E" (str.++ "N" (str.++ "T" ""))))))))(re.union (str.to_re (str.++ "C" (str.++ "R" (str.++ "E" (str.++ "S" (str.++ "." ""))))))(re.union (str.to_re (str.++ "C" (str.++ "R" (str.++ "E" (str.++ "S" "")))))(re.union (str.to_re (str.++ "D" (str.++ "R" (str.++ "I" (str.++ "V" (str.++ "E" ""))))))(re.union (str.to_re (str.++ "D" (str.++ "R" (str.++ "." ""))))(re.union (str.to_re (str.++ "D" (str.++ "R" "")))(re.union (str.to_re (str.++ "E" (str.++ "S" (str.++ "P" (str.++ "L" (str.++ "A" (str.++ "N" (str.++ "A" (str.++ "D" (str.++ "E" ""))))))))))(re.union (str.to_re (str.++ "E" (str.++ "S" (str.++ "P" (str.++ "." "")))))(re.union (str.to_re (str.++ "E" (str.++ "S" (str.++ "P" ""))))(re.union (str.to_re (str.++ "G" (str.++ "R" (str.++ "O" (str.++ "V" (str.++ "E" ""))))))(re.union (str.to_re (str.++ "G" (str.++ "R" (str.++ "." ""))))(re.union (str.to_re (str.++ "G" (str.++ "R" "")))(re.union (str.to_re (str.++ "H" (str.++ "I" (str.++ "G" (str.++ "H" (str.++ "W" (str.++ "A" (str.++ "Y" ""))))))))(re.union (str.to_re (str.++ "H" (str.++ "W" (str.++ "Y" (str.++ "." "")))))(re.union (str.to_re (str.++ "H" (str.++ "W" (str.++ "Y" ""))))(re.union (str.to_re (str.++ "L" (str.++ "A" (str.++ "N" (str.++ "E" "")))))(re.union (str.to_re (str.++ "L" (str.++ "N" (str.++ "." ""))))(re.union (str.to_re (str.++ "L" (str.++ "N" "")))(re.union (str.to_re (str.++ "P" (str.++ "A" (str.++ "R" (str.++ "A" (str.++ "D" (str.++ "E" "")))))))(re.union (str.to_re (str.++ "P" (str.++ "D" (str.++ "E" (str.++ "." "")))))(re.union (str.to_re (str.++ "P" (str.++ "D" (str.++ "E" ""))))(re.union (str.to_re (str.++ "P" (str.++ "L" (str.++ "A" (str.++ "C" (str.++ "E" (str.++ "." "")))))))(re.union (str.to_re (str.++ "P" (str.++ "L" (str.++ "A" (str.++ "C" (str.++ "E" ""))))))(re.union (str.to_re (str.++ "P" (str.++ "L" (str.++ "." ""))))(re.union (str.to_re (str.++ "P" (str.++ "L" "")))(re.union (str.to_re (str.++ "R" (str.++ "O" (str.++ "A" (str.++ "D" "")))))(re.union (str.to_re (str.++ "R" (str.++ "D" (str.++ "." ""))))(re.union (str.to_re (str.++ "R" (str.++ "D" "")))(re.union (str.to_re (str.++ "S" (str.++ "Q" (str.++ "U" (str.++ "A" (str.++ "R" (str.++ "E" "")))))))(re.union (str.to_re (str.++ "S" (str.++ "Q" (str.++ "." ""))))(re.union (str.to_re (str.++ "S" (str.++ "Q" "")))(re.union (str.to_re (str.++ "S" (str.++ "T" (str.++ "R" (str.++ "E" (str.++ "E" (str.++ "T" "")))))))(re.union (str.to_re (str.++ "S" (str.++ "T" (str.++ "." ""))))(re.union (str.to_re (str.++ "S" (str.++ "T" "")))(re.union (str.to_re (str.++ "T" (str.++ "E" (str.++ "R" (str.++ "R" (str.++ "A" (str.++ "C" (str.++ "E" ""))))))))(re.union (str.to_re (str.++ "T" (str.++ "C" (str.++ "E" (str.++ "." "")))))(re.union (str.to_re (str.++ "T" (str.++ "C" (str.++ "E" ""))))(re.union (str.to_re (str.++ "S" (str.++ "." "")))(re.union (str.to_re (str.++ "W" (str.++ "." "")))(re.union (str.to_re (str.++ "N" (str.++ "." "")))(re.union (str.to_re (str.++ "E" (str.++ "." ""))) (re.union (re.range "E" "E")(re.union (re.range "N" "N")(re.union (re.range "S" "S") (re.range "W" "W"))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))(re.++ (re.* (re.range "," ","))(re.++ (re.* (re.range "\u{09}" "\u{09}"))(re.++ (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))(re.++ (re.union (re.++ (str.to_re (str.++ "U" (str.++ "N" (str.++ "I" (str.++ "T" ""))))) (re.* (re.union (re.range " " " ")(re.union (re.range "-" "-")(re.union (re.range "0" ":")(re.union (re.range "A" "Z") (re.range "a" "z")))))))(re.union (re.++ (str.to_re (str.++ "B" (str.++ "A" (str.++ "S" (str.++ "E" (str.++ "M" (str.++ "E" (str.++ "N" (str.++ "T" ""))))))))) (re.* (re.union (re.range " " " ")(re.union (re.range "-" "-")(re.union (re.range "0" ":")(re.union (re.range "A" "Z") (re.range "a" "z")))))))(re.union (re.++ (str.to_re (str.++ "B" (str.++ "S" (str.++ "M" (str.++ "T" ""))))) (re.* (re.union (re.range " " " ")(re.union (re.range "-" "-")(re.union (re.range "0" ":")(re.union (re.range "A" "Z") (re.range "a" "z")))))))(re.union (re.++ (str.to_re (str.++ "B" (str.++ "U" (str.++ "I" (str.++ "L" (str.++ "D" (str.++ "I" (str.++ "N" (str.++ "G" ""))))))))) (re.* (re.union (re.range " " " ")(re.union (re.range "-" "-")(re.union (re.range "0" ":")(re.union (re.range "A" "Z") (re.range "a" "z")))))))(re.union (re.++ (str.to_re (str.++ "D" (str.++ "E" (str.++ "P" (str.++ "A" (str.++ "R" (str.++ "T" (str.++ "M" (str.++ "E" (str.++ "N" (str.++ "T" ""))))))))))) (re.* (re.union (re.range " " " ")(re.union (re.range "-" "-")(re.union (re.range "0" ":")(re.union (re.range "A" "Z") (re.range "a" "z")))))))(re.union (re.++ (str.to_re (str.++ "D" (str.++ "E" (str.++ "P" (str.++ "T" ""))))) (re.* (re.union (re.range " " " ")(re.union (re.range "-" "-")(re.union (re.range "0" ":")(re.union (re.range "A" "Z") (re.range "a" "z")))))))(re.union (re.++ (str.to_re (str.++ "F" (str.++ "L" (str.++ "O" (str.++ "O" (str.++ "R" "")))))) (re.* (re.union (re.range " " " ")(re.union (re.range "-" "-")(re.union (re.range "0" ":")(re.union (re.range "A" "Z") (re.range "a" "z")))))))(re.union (re.++ (str.to_re (str.++ "F" (str.++ "L" ""))) (re.* (re.union (re.range " " " ")(re.union (re.range "-" "-")(re.union (re.range "0" ":")(re.union (re.range "A" "Z") (re.range "a" "z")))))))(re.union (re.++ (str.to_re (str.++ "P" (str.++ "E" (str.++ "N" (str.++ "T" (str.++ "H" (str.++ "O" (str.++ "U" (str.++ "S" (str.++ "E" "")))))))))) (re.* (re.union (re.range " " " ")(re.union (re.range "-" "-")(re.union (re.range "0" ":")(re.union (re.range "A" "Z") (re.range "a" "z")))))))(re.union (re.++ (str.to_re (str.++ "P" (str.++ "H" ""))) (re.* (re.union (re.range " " " ")(re.union (re.range "-" "-")(re.union (re.range "0" ":")(re.union (re.range "A" "Z") (re.range "a" "z")))))))(re.union (re.++ (str.to_re (str.++ "R" (str.++ "O" (str.++ "O" (str.++ "M" ""))))) (re.* (re.union (re.range " " " ")(re.union (re.range "-" "-")(re.union (re.range "0" ":")(re.union (re.range "A" "Z") (re.range "a" "z")))))))(re.union (re.++ (str.to_re (str.++ "R" (str.++ "M" ""))) (re.* (re.union (re.range " " " ")(re.union (re.range "-" "-")(re.union (re.range "0" ":")(re.union (re.range "A" "Z") (re.range "a" "z")))))))(re.union (re.++ (str.to_re (str.++ "S" (str.++ "L" (str.++ "I" (str.++ "P" ""))))) (re.* (re.union (re.range " " " ")(re.union (re.range "-" "-")(re.union (re.range "0" ":")(re.union (re.range "A" "Z") (re.range "a" "z")))))))(re.union (re.++ (str.to_re (str.++ "S" (str.++ "P" (str.++ "A" (str.++ "C" (str.++ "E" "")))))) (re.* (re.union (re.range " " " ")(re.union (re.range "-" "-")(re.union (re.range "0" ":")(re.union (re.range "A" "Z") (re.range "a" "z")))))))(re.union (re.++ (str.to_re (str.++ "S" (str.++ "P" (str.++ "C" "")))) (re.* (re.union (re.range " " " ")(re.union (re.range "-" "-")(re.union (re.range "0" ":")(re.union (re.range "A" "Z") (re.range "a" "z")))))))(re.union (re.++ (str.to_re (str.++ "S" (str.++ "U" (str.++ "I" (str.++ "T" (str.++ "E" "")))))) (re.* (re.union (re.range " " " ")(re.union (re.range "-" "-")(re.union (re.range "0" ":")(re.union (re.range "A" "Z") (re.range "a" "z")))))))(re.union (re.++ (re.range "#" "#") (re.* (re.union (re.range " " " ")(re.union (re.range "-" "-")(re.union (re.range "0" ":")(re.union (re.range "A" "Z") (re.range "a" "z")))))))(re.union (re.++ (str.to_re (str.++ "A" (str.++ "P" (str.++ "T" "")))) (re.* (re.union (re.range " " " ")(re.union (re.range "-" "-")(re.union (re.range "0" ":")(re.union (re.range "A" "Z") (re.range "a" "z")))))))(re.union (re.++ (str.to_re (str.++ "B" (str.++ "L" (str.++ "D" (str.++ "G" ""))))) (re.* (re.union (re.range " " " ")(re.union (re.range "-" "-")(re.union (re.range "0" ":")(re.union (re.range "A" "Z") (re.range "a" "z")))))))(re.union (re.++ (str.to_re (str.++ "P" (str.++ "O" "")))(re.++ (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))(re.++ (str.to_re (str.++ "B" (str.++ "O" (str.++ "X" (str.++ ":" ""))))) (re.* (re.union (re.range " " " ")(re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))))))))(re.union (re.++ (str.to_re (str.++ "P" (str.++ "." (str.++ "O" (str.++ "." "")))))(re.++ (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))(re.++ (str.to_re (str.++ "B" (str.++ "O" (str.++ "X" "")))) (re.* (re.union (re.range " " " ")(re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))))))))(re.union (re.++ (str.to_re (str.++ "P" (str.++ "O" "")))(re.++ (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))(re.++ (str.to_re (str.++ "B" (str.++ "O" (str.++ "X" "")))) (re.* (re.union (re.range " " " ")(re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))))))))(re.union (re.++ (str.to_re (str.++ "B" (str.++ "O" (str.++ "X" "")))) (re.* (re.union (re.range " " " ")(re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z"))))))) (re.* (re.range " " " ")))))))))))))))))))))))))(re.++ (re.* (re.range "," ","))(re.++ (re.* (re.range "." "."))(re.++ (re.* (re.range "\u{09}" "\u{09}"))(re.++ (re.* (re.union (re.range " " " ")(re.union (re.range "A" "Z") (re.range "a" "z"))))(re.++ (re.* (re.range "," ","))(re.++ (re.* (re.range "\u{09}" "\u{09}"))(re.++ (re.* (re.range " " " "))(re.++ (re.union (str.to_re (str.++ "A" (str.++ "L" "")))(re.union (str.to_re (str.++ "A" (str.++ "L" (str.++ "A" (str.++ "B" (str.++ "A" (str.++ "M" (str.++ "A" ""))))))))(re.union (str.to_re (str.++ "A" (str.++ "K" "")))(re.union (str.to_re (str.++ "A" (str.++ "L" (str.++ "A" (str.++ "S" (str.++ "K" (str.++ "A" "")))))))(re.union (str.to_re (str.++ "A" (str.++ "Z" "")))(re.union (str.to_re (str.++ "A" (str.++ "R" (str.++ "I" (str.++ "Z" (str.++ "O" (str.++ "N" (str.++ "A" ""))))))))(re.union (str.to_re (str.++ "A" (str.++ "R" "")))(re.union (str.to_re (str.++ "A" (str.++ "R" (str.++ "K" (str.++ "A" (str.++ "N" (str.++ "S" (str.++ "A" (str.++ "S" "")))))))))(re.union (str.to_re (str.++ "C" (str.++ "A" "")))(re.union (str.to_re (str.++ "C" (str.++ "A" (str.++ "L" (str.++ "I" (str.++ "F" (str.++ "O" (str.++ "R" (str.++ "N" (str.++ "I" (str.++ "A" "")))))))))))(re.union (str.to_re (str.++ "C" (str.++ "O" "")))(re.union (str.to_re (str.++ "C" (str.++ "O" (str.++ "L" (str.++ "O" (str.++ "R" (str.++ "A" (str.++ "D" (str.++ "O" "")))))))))(re.union (str.to_re (str.++ "C" (str.++ "T" "")))(re.union (str.to_re (str.++ "C" (str.++ "O" (str.++ "N" (str.++ "N" (str.++ "E" (str.++ "C" (str.++ "T" (str.++ "I" (str.++ "C" (str.++ "U" (str.++ "T" ""))))))))))))(re.union (str.to_re (str.++ "D" (str.++ "E" "")))(re.union (str.to_re (str.++ "D" (str.++ "E" (str.++ "L" (str.++ "A" (str.++ "W" (str.++ "A" (str.++ "R" (str.++ "E" "")))))))))(re.union (str.to_re (str.++ "F" (str.++ "L" "")))(re.union (str.to_re (str.++ "F" (str.++ "L" (str.++ "O" (str.++ "R" (str.++ "I" (str.++ "D" (str.++ "A" ""))))))))(re.union (str.to_re (str.++ "G" (str.++ "A" "")))(re.union (str.to_re (str.++ "G" (str.++ "E" (str.++ "O" (str.++ "R" (str.++ "G" (str.++ "I" (str.++ "A" ""))))))))(re.union (str.to_re (str.++ "H" (str.++ "I" "")))(re.union (str.to_re (str.++ "H" (str.++ "A" (str.++ "W" (str.++ "A" (str.++ "I" (str.++ "I" "")))))))(re.union (str.to_re (str.++ "I" (str.++ "D" "")))(re.union (str.to_re (str.++ "I" (str.++ "D" (str.++ "A" (str.++ "H" (str.++ "O" ""))))))(re.union (str.to_re (str.++ "I" (str.++ "L" "")))(re.union (str.to_re (str.++ "I" (str.++ "L" (str.++ "L" (str.++ "N" (str.++ "O" (str.++ "I" (str.++ "S" ""))))))))(re.union (str.to_re (str.++ "I" (str.++ "N" "")))(re.union (str.to_re (str.++ "I" (str.++ "N" (str.++ "D" (str.++ "I" (str.++ "A" (str.++ "N" (str.++ "A" ""))))))))(re.union (str.to_re (str.++ "I" (str.++ "A" "")))(re.union (str.to_re (str.++ "I" (str.++ "O" (str.++ "W" (str.++ "A" "")))))(re.union (str.to_re (str.++ "K" (str.++ "S" "")))(re.union (str.to_re (str.++ "K" (str.++ "A" (str.++ "N" (str.++ "S" (str.++ "A" (str.++ "S" "")))))))(re.union (str.to_re (str.++ "K" (str.++ "Y" "")))(re.union (str.to_re (str.++ "K" (str.++ "E" (str.++ "N" (str.++ "T" (str.++ "U" (str.++ "C" (str.++ "K" (str.++ "Y" "")))))))))(re.union (str.to_re (str.++ "L" (str.++ "A" "")))(re.union (str.to_re (str.++ "L" (str.++ "O" (str.++ "U" (str.++ "I" (str.++ "S" (str.++ "I" (str.++ "A" (str.++ "N" (str.++ "A" ""))))))))))(re.union (str.to_re (str.++ "M" (str.++ "E" "")))(re.union (str.to_re (str.++ "M" (str.++ "A" (str.++ "I" (str.++ "N" (str.++ "E" ""))))))(re.union (str.to_re (str.++ "M" (str.++ "D" "")))(re.union (str.to_re (str.++ "M" (str.++ "A" (str.++ "R" (str.++ "Y" (str.++ "L" (str.++ "A" (str.++ "N" (str.++ "D" "")))))))))(re.union (str.to_re (str.++ "M" (str.++ "A" "")))(re.union (str.to_re (str.++ "M" (str.++ "A" (str.++ "S" (str.++ "S" (str.++ "A" (str.++ "C" (str.++ "H" (str.++ "U" (str.++ "S" (str.++ "E" (str.++ "T" (str.++ "T" (str.++ "S" ""))))))))))))))(re.union (str.to_re (str.++ "M" (str.++ "I" "")))(re.union (str.to_re (str.++ "M" (str.++ "I" (str.++ "C" (str.++ "H" (str.++ "I" (str.++ "G" (str.++ "A" (str.++ "N" "")))))))))(re.union (str.to_re (str.++ "M" (str.++ "N" "")))(re.union (str.to_re (str.++ "M" (str.++ "I" (str.++ "N" (str.++ "N" (str.++ "E" (str.++ "S" (str.++ "O" (str.++ "T" (str.++ "A" ""))))))))))(re.union (str.to_re (str.++ "M" (str.++ "S" "")))(re.union (str.to_re (str.++ "M" (str.++ "I" (str.++ "S" (str.++ "S" (str.++ "I" (str.++ "S" (str.++ "S" (str.++ "I" (str.++ "P" (str.++ "P" (str.++ "I" ""))))))))))))(re.union (str.to_re (str.++ "M" (str.++ "O" "")))(re.union (str.to_re (str.++ "M" (str.++ "I" (str.++ "S" (str.++ "S" (str.++ "O" (str.++ "U" (str.++ "R" (str.++ "I" "")))))))))(re.union (str.to_re (str.++ "M" (str.++ "T" "")))(re.union (str.to_re (str.++ "M" (str.++ "O" (str.++ "N" (str.++ "T" (str.++ "A" (str.++ "N" (str.++ "A" ""))))))))(re.union (str.to_re (str.++ "N" (str.++ "E" "")))(re.union (str.to_re (str.++ "N" (str.++ "E" (str.++ "B" (str.++ "R" (str.++ "A" (str.++ "S" (str.++ "K" (str.++ "A" "")))))))))(re.union (str.to_re (str.++ "N" (str.++ "V" "")))(re.union (str.to_re (str.++ "N" (str.++ "E" (str.++ "V" (str.++ "A" (str.++ "D" (str.++ "A" "")))))))(re.union (str.to_re (str.++ "N" (str.++ "H" "")))(re.union (str.to_re (str.++ "N" (str.++ "E" (str.++ "W" (str.++ " " (str.++ "H" (str.++ "A" (str.++ "M" (str.++ "P" (str.++ "S" (str.++ "H" (str.++ "I" (str.++ "R" (str.++ "E" ""))))))))))))))(re.union (str.to_re (str.++ "N" (str.++ "J" "")))(re.union (str.to_re (str.++ "N" (str.++ "E" (str.++ "W" (str.++ " " (str.++ "J" (str.++ "E" (str.++ "R" (str.++ "S" (str.++ "E" (str.++ "Y" "")))))))))))(re.union (str.to_re (str.++ "N" (str.++ "M" "")))(re.union (str.to_re (str.++ "N" (str.++ "E" (str.++ "W" (str.++ " " (str.++ "M" (str.++ "E" (str.++ "X" (str.++ "I" (str.++ "C" (str.++ "O" "")))))))))))(re.union (str.to_re (str.++ "N" (str.++ "Y" "")))(re.union (str.to_re (str.++ "N" (str.++ "E" (str.++ "W" (str.++ " " (str.++ "Y" (str.++ "O" (str.++ "R" (str.++ "K" "")))))))))(re.union (str.to_re (str.++ "N" (str.++ "C" "")))(re.union (str.to_re (str.++ "N" (str.++ "O" (str.++ "R" (str.++ "T" (str.++ "H" (str.++ " " (str.++ "C" (str.++ "A" (str.++ "R" (str.++ "O" (str.++ "L" (str.++ "I" (str.++ "N" (str.++ "A" "")))))))))))))))(re.union (str.to_re (str.++ "N" (str.++ "D" "")))(re.union (str.to_re (str.++ "N" (str.++ "O" (str.++ "R" (str.++ "T" (str.++ "H" (str.++ " " (str.++ "D" (str.++ "A" (str.++ "K" (str.++ "O" (str.++ "T" (str.++ "A" "")))))))))))))(re.union (str.to_re (str.++ "O" (str.++ "H" "")))(re.union (str.to_re (str.++ "O" (str.++ "H" (str.++ "I" (str.++ "O" "")))))(re.union (str.to_re (str.++ "O" (str.++ "K" "")))(re.union (str.to_re (str.++ "O" (str.++ "K" (str.++ "L" (str.++ "A" (str.++ "H" (str.++ "O" (str.++ "M" (str.++ "A" "")))))))))(re.union (str.to_re (str.++ "O" (str.++ "R" "")))(re.union (str.to_re (str.++ "O" (str.++ "R" (str.++ "E" (str.++ "G" (str.++ "O" (str.++ "N" "")))))))(re.union (str.to_re (str.++ "P" (str.++ "A" "")))(re.union (str.to_re (str.++ "P" (str.++ "E" (str.++ "N" (str.++ "N" (str.++ "S" (str.++ "Y" (str.++ "L" (str.++ "V" (str.++ "A" (str.++ "N" (str.++ "I" (str.++ "A" "")))))))))))))(re.union (str.to_re (str.++ "R" (str.++ "I" "")))(re.union (str.to_re (str.++ "R" (str.++ "H" (str.++ "O" (str.++ "D" (str.++ "E" (str.++ " " (str.++ "I" (str.++ "S" (str.++ "L" (str.++ "A" (str.++ "N" (str.++ "D" "")))))))))))))(re.union (str.to_re (str.++ "S" (str.++ "C" "")))(re.union (str.to_re (str.++ "S" (str.++ "O" (str.++ "U" (str.++ "T" (str.++ "H" (str.++ " " (str.++ "C" (str.++ "A" (str.++ "R" (str.++ "O" (str.++ "L" (str.++ "I" (str.++ "N" (str.++ "A" "")))))))))))))))(re.union (str.to_re (str.++ "S" (str.++ "D" "")))(re.union (str.to_re (str.++ "S" (str.++ "O" (str.++ "U" (str.++ "T" (str.++ "H" (str.++ " " (str.++ "D" (str.++ "A" (str.++ "K" (str.++ "O" (str.++ "T" (str.++ "A" "")))))))))))))(re.union (str.to_re (str.++ "T" (str.++ "N" "")))(re.union (str.to_re (str.++ "T" (str.++ "E" (str.++ "N" (str.++ "N" (str.++ "E" (str.++ "S" (str.++ "S" (str.++ "E" (str.++ "E" ""))))))))))(re.union (str.to_re (str.++ "T" (str.++ "X" "")))(re.union (str.to_re (str.++ "T" (str.++ "E" (str.++ "X" (str.++ "A" (str.++ "S" ""))))))(re.union (str.to_re (str.++ "U" (str.++ "T" "")))(re.union (str.to_re (str.++ "U" (str.++ "T" (str.++ "A" (str.++ "H" "")))))(re.union (str.to_re (str.++ "V" (str.++ "T" "")))(re.union (str.to_re (str.++ "V" (str.++ "E" (str.++ "R" (str.++ "M" (str.++ "O" (str.++ "N" (str.++ "T" ""))))))))(re.union (str.to_re (str.++ "V" (str.++ "A" "")))(re.union (str.to_re (str.++ "V" (str.++ "I" (str.++ "R" (str.++ "G" (str.++ "I" (str.++ "N" (str.++ "I" (str.++ "A" "")))))))))(re.union (str.to_re (str.++ "W" (str.++ "A" "")))(re.union (str.to_re (str.++ "W" (str.++ "A" (str.++ "S" (str.++ "H" (str.++ "I" (str.++ "N" (str.++ "G" (str.++ "T" (str.++ "O" (str.++ "N" "")))))))))))(re.union (str.to_re (str.++ "D" (str.++ "C" "")))(re.union (str.to_re (str.++ "D" (str.++ "I" (str.++ "S" (str.++ "T" (str.++ "R" (str.++ "I" (str.++ "C" (str.++ "T" (str.++ " " (str.++ "O" (str.++ "F" (str.++ " " (str.++ "C" (str.++ "O" (str.++ "L" (str.++ "U" (str.++ "M" (str.++ "B" (str.++ "I" (str.++ "A" "")))))))))))))))))))))(re.union (str.to_re (str.++ "W" (str.++ "A" (str.++ "S" (str.++ "H" (str.++ "I" (str.++ "N" (str.++ "G" (str.++ "T" (str.++ "O" (str.++ "N" (str.++ " " (str.++ "D" (str.++ "C" "")))))))))))))) ((_ re.loop 2 2) (re.union (re.range "A" "Z") (re.range "a" "z"))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))(re.++ (re.* (re.range "," ","))(re.++ (re.* (re.range "\u{09}" "\u{09}"))(re.++ (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))) (re.union ((_ re.loop 5 10) (re.union (re.range " " " ")(re.union (re.range "-" "-") (re.range "0" "9")))) (re.* (re.range " " " ")))))))))))))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "\u{5c}" (str.++ "2" (str.++ "\u{a5}" (str.++ "j" (str.++ "$" ""))))))

(define-fun Witness2 () String (str.++ "\u{a4}" (str.++ " " (str.++ "\u{5c}" (str.++ "w" (str.++ "'" (str.++ "\u{1d}" (str.++ "\u{8c}" (str.++ "\u{11}" "")))))))))

(assert (= regexA (re.++ (re.range "\u{5c}" "\u{5c}") (re.union (re.range "2" "2")(re.union (re.range "\u{5c}" "\u{5c}")(re.union (re.range "w" "w")(re.union (re.range "{" "{") (re.range "}" "}"))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "H" (str.++ "[" (str.++ "\u{a1}" (str.++ "\u{ae}" (str.++ "t" (str.++ "<" (str.++ "b" (str.++ ">" (str.++ "X" (str.++ "<" (str.++ "/" (str.++ "b" (str.++ ">" (str.++ "\u{1c}" (str.++ "^" (str.++ "<" "")))))))))))))))))

(define-fun Witness2 () String (str.++ "<" (str.++ "b" (str.++ ">" (str.++ "\u{87}" (str.++ "\u{ea}" (str.++ "<" (str.++ "/" (str.++ "b" (str.++ ">" (str.++ "\u{d3}" (str.++ "\u{be}" (str.++ "8" "")))))))))))))

(assert (= regexA (re.++ (str.to_re (str.++ "<" (str.++ "b" (str.++ ">" ""))))(re.++ (re.+ (re.union (re.range "\u{00}" ";")(re.union (re.range "=" "=") (re.range "?" "\u{ff}")))) (str.to_re (str.++ "<" (str.++ "/" (str.++ "b" (str.++ ">" "")))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "\u{a9}" (str.++ "U" (str.++ "C" ""))))

(define-fun Witness2 () String (str.++ "\u{a9}" (str.++ "\u{14}" "")))

(assert (= regexA (re.range "\u{a9}" "\u{a9}")))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "\u{c1}" (str.++ "'" (str.++ "\u{22}" (str.++ "\u{ac}" (str.++ "\u{22}" (str.++ "\u{8c}" "")))))))

(define-fun Witness2 () String (str.++ "y" (str.++ "w" (str.++ "H" (str.++ "." (str.++ "P" (str.++ "I" (str.++ "\u{f9}" (str.++ "\u{a3}" (str.++ "\u{22}" (str.++ "\u{5c}" (str.++ "\u{22}" (str.++ "\u{22}" "")))))))))))))

(assert (= regexA (re.++ (re.range "\u{22}" "\u{22}")(re.++ (re.+ (re.union (str.to_re (str.++ "\u{5c}" (str.++ "\u{22}" ""))) (re.union (re.range "\u{00}" "!")(re.union (re.range "#" "'")(re.union (re.range "*" "[") (re.range "]" "\u{ff}")))))) (re.range "\u{22}" "\u{22}")))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "/" (str.++ "1" (str.++ "\u{07}" (str.++ "\u{b0}" (str.++ "@" (str.++ "\u{f7}" (str.++ "g" (str.++ "r" (str.++ "a" (str.++ "\u{1f}" "")))))))))))

(define-fun Witness2 () String (str.++ "v" (str.++ "{" (str.++ "\u{d7}" (str.++ "i" (str.++ "@" (str.++ "g" (str.++ "\u{13}" (str.++ "r" (str.++ "@" (str.++ "\u{d7}" (str.++ "\u{15}" (str.++ "a" "")))))))))))))

(assert (= regexA (re.union (re.++ (re.union (re.range "/" "/")(re.union (re.range "\u{5c}" "\u{5c}") (re.range "v" "v")))(re.++ (re.* (re.union (re.range "\u{00}" "/")(re.union (re.range ":" "@")(re.union (re.range "[" "^")(re.union (re.range "`" "`")(re.union (re.range "{" "\u{a9}")(re.union (re.range "\u{ab}" "\u{b4}")(re.union (re.range "\u{b6}" "\u{b9}")(re.union (re.range "\u{bb}" "\u{bf}")(re.union (re.range "\u{d7}" "\u{d7}") (re.range "\u{f7}" "\u{f7}")))))))))))(re.++ (re.union (re.range "1" "1") (re.range "i" "i"))(re.++ (re.* (re.union (re.range "\u{00}" "/")(re.union (re.range ":" "@")(re.union (re.range "[" "^")(re.union (re.range "`" "`")(re.union (re.range "{" "\u{a9}")(re.union (re.range "\u{ab}" "\u{b4}")(re.union (re.range "\u{b6}" "\u{b9}")(re.union (re.range "\u{bb}" "\u{bf}")(re.union (re.range "\u{d7}" "\u{d7}") (re.range "\u{f7}" "\u{f7}")))))))))))(re.++ (re.union (re.range "@" "@") (re.range "a" "a"))(re.++ (re.* (re.union (re.range "\u{00}" "/")(re.union (re.range ":" "@")(re.union (re.range "[" "^")(re.union (re.range "`" "`")(re.union (re.range "{" "\u{a9}")(re.union (re.range "\u{ab}" "\u{b4}")(re.union (re.range "\u{b6}" "\u{b9}")(re.union (re.range "\u{bb}" "\u{bf}")(re.union (re.range "\u{d7}" "\u{d7}") (re.range "\u{f7}" "\u{f7}")))))))))))(re.++ (re.range "g" "g")(re.++ (re.* (re.union (re.range "\u{00}" "/")(re.union (re.range ":" "@")(re.union (re.range "[" "^")(re.union (re.range "`" "`")(re.union (re.range "{" "\u{a9}")(re.union (re.range "\u{ab}" "\u{b4}")(re.union (re.range "\u{b6}" "\u{b9}")(re.union (re.range "\u{bb}" "\u{bf}")(re.union (re.range "\u{d7}" "\u{d7}") (re.range "\u{f7}" "\u{f7}")))))))))))(re.++ (re.range "r" "r")(re.++ (re.* (re.union (re.range "\u{00}" "/")(re.union (re.range ":" "@")(re.union (re.range "[" "^")(re.union (re.range "`" "`")(re.union (re.range "{" "\u{a9}")(re.union (re.range "\u{ab}" "\u{b4}")(re.union (re.range "\u{b6}" "\u{b9}")(re.union (re.range "\u{bb}" "\u{bf}")(re.union (re.range "\u{d7}" "\u{d7}") (re.range "\u{f7}" "\u{f7}"))))))))))) (re.union (re.range "@" "@") (re.range "a" "a")))))))))))) (re.++ (re.range "v" "v")(re.++ (re.* (re.union (re.range "\u{00}" "/")(re.union (re.range ":" "@")(re.union (re.range "[" "^")(re.union (re.range "`" "`")(re.union (re.range "{" "\u{a9}")(re.union (re.range "\u{ab}" "\u{b4}")(re.union (re.range "\u{b6}" "\u{b9}")(re.union (re.range "\u{bb}" "\u{bf}")(re.union (re.range "\u{d7}" "\u{d7}") (re.range "\u{f7}" "\u{f7}")))))))))))(re.++ (re.union (re.range "1" "1") (re.range "i" "i"))(re.++ (re.* (re.union (re.range "\u{00}" "/")(re.union (re.range ":" "@")(re.union (re.range "[" "^")(re.union (re.range "`" "`")(re.union (re.range "{" "\u{a9}")(re.union (re.range "\u{ab}" "\u{b4}")(re.union (re.range "\u{b6}" "\u{b9}")(re.union (re.range "\u{bb}" "\u{bf}")(re.union (re.range "\u{d7}" "\u{d7}") (re.range "\u{f7}" "\u{f7}")))))))))))(re.++ (re.range "c" "c")(re.++ (re.* (re.union (re.range "\u{00}" "/")(re.union (re.range ":" "@")(re.union (re.range "[" "^")(re.union (re.range "`" "`")(re.union (re.range "{" "\u{a9}")(re.union (re.range "\u{ab}" "\u{b4}")(re.union (re.range "\u{b6}" "\u{b9}")(re.union (re.range "\u{bb}" "\u{bf}")(re.union (re.range "\u{d7}" "\u{d7}") (re.range "\u{f7}" "\u{f7}")))))))))))(re.++ (re.union (re.range "0" "0") (re.range "o" "o"))(re.++ (re.* (re.union (re.range "\u{00}" "/")(re.union (re.range ":" "@")(re.union (re.range "[" "^")(re.union (re.range "`" "`")(re.union (re.range "{" "\u{a9}")(re.union (re.range "\u{ab}" "\u{b4}")(re.union (re.range "\u{b6}" "\u{b9}")(re.union (re.range "\u{bb}" "\u{bf}")(re.union (re.range "\u{d7}" "\u{d7}") (re.range "\u{f7}" "\u{f7}")))))))))))(re.++ (re.range "d" "d")(re.++ (re.* (re.union (re.range "\u{00}" "/")(re.union (re.range ":" "@")(re.union (re.range "[" "^")(re.union (re.range "`" "`")(re.union (re.range "{" "\u{a9}")(re.union (re.range "\u{ab}" "\u{b4}")(re.union (re.range "\u{b6}" "\u{b9}")(re.union (re.range "\u{bb}" "\u{bf}")(re.union (re.range "\u{d7}" "\u{d7}") (re.range "\u{f7}" "\u{f7}")))))))))))(re.++ (re.union (re.range "1" "1") (re.range "i" "i"))(re.++ (re.* (re.union (re.range "\u{00}" "/")(re.union (re.range ":" "@")(re.union (re.range "[" "^")(re.union (re.range "`" "`")(re.union (re.range "{" "\u{a9}")(re.union (re.range "\u{ab}" "\u{b4}")(re.union (re.range "\u{b6}" "\u{b9}")(re.union (re.range "\u{bb}" "\u{bf}")(re.union (re.range "\u{d7}" "\u{d7}") (re.range "\u{f7}" "\u{f7}"))))))))))) (re.range "n" "n"))))))))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "\u{0c}" (str.++ "'" (str.++ "d" (str.++ ")" "")))))

(define-fun Witness2 () String (str.++ "'" (str.++ "r" (str.++ "<" ""))))

(assert (= regexA (re.++ (re.range "'" "'")(re.++ (re.union (re.range "d" "d")(re.union (re.range "l" "m") (re.range "r" "t"))) (re.union (re.range " " "!")(re.union (re.range ")" ")")(re.union (re.range "," ",")(re.union (re.range "." "/")(re.union (re.range "<" "<")(re.union (re.range "?" "?") (re.range "\u{5c}" "\u{5c}")))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "6" (str.++ "2" (str.++ "*" (str.++ "9" (str.++ "8" (str.++ "8" (str.++ "\u{8b}" (str.++ "7" (str.++ "5" (str.++ "3" (str.++ "/" (str.++ "8" (str.++ "8" (str.++ "9" (str.++ "8" (str.++ "-" (str.++ "4" (str.++ "6" "")))))))))))))))))))

(define-fun Witness2 () String (str.++ "\u{ad}" (str.++ "\u{ce}" (str.++ "Z" (str.++ "o" (str.++ "8" (str.++ "9" (str.++ "7" (str.++ "5" (str.++ "6" (str.++ "," (str.++ "6" (str.++ "9" (str.++ "9" (str.++ "/" (str.++ "3" (str.++ "7" (str.++ "2" (str.++ "9" (str.++ "6" (str.++ "4" (str.++ "7" (str.++ "\u{a7}" "")))))))))))))))))))))))

(assert (= regexA (re.++ ((_ re.loop 2 2) (re.range "0" "9"))(re.++ (re.opt (re.union (re.range "\u{00}" "\u{09}") (re.range "\u{0b}" "\u{ff}")))(re.++ ((_ re.loop 3 3) (re.range "0" "9"))(re.++ (re.opt (re.union (re.range "\u{00}" "\u{09}") (re.range "\u{0b}" "\u{ff}")))(re.++ ((_ re.loop 3 3) (re.range "0" "9"))(re.++ (re.opt (re.range "/" "/"))(re.++ ((_ re.loop 4 4) (re.range "0" "9"))(re.++ (re.opt (re.range "-" "-")) ((_ re.loop 2 2) (re.range "0" "9"))))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "\u{cd}" (str.++ "3" (str.++ "7" (str.++ "5" (str.++ "8" (str.++ "-" (str.++ "\u{85}" (str.++ "4" (str.++ "9" (str.++ "3" (str.++ "1" (str.++ "4" (str.++ "9" (str.++ "0" (str.++ "0" (str.++ "8" (str.++ "1" (str.++ "4" "")))))))))))))))))))

(define-fun Witness2 () String (str.++ "3" (str.++ "," (str.++ "8" (str.++ "8" (str.++ "-" (str.++ "9" (str.++ "8" (str.++ "9" (str.++ "9" (str.++ "8" (str.++ "0" (str.++ "-" (str.++ "8" (str.++ "8" (str.++ "1" (str.++ "8" (str.++ "8" ""))))))))))))))))))

(assert (= regexA (re.union (re.++ (str.to_re "")(re.++ (re.union (re.++ (str.to_re (str.++ "6" (str.++ "7" ""))) ((_ re.loop 2 2) (re.range "0" "9")))(re.union (re.++ (re.range "4" "4") ((_ re.loop 3 3) (re.range "0" "9")))(re.union (re.++ (re.range "5" "5")(re.++ (re.range "1" "5") ((_ re.loop 2 2) (re.range "0" "9")))) (str.to_re (str.++ "6" (str.++ "0" (str.++ "1" (str.++ "1" "")))))))) ((_ re.loop 3 3) (re.++ (re.opt (re.range "-" "-"))(re.++ (re.opt (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))) ((_ re.loop 4 4) (re.range "0" "9"))))))) (re.++ (re.++ (re.range "3" "3") (re.union (re.range "," ",")(re.union (re.range "4" "4") (re.range "7" "7"))))(re.++ ((_ re.loop 2 2) (re.range "0" "9"))(re.++ (re.opt (re.range "-" "-"))(re.++ (re.opt (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ ((_ re.loop 6 6) (re.range "0" "9"))(re.++ (re.opt (re.range "-" "-"))(re.++ (re.opt (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ ((_ re.loop 5 5) (re.range "0" "9")) (str.to_re ""))))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "4" (str.++ "n" (str.++ "<" (str.++ "i" (str.++ "m" (str.++ "g" (str.++ "s" (str.++ "r" (str.++ "c" (str.++ "=" (str.++ "H" (str.++ "\u{81}" (str.++ "\u{22}" (str.++ "a" (str.++ "l" (str.++ "t" (str.++ "=" (str.++ "q" (str.++ "P" (str.++ "\u{ed}" (str.++ "\u{22}" (str.++ ">" (str.++ "%" (str.++ "G" "")))))))))))))))))))))))))

(define-fun Witness2 () String (str.++ "<" (str.++ "i" (str.++ "m" (str.++ "g" (str.++ "s" (str.++ "r" (str.++ "c" (str.++ "=" (str.++ "\u{22}" (str.++ "\u{85}" (str.++ "\u{9f}" (str.++ "W" (str.++ "\u{22}" (str.++ "\u{8b}" (str.++ ">" ""))))))))))))))))

(assert (= regexA (re.++ (str.to_re (str.++ "<" (str.++ "i" (str.++ "m" (str.++ "g" "")))))(re.++ (re.* (re.union (re.range "\u{00}" "=") (re.range "?" "\u{ff}")))(re.++ (str.to_re (str.++ "s" (str.++ "r" (str.++ "c" (str.++ "=" "")))))(re.++ (re.opt (re.range "\u{22}" "\u{22}"))(re.++ (re.* (re.union (re.range "\u{00}" "!") (re.range "#" "\u{ff}")))(re.++ (re.opt (re.range "\u{22}" "\u{22}"))(re.++ (re.opt (re.++ (re.* (re.union (re.range "\u{00}" "=") (re.range "?" "\u{ff}")))(re.++ (str.to_re (str.++ "a" (str.++ "l" (str.++ "t" (str.++ "=" "")))))(re.++ (re.opt (re.range "\u{22}" "\u{22}"))(re.++ (re.* (re.union (re.range "\u{00}" "!") (re.range "#" "\u{ff}"))) (re.opt (re.range "\u{22}" "\u{22}")))))))(re.++ (re.* (re.union (re.range "\u{00}" "=") (re.range "?" "\u{ff}"))) (re.range ">" ">")))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "<" (str.++ "/" (str.++ "x" (str.++ "6" (str.++ "\u{8b}" (str.++ "^" (str.++ "J" (str.++ "\u{8e}" (str.++ "%" (str.++ "," (str.++ ">" ""))))))))))))

(define-fun Witness2 () String (str.++ "<" (str.++ "/" (str.++ "m" (str.++ ">" (str.++ "\u{7f}" (str.++ "r" (str.++ "\u{84}" ""))))))))

(assert (= regexA (re.++ (re.range "<" "<")(re.++ (re.opt (re.range "/" "/"))(re.++ (re.range "a" "z")(re.++ (re.* (re.union (re.range "0" "9") (re.range "a" "z")))(re.++ (re.* (re.union (re.range "\u{00}" ";")(re.union (re.range "=" "=") (re.range "?" "\u{ff}")))) (re.range ">" ">"))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "0" (str.++ "2" (str.++ "6" (str.++ "9" (str.++ "4" (str.++ "9" (str.++ "9" (str.++ " " (str.++ "8" (str.++ "9" (str.++ "8" (str.++ "5" "")))))))))))))

(define-fun Witness2 () String (str.++ "\u{be}" (str.++ "d" (str.++ "\u{7f}" (str.++ "0" (str.++ "5" (str.++ "8" (str.++ "5" (str.++ "\u{a0}" (str.++ "8" (str.++ "7" (str.++ "9" (str.++ "9" (str.++ "0" (str.++ "8" (str.++ "7" ""))))))))))))))))

(assert (= regexA (re.union (re.++ (str.to_re "") (re.++ (str.to_re (str.++ "0" (str.++ "2" "")))(re.++ (re.range "0" "9")(re.++ (re.opt (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ ((_ re.loop 4 4) (re.range "0" "9"))(re.++ (re.opt (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))) ((_ re.loop 4 4) (re.range "0" "9"))))))))(re.union (re.++ (re.union (str.to_re (str.++ "0" (str.++ "1" ""))) (str.to_re (str.++ "0" (str.++ "5" ""))))(re.++ ((_ re.loop 2 2) (re.range "0" "9"))(re.++ (re.opt (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ ((_ re.loop 3 3) (re.range "0" "9"))(re.++ (re.opt (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))) ((_ re.loop 4 4) (re.range "0" "9")))))))(re.union (re.++ (re.union (str.to_re (str.++ "0" (str.++ "1" ""))) (str.to_re (str.++ "0" (str.++ "5" ""))))(re.++ ((_ re.loop 3 3) (re.range "0" "9"))(re.++ (re.opt (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))) ((_ re.loop 5 6) (re.range "0" "9"))))) (re.++ (re.++ (re.union (str.to_re (str.++ "0" (str.++ "1" ""))) (str.to_re (str.++ "0" (str.++ "5" ""))))(re.++ ((_ re.loop 4 4) (re.range "0" "9"))(re.++ (re.opt (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))) ((_ re.loop 4 5) (re.range "0" "9"))))) (str.to_re "")))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "b" (str.++ "<" (str.++ "\u{ba}" (str.++ "L" (str.++ "\u{84}" (str.++ ">" "")))))))

(define-fun Witness2 () String (str.++ "<" (str.++ "\u{00}" (str.++ "A" (str.++ ":" (str.++ "\u{9a}" (str.++ "L" (str.++ "\u{09}" (str.++ "\u{bb}" (str.++ "\u{9e}" (str.++ ">" "")))))))))))

(assert (= regexA (re.++ (re.range "<" "<")(re.++ (re.* (re.union (re.range "\u{00}" "\u{08}")(re.union (re.range "\u{0e}" "\u{1f}")(re.union (re.range "!" ";")(re.union (re.range "=" "=")(re.union (re.range "?" "\u{84}")(re.union (re.range "\u{86}" "\u{9f}") (re.range "\u{a1}" "\u{ff}"))))))))(re.++ (re.opt (re.++ (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))) (re.* (re.union (re.range "\u{00}" ";")(re.union (re.range "=" "=") (re.range "?" "\u{ff}")))))) (re.range ">" ">"))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "." (str.++ "m" (str.++ "s" (str.++ "P" (str.++ "X" ""))))))

(define-fun Witness2 () String (str.++ "\u{b6}" (str.++ "9" (str.++ "." (str.++ "h" (str.++ "t" (str.++ "M" (str.++ "\u{c8}" (str.++ "\u{9b}" (str.++ "\u{d7}" (str.++ "\u{0f}" "")))))))))))

(assert (= regexA (re.++ (re.* (re.union (re.range "1" "9")(re.union (re.range "A" "Z") (re.range "a" "z"))))(re.++ (re.range "." ".") (re.union (re.++ (re.union (re.range "A" "A") (re.range "a" "a"))(re.++ (re.union (re.range "S" "S") (re.range "s" "s"))(re.++ (re.union (re.range "P" "P") (re.range "p" "p")) (re.union (re.range "X" "X") (re.range "x" "x")))))(re.union (re.++ (re.union (re.range "H" "H") (re.range "h" "h"))(re.++ (re.union (re.range "T" "T") (re.range "t" "t"))(re.++ (re.union (re.range "M" "M") (re.range "m" "m")) (re.union (re.range "L" "L") (re.range "l" "l")))))(re.union (re.++ (re.union (re.range "H" "H") (re.range "h" "h"))(re.++ (re.union (re.range "T" "T") (re.range "t" "t")) (re.union (re.range "M" "M") (re.range "m" "m"))))(re.union (re.++ (re.union (re.range "A" "A") (re.range "a" "a"))(re.++ (re.union (re.range "S" "S") (re.range "s" "s")) (re.union (re.range "P" "P") (re.range "p" "p"))))(re.union (re.++ (re.union (re.range "T" "T") (re.range "t" "t"))(re.++ (re.union (re.range "X" "X") (re.range "x" "x")) (re.union (re.range "T" "T") (re.range "x" "x"))))(re.union (re.++ (re.union (re.range "M" "M") (re.range "m" "m"))(re.++ (re.union (re.range "S" "S") (re.range "s" "s"))(re.++ (re.union (re.range "P" "P") (re.range "p" "p")) (re.union (re.range "X" "X") (re.range "x" "x")))))(re.union (re.++ (re.union (re.range "G" "G") (re.range "g" "g"))(re.++ (re.union (re.range "I" "I") (re.range "i" "i")) (re.union (re.range "F" "F") (re.range "f" "f")))) (re.++ (re.union (re.range "D" "D") (re.range "d" "d"))(re.++ (re.union (re.range "O" "O") (re.range "o" "o")) (re.union (re.range "C" "C") (re.range "c" "c")))))))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "\u{fc}" (str.++ "\u{f4}" (str.++ "1" (str.++ "0" (str.++ "4" (str.++ "8" (str.++ "5" (str.++ "4" (str.++ "9" ""))))))))))

(define-fun Witness2 () String (str.++ "1" (str.++ "0" (str.++ "4" (str.++ "8" (str.++ "5" (str.++ "6" (str.++ "0" ""))))))))

(assert (= regexA (re.union (str.to_re (str.++ " " (str.++ " " (str.++ " " (str.++ " " (str.++ " " (str.++ " " (str.++ " " "")))))))) (re.++ (str.to_re (str.++ "1" (str.++ "0" (str.++ "4" (str.++ "8" (str.++ "5" ""))))))(re.++ (re.range "0" "6") (re.range "0" "9"))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "1" (str.++ "2" (str.++ " " (str.++ "1" (str.++ "2" (str.++ "/" (str.++ "2" (str.++ "3" (str.++ "9" (str.++ "6" (str.++ "/" (str.++ "T" (str.++ "{" ""))))))))))))))

(define-fun Witness2 () String (str.++ "3" (str.++ "1" (str.++ " " (str.++ "1" (str.++ "1" (str.++ "-" (str.++ "2" (str.++ "1" (str.++ "7" (str.++ "3" "")))))))))))

(assert (= regexA (re.++ (re.union (re.++ (re.opt (re.range "0" "0")) (re.range "1" "9"))(re.union (re.++ (re.range "1" "2") (re.range "0" "9")) (re.++ (re.range "3" "3") (re.range "0" "1"))))(re.++ (re.union (re.range " " " ")(re.union (re.range "-" "-") (re.range "/" "/")))(re.++ (re.union (re.++ (re.opt (re.range "0" "0")) (re.range "1" "9")) (re.++ (re.range "1" "1") (re.range "1" "2")))(re.++ (re.union (re.range " " " ")(re.union (re.range "-" "-") (re.range "/" "/"))) (re.union (re.++ (str.to_re (str.++ "1" (str.++ "9" ""))) ((_ re.loop 2 2) (re.range "0" "9"))) (re.++ (re.range "2" "2")(re.++ (re.range "0" "9") ((_ re.loop 2 2) (re.range "0" "9")))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "f" (str.++ "o" (str.++ "o" (str.++ "\u{80}" (str.++ "}" (str.++ "\u{98}" (str.++ "\u{9c}" (str.++ "\u{f0}" "")))))))))

(define-fun Witness2 () String (str.++ "\u{fc}" (str.++ "\u{1c}" (str.++ "f" (str.++ "o" (str.++ "o" (str.++ "\u{06}" "")))))))

(assert (= regexA (str.to_re (str.++ "f" (str.++ "o" (str.++ "o" ""))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "\u{07}" (str.++ "'" (str.++ "'" (str.++ "'" (str.++ "'" (str.++ "'" (str.++ "'" (str.++ "'" (str.++ "\u{1c}" (str.++ "\u{ba}" (str.++ "L" (str.++ "\u{ef}" (str.++ "'" (str.++ "'" (str.++ "'" (str.++ "'" (str.++ "'" (str.++ "a" "")))))))))))))))))))

(define-fun Witness2 () String (str.++ "'" (str.++ "'" (str.++ "'" (str.++ "'" (str.++ "'" (str.++ "6" (str.++ "'" (str.++ "'" (str.++ "'" (str.++ "'" (str.++ "'" (str.++ "\u{91}" (str.++ "<" ""))))))))))))))

(assert (= regexA (re.++ (re.range "'" "'")(re.++ (re.* ((_ re.loop 2 2) (re.range "'" "'")))(re.++ (re.* (re.union (re.range "\u{00}" "\u{09}")(re.union (re.range "\u{0b}" "\u{0c}")(re.union (re.range "\u{0e}" "&") (re.range "(" "\u{ff}")))))(re.++ (re.* ((_ re.loop 2 2) (re.range "'" "'")))(re.++ (re.* (re.union (re.range "\u{00}" "\u{09}")(re.union (re.range "\u{0b}" "\u{0c}")(re.union (re.range "\u{0e}" "&") (re.range "(" "\u{ff}")))))(re.++ (re.* ((_ re.loop 2 2) (re.range "'" "'"))) (re.range "'" "'")))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "2" (str.++ "9" (str.++ "." (str.++ "0" (str.++ "2" (str.++ "." (str.++ "9" (str.++ "6" (str.++ "0" (str.++ "0" "")))))))))))

(define-fun Witness2 () String (str.++ "2" (str.++ "9" (str.++ "." (str.++ "0" (str.++ "2" (str.++ "." (str.++ "8" (str.++ "2" (str.++ "3" (str.++ "6" (str.++ "\u{b1}" ""))))))))))))

(assert (= regexA (re.union (re.++ (re.union (re.++ (re.range "0" "0") (re.range "1" "9"))(re.union (re.++ (re.range "1" "2") (re.range "0" "9")) (re.++ (re.range "3" "3") (re.range "0" "1"))))(re.++ (re.range "." ".")(re.++ (re.union (re.++ (re.range "0" "0") (re.union (re.range "1" "1")(re.union (re.range "3" "3")(re.union (re.range "5" "5") (re.range "7" "8")))))(re.union (str.to_re (str.++ "1" (str.++ "0" ""))) (str.to_re (str.++ "1" (str.++ "2" "")))))(re.++ (re.range "." ".") (re.++ (re.range "1" "2")(re.++ (re.union (re.range "," ",")(re.union (re.range "0" "0") (re.range "9" "9")))(re.++ (re.range "0" "9") (re.range "0" "9"))))))))(re.union (re.++ (re.union (re.++ (re.range "0" "0") (re.range "1" "9"))(re.union (re.++ (re.range "1" "2") (re.range "0" "9")) (str.to_re (str.++ "3" (str.++ "0" "")))))(re.++ (re.range "." ".")(re.++ (re.union (re.++ (re.range "0" "0") (re.union (re.range "4" "4")(re.union (re.range "6" "6") (re.range "9" "9")))) (str.to_re (str.++ "1" (str.++ "1" ""))))(re.++ (re.range "." ".") (re.++ (re.range "1" "2")(re.++ (re.union (re.range "," ",")(re.union (re.range "0" "0") (re.range "9" "9")))(re.++ (re.range "0" "9") (re.range "0" "9"))))))))(re.union (re.++ (re.union (re.++ (re.range "0" "0") (re.range "1" "9"))(re.union (re.++ (re.range "1" "1") (re.range "0" "9")) (re.++ (re.range "2" "2") (re.range "0" "8"))))(re.++ (re.range "." ".")(re.++ (str.to_re (str.++ "0" (str.++ "2" "")))(re.++ (re.range "." ".") (re.++ (re.range "1" "2")(re.++ (re.union (re.range "," ",")(re.union (re.range "0" "0") (re.range "9" "9")))(re.++ (re.range "0" "9") (re.range "0" "9"))))))))(re.union (re.++ (str.to_re (str.++ "2" (str.++ "9" "")))(re.++ (re.range "-" "/")(re.++ (str.to_re (str.++ "0" (str.++ "2" "")))(re.++ (re.range "." ".") (re.++ (re.union (re.range "0" "0")(re.union (re.range "2" "2")(re.union (re.range "4" "4")(re.union (re.range "6" "6") (re.range "8" "8")))))(re.++ (re.union (re.range "0" "0")(re.union (re.range "4" "4") (re.range "8" "8"))) (str.to_re (str.++ "0" (str.++ "0" "")))))))))(re.union (re.++ (str.to_re (str.++ "2" (str.++ "9" "")))(re.++ (re.range "." ".")(re.++ (str.to_re (str.++ "0" (str.++ "2" "")))(re.++ (re.range "." ".") (re.++ (re.union (re.range "1" "1")(re.union (re.range "3" "3")(re.union (re.range "5" "5")(re.union (re.range "7" "7") (re.range "9" "9")))))(re.++ (re.union (re.range "2" "2") (re.range "6" "6")) (str.to_re (str.++ "0" (str.++ "0" "")))))))))(re.union (re.++ (str.to_re (str.++ "2" (str.++ "9" "")))(re.++ (re.range "." ".")(re.++ (str.to_re (str.++ "0" (str.++ "2" "")))(re.++ (re.range "." ".") (re.++ (re.range "0" "9")(re.++ (re.range "0" "9")(re.++ (re.range "0" "0") (re.union (re.range "4" "4") (re.range "8" "8")))))))))(re.union (re.++ (str.to_re (str.++ "2" (str.++ "9" "")))(re.++ (re.range "." ".")(re.++ (str.to_re (str.++ "0" (str.++ "2" "")))(re.++ (re.range "." ".") (re.++ (re.range "0" "9")(re.++ (re.range "0" "9")(re.++ (re.union (re.range "2" "2")(re.union (re.range "4" "4")(re.union (re.range "6" "6") (re.range "8" "8")))) (re.union (re.range "0" "0")(re.union (re.range "4" "4") (re.range "8" "8")))))))))) (re.++ (str.to_re (str.++ "2" (str.++ "9" "")))(re.++ (re.range "." ".")(re.++ (str.to_re (str.++ "0" (str.++ "2" "")))(re.++ (re.range "." ".") (re.++ (re.range "0" "9")(re.++ (re.range "0" "9")(re.++ (re.union (re.range "1" "1")(re.union (re.range "3" "3")(re.union (re.range "5" "5")(re.union (re.range "7" "7") (re.range "9" "9"))))) (re.union (re.range "2" "2") (re.range "6" "6"))))))))))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "\u{83}" (str.++ "\u{9a}" (str.++ "&" (str.++ "l" (str.++ "t" (str.++ ";" (str.++ "a" (str.++ "n" (str.++ "a" (str.++ "m" (str.++ "e" (str.++ "=" (str.++ "/" (str.++ "&" (str.++ "g" (str.++ "t" (str.++ ";" (str.++ "\u{02}" (str.++ "\u{86}" ""))))))))))))))))))))

(define-fun Witness2 () String (str.++ "&" (str.++ "l" (str.++ "t" (str.++ ";" (str.++ "a" (str.++ "z" (str.++ "Z" (str.++ "." (str.++ "M" (str.++ "5" (str.++ "n" (str.++ "a" (str.++ "m" (str.++ "e" (str.++ "=" (str.++ "&" (str.++ "g" (str.++ "t" (str.++ ";" (str.++ "&" (str.++ "l" (str.++ "t" (str.++ ";" (str.++ "/" (str.++ "a" (str.++ "&" (str.++ "g" (str.++ "t" (str.++ ";" (str.++ "2" (str.++ "P" (str.++ "\u{f9}" "")))))))))))))))))))))))))))))))))

(assert (= regexA (re.++ (str.to_re (str.++ "&" (str.++ "l" (str.++ "t" (str.++ ";" (str.++ "a" ""))))))(re.++ (re.* (re.union (re.range " " " ")(re.union (re.range "&" "'")(re.union (re.range "." ".")(re.union (re.range "0" ";")(re.union (re.range "=" "=")(re.union (re.range "?" "?")(re.union (re.range "A" "Z") (re.range "a" "z")))))))))(re.++ (str.to_re (str.++ "n" (str.++ "a" (str.++ "m" (str.++ "e" (str.++ "=" ""))))))(re.++ (re.* (re.union (re.range " " " ")(re.union (re.range "&" "'")(re.union (re.range "." ".")(re.union (re.range "0" ";")(re.union (re.range "=" "=")(re.union (re.range "?" "?")(re.union (re.range "A" "Z") (re.range "a" "z")))))))))(re.++ (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))) (re.union (str.to_re (str.++ "/" (str.++ "&" (str.++ "g" (str.++ "t" (str.++ ";" "")))))) (re.++ (str.to_re (str.++ "&" (str.++ "g" (str.++ "t" (str.++ ";" "")))))(re.++ (re.* (re.union (re.range " " " ")(re.union (re.range "&" "'")(re.union (re.range "." ".")(re.union (re.range "0" ";")(re.union (re.range "=" "=")(re.union (re.range "?" "?")(re.union (re.range "A" "Z") (re.range "a" "z"))))))))) (str.to_re (str.++ "&" (str.++ "l" (str.++ "t" (str.++ ";" (str.++ "/" (str.++ "a" (str.++ "&" (str.++ "g" (str.++ "t" (str.++ ";" "")))))))))))))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "e" (str.++ ":" (str.++ "r" (str.++ "9" (str.++ "J" ""))))))

(define-fun Witness2 () String (str.++ ":" (str.++ "f" (str.++ ":" (str.++ "x" (str.++ ":" (str.++ "y" "")))))))

(assert (= regexA ((_ re.loop 1 31) (re.++ (re.range ":" ":")(re.++ (re.range "a" "z") (re.* (re.union (re.range "#" "$")(re.union (re.range "1" "9")(re.union (re.range "_" "_") (re.range "a" "z"))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "K" (str.++ "*" (str.++ "<" (str.++ "a" (str.++ "h" (str.++ "r" (str.++ "e" (str.++ "f" (str.++ "=" (str.++ "\u{22}" (str.++ "\u{aa}" (str.++ "T" (str.++ "\u{ba}" (str.++ "\u{22}" (str.++ ">" (str.++ "2" (str.++ "<" (str.++ "/" (str.++ "a" (str.++ ">" "")))))))))))))))))))))

(define-fun Witness2 () String (str.++ "<" (str.++ "a" (str.++ "h" (str.++ "r" (str.++ "e" (str.++ "f" (str.++ "=" (str.++ "'" (str.++ "." (str.++ "/" (str.++ "\u{aa}" (str.++ "." (str.++ "\u{c4}" (str.++ "u" (str.++ "\u{22}" (str.++ "h" (str.++ "r" (str.++ "e" (str.++ "f" (str.++ "=" (str.++ "\u{22}" (str.++ "8" (str.++ "3" (str.++ "Q" (str.++ "_" (str.++ "p" (str.++ "." (str.++ "\u{aa}" (str.++ "." (str.++ "8" (str.++ "/" (str.++ "\u{22}" (str.++ "h" (str.++ "r" (str.++ "e" (str.++ "f" (str.++ "=" (str.++ "\u{22}" (str.++ "h" (str.++ "t" (str.++ "t" (str.++ "p" (str.++ ":" (str.++ "/" (str.++ "/" (str.++ "8" (str.++ "/" (str.++ "5" (str.++ "/" (str.++ "'" (str.++ ">" (str.++ "'" (str.++ "<" (str.++ "/" (str.++ "a" (str.++ ">" "")))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(assert (= regexA (re.++ (str.to_re (str.++ "<" (str.++ "a" "")))(re.++ (re.* (re.union (re.range " " " ")(re.union (re.range "\u{22}" "\u{22}")(re.union (re.range "'" "'")(re.union (re.range "." ".")(re.union (re.range "0" ";")(re.union (re.range "=" "=")(re.union (re.range "?" "?")(re.union (re.range "A" "Z") (re.range "a" "z"))))))))))(re.++ (re.* (re.++ (str.to_re (str.++ "h" (str.++ "r" (str.++ "e" (str.++ "f" (str.++ "=" ""))))))(re.++ (re.union (re.range "\u{22}" "\u{22}") (re.range "'" "'"))(re.++ (re.opt (re.union (str.to_re (str.++ "h" (str.++ "t" (str.++ "t" (str.++ "p" (str.++ ":" (str.++ "/" (str.++ "/" ""))))))))(re.union (str.to_re (str.++ "." (str.++ "/" ""))) (re.range "/" "/"))))(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))(re.++ (re.* (re.++ (re.range "." ".") (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))))(re.++ (re.* (re.++ (re.range "/" "/")(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))) (re.opt (re.++ (re.range "." ".") (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))))))))(re.++ (re.opt (re.union (re.range "/" "/") (re.++ (re.range "?" "?")(re.++ (re.* (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))(re.++ (re.range "=" "=")(re.++ (re.* (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))) (re.* (re.++ (re.range "&" "&")(re.++ (re.* (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))(re.++ (re.range "=" "=") (re.* (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))))))))))))) (re.union (re.range "\u{22}" "\u{22}") (re.range "'" "'")))))))))) (re.++ (re.range ">" ">")(re.++ (re.* (re.union (re.range " " " ")(re.union (re.range "\u{22}" "\u{22}")(re.union (re.range "'" "'")(re.union (re.range "." ".")(re.union (re.range "0" "?")(re.union (re.range "A" "Z") (re.range "a" "z")))))))) (str.to_re (str.++ "<" (str.++ "/" (str.++ "a" (str.++ ">" ""))))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "\u{80}" (str.++ "\u{9e}" (str.++ "h" (str.++ "t" (str.++ "t" (str.++ "p" (str.++ "s" (str.++ ":" (str.++ "/" (str.++ "/" (str.++ "2" (str.++ "5" (str.++ "2" (str.++ "." (str.++ "8" (str.++ "1" (str.++ "." (str.++ "3" (str.++ "4" (str.++ "." (str.++ "1" (str.++ "7" (str.++ "0" (str.++ "1" (str.++ "P" (str.++ "1" (str.++ "." (str.++ "x" (str.++ "9" (str.++ "." (str.++ "r" (str.++ "t" (str.++ "Z" (str.++ ":" (str.++ "8" (str.++ "8" (str.++ "8" (str.++ "h" (str.++ "t" (str.++ "t" (str.++ "p" (str.++ "s" (str.++ ":" (str.++ "/" (str.++ "/" (str.++ "2" (str.++ "5" (str.++ "3" (str.++ "." (str.++ "2" (str.++ "5" (str.++ "5" (str.++ "." (str.++ "8" (str.++ "." (str.++ "2" (str.++ "5" (str.++ "3" (str.++ "4" (str.++ "." (str.++ "7" (str.++ "0" (str.++ "." (str.++ "1" (str.++ "." (str.++ "8" (str.++ "9" (str.++ "8" (str.++ "." (str.++ "1" (str.++ "9" (str.++ "7" (str.++ "." (str.++ "9" (str.++ "0" (str.++ "." (str.++ "2" (str.++ "5" (str.++ "1" (str.++ "9" (str.++ "." (str.++ "2" (str.++ "5" (str.++ "4" (str.++ "." (str.++ "3" (str.++ "." (str.++ "8" (str.++ "h" (str.++ "t" (str.++ "t" (str.++ "p" (str.++ ":" (str.++ "/" (str.++ "/" (str.++ "2" (str.++ "5" (str.++ "5" (str.++ "." (str.++ "7" (str.++ "." (str.++ "2" (str.++ "4" (str.++ "9" (str.++ "." (str.++ "2" (str.++ "5" (str.++ "4" (str.++ "Z" (str.++ "." (str.++ "-" (str.++ "-" (str.++ "." (str.++ "U" (str.++ "." (str.++ "a" (str.++ ":" (str.++ "9" (str.++ "4" (str.++ "3" (str.++ "." (str.++ "2" (str.++ "5" (str.++ "5" (str.++ "." (str.++ "2" (str.++ "5" (str.++ "4" (str.++ "." (str.++ "0" (str.++ "9" (str.++ "9" (str.++ "7" (str.++ "8" (str.++ "." (str.++ "2" (str.++ "4" (str.++ "5" (str.++ "." (str.++ "1" (str.++ "9" (str.++ "5" (str.++ "." (str.++ "8" (str.++ "8" (str.++ "/" (str.++ "P" (str.++ "~" (str.++ "a" (str.++ "%" (str.++ "/" (str.++ "?" (str.++ "-" (str.++ "5" (str.++ "_" (str.++ "-" (str.++ "-" (str.++ "=" (str.++ "%" ""))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(define-fun Witness2 () String (str.++ "h" (str.++ "t" (str.++ "t" (str.++ "p" (str.++ ":" (str.++ "/" (str.++ "/" (str.++ "0" (str.++ "8" (str.++ "9" (str.++ "." (str.++ "2" (str.++ "3" (str.++ "8" (str.++ "." (str.++ "0" (str.++ "5" (str.++ "8" (str.++ "." (str.++ "2" (str.++ "5" (str.++ "5" (str.++ "2" (str.++ "8" (str.++ "." (str.++ "2" (str.++ "5" (str.++ "3" (str.++ "." (str.++ "2" (str.++ "3" (str.++ "7" (str.++ "." (str.++ "6" (str.++ "4" (str.++ "2" (str.++ "5" (str.++ "4" (str.++ "." (str.++ "2" (str.++ "5" (str.++ "." (str.++ "2" (str.++ "5" (str.++ "4" (str.++ "." (str.++ "2" (str.++ "4" (str.++ "8" (str.++ "2" (str.++ "5" (str.++ "1" (str.++ "." (str.++ "1" (str.++ "9" (str.++ "." (str.++ "2" (str.++ "4" (str.++ "8" (str.++ "." (str.++ "2" (str.++ "3" (str.++ "9" (str.++ "2" (str.++ "4" (str.++ "4" (str.++ "." (str.++ "2" (str.++ "4" (str.++ "6" (str.++ "." (str.++ "8" (str.++ "2" (str.++ "." (str.++ "1" (str.++ "8" (str.++ ":" (str.++ "1" (str.++ "h" (str.++ "t" (str.++ "t" (str.++ "p" (str.++ "s" (str.++ ":" (str.++ "/" (str.++ "/" (str.++ "7" (str.++ "." (str.++ "7" (str.++ "." (str.++ "j" (str.++ "x" (str.++ "." (str.++ "J" (str.++ "Y" (str.++ "I" (str.++ "z" (str.++ "r" (str.++ "l" (str.++ "0" (str.++ "9" (str.++ "9" (str.++ "." (str.++ "2" (str.++ "2" (str.++ "0" (str.++ "." (str.++ "2" (str.++ "5" (str.++ "4" (str.++ "." (str.++ "3" (str.++ "9" (str.++ "9" (str.++ "." (str.++ "2" (str.++ "4" (str.++ "8" (str.++ "." (str.++ "1" (str.++ "4" (str.++ "4" (str.++ "." (str.++ "9" (str.++ "9" (str.++ "2" (str.++ "1" (str.++ "7" (str.++ "." (str.++ "2" (str.++ "5" (str.++ "3" (str.++ "." (str.++ "6" (str.++ "." (str.++ "2" (str.++ "1" (str.++ "9" (str.++ "6" (str.++ "M" (str.++ "6" (str.++ "x" (str.++ "3" (str.++ "." (str.++ "-" (str.++ "." (str.++ "K" (str.++ "m" (str.++ "Z" (str.++ "." (str.++ "i" (str.++ "I" (str.++ "/" (str.++ "-" (str.++ "/" (str.++ "/" (str.++ "." (str.++ "8" (str.++ "?" (str.++ "U" (str.++ "=" (str.++ "-" (str.++ "1" (str.++ "u" "")))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(assert (= regexA (re.++ (re.+ (re.++ (re.opt (re.++ (re.union (str.to_re (str.++ "h" (str.++ "t" (str.++ "t" (str.++ "p" ""))))) (str.to_re (str.++ "h" (str.++ "t" (str.++ "t" (str.++ "p" (str.++ "s" ""))))))) (str.to_re (str.++ ":" (str.++ "/" (str.++ "/" ""))))))(re.++ (re.+ (re.union (re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z"))))(re.++ (re.range "." ".")(re.++ (re.+ (re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z"))))) ((_ re.loop 1 2) (re.++ (re.range "." ".") (re.+ (re.union (re.range "A" "Z") (re.range "a" "z")))))))) (re.++ (re.union (re.++ (str.to_re (str.++ "2" (str.++ "5" ""))) (re.range "0" "5"))(re.union (re.++ (re.range "2" "2")(re.++ (re.range "0" "4") (re.range "0" "9")))(re.union (re.++ (re.range "0" "1") ((_ re.loop 2 2) (re.range "0" "9")))(re.union (re.++ (re.range "1" "9") (re.range "0" "9")) (re.range "1" "9")))))(re.++ (re.range "." ".")(re.++ (re.union (re.++ (str.to_re (str.++ "2" (str.++ "5" ""))) (re.range "0" "5"))(re.union (re.++ (re.range "2" "2")(re.++ (re.range "0" "4") (re.range "0" "9")))(re.union (re.++ (re.range "0" "1") ((_ re.loop 2 2) (re.range "0" "9")))(re.union (re.++ (re.range "1" "9") (re.range "0" "9")) (re.range "0" "9")))))(re.++ (re.range "." ".")(re.++ (re.union (re.++ (str.to_re (str.++ "2" (str.++ "5" ""))) (re.range "0" "5"))(re.union (re.++ (re.range "2" "2")(re.++ (re.range "0" "4") (re.range "0" "9")))(re.union (re.++ (re.range "0" "1") ((_ re.loop 2 2) (re.range "0" "9")))(re.union (re.++ (re.range "1" "9") (re.range "0" "9")) (re.range "0" "9")))))(re.++ (re.range "." ".") (re.union (re.++ (str.to_re (str.++ "2" (str.++ "5" ""))) (re.range "0" "5"))(re.union (re.++ (re.range "2" "2")(re.++ (re.range "0" "4") (re.range "0" "9")))(re.union (re.++ (re.range "0" "1") ((_ re.loop 2 2) (re.range "0" "9")))(re.union (re.++ (re.range "1" "9") (re.range "0" "9")) (re.range "0" "9"))))))))))))) (re.opt (re.++ (re.range ":" ":")(re.++ (re.range "1" "9") (re.* (re.range "0" "9"))))))))(re.++ (re.opt (re.* (re.++ (re.range "/" "/") (re.opt (re.+ (re.union (re.range "%" "%")(re.union (re.range "+" "+")(re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z") (re.range "~" "~")))))))))))))(re.++ (re.opt (re.++ (re.range "." ".") (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_") (re.range "a" "z"))))))) (re.opt (re.++ (re.range "?" "?")(re.++ (re.opt (re.++ (re.+ (re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_") (re.range "a" "z"))))))(re.++ (re.range "=" "=") (re.+ (re.union (re.range "%" "%")(re.union (re.range "+" "+")(re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z") (re.range "~" "~")))))))))))) (re.* (re.++ (re.range "&" "&") (re.opt (re.++ (re.+ (re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_") (re.range "a" "z"))))))(re.++ (re.range "=" "=") (re.+ (re.union (re.range "%" "%")(re.union (re.range "+" "+")(re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z") (re.range "~" "~"))))))))))))))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "6" (str.++ "9" (str.++ "9" (str.++ "8" (str.++ "2" (str.++ "1" (str.++ "3" (str.++ "4" (str.++ "8" (str.++ "8" (str.++ "9" (str.++ "7" (str.++ "7" (str.++ "4" "")))))))))))))))

(define-fun Witness2 () String (str.++ "\u{f0}" (str.++ "7" (str.++ "0" (str.++ "8" (str.++ "9" (str.++ "8" (str.++ "8" (str.++ "6" (str.++ "4" (str.++ "1" (str.++ "5" (str.++ "2" (str.++ "2" (str.++ "6" (str.++ "8" ""))))))))))))))))

(assert (= regexA (re.union (re.++ (str.to_re "") (re.++ ((_ re.loop 2 2) (re.range "0" "9"))(re.++ (re.union (re.range "\u{00}" "\u{09}") (re.range "\u{0b}" "\u{ff}"))(re.++ ((_ re.loop 3 3) (re.range "0" "9"))(re.++ (re.union (re.range "\u{00}" "\u{09}") (re.range "\u{0b}" "\u{ff}"))(re.++ ((_ re.loop 3 3) (re.range "0" "9"))(re.++ (re.range "/" "/")(re.++ ((_ re.loop 4 4) (re.range "0" "9"))(re.++ (re.range "-" "-") ((_ re.loop 2 2) (re.range "0" "9"))))))))))) (re.++ ((_ re.loop 14 14) (re.range "0" "9")) (str.to_re "")))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "\u{ee}" (str.++ "\u{a7}" (str.++ "h" (str.++ "t" (str.++ "t" (str.++ "p" (str.++ ":" (str.++ "/" (str.++ "/" (str.++ "/" "")))))))))))

(define-fun Witness2 () String (str.++ "\u{d2}" (str.++ "\u{b9}" (str.++ "h" (str.++ "t" (str.++ "t" (str.++ "p" (str.++ ":" (str.++ "/" (str.++ "/" (str.++ "\u{c0}" (str.++ ">" (str.++ "/" "")))))))))))))

(assert (= regexA (re.++ (str.to_re (str.++ "h" (str.++ "t" (str.++ "t" (str.++ "p" (str.++ ":" (str.++ "/" (str.++ "/" ""))))))))(re.++ (re.* (re.union (re.range "\u{00}" ".") (re.range "0" "\u{ff}"))) (re.range "/" "/")))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "l" (str.++ "#" (str.++ "." (str.++ "!" (str.++ "@" (str.++ "9" (str.++ "l" (str.++ "." (str.++ "6" (str.++ "z" (str.++ "3" (str.++ "." (str.++ "5" (str.++ "3" (str.++ "U" ""))))))))))))))))

(define-fun Witness2 () String (str.++ "\u{bf}" (str.++ "w" (str.++ "\u{04}" (str.++ "H" (str.++ "@" (str.++ "z" (str.++ "w" (str.++ "." (str.++ "9" (str.++ "h" (str.++ "z" (str.++ "." (str.++ "9" (str.++ "2" (str.++ "." (str.++ "9" (str.++ "8" (str.++ "." (str.++ "g" (str.++ "3" (str.++ "." (str.++ "8" (str.++ "j" (str.++ "." (str.++ "s" (str.++ "9" (str.++ "f" ""))))))))))))))))))))))))))))

(assert (= regexA (re.++ (re.+ (re.union (re.range "!" "!")(re.union (re.range "#" "'")(re.union (re.range "*" "+")(re.union (re.range "-" "-")(re.union (re.range "/" "9")(re.union (re.range "=" "=")(re.union (re.range "?" "?")(re.union (re.range "A" "Z") (re.range "^" "~"))))))))))(re.++ (re.* (re.++ (re.range "." ".") (re.+ (re.union (re.range "!" "!")(re.union (re.range "#" "'")(re.union (re.range "*" "+")(re.union (re.range "-" "-")(re.union (re.range "/" "9")(re.union (re.range "=" "=")(re.union (re.range "?" "?")(re.union (re.range "A" "Z") (re.range "^" "~"))))))))))))(re.++ (re.range "@" "@")(re.++ (re.union (re.range "0" "9") (re.range "a" "z"))(re.++ (re.* (re.union (re.range "-" "-")(re.union (re.range "0" "9") (re.range "a" "z"))))(re.++ (re.union (re.range "0" "9") (re.range "a" "z")) (re.+ (re.++ (re.range "." ".")(re.++ (re.union (re.range "0" "9") (re.range "a" "z"))(re.++ (re.* (re.union (re.range "-" "-")(re.union (re.range "0" "9") (re.range "a" "z")))) (re.union (re.range "0" "9") (re.range "a" "z"))))))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "N" (str.++ "O" (str.++ "V" (str.++ "E" (str.++ "M" (str.++ "B" (str.++ "E" (str.++ "R" (str.++ "J" (str.++ "U" (str.++ "N" (str.++ "E" (str.++ "M" (str.++ "A" (str.++ "Y" (str.++ "D" (str.++ "E" (str.++ "C" (str.++ "E" (str.++ "M" (str.++ "B" (str.++ "E" (str.++ "R" (str.++ "T" (str.++ "O" (str.++ "A" (str.++ "U" (str.++ "G" (str.++ "U" (str.++ "S" (str.++ "T" (str.++ ":" "")))))))))))))))))))))))))))))))))

(define-fun Witness2 () String (str.++ "/" (str.++ "/" (str.++ "O" (str.++ "C" (str.++ "T" (str.++ "O" (str.++ "B" (str.++ "E" (str.++ "R" (str.++ "M" (str.++ "A" (str.++ "Y" (str.++ "M" (str.++ "A" (str.++ "R" (str.++ "C" (str.++ "H" (str.++ "J" (str.++ "U" (str.++ "L" (str.++ "Y" (str.++ "F" (str.++ "E" (str.++ "B" (str.++ "R" (str.++ "U" (str.++ "A" (str.++ "R" (str.++ "Y" (str.++ "A" (str.++ "U" (str.++ "G" (str.++ "U" (str.++ "S" (str.++ "T" (str.++ " " (str.++ "O" (str.++ "C" (str.++ "T" (str.++ "O" (str.++ "B" (str.++ "E" (str.++ "R" (str.++ "A" (str.++ "U" (str.++ "G" (str.++ "U" (str.++ "S" (str.++ "T" (str.++ "F" (str.++ "E" (str.++ "B" (str.++ "R" (str.++ "U" (str.++ "A" (str.++ "R" (str.++ "Y" (str.++ "F" (str.++ "E" (str.++ "B" (str.++ "R" (str.++ "U" (str.++ "A" (str.++ "R" (str.++ "Y" (str.++ "-" (str.++ "D" (str.++ "E" (str.++ "C" (str.++ "E" (str.++ "M" (str.++ "B" (str.++ "E" (str.++ "R" (str.++ "4" (str.++ "S" (str.++ "E" (str.++ "P" (str.++ "T" (str.++ "E" (str.++ "M" (str.++ "B" (str.++ "E" (str.++ "R" (str.++ "J" (str.++ "U" (str.++ "N" (str.++ "E" (str.++ "J" (str.++ "U" (str.++ "N" (str.++ "E" (str.++ "F" (str.++ "E" (str.++ "B" (str.++ "R" (str.++ "U" (str.++ "A" (str.++ "R" (str.++ "Y" (str.++ "S" (str.++ "E" (str.++ "P" (str.++ "T" (str.++ "E" (str.++ "M" (str.++ "B" (str.++ "E" (str.++ "R" (str.++ "0" (str.++ "M" (str.++ "A" (str.++ "R" (str.++ "C" (str.++ "H" (str.++ " " (str.++ "M" (str.++ "A" (str.++ "Y" (str.++ "J" (str.++ "U" (str.++ "N" (str.++ "E" (str.++ "D" (str.++ "E" (str.++ "C" (str.++ "E" (str.++ "M" (str.++ "B" (str.++ "E" (str.++ "R" (str.++ "S" (str.++ "E" (str.++ "P" (str.++ "T" (str.++ "E" (str.++ "M" (str.++ "B" (str.++ "E" (str.++ "R" (str.++ "S" (str.++ "E" (str.++ "P" (str.++ "T" (str.++ "E" (str.++ "M" (str.++ "B" (str.++ "E" (str.++ "R" (str.++ "A" (str.++ "U" (str.++ "G" (str.++ "U" (str.++ "S" (str.++ "T" (str.++ "A" (str.++ "P" (str.++ "R" (str.++ "I" (str.++ "L" (str.++ "M" (str.++ "A" (str.++ "R" (str.++ "C" (str.++ "H" (str.++ "J" (str.++ "U" (str.++ "L" (str.++ "Y" (str.++ "A" (str.++ "P" (str.++ "R" (str.++ "I" (str.++ "L" (str.++ "M" (str.++ "A" (str.++ "R" (str.++ "C" (str.++ "H" (str.++ ":" (str.++ ":" (str.++ ";" (str.++ "\u{8e}" ""))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.+ (re.union (str.to_re (str.++ "J" (str.++ "A" (str.++ "N" (str.++ "U" (str.++ "A" (str.++ "R" (str.++ "Y" ""))))))))(re.union (str.to_re (str.++ "F" (str.++ "E" (str.++ "B" (str.++ "R" (str.++ "U" (str.++ "A" (str.++ "R" (str.++ "Y" "")))))))))(re.union (str.to_re (str.++ "M" (str.++ "A" (str.++ "R" (str.++ "C" (str.++ "H" ""))))))(re.union (str.to_re (str.++ "A" (str.++ "P" (str.++ "R" (str.++ "I" (str.++ "L" ""))))))(re.union (str.to_re (str.++ "M" (str.++ "A" (str.++ "Y" ""))))(re.union (str.to_re (str.++ "J" (str.++ "U" (str.++ "N" (str.++ "E" "")))))(re.union (str.to_re (str.++ "J" (str.++ "U" (str.++ "L" (str.++ "Y" "")))))(re.union (str.to_re (str.++ "A" (str.++ "U" (str.++ "G" (str.++ "U" (str.++ "S" (str.++ "T" "")))))))(re.union (str.to_re (str.++ "S" (str.++ "E" (str.++ "P" (str.++ "T" (str.++ "E" (str.++ "M" (str.++ "B" (str.++ "E" (str.++ "R" ""))))))))))(re.union (str.to_re (str.++ "O" (str.++ "C" (str.++ "T" (str.++ "O" (str.++ "B" (str.++ "E" (str.++ "R" ""))))))))(re.union (str.to_re (str.++ "N" (str.++ "O" (str.++ "V" (str.++ "E" (str.++ "M" (str.++ "B" (str.++ "E" (str.++ "R" "")))))))))(re.union (str.to_re (str.++ "D" (str.++ "E" (str.++ "C" (str.++ "E" (str.++ "M" (str.++ "B" (str.++ "E" (str.++ "R" ""))))))))) (re.union (re.range " " " ")(re.union (re.range "," ",") (re.range "/" "9"))))))))))))))))(re.++ (re.opt (re.union (re.union (re.range "-" "-")(re.union (re.range ":" ":") (re.range "\u{ff}" "\u{ff}"))) (str.to_re (str.++ "T" (str.++ "O" "")))))(re.++ (re.+ (re.+ (re.union (str.to_re (str.++ "J" (str.++ "A" (str.++ "N" (str.++ "U" (str.++ "A" (str.++ "R" (str.++ "Y" ""))))))))(re.union (str.to_re (str.++ "F" (str.++ "E" (str.++ "B" (str.++ "R" (str.++ "U" (str.++ "A" (str.++ "R" (str.++ "Y" "")))))))))(re.union (str.to_re (str.++ "M" (str.++ "A" (str.++ "R" (str.++ "C" (str.++ "H" ""))))))(re.union (str.to_re (str.++ "A" (str.++ "P" (str.++ "R" (str.++ "I" (str.++ "L" ""))))))(re.union (str.to_re (str.++ "M" (str.++ "A" (str.++ "Y" ""))))(re.union (str.to_re (str.++ "J" (str.++ "U" (str.++ "N" (str.++ "E" "")))))(re.union (str.to_re (str.++ "J" (str.++ "U" (str.++ "L" (str.++ "Y" "")))))(re.union (str.to_re (str.++ "A" (str.++ "U" (str.++ "G" (str.++ "U" (str.++ "S" (str.++ "T" "")))))))(re.union (str.to_re (str.++ "S" (str.++ "E" (str.++ "P" (str.++ "T" (str.++ "E" (str.++ "M" (str.++ "B" (str.++ "E" (str.++ "R" ""))))))))))(re.union (str.to_re (str.++ "O" (str.++ "C" (str.++ "T" (str.++ "O" (str.++ "B" (str.++ "E" (str.++ "R" ""))))))))(re.union (str.to_re (str.++ "N" (str.++ "O" (str.++ "V" (str.++ "E" (str.++ "M" (str.++ "B" (str.++ "E" (str.++ "R" "")))))))))(re.union (str.to_re (str.++ "D" (str.++ "E" (str.++ "C" (str.++ "E" (str.++ "M" (str.++ "B" (str.++ "E" (str.++ "R" "")))))))))(re.union (re.union (re.range " " " ")(re.union (re.range "," ",") (re.range "/" "9"))) (str.to_re (str.++ "P" (str.++ "R" (str.++ "E" (str.++ "S" (str.++ "E" (str.++ "N" (str.++ "T" ""))))))))))))))))))))))) (re.* (re.range ":" ":"))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "9" (str.++ "Y" (str.++ "O" (str.++ "8" (str.++ "7" (str.++ "0" (str.++ "0" (str.++ "4" (str.++ "3" (str.++ "1" (str.++ "8" (str.++ "7" (str.++ "X" (str.++ "X" (str.++ "K" (str.++ "N" (str.++ "\u{e3}" (str.++ "l" "")))))))))))))))))))

(define-fun Witness2 () String (str.++ "9" (str.++ "9" (str.++ "W" (str.++ "8" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "9" (str.++ "3" (str.++ "1" (str.++ "4" (str.++ "8" (str.++ "8" (str.++ "4" (str.++ "W" (str.++ "F" "")))))))))))))))))

(assert (= regexA (re.++ ((_ re.loop 5 5) (re.union (re.range "0" "9") (re.range "A" "Z")))(re.++ (re.range "0" "9")(re.++ (re.union (re.range "0" "1") (re.range "5" "6"))(re.++ (re.range "0" "9")(re.++ (re.union (re.++ (re.range "0" "0") (re.range "1" "9"))(re.union (re.++ (re.range "1" "2") (re.range "0" "9")) (re.++ (re.range "3" "3") (re.range "0" "1"))))(re.++ (re.range "0" "9")(re.++ ((_ re.loop 3 3) (re.union (re.range "0" "9") (re.range "A" "Z"))) ((_ re.loop 2 2) (re.range "A" "Z")))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "\u{d5}" (str.++ "'" (str.++ "@" (str.++ "z" (str.++ "9" (str.++ "." (str.++ "3" (str.++ "6" "")))))))))

(define-fun Witness2 () String (str.++ "\u{dd}" (str.++ "U" (str.++ "@" (str.++ "p" (str.++ "x" (str.++ "." (str.++ "9" (str.++ "7" (str.++ "i" (str.++ "." (str.++ "z" (str.++ "9" (str.++ "." (str.++ "o" (str.++ "n" ""))))))))))))))))

(assert (= regexA (re.++ (re.range "@" "@")(re.++ (re.union (re.range "0" "9") (re.range "a" "z"))(re.++ (re.* (re.union (re.range "-" "-")(re.union (re.range "0" "9") (re.range "a" "z"))))(re.++ (re.union (re.range "0" "9") (re.range "a" "z"))(re.++ (re.+ (re.++ (re.range "." ".")(re.++ (re.union (re.range "0" "9") (re.range "a" "z"))(re.++ (re.* (re.union (re.range "-" "-")(re.union (re.range "0" "9") (re.range "a" "z")))) (re.union (re.range "0" "9") (re.range "a" "z")))))) (re.* (re.++ (str.to_re (str.++ "," (str.++ "@" "")))(re.++ (re.union (re.range "0" "9") (re.range "a" "z"))(re.++ (re.* (re.union (re.range "-" "-")(re.union (re.range "0" "9") (re.range "a" "z"))))(re.++ (re.union (re.range "0" "9") (re.range "a" "z")) (re.+ (re.++ (re.range "." ".")(re.++ (re.union (re.range "0" "9") (re.range "a" "z"))(re.++ (re.* (re.union (re.range "-" "-")(re.union (re.range "0" "9") (re.range "a" "z")))) (re.union (re.range "0" "9") (re.range "a" "z"))))))))))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "\u{19}" (str.++ "<" (str.++ "t" (str.++ "a" (str.++ "g" (str.++ "2" (str.++ "O" (str.++ "\u{a0}" (str.++ "'" (str.++ "/" (str.++ ">" ""))))))))))))

(define-fun Witness2 () String (str.++ "<" (str.++ "t" (str.++ "a" (str.++ "g" (str.++ "1" (str.++ ">" (str.++ "j" (str.++ "\u{a8}" (str.++ "\u{e5}" (str.++ "\u{a8}" (str.++ "7" (str.++ "`" "")))))))))))))

(assert (= regexA (re.++ (re.range "<" "<")(re.++ (re.opt (re.range "/" "/"))(re.++ (re.union (str.to_re (str.++ "t" (str.++ "a" (str.++ "g" (str.++ "1" ""))))) (str.to_re (str.++ "t" (str.++ "a" (str.++ "g" (str.++ "2" ""))))))(re.++ (re.* (re.union (re.range "\u{00}" "=") (re.range "?" "\u{ff}")))(re.++ (re.opt (re.range "/" "/")) (re.range ">" ">"))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "(" (str.++ "(" (str.++ " " (str.++ "\u{85}" (str.++ "\u{85}" (str.++ "2" (str.++ "\u{09}" (str.++ "&" (str.++ "l" (str.++ "t" (str.++ ";" (str.++ "&" (str.++ "g" (str.++ "t" (str.++ ";" (str.++ " " (str.++ "\u{0d}" (str.++ "\u{a0}" (str.++ "(" (str.++ "Q" (str.++ "-" (str.++ "\u{d4}" (str.++ ")" (str.++ " " (str.++ ")" (str.++ "\u{a0}" (str.++ "\u{85}" (str.++ "A" (str.++ "N" (str.++ "D" "")))))))))))))))))))))))))))))))

(define-fun Witness2 () String (str.++ "\u{0c}" (str.++ "\u{c3}" (str.++ "N" (str.++ "O" (str.++ "T" (str.++ "\u{85}" (str.++ "\u{0d}" (str.++ "0" (str.++ "=" (str.++ " " (str.++ "\u{0d}" (str.++ " " (str.++ "\u{a0}" (str.++ "\u{0d}" (str.++ "\u{a0}" (str.++ "\u{0d}" (str.++ "\u{a0}" (str.++ "\u{09}" (str.++ "'" (str.++ "'" (str.++ " " (str.++ "\u{0c}" (str.++ " " (str.++ "\u{09}" (str.++ ")" (str.++ ")" (str.++ "A" (str.++ "N" (str.++ "D" (str.++ ":" (str.++ "\u{02}" (str.++ "\u{c8}" (str.++ "\u{96}" ""))))))))))))))))))))))))))))))))))

(assert (= regexA (re.++ (re.opt (str.to_re (str.++ "N" (str.++ "O" (str.++ "T" "")))))(re.++ (re.++ (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))) (re.* (re.range "(" "(")))(re.++ (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))(re.++ (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (re.union (re.range "=" "=")(re.union (str.to_re (str.++ "&" (str.++ "l" (str.++ "t" (str.++ ";" (str.++ "&" (str.++ "g" (str.++ "t" (str.++ ";" "")))))))))(re.union (str.to_re (str.++ "&" (str.++ "l" (str.++ "t" (str.++ ";" "")))))(re.union (str.to_re (str.++ "&" (str.++ "g" (str.++ "t" (str.++ ";" "")))))(re.union (str.to_re (str.++ "L" (str.++ "I" (str.++ "K" (str.++ "E" ""))))) (str.to_re (str.++ "I" (str.++ "N" ""))))))))(re.++ (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (re.union (re.++ (re.range "(" "(")(re.++ (re.* (re.union (re.range "\u{00}" "(") (re.range "*" "\u{ff}"))) (re.range ")" ")")))(re.union (re.++ (re.range "'" "'")(re.++ (re.* (re.union (re.range "\u{00}" "&") (re.range "(" "\u{ff}"))) (re.range "'" "'"))) (re.++ (re.opt (re.range "-" "-"))(re.++ (re.* (re.range "0" "9"))(re.++ (re.opt (re.range "." ".")) (re.+ (re.range "0" "9")))))))(re.++ (re.++ (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (re.* (re.range ")" ")")) (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))))) (re.opt (re.union (str.to_re (str.++ "A" (str.++ "N" (str.++ "D" "")))) (str.to_re (str.++ "O" (str.++ "R" ""))))))))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "9" (str.++ "9" (str.++ "@" (str.++ "-" (str.++ "7" (str.++ "8" (str.++ "." (str.++ "-" (str.++ "-" (str.++ "y" (str.++ "_" ""))))))))))))

(define-fun Witness2 () String (str.++ "_" (str.++ "8" (str.++ "l" (str.++ "A" (str.++ "D" (str.++ "9" (str.++ "Z" (str.++ "_" (str.++ "Z" (str.++ "I" (str.++ "@" (str.++ "-" (str.++ "T" (str.++ "M" (str.++ "." (str.++ "p" (str.++ "8" (str.++ "\u{18}" "")))))))))))))))))))

(assert (= regexA (re.++ (re.+ (re.union (re.range "-" ".")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_") (re.range "a" "z"))))))(re.++ (re.range "@" "@")(re.++ (re.+ (re.union (re.range "-" ".")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_") (re.range "a" "z"))))))(re.++ (re.range "." ".") (re.+ (re.union (re.range "-" ".")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_") (re.range "a" "z"))))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "\u{ab}" (str.++ "0" (str.++ "3" (str.++ "/" (str.++ "1" (str.++ "2" (str.++ "/" (str.++ "5" (str.++ "1" (str.++ "1" (str.++ "7" (str.++ " " (str.++ "0" (str.++ "9" (str.++ ":" (str.++ "0" (str.++ "0" ""))))))))))))))))))

(define-fun Witness2 () String (str.++ "\u{ed}" (str.++ "y" (str.++ "1" (str.++ "8" (str.++ "/" (str.++ "1" (str.++ "2" (str.++ "/" (str.++ "8" (str.++ "2" (str.++ "4" (str.++ "3" (str.++ " " (str.++ "2" (str.++ "2" (str.++ ":" (str.++ "5" (str.++ "2" "")))))))))))))))))))

(assert (= regexA (re.union (re.++ (re.union (re.++ (re.union (re.++ (re.range "0" "0") (re.range "1" "9"))(re.union (re.++ (re.range "1" "2") (re.range "0" "9")) (re.++ (re.range "3" "3") (re.range "0" "1"))))(re.++ (re.range "/" "/") (re.union (re.++ (re.range "0" "0") (re.union (re.range "1" "1")(re.union (re.range "3" "3")(re.union (re.range "5" "5") (re.range "7" "8"))))) (re.++ (re.range "1" "1") (re.union (re.range "0" "0") (re.range "2" "2"))))))(re.union (re.++ (re.union (re.++ (re.range "0" "0") (re.range "1" "9"))(re.union (re.++ (re.range "1" "2") (re.range "0" "9")) (str.to_re (str.++ "3" (str.++ "0" "")))))(re.++ (re.range "/" "/") (re.union (re.++ (re.range "0" "0") (re.union (re.range "4" "4")(re.union (re.range "6" "6") (re.range "9" "9")))) (str.to_re (str.++ "1" (str.++ "1" "")))))) (re.++ (re.union (re.++ (re.range "0" "0") (re.range "1" "9"))(re.union (re.++ (re.range "1" "1") (re.range "0" "9")) (re.++ (re.range "2" "2") (re.range "0" "8")))) (str.to_re (str.++ "/" (str.++ "0" (str.++ "2" "")))))))(re.++ (re.range "/" "/")(re.++ (re.union (re.++ ((_ re.loop 3 3) (re.range "0" "9")) (re.range "1" "9"))(re.union (re.++ ((_ re.loop 2 2) (re.range "0" "9"))(re.++ (re.range "1" "9") (re.range "0" "9")))(re.union (re.++ (re.range "0" "9")(re.++ (re.range "1" "9") ((_ re.loop 2 2) (re.range "0" "9")))) (re.++ (re.range "1" "9") ((_ re.loop 3 3) (re.range "0" "9"))))))(re.++ (re.range " " " ") (re.++ (re.union (re.++ (re.range "0" "1") (re.range "0" "9")) (re.++ (re.range "2" "2") (re.range "0" "3")))(re.++ (re.range ":" ":")(re.++ (re.range "0" "5")(re.++ (re.range "0" "9") (str.to_re ""))))))))) (re.++ (str.to_re (str.++ "2" (str.++ "9" (str.++ "/" (str.++ "0" (str.++ "2" (str.++ "/" "")))))))(re.++ (re.union (re.++ ((_ re.loop 2 2) (re.range "0" "9")) (re.union (re.++ (re.range "0" "0") (re.union (re.range "4" "4") (re.range "8" "8")))(re.union (re.++ (re.union (re.range "2" "2")(re.union (re.range "4" "4")(re.union (re.range "6" "6") (re.range "8" "8")))) (re.union (re.range "0" "0")(re.union (re.range "4" "4") (re.range "8" "8")))) (re.++ (re.union (re.range "1" "1")(re.union (re.range "3" "3")(re.union (re.range "5" "5")(re.union (re.range "7" "7") (re.range "9" "9"))))) (re.union (re.range "2" "2") (re.range "6" "6")))))) (re.++ (re.union (re.++ (re.range "0" "0") (re.union (re.range "4" "4") (re.range "8" "8")))(re.union (re.++ (re.union (re.range "2" "2")(re.union (re.range "4" "4")(re.union (re.range "6" "6") (re.range "8" "8")))) (re.union (re.range "0" "0")(re.union (re.range "4" "4") (re.range "8" "8")))) (re.++ (re.union (re.range "3" "3")(re.union (re.range "5" "5")(re.union (re.range "7" "7") (re.range "9" "9")))) (re.union (re.range "2" "2") (re.range "6" "6"))))) (str.to_re (str.++ "0" (str.++ "0" "")))))(re.++ (re.range " " " ") (re.++ (re.union (re.++ (re.range "0" "1") (re.range "0" "9")) (re.++ (re.range "2" "2") (re.range "0" "3")))(re.++ (re.range ":" ":")(re.++ (re.range "0" "5")(re.++ (re.range "0" "9") (str.to_re "")))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "1" ""))

(define-fun Witness2 () String (str.++ "1" (str.++ "\u{d9}" (str.++ "8" (str.++ "\u{10}" "")))))

(assert (= regexA (re.range "1" "1")))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "\u{9e}" (str.++ "f" (str.++ "t" (str.++ "p" (str.++ "s" (str.++ ":" (str.++ "/" (str.++ "/" (str.++ "w" (str.++ "w" (str.++ "w" (str.++ "." (str.++ "\u{cd}" (str.++ "\u{de}" (str.++ "\u{ab}" (str.++ "\u{cd}" (str.++ "\u{19}" ""))))))))))))))))))

(define-fun Witness2 () String (str.++ "N" (str.++ "0" (str.++ "9" (str.++ "." (str.++ "0" (str.++ "8" (str.++ "." (str.++ "6" (str.++ "0" (str.++ "." (str.++ "0" (str.++ "7" (str.++ "\u{0b}" (str.++ "\u{14}" (str.++ ">" ""))))))))))))))))

(assert (= regexA (re.union (re.++ (re.union (re.++ (re.++ (re.union (str.to_re (str.++ "h" (str.++ "t" ""))) (re.range "f" "f"))(re.++ (str.to_re (str.++ "t" (str.++ "p" "")))(re.++ (re.opt (re.range "s" "s")) (str.to_re (str.++ ":" (str.++ "/" (str.++ "/" ""))))))) (re.++ (str.to_re (str.++ "w" (str.++ "w" (str.++ "w" (str.++ "." ""))))) (re.+ (re.union (re.range "\u{00}" "\u{08}")(re.union (re.range "\u{0b}" "\u{0c}")(re.union (re.range "\u{0e}" "\u{1f}")(re.union (re.range "!" "'")(re.union (re.range "*" "Z")(re.union (re.range "\u{5c}" "\u{5c}") (re.range "^" "\u{ff}")))))))))) (re.++ (re.++ ((_ re.loop 3 3) (re.++ (re.opt (re.range "0" "2"))(re.++ ((_ re.loop 1 2) (re.range "0" "9")) (re.range "." "."))))(re.++ (re.opt (re.range "0" "2")) ((_ re.loop 1 2) (re.range "0" "9")))) (re.range "/" "/")))(re.++ (re.+ (re.union (re.range "\u{00}" "\u{08}")(re.union (re.range "\u{0b}" "\u{0c}")(re.union (re.range "\u{0e}" "\u{1f}")(re.union (re.range "!" "%")(re.union (re.range "*" "+")(re.union (re.range "-" ":")(re.union (re.range "<" "Z")(re.union (re.range "\u{5c}" "\u{5c}")(re.union (re.range "^" "f")(re.union (re.range "h" "k")(re.union (re.range "m" "n")(re.union (re.range "p" "p")(re.union (re.range "r" "s") (re.range "v" "\u{ff}"))))))))))))))) (re.union (re.range "\u{00}" "\u{08}")(re.union (re.range "\u{0b}" "\u{0c}")(re.union (re.range "\u{0e}" "\u{1f}")(re.union (re.range "!" "%")(re.union (re.range "*" "+")(re.union (re.range "-" "-")(re.union (re.range "/" ":")(re.union (re.range "<" "Z")(re.union (re.range "\u{5c}" "\u{5c}")(re.union (re.range "^" "f")(re.union (re.range "h" "k")(re.union (re.range "m" "n")(re.union (re.range "p" "p")(re.union (re.range "r" "s") (re.range "v" "\u{ff}"))))))))))))))))) (re.++ ((_ re.loop 3 3) (re.++ (re.opt (re.range "0" "2"))(re.++ ((_ re.loop 1 2) (re.range "0" "9")) (re.range "." "."))))(re.++ (re.opt (re.range "0" "2")) ((_ re.loop 1 2) (re.range "0" "9")))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "\u{c5}" (str.++ "\u{13}" (str.++ "D" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "1" ""))))))))

(define-fun Witness2 () String (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "1" "")))))

(assert (= regexA (re.union (re.++ (str.to_re "") (re.++ (re.union (re.++ (re.range "0" "0") (re.range "1" "9")) (re.++ (re.range "1" "1") (re.range "0" "2"))) (re.union (re.++ (re.range "0" "0") (re.range "1" "3"))(re.union (re.++ (re.range "1" "1") (re.range "0" "9")) (re.++ (re.range "2" "2") (re.range "0" "9"))))))(re.union (re.++ (re.union (re.++ (re.range "0" "0") (re.union (re.range "1" "1") (re.range "3" "9"))) (re.++ (re.range "1" "1") (re.range "0" "2"))) (str.to_re (str.++ "3" (str.++ "0" "")))) (re.++ (re.++ (re.union (re.++ (re.range "0" "0") (re.union (re.range "1" "1")(re.union (re.range "3" "3")(re.union (re.range "5" "5") (re.range "7" "8"))))) (re.++ (re.range "1" "1") (re.union (re.range "0" "0") (re.range "2" "2")))) (str.to_re (str.++ "3" (str.++ "1" "")))) (str.to_re ""))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "1" (str.++ "5" (str.++ "9" (str.++ "2" "")))))

(define-fun Witness2 () String (str.++ "8" (str.++ "1" (str.++ "6" (str.++ "8" (str.++ "." ""))))))

(assert (= regexA (re.union (re.++ (str.to_re (str.++ "1" (str.++ "5" ""))) (re.union (re.++ (re.range "8" "8") (re.union (re.range "4" "4") (re.range "8" "8"))) (re.++ (re.range "9" "9") (re.union (re.range "2" "2") (re.range "6" "6")))))(re.union (re.++ (re.union (re.++ (re.range "1" "1") (re.range "6" "9")) (re.++ (re.range "2" "9") (re.range "0" "9"))) (re.union (re.++ (re.range "0" "0") (re.union (re.range "4" "4") (re.range "8" "8")))(re.union (re.++ (re.union (re.range "1" "1")(re.union (re.range "3" "3")(re.union (re.range "5" "5")(re.union (re.range "7" "7") (re.range "9" "9"))))) (re.union (re.range "2" "2") (re.range "6" "6"))) (re.++ (re.union (re.range "2" "2")(re.union (re.range "4" "4")(re.union (re.range "6" "6") (re.range "8" "8")))) (re.union (re.range "0" "0")(re.union (re.range "4" "4") (re.range "8" "8"))))))) (re.++ (re.union (re.++ (re.union (re.range "2" "2")(re.union (re.range "4" "4")(re.union (re.range "6" "6") (re.range "8" "8")))) (re.union (re.range "0" "0")(re.union (re.range "4" "4") (re.range "8" "8"))))(re.union (str.to_re (str.++ "1" (str.++ "6" ""))) (re.++ (str.to_re (str.++ "3" (str.++ "5" (str.++ "7" (str.++ "9" ""))))) (re.union (re.range "2" "2") (re.range "6" "6"))))) (str.to_re (str.++ "0" (str.++ "0" ""))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "\u{9b}" (str.++ "\u{ea}" "")))

(define-fun Witness2 () String (str.++ "\u{bf}" ""))

(assert (= regexA (re.range "\u{80}" "\u{ff}")))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "\u{a7}" (str.++ "\u{bb}" (str.++ "<" (str.++ "\u{a0}" (str.++ "?" (str.++ ":" (str.++ "\u{fd}" (str.++ "\u{d1}" (str.++ "l" (str.++ "A" (str.++ "Y" (str.++ ":" (str.++ "U" (str.++ ":" (str.++ "\u{ba}" (str.++ "\u{ef}" (str.++ "B" (str.++ "\u{a0}" (str.++ "=" (str.++ "\u{0c}" (str.++ " " (str.++ "'" (str.++ "\u{d2}" (str.++ "\u{f3}" (str.++ "\u{b9}" (str.++ "\u{fe}" (str.++ "\u{d2}" (str.++ "\u{ae}" (str.++ "'" (str.++ "\u{0a}" (str.++ "\u{ee}" (str.++ "\u{aa}" (str.++ "\u{b5}" (str.++ "\u{85}" (str.++ "\u{a0}" (str.++ " " (str.++ ":" (str.++ "\u{c2}" (str.++ "\u{09}" (str.++ "=" (str.++ "\u{a0}" (str.++ "}" (str.++ "|" (str.++ "\u{1b}" (str.++ "d" (str.++ "/" (str.++ ">" (str.++ "c" "")))))))))))))))))))))))))))))))))))))))))))))))))

(define-fun Witness2 () String (str.++ "t" (str.++ "<" (str.++ "/" (str.++ "?" (str.++ "\u{85}" (str.++ "?" (str.++ "8" (str.++ ":" (str.++ "\u{f5}" (str.++ "8" (str.++ "4" (str.++ ":" (str.++ ":" (str.++ "\u{ff}" (str.++ "\u{fe}" (str.++ "=" (str.++ " " (str.++ "/" (str.++ ">" ""))))))))))))))))))))

(assert (= regexA (re.++ (re.range "<" "<")(re.++ (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "/" "/")(re.union (re.range "?" "?")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))))(re.++ (re.* (re.++ (re.* (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))) (re.range ":" ":")))(re.++ (re.* (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))(re.++ (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (re.* (re.++ (re.* (re.++ (re.* (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))(re.++ (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (re.range ":" ":") (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))))))(re.++ (re.* (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))(re.++ (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (re.range "=" "=")(re.++ (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (re.union (re.++ (re.range "\u{22}" "\u{22}")(re.++ (re.* (re.union (re.range "\u{00}" "!") (re.range "#" "\u{ff}"))) (re.range "\u{22}" "\u{22}")))(re.union (re.++ (re.range "'" "'")(re.++ (re.* (re.union (re.range "\u{00}" "&") (re.range "(" "\u{ff}"))) (re.range "'" "'"))) (re.* (re.union (re.range "\u{00}" "\u{08}")(re.union (re.range "\u{0e}" "\u{1f}")(re.union (re.range "!" "=")(re.union (re.range "?" "\u{84}")(re.union (re.range "\u{86}" "\u{9f}") (re.range "\u{a1}" "\u{ff}"))))))))) (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))))))))))(re.++ (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (re.opt (re.range "/" "/")) (re.range ">" ">")))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "\u{de}" (str.++ "y" (str.++ " " (str.++ "x" (str.++ "m" (str.++ "l" (str.++ "n" (str.++ "s" (str.++ ":" (str.++ "\u{f3}" (str.++ "=" (str.++ "u" (str.++ "\u{a2}" (str.++ "\u{a7}" (str.++ "q" (str.++ "\u{f8}" "")))))))))))))))))

(define-fun Witness2 () String (str.++ " " (str.++ "x" (str.++ "m" (str.++ "l" (str.++ "n" (str.++ "s" (str.++ ":" (str.++ "=" (str.++ "o" (str.++ "\u{be}" (str.++ "\u{c4}" (str.++ ";" "")))))))))))))

(assert (= regexA (re.union (re.++ (str.to_re (str.++ " " (str.++ "x" (str.++ "m" (str.++ "l" (str.++ "n" (str.++ "s" (str.++ ":" ""))))))))(re.++ (re.* (re.union (re.range "\u{00}" "\u{09}") (re.range "\u{0b}" "\u{ff}")))(re.++ (re.range "=" "=")(re.++ (re.union (re.range "&" "'")(re.union (re.range "," ",")(re.union (re.range ";" ";")(re.union (re.range "o" "o")(re.union (re.range "q" "q") (re.range "t" "u"))))))(re.++ (re.* (re.union (re.range "\u{00}" "\u{09}") (re.range "\u{0b}" "\u{ff}"))) (re.union (re.range "&" "'")(re.union (re.range "," ",")(re.union (re.range ";" ";")(re.union (re.range "o" "o")(re.union (re.range "q" "q") (re.range "t" "u"))))))))))) (re.++ (str.to_re (str.++ " " (str.++ "x" (str.++ "m" (str.++ "l" (str.++ "n" (str.++ "s" (str.++ "=" ""))))))))(re.++ (re.union (re.range "&" "'")(re.union (re.range "," ",")(re.union (re.range ";" ";")(re.union (re.range "o" "o")(re.union (re.range "q" "q") (re.range "t" "u"))))))(re.++ (re.* (re.union (re.range "\u{00}" "\u{09}") (re.range "\u{0b}" "\u{ff}"))) (re.union (re.range "&" "'")(re.union (re.range "," ",")(re.union (re.range ";" ";")(re.union (re.range "o" "o")(re.union (re.range "q" "q") (re.range "t" "u"))))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "f" (str.++ "0" (str.++ "8" (str.++ "9" (str.++ "\u{a0}" (str.++ "7" (str.++ "\u{0a}" (str.++ " " (str.++ " " (str.++ " " (str.++ "0" (str.++ "\u{a0}" (str.++ "5" (str.++ "8" (str.++ "8" (str.++ "\u{0d}" (str.++ "9" (str.++ "\u{a0}" (str.++ "5" ""))))))))))))))))))))

(define-fun Witness2 () String (str.++ "0" (str.++ "9" (str.++ "9" (str.++ "6" (str.++ "\u{0d}" (str.++ "7" (str.++ "4" (str.++ "6" (str.++ "\u{a0}" (str.++ "7" (str.++ "8" (str.++ "\u{85}" (str.++ "9" (str.++ " " (str.++ "\u{a0}" (str.++ "\u{0d}" "")))))))))))))))))

(assert (= regexA (re.union (re.++ (str.to_re (str.++ "0" (str.++ "6" "")))(re.++ (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "-" "-")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))))(re.++ (re.range "1" "9")(re.++ (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))) ((_ re.loop 7 7) (re.++ (re.range "0" "9") (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))))))))(re.union (re.++ (re.range "0" "0")(re.++ (re.range "1" "9")(re.++ (re.range "0" "9")(re.++ (re.range "0" "9")(re.++ (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "-" "-")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))))(re.++ (re.range "1" "9")(re.++ (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))) ((_ re.loop 5 5) (re.++ (re.range "0" "9") (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))))))))))) (re.++ (re.range "0" "0")(re.++ (re.range "1" "9")(re.++ (re.range "0" "9")(re.++ (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "-" "-")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))))(re.++ (re.range "1" "9")(re.++ (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))) ((_ re.loop 6 6) (re.++ (re.range "0" "9") (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))))))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "\u{e4}" (str.++ "\u{98}" (str.++ "\u{97}" (str.++ "\u{90}" (str.++ "\u{d0}" (str.++ "\u{b5}" "")))))))

(define-fun Witness2 () String (str.++ "\u{f5}" (str.++ "M" "")))

(assert (= regexA (re.++ (re.* (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))) (str.to_re ""))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "(" (str.++ "8" (str.++ "7" (str.++ "8" (str.++ ")" (str.++ "-" (str.++ "5" (str.++ "5" (str.++ "8" (str.++ "-" (str.++ "9" (str.++ "1" (str.++ "8" (str.++ "8" (str.++ "\u{ea}" (str.++ "\u{d5}" "")))))))))))))))))

(define-fun Witness2 () String (str.++ "m" (str.++ "(" (str.++ "2" (str.++ "8" (str.++ "2" (str.++ ")" (str.++ "-" (str.++ "2" (str.++ "6" (str.++ "3" (str.++ "-" (str.++ "4" (str.++ "3" (str.++ "1" (str.++ "2" (str.++ "\u{1d}" (str.++ "[" ""))))))))))))))))))

(assert (= regexA (re.++ (re.range "(" "(")(re.++ ((_ re.loop 3 3) (re.range "0" "9"))(re.++ (str.to_re (str.++ ")" (str.++ "-" "")))(re.++ ((_ re.loop 3 3) (re.range "0" "9"))(re.++ (re.range "-" "-") ((_ re.loop 4 4) (re.range "0" "9")))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "0" (str.++ "8" (str.++ "9" (str.++ " " (str.++ "2" (str.++ "2" (str.++ "5" (str.++ "7" (str.++ "6" (str.++ "2" (str.++ "4" ""))))))))))))

(define-fun Witness2 () String (str.++ "0" (str.++ "9" (str.++ "1" (str.++ " " (str.++ "8" (str.++ "2" (str.++ "8" (str.++ "9" (str.++ "6" (str.++ "9" (str.++ "6" (str.++ "\u{a2}" "")))))))))))))

(assert (= regexA (re.union (re.++ (re.range "0" "0") ((_ re.loop 9 9) (re.range "0" "9")))(re.union (re.++ (re.range "0" "0")(re.++ ((_ re.loop 2 2) (re.range "0" "9"))(re.++ (re.union (re.range " " " ") (re.range "-" "-"))(re.++ ((_ re.loop 3 3) (re.range "0" "9"))(re.++ (re.union (re.range " " " ") (re.range "-" "-")) ((_ re.loop 4 4) (re.range "0" "9"))))))) (re.++ (re.range "0" "0")(re.++ ((_ re.loop 2 2) (re.range "0" "9"))(re.++ (re.union (re.range " " " ") (re.range "-" "-")) ((_ re.loop 7 7) (re.range "0" "9")))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "\u{ed}" (str.++ "\u{15}" (str.++ "*" (str.++ "\u{91}" (str.++ "8" ""))))))

(define-fun Witness2 () String (str.++ "\u{cb}" (str.++ "+" (str.++ "8" (str.++ "2" (str.++ "\u{1c}" (str.++ "E" "")))))))

(assert (= regexA (re.union (re.range "0" "0") (re.++ (re.opt (re.range "+" "+")) (re.union (re.++ (re.range "1" "9") (re.opt (re.range "0" "9")))(re.union (re.++ (re.range "1" "1") ((_ re.loop 0 2) (re.range "0" "9"))) (re.++ (re.range "2" "2") (re.union (re.++ (re.range "0" "4") (re.range "0" "9")) (re.++ (re.range "5" "5") (re.range "0" "5"))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "\u{e7}" (str.++ "\u{82}" (str.++ "$" (str.++ "5" (str.++ "8" (str.++ "\u{9b}" (str.++ "\u{bd}" (str.++ "Y" (str.++ "\u{c9}" (str.++ "A" (str.++ "\u{94}" (str.++ "\u{d8}" (str.++ "\u{93}" ""))))))))))))))

(define-fun Witness2 () String (str.++ "x" (str.++ "\u{f5}" (str.++ "$" (str.++ "7" (str.++ "5" (str.++ "8" (str.++ "7" (str.++ "7" (str.++ "7" (str.++ "9" (str.++ "2" (str.++ "2" (str.++ "6" (str.++ "8" (str.++ "7" ""))))))))))))))))

(assert (= regexA (re.++ (re.range "$" "$")(re.++ (re.* (re.range "0" "9")) (re.range "0" "9")))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "I" (str.++ "\u{90}" (str.++ "I" (str.++ "I" (str.++ "I" (str.++ "\u{a0}" (str.++ "\u{85}" (str.++ "\u{0d}" (str.++ "S" (str.++ "o" (str.++ "n" (str.++ "g" (str.++ " " (str.++ "o" (str.++ "f" (str.++ " " (str.++ "S" (str.++ "o" (str.++ "n" (str.++ "g" (str.++ "s" (str.++ "\u{c4}" (str.++ "8" (str.++ "8" (str.++ ":" (str.++ "\u{85}" (str.++ "0" (str.++ ";" (str.++ "1" (str.++ " " (str.++ "S" (str.++ "o" (str.++ "n" (str.++ "g" (str.++ " " (str.++ "o" (str.++ "f" (str.++ " " (str.++ "S" (str.++ "o" (str.++ "l" (str.++ "o" (str.++ "m" (str.++ "o" (str.++ "n" (str.++ "1" (str.++ "4" (str.++ ":" (str.++ "\u{a0}" (str.++ "\u{a0}" (str.++ "9" (str.++ "," (str.++ " " (str.++ "\u{a0}" (str.++ "8" (str.++ "\u{83}" (str.++ "`" (str.++ "\u{93}" "")))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(define-fun Witness2 () String (str.++ "c" (str.++ "S" (str.++ "o" (str.++ "n" (str.++ "g" (str.++ " " (str.++ "o" (str.++ "f" (str.++ " " (str.++ "S" (str.++ "o" (str.++ "n" (str.++ "g" (str.++ "s" (str.++ "\u{b3}" (str.++ "1" (str.++ "7" (str.++ "2" (str.++ ":" (str.++ "8" (str.++ "\u{8e}" ""))))))))))))))))))))))

(assert (= regexA (re.++ (re.opt (re.++ (re.union (re.range "1" "3") ((_ re.loop 1 3) (re.range "I" "I"))) (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))))(re.++ (re.union (re.++ (re.range "A" "Z") (re.+ (re.union (re.range "A" "Z") (re.range "a" "z"))))(re.union (str.to_re (str.++ "S" (str.++ "o" (str.++ "n" (str.++ "g" (str.++ " " (str.++ "o" (str.++ "f" (str.++ " " (str.++ "S" (str.++ "o" (str.++ "n" (str.++ "g" (str.++ "s" "")))))))))))))) (str.to_re (str.++ "S" (str.++ "o" (str.++ "n" (str.++ "g" (str.++ " " (str.++ "o" (str.++ "f" (str.++ " " (str.++ "S" (str.++ "o" (str.++ "l" (str.++ "o" (str.++ "m" (str.++ "o" (str.++ "n" ""))))))))))))))))))(re.++ (re.opt (re.union (re.range "\u{00}" "\u{09}") (re.range "\u{0b}" "\u{ff}")))(re.++ (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (re.opt (re.range "1" "1"))(re.++ (re.opt (re.range "0" "9"))(re.++ (re.range "0" "9")(re.++ (re.range ":" ":")(re.++ (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ ((_ re.loop 1 3) (re.range "0" "9"))(re.++ (re.* (re.++ (re.range "," "-")(re.++ (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))) ((_ re.loop 1 3) (re.range "0" "9"))))) (re.* (re.++ (re.range ";" ";")(re.++ (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (re.opt (re.++ (re.union (re.range "1" "3") ((_ re.loop 1 3) (re.range "I" "I"))) (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))))(re.++ (re.opt (re.union (re.++ (re.range "A" "Z") (re.+ (re.union (re.range "A" "Z") (re.range "a" "z"))))(re.union (str.to_re (str.++ "S" (str.++ "o" (str.++ "n" (str.++ "g" (str.++ " " (str.++ "o" (str.++ "f" (str.++ " " (str.++ "S" (str.++ "o" (str.++ "n" (str.++ "g" (str.++ "s" "")))))))))))))) (str.to_re (str.++ "S" (str.++ "o" (str.++ "n" (str.++ "g" (str.++ " " (str.++ "o" (str.++ "f" (str.++ " " (str.++ "S" (str.++ "o" (str.++ "l" (str.++ "o" (str.++ "m" (str.++ "o" (str.++ "n" "")))))))))))))))))))(re.++ (re.opt (re.union (re.range "\u{00}" "\u{09}") (re.range "\u{0b}" "\u{ff}")))(re.++ (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (re.opt (re.range "1" "1"))(re.++ (re.opt (re.range "0" "9"))(re.++ (re.range "0" "9")(re.++ (re.range ":" ":")(re.++ (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ ((_ re.loop 1 3) (re.range "0" "9")) (re.* (re.++ (re.range "," "-")(re.++ (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))) ((_ re.loop 1 3) (re.range "0" "9")))))))))))))))))))))))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "X" (str.++ "3" (str.++ "u" (str.++ "r" (str.++ "l" (str.++ "=" (str.++ "\u{22}" (str.++ "\u{22}" "")))))))))

(define-fun Witness2 () String (str.++ "u" (str.++ "r" (str.++ "l" (str.++ "=" (str.++ "\u{22}" (str.++ "|" (str.++ "q" (str.++ "\u{22}" (str.++ "N" ""))))))))))

(assert (= regexA (re.++ (str.to_re (str.++ "u" (str.++ "r" (str.++ "l" (str.++ "=" (str.++ "\u{22}" ""))))))(re.++ (re.* (re.union (re.range "\u{00}" "!")(re.union (re.range "#" "Z")(re.union (re.range "\u{5c}" "\u{5c}") (re.range "^" "\u{ff}"))))) (re.range "\u{22}" "\u{22}")))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "\u{90}" (str.++ "." (str.++ "\u{86}" (str.++ "0" (str.++ "3" (str.++ "3" (str.++ "9" (str.++ "\u{85}" (str.++ "9" (str.++ "7" (str.++ "7" (str.++ "4" (str.++ "\u{0c}" (str.++ "9" (str.++ "9" (str.++ "8" (str.++ "9" (str.++ "\u{85}" (str.++ "9" (str.++ "9" (str.++ "9" (str.++ "8" "")))))))))))))))))))))))

(define-fun Witness2 () String (str.++ "\u{82}" (str.++ "\u{11}" (str.++ "8" (str.++ "8" (str.++ "9" (str.++ "8" (str.++ "9" (str.++ "1" (str.++ "9" (str.++ "9" (str.++ "0" (str.++ "8" (str.++ "9" (str.++ "9" (str.++ "\u{85}" (str.++ "8" (str.++ "9" (str.++ "3" (str.++ "9" ""))))))))))))))))))))

(assert (= regexA (re.union (re.++ ((_ re.loop 6 6) (re.range "0" "9"))(re.++ (re.opt (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "-" "-")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))) ((_ re.loop 12 12) (re.range "0" "9")))) (re.++ ((_ re.loop 4 4) (re.range "0" "9"))(re.++ (re.opt (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "-" "-")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))))(re.++ ((_ re.loop 4 4) (re.range "0" "9"))(re.++ (re.opt (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "-" "-")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))))(re.++ ((_ re.loop 4 4) (re.range "0" "9"))(re.++ (re.opt (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "-" "-")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))) ((_ re.loop 4 4) (re.range "0" "9")))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "P" (str.++ ":" (str.++ "/" (str.++ "/" "")))))

(define-fun Witness2 () String (str.++ "8" (str.++ ":" (str.++ "/" (str.++ "/" (str.++ "\u{f4}" (str.++ "\u{fc}" (str.++ "\u{a7}" (str.++ "\u{ed}" "")))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))) (str.to_re (str.++ ":" (str.++ "/" (str.++ "/" ""))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "I" (str.++ "{" (str.++ "9" (str.++ "}" "")))))

(define-fun Witness2 () String (str.++ "\u{f5}" (str.++ "\u{aa}" (str.++ "\u{d8}" (str.++ "\u{8d}" (str.++ "{" (str.++ "8" (str.++ "}" ""))))))))

(assert (= regexA (re.++ (re.union (re.range "\u{00}" "\u{09}") (re.range "\u{0b}" "\u{ff}"))(re.++ (re.range "{" "{")(re.++ (re.range "0" "9") (re.range "}" "}"))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "\u{ea}" (str.++ "\u{b1}" (str.++ "t" (str.++ "f" (str.++ "s" (str.++ "d" (str.++ "g" (str.++ "s" (str.++ "d" (str.++ "f" (str.++ "\u{fa}" ""))))))))))))

(define-fun Witness2 () String (str.++ "s" (str.++ "d" (str.++ "g" (str.++ "s" (str.++ "d" (str.++ "f" "")))))))

(assert (= regexA (str.to_re (str.++ "s" (str.++ "d" (str.++ "g" (str.++ "s" (str.++ "d" (str.++ "f" "")))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "\u{18}" (str.++ "\u{1b}" (str.++ "\u{aa}" (str.++ "-" (str.++ "\u{c8}" (str.++ "@" (str.++ "_" (str.++ "\u{b5}" (str.++ "9" (str.++ "." (str.++ "\u{b5}" (str.++ "9" (str.++ "." (str.++ "i" (str.++ "." (str.++ "8" (str.++ "9" (str.++ "\u{f7}" "")))))))))))))))))))

(define-fun Witness2 () String (str.++ "x" (str.++ "\u{ba}" (str.++ "q" (str.++ "." (str.++ "\u{dc}" (str.++ "\u{d1}" (str.++ "@" (str.++ "9" (str.++ "E" (str.++ "\u{e1}" (str.++ "8" (str.++ "." (str.++ "\u{ba}" (str.++ "\u{d5}" (str.++ "." (str.++ "\u{ba}" (str.++ "\u{ba}" ""))))))))))))))))))

(assert (= regexA (re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))(re.++ (re.* (re.++ (re.union (re.range "'" "'")(re.union (re.range "+" "+") (re.range "-" "."))) (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))))(re.++ (re.range "@" "@")(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))(re.++ (re.* (re.++ (re.range "-" ".") (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))))(re.++ (re.range "." ".")(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))) (re.* (re.++ (re.range "-" ".") (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))))))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "\u{f3}" (str.++ "\u{00}" (str.++ "<" (str.++ "I" (str.++ "m" (str.++ "G" (str.++ "s" (str.++ "r" (str.++ "c" (str.++ "=" (str.++ "\u{85}" (str.++ "\u{85}" (str.++ "'" (str.++ "M" (str.++ "'" (str.++ ">" (str.++ "\u{8b}" (str.++ "\u{16}" (str.++ "\u{b5}" (str.++ "\u{0f}" "")))))))))))))))))))))

(define-fun Witness2 () String (str.++ "[" (str.++ "\u{ae}" (str.++ "\u{cb}" (str.++ "<" (str.++ "i" (str.++ "M" (str.++ "g" (str.++ "\u{85}" (str.++ "s" (str.++ "r" (str.++ "c" (str.++ "=" (str.++ " " (str.++ "'" (str.++ "'" (str.++ ">" (str.++ "<" (str.++ "/" (str.++ "i" (str.++ "m" (str.++ "G" (str.++ ">" (str.++ "~" (str.++ "y" (str.++ "\u{f7}" (str.++ "\u{0b}" "")))))))))))))))))))))))))))

(assert (= regexA (re.++ (re.range "<" "<")(re.++ (re.union (re.range "I" "I") (re.range "i" "i"))(re.++ (re.union (re.range "M" "M") (re.range "m" "m"))(re.++ (re.union (re.range "G" "G") (re.range "g" "g"))(re.++ (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{22}" "\u{22}")(re.union (re.range "." ".")(re.union (re.range "0" "9")(re.union (re.range "=" "=")(re.union (re.range "A" "Z")(re.union (re.range "a" "z")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))))))))(re.++ (re.++ (str.to_re (str.++ "s" (str.++ "r" (str.++ "c" ""))))(re.++ (re.range "=" "=")(re.++ (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))) (re.union (re.++ (re.range "\u{22}" "\u{22}")(re.++ (re.* (re.union (re.range "\u{00}" "!") (re.range "#" "\u{ff}"))) (re.range "\u{22}" "\u{22}"))) (re.++ (re.range "'" "'")(re.++ (re.* (re.union (re.range "\u{00}" "&") (re.range "(" "\u{ff}"))) (re.range "'" "'")))))))(re.++ (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{22}" "\u{22}")(re.union (re.range "." ".")(re.union (re.range "0" "9")(re.union (re.range "=" "=")(re.union (re.range "A" "Z")(re.union (re.range "a" "z")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))))))))(re.++ (re.* (re.range "/" "/"))(re.++ (re.range ">" ">") (re.* (re.++ (str.to_re (str.++ "<" (str.++ "/" "")))(re.++ (re.union (re.range "I" "I") (re.range "i" "i"))(re.++ (re.union (re.range "M" "M") (re.range "m" "m"))(re.++ (re.union (re.range "G" "G") (re.range "g" "g")) (re.range ">" ">")))))))))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "0" (str.++ "2" (str.++ "/" (str.++ "2" (str.++ "9" (str.++ "-" (str.++ "8" (str.++ "4" (str.++ "0" (str.++ "0" (str.++ "\u{f3}" (str.++ "\u{a6}" (str.++ "\u{a6}" ""))))))))))))))

(define-fun Witness2 () String (str.++ "0" (str.++ "2" (str.++ "/" (str.++ "2" (str.++ "9" (str.++ "/" (str.++ "1" (str.++ "9" (str.++ "2" (str.++ "4" "")))))))))))

(assert (= regexA (re.union (re.++ (re.union (re.++ (re.range "0" "0") (re.union (re.range "1" "1")(re.union (re.range "3" "3")(re.union (re.range "5" "5") (re.range "7" "8")))))(re.union (str.to_re (str.++ "1" (str.++ "0" ""))) (str.to_re (str.++ "1" (str.++ "2" "")))))(re.++ (re.range "/" "/")(re.++ (re.union (re.++ (re.range "0" "0") (re.range "1" "9"))(re.union (re.++ (re.range "1" "2") (re.range "0" "9")) (re.++ (re.range "3" "3") (re.range "0" "1"))))(re.++ (re.range "/" "/") (re.++ (re.range "1" "2")(re.++ (re.union (re.range "," ",")(re.union (re.range "0" "0") (re.range "9" "9")))(re.++ (re.range "0" "9") (re.range "0" "9"))))))))(re.union (re.++ (re.union (re.++ (re.range "0" "0") (re.union (re.range "4" "4")(re.union (re.range "6" "6") (re.range "9" "9")))) (str.to_re (str.++ "1" (str.++ "1" ""))))(re.++ (re.range "/" "/")(re.++ (re.union (re.++ (re.range "0" "0") (re.range "1" "9"))(re.union (re.++ (re.range "1" "2") (re.range "0" "9")) (str.to_re (str.++ "3" (str.++ "0" "")))))(re.++ (re.range "/" "/") (re.++ (re.range "1" "2")(re.++ (re.union (re.range "," ",")(re.union (re.range "0" "0") (re.range "9" "9")))(re.++ (re.range "0" "9") (re.range "0" "9"))))))))(re.union (re.++ (str.to_re (str.++ "0" (str.++ "2" "")))(re.++ (re.range "/" "/")(re.++ (re.union (re.++ (re.range "0" "0") (re.range "1" "9"))(re.union (re.++ (re.range "1" "1") (re.range "0" "9")) (re.++ (re.range "2" "2") (re.range "0" "8"))))(re.++ (re.range "/" "/") (re.++ (re.range "1" "2")(re.++ (re.union (re.range "," ",")(re.union (re.range "0" "0") (re.range "9" "9")))(re.++ (re.range "0" "9") (re.range "0" "9"))))))))(re.union (re.++ (str.to_re (str.++ "0" (str.++ "2" "")))(re.++ (re.range "/" "/")(re.++ (str.to_re (str.++ "2" (str.++ "9" "")))(re.++ (re.range "-" "/") (re.++ (re.union (re.range "0" "0")(re.union (re.range "2" "2")(re.union (re.range "4" "4")(re.union (re.range "6" "6") (re.range "8" "8")))))(re.++ (re.union (re.range "0" "0")(re.union (re.range "4" "4") (re.range "8" "8"))) (str.to_re (str.++ "0" (str.++ "0" "")))))))))(re.union (re.++ (str.to_re (str.++ "0" (str.++ "2" "")))(re.++ (re.range "/" "/")(re.++ (str.to_re (str.++ "2" (str.++ "9" "")))(re.++ (re.range "/" "/") (re.++ (re.union (re.range "1" "1")(re.union (re.range "3" "3")(re.union (re.range "5" "5")(re.union (re.range "7" "7") (re.range "9" "9")))))(re.++ (re.union (re.range "2" "2") (re.range "6" "6")) (str.to_re (str.++ "0" (str.++ "0" "")))))))))(re.union (re.++ (str.to_re (str.++ "0" (str.++ "2" "")))(re.++ (re.range "/" "/")(re.++ (str.to_re (str.++ "2" (str.++ "9" "")))(re.++ (re.range "/" "/") (re.++ (re.range "0" "9")(re.++ (re.range "0" "9")(re.++ (re.range "0" "0") (re.union (re.range "4" "4") (re.range "8" "8")))))))))(re.union (re.++ (str.to_re (str.++ "0" (str.++ "2" "")))(re.++ (re.range "/" "/")(re.++ (str.to_re (str.++ "2" (str.++ "9" "")))(re.++ (re.range "/" "/") (re.++ (re.range "0" "9")(re.++ (re.range "0" "9")(re.++ (re.union (re.range "2" "2")(re.union (re.range "4" "4")(re.union (re.range "6" "6") (re.range "8" "8")))) (re.union (re.range "0" "0")(re.union (re.range "4" "4") (re.range "8" "8")))))))))) (re.++ (str.to_re (str.++ "0" (str.++ "2" "")))(re.++ (re.range "/" "/")(re.++ (str.to_re (str.++ "2" (str.++ "9" "")))(re.++ (re.range "/" "/") (re.++ (re.range "0" "9")(re.++ (re.range "0" "9")(re.++ (re.union (re.range "1" "1")(re.union (re.range "3" "3")(re.union (re.range "5" "5")(re.union (re.range "7" "7") (re.range "9" "9"))))) (re.union (re.range "2" "2") (re.range "6" "6"))))))))))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "0" (str.++ "7" (str.++ "6" (str.++ "3" (str.++ "8" (str.++ "9" (str.++ "5" (str.++ "9" (str.++ " " (str.++ "6" (str.++ "9" (str.++ "3" (str.++ "@" (str.++ "k" (str.++ "\u{d3}" ""))))))))))))))))

(define-fun Witness2 () String (str.++ "D" (str.++ " " (str.++ "9" (str.++ "3" (str.++ "8" (str.++ "3" (str.++ " " (str.++ "9" (str.++ "2" (str.++ "9" (str.++ " " (str.++ "4" (str.++ "9" (str.++ "9" (str.++ "O" ""))))))))))))))))

(assert (= regexA (re.++ (re.union (re.++ (re.opt (str.to_re (str.++ "+" (str.++ "4" (str.++ "4" "")))))(re.++ (re.opt (re.range " " " "))(re.++ (re.opt (str.to_re (str.++ "(" (str.++ "0" (str.++ ")" ""))))) (re.opt (re.range " " " "))))) (re.range "0" "0")) ((_ re.loop 3 3) (re.++ (re.opt (re.range " " " ")) ((_ re.loop 3 4) (re.range "0" "9")))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "Z" (str.++ "." (str.++ "9" (str.++ "9" (str.++ "\u{d3}" (str.++ "." (str.++ "2" (str.++ "8" (str.++ "x" (str.++ "8" (str.++ "\u{f6}" (str.++ "@" (str.++ "z" (str.++ "8" (str.++ "." (str.++ "u" (str.++ "y" (str.++ "a" (str.++ "." (str.++ "z" (str.++ "y" (str.++ "\u{ea}" (str.++ "%" ""))))))))))))))))))))))))

(define-fun Witness2 () String (str.++ "\u{1c}" (str.++ "t" (str.++ "9" (str.++ "\u{f3}" (str.++ "\u{0d}" (str.++ "8" (str.++ "p" (str.++ "e" (str.++ "8" (str.++ "\u{8d}" (str.++ "@" (str.++ "8" (str.++ "9" (str.++ "." (str.++ "i" (str.++ "y" (str.++ "z" ""))))))))))))))))))

(assert (= regexA (re.++ (re.++ (re.union (re.range "\u{00}" "-")(re.union (re.range "/" "^") (re.range "`" "\u{ff}"))) ((_ re.loop 2 2) (re.++ (re.* (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_") (re.range "a" "z")))))(re.++ (re.opt (re.range "." "."))(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_") (re.range "a" "z"))))) (re.union (re.range "\u{00}" "^") (re.range "`" "\u{ff}")))))))(re.++ (re.range "@" "@") (re.++ (re.+ (re.union (re.range "0" "9") (re.range "a" "z")))(re.++ (re.range "." ".") (re.union ((_ re.loop 2 3) (re.range "a" "z")) (re.++ ((_ re.loop 2 3) (re.range "a" "z"))(re.++ (re.range "." ".") ((_ re.loop 2 3) (re.range "a" "z")))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "0" (str.++ "5" (str.++ "4" (str.++ "-" (str.++ "9" (str.++ "4" (str.++ "3" (str.++ "9" (str.++ "4" (str.++ "5" (str.++ "4" ""))))))))))))

(define-fun Witness2 () String (str.++ "l" (str.++ "\u{f3}" (str.++ "t" (str.++ "\u{cc}" (str.++ "\u{fa}" (str.++ "0" (str.++ "5" (str.++ "2" (str.++ "-" (str.++ "0" (str.++ "8" (str.++ "5" (str.++ "3" (str.++ "1" (str.++ "1" (str.++ "7" (str.++ "\u{b2}" (str.++ "~" (str.++ "!" ""))))))))))))))))))))

(assert (= regexA (re.union (re.++ (str.to_re "")(re.++ (str.to_re (str.++ "0" (str.++ "5" (str.++ "0" (str.++ "-" ""))))) ((_ re.loop 7 7) (re.range "0" "9"))))(re.union (re.++ (str.to_re (str.++ "0" (str.++ "5" (str.++ "2" (str.++ "-" ""))))) ((_ re.loop 7 7) (re.range "0" "9")))(re.union (re.++ (str.to_re (str.++ "0" (str.++ "5" (str.++ "4" (str.++ "-" ""))))) ((_ re.loop 7 7) (re.range "0" "9"))) (re.++ (str.to_re (str.++ "0" (str.++ "5" (str.++ "7" (str.++ "-" "")))))(re.++ ((_ re.loop 7 7) (re.range "0" "9")) (str.to_re ""))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "<" (str.++ "/" (str.++ "\u{12}" (str.++ ">" (str.++ "\u{a4}" ""))))))

(define-fun Witness2 () String (str.++ "<" (str.++ "\u{9f}" (str.++ ">" (str.++ "e" "")))))

(assert (= regexA (re.++ (re.range "<" "<")(re.++ (re.opt (re.range "/" "/"))(re.++ (re.* (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))(re.++ (re.* (re.union (re.range "\u{00}" ";")(re.union (re.range "=" "=") (re.range "?" "\u{ff}")))) (re.range ">" ">")))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "h" (str.++ "t" (str.++ "t" (str.++ "p" (str.++ ":" (str.++ "\u{5c}" (str.++ "/" (str.++ "\u{5c}" (str.++ "/" (str.++ "w" (str.++ "w" (str.++ "w" (str.++ "\u{5c}" (str.++ "r" (str.++ "w" (str.++ "\u{5c}" (str.++ "\u{5c}" (str.++ "X" (str.++ "w" (str.++ "w" (str.++ "]" (str.++ "\u{5c}" (str.++ "/" (str.++ "+" (str.++ ";" (str.++ ";" (str.++ "\u{5c}" (str.++ "/" (str.++ "\u{5c}" (str.++ "d" (str.++ "d" (str.++ "d" (str.++ "d" (str.++ "d" (str.++ "d" (str.++ "d" (str.++ "d" (str.++ "d" (str.++ "d" (str.++ "d" (str.++ "-" (str.++ "\u{5c}" (str.++ "d" (str.++ "d" (str.++ "d" (str.++ "d" (str.++ "d" (str.++ "d" (str.++ "d" (str.++ "d" (str.++ "d" (str.++ "-" (str.++ "\u{5c}" (str.++ "d" (str.++ "d" (str.++ "d" (str.++ "d" (str.++ "d" (str.++ "d" (str.++ "d" (str.++ "d" (str.++ "d" (str.++ "d" (str.++ "d" (str.++ "-" (str.++ "\u{5c}" (str.++ "d" (str.++ "d" (str.++ "d" (str.++ "d" (str.++ "d" (str.++ "d" (str.++ "d" (str.++ "d" (str.++ "d" (str.++ "d" (str.++ "d" (str.++ "-" (str.++ "\u{5c}" (str.++ "d" (str.++ "d" (str.++ "d" (str.++ "d" (str.++ "d" (str.++ "d" (str.++ "d" (str.++ "d" (str.++ "d" (str.++ "-" (str.++ "\u{5c}" (str.++ "d" (str.++ "d" (str.++ "d" (str.++ "d" (str.++ "d" (str.++ "d" (str.++ "d" (str.++ "d" (str.++ "d" (str.++ "d" (str.++ "-" (str.++ "\u{5c}" (str.++ "d" (str.++ "d" (str.++ "d" (str.++ "d" (str.++ "d" (str.++ "d" (str.++ "d" (str.++ "d" (str.++ "-" (str.++ "\u{5c}" (str.++ "d" (str.++ "d" (str.++ "d" (str.++ "d" (str.++ "d" (str.++ "d" (str.++ "d" (str.++ "d" (str.++ "d" (str.++ "d" (str.++ "d" (str.++ "-" "")))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(define-fun Witness2 () String (str.++ "h" (str.++ "t" (str.++ "t" (str.++ "p" (str.++ ":" (str.++ "\u{5c}" (str.++ "/" (str.++ "\u{5c}" (str.++ "/" (str.++ "^" (str.++ "\u{5c}" (str.++ "\u{c2}" (str.++ "w" (str.++ "\u{5c}" (str.++ "\u{da}" (str.++ "_" (str.++ "\u{5c}" (str.++ "\u{5c}" (str.++ "\u{c8}" (str.++ "w" (str.++ "\u{5c}" (str.++ "y" (str.++ "w" (str.++ "\u{5c}" (str.++ "/" (str.++ "@" (str.++ "\u{5c}" (str.++ "/" (str.++ "\u{5c}" (str.++ "d" (str.++ "d" (str.++ "d" (str.++ "d" (str.++ "d" (str.++ "d" (str.++ "d" (str.++ "d" (str.++ "d" (str.++ "d" (str.++ "d" (str.++ "-" (str.++ "\u{5c}" (str.++ "d" (str.++ "d" (str.++ "d" (str.++ "d" (str.++ "d" (str.++ "d" (str.++ "d" (str.++ "d" (str.++ "d" (str.++ "d" (str.++ "d" (str.++ "-" (str.++ "\u{5c}" (str.++ "d" (str.++ "d" (str.++ "d" (str.++ "d" (str.++ "d" (str.++ "d" (str.++ "d" (str.++ "d" (str.++ "d" (str.++ "d" (str.++ "d" (str.++ "-" (str.++ "\u{13}" (str.++ "\u{95}" ""))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(assert (= regexA (re.++ (str.to_re (str.++ "h" (str.++ "t" (str.++ "t" (str.++ "p" "")))))(re.++ (str.to_re (str.++ ":" (str.++ "\u{5c}" (str.++ "/" (str.++ "\u{5c}" (str.++ "/" ""))))))(re.++ (re.+ (re.union (re.range "\u{5c}" "_") (re.range "w" "w")))(re.++ (re.+ (re.++ (re.range "\u{5c}" "\u{5c}")(re.++ (re.union (re.range "\u{00}" "\u{09}") (re.range "\u{0b}" "\u{ff}")) (re.+ (re.union (re.range "\u{5c}" "_") (re.range "w" "w"))))))(re.++ (re.++ (re.range "\u{5c}" "\u{5c}")(re.++ (re.union (re.range "\u{00}" "\u{09}") (re.range "\u{0b}" "\u{ff}")) (re.+ (re.union (re.range "\u{5c}" "_") (re.range "w" "w")))))(re.++ (str.to_re (str.++ "\u{5c}" (str.++ "/" "")))(re.++ (re.++ (re.* (re.union (re.range "#" "#")(re.union (re.range "%" "&")(re.union (re.range "+" ",")(re.union (re.range "." "/")(re.union (re.range ":" ";")(re.union (re.range "=" "=")(re.union (re.range "?" "@")(re.union (re.range "\u{5c}" "\u{5c}")(re.union (re.range "^" "^")(re.union (re.range "a" "a")(re.union (re.range "m" "m")(re.union (re.range "p" "p")(re.union (re.range "w" "w") (re.range "~" "~"))))))))))))))) (re.+ (re.union (re.range "#" "#")(re.union (re.range "%" "&")(re.union (re.range "+" "+")(re.union (re.range "/" "/")(re.union (re.range ";" ";")(re.union (re.range "=" "=")(re.union (re.range "?" "@")(re.union (re.range "\u{5c}" "\u{5c}")(re.union (re.range "^" "^")(re.union (re.range "a" "a")(re.union (re.range "m" "m")(re.union (re.range "p" "p")(re.union (re.range "w" "w") (re.range "~" "~"))))))))))))))))(re.++ (str.to_re (str.++ "\u{5c}" (str.++ "/" "")))(re.++ (re.+ (re.union (re.++ (re.range "\u{5c}" "\u{5c}")(re.++ ((_ re.loop 8 8) (re.range "d" "d")) (re.range "-" "-")))(re.union (re.++ (re.range "\u{5c}" "\u{5c}")(re.++ ((_ re.loop 9 9) (re.range "d" "d")) (re.range "-" "-")))(re.union (re.++ (re.range "\u{5c}" "\u{5c}")(re.++ ((_ re.loop 10 10) (re.range "d" "d")) (re.range "-" "-"))) (re.++ (re.range "\u{5c}" "\u{5c}")(re.++ ((_ re.loop 11 11) (re.range "d" "d")) (re.range "-" "-"))))))) (re.opt (re.++ (re.* (re.union (re.range "#" "#")(re.union (re.range "%" "&")(re.union (re.range "+" ",")(re.union (re.range "." "/")(re.union (re.range ":" ";")(re.union (re.range "=" "=")(re.union (re.range "?" "@")(re.union (re.range "\u{5c}" "\u{5c}")(re.union (re.range "^" "^")(re.union (re.range "a" "a")(re.union (re.range "m" "m")(re.union (re.range "p" "p")(re.union (re.range "w" "w") (re.range "~" "~"))))))))))))))) (re.union (re.range "+" "+")(re.union (re.range "?" "@")(re.union (re.range "\u{5c}" "\u{5c}")(re.union (re.range "^" "^")(re.union (re.range "h" "h")(re.union (re.range "l" "m")(re.union (re.range "t" "t") (re.range "w" "w")))))))))))))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "Z" (str.++ "K" (str.++ "6" (str.++ "8" (str.++ "2" (str.++ "\u{a9}" (str.++ "@" ""))))))))

(define-fun Witness2 () String (str.++ "_" (str.++ "8" (str.++ "G" (str.++ "E" (str.++ " " (str.++ "8" (str.++ "1" (str.++ "9" "")))))))))

(assert (= regexA (re.union (re.++ (str.to_re "") (re.++ ((_ re.loop 2 2) (re.range "A" "Z")) ((_ re.loop 3 3) (re.range "0" "9")))) (re.++ (re.++ ((_ re.loop 2 2) (re.range "A" "Z"))(re.++ (re.range " " " ") ((_ re.loop 3 3) (re.range "0" "9")))) (str.to_re "")))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "k" (str.++ "\u{e5}" (str.++ "\u{11}" (str.++ "\u{ae}" (str.++ "~" (str.++ "I" (str.++ "e" (str.++ "g" (str.++ "z" (str.++ "c" (str.++ "h" (str.++ "i" (str.++ "a" (str.++ "n" "")))))))))))))))

(define-fun Witness2 () String (str.++ "~" (str.++ "J" (str.++ "x" (str.++ "b" (str.++ "i" (str.++ "a" (str.++ "n" ""))))))))

(assert (= regexA (re.++ (re.range "~" "~")(re.++ (re.range "A" "Z")(re.++ (re.+ (re.range "a" "z"))(re.++ (re.union (re.range "b" "b")(re.union (str.to_re (str.++ "c" (str.++ "h" ""))) (re.union (re.range "d" "d")(re.union (re.range "g" "g")(re.union (re.range "j" "n")(re.union (re.range "p" "p")(re.union (re.range "r" "t")(re.union (re.range "v" "v") (re.range "z" "z")))))))))(re.++ (str.to_re (str.++ "i" (str.++ "a" (str.++ "n" "")))) (str.to_re ""))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "2" (str.++ "." (str.++ "\u{dd}" (str.++ "j" (str.++ "a" (str.++ "r" (str.++ ":" (str.++ "f" (str.++ "i" (str.++ "l" (str.++ "e" (str.++ ":" (str.++ "/" (str.++ "/" (str.++ "8" (str.++ "/" (str.++ " " (str.++ "+" (str.++ "." (str.++ "j" (str.++ "a" (str.++ "r" (str.++ "!" (str.++ "\u{c2}" "")))))))))))))))))))))))))

(define-fun Witness2 () String (str.++ "\u{a9}" (str.++ "J" (str.++ "j" (str.++ "a" (str.++ "r" (str.++ ":" (str.++ "f" (str.++ "i" (str.++ "l" (str.++ "e" (str.++ ":" (str.++ "/" (str.++ "H" (str.++ ":" (str.++ "/" (str.++ "9" (str.++ "4" (str.++ "/" (str.++ "~" (str.++ "." (str.++ "j" (str.++ "a" (str.++ "r" (str.++ "!" (str.++ "6" (str.++ "\u{b1}" "")))))))))))))))))))))))))))

(assert (= regexA (re.++ (str.to_re (str.++ "j" (str.++ "a" (str.++ "r" (str.++ ":" (str.++ "f" (str.++ "i" (str.++ "l" (str.++ "e" (str.++ ":" (str.++ "/" "")))))))))))(re.++ (re.++ (re.opt (re.++ (re.range "A" "Z") (re.range ":" ":")))(re.++ (re.range "/" "/") (re.+ (re.union (re.range " " "!")(re.union (re.range "#" "$")(re.union (re.range "&" "&")(re.union (re.range "(" "+")(re.union (re.range "-" "9")(re.union (re.range "@" "Z")(re.union (re.range "_" "_") (re.range "~" "~"))))))))))) (re.++ (re.range "/" "/")(re.++ (re.+ (re.union (re.range " " " ")(re.union (re.range "(" ")")(re.union (re.range "+" "+")(re.union (re.range "0" "9")(re.union (re.range "=" "=")(re.union (re.range "A" "[")(re.union (re.range "]" "]")(re.union (re.range "_" "_") (re.range "~" "~")))))))))) (str.to_re (str.++ "." (str.++ "j" (str.++ "a" (str.++ "r" (str.++ "!" ""))))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "H" (str.++ "9" (str.++ "h" (str.++ "t" (str.++ "t" (str.++ "p" (str.++ "s" (str.++ ":" (str.++ "/" (str.++ "/" (str.++ "4" ""))))))))))))

(define-fun Witness2 () String (str.++ "\u{a0}" (str.++ "n" (str.++ "h" (str.++ "t" (str.++ "t" (str.++ "p" (str.++ ":" (str.++ "/" (str.++ "/" (str.++ "." (str.++ "5" ""))))))))))))

(assert (= regexA (re.++ (str.to_re (str.++ "h" (str.++ "t" (str.++ "t" (str.++ "p" "")))))(re.++ (re.opt (re.range "s" "s"))(re.++ (str.to_re (str.++ ":" (str.++ "/" (str.++ "/" "")))) (re.+ (re.union (re.range "." "9")(re.union (re.range "A" "Z") (re.range "a" "z")))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "(" (str.++ "5" (str.++ "9" (str.++ "4" (str.++ " " (str.++ " " (str.++ "-" (str.++ " " (str.++ "9" (str.++ "7" (str.++ "2" (str.++ " " (str.++ "*" (str.++ " " (str.++ "6" (str.++ "3" (str.++ "6" (str.++ "8" (str.++ " " (str.++ "\u{d3}" (str.++ "\u{d8}" (str.++ "a" (str.++ "c" ""))))))))))))))))))))))))

(define-fun Witness2 () String (str.++ "\u{da}" (str.++ "?" (str.++ "\u{9a}" (str.++ "\u{1a}" (str.++ "8" (str.++ "5" (str.++ "8" (str.++ "9" (str.++ "2" (str.++ "2" (str.++ " " (str.++ " " (str.++ "5" (str.++ "8" (str.++ "8" (str.++ "8" (str.++ " " ""))))))))))))))))))

(assert (= regexA (re.++ (re.opt (re.++ (re.opt (re.range "+" "+"))(re.++ (re.range "1" "1") (re.opt (re.union (re.range " " " ")(re.union (re.range "*" "*") (re.range "-" ".")))))))(re.++ (re.opt (re.++ (re.opt (re.range "(" "(")) (re.opt (re.range " " " "))))(re.++ ((_ re.loop 3 3) (re.range "0" "9"))(re.++ (re.opt (re.++ (re.opt (re.range " " " ")) (re.opt (re.range ")" ")"))))(re.++ (re.opt (re.range " " " "))(re.++ (re.opt (re.union (re.range "*" "*") ((_ re.loop 1 2) (re.range "-" "."))))(re.++ (re.opt (re.range " " " "))(re.++ ((_ re.loop 3 3) (re.range "0" "9"))(re.++ (re.opt (re.range " " " "))(re.++ (re.opt (re.union (re.range "*" "*") ((_ re.loop 1 2) (re.range "-" "."))))(re.++ (re.opt (re.range " " " "))(re.++ ((_ re.loop 4 4) (re.range "0" "9")) (re.range " " " ")))))))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "z" (str.++ "^" (str.++ "A" (str.++ "D" (str.++ "6" (str.++ "9" (str.++ " " (str.++ "8" (str.++ "9" (str.++ "2" (str.++ "0" (str.++ " " (str.++ "4" (str.++ "9" (str.++ "8" (str.++ "3" (str.++ " " (str.++ "9" (str.++ "8" (str.++ "0" (str.++ "8" (str.++ " " (str.++ "7" (str.++ "2" (str.++ "1" (str.++ "6" (str.++ " " (str.++ "3" (str.++ "9" (str.++ "5" (str.++ "5" ""))))))))))))))))))))))))))))))))

(define-fun Witness2 () String (str.++ "\u{0b}" (str.++ "A" (str.++ "D" (str.++ "9" (str.++ "8" (str.++ "4" (str.++ "6" (str.++ "8" (str.++ "3" (str.++ "3" (str.++ "0" (str.++ "2" (str.++ "8" (str.++ "3" (str.++ "7" (str.++ "6" (str.++ "8" (str.++ "8" (str.++ "2" (str.++ "8" (str.++ "9" (str.++ "9" (str.++ "8" (str.++ "9" (str.++ "4" ""))))))))))))))))))))))))))

(assert (= regexA (re.union (re.++ (str.to_re (str.++ "A" (str.++ "D" "")))(re.++ ((_ re.loop 2 2) (re.range "0" "9"))(re.++ (re.range " " " ")(re.++ ((_ re.loop 4 4) (re.range "0" "9"))(re.++ (re.range " " " ")(re.++ ((_ re.loop 4 4) (re.range "0" "9"))(re.++ (re.range " " " ")(re.++ ((_ re.loop 4 4) (re.range "0" "9"))(re.++ (re.range " " " ")(re.++ ((_ re.loop 4 4) (re.range "0" "9"))(re.++ (re.range " " " ") ((_ re.loop 4 4) (re.range "0" "9"))))))))))))) (re.++ (str.to_re (str.++ "A" (str.++ "D" ""))) ((_ re.loop 22 22) (re.range "0" "9"))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "0" (str.++ "5" (str.++ "0" (str.++ "-" (str.++ "6" (str.++ "8" (str.++ "5" (str.++ "9" (str.++ "8" (str.++ "9" (str.++ "8" (str.++ "\u{99}" "")))))))))))))

(define-fun Witness2 () String (str.++ "0" (str.++ "5" (str.++ "2" (str.++ "0" (str.++ "8" (str.++ "6" (str.++ "5" (str.++ "9" (str.++ "9" (str.++ "7" "")))))))))))

(assert (= regexA (re.union (re.++ (str.to_re "")(re.++ (str.to_re (str.++ "0" (str.++ "5" (str.++ "0" (str.++ "-" ""))))) ((_ re.loop 7 7) (re.range "0" "9"))))(re.union (re.++ (str.to_re (str.++ "0" (str.++ "5" (str.++ "2" (str.++ "-" ""))))) ((_ re.loop 7 7) (re.range "0" "9")))(re.union (re.++ (str.to_re (str.++ "0" (str.++ "5" (str.++ "4" (str.++ "-" ""))))) ((_ re.loop 7 7) (re.range "0" "9")))(re.union (re.++ (str.to_re (str.++ "0" (str.++ "5" (str.++ "7" (str.++ "-" ""))))) ((_ re.loop 7 7) (re.range "0" "9")))(re.union (re.++ (str.to_re (str.++ "0" (str.++ "7" (str.++ "7" (str.++ "-" ""))))) ((_ re.loop 7 7) (re.range "0" "9")))(re.union (re.++ (str.to_re (str.++ "0" (str.++ "2" (str.++ "-" "")))) ((_ re.loop 7 7) (re.range "0" "9")))(re.union (re.++ (str.to_re (str.++ "0" (str.++ "3" (str.++ "-" "")))) ((_ re.loop 7 7) (re.range "0" "9")))(re.union (re.++ (str.to_re (str.++ "0" (str.++ "4" (str.++ "-" "")))) ((_ re.loop 7 7) (re.range "0" "9")))(re.union (re.++ (str.to_re (str.++ "0" (str.++ "8" (str.++ "-" "")))) ((_ re.loop 7 7) (re.range "0" "9")))(re.union (re.++ (str.to_re (str.++ "0" (str.++ "9" (str.++ "-" "")))) ((_ re.loop 7 7) (re.range "0" "9")))(re.union (re.++ (str.to_re (str.++ "0" (str.++ "5" (str.++ "0" "")))) ((_ re.loop 7 7) (re.range "0" "9")))(re.union (re.++ (str.to_re (str.++ "0" (str.++ "5" (str.++ "2" "")))) ((_ re.loop 7 7) (re.range "0" "9")))(re.union (re.++ (str.to_re (str.++ "0" (str.++ "5" (str.++ "4" "")))) ((_ re.loop 7 7) (re.range "0" "9")))(re.union (re.++ (str.to_re (str.++ "0" (str.++ "5" (str.++ "7" "")))) ((_ re.loop 7 7) (re.range "0" "9")))(re.union (re.++ (str.to_re (str.++ "0" (str.++ "7" (str.++ "7" "")))) ((_ re.loop 7 7) (re.range "0" "9")))(re.union (re.++ (str.to_re (str.++ "0" (str.++ "2" ""))) ((_ re.loop 7 7) (re.range "0" "9")))(re.union (re.++ (str.to_re (str.++ "0" (str.++ "3" ""))) ((_ re.loop 7 7) (re.range "0" "9")))(re.union (re.++ (str.to_re (str.++ "0" (str.++ "4" ""))) ((_ re.loop 7 7) (re.range "0" "9")))(re.union (re.++ (str.to_re (str.++ "0" (str.++ "8" ""))) ((_ re.loop 7 7) (re.range "0" "9"))) (re.++ (str.to_re (str.++ "0" (str.++ "9" "")))(re.++ ((_ re.loop 7 7) (re.range "0" "9")) (str.to_re ""))))))))))))))))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "\u{f5}" (str.++ "V" (str.++ "L" (str.++ "8" (str.++ "\u{8f}" (str.++ "y" (str.++ "c" (str.++ "6" (str.++ ":" (str.++ "8" (str.++ "3" (str.++ ":" (str.++ "6" (str.++ "9" (str.++ ":" (str.++ "5" (str.++ "8" (str.++ ":" (str.++ "F" (str.++ "8" (str.++ ":" (str.++ "e" (str.++ "a" ""))))))))))))))))))))))))

(define-fun Witness2 () String (str.++ "h" (str.++ "e" (str.++ "A" (str.++ ":" (str.++ "3" (str.++ "F" (str.++ ":" (str.++ "D" (str.++ "9" (str.++ ":" (str.++ "d" (str.++ "C" (str.++ ":" (str.++ "B" (str.++ "6" (str.++ ":" (str.++ "E" (str.++ "A" "")))))))))))))))))))

(assert (= regexA (re.++ ((_ re.loop 5 5) (re.++ ((_ re.loop 2 2) (re.union (re.range "0" "9") (re.union (re.range "A" "F") (re.range "a" "f")))) (re.range ":" ":"))) ((_ re.loop 2 2) (re.union (re.range "0" "9") (re.union (re.range "A" "F") (re.range "a" "f")))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "\u{1c}" (str.++ "\u{b2}" (str.++ "D" (str.++ "E" (str.++ "8" (str.++ "2" (str.++ " " (str.++ "2" (str.++ "9" (str.++ "9" (str.++ "9" (str.++ " " (str.++ "1" (str.++ "8" (str.++ "7" (str.++ "8" (str.++ " " (str.++ "9" (str.++ "3" (str.++ "8" (str.++ "6" (str.++ " " (str.++ "8" (str.++ "8" (str.++ "7" (str.++ "8" (str.++ " " (str.++ "9" (str.++ "2" (str.++ "\u{83}" (str.++ "\u{22}" ""))))))))))))))))))))))))))))))))

(define-fun Witness2 () String (str.++ "9" (str.++ "D" (str.++ "E" (str.++ "2" (str.++ "3" (str.++ " " (str.++ "8" (str.++ "5" (str.++ "7" (str.++ "9" (str.++ " " (str.++ "5" (str.++ "8" (str.++ "7" (str.++ "8" (str.++ " " (str.++ "9" (str.++ "8" (str.++ "7" (str.++ "9" (str.++ " " (str.++ "9" (str.++ "0" (str.++ "5" (str.++ "9" (str.++ " " (str.++ "9" (str.++ "9" (str.++ "\u{f2}" ""))))))))))))))))))))))))))))))

(assert (= regexA (re.union (re.++ (str.to_re (str.++ "D" (str.++ "E" "")))(re.++ ((_ re.loop 2 2) (re.range "0" "9"))(re.++ (re.range " " " ")(re.++ ((_ re.loop 4 4) (re.range "0" "9"))(re.++ (re.range " " " ")(re.++ ((_ re.loop 4 4) (re.range "0" "9"))(re.++ (re.range " " " ")(re.++ ((_ re.loop 4 4) (re.range "0" "9"))(re.++ (re.range " " " ")(re.++ ((_ re.loop 4 4) (re.range "0" "9"))(re.++ (re.range " " " ") ((_ re.loop 2 2) (re.range "0" "9"))))))))))))) (re.++ (str.to_re (str.++ "D" (str.++ "E" ""))) ((_ re.loop 20 20) (re.range "0" "9"))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "h" (str.++ "o" (str.++ "w" (str.++ " " (str.++ "t" (str.++ "o" (str.++ " " (str.++ "b" (str.++ "l" (str.++ "o" (str.++ "c" (str.++ "k" (str.++ " " (str.++ "p" (str.++ "d" (str.++ "f" (str.++ " " (str.++ "s" (str.++ "p" (str.++ "a" (str.++ "m" (str.++ "\u{c2}" (str.++ "." ""))))))))))))))))))))))))

(define-fun Witness2 () String (str.++ "\u{db}" (str.++ "h" (str.++ "o" (str.++ "w" (str.++ " " (str.++ "t" (str.++ "o" (str.++ " " (str.++ "b" (str.++ "l" (str.++ "o" (str.++ "c" (str.++ "k" (str.++ " " (str.++ "p" (str.++ "d" (str.++ "f" (str.++ " " (str.++ "s" (str.++ "p" (str.++ "a" (str.++ "m" (str.++ "\u{cc}" (str.++ "\u{0b}" "")))))))))))))))))))))))))

(assert (= regexA (str.to_re (str.++ "h" (str.++ "o" (str.++ "w" (str.++ " " (str.++ "t" (str.++ "o" (str.++ " " (str.++ "b" (str.++ "l" (str.++ "o" (str.++ "c" (str.++ "k" (str.++ " " (str.++ "p" (str.++ "d" (str.++ "f" (str.++ " " (str.++ "s" (str.++ "p" (str.++ "a" (str.++ "m" ""))))))))))))))))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "\u{a0}" (str.++ "\u{ae}" (str.++ "\u{e0}" (str.++ "\u{02}" (str.++ "1" (str.++ "." (str.++ "5" (str.++ "6" (str.++ "9" (str.++ ")" (str.++ "8" (str.++ "|" (str.++ "|" (str.++ "|" (str.++ "4" (str.++ "|" (str.++ "6" (str.++ "\u{94}" "")))))))))))))))))))

(define-fun Witness2 () String (str.++ "\u{90}" (str.++ "\u{19}" (str.++ "\u{a6}" (str.++ "8" (str.++ "8" (str.++ "7" (str.++ "\u{0c}" (str.++ "6" (str.++ "|" (str.++ "D" (str.++ "N" (str.++ "|" (str.++ "8" (str.++ "Q" "")))))))))))))))

(assert (= regexA (re.++ (re.opt (re.++ (re.opt (re.range "+" "+"))(re.++ (re.range "1" "1") (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "-" ".")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))))))(re.++ (re.opt (re.++ (re.opt (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))) (re.range "(" "(")))(re.++ (re.range "2" "9")(re.++ (re.range "0" "8")(re.++ (re.range "0" "9")(re.++ (re.opt (re.range ")" ")"))(re.++ (re.opt (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "-" ".")(re.union (re.range "|" "|")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))))(re.++ (re.range "2" "9")(re.++ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "|" "|")))(re.++ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "|" "|")))(re.++ (re.opt (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "-" ".")(re.union (re.range "|" "|")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))))(re.++ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "|" "|")))(re.++ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "|" "|")))(re.++ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "|" "|"))) (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "|" "|")))))))))))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "[" (str.++ "\u{0b}" (str.++ "&" (str.++ "l" (str.++ "t" (str.++ ";" (str.++ "i" (str.++ "m" (str.++ "g" (str.++ " " (str.++ "p" (str.++ "\u{07}" (str.++ " " (str.++ "s" (str.++ "r" (str.++ "c" (str.++ " " (str.++ "=" (str.++ "&" (str.++ "q" (str.++ "u" (str.++ "o" (str.++ "t" (str.++ ";" (str.++ "\u{a9}" (str.++ "&" (str.++ "q" (str.++ "u" (str.++ "o" (str.++ "t" (str.++ ";" (str.++ "\u{1e}" (str.++ "\u{f8}" ""))))))))))))))))))))))))))))))))))

(define-fun Witness2 () String (str.++ "&" (str.++ "l" (str.++ "t" (str.++ ";" (str.++ "i" (str.++ "m" (str.++ "g" (str.++ " " (str.++ "\u{18}" (str.++ "\u{02}" (str.++ "+" (str.++ "\u{87}" (str.++ " " (str.++ "s" (str.++ "r" (str.++ "c" (str.++ " " (str.++ "=" (str.++ " " (str.++ " " (str.++ " " (str.++ "&" (str.++ "q" (str.++ "u" (str.++ "o" (str.++ "t" (str.++ ";" (str.++ "\u{9b}" (str.++ "&" (str.++ "q" (str.++ "u" (str.++ "o" (str.++ "t" (str.++ ";" "")))))))))))))))))))))))))))))))))))

(assert (= regexA (re.++ (str.to_re (str.++ "&" (str.++ "l" (str.++ "t" (str.++ ";" (str.++ "i" (str.++ "m" (str.++ "g" (str.++ " " "")))))))))(re.++ (re.+ (re.union (re.range "\u{00}" "\u{09}") (re.range "\u{0b}" "\u{ff}")))(re.++ (str.to_re (str.++ " " (str.++ "s" (str.++ "r" (str.++ "c" "")))))(re.++ (re.* (re.range " " " "))(re.++ (re.range "=" "=")(re.++ (re.* (re.range " " " "))(re.++ (str.to_re (str.++ "&" (str.++ "q" (str.++ "u" (str.++ "o" (str.++ "t" (str.++ ";" "")))))))(re.++ (re.+ (re.union (re.range "\u{00}" "\u{09}") (re.range "\u{0b}" "\u{ff}"))) (str.to_re (str.++ "&" (str.++ "q" (str.++ "u" (str.++ "o" (str.++ "t" (str.++ ";" "")))))))))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "h" (str.++ "t" (str.++ "t" (str.++ "p" (str.++ ":" (str.++ "/" (str.++ "/" (str.++ "y" (str.++ "o" (str.++ "u" (str.++ "t" (str.++ "u" (str.++ "b" (str.++ "e" (str.++ "." (str.++ "8" (str.++ "\u{f5}" (str.++ "/" (str.++ "w" (str.++ "a" (str.++ "t" (str.++ "c" (str.++ "h" (str.++ "?" (str.++ "v" (str.++ "=" (str.++ "8" (str.++ "-" (str.++ "\u{aa}" (str.++ "P" (str.++ "G" (str.++ "\u{e7}" (str.++ "\u{aa}" (str.++ "h" (str.++ "8" (str.++ "\u{aa}" (str.++ "\u{ba}" (str.++ "\u{d4}" "")))))))))))))))))))))))))))))))))))))))

(define-fun Witness2 () String (str.++ "h" (str.++ "t" (str.++ "t" (str.++ "p" (str.++ ":" (str.++ "/" (str.++ "/" (str.++ "i" (str.++ "\u{e1}" (str.++ "y" (str.++ "o" (str.++ "u" (str.++ "t" (str.++ "u" (str.++ "b" (str.++ "e" (str.++ "e" (str.++ "." (str.++ "A" (str.++ "6" (str.++ "\u{aa}" (str.++ "/" (str.++ "w" (str.++ "a" (str.++ "t" (str.++ "c" (str.++ "h" (str.++ "?" (str.++ "v" (str.++ "=" (str.++ "-" (str.++ "\u{aa}" (str.++ "\u{b5}" (str.++ "\u{ba}" (str.++ "\u{fb}" (str.++ "_" (str.++ "i" (str.++ "Z" (str.++ "-" (str.++ "9" (str.++ "c" ""))))))))))))))))))))))))))))))))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (str.to_re (str.++ "h" (str.++ "t" (str.++ "t" (str.++ "p" (str.++ ":" (str.++ "/" (str.++ "/" ""))))))))(re.++ ((_ re.loop 0 3) (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))(re.++ (re.opt (re.union (re.range "\u{00}" "\u{09}") (re.range "\u{0b}" "\u{ff}")))(re.++ (str.to_re (str.++ "y" (str.++ "o" (str.++ "u" (str.++ "t" (str.++ "u" (str.++ "b" "")))))))(re.++ (re.+ (re.range "e" "e"))(re.++ (re.range "." ".")(re.++ ((_ re.loop 2 3) (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))(re.++ (str.to_re (str.++ "/" (str.++ "w" (str.++ "a" (str.++ "t" (str.++ "c" (str.++ "h" (str.++ "?" (str.++ "v" (str.++ "=" "")))))))))) ((_ re.loop 11 11) (re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))))))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "n" (str.++ " " (str.++ " " (str.++ " " (str.++ " " (str.++ " " (str.++ " " (str.++ " " (str.++ "#" (str.++ " " (str.++ "o" (str.++ "t" (str.++ "h" (str.++ "e" (str.++ "r" (str.++ "w" (str.++ "i" (str.++ "s" (str.++ "e" (str.++ " " (str.++ "a" (str.++ "c" (str.++ "c" (str.++ "e" (str.++ "p" (str.++ "t" (str.++ " " (str.++ "d" (str.++ "e" (str.++ "c" (str.++ "i" (str.++ "m" (str.++ "a" (str.++ "l" (str.++ " " (str.++ "n" (str.++ "u" (str.++ "m" (str.++ "b" (str.++ "e" (str.++ "r" (str.++ " " (str.++ "b" (str.++ "e" (str.++ "t" (str.++ "w" (str.++ "e" (str.++ "e" (str.++ "n" (str.++ " " (str.++ "0" (str.++ " " (str.++ "-" (str.++ " " (str.++ "1" (str.++ "0" (str.++ "4" (str.++ "8" (str.++ "5" (str.++ "7" (str.++ "5" ""))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(define-fun Witness2 () String (str.++ " " (str.++ " " (str.++ " " (str.++ " " (str.++ " " ""))))))

(assert (= regexA (re.union (str.to_re (str.++ " " (str.++ " " (str.++ " " (str.++ " " (str.++ " " "")))))) (str.to_re (str.++ " " (str.++ " " (str.++ " " (str.++ " " (str.++ " " (str.++ " " (str.++ " " (str.++ "#" (str.++ " " (str.++ "o" (str.++ "t" (str.++ "h" (str.++ "e" (str.++ "r" (str.++ "w" (str.++ "i" (str.++ "s" (str.++ "e" (str.++ " " (str.++ "a" (str.++ "c" (str.++ "c" (str.++ "e" (str.++ "p" (str.++ "t" (str.++ " " (str.++ "d" (str.++ "e" (str.++ "c" (str.++ "i" (str.++ "m" (str.++ "a" (str.++ "l" (str.++ " " (str.++ "n" (str.++ "u" (str.++ "m" (str.++ "b" (str.++ "e" (str.++ "r" (str.++ " " (str.++ "b" (str.++ "e" (str.++ "t" (str.++ "w" (str.++ "e" (str.++ "e" (str.++ "n" (str.++ " " (str.++ "0" (str.++ " " (str.++ "-" (str.++ " " (str.++ "1" (str.++ "0" (str.++ "4" (str.++ "8" (str.++ "5" (str.++ "7" (str.++ "5" ""))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "\u{f7}" (str.++ "P" (str.++ "a" (str.++ "s" (str.++ "s" (str.++ "w" (str.++ "o" (str.++ "r" (str.++ "d" (str.++ "=" (str.++ "&" (str.++ "q" (str.++ "u" (str.++ "o" (str.++ "t" (str.++ ";" (str.++ "0" (str.++ "&" (str.++ "q" (str.++ "u" (str.++ "o" (str.++ "t" (str.++ ";" ""))))))))))))))))))))))))

(define-fun Witness2 () String (str.++ "R" (str.++ "\u{e0}" (str.++ "G" (str.++ "<" (str.++ "P" (str.++ "a" (str.++ "s" (str.++ "s" (str.++ "w" (str.++ "o" (str.++ "r" (str.++ "d" (str.++ "=" (str.++ "&" (str.++ "q" (str.++ "u" (str.++ "o" (str.++ "t" (str.++ ";" (str.++ "A" (str.++ "&" (str.++ "q" (str.++ "u" (str.++ "o" (str.++ "t" (str.++ ";" "")))))))))))))))))))))))))))

(assert (= regexA (re.++ (str.to_re (str.++ "P" (str.++ "a" (str.++ "s" (str.++ "s" (str.++ "w" (str.++ "o" (str.++ "r" (str.++ "d" (str.++ "=" (str.++ "&" (str.++ "q" (str.++ "u" (str.++ "o" (str.++ "t" (str.++ ";" ""))))))))))))))))(re.++ (re.union (re.++ (re.range "{" "{")(re.++ (re.+ (re.union (re.range "\u{00}" "\u{09}") (re.range "\u{0b}" "\u{ff}")))(re.++ (re.range "}" "}")(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))) (re.* (re.range "=" "=")))))) (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z"))))) (str.to_re (str.++ "&" (str.++ "q" (str.++ "u" (str.++ "o" (str.++ "t" (str.++ ";" "")))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "P" (str.++ "}" (str.++ " " (str.++ " " (str.++ "-" (str.++ "7" (str.++ "9" (str.++ "." "")))))))))

(define-fun Witness2 () String (str.++ " " (str.++ " " (str.++ "-" (str.++ "\u{8c}" (str.++ "\u{82}" (str.++ "\u{b1}" "")))))))

(assert (= regexA (re.++ (str.to_re (str.++ " " (str.++ " " (str.++ "-" ""))))(re.++ ((_ re.loop 0 2) (re.range "0" "9")) (re.opt (re.++ (re.range "." ".") ((_ re.loop 0 2) (re.range "0" "9"))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "&" (str.++ "l" (str.++ "t" (str.++ ";" (str.++ "/" (str.++ "\u{aa}" (str.++ "f" (str.++ "\u{b5}" (str.++ "\u{aa}" (str.++ "\u{aa}" (str.++ "\u{b5}" (str.++ "&" (str.++ "g" (str.++ "t" (str.++ ";" (str.++ "e" "")))))))))))))))))

(define-fun Witness2 () String (str.++ ";" (str.++ "&" (str.++ "l" (str.++ "t" (str.++ ";" (str.++ "9" (str.++ "&" (str.++ "g" (str.++ "t" (str.++ ";" (str.++ "z" (str.++ "K" (str.++ "\u{a1}" ""))))))))))))))

(assert (= regexA (re.++ (str.to_re (str.++ "&" (str.++ "l" (str.++ "t" (str.++ ";" "")))))(re.++ (re.opt (re.range "/" "/"))(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))(re.++ (re.* (re.++ (re.+ (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))(re.++ (re.range "=" "=") (re.union (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))(re.union (re.++ (str.to_re (str.++ "&" (str.++ "q" (str.++ "u" (str.++ "o" (str.++ "t" (str.++ ";" "")))))))(re.++ (re.* (re.union (re.range "\u{00}" "%")(re.union (re.range "'" ":")(re.union (re.range "<" "n")(re.union (re.range "p" "p")(re.union (re.range "r" "s") (re.range "v" "\u{ff}"))))))) (str.to_re (str.++ "&" (str.++ "q" (str.++ "u" (str.++ "o" (str.++ "t" (str.++ ";" ""))))))))) (re.++ (re.range "'" "'")(re.++ (re.* (re.union (re.range "\u{00}" "&") (re.range "(" "\u{ff}"))) (re.range "'" "'"))))))))) (str.to_re (str.++ "&" (str.++ "g" (str.++ "t" (str.++ ";" "")))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "\u{f1}" (str.++ "\u{d9}" (str.++ "\u{ff}" (str.++ "w" (str.++ "w" (str.++ "w" (str.++ "." (str.++ "A" (str.++ "j" ""))))))))))

(define-fun Witness2 () String (str.++ "E" (str.++ "w" (str.++ "w" (str.++ "w" (str.++ "." (str.++ "~" (str.++ "9" (str.++ "." (str.++ ":" ""))))))))))

(assert (= regexA (re.++ ((_ re.loop 3 3) (re.range "w" "w"))(re.++ (re.range "." ".")(re.++ (re.+ (re.union (re.range "!" "!")(re.union (re.range "#" "(")(re.union (re.range "*" "+")(re.union (re.range "-" ";")(re.union (re.range "=" "=")(re.union (re.range "?" "?")(re.union (re.range "A" "]")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "|" "|") (re.range "~" "~"))))))))))))(re.++ (re.union (re.range "." ".")(re.union (re.range "a" "z") (re.range "|" "|"))) (re.* (re.union (re.range "!" "!")(re.union (re.range "#" "(")(re.union (re.range "*" "+")(re.union (re.range "-" ";")(re.union (re.range "=" "=")(re.union (re.range "?" "?")(re.union (re.range "A" "]")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "|" "|") (re.range "~" "~"))))))))))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "9" (str.++ "8" (str.++ "\u{b2}" (str.++ "\u{0a}" "")))))

(define-fun Witness2 () String (str.++ "\u{0d}" (str.++ "9" (str.++ "5" (str.++ "\u{ed}" (str.++ "\u{b9}" (str.++ "\u{01}" "")))))))

(assert (= regexA (re.++ (re.range "9" "9") (re.range "0" "9"))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "^" (str.++ "\u{97}" (str.++ "\u{f9}" (str.++ "1" (str.++ "1" (str.++ "1" (str.++ "1" (str.++ "\u{15}" "")))))))))

(define-fun Witness2 () String (str.++ "8" (str.++ "8" (str.++ "8" (str.++ "E" "")))))

(assert (= regexA (re.union (re.++ ((_ re.loop 3 3) (re.range "0" "0")) (re.* (re.range "0" "0")))(re.union (re.++ ((_ re.loop 3 3) (re.range "1" "1")) (re.* (re.range "1" "1")))(re.union (re.++ ((_ re.loop 3 3) (re.range "2" "2")) (re.* (re.range "2" "2")))(re.union (re.++ ((_ re.loop 3 3) (re.range "3" "3")) (re.* (re.range "3" "3")))(re.union (re.++ ((_ re.loop 3 3) (re.range "4" "4")) (re.* (re.range "4" "4")))(re.union (re.++ ((_ re.loop 3 3) (re.range "5" "5")) (re.* (re.range "5" "5")))(re.union (re.++ ((_ re.loop 3 3) (re.range "6" "6")) (re.* (re.range "6" "6")))(re.union (re.++ ((_ re.loop 3 3) (re.range "7" "7")) (re.* (re.range "7" "7")))(re.union (re.++ ((_ re.loop 3 3) (re.range "8" "8")) (re.* (re.range "8" "8"))) (re.++ ((_ re.loop 3 3) (re.range "9" "9")) (re.* (re.range "9" "9"))))))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "\u{11}" (str.++ "9" (str.++ "3" (str.++ "/" (str.++ "4" (str.++ "\u{1f}" (str.++ "U" (str.++ "k" (str.++ "\u{bb}" ""))))))))))

(define-fun Witness2 () String (str.++ "8" (str.++ "5" (str.++ "9" (str.++ "9" (str.++ "/" (str.++ "1" (str.++ "0" (str.++ "9" "")))))))))

(assert (= regexA (re.++ (re.+ (re.range "0" "9")) (re.opt (re.++ (re.range "/" "/") (re.+ (re.range "0" "9")))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "+" (str.++ "\u{19}" (str.++ "\u{ba}" (str.++ "." (str.++ "a" (str.++ "e" (str.++ "r" (str.++ "o" (str.++ "a" (str.++ "e" (str.++ "r" (str.++ "o" (str.++ "o" (str.++ "\u{b5}" (str.++ "?" (str.++ "=" (str.++ "+" (str.++ "&" (str.++ "=" (str.++ "&" (str.++ "=" (str.++ "2" "")))))))))))))))))))))))

(define-fun Witness2 () String (str.++ "\u{9f}" (str.++ "h" (str.++ "t" (str.++ "t" (str.++ "p" (str.++ ":" (str.++ "/" (str.++ "/" (str.++ "k" (str.++ "\u{b5}" (str.++ "." (str.++ "." (str.++ "i" (str.++ "n" (str.++ "f" (str.++ "o" (str.++ "c" (str.++ "o" (str.++ "o" (str.++ "p" (str.++ "a" (str.++ "e" (str.++ "r" (str.++ "o" (str.++ ":" (str.++ "2" (str.++ "\u{12}" (str.++ "\u{bf}" (str.++ "7" (str.++ "c" (str.++ "\u{95}" ""))))))))))))))))))))))))))))))))

(assert (= regexA (re.++ (re.opt (re.++ (re.union (str.to_re (str.++ "h" (str.++ "t" (str.++ "t" (str.++ "p" "")))))(re.union (str.to_re (str.++ "f" (str.++ "t" (str.++ "p" ""))))(re.union (str.to_re (str.++ "h" (str.++ "t" (str.++ "t" (str.++ "p" (str.++ "s" "")))))) (str.to_re (str.++ "f" (str.++ "t" (str.++ "p" (str.++ "s" "")))))))) (str.to_re (str.++ ":" (str.++ "/" (str.++ "/" ""))))))(re.++ (re.++ (re.+ (re.union (re.range "-" ".")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))))(re.++ (re.range "." ".")(re.++ (re.+ (re.union ((_ re.loop 1 3) (re.range "0" "9"))(re.union ((_ re.loop 2 3) (re.union (re.range "A" "Z") (re.range "a" "z"))) (re.union (str.to_re (str.++ "a" (str.++ "e" (str.++ "r" (str.++ "o" "")))))(re.union (str.to_re (str.++ "c" (str.++ "o" (str.++ "o" (str.++ "p" "")))))(re.union (str.to_re (str.++ "i" (str.++ "n" (str.++ "f" (str.++ "o" "")))))(re.union (str.to_re (str.++ "m" (str.++ "u" (str.++ "s" (str.++ "e" (str.++ "u" (str.++ "m" ""))))))) (str.to_re (str.++ "n" (str.++ "a" (str.++ "m" (str.++ "e" ""))))))))))))(re.++ (re.opt (re.++ (re.range ":" ":") (re.+ (re.range "0" "9")))) (re.opt (re.range "/" "/")))))) (re.opt (re.++ (re.++ (re.* (re.union (re.range "#" "#")(re.union (re.range "%" "%")(re.union (re.range "+" ":")(re.union (re.range "@" "Z")(re.union (re.range "^" "_")(re.union (re.range "a" "z")(re.union (re.range "~" "~")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))))) (re.union (re.range "#" "#")(re.union (re.range "%" "%")(re.union (re.range "+" "+")(re.union (re.range "-" "-")(re.union (re.range "/" "9")(re.union (re.range "@" "Z")(re.union (re.range "^" "_")(re.union (re.range "a" "z")(re.union (re.range "~" "~")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))))))) (re.opt (re.++ (re.+ (re.++ (re.range "?" "?")(re.++ (re.* (re.union (re.range "#" "%")(re.union (re.range "'" "'")(re.union (re.range "+" ".")(re.union (re.range "0" "9")(re.union (re.range "A" "[")(re.union (re.range "]" "]")(re.union (re.range "_" "_")(re.union (re.range "a" "z") (re.range "~" "~"))))))))))(re.++ (re.range "=" "=") (re.* (re.union (re.range "#" "%")(re.union (re.range "'" "'")(re.union (re.range "+" ".")(re.union (re.range "0" "9")(re.union (re.range "A" "[")(re.union (re.range "]" "]")(re.union (re.range "_" "_")(re.union (re.range "a" "z") (re.range "~" "~")))))))))))))) (re.* (re.++ (re.range "&" "&")(re.++ (re.* (re.union (re.range "#" "%")(re.union (re.range "'" "'")(re.union (re.range "+" ".")(re.union (re.range "0" "9")(re.union (re.range "A" "[")(re.union (re.range "]" "]")(re.union (re.range "_" "_")(re.union (re.range "a" "z") (re.range "~" "~"))))))))))(re.++ (re.range "=" "=") (re.* (re.union (re.range "#" "%")(re.union (re.range "'" "'")(re.union (re.range "+" ".")(re.union (re.range "0" "9")(re.union (re.range "A" "[")(re.union (re.range "]" "]")(re.union (re.range "_" "_")(re.union (re.range "a" "z") (re.range "~" "~"))))))))))))))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "(" (str.++ "I" (str.++ "N" (str.++ "S" (str.++ "E" (str.++ "R" (str.++ "T" (str.++ " " (str.++ "I" (str.++ "N" (str.++ "T" (str.++ "O" (str.++ "\u{a0}" (str.++ "\u{85}" (str.++ "\u{cd}" (str.++ "\u{a0}" (str.++ "(" (str.++ "\u{f6}" (str.++ "\u{c6}" (str.++ ")" (str.++ " " (str.++ "V" (str.++ "A" (str.++ "L" (str.++ "U" (str.++ "E" (str.++ "S" (str.++ "\u{0a}" (str.++ "(" (str.++ "\u{e8}" (str.++ ")" (str.++ ";" (str.++ "\u{85}" (str.++ "\u{de}" "")))))))))))))))))))))))))))))))))))

(define-fun Witness2 () String (str.++ "\u{e2}" (str.++ "I" (str.++ "N" (str.++ "S" (str.++ "E" (str.++ "R" (str.++ "T" (str.++ " " (str.++ "I" (str.++ "N" (str.++ "T" (str.++ "O" (str.++ "\u{a0}" (str.++ "_" (str.++ "j" (str.++ "1" (str.++ "\u{aa}" (str.++ "\u{ce}" (str.++ "8" (str.++ "8" (str.++ "\u{85}" (str.++ "\u{85}" (str.++ "\u{a0}" (str.++ "(" (str.++ "\u{85}" (str.++ ")" (str.++ "\u{a0}" (str.++ "\u{a0}" (str.++ "\u{0d}" (str.++ "V" (str.++ "A" (str.++ "L" (str.++ "U" (str.++ "E" (str.++ "S" (str.++ " " (str.++ "(" (str.++ "\u{ea}" (str.++ "\u{c6}" (str.++ ")" (str.++ ";" (str.++ "(" (str.++ "\u{85}" (str.++ "A" (str.++ "\u{fd}" (str.++ ")" (str.++ "," (str.++ ";" (str.++ "\u{ec}" ""))))))))))))))))))))))))))))))))))))))))))))))))))

(assert (= regexA (re.++ (re.++ (str.to_re (str.++ "I" (str.++ "N" (str.++ "S" (str.++ "E" (str.++ "R" (str.++ "T" (str.++ " " (str.++ "I" (str.++ "N" (str.++ "T" (str.++ "O" "")))))))))))) (re.+ (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))))(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))(re.++ (re.++ (re.+ (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))) (re.range "(" "("))(re.++ (re.+ (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "*" ",")(re.union (re.range "0" "9")(re.union (re.range "?" "?")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{85}" "\u{85}")(re.union (re.range "\u{a0}" "\u{a0}")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))))))))(re.++ (re.++ (re.range ")" ")")(re.++ (re.+ (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (str.to_re (str.++ "V" (str.++ "A" (str.++ "L" (str.++ "U" (str.++ "E" (str.++ "S" ""))))))) (re.+ (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))))) (re.+ (re.++ (re.range "(" "(")(re.++ (re.+ (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "'" "'")(re.union (re.range "*" ",")(re.union (re.range "0" "9")(re.union (re.range "?" "?")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{85}" "\u{85}")(re.union (re.range "\u{a0}" "\u{a0}")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))))))))))(re.++ (re.range ")" ")")(re.++ (re.opt (re.range "," ","))(re.++ (re.opt (re.range ";" ";")) (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))))))))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "0" ""))

(define-fun Witness2 () String (str.++ "}" (str.++ "2" "")))

(assert (= regexA (re.union (re.++ (str.to_re "")(re.++ (re.range "0" "0")(re.++ (re.* (re.union (re.range "\u{00}" "\u{09}") (re.range "\u{0b}" "\u{ff}"))) (re.* (re.range "1" "9")))))(re.union (re.++ (str.to_re "")(re.++ (str.to_re (str.++ "8" (str.++ "6" ""))) (re.+ (re.range "0" "0"))))(re.union (re.++ (str.to_re "") (str.to_re (str.++ "8" (str.++ "6" (str.++ "1" (str.++ "3" ""))))))(re.union (re.union (re.range "\u{00}" "/") (re.range ":" "\u{ff}")) (re.range "0" "9")))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "+" (str.++ "9" (str.++ "c" (str.++ "l" (str.++ "o" (str.++ "s" (str.++ "e" (str.++ "s" (str.++ " " (str.++ "#" (str.++ "0" (str.++ "\u{c0}" "")))))))))))))

(define-fun Witness2 () String (str.++ "c" (str.++ "l" (str.++ "o" (str.++ "s" (str.++ "e" (str.++ "s" (str.++ " " (str.++ "#" (str.++ "8" (str.++ "8" (str.++ "8" (str.++ "4" (str.++ "7" (str.++ "\u{cb}" (str.++ "\u{d7}" ""))))))))))))))))

(assert (= regexA (re.++ (re.union (str.to_re (str.++ "r" (str.++ "e" (str.++ "f" (str.++ "s" "")))))(re.union (str.to_re (str.++ "r" (str.++ "e" (str.++ "f" (str.++ "e" (str.++ "r" (str.++ "e" (str.++ "n" (str.++ "c" (str.++ "e" (str.++ "s" "")))))))))))(re.union (str.to_re (str.++ "r" (str.++ "e" "")))(re.union (str.to_re (str.++ "c" (str.++ "l" (str.++ "o" (str.++ "s" (str.++ "e" (str.++ "s" "")))))))(re.union (str.to_re (str.++ "c" (str.++ "l" (str.++ "o" (str.++ "s" (str.++ "e" (str.++ "d" "")))))))(re.union (str.to_re (str.++ "c" (str.++ "l" (str.++ "o" (str.++ "s" (str.++ "e" ""))))))(re.union (str.to_re (str.++ "s" (str.++ "e" (str.++ "e" ""))))(re.union (str.to_re (str.++ "f" (str.++ "i" (str.++ "x" (str.++ "e" (str.++ "s" ""))))))(re.union (str.to_re (str.++ "f" (str.++ "i" (str.++ "x" (str.++ "e" (str.++ "d" ""))))))(re.union (str.to_re (str.++ "f" (str.++ "i" (str.++ "x" "")))) (str.to_re (str.++ "a" (str.++ "d" (str.++ "d" (str.++ "r" (str.++ "e" (str.++ "s" (str.++ "s" (str.++ "e" (str.++ "s" ""))))))))))))))))))))(re.++ (str.to_re (str.++ " " (str.++ "#" "")))(re.++ (re.+ (re.range "0" "9")) (re.* (re.++ (re.union (str.to_re (str.++ " " (str.++ "a" (str.++ "n" (str.++ "d" (str.++ " " ""))))))(re.union (str.to_re (str.++ "," (str.++ " " "")))(re.union (str.to_re (str.++ " " (str.++ "&" (str.++ " " "")))) (re.range " " " "))))(re.++ (re.range "#" "#") (re.+ (re.range "0" "9"))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ ">" (str.++ "." (str.++ "v" (str.++ "\u{c8}" "")))))

(define-fun Witness2 () String (str.++ "?" ""))

(assert (= regexA (re.++ (re.* (re.union (re.range "\u{00}" " ")(re.union (re.range "\u{22}" "-")(re.union (re.range "/" ">") (re.range "@" "\u{ff}"))))) (re.union (re.range "!" "!")(re.union (re.range "." ".") (re.range "?" "?"))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "<" (str.++ "h" (str.++ "6" (str.++ ">" (str.++ "\u{22}" (str.++ "<" (str.++ "/" (str.++ "h" (str.++ "3" (str.++ ">" "")))))))))))

(define-fun Witness2 () String (str.++ "N" (str.++ "\u{d9}" (str.++ "<" (str.++ "h" (str.++ "5" (str.++ ">" (str.++ "l" (str.++ "<" (str.++ "/" (str.++ "h" (str.++ "6" (str.++ ">" (str.++ "\u{fb}" ""))))))))))))))

(assert (= regexA (re.++ (str.to_re (str.++ "<" (str.++ "h" "")))(re.++ (re.range "1" "6")(re.++ (re.range ">" ">")(re.++ (re.* (re.union (re.range "\u{00}" ";") (re.range "=" "\u{ff}")))(re.++ (str.to_re (str.++ "<" (str.++ "/" (str.++ "h" ""))))(re.++ (re.range "1" "6") (re.range ">" ">")))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "f" (str.++ "t" (str.++ "p" (str.++ ":" (str.++ "/" (str.++ "/" (str.++ "w" (str.++ "w" (str.++ "w" (str.++ "." (str.++ "p" (str.++ "a" (str.++ ":" (str.++ "\u{b4}" "")))))))))))))))

(define-fun Witness2 () String (str.++ "o" (str.++ "f" (str.++ "t" (str.++ "p" (str.++ ":" (str.++ "/" (str.++ "/" (str.++ "-" (str.++ "?" (str.++ "\u{f7}" "")))))))))))

(assert (= regexA (re.++ (re.union (str.to_re (str.++ "h" (str.++ "t" (str.++ "t" (str.++ "p" "")))))(re.union (str.to_re (str.++ "f" (str.++ "t" (str.++ "p" ""))))(re.union (str.to_re (str.++ "g" (str.++ "o" (str.++ "p" (str.++ "h" (str.++ "e" (str.++ "r" "")))))))(re.union (str.to_re (str.++ "t" (str.++ "e" (str.++ "l" (str.++ "n" (str.++ "e" (str.++ "t" ""))))))) (str.to_re (str.++ "n" (str.++ "e" (str.++ "w" (str.++ "s" "")))))))))(re.++ (str.to_re (str.++ ":" (str.++ "/" (str.++ "/" ""))))(re.++ (re.opt (re.++ ((_ re.loop 3 3) (re.range "w" "w")) (re.range "." "."))) (re.+ (re.union (re.range "!" "!")(re.union (re.range "#" "(")(re.union (re.range "*" "+")(re.union (re.range "-" ";")(re.union (re.range "=" "=")(re.union (re.range "?" "?")(re.union (re.range "A" "]")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "|" "|") (re.range "~" "~")))))))))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "3" (str.++ "9" (str.++ "9" (str.++ "8" (str.++ "5" (str.++ "8" "")))))))

(define-fun Witness2 () String (str.++ "\u{19}" (str.++ "\u{d2}" (str.++ "1" (str.++ "8" (str.++ "9" (str.++ "9" (str.++ "9" (str.++ "8" (str.++ "\u{0d}" (str.++ "\u{94}" (str.++ "\u{fe}" ""))))))))))))

(assert (= regexA ((_ re.loop 6 6) (re.range "0" "9"))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "1" (str.++ "1" (str.++ "/" (str.++ "1" (str.++ "9" (str.++ "8" (str.++ "9" (str.++ "=" "")))))))))

(define-fun Witness2 () String (str.++ "\u{d7}" (str.++ "1" (str.++ "0" (str.++ "/" (str.++ "1" (str.++ "9" (str.++ "8" (str.++ "3" "")))))))))

(assert (= regexA (re.++ (re.union (re.++ (re.range "0" "0") (re.range "1" "9"))(re.union (str.to_re (str.++ "1" (str.++ "0" "")))(re.union (str.to_re (str.++ "1" (str.++ "1" ""))) (str.to_re (str.++ "1" (str.++ "2" ""))))))(re.++ (re.range "/" "/") (re.union (re.++ (str.to_re (str.++ "1" (str.++ "9" "")))(re.++ (re.range "0" "9") (re.range "0" "9"))) (re.++ (re.range "2" "2")(re.++ (re.range "0" "9")(re.++ (re.range "0" "9") (re.range "0" "9")))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "'" (str.++ "/" (str.++ "h" (str.++ "t" (str.++ "t" (str.++ "p" (str.++ ":" (str.++ "/" (str.++ "/" (str.++ "b" (str.++ "l" (str.++ "i" (str.++ "p" (str.++ "." (str.++ "t" (str.++ "v" (str.++ "/" (str.++ "f" (str.++ "i" (str.++ "l" (str.++ "e" (str.++ "/" (str.++ "8" (str.++ "9" (str.++ "5" (str.++ "B" (str.++ "/" (str.++ "'" "")))))))))))))))))))))))))))))

(define-fun Witness2 () String (str.++ "b" (str.++ "\u{95}" (str.++ "\u{c0}" (str.++ "'" (str.++ "/" (str.++ "h" (str.++ "t" (str.++ "t" (str.++ "p" (str.++ ":" (str.++ "/" (str.++ "/" (str.++ "b" (str.++ "l" (str.++ "i" (str.++ "p" (str.++ "." (str.++ "t" (str.++ "v" (str.++ "/" (str.++ "f" (str.++ "i" (str.++ "l" (str.++ "e" (str.++ "/" (str.++ "9" (str.++ "9" (str.++ "\u{1a}" (str.++ "b" (str.++ "/" (str.++ "'" ""))))))))))))))))))))))))))))))))

(assert (= regexA (re.++ (str.to_re (str.++ "'" (str.++ "/" (str.++ "h" (str.++ "t" (str.++ "t" (str.++ "p" (str.++ ":" (str.++ "/" (str.++ "/" ""))))))))))(re.++ (re.opt (str.to_re (str.++ "w" (str.++ "w" (str.++ "w" (str.++ "." ""))))))(re.++ (str.to_re (str.++ "b" (str.++ "l" (str.++ "i" (str.++ "p" (str.++ "." (str.++ "t" (str.++ "v" (str.++ "/" (str.++ "f" (str.++ "i" (str.++ "l" (str.++ "e" (str.++ "/" ""))))))))))))))(re.++ (re.+ (re.range "0" "9"))(re.++ (re.* (re.union (re.range "\u{00}" "\u{09}") (re.range "\u{0b}" "\u{ff}"))) (str.to_re (str.++ "/" (str.++ "'" ""))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "3" (str.++ "\u{7f}" (str.++ "\u{d8}" (str.++ "\u{aa}" "")))))

(define-fun Witness2 () String (str.++ "1" (str.++ "C" "")))

(assert (= regexA (re.union (re.range "0" "9")(re.union (re.range "\u{b2}" "\u{b3}")(re.union (re.range "\u{b9}" "\u{b9}") (re.range "\u{bc}" "\u{be}"))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "<" (str.++ "\u{b5}" (str.++ ">" ""))))

(define-fun Witness2 () String (str.++ "\u{fd}" (str.++ "\u{c3}" (str.++ "<" (str.++ "\u{aa}" (str.++ ">" ""))))))

(assert (= regexA (re.++ (re.range "<" "<")(re.++ (re.+ (re.union (re.range " " ";")(re.union (re.range "=" "=")(re.union (re.range "?" "?")(re.union (re.range "A" "_")(re.union (re.range "a" "}")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))) (re.range ">" ">")))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "\u{83}" (str.++ "\u{10}" (str.++ "+" (str.++ "1" (str.++ " " (str.++ "6" (str.++ "0" (str.++ "7" (str.++ " " (str.++ "8" (str.++ "8" (str.++ "9" (str.++ " " (str.++ "0" (str.++ "3" (str.++ "8" (str.++ "9" (str.++ " " (str.++ "\u{db}" (str.++ "p" "")))))))))))))))))))))

(define-fun Witness2 () String (str.++ "\u{c2}" (str.++ "6" (str.++ "9" (str.++ "9" (str.++ " " (str.++ "3" (str.++ "3" (str.++ "9" (str.++ " " (str.++ "7" (str.++ "2" (str.++ "5" (str.++ "5" (str.++ " " (str.++ "(" (str.++ "!" (str.++ "\u{08}" (str.++ "\u{e2}" "")))))))))))))))))))

(assert (= regexA (re.++ (re.opt (str.to_re (str.++ "+" (str.++ "1" (str.++ " " "")))))(re.++ ((_ re.loop 3 3) (re.range "0" "9"))(re.++ (re.range " " " ")(re.++ ((_ re.loop 3 3) (re.range "0" "9"))(re.++ (re.range " " " ")(re.++ ((_ re.loop 4 4) (re.range "0" "9")) (re.range " " " ")))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "E" (str.++ "8" (str.++ "1" (str.++ "e" (str.++ "7" (str.++ "j" (str.++ "U" ""))))))))

(define-fun Witness2 () String (str.++ "\u{f7}" (str.++ "B" (str.++ "b" (str.++ "b" (str.++ "n" (str.++ "D" (str.++ "\u{1f}" (str.++ "T" (str.++ "\u{85}" ""))))))))))

(assert (= regexA (re.union (re.++ (str.to_re "")(re.++ (re.union (re.range "B" "B") (re.range "b" "b"))(re.++ (re.union (re.range "F" "F") (re.range "f" "f"))(re.++ (re.union (re.range "P" "P") (re.range "p" "p"))(re.++ (re.union (re.range "O" "O") (re.range "o" "o"))(re.++ (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))) ((_ re.loop 1 4) (re.range "0" "9"))))))))(re.union (re.++ (str.to_re "")(re.++ (re.union (re.range "G" "G") (re.range "g" "g"))(re.++ (re.union (re.range "I" "I") (re.range "i" "i"))(re.++ (re.union (re.range "R" "R") (re.range "r" "r"))(re.++ (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (re.range "0" "0")(re.++ (re.union (re.range "A" "A") (re.range "a" "a"))(re.++ (re.union (re.range "A" "A") (re.range "a" "a")) (str.to_re "")))))))))(re.union (re.union (re.++ (re.union (re.range "A" "A") (re.range "a" "a"))(re.++ (re.union (re.range "S" "S") (re.range "s" "s"))(re.++ (re.union (re.range "C" "C") (re.range "c" "c")) (re.union (re.range "N" "N") (re.range "n" "n")))))(re.union (re.++ (re.union (re.range "B" "B") (re.range "b" "b"))(re.++ (re.union (re.range "B" "B") (re.range "b" "b"))(re.++ (re.union (re.range "N" "N") (re.range "n" "n")) (re.union (re.range "D" "D") (re.range "d" "d")))))(re.union (re.++ (re.union (re.range "B" "B") (re.range "b" "b"))(re.++ (re.union (re.range "I" "I") (re.range "i" "i"))(re.++ (re.union (re.range "Q" "Q") (re.range "q" "q")) (re.union (re.range "Q" "Q") (re.range "q" "q")))))(re.union (re.++ (re.union (re.range "F" "F") (re.range "f" "f"))(re.++ (re.union (re.range "I" "I") (re.range "i" "i"))(re.++ (re.union (re.range "Q" "Q") (re.range "q" "q")) (re.union (re.range "Q" "Q") (re.range "q" "q")))))(re.union (re.++ (re.union (re.range "P" "P") (re.range "p" "p"))(re.++ (re.union (re.range "C" "C") (re.range "c" "c"))(re.++ (re.union (re.range "R" "R") (re.range "r" "r")) (re.union (re.range "N" "N") (re.range "n" "n")))))(re.union (re.++ (re.union (re.range "S" "S") (re.range "s" "s"))(re.++ (re.union (re.range "I" "I") (re.range "i" "i"))(re.++ (re.union (re.range "Q" "Q") (re.range "q" "q")) (re.union (re.range "Q" "Q") (re.range "q" "q")))))(re.union (re.++ (re.union (re.range "S" "S") (re.range "s" "s"))(re.++ (re.union (re.range "T" "T") (re.range "t" "t"))(re.++ (re.union (re.range "H" "H") (re.range "h" "h")) (re.union (re.range "L" "L") (re.range "l" "l"))))) (re.++ (re.union (re.range "T" "T") (re.range "t" "t"))(re.++ (re.union (re.range "D" "D") (re.range "d" "d"))(re.++ (re.union (re.range "C" "C") (re.range "c" "c"))(re.++ (re.union (re.range "U" "U") (re.range "u" "u"))(re.++ (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (re.range "1" "1")(re.++ (re.union (re.range "Z" "Z") (re.range "z" "z")) (re.union (re.range "Z" "Z") (re.range "z" "z")))))))))))))))) (re.++ (str.to_re "")(re.++ (re.union (re.++ (re.union (re.range "A" "A") (re.range "a" "a")) (re.union (re.range "B" "B")(re.union (re.range "L" "L")(re.union (re.range "b" "b") (re.range "l" "l")))))(re.union (re.++ (re.union (re.range "B" "B") (re.range "b" "b")) (re.opt (re.union (re.range "A" "B")(re.union (re.range "D" "D")(re.union (re.range "H" "H")(re.union (re.range "L" "L")(re.union (re.range "N" "N")(re.union (re.range "R" "T")(re.union (re.range "a" "b")(re.union (re.range "d" "d")(re.union (re.range "h" "h")(re.union (re.range "l" "l")(re.union (re.range "n" "n") (re.range "r" "t"))))))))))))))(re.union (re.++ (re.union (re.range "C" "C") (re.range "c" "c")) (re.union (re.range "A" "B")(re.union (re.range "F" "F")(re.union (re.range "H" "H")(re.union (re.range "M" "M")(re.union (re.range "O" "O")(re.union (re.range "R" "R")(re.union (re.range "T" "T")(re.union (re.range "V" "W")(re.union (re.range "a" "b")(re.union (re.range "f" "f")(re.union (re.range "h" "h")(re.union (re.range "m" "m")(re.union (re.range "o" "o")(re.union (re.range "r" "r")(re.union (re.range "t" "t") (re.range "v" "w")))))))))))))))))(re.union (re.++ (re.union (re.range "D" "D") (re.range "d" "d")) (re.union (re.range "A" "A")(re.union (re.range "D" "E")(re.union (re.range "G" "H")(re.union (re.range "L" "L")(re.union (re.range "N" "N")(re.union (re.range "T" "T")(re.union (re.range "Y" "Y")(re.union (re.range "a" "a")(re.union (re.range "d" "e")(re.union (re.range "g" "h")(re.union (re.range "l" "l")(re.union (re.range "n" "n")(re.union (re.range "t" "t") (re.range "y" "y")))))))))))))))(re.union (re.++ (re.union (re.range "E" "E") (re.range "e" "e")) (re.opt (re.union (re.range "C" "C")(re.union (re.range "H" "H")(re.union (re.range "N" "N")(re.union (re.range "X" "X")(re.union (re.range "c" "c")(re.union (re.range "h" "h")(re.union (re.range "n" "n") (re.range "x" "x"))))))))))(re.union (re.++ (re.union (re.range "F" "F") (re.range "f" "f")) (re.union (re.range "K" "K")(re.union (re.range "Y" "Y")(re.union (re.range "k" "k") (re.range "y" "y")))))(re.union (re.++ (re.union (re.range "G" "G") (re.range "g" "g")) (re.opt (re.union (re.range "L" "L")(re.union (re.range "U" "U")(re.union (re.range "Y" "Y")(re.union (re.range "l" "l")(re.union (re.range "u" "u") (re.range "y" "y"))))))))(re.union (re.++ (re.union (re.range "H" "H") (re.range "h" "h")) (re.union (re.range "A" "A")(re.union (re.range "D" "D")(re.union (re.range "G" "G")(re.union (re.range "P" "P")(re.union (re.range "R" "S")(re.union (re.range "U" "U")(re.union (re.range "X" "X")(re.union (re.range "a" "a")(re.union (re.range "d" "d")(re.union (re.range "g" "g")(re.union (re.range "p" "p")(re.union (re.range "r" "s")(re.union (re.range "u" "u") (re.range "x" "x")))))))))))))))(re.union (re.++ (re.union (re.range "I" "I") (re.range "i" "i")) (re.union (re.range "G" "G")(re.union (re.range "M" "M")(re.union (re.range "P" "P")(re.union (re.range "V" "V")(re.union (re.range "g" "g")(re.union (re.range "m" "m")(re.union (re.range "p" "p") (re.range "v" "v")))))))))(re.union (re.union (re.range "E" "E")(re.union (re.range "J" "J")(re.union (re.range "e" "e") (re.range "j" "j"))))(re.union (re.++ (re.union (re.range "K" "K") (re.range "k" "k")) (re.union (re.range "A" "A")(re.union (re.range "T" "T")(re.union (re.range "W" "W")(re.union (re.range "Y" "Y")(re.union (re.range "a" "a")(re.union (re.range "t" "t")(re.union (re.range "w" "w") (re.range "y" "y")))))))))(re.union (re.++ (re.union (re.range "L" "L") (re.range "l" "l")) (re.opt (re.union (re.range "A" "A")(re.union (re.range "D" "E")(re.union (re.range "L" "L")(re.union (re.range "N" "N")(re.union (re.range "S" "S")(re.union (re.range "U" "U")(re.union (re.range "a" "a")(re.union (re.range "d" "e")(re.union (re.range "l" "l")(re.union (re.range "n" "n")(re.union (re.range "s" "s") (re.range "u" "u"))))))))))))))(re.union (re.++ (re.union (re.range "M" "M") (re.range "m" "m")) (re.opt (re.union (re.range "E" "E")(re.union (re.range "K" "L")(re.union (re.range "e" "e") (re.range "k" "l"))))))(re.union (re.++ (re.union (re.range "N" "N") (re.range "n" "n")) (re.opt (re.union (re.range "E" "E")(re.union (re.range "G" "G")(re.union (re.range "N" "N")(re.union (re.range "P" "P")(re.union (re.range "R" "R")(re.union (re.range "W" "W")(re.union (re.range "e" "e")(re.union (re.range "g" "g")(re.union (re.range "n" "n")(re.union (re.range "p" "p")(re.union (re.range "r" "r") (re.range "w" "w"))))))))))))))(re.union (re.++ (re.union (re.range "O" "O") (re.range "o" "o")) (re.union (re.range "L" "L")(re.union (re.range "X" "X")(re.union (re.range "l" "l") (re.range "x" "x")))))(re.union (re.++ (re.union (re.range "P" "P") (re.range "p" "p")) (re.union (re.range "A" "A")(re.union (re.range "E" "E")(re.union (re.range "H" "H")(re.union (re.range "L" "L")(re.union (re.range "O" "O")(re.union (re.range "R" "R")(re.union (re.range "a" "a")(re.union (re.range "e" "e")(re.union (re.range "h" "h")(re.union (re.range "l" "l")(re.union (re.range "o" "o") (re.range "r" "r")))))))))))))(re.union (re.++ (re.union (re.range "R" "R") (re.range "r" "r")) (re.union (re.range "G" "H")(re.union (re.range "M" "M")(re.union (re.range "g" "h") (re.range "m" "m")))))(re.union (re.++ (re.union (re.range "S" "S") (re.range "s" "s")) (re.opt (re.union (re.range "A" "A")(re.union (re.range "E" "E")(re.union (re.range "G" "G")(re.union (re.range "K" "P")(re.union (re.range "R" "T")(re.union (re.range "W" "W")(re.union (re.range "Y" "Y")(re.union (re.range "a" "a")(re.union (re.range "e" "e")(re.union (re.range "g" "g")(re.union (re.range "k" "p")(re.union (re.range "r" "t")(re.union (re.range "w" "w") (re.range "y" "y"))))))))))))))))(re.union (re.++ (re.union (re.range "T" "T") (re.range "t" "t")) (re.union (re.range "A" "A")(re.union (re.range "D" "D")(re.union (re.range "F" "F")(re.union (re.range "N" "N")(re.union (re.range "Q" "S")(re.union (re.range "W" "W")(re.union (re.range "a" "a")(re.union (re.range "d" "d")(re.union (re.range "f" "f")(re.union (re.range "n" "n")(re.union (re.range "q" "s") (re.range "w" "w")))))))))))))(re.union (re.union (re.range "B" "B")(re.union (re.range "U" "U")(re.union (re.range "b" "b") (re.range "u" "u"))))(re.union (re.++ (re.union (re.range "W" "W") (re.range "w" "w")) (re.opt (re.union (re.range "A" "D")(re.union (re.range "F" "H")(re.union (re.range "J" "K")(re.union (re.range "M" "N")(re.union (re.range "R" "W")(re.union (re.range "a" "d")(re.union (re.range "f" "h")(re.union (re.range "j" "k")(re.union (re.range "m" "n") (re.range "r" "w")))))))))))) (re.union (re.range "E" "E")(re.union (re.range "O" "O")(re.union (re.range "Y" "Z")(re.union (re.range "e" "e")(re.union (re.range "o" "o") (re.range "y" "z")))))))))))))))))))))))))))(re.++ (re.range "1" "9")(re.++ (re.opt (re.range "0" "9"))(re.++ (re.opt (re.union (re.range "A" "B")(re.union (re.range "E" "E")(re.union (re.range "H" "H")(re.union (re.range "M" "N")(re.union (re.range "P" "P")(re.union (re.range "R" "R")(re.union (re.range "V" "Y")(re.union (re.range "a" "b")(re.union (re.range "e" "e")(re.union (re.range "h" "h")(re.union (re.range "m" "n")(re.union (re.range "p" "p")(re.union (re.range "r" "r") (re.range "v" "y")))))))))))))))(re.++ (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (re.range "0" "9")(re.++ ((_ re.loop 2 2) (re.union (re.range "A" "B")(re.union (re.range "D" "H")(re.union (re.range "J" "J")(re.union (re.range "L" "L")(re.union (re.range "N" "N")(re.union (re.range "P" "U")(re.union (re.range "W" "Z")(re.union (re.range "a" "b")(re.union (re.range "d" "h")(re.union (re.range "j" "j")(re.union (re.range "l" "l")(re.union (re.range "n" "n")(re.union (re.range "p" "u") (re.range "w" "z"))))))))))))))) (str.to_re ""))))))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "\u{e1}" (str.++ "h" (str.++ "r" (str.++ "e" (str.++ "f" (str.++ "=" (str.++ "&" (str.++ "q" (str.++ "u" (str.++ "o" (str.++ "t" (str.++ ";" (str.++ "&" (str.++ "q" (str.++ "u" (str.++ "o" (str.++ "t" (str.++ ";" (str.++ "!" ""))))))))))))))))))))

(define-fun Witness2 () String (str.++ "h" (str.++ "r" (str.++ "e" (str.++ "f" (str.++ "\u{a0}" (str.++ " " (str.++ "=" (str.++ "\u{85}" (str.++ "\u{a0}" (str.++ "&" (str.++ "q" (str.++ "u" (str.++ "o" (str.++ "t" (str.++ ";" (str.++ "&" (str.++ "q" (str.++ "u" (str.++ "o" (str.++ "t" (str.++ ";" ""))))))))))))))))))))))

(assert (= regexA (re.++ (str.to_re (str.++ "h" (str.++ "r" (str.++ "e" (str.++ "f" "")))))(re.++ (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (re.range "=" "=")(re.++ (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (str.to_re (str.++ "&" (str.++ "q" (str.++ "u" (str.++ "o" (str.++ "t" (str.++ ";" "")))))))(re.++ (re.* (re.union (re.range "\u{00}" "\u{09}")(re.union (re.range "\u{0b}" "%")(re.union (re.range "'" ":")(re.union (re.range "<" "n")(re.union (re.range "p" "p")(re.union (re.range "r" "s") (re.range "v" "\u{ff}")))))))) (str.to_re (str.++ "&" (str.++ "q" (str.++ "u" (str.++ "o" (str.++ "t" (str.++ ";" "")))))))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "9" (str.++ "6" (str.++ "5" (str.++ "1" (str.++ "\u{ee}" ""))))))

(define-fun Witness2 () String (str.++ "2" (str.++ "8" (str.++ "1" (str.++ "0" "")))))

(assert (= regexA (re.union (re.++ (str.to_re "") (re.++ (re.range "0" "0")(re.++ (re.union (re.range "2" "2") (re.range "8" "9")) ((_ re.loop 2 2) (re.range "0" "9")))))(re.union (re.++ (re.union (re.range "1" "1")(re.union (re.range "3" "6") (re.range "8" "9"))) ((_ re.loop 3 3) (re.range "0" "9")))(re.union (re.++ (re.range "2" "2")(re.++ (re.range "0" "8") ((_ re.loop 2 2) (re.range "0" "9"))))(re.union (re.++ (str.to_re (str.++ "2" (str.++ "9" (str.++ "0" "")))) (re.range "0" "9"))(re.union (re.++ (str.to_re (str.++ "2" (str.++ "9" (str.++ "1" "")))) (re.range "0" "4"))(re.union (re.++ (re.range "7" "7")(re.++ (re.range "0" "4") ((_ re.loop 2 2) (re.range "0" "9")))) (re.++ (re.++ (re.range "7" "7")(re.++ (re.range "8" "9") ((_ re.loop 2 2) (re.range "0" "9")))) (str.to_re ""))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "\u{13}" (str.++ "N" (str.++ "L" (str.++ "-" (str.++ "9" (str.++ "9" (str.++ "9" (str.++ "9" (str.++ "8" (str.++ "9" (str.++ "4" (str.++ "7" (str.++ "4" (str.++ "B" (str.++ "6" (str.++ "8" (str.++ "\u{b7}" ""))))))))))))))))))

(define-fun Witness2 () String (str.++ "7" (str.++ "C" (str.++ "Z" (str.++ "-" (str.++ "9" (str.++ "9" (str.++ "8" (str.++ "6" (str.++ "8" (str.++ "8" (str.++ "3" (str.++ "6" (str.++ "\u{a1}" (str.++ "\u{1d}" (str.++ "J" (str.++ "\u{cc}" (str.++ "\u{96}" ""))))))))))))))))))

(assert (= regexA (re.union (re.++ (re.union (str.to_re (str.++ "D" (str.++ "K" "")))(re.union (str.to_re (str.++ "F" (str.++ "I" "")))(re.union (str.to_re (str.++ "H" (str.++ "U" "")))(re.union (str.to_re (str.++ "L" (str.++ "U" "")))(re.union (str.to_re (str.++ "M" (str.++ "T" ""))) (str.to_re (str.++ "S" (str.++ "I" ""))))))))(re.++ (re.opt (re.range "-" "-")) ((_ re.loop 8 8) (re.range "0" "9"))))(re.union (re.++ (re.union (str.to_re (str.++ "B" (str.++ "E" "")))(re.union (str.to_re (str.++ "E" (str.++ "E" "")))(re.union (str.to_re (str.++ "D" (str.++ "E" "")))(re.union (str.to_re (str.++ "E" (str.++ "L" "")))(re.union (str.to_re (str.++ "L" (str.++ "T" ""))) (str.to_re (str.++ "P" (str.++ "T" ""))))))))(re.++ (re.opt (re.range "-" "-")) ((_ re.loop 9 9) (re.range "0" "9"))))(re.union (re.++ (re.union (str.to_re (str.++ "P" (str.++ "L" ""))) (str.to_re (str.++ "S" (str.++ "K" ""))))(re.++ (re.opt (re.range "-" "-")) ((_ re.loop 10 10) (re.range "0" "9"))))(re.union (re.++ (re.union (str.to_re (str.++ "I" (str.++ "T" ""))) (str.to_re (str.++ "L" (str.++ "V" ""))))(re.++ (re.opt (re.range "-" "-")) ((_ re.loop 11 11) (re.range "0" "9"))))(re.union (re.++ (re.union (str.to_re (str.++ "L" (str.++ "T" ""))) (str.to_re (str.++ "S" (str.++ "E" ""))))(re.++ (re.opt (re.range "-" "-")) ((_ re.loop 12 12) (re.range "0" "9"))))(re.union (re.++ (str.to_re (str.++ "A" (str.++ "T" "")))(re.++ (re.opt (re.range "-" "-"))(re.++ (re.range "U" "U") ((_ re.loop 8 8) (re.range "0" "9")))))(re.union (re.++ (str.to_re (str.++ "C" (str.++ "Y" "")))(re.++ (re.opt (re.range "-" "-"))(re.++ ((_ re.loop 8 8) (re.range "0" "9")) (re.range "A" "Z"))))(re.union (re.++ (str.to_re (str.++ "C" (str.++ "Z" "")))(re.++ (re.opt (re.range "-" "-")) ((_ re.loop 8 10) (re.range "0" "9"))))(re.union (re.++ (str.to_re (str.++ "F" (str.++ "R" "")))(re.++ (re.opt (re.range "-" "-"))(re.++ ((_ re.loop 2 2) (re.union (re.range "0" "9")(re.union (re.range "A" "H")(re.union (re.range "J" "N") (re.range "P" "Z"))))) ((_ re.loop 9 9) (re.range "0" "9")))))(re.union (re.++ (str.to_re (str.++ "I" (str.++ "E" "")))(re.++ (re.opt (re.range "-" "-"))(re.++ (re.range "0" "9")(re.++ (re.union (re.range "0" "9") (re.range "A" "Z"))(re.++ ((_ re.loop 5 5) (re.range "0" "9")) (re.range "A" "Z"))))))(re.union (re.++ (str.to_re (str.++ "N" (str.++ "L" "")))(re.++ (re.opt (re.range "-" "-"))(re.++ ((_ re.loop 9 9) (re.range "0" "9"))(re.++ (re.range "B" "B") ((_ re.loop 2 2) (re.range "0" "9")))))) (re.++ (str.to_re (str.++ "E" (str.++ "S" "")))(re.++ (re.opt (re.range "-" "-"))(re.++ (re.union (re.range "0" "9") (re.range "A" "Z"))(re.++ ((_ re.loop 7 7) (re.range "0" "9")) (re.union (re.range "0" "9") (re.range "A" "Z")))))))))))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "\u{f4}" (str.++ "6" (str.++ "8" (str.++ "3" (str.++ "8" (str.++ ")" (str.++ " " (str.++ "0" (str.++ "8" (str.++ "9" (str.++ "-" (str.++ "-" (str.++ "1" (str.++ "1" (str.++ "9" (str.++ "7" "")))))))))))))))))

(define-fun Witness2 () String (str.++ "\u{bc}" (str.++ " " (str.++ " " (str.++ " " (str.++ " " (str.++ " " (str.++ "4" (str.++ "1" (str.++ "5" (str.++ " " (str.++ "0" (str.++ "0" (str.++ "6" (str.++ " " (str.++ "-" (str.++ " " (str.++ "-" (str.++ "-" (str.++ "2" (str.++ "6" (str.++ "8" (str.++ "9" (str.++ "\u{c7}" (str.++ "\u{a2}" "")))))))))))))))))))))))))

(assert (= regexA (re.++ (re.opt (re.range "+" "+"))(re.++ (re.* (re.range " " " "))(re.++ (re.opt (re.+ (re.range "0" "9")))(re.++ (re.* (re.union (re.range " " " ") (re.range "-" "-")))(re.++ (re.opt (re.range "(" "("))(re.++ (re.++ (re.range "2" "9") ((_ re.loop 2 2) (re.range "0" "9")))(re.++ (re.* (re.union (re.range " " " ")(re.union (re.range ")" ")") (re.range "-" "-"))))(re.++ ((_ re.loop 3 3) (re.range "0" "9"))(re.++ (re.* (re.union (re.range " " " ") (re.range "-" "-"))) ((_ re.loop 4 4) (re.range "0" "9")))))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "b" (str.++ "f" (str.++ "p" (str.++ "O" (str.++ "\u{85}" (str.++ "8" (str.++ "\u{0a}" ""))))))))

(define-fun Witness2 () String (str.++ "B" (str.++ "F" (str.++ "p" (str.++ "o" (str.++ " " (str.++ "9" (str.++ "^" ""))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.union (re.range "B" "B") (re.range "b" "b"))(re.++ (re.union (re.range "F" "F") (re.range "f" "f"))(re.++ (re.union (re.range "P" "P") (re.range "p" "p"))(re.++ (re.union (re.range "O" "O") (re.range "o" "o"))(re.++ (re.union (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))) (re.++ (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))(re.++ (str.to_re (str.++ "C" (str.++ "/" (str.++ "O" "")))) (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))))) ((_ re.loop 1 4) (re.range "0" "9"))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "1" (str.++ "2" (str.++ ":" (str.++ "4" (str.++ "8" (str.++ ":" (str.++ "1" (str.++ "5" (str.++ "\u{a0}" (str.++ "P" (str.++ "M" ""))))))))))))

(define-fun Witness2 () String (str.++ "4" (str.++ ":" (str.++ "4" (str.++ "9" (str.++ ":" (str.++ "4" (str.++ "2" (str.++ "\u{09}" (str.++ "P" (str.++ "M" (str.++ "X" (str.++ "R" "")))))))))))))

(assert (= regexA (re.++ (re.union (re.range "0" "9") (re.++ (re.range "1" "1") (re.range "0" "2")))(re.++ (re.range ":" ":")(re.++ (re.range "0" "5")(re.++ (re.range "0" "9")(re.++ (re.range ":" ":")(re.++ (re.range "0" "5")(re.++ (re.range "0" "9")(re.++ (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))) (re.union (str.to_re (str.++ "A" (str.++ "M" ""))) (str.to_re (str.++ "P" (str.++ "M" ""))))))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "\u{a8}" (str.++ "&" (str.++ "a" (str.++ "m" (str.++ "p" (str.++ ";" (str.++ "u" (str.++ "u" (str.++ "m" (str.++ "l" (str.++ ";" (str.++ "z" "")))))))))))))

(define-fun Witness2 () String (str.++ "\u{e3}" (str.++ "\u{19}" (str.++ "&" (str.++ "a" (str.++ "m" (str.++ "p" (str.++ ";" (str.++ "#" (str.++ "2" (str.++ "5" (str.++ "0" (str.++ ";" "")))))))))))))

(assert (= regexA (re.union (str.to_re (str.++ "&" (str.++ "#" (str.++ "2" (str.++ "1" (str.++ "7" (str.++ ";" "")))))))(re.union (str.to_re (str.++ "&" (str.++ "#" (str.++ "2" (str.++ "1" (str.++ "8" (str.++ ";" "")))))))(re.union (str.to_re (str.++ "&" (str.++ "#" (str.++ "2" (str.++ "1" (str.++ "9" (str.++ ";" "")))))))(re.union (str.to_re (str.++ "&" (str.++ "#" (str.++ "2" (str.++ "2" (str.++ "0" (str.++ ";" "")))))))(re.union (str.to_re (str.++ "&" (str.++ "#" (str.++ "2" (str.++ "4" (str.++ "9" (str.++ ";" "")))))))(re.union (str.to_re (str.++ "&" (str.++ "#" (str.++ "2" (str.++ "5" (str.++ "0" (str.++ ";" "")))))))(re.union (str.to_re (str.++ "&" (str.++ "#" (str.++ "2" (str.++ "5" (str.++ "1" (str.++ ";" "")))))))(re.union (str.to_re (str.++ "&" (str.++ "#" (str.++ "2" (str.++ "5" (str.++ "2" (str.++ ";" "")))))))(re.union (str.to_re (str.++ "&" (str.++ "#" (str.++ "1" (str.++ "8" (str.++ "1" (str.++ ";" "")))))))(re.union (str.to_re (str.++ "&" (str.++ "a" (str.++ "m" (str.++ "p" (str.++ ";" (str.++ "#" (str.++ "0" (str.++ "8" (str.++ "5" (str.++ ";" "")))))))))))(re.union (str.to_re (str.++ "&" (str.++ "a" (str.++ "m" (str.++ "p" (str.++ ";" (str.++ "#" (str.++ "1" (str.++ "1" (str.++ "7" (str.++ ";" "")))))))))))(re.union (str.to_re (str.++ "&" (str.++ "a" (str.++ "m" (str.++ "p" (str.++ ";" (str.++ "#" (str.++ "1" (str.++ "8" (str.++ "1" (str.++ ";" "")))))))))))(re.union (str.to_re (str.++ "&" (str.++ "a" (str.++ "m" (str.++ "p" (str.++ ";" (str.++ "m" (str.++ "i" (str.++ "c" (str.++ "r" (str.++ "o" (str.++ ";" ""))))))))))))(re.union (str.to_re (str.++ "&" (str.++ "a" (str.++ "m" (str.++ "p" (str.++ ";" (str.++ "#" (str.++ "2" (str.++ "1" (str.++ "7" (str.++ ";" "")))))))))))(re.union (str.to_re (str.++ "&" (str.++ "a" (str.++ "m" (str.++ "p" (str.++ ";" (str.++ "#" (str.++ "2" (str.++ "1" (str.++ "8" (str.++ ";" "")))))))))))(re.union (str.to_re (str.++ "&" (str.++ "a" (str.++ "m" (str.++ "p" (str.++ ";" (str.++ "#" (str.++ "2" (str.++ "1" (str.++ "9" (str.++ ";" "")))))))))))(re.union (str.to_re (str.++ "&" (str.++ "a" (str.++ "m" (str.++ "p" (str.++ ";" (str.++ "#" (str.++ "2" (str.++ "2" (str.++ "0" (str.++ ";" "")))))))))))(re.union (str.to_re (str.++ "&" (str.++ "a" (str.++ "m" (str.++ "p" (str.++ ";" (str.++ "U" (str.++ "g" (str.++ "r" (str.++ "a" (str.++ "v" (str.++ "e" (str.++ ";" "")))))))))))))(re.union (str.to_re (str.++ "&" (str.++ "a" (str.++ "m" (str.++ "p" (str.++ ";" (str.++ "U" (str.++ "a" (str.++ "c" (str.++ "u" (str.++ "t" (str.++ "e" (str.++ ";" "")))))))))))))(re.union (str.to_re (str.++ "&" (str.++ "a" (str.++ "m" (str.++ "p" (str.++ ";" (str.++ "U" (str.++ "c" (str.++ "i" (str.++ "r" (str.++ "c" (str.++ ";" ""))))))))))))(re.union (str.to_re (str.++ "&" (str.++ "a" (str.++ "m" (str.++ "p" (str.++ ";" (str.++ "U" (str.++ "u" (str.++ "m" (str.++ "l" (str.++ ";" "")))))))))))(re.union (str.to_re (str.++ "&" (str.++ "a" (str.++ "m" (str.++ "p" (str.++ ";" (str.++ "#" (str.++ "2" (str.++ "4" (str.++ "9" (str.++ ";" "")))))))))))(re.union (str.to_re (str.++ "&" (str.++ "a" (str.++ "m" (str.++ "p" (str.++ ";" (str.++ "#" (str.++ "2" (str.++ "5" (str.++ "0" (str.++ ";" "")))))))))))(re.union (str.to_re (str.++ "&" (str.++ "a" (str.++ "m" (str.++ "p" (str.++ ";" (str.++ "#" (str.++ "2" (str.++ "5" (str.++ "1" (str.++ ";" (str.++ "&" (str.++ "a" (str.++ "m" (str.++ "p" (str.++ ";" (str.++ "#" (str.++ "2" (str.++ "5" (str.++ "2" (str.++ ";" "")))))))))))))))))))))(re.union (str.to_re (str.++ "&" (str.++ "a" (str.++ "m" (str.++ "p" (str.++ ";" (str.++ "u" (str.++ "g" (str.++ "r" (str.++ "a" (str.++ "v" (str.++ "e" (str.++ ";" "")))))))))))))(re.union (str.to_re (str.++ "&" (str.++ "a" (str.++ "m" (str.++ "p" (str.++ ";" (str.++ "u" (str.++ "a" (str.++ "c" (str.++ "u" (str.++ "t" (str.++ "e" (str.++ ";" "")))))))))))))(re.union (str.to_re (str.++ "&" (str.++ "a" (str.++ "m" (str.++ "p" (str.++ ";" (str.++ "u" (str.++ "c" (str.++ "i" (str.++ "r" (str.++ "c" (str.++ ";" "")))))))))))) (str.to_re (str.++ "&" (str.++ "a" (str.++ "m" (str.++ "p" (str.++ ";" (str.++ "u" (str.++ "u" (str.++ "m" (str.++ "l" (str.++ ";" ""))))))))))))))))))))))))))))))))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "t" (str.++ "2" (str.++ "." (str.++ "2" (str.++ "0" (str.++ "." (str.++ "9" (str.++ "0" (str.++ "." (str.++ "1" (str.++ "8" (str.++ "\u{ff}" (str.++ "\u{02}" (str.++ "]" (str.++ "\u{1c}" (str.++ "\u{b3}" "")))))))))))))))))

(define-fun Witness2 () String (str.++ "9" (str.++ "8" (str.++ "." (str.++ "9" (str.++ "9" (str.++ "." (str.++ "8" (str.++ "9" (str.++ "." (str.++ "7" (str.++ "<" (str.++ "i" (str.++ "\u{96}" ""))))))))))))))

(assert (= regexA (re.++ (re.range "0" "9")(re.++ (re.opt (re.range "0" "9"))(re.++ (re.opt (re.range "0" "9"))(re.++ (re.range "." ".")(re.++ (re.range "0" "9")(re.++ (re.opt (re.range "0" "9"))(re.++ (re.opt (re.range "0" "9"))(re.++ (re.range "." ".")(re.++ (re.range "0" "9")(re.++ (re.opt (re.range "0" "9"))(re.++ (re.opt (re.range "0" "9"))(re.++ (re.range "." ".")(re.++ (re.range "0" "9")(re.++ (re.opt (re.range "0" "9")) (re.opt (re.range "0" "9"))))))))))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "T" (str.++ "\u{86}" "")))

(define-fun Witness2 () String (str.++ "g" (str.++ "0" (str.++ "1" (str.++ "Q" "")))))

(assert (= regexA (re.union (re.++ (str.to_re "")(re.++ (re.union (re.range "A" "Z") (re.range "a" "z")) (re.* (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_") (re.range "a" "z"))))))) (re.++ (str.to_re "")(re.++ (re.range "_" "_") (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_") (re.range "a" "z"))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "\u{1e}" (str.++ "\u{ba}" (str.++ "'" (str.++ "9" (str.++ "@" (str.++ "8" (str.++ "\u{b5}" (str.++ "." (str.++ "\u{aa}" (str.++ "-" (str.++ "z" (str.++ "." (str.++ "\u{ba}" (str.++ "o" (str.++ "2" (str.++ "z" (str.++ "\u{c8}" (str.++ "\u{c4}" "")))))))))))))))))))

(define-fun Witness2 () String (str.++ "\u{0c}" (str.++ "9" (str.++ "+" (str.++ "_" (str.++ "\u{ba}" (str.++ "r" (str.++ "@" (str.++ "C" (str.++ "-" (str.++ "j" (str.++ "." (str.++ "Z" (str.++ "\u{e8}" (str.++ "." (str.++ "\u{ee}" ""))))))))))))))))

(assert (= regexA (re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))(re.++ (re.* (re.++ (re.union (re.range "'" "'")(re.union (re.range "+" "+") (re.range "-" "."))) (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))))(re.++ (re.range "@" "@")(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))(re.++ (re.* (re.++ (re.range "-" ".") (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))))(re.++ (re.range "." ".")(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))) (re.* (re.++ (re.range "-" ".") (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))))))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "\u{94}" (str.++ "\u{b2}" (str.++ "\u{b5}" (str.++ "\u{a3}" (str.++ "g" (str.++ "e" (str.++ "t" (str.++ "t" (str.++ "i" (str.++ "n" (str.++ "g" (str.++ " " (str.++ "u" (str.++ "s" (str.++ "e" (str.++ "r" (str.++ "n" (str.++ "a" (str.++ "m" (str.++ "e" (str.++ " " (str.++ "f" (str.++ "r" (str.++ "o" (str.++ "m" (str.++ " " (str.++ "e" (str.++ "m" (str.++ "p" (str.++ "i" (str.++ "d" ""))))))))))))))))))))))))))))))))

(define-fun Witness2 () String (str.++ "Q" (str.++ "g" (str.++ "e" (str.++ "t" (str.++ "t" (str.++ "i" (str.++ "n" (str.++ "g" (str.++ " " (str.++ "u" (str.++ "s" (str.++ "e" (str.++ "r" (str.++ "n" (str.++ "a" (str.++ "m" (str.++ "e" (str.++ " " (str.++ "f" (str.++ "r" (str.++ "o" (str.++ "m" (str.++ " " (str.++ "e" (str.++ "m" (str.++ "p" (str.++ "i" (str.++ "d" "")))))))))))))))))))))))))))))

(assert (= regexA (str.to_re (str.++ "g" (str.++ "e" (str.++ "t" (str.++ "t" (str.++ "i" (str.++ "n" (str.++ "g" (str.++ " " (str.++ "u" (str.++ "s" (str.++ "e" (str.++ "r" (str.++ "n" (str.++ "a" (str.++ "m" (str.++ "e" (str.++ " " (str.++ "f" (str.++ "r" (str.++ "o" (str.++ "m" (str.++ " " (str.++ "e" (str.++ "m" (str.++ "p" (str.++ "i" (str.++ "d" ""))))))))))))))))))))))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "0" (str.++ "5" (str.++ "9" (str.++ "3" (str.++ "8" (str.++ "-" (str.++ "8" (str.++ "9" (str.++ "2" ""))))))))))

(define-fun Witness2 () String (str.++ "r" (str.++ "A" (str.++ "=" (str.++ "1" (str.++ "6" (str.++ "1" (str.++ "3" (str.++ "9" (str.++ "-" (str.++ "9" (str.++ "7" (str.++ "3" "")))))))))))))

(assert (= regexA (re.++ ((_ re.loop 5 5) (re.range "0" "9"))(re.++ (re.range "-" "-") ((_ re.loop 3 3) (re.range "0" "9"))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "O" (str.++ "\u{ce}" (str.++ "h" (str.++ "r" (str.++ "e" (str.++ "f" (str.++ "=" (str.++ "\u{0d}" (str.++ "\u{22}" (str.++ "/" (str.++ "i" (str.++ "/" (str.++ "\u{aa}" (str.++ "t" (str.++ "\u{22}" ""))))))))))))))))

(define-fun Witness2 () String (str.++ "d" (str.++ "\u{b8}" (str.++ "\u{85}" (str.++ "\u{cb}" (str.++ "\u{f7}" (str.++ "h" (str.++ "r" (str.++ "e" (str.++ "f" (str.++ "\u{85}" (str.++ "=" (str.++ "\u{22}" (str.++ "/" (str.++ "i" (str.++ "/" (str.++ "~" (str.++ "\u{22}" (str.++ "\u{ad}" (str.++ "\u{c1}" ""))))))))))))))))))))

(assert (= regexA (re.++ (str.to_re (str.++ "h" (str.++ "r" (str.++ "e" (str.++ "f" "")))))(re.++ (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (re.range "=" "=")(re.++ (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (re.range "\u{22}" "\u{22}")(re.++ (re.++ (re.range "/" "/")(re.++ (re.range "i" "i")(re.++ (re.+ (re.range "/" "/")) (re.* (re.++ (re.* (re.union (re.range "#" "#")(re.union (re.range "%" "&")(re.union (re.range "+" ";")(re.union (re.range "=" "=")(re.union (re.range "?" "Z")(re.union (re.range "^" "_")(re.union (re.range "a" "z")(re.union (re.range "~" "~")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))))))) (re.+ (re.union (re.range "#" "#")(re.union (re.range "%" "&")(re.union (re.range "+" "+")(re.union (re.range "-" "-")(re.union (re.range "/" "9")(re.union (re.range ";" ";")(re.union (re.range "=" "=")(re.union (re.range "?" "Z")(re.union (re.range "^" "_")(re.union (re.range "a" "z")(re.union (re.range "~" "~")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))))))))))))))) (re.range "\u{22}" "\u{22}")))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "\u{22}" (str.++ "k" (str.++ "8" (str.++ "H" (str.++ "\u{22}" (str.++ "?" (str.++ "\u{c3}" (str.++ "-" "")))))))))

(define-fun Witness2 () String (str.++ "\u{c8}" (str.++ "2" (str.++ "\u{22}" (str.++ "8" (str.++ "9" (str.++ "J" (str.++ "\u{22}" ""))))))))

(assert (= regexA (re.++ (re.range "\u{22}" "\u{22}")(re.++ ((_ re.loop 3 3) (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))) (re.range "\u{22}" "\u{22}")))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "," (str.++ "\u{b4}" (str.++ "\u{e3}" (str.++ "?" (str.++ "f" (str.++ "." (str.++ "." (str.++ "." (str.++ "." (str.++ "." (str.++ "." (str.++ "\u{b9}" (str.++ "\u{d8}" ""))))))))))))))

(define-fun Witness2 () String (str.++ "\u{ad}" ""))

(assert (= regexA (re.union (re.union (re.range "\u{00}" "-")(re.union (re.range "/" "/")(re.union (re.range ":" "?")(re.union (re.range "[" "^")(re.union (re.range "`" "`") (re.range "{" "\u{ff}"))))))(re.union (re.++ ((_ re.loop 2 2) (re.range "@" "@")) (re.* (re.range "@" "@"))) (re.++ ((_ re.loop 5 5) (re.range "." ".")) (re.* (re.range "." ".")))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "\u{ae}" (str.++ "\u{06}" (str.++ "\u{18}" (str.++ "2" (str.++ "9" (str.++ "." (str.++ "0" (str.++ "2" (str.++ "/" (str.++ "1" (str.++ "8" (str.++ "4" (str.++ "4" ""))))))))))))))

(define-fun Witness2 () String (str.++ "\u{a1}" (str.++ "\u{f7}" (str.++ "\u{03}" (str.++ "2" (str.++ "9" (str.++ "-" (str.++ "0" (str.++ "2" (str.++ "/" (str.++ "5" (str.++ "9" (str.++ "8" (str.++ "4" (str.++ "c" (str.++ "\u{bc}" (str.++ "\u{ae}" "")))))))))))))))))

(assert (= regexA (re.union (re.++ (re.union (re.++ (re.range "0" "0") (re.range "1" "9"))(re.union (re.++ (re.range "1" "2") (re.range "0" "9")) (re.++ (re.range "3" "3") (re.range "0" "1"))))(re.++ (re.range "-" "/")(re.++ (re.union (re.++ (re.range "0" "0") (re.union (re.range "1" "1")(re.union (re.range "3" "3")(re.union (re.range "5" "5") (re.range "7" "8")))))(re.union (str.to_re (str.++ "1" (str.++ "0" ""))) (str.to_re (str.++ "1" (str.++ "2" "")))))(re.++ (re.range "-" "/") ((_ re.loop 4 4) (re.range "0" "9"))))))(re.union (re.++ (re.union (re.++ (re.range "0" "0") (re.range "1" "9"))(re.union (re.++ (re.range "1" "2") (re.range "0" "9")) (str.to_re (str.++ "3" (str.++ "0" "")))))(re.++ (re.range "-" "/")(re.++ (re.union (re.++ (re.range "0" "0") (re.union (re.range "4" "4")(re.union (re.range "6" "6") (re.range "9" "9")))) (str.to_re (str.++ "1" (str.++ "1" ""))))(re.++ (re.range "-" "/") ((_ re.loop 4 4) (re.range "0" "9"))))))(re.union (re.++ (re.union (re.++ (re.range "0" "0") (re.range "1" "9"))(re.union (re.++ (re.range "1" "1") (re.range "0" "9")) (re.++ (re.range "2" "2") (re.range "0" "8"))))(re.++ (re.range "-" "/")(re.++ (str.to_re (str.++ "0" (str.++ "2" "")))(re.++ (re.range "-" "/") ((_ re.loop 4 4) (re.range "0" "9"))))))(re.union (re.++ (str.to_re (str.++ "2" (str.++ "9" "")))(re.++ (re.range "-" "/")(re.++ (str.to_re (str.++ "0" (str.++ "2" "")))(re.++ (re.range "-" "/") (re.++ (re.union (re.range "0" "0")(re.union (re.range "2" "2")(re.union (re.range "4" "4")(re.union (re.range "6" "6") (re.range "8" "8")))))(re.++ (re.union (re.range "0" "0")(re.union (re.range "4" "4") (re.range "8" "8"))) (str.to_re (str.++ "0" (str.++ "0" "")))))))))(re.union (re.++ (str.to_re (str.++ "2" (str.++ "9" "")))(re.++ (re.range "-" "/")(re.++ (str.to_re (str.++ "0" (str.++ "2" "")))(re.++ (re.range "-" "/") (re.++ (re.union (re.range "1" "1")(re.union (re.range "3" "3")(re.union (re.range "5" "5")(re.union (re.range "7" "7") (re.range "9" "9")))))(re.++ (re.union (re.range "2" "2") (re.range "6" "6")) (str.to_re (str.++ "0" (str.++ "0" "")))))))))(re.union (re.++ (str.to_re (str.++ "2" (str.++ "9" "")))(re.++ (re.range "-" "/")(re.++ (str.to_re (str.++ "0" (str.++ "2" "")))(re.++ (re.range "-" "/") (re.++ (re.range "0" "9")(re.++ (re.range "0" "9")(re.++ (re.range "0" "0") (re.union (re.range "4" "4") (re.range "8" "8")))))))))(re.union (re.++ (str.to_re (str.++ "2" (str.++ "9" "")))(re.++ (re.range "-" "/")(re.++ (str.to_re (str.++ "0" (str.++ "2" "")))(re.++ (re.range "-" "/") (re.++ (re.range "0" "9")(re.++ (re.range "0" "9")(re.++ (re.union (re.range "2" "2")(re.union (re.range "4" "4")(re.union (re.range "6" "6") (re.range "8" "8")))) (re.union (re.range "0" "0")(re.union (re.range "4" "4") (re.range "8" "8")))))))))) (re.++ (str.to_re (str.++ "2" (str.++ "9" "")))(re.++ (re.range "-" "/")(re.++ (str.to_re (str.++ "0" (str.++ "2" "")))(re.++ (re.range "-" "/") (re.++ (re.range "0" "9")(re.++ (re.range "0" "9")(re.++ (re.union (re.range "1" "1")(re.union (re.range "3" "3")(re.union (re.range "5" "5")(re.union (re.range "7" "7") (re.range "9" "9"))))) (re.union (re.range "2" "2") (re.range "6" "6"))))))))))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "1" (str.++ "9" (str.++ "3" (str.++ "6" (str.++ "-" (str.++ "1" (str.++ "2" (str.++ "-" (str.++ "0" (str.++ "1" (str.++ "J" ""))))))))))))

(define-fun Witness2 () String (str.++ "\u{0b}" (str.++ "2" (str.++ "0" (str.++ "9" (str.++ "8" (str.++ "-" (str.++ "1" (str.++ "2" (str.++ "-" (str.++ "0" (str.++ "6" ""))))))))))))

(assert (= regexA (re.++ (re.++ (re.union (str.to_re (str.++ "1" (str.++ "9" ""))) (str.to_re (str.++ "2" (str.++ "0" ""))))(re.++ (re.range "0" "9") (re.range "0" "9")))(re.++ (re.range "-" "-")(re.++ (re.union (re.++ (re.range "0" "0") (re.range "1" "9")) (re.++ (re.range "1" "1") (re.range "0" "2")))(re.++ (re.range "-" "-") (re.union (re.++ (re.range "0" "0") (re.range "1" "9"))(re.union (re.++ (re.range "1" "2") (re.range "0" "9")) (re.++ (re.range "3" "3") (re.range "0" "1"))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "\u{22}" (str.++ ";" (str.++ "[" (str.++ "C" (str.++ "4" (str.++ "\u{d8}" "")))))))

(define-fun Witness2 () String (str.++ "\u{09}" (str.++ "G" (str.++ ";" (str.++ "t" (str.++ "&" (str.++ "\u{bf}" (str.++ "v" ""))))))))

(assert (= regexA (re.++ (re.range ":" ";")(re.++ (re.opt (re.union (re.range "+" "+")(re.union (re.range "-" "-")(re.union (re.range "o" "o") (re.range "~" "~"))))) (re.+ (re.union (re.range "&" "&")(re.union (re.range "(" "(")(re.union (re.range ";" ";")(re.union (re.range "[" "[")(re.union (re.range "l" "l") (re.range "t" "t")))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "." (str.++ "," (str.++ "8" (str.++ "2" (str.++ "/" ""))))))

(define-fun Witness2 () String (str.++ "\u{be}" (str.++ "." (str.++ "r" (str.++ "s" (str.++ "," (str.++ "/" (str.++ "\u{e8}" (str.++ "\u{1f}" "")))))))))

(assert (= regexA (re.++ (re.range "." ".")(re.++ ((_ re.loop 3 4) (re.union (re.range "," ",")(re.union (re.range "1" "9") (re.range "a" "z")))) (re.range "/" "/")))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "\u{89}" (str.++ "K" (str.++ "G" (str.++ "I" (str.++ "R" (str.++ "\u{0d}" (str.++ "0" (str.++ "A" (str.++ "A" ""))))))))))

(define-fun Witness2 () String (str.++ "#" (str.++ "\u{0c}" (str.++ "G" (str.++ "I" (str.++ "R" (str.++ "0" (str.++ "A" (str.++ "A" "")))))))))

(assert (= regexA (re.union (re.++ (str.to_re "") (re.union (re.++ (re.union (re.range "A" "P")(re.union (re.range "R" "U")(re.union (re.range "W" "W") (re.range "Y" "Z")))) (re.++ (re.range "0" "9") (re.opt (re.union (re.range "0" "9")(re.union (re.range "A" "H")(re.union (re.range "J" "K")(re.union (re.range "S" "U") (re.range "W" "W")))))))) (re.++ (re.++ (re.++ (re.union (re.range "A" "P")(re.union (re.range "R" "U")(re.union (re.range "W" "W") (re.range "Y" "Z")))) (re.union (re.range "A" "H") (re.range "K" "Y"))) (re.++ (re.range "0" "9") (re.opt (re.union (re.range "0" "9")(re.union (re.range "A" "B")(re.union (re.range "E" "E")(re.union (re.range "H" "H")(re.union (re.range "M" "N")(re.union (re.range "P" "P")(re.union (re.range "R" "R") (re.range "V" "Y")))))))))))(re.++ ((_ re.loop 0 2) (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))) (re.++ (re.range "0" "9")(re.++ (re.union (re.range "A" "B")(re.union (re.range "D" "H")(re.union (re.range "J" "J")(re.union (re.range "L" "L")(re.union (re.range "N" "N")(re.union (re.range "P" "U") (re.range "W" "Z"))))))) (re.union (re.range "A" "B")(re.union (re.range "D" "H")(re.union (re.range "J" "J")(re.union (re.range "L" "L")(re.union (re.range "N" "N")(re.union (re.range "P" "U") (re.range "W" "Z"))))))))))))) (re.++ (re.++ (re.++ (str.to_re (str.++ "G" (str.++ "I" ""))) (re.range "R" "R"))(re.++ ((_ re.loop 0 2) (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))) (re.++ (re.range "0" "0")(re.++ (re.range "A" "A") (re.range "A" "A"))))) (str.to_re "")))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "6" (str.++ "," (str.++ "8" (str.++ "5" (str.++ "8" (str.++ "," (str.++ "7" (str.++ "8" (str.++ "8" ""))))))))))

(define-fun Witness2 () String (str.++ "4" (str.++ "\u{08}" (str.++ "/" (str.++ "2" (str.++ "3" ""))))))

(assert (= regexA (re.++ (re.union (re.++ ((_ re.loop 1 3) (re.range "0" "9"))(re.++ (re.range "," ",")(re.++ (re.* (re.++ ((_ re.loop 3 3) (re.range "0" "9")) (re.range "," ",")))(re.++ ((_ re.loop 3 3) (re.range "0" "9")) (re.opt (re.++ (re.range "." ".") ((_ re.loop 1 3) (re.range "0" "9")))))))) (re.++ ((_ re.loop 1 3) (re.range "0" "9")) (re.opt (re.++ (re.range "." ".") ((_ re.loop 3 3) (re.range "0" "9")))))) (str.to_re ""))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "e" ""))

(define-fun Witness2 () String (str.++ "e" (str.++ "v" (str.++ "i" (str.++ "O" (str.++ "^" (str.++ "}" (str.++ "c" (str.++ "?" "")))))))))

(assert (= regexA (re.++ (re.range "e" "e") (re.opt (re.++ (re.range "v" "v") (re.opt (re.range "i" "i")))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "9" (str.++ "0" (str.++ "5" (str.++ "8" (str.++ "9" (str.++ "1" (str.++ "8" (str.++ "\u{a0}" (str.++ "9" (str.++ "4" (str.++ "9" (str.++ "9" "")))))))))))))

(define-fun Witness2 () String (str.++ "9" (str.++ "2" (str.++ "0" (str.++ "0" (str.++ "9" (str.++ "9" (str.++ "4" (str.++ " " (str.++ "8" (str.++ "5" (str.++ "9" (str.++ "9" (str.++ "\u{e3}" ""))))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.opt (re.++ (re.range "0" "1") (re.opt (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "-" "/")(re.union (re.range "\u{5c}" "\u{5c}")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))))))(re.++ (re.union (re.++ (re.opt (re.range "(" "("))(re.++ (re.range "2" "9")(re.++ ((_ re.loop 2 2) (re.range "0" "9")) (re.opt (re.range ")" ")"))))) (re.++ (re.range "2" "9") ((_ re.loop 3 3) (re.range "0" "9"))))(re.++ (re.opt (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "-" "/")(re.union (re.range "\u{5c}" "\u{5c}")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))))) (re.union (re.++ ((_ re.loop 3 3) (re.range "0" "9"))(re.++ (re.opt (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "-" "/")(re.union (re.range "\u{5c}" "\u{5c}")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))))) ((_ re.loop 4 4) (re.range "0" "9"))))(re.union ((_ re.loop 7 7) (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))) (re.++ ((_ re.loop 3 3) (re.range "0" "9"))(re.++ (re.range "-" "-") ((_ re.loop 4 4) (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z"))))))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "V" (str.++ "h" (str.++ "r" (str.++ "e" (str.++ "f" (str.++ "=" (str.++ ";" (str.++ "@" (str.++ "e" (str.++ "A" (str.++ "(" ""))))))))))))

(define-fun Witness2 () String (str.++ "_" (str.++ "h" (str.++ "r" (str.++ "e" (str.++ "f" (str.++ "=" (str.++ "o" (str.++ "\u{d3}" "")))))))))

(assert (= regexA (re.++ (str.to_re (str.++ "h" (str.++ "r" (str.++ "e" (str.++ "f" (str.++ "=" ""))))))(re.++ (re.opt (re.union (re.range "&" "'")(re.union (re.range ";" ";")(re.union (re.range "o" "o")(re.union (re.range "q" "q") (re.range "t" "u"))))))(re.++ (re.+ (re.union (re.union (re.range "\u{00}" "%")(re.union (re.range "'" ":")(re.union (re.range "<" "f")(re.union (re.range "h" "s") (re.range "u" "\u{ff}")))))(re.union (re.union (re.range "\u{00}" "\u{08}")(re.union (re.range "\u{0e}" "\u{1f}")(re.union (re.range "!" "\u{84}")(re.union (re.range "\u{86}" "\u{9f}") (re.range "\u{a1}" "\u{ff}")))))(re.union (re.union (re.range "\u{00}" "%")(re.union (re.range "'" ":")(re.union (re.range "<" "n")(re.union (re.range "p" "p")(re.union (re.range "r" "s") (re.range "v" "\u{ff}")))))) (re.union (re.range "\u{00}" "&") (re.range "(" "\u{ff}")))))) (re.opt (re.union (re.range "&" "'")(re.union (re.range ";" ";")(re.union (re.range "o" "o")(re.union (re.range "q" "q") (re.range "t" "u")))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "k" (str.++ "f" (str.++ "." (str.++ "6" (str.++ "1" (str.++ "h" (str.++ "d" ""))))))))

(define-fun Witness2 () String (str.++ "\u{f9}" (str.++ "\u{eb}" (str.++ "~" (str.++ "7" (str.++ "a" (str.++ "." (str.++ "8" (str.++ "9" (str.++ "." (str.++ "8" (str.++ "-" (str.++ "3" "")))))))))))))

(assert (= regexA (re.++ (re.union (re.range "0" "9") (re.range "a" "z"))(re.++ (re.* (re.union (re.range "-" "-")(re.union (re.range "0" "9") (re.range "a" "z"))))(re.++ (re.union (re.range "0" "9") (re.range "a" "z")) (re.+ (re.++ (re.range "." ".")(re.++ (re.union (re.range "0" "9") (re.range "a" "z"))(re.++ (re.* (re.union (re.range "-" "-")(re.union (re.range "0" "9") (re.range "a" "z")))) (re.union (re.range "0" "9") (re.range "a" "z")))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "s" (str.++ "i" (str.++ "p" (str.++ "s" (str.++ ":" (str.++ "@" (str.++ "4" (str.++ "0" (str.++ "8" (str.++ "\u{97}" (str.++ "8" (str.++ "9" (str.++ "8" (str.++ "\u{88}" (str.++ "1" (str.++ "9" (str.++ "N" (str.++ "0" (str.++ "3" (str.++ "9" (str.++ ":" (str.++ "2" (str.++ "9" (str.++ "5" (str.++ "8" (str.++ "8" (str.++ "/" ""))))))))))))))))))))))))))))

(define-fun Witness2 () String (str.++ "s" (str.++ "i" (str.++ "p" (str.++ ":" (str.++ "@" (str.++ "8" (str.++ "1" (str.++ "n" (str.++ "9" (str.++ "L" (str.++ "0" (str.++ "\u{a4}" (str.++ "9" ""))))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.union (str.to_re (str.++ "s" (str.++ "i" (str.++ "p" "")))) (str.to_re (str.++ "s" (str.++ "i" (str.++ "p" (str.++ "s" ""))))))(re.++ (re.range ":" ":")(re.++ (re.* (re.union (re.range "\u{00}" "\u{09}") (re.range "\u{0b}" "\u{ff}")))(re.++ (re.range "@" "@")(re.++ (re.union (re.++ ((_ re.loop 1 3) (re.range "0" "9"))(re.++ (re.union (re.range "\u{00}" "\u{09}") (re.range "\u{0b}" "\u{ff}"))(re.++ ((_ re.loop 1 3) (re.range "0" "9"))(re.++ (re.union (re.range "\u{00}" "\u{09}") (re.range "\u{0b}" "\u{ff}"))(re.++ ((_ re.loop 1 3) (re.range "0" "9"))(re.++ (re.union (re.range "\u{00}" "\u{09}") (re.range "\u{0b}" "\u{ff}")) ((_ re.loop 1 3) (re.range "0" "9")))))))) (re.++ (re.+ (re.union (re.range "-" ".")(re.union (re.range "A" "Z") (re.range "a" "z"))))(re.++ (re.range "." ".") ((_ re.loop 2 5) (re.union (re.range "A" "Z") (re.range "a" "z"))))))(re.++ (re.opt (re.++ (re.range ":" ":") ((_ re.loop 1 5) (re.range "0" "9")))) (re.opt (re.+ (re.union (re.range "%" "&")(re.union (re.range "," "-")(re.union (re.range "0" "9")(re.union (re.range ";" ";")(re.union (re.range "=" "=")(re.union (re.range "?" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))))))))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "N" (str.++ " " (str.++ "4" (str.++ "8" (str.++ "8" (str.++ ":" (str.++ "1" (str.++ "4" (str.++ ":" (str.++ "3" (str.++ "8" (str.++ "\u{ad}" (str.++ "8" (str.++ "7" (str.++ "," (str.++ "E" (str.++ " " (str.++ "9" (str.++ ":" (str.++ "0" (str.++ "3" (str.++ ":" (str.++ "4" (str.++ "3" "")))))))))))))))))))))))))

(define-fun Witness2 () String (str.++ "\u{bd}" (str.++ "S" (str.++ " " (str.++ "7" (str.++ "6" (str.++ "2" (str.++ "9" (str.++ "3" (str.++ "3" (str.++ "7" (str.++ ":" (str.++ "5" (str.++ "7" (str.++ ":" (str.++ "5" (str.++ "9" (str.++ "\u{c8}" (str.++ "," (str.++ "E" (str.++ " " (str.++ "9" (str.++ "8" (str.++ "6" (str.++ "3" (str.++ "7" (str.++ "6" (str.++ "8" (str.++ ":" (str.++ "0" (str.++ "2" (str.++ ":" (str.++ "5" (str.++ "8" (str.++ "3" "")))))))))))))))))))))))))))))))))))

(assert (= regexA (re.++ (re.union (re.range "N" "N") (re.range "S" "S"))(re.++ (re.range " " " ")(re.++ (re.+ (re.range "0" "9"))(re.++ ((_ re.loop 2 2) (re.++ (re.range ":" ":")(re.++ (re.range "0" "5") (re.range "0" "9"))))(re.++ (re.opt (re.union (re.range "\u{00}" "\u{09}") (re.range "\u{0b}" "\u{ff}")))(re.++ (re.* (re.range "0" "9"))(re.++ (re.range "," ",")(re.++ (re.union (re.range "E" "E") (re.range "W" "W"))(re.++ (re.range " " " ")(re.++ (re.+ (re.range "0" "9"))(re.++ ((_ re.loop 2 2) (re.++ (re.range ":" ":")(re.++ (re.range "0" "5") (re.range "0" "9"))))(re.++ (re.opt (re.union (re.range "\u{00}" "\u{09}") (re.range "\u{0b}" "\u{ff}"))) (re.* (re.range "0" "9"))))))))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ ";" (str.++ "\u{aa}" (str.++ "/" (str.++ "*" (str.++ "*" (str.++ "/" "")))))))

(define-fun Witness2 () String (str.++ "/" (str.++ "*" (str.++ "*" (str.++ "/" "")))))

(assert (= regexA (re.++ (str.to_re (str.++ "/" (str.++ "*" "")))(re.++ (re.* (re.range "\u{00}" "\u{ff}")) (str.to_re (str.++ "*" (str.++ "/" "")))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "+" (str.++ "9" (str.++ "," (str.++ "9" (str.++ "5" ""))))))

(define-fun Witness2 () String (str.++ "\u{ac}" (str.++ "," (str.++ "3" (str.++ "\u{e0}" "")))))

(assert (= regexA (re.union (re.++ (re.* (re.union (re.range "+" "+") (re.range "-" "-")))(re.++ (re.+ (re.range "0" "9"))(re.++ (re.* (re.range "," ",")) (re.* (re.range "0" "9"))))) (re.++ (re.* (re.union (re.range "+" "+") (re.range "-" "-")))(re.++ (re.* (re.range "0" "9"))(re.++ (re.+ (re.range "," ",")) (re.* (re.range "0" "9"))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "F" (str.++ "o" (str.++ "r" (str.++ " " (str.++ "I" (str.++ "P" (str.++ "-" (str.++ "A" (str.++ "d" (str.++ "d" (str.++ "r" (str.++ "e" (str.++ "s" (str.++ "s" (str.++ ":" (str.++ "0" (str.++ "9" (str.++ "." (str.++ "0" (str.++ "2" (str.++ "." (str.++ "9" (str.++ "9" (str.++ "." (str.++ "1" (str.++ "7" (str.++ "1" (str.++ " " (str.++ " " (str.++ "F" (str.++ "o" (str.++ "r" (str.++ " " (str.++ "N" (str.++ "u" (str.++ "m" (str.++ "b" (str.++ "e" (str.++ "r" (str.++ ":" (str.++ " " (str.++ "8" "")))))))))))))))))))))))))))))))))))))))))))

(define-fun Witness2 () String (str.++ "F" (str.++ "o" (str.++ "r" (str.++ " " (str.++ "I" (str.++ "P" (str.++ "-" (str.++ "A" (str.++ "d" (str.++ "d" (str.++ "r" (str.++ "e" (str.++ "s" (str.++ "s" (str.++ ":" (str.++ "2" (str.++ "5" (str.++ "5" (str.++ "." (str.++ "0" (str.++ "6" (str.++ "." (str.++ "2" (str.++ "5" (str.++ "3" (str.++ "." (str.++ "2" (str.++ "4" (str.++ "6" (str.++ " " (str.++ " " (str.++ "F" (str.++ "o" (str.++ "r" (str.++ " " (str.++ "N" (str.++ "u" (str.++ "m" (str.++ "b" (str.++ "e" (str.++ "r" (str.++ ":" (str.++ " " (str.++ "*" (str.++ "*" (str.++ "9" (str.++ "\u{83}" ""))))))))))))))))))))))))))))))))))))))))))))))))

(assert (= regexA (re.++ (str.to_re (str.++ "F" (str.++ "o" (str.++ "r" (str.++ " " (str.++ "I" (str.++ "P" (str.++ "-" (str.++ "A" (str.++ "d" (str.++ "d" (str.++ "r" (str.++ "e" (str.++ "s" (str.++ "s" (str.++ ":" ""))))))))))))))))(re.++ (re.union (re.++ (re.range "2" "2")(re.++ (re.range "0" "4") (re.range "0" "9")))(re.union (re.++ (str.to_re (str.++ "2" (str.++ "5" ""))) (re.range "0" "5")) (re.++ (re.opt (re.range "0" "1"))(re.++ (re.range "0" "9") (re.opt (re.range "0" "9"))))))(re.++ (re.range "." ".")(re.++ (re.union (re.++ (re.range "2" "2")(re.++ (re.range "0" "4") (re.range "0" "9")))(re.union (re.++ (str.to_re (str.++ "2" (str.++ "5" ""))) (re.range "0" "5")) (re.++ (re.opt (re.range "0" "1"))(re.++ (re.range "0" "9") (re.opt (re.range "0" "9"))))))(re.++ (re.range "." ".")(re.++ (re.union (re.++ (re.range "2" "2")(re.++ (re.range "0" "4") (re.range "0" "9")))(re.union (re.++ (str.to_re (str.++ "2" (str.++ "5" ""))) (re.range "0" "5")) (re.++ (re.opt (re.range "0" "1"))(re.++ (re.range "0" "9") (re.opt (re.range "0" "9"))))))(re.++ (re.range "." ".")(re.++ (re.union (re.++ (re.range "2" "2")(re.++ (re.range "0" "4") (re.range "0" "9")))(re.union (re.++ (str.to_re (str.++ "2" (str.++ "5" ""))) (re.range "0" "5")) (re.++ (re.opt (re.range "0" "1"))(re.++ (re.range "0" "9") (re.opt (re.range "0" "9"))))))(re.++ (str.to_re (str.++ " " (str.++ " " (str.++ "F" (str.++ "o" (str.++ "r" (str.++ " " (str.++ "N" (str.++ "u" (str.++ "m" (str.++ "b" (str.++ "e" (str.++ "r" (str.++ ":" (str.++ " " "")))))))))))))))(re.++ (re.opt (re.union (re.range "+" "+") ((_ re.loop 0 2) (re.range "*" "*")))) (re.* (re.range "0" "9"))))))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "\u{d0}" (str.++ "A" (str.++ "e" (str.++ "h" "")))))

(define-fun Witness2 () String (str.++ "\u{c8}" (str.++ "V" (str.++ "\u{e3}" (str.++ "J" (str.++ "j" (str.++ "a" (str.++ "=" ""))))))))

(assert (= regexA (re.++ (re.range "A" "Z") (re.+ (re.range "a" "z")))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "B" (str.++ "V" (str.++ "_" (str.++ "S" (str.++ "e" (str.++ "s" (str.++ "s" (str.++ "i" (str.++ "o" (str.++ "n" (str.++ "I" (str.++ "D" (str.++ "=" (str.++ "@" (str.++ "@" (str.++ "@" (str.++ "@" (str.++ "0" (str.++ "1" (str.++ "0" (str.++ "6" (str.++ "7" (str.++ "0" (str.++ "0" (str.++ "3" (str.++ "9" (str.++ "6" (str.++ "\u{ec}" (str.++ "1" (str.++ "2" (str.++ "0" (str.++ "6" (str.++ "0" (str.++ "0" (str.++ "1" (str.++ "7" (str.++ "4" (str.++ "7" (str.++ "@" (str.++ "@" (str.++ "@" (str.++ "@" (str.++ "&" (str.++ "B" (str.++ "V" (str.++ "_" (str.++ "E" (str.++ "n" (str.++ "g" (str.++ "i" (str.++ "n" (str.++ "e" (str.++ "I" (str.++ "D" (str.++ "=" (str.++ "c" (str.++ "c" (str.++ "c" (str.++ "k" (str.++ "a" (str.++ "d" (str.++ "e" (str.++ "d" (str.++ "j" (str.++ "d" (str.++ "d" (str.++ "e" (str.++ "h" (str.++ "g" (str.++ "g" (str.++ "c" (str.++ "e" (str.++ "f" (str.++ "e" (str.++ "c" (str.++ "e" (str.++ "h" (str.++ "i" (str.++ "d" (str.++ "f" (str.++ "h" (str.++ "f" (str.++ "d" (str.++ "f" (str.++ "l" (str.++ "g" (str.++ "\u{f2}" (str.++ "0" "")))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(define-fun Witness2 () String (str.++ "B" (str.++ "V" (str.++ "_" (str.++ "S" (str.++ "e" (str.++ "s" (str.++ "s" (str.++ "i" (str.++ "o" (str.++ "n" (str.++ "I" (str.++ "D" (str.++ "=" (str.++ "@" (str.++ "@" (str.++ "@" (str.++ "@" (str.++ "0" (str.++ "1" (str.++ "0" (str.++ "6" (str.++ "7" (str.++ "0" (str.++ "0" (str.++ "3" (str.++ "9" (str.++ "6" (str.++ "]" (str.++ "1" (str.++ "2" (str.++ "0" (str.++ "6" (str.++ "0" (str.++ "0" (str.++ "1" (str.++ "7" (str.++ "4" (str.++ "7" (str.++ "@" (str.++ "@" (str.++ "@" (str.++ "@" (str.++ "&" (str.++ "B" (str.++ "V" (str.++ "_" (str.++ "E" (str.++ "n" (str.++ "g" (str.++ "i" (str.++ "n" (str.++ "e" (str.++ "I" (str.++ "D" (str.++ "=" (str.++ "c" (str.++ "c" (str.++ "c" (str.++ "k" (str.++ "a" (str.++ "d" (str.++ "e" (str.++ "d" (str.++ "j" (str.++ "d" (str.++ "d" (str.++ "e" (str.++ "h" (str.++ "g" (str.++ "g" (str.++ "c" (str.++ "e" (str.++ "f" (str.++ "e" (str.++ "c" (str.++ "e" (str.++ "h" (str.++ "i" (str.++ "d" (str.++ "f" (str.++ "h" (str.++ "f" (str.++ "d" (str.++ "f" (str.++ "l" (str.++ "g" (str.++ "\u{c0}" (str.++ "0" (str.++ "X" (str.++ "\u{9e}" (str.++ "#" ""))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(assert (= regexA (re.++ (str.to_re (str.++ "B" (str.++ "V" (str.++ "_" (str.++ "S" (str.++ "e" (str.++ "s" (str.++ "s" (str.++ "i" (str.++ "o" (str.++ "n" (str.++ "I" (str.++ "D" (str.++ "=" (str.++ "@" (str.++ "@" (str.++ "@" (str.++ "@" (str.++ "0" (str.++ "1" (str.++ "0" (str.++ "6" (str.++ "7" (str.++ "0" (str.++ "0" (str.++ "3" (str.++ "9" (str.++ "6" ""))))))))))))))))))))))))))))(re.++ (re.union (re.range "\u{00}" "\u{09}") (re.range "\u{0b}" "\u{ff}"))(re.++ (str.to_re (str.++ "1" (str.++ "2" (str.++ "0" (str.++ "6" (str.++ "0" (str.++ "0" (str.++ "1" (str.++ "7" (str.++ "4" (str.++ "7" (str.++ "@" (str.++ "@" (str.++ "@" (str.++ "@" (str.++ "&" (str.++ "B" (str.++ "V" (str.++ "_" (str.++ "E" (str.++ "n" (str.++ "g" (str.++ "i" (str.++ "n" (str.++ "e" (str.++ "I" (str.++ "D" (str.++ "=" (str.++ "c" (str.++ "c" (str.++ "c" (str.++ "k" (str.++ "a" (str.++ "d" (str.++ "e" (str.++ "d" (str.++ "j" (str.++ "d" (str.++ "d" (str.++ "e" (str.++ "h" (str.++ "g" (str.++ "g" (str.++ "c" (str.++ "e" (str.++ "f" (str.++ "e" (str.++ "c" (str.++ "e" (str.++ "h" (str.++ "i" (str.++ "d" (str.++ "f" (str.++ "h" (str.++ "f" (str.++ "d" (str.++ "f" (str.++ "l" (str.++ "g" "")))))))))))))))))))))))))))))))))))))))))))))))))))))))))))(re.++ (re.union (re.range "\u{00}" "\u{09}") (re.range "\u{0b}" "\u{ff}")) (re.range "0" "0")))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "\u{5c}" (str.++ "s" (str.++ "\u{5c}" (str.++ "d" (str.++ "d" (str.++ "-" (str.++ "\u{5c}" (str.++ "w" (str.++ "w" (str.++ "w" (str.++ "-" (str.++ "\u{5c}" (str.++ "d" (str.++ "d" (str.++ "d" (str.++ "d" (str.++ "X" ""))))))))))))))))))

(define-fun Witness2 () String (str.++ "\u{e3}" (str.++ "\u{5c}" (str.++ "s" (str.++ "\u{5c}" (str.++ "d" (str.++ "d" (str.++ "-" (str.++ "\u{5c}" (str.++ "w" (str.++ "w" (str.++ "w" (str.++ "-" (str.++ "\u{5c}" (str.++ "d" (str.++ "d" (str.++ "d" (str.++ "d" (str.++ "\u{ea}" (str.++ "\u{cd}" (str.++ "\u{d2}" "")))))))))))))))))))))

(assert (= regexA (re.++ (str.to_re (str.++ "\u{5c}" (str.++ "s" (str.++ "\u{5c}" ""))))(re.++ ((_ re.loop 2 2) (re.range "d" "d"))(re.++ (str.to_re (str.++ "-" (str.++ "\u{5c}" "")))(re.++ ((_ re.loop 3 3) (re.range "w" "w"))(re.++ (str.to_re (str.++ "-" (str.++ "\u{5c}" ""))) ((_ re.loop 4 4) (re.range "d" "d")))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "(" (str.++ "\u{e2}" (str.++ "l" (str.++ "\u{0d}" (str.++ ")" (str.++ ")" (str.++ ")" ""))))))))

(define-fun Witness2 () String (str.++ "(" (str.++ "\u{e3}" (str.++ "Z" (str.++ ")" (str.++ ")" (str.++ "\u{e4}" (str.++ "+" ""))))))))

(assert (= regexA (re.++ (re.+ (re.range "(" "("))(re.++ (re.* (re.union (re.range "\u{00}" "(") (re.range "*" "\u{ff}"))) (re.+ (re.range ")" ")"))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "8" (str.++ "0" (str.++ "9" (str.++ "8" (str.++ "4" (str.++ "3" (str.++ "8" (str.++ "3" "")))))))))

(define-fun Witness2 () String (str.++ "\u{f5}" (str.++ "1" (str.++ "8" (str.++ "0" (str.++ "8" (str.++ "1" (str.++ "4" (str.++ "9" (str.++ "9" (str.++ "\u{ca}" (str.++ "\u{bc}" ""))))))))))))

(assert (= regexA (re.++ (re.range "1" "8")(re.++ ((_ re.loop 2 2) (re.range "0" "9")) ((_ re.loop 5 5) (re.range "0" "9"))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "W" (str.++ "\u{a2}" (str.++ ":" (str.++ "\u{d2}" (str.++ "\u{dd}" (str.++ "\u{d8}" (str.++ "\u{89}" (str.++ "9" (str.++ "9" (str.++ "9" (str.++ "-" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ " " (str.++ "9" (str.++ "8" (str.++ "8" (str.++ "5" ""))))))))))))))))))))

(define-fun Witness2 () String (str.++ "r" (str.++ "\u{ab}" (str.++ "\u{16}" (str.++ "5" (str.++ "2" (str.++ "7" (str.++ " " (str.++ "5" (str.++ "8" (str.++ "6" (str.++ " " (str.++ "3" (str.++ "1" (str.++ "2" (str.++ "2" (str.++ " " (str.++ "x" (str.++ "8" "")))))))))))))))))))

(assert (= regexA (re.++ (re.opt (re.union (re.++ (re.range "(" "(")(re.++ ((_ re.loop 3 3) (re.range "0" "9"))(re.++ (re.range ")" ")") (re.opt (re.range " " " "))))) (re.++ ((_ re.loop 3 3) (re.range "0" "9")) (re.union (re.range " " " ") (re.range "-" ".")))))(re.++ ((_ re.loop 3 3) (re.range "0" "9"))(re.++ (re.union (re.range " " " ") (re.range "-" "."))(re.++ ((_ re.loop 4 4) (re.range "0" "9"))(re.++ (re.opt (re.++ (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))) (re.opt (re.++ (re.range "x" "x") (re.+ (re.range "0" "9")))))) (str.to_re ""))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "&" (str.++ "l" (str.++ "t" (str.++ ";" (str.++ "n" (str.++ "a" (str.++ "m" (str.++ "e" (str.++ "=" (str.++ " " (str.++ "&" (str.++ "q" (str.++ "u" (str.++ "o" (str.++ "t" (str.++ "&" (str.++ "q" (str.++ "u" (str.++ "o" (str.++ "t" (str.++ ";" (str.++ "$" (str.++ "n" (str.++ "u" (str.++ "\u{bd}" (str.++ "\u{9e}" (str.++ "\u{f9}" (str.++ "&" (str.++ "g" (str.++ "t" (str.++ ";" ""))))))))))))))))))))))))))))))))

(define-fun Witness2 () String (str.++ "\u{d4}" (str.++ "Z" (str.++ "R" (str.++ "\u{db}" (str.++ "\u{8a}" (str.++ "\u{db}" (str.++ "&" (str.++ "l" (str.++ "t" (str.++ ";" (str.++ "n" (str.++ "a" (str.++ "m" (str.++ "e" (str.++ "=" (str.++ "&" (str.++ "q" (str.++ "u" (str.++ "o" (str.++ "t" (str.++ "\u{d7}" (str.++ "&" (str.++ "q" (str.++ "u" (str.++ "o" (str.++ "t" (str.++ "\u{b0}" (str.++ ">" (str.++ "\u{0b}" (str.++ "\u{8f}" (str.++ "&" (str.++ "g" (str.++ "t" (str.++ ";" "")))))))))))))))))))))))))))))))))))

(assert (= regexA (re.++ (str.to_re (str.++ "&" (str.++ "l" (str.++ "t" (str.++ ";" "")))))(re.++ (re.* (re.union (re.range "\u{00}" "%")(re.union (re.range "'" ":")(re.union (re.range "<" "f")(re.union (re.range "h" "s") (re.range "u" "\u{ff}"))))))(re.++ (str.to_re (str.++ "n" (str.++ "a" (str.++ "m" (str.++ "e" "")))))(re.++ (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (re.range "=" "=")(re.++ (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (str.to_re (str.++ "&" (str.++ "q" (str.++ "u" (str.++ "o" (str.++ "t" ""))))))(re.++ (re.opt (re.range ";" ";"))(re.++ (re.* (re.union (re.range "\u{00}" "/")(re.union (re.range ":" "@")(re.union (re.range "[" "^")(re.union (re.range "`" "`")(re.union (re.range "{" "\u{a9}")(re.union (re.range "\u{ab}" "\u{b4}")(re.union (re.range "\u{b6}" "\u{b9}")(re.union (re.range "\u{bb}" "\u{bf}")(re.union (re.range "\u{d7}" "\u{d7}") (re.range "\u{f7}" "\u{f7}")))))))))))(re.++ (str.to_re (str.++ "&" (str.++ "q" (str.++ "u" (str.++ "o" (str.++ "t" ""))))))(re.++ (re.opt (re.range ";" ";"))(re.++ (re.* (re.union (re.range "\u{00}" "%")(re.union (re.range "'" ":")(re.union (re.range "<" "f")(re.union (re.range "h" "s") (re.range "u" "\u{ff}")))))) (str.to_re (str.++ "&" (str.++ "g" (str.++ "t" (str.++ ";" "")))))))))))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "1" ""))

(define-fun Witness2 () String (str.++ ">" (str.++ "-" (str.++ "9" (str.++ "5" "")))))

(assert (= regexA (re.union (re.++ (str.to_re "")(re.++ (re.range "0" "9") (str.to_re ""))) (re.++ (re.+ (re.range "1" "9"))(re.++ (re.range "0" "9") (str.to_re ""))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "W" (str.++ "\u{8f}" (str.++ "&" (str.++ "l" (str.++ "t" (str.++ ";" (str.++ "/" (str.++ "8" (str.++ "f" (str.++ " " (str.++ "M" (str.++ "=" (str.++ "'" (str.++ "\u{dd}" (str.++ "'" (str.++ "\u{0c}" (str.++ "\u{aa}" (str.++ " " (str.++ "\u{0b}" (str.++ "=" "")))))))))))))))))))))

(define-fun Witness2 () String (str.++ "\u{99}" (str.++ "\u{d1}" (str.++ "&" (str.++ "l" (str.++ "t" (str.++ ";" (str.++ "\u{aa}" (str.++ "_" (str.++ "\u{ba}" (str.++ "=" (str.++ "\u{9e}" (str.++ "h" "")))))))))))))

(assert (= regexA (re.union (re.++ (str.to_re (str.++ "&" (str.++ "l" (str.++ "t" (str.++ ";" "")))))(re.++ (re.opt (re.range "/" "/"))(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))) (re.* (re.++ (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (re.* (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))(re.++ (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (re.range "=" "=")(re.++ (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))) (re.union (re.++ (str.to_re (str.++ "&" (str.++ "q" (str.++ "u" (str.++ "o" (str.++ "t" (str.++ ";" "")))))))(re.++ (re.* (re.union (re.range "\u{00}" "%")(re.union (re.range "'" ":")(re.union (re.range "<" "n")(re.union (re.range "p" "p")(re.union (re.range "r" "s") (re.range "v" "\u{ff}"))))))) (str.to_re (str.++ "&" (str.++ "q" (str.++ "u" (str.++ "o" (str.++ "t" (str.++ ";" "")))))))))(re.union (re.++ (re.range "'" "'")(re.++ (re.union (re.range "\u{00}" "&") (re.range "(" "\u{ff}")) (re.range "'" "'"))) (re.* (re.union (re.range "\u{00}" "%")(re.union (re.range "'" ":")(re.union (re.range "<" "f")(re.union (re.range "h" "s") (re.range "u" "\u{ff}"))))))))))))))))) (re.++ (re.opt (re.range "/" "/")) (str.to_re (str.++ "&" (str.++ "g" (str.++ "t" (str.++ ";" "")))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "\u{05}" (str.++ "\u{c9}" (str.++ "\u{fe}" (str.++ "[" (str.++ "z" (str.++ "H" (str.++ "\u{84}" ""))))))))

(define-fun Witness2 () String (str.++ "_" (str.++ "\u{aa}" (str.++ "]" (str.++ "." (str.++ "\u{b5}" (str.++ "\u{c5}" (str.++ "8" (str.++ "." (str.++ "[" (str.++ "\u{aa}" (str.++ "]" (str.++ "\u{7f}" "")))))))))))))

(assert (= regexA (re.++ (re.opt (re.++ (re.opt (re.++ (re.opt (re.++ (re.opt (re.range "[" "["))(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))) (re.opt (re.range "]" "]"))))) (re.range "." ".")))(re.++ (re.opt (re.++ (re.opt (re.range "[" "["))(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))) (re.opt (re.range "]" "]"))))) (re.range "." "."))))(re.++ (re.opt (re.range "[" "["))(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))) (re.opt (re.range "]" "]")))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "S" (str.++ "E" (str.++ "8" (str.++ "5" (str.++ "5" (str.++ "0" (str.++ "4" (str.++ "7" (str.++ "7" (str.++ "1" (str.++ "8" (str.++ "1" (str.++ "9" (str.++ "1" (str.++ "0" (str.++ "3" (str.++ "9" (str.++ "9" (str.++ "2" (str.++ "6" (str.++ "8" (str.++ "6" (str.++ "8" (str.++ "8" (str.++ "\u{87}" ""))))))))))))))))))))))))))

(define-fun Witness2 () String (str.++ "S" (str.++ "E" (str.++ "9" (str.++ "5" (str.++ "9" (str.++ "5" (str.++ "0" (str.++ "4" (str.++ "4" (str.++ "8" (str.++ "5" (str.++ "9" (str.++ "7" (str.++ "4" (str.++ "7" (str.++ "5" (str.++ "9" (str.++ "9" (str.++ "9" (str.++ "4" (str.++ "9" (str.++ "8" (str.++ "8" (str.++ "9" (str.++ "\u{fd}" (str.++ "g" (str.++ "\u{d1}" (str.++ "\u{c1}" (str.++ "\u{0c}" (str.++ "f" "")))))))))))))))))))))))))))))))

(assert (= regexA (re.union (re.++ (str.to_re (str.++ "S" (str.++ "E" "")))(re.++ ((_ re.loop 2 2) (re.range "0" "9"))(re.++ (re.range " " " ")(re.++ ((_ re.loop 4 4) (re.range "0" "9"))(re.++ (re.range " " " ")(re.++ ((_ re.loop 4 4) (re.range "0" "9"))(re.++ (re.range " " " ")(re.++ ((_ re.loop 4 4) (re.range "0" "9"))(re.++ (re.range " " " ")(re.++ ((_ re.loop 4 4) (re.range "0" "9"))(re.++ (re.range " " " ") ((_ re.loop 4 4) (re.range "0" "9"))))))))))))) (re.++ (str.to_re (str.++ "S" (str.++ "E" ""))) ((_ re.loop 22 22) (re.range "0" "9"))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "2" (str.++ "1" (str.++ ":" (str.++ "2" (str.++ "3" (str.++ ":" (str.++ "2" (str.++ "8" (str.++ "\u{91}" ""))))))))))

(define-fun Witness2 () String (str.++ "2" (str.++ "2" (str.++ ":" (str.++ "1" (str.++ "6" (str.++ ":" (str.++ "4" (str.++ "8" (str.++ "\u{8c}" ""))))))))))

(assert (= regexA (re.++ (re.union (re.++ (re.range "0" "1") (re.range "0" "9")) (re.++ (re.range "2" "2") (re.range "0" "3")))(re.++ (re.range ":" ":")(re.++ (re.++ (re.range "0" "5") (re.range "0" "9"))(re.++ (re.range ":" ":") (re.++ (re.range "0" "5") (re.range "0" "9"))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "9" (str.++ "7" "")))

(define-fun Witness2 () String (str.++ "4" (str.++ "9" (str.++ "\u{93}" ""))))

(assert (= regexA (re.++ (re.range "1" "9") (re.range "0" "9"))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "\u{7f}" ""))

(define-fun Witness2 () String (str.++ "\u{15}" (str.++ "\u{94}" (str.++ "\u{9d}" (str.++ "@" "")))))

(assert (= regexA (re.union (re.range "\u{01}" "\u{08}")(re.union (re.range "\u{0a}" "\u{1f}")(re.union (re.range "," ",")(re.union (re.range "\u{7f}" "\u{7f}")(re.union (re.range "\u{81}" "\u{81}")(re.union (re.range "\u{8d}" "\u{8d}")(re.union (re.range "\u{8f}" "\u{90}") (re.range "\u{9d}" "\u{9d}"))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "\u{97}" (str.++ "\u{e9}" (str.++ "\u{a1}" ""))))

(define-fun Witness2 () String (str.++ "\u{f8}" (str.++ "\u{b5}" "")))

(assert (= regexA (re.union (re.range "\u{00}" " ")(re.union (re.range "'" "'")(re.union (re.range "+" "-")(re.union (re.range "0" "9")(re.union (re.range "<" "<")(re.union (re.range ">" ">")(re.union (re.range "@" "Z")(re.union (re.range "\u{5c}" "\u{5c}")(re.union (re.range "_" "{")(re.union (re.range "}" "\u{aa}")(re.union (re.range "\u{ac}" "\u{ba}")(re.union (re.range "\u{bc}" "\u{d6}") (re.range "\u{d8}" "\u{fe}")))))))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "\u{96}" (str.++ "\u{c2}" (str.++ "E" (str.++ "x" (str.++ "p" (str.++ "r" (str.++ "e" (str.++ "s" (str.++ "s" (str.++ "\u{e3}" (str.++ "o" (str.++ " " (str.++ "r" (str.++ "e" (str.++ "g" (str.++ "u" (str.++ "l" (str.++ "a" (str.++ "r" (str.++ " " (str.++ "p" (str.++ "a" (str.++ "r" (str.++ "a" (str.++ " " (str.++ "T" (str.++ "e" (str.++ "l" (str.++ "e" (str.++ "f" (str.++ "o" (str.++ "n" (str.++ "e" (str.++ "s" (str.++ " " (str.++ "d" (str.++ "o" (str.++ " " (str.++ "B" (str.++ "r" (str.++ "a" (str.++ "s" (str.++ "i" (str.++ "l" (str.++ "1" (str.++ "}" (str.++ "f" (str.++ "\u{80}" "")))))))))))))))))))))))))))))))))))))))))))))))))

(define-fun Witness2 () String (str.++ "E" (str.++ "x" (str.++ "p" (str.++ "r" (str.++ "e" (str.++ "s" (str.++ "s" (str.++ "\u{e3}" (str.++ "o" (str.++ " " (str.++ "r" (str.++ "e" (str.++ "g" (str.++ "u" (str.++ "l" (str.++ "a" (str.++ "r" (str.++ " " (str.++ "p" (str.++ "a" (str.++ "r" (str.++ "a" (str.++ " " (str.++ "T" (str.++ "e" (str.++ "l" (str.++ "e" (str.++ "f" (str.++ "o" (str.++ "n" (str.++ "e" (str.++ "s" (str.++ " " (str.++ "d" (str.++ "o" (str.++ " " (str.++ "B" (str.++ "r" (str.++ "a" (str.++ "s" (str.++ "i" (str.++ "l" (str.++ "\u{1f}" ""))))))))))))))))))))))))))))))))))))))))))))

(assert (= regexA (re.++ (str.to_re (str.++ "E" (str.++ "x" (str.++ "p" (str.++ "r" (str.++ "e" (str.++ "s" (str.++ "s" (str.++ "\u{e3}" (str.++ "o" (str.++ " " (str.++ "r" (str.++ "e" (str.++ "g" (str.++ "u" (str.++ "l" (str.++ "a" (str.++ "r" (str.++ " " (str.++ "p" (str.++ "a" (str.++ "r" (str.++ "a" (str.++ " " (str.++ "T" (str.++ "e" (str.++ "l" (str.++ "e" (str.++ "f" (str.++ "o" (str.++ "n" (str.++ "e" (str.++ "s" (str.++ " " (str.++ "d" (str.++ "o" (str.++ " " (str.++ "B" (str.++ "r" (str.++ "a" (str.++ "s" (str.++ "i" (str.++ "l" ""))))))))))))))))))))))))))))))))))))))))))) (re.union (re.range "\u{00}" "\u{09}") (re.range "\u{0b}" "\u{ff}")))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "\u{e0}" (str.++ "D" (str.++ "E" (str.++ "L" (str.++ "E" (str.++ "T" (str.++ "E" (str.++ "\u{a0}" (str.++ "F" (str.++ "R" (str.++ "O" (str.++ "M" (str.++ " " (str.++ "'" (str.++ "\u{af}" (str.++ "\u{fd}" "")))))))))))))))))

(define-fun Witness2 () String (str.++ "D" (str.++ "E" (str.++ "L" (str.++ "E" (str.++ "T" (str.++ "E" (str.++ " " (str.++ "F" (str.++ "R" (str.++ "O" (str.++ "M" (str.++ "\u{85}" (str.++ "\u{b5}" (str.++ "\u{aa}" "")))))))))))))))

(assert (= regexA (re.++ (str.to_re (str.++ "D" (str.++ "E" (str.++ "L" (str.++ "E" (str.++ "T" (str.++ "E" "")))))))(re.++ (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))(re.++ (str.to_re (str.++ "F" (str.++ "R" (str.++ "O" (str.++ "M" "")))))(re.++ (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))) (re.+ (re.union (re.range "'" "'")(re.union (re.range "0" "9")(re.union (re.range "=" "=")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "&" (str.++ "l" (str.++ "t" (str.++ ";" (str.++ "A" (str.++ " " (str.++ "&" (str.++ "g" (str.++ "t" (str.++ ";" (str.++ "\u{09}" (str.++ "\u{da}" "")))))))))))))

(define-fun Witness2 () String (str.++ "\u{04}" (str.++ "\u{84}" (str.++ "&" (str.++ "l" (str.++ "t" (str.++ ";" (str.++ "a" (str.++ "&" (str.++ "g" (str.++ "t" (str.++ ";" (str.++ "\u{09}" (str.++ "r" (str.++ "&" (str.++ "l" (str.++ "t" (str.++ ";" (str.++ "\u{0c}" (str.++ "Q" (str.++ "&" (str.++ "g" (str.++ "t" (str.++ ";" ""))))))))))))))))))))))))

(assert (= regexA (re.++ (str.to_re (str.++ "&" (str.++ "l" (str.++ "t" (str.++ ";" "")))))(re.++ (re.union (re.range "A" "A") (re.range "a" "a"))(re.++ (re.* (re.range " " " "))(re.++ (re.* (re.union (re.range "\u{09}" "\u{09}")(re.union (re.range "\u{0c}" "\u{0c}")(re.union (re.range " " "!")(re.union (re.range "$" ")")(re.union (re.range "," ";")(re.union (re.range "=" "=")(re.union (re.range "?" "Z")(re.union (re.range "_" "_") (re.range "a" "z"))))))))))(re.++ (str.to_re (str.++ "&" (str.++ "g" (str.++ "t" (str.++ ";" ""))))) (re.* (re.union (re.++ (str.to_re (str.++ "&" (str.++ "l" (str.++ "t" (str.++ ";" "")))))(re.++ (re.* (re.union (re.range "\u{09}" "\u{09}")(re.union (re.range "\u{0c}" "\u{0c}")(re.union (re.range " " "!")(re.union (re.range "$" ")")(re.union (re.range "," ";")(re.union (re.range "=" "=")(re.union (re.range "?" "Z")(re.union (re.range "_" "_") (re.range "a" "z"))))))))))(re.++ (str.to_re (str.++ "&" (str.++ "g" (str.++ "t" (str.++ ";" ""))))) (re.* (re.union (re.range "\u{09}" "\u{09}")(re.union (re.range "\u{0c}" "\u{0c}")(re.union (re.range " " "!")(re.union (re.range "$" ")")(re.union (re.range "," ";")(re.union (re.range "=" "=")(re.union (re.range "?" "Z")(re.union (re.range "_" "_") (re.range "a" "z"))))))))))))) (re.* (re.union (re.range "\u{09}" "\u{09}")(re.union (re.range "\u{0c}" "\u{0c}")(re.union (re.range " " "!")(re.union (re.range "$" ")")(re.union (re.range "," ";")(re.union (re.range "=" "=")(re.union (re.range "?" "Z")(re.union (re.range "_" "_") (re.range "a" "z")))))))))))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "\u{9a}" (str.++ "\u{22}" (str.++ "\u{22}" ""))))

(define-fun Witness2 () String (str.++ "$" (str.++ "\u{22}" (str.++ "\u{22}" (str.++ "\u{22}" (str.++ "\u{ff}" (str.++ " " (str.++ "\u{22}" ""))))))))

(assert (= regexA (re.++ (re.range "\u{22}" "\u{22}")(re.++ (re.* (re.union (str.to_re (str.++ "\u{22}" (str.++ "\u{22}" ""))) (re.union (re.range "\u{00}" "!") (re.range "#" "\u{ff}")))) (re.range "\u{22}" "\u{22}")))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "(" (str.++ "\u{08}" (str.++ ")" (str.++ ")" (str.++ ")" ""))))))

(define-fun Witness2 () String (str.++ ":" (str.++ "(" (str.++ "a" (str.++ ")" "")))))

(assert (= regexA (re.++ (re.+ (re.range "(" "(")) (re.++ (re.* (re.union (re.range "\u{00}" "'") (re.range ")" "\u{ff}"))) (re.+ (re.range ")" ")"))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "\u{f6}" (str.++ "w" (str.++ "o" (str.++ "w" (str.++ " " (str.++ "g" (str.++ "o" (str.++ "l" (str.++ "d" (str.++ " " (str.++ "@" ""))))))))))))

(define-fun Witness2 () String (str.++ "w" (str.++ "o" (str.++ "w" (str.++ " " (str.++ "g" (str.++ "o" (str.++ "l" (str.++ "d" (str.++ " " ""))))))))))

(assert (= regexA (str.to_re (str.++ "w" (str.++ "o" (str.++ "w" (str.++ " " (str.++ "g" (str.++ "o" (str.++ "l" (str.++ "d" (str.++ " " ""))))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "<" (str.++ ">" "")))

(define-fun Witness2 () String (str.++ "<" (str.++ "\u{f7}" (str.++ "\u{97}" (str.++ ">" (str.++ "'" ""))))))

(assert (= regexA (re.++ (re.range "<" "<")(re.++ (re.* (re.union (re.range "\u{00}" "=") (re.range "?" "\u{ff}"))) (re.range ">" ">")))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "*" (str.++ " " (str.++ " " (str.++ "{" (str.++ "\u{f5}" ""))))))

(define-fun Witness2 () String (str.++ " " (str.++ ":" (str.++ "#" (str.++ " " (str.++ "\u{85}" ""))))))

(assert (= regexA (re.++ (re.opt (re.union (re.range "*" "*") (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))))(re.++ (re.range " " " ")(re.++ (re.* (re.union (re.range "#" "#")(re.union (re.range "-" ".")(re.union (re.range "0" ":")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))))(re.++ (re.range " " " ") (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "+" ",")(re.union (re.range ">" ">")(re.union (re.range "{" "{")(re.union (re.range "~" "~")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "8" (str.++ "6" (str.++ "5" (str.++ "3" (str.++ "8" (str.++ "1" (str.++ "5" (str.++ "8" "")))))))))

(define-fun Witness2 () String (str.++ "+" (str.++ "1" (str.++ "8" (str.++ "-" (str.++ "(" (str.++ "9" (str.++ "9" (str.++ "9" (str.++ "-" (str.++ "\u{d4}" "")))))))))))

(assert (= regexA (re.union (re.++ (str.to_re "")(re.++ (re.opt (re.++ (re.opt (re.range "+" "+"))(re.++ ((_ re.loop 2 2) (re.range "0" "9")) (re.range "-" "-")))) (re.++ (re.opt (re.range "(" "("))(re.++ ((_ re.loop 3 5) (re.range "0" "9"))(re.++ (re.opt (re.range ")" ")")) (re.range "-" "-")))))) (re.++ ((_ re.loop 3 5) (re.range "0" "9"))(re.++ ((_ re.loop 5 8) (re.range "0" "9")) (str.to_re ""))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "P" (str.++ "e" (str.++ "r" (str.++ "c" (str.++ "e" (str.++ "n" (str.++ "t" (str.++ "a" (str.++ "g" (str.++ "e" (str.++ " " (str.++ "a" (str.++ "l" (str.++ "l" (str.++ "o" (str.++ "w" (str.++ "i" (str.++ "n" (str.++ "g" (str.++ " " (str.++ "u" (str.++ "p" (str.++ "t" (str.++ "o" (str.++ " " (str.++ "4" (str.++ " " (str.++ "p" (str.++ "l" (str.++ "a" (str.++ "c" (str.++ "e" (str.++ "s" (str.++ " " (str.++ "o" (str.++ "f" (str.++ " " (str.++ "d" (str.++ "e" (str.++ "c" (str.++ "i" (str.++ "m" (str.++ "a" (str.++ "l" "")))))))))))))))))))))))))))))))))))))))))))))

(define-fun Witness2 () String (str.++ "P" (str.++ "e" (str.++ "r" (str.++ "c" (str.++ "e" (str.++ "n" (str.++ "t" (str.++ "a" (str.++ "g" (str.++ "e" (str.++ " " (str.++ "a" (str.++ "l" (str.++ "l" (str.++ "o" (str.++ "w" (str.++ "i" (str.++ "n" (str.++ "g" (str.++ " " (str.++ "u" (str.++ "p" (str.++ "t" (str.++ "o" (str.++ " " (str.++ "4" (str.++ " " (str.++ "p" (str.++ "l" (str.++ "a" (str.++ "c" (str.++ "e" (str.++ "s" (str.++ " " (str.++ "o" (str.++ "f" (str.++ " " (str.++ "d" (str.++ "e" (str.++ "c" (str.++ "i" (str.++ "m" (str.++ "a" (str.++ "l" (str.++ "\u{9f}" (str.++ "&" (str.++ ":" (str.++ "\u{da}" "")))))))))))))))))))))))))))))))))))))))))))))))))

(assert (= regexA (str.to_re (str.++ "P" (str.++ "e" (str.++ "r" (str.++ "c" (str.++ "e" (str.++ "n" (str.++ "t" (str.++ "a" (str.++ "g" (str.++ "e" (str.++ " " (str.++ "a" (str.++ "l" (str.++ "l" (str.++ "o" (str.++ "w" (str.++ "i" (str.++ "n" (str.++ "g" (str.++ " " (str.++ "u" (str.++ "p" (str.++ "t" (str.++ "o" (str.++ " " (str.++ "4" (str.++ " " (str.++ "p" (str.++ "l" (str.++ "a" (str.++ "c" (str.++ "e" (str.++ "s" (str.++ " " (str.++ "o" (str.++ "f" (str.++ " " (str.++ "d" (str.++ "e" (str.++ "c" (str.++ "i" (str.++ "m" (str.++ "a" (str.++ "l" "")))))))))))))))))))))))))))))))))))))))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ ";" (str.++ "\u{98}" (str.++ "\u{a2}" (str.++ "\u{b9}" (str.++ "\u{06}" (str.++ "|" (str.++ "|" (str.++ "Z" "")))))))))

(define-fun Witness2 () String (str.++ "X" (str.++ "|" (str.++ "|" (str.++ "z" (str.++ "\u{0e}" (str.++ "\u{a8}" "")))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.+ (re.union (re.range "\u{00}" "\u{09}") (re.range "\u{0b}" "\u{ff}")))(re.++ (re.+ (re.range "|" "|")) (re.union (re.range "A" "Z") (re.range "a" "z")))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ " " (str.++ "<" (str.++ "l" (str.++ "i" (str.++ "n" (str.++ "k" (str.++ " " (str.++ "h" (str.++ "r" (str.++ "e" (str.++ "f" (str.++ "=" (str.++ "\u{22}" (str.++ "\u{89}" (str.++ "\u{10}" (str.++ "/" (str.++ "C" (str.++ "o" (str.++ "m" (str.++ "m" (str.++ "o" (str.++ "n" (str.++ "/" (str.++ "S" (str.++ "t" (str.++ "y" (str.++ "l" (str.++ "e" (str.++ "s" (str.++ "/" (str.++ "i" (str.++ "L" (str.++ "i" (str.++ "e" (str.++ "n" (str.++ "S" (str.++ "t" (str.++ "y" (str.++ "l" (str.++ "e" (str.++ "\u{d2}" (str.++ "c" (str.++ "s" (str.++ "s" (str.++ "\u{22}" (str.++ " " (str.++ "t" (str.++ "y" (str.++ "p" (str.++ "e" (str.++ "=" (str.++ "\u{22}" (str.++ "t" (str.++ "e" (str.++ "x" (str.++ "t" (str.++ "/" (str.++ "c" (str.++ "s" (str.++ "s" (str.++ "\u{22}" (str.++ " " (str.++ "r" (str.++ "e" (str.++ "l" (str.++ "=" (str.++ "\u{22}" (str.++ "s" (str.++ "t" (str.++ "y" (str.++ "l" (str.++ "e" (str.++ "s" (str.++ "h" (str.++ "e" (str.++ "e" (str.++ "t" (str.++ "\u{22}" (str.++ " " (str.++ "/" (str.++ ">" ""))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(define-fun Witness2 () String (str.++ "<" (str.++ "l" (str.++ "i" (str.++ "n" (str.++ "k" (str.++ " " (str.++ "h" (str.++ "r" (str.++ "e" (str.++ "f" (str.++ "=" (str.++ "\u{22}" (str.++ "(" (str.++ "\u{a4}" (str.++ "/" (str.++ "C" (str.++ "o" (str.++ "m" (str.++ "m" (str.++ "o" (str.++ "n" (str.++ "/" (str.++ "S" (str.++ "t" (str.++ "y" (str.++ "l" (str.++ "e" (str.++ "s" (str.++ "/" (str.++ "i" (str.++ "L" (str.++ "i" (str.++ "e" (str.++ "n" (str.++ "S" (str.++ "t" (str.++ "y" (str.++ "l" (str.++ "e" (str.++ "+" (str.++ "c" (str.++ "s" (str.++ "s" (str.++ "\u{22}" (str.++ " " (str.++ "t" (str.++ "y" (str.++ "p" (str.++ "e" (str.++ "=" (str.++ "\u{22}" (str.++ "t" (str.++ "e" (str.++ "x" (str.++ "t" (str.++ "/" (str.++ "c" (str.++ "s" (str.++ "s" (str.++ "\u{22}" (str.++ " " (str.++ "r" (str.++ "e" (str.++ "l" (str.++ "=" (str.++ "\u{22}" (str.++ "s" (str.++ "t" (str.++ "y" (str.++ "l" (str.++ "e" (str.++ "s" (str.++ "h" (str.++ "e" (str.++ "e" (str.++ "t" (str.++ "\u{22}" (str.++ " " (str.++ "/" (str.++ ">" "")))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(assert (= regexA (re.++ (str.to_re (str.++ "<" (str.++ "l" (str.++ "i" (str.++ "n" (str.++ "k" (str.++ " " (str.++ "h" (str.++ "r" (str.++ "e" (str.++ "f" (str.++ "=" (str.++ "\u{22}" "")))))))))))))(re.++ (re.union (re.range "\u{00}" "\u{09}") (re.range "\u{0b}" "\u{ff}"))(re.++ (re.union (re.range "\u{00}" "\u{09}") (re.range "\u{0b}" "\u{ff}"))(re.++ (str.to_re (str.++ "/" (str.++ "C" (str.++ "o" (str.++ "m" (str.++ "m" (str.++ "o" (str.++ "n" (str.++ "/" (str.++ "S" (str.++ "t" (str.++ "y" (str.++ "l" (str.++ "e" (str.++ "s" (str.++ "/" (str.++ "i" (str.++ "L" (str.++ "i" (str.++ "e" (str.++ "n" (str.++ "S" (str.++ "t" (str.++ "y" (str.++ "l" (str.++ "e" ""))))))))))))))))))))))))))(re.++ (re.union (re.range "\u{00}" "\u{09}") (re.range "\u{0b}" "\u{ff}")) (str.to_re (str.++ "c" (str.++ "s" (str.++ "s" (str.++ "\u{22}" (str.++ " " (str.++ "t" (str.++ "y" (str.++ "p" (str.++ "e" (str.++ "=" (str.++ "\u{22}" (str.++ "t" (str.++ "e" (str.++ "x" (str.++ "t" (str.++ "/" (str.++ "c" (str.++ "s" (str.++ "s" (str.++ "\u{22}" (str.++ " " (str.++ "r" (str.++ "e" (str.++ "l" (str.++ "=" (str.++ "\u{22}" (str.++ "s" (str.++ "t" (str.++ "y" (str.++ "l" (str.++ "e" (str.++ "s" (str.++ "h" (str.++ "e" (str.++ "e" (str.++ "t" (str.++ "\u{22}" (str.++ " " (str.++ "/" (str.++ ">" ""))))))))))))))))))))))))))))))))))))))))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "-" (str.++ "\u{5c}" (str.++ "N" (str.++ "\u{5c}" (str.++ ")" (str.++ "4" (str.++ "h" ""))))))))

(define-fun Witness2 () String (str.++ "\u{d3}" (str.++ "o" (str.++ "Z" (str.++ "\u{5c}" (str.++ "\u{91}" (str.++ "9" (str.++ "c" (str.++ "\u{ec}" (str.++ "\u{00}" ""))))))))))

(assert (= regexA (re.++ (re.* (re.++ (re.+ (re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "\u{5c}" "\u{5c}")(re.union (re.range "_" "_") (re.range "a" "z")))))))(re.++ (re.range "\u{5c}" "\u{5c}") (re.opt (re.union (re.range "\u{00}" "\u{09}") (re.range "\u{0b}" "\u{ff}"))))))(re.++ (re.+ (re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "\u{5c}" "\u{5c}")(re.union (re.range "_" "_") (re.range "a" "z")))))))(re.++ (re.range "\u{5c}" "\u{5c}")(re.++ (re.union (re.range "\u{00}" "\u{09}") (re.range "\u{0b}" "\u{ff}")) ((_ re.loop 2 6) (re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "\u{5c}" "\u{5c}")(re.union (re.range "_" "_") (re.range "a" "z")))))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "t" (str.++ "e" (str.++ "s" (str.++ "t" "")))))

(define-fun Witness2 () String (str.++ "t" (str.++ "e" (str.++ "s" (str.++ "t" (str.++ "\u{8e}" (str.++ "\u{94}" (str.++ "\u{ac}" (str.++ "\u{de}" (str.++ "\u{aa}" (str.++ "\u{d2}" "")))))))))))

(assert (= regexA (str.to_re (str.++ "t" (str.++ "e" (str.++ "s" (str.++ "t" "")))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "1" (str.++ "\u{85}" (str.++ "8" (str.++ "5" (str.++ "8" (str.++ "s" (str.++ "z" (str.++ "D" (str.++ "p" (str.++ "K" (str.++ "y" (str.++ "m" "")))))))))))))

(define-fun Witness2 () String (str.++ "\u{cd}" (str.++ "v" (str.++ "5" (str.++ "8" (str.++ "8" (str.++ "\u{0b}" (str.++ "T" (str.++ "l" (str.++ "Z" (str.++ "k" (str.++ "T" (str.++ "R" (str.++ "Q" ""))))))))))))))

(assert (= regexA (re.++ (re.opt (re.range "1" "1"))(re.++ (re.union (re.++ (re.opt (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "-" ".")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))))(re.++ (re.range "2" "9")(re.++ ((_ re.loop 2 2) (re.range "0" "9")) (re.opt (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "-" ".")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))))))) (re.++ (re.opt (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (re.range "(" "(")(re.++ (re.range "2" "9")(re.++ ((_ re.loop 2 2) (re.range "0" "9"))(re.++ (re.range ")" ")") (re.opt (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))))))))) (re.union (re.++ (re.range "1" "9")(re.++ ((_ re.loop 2 2) (re.range "0" "9"))(re.++ (re.opt (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "-" ".")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))))(re.++ ((_ re.loop 4 4) (re.range "0" "9"))(re.++ (re.opt (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))) (re.opt (re.++ (re.opt (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (re.union (re.union (re.range "X" "X") (re.range "x" "x"))(re.union (re.++ (re.union (re.range "E" "E") (re.range "e" "e")) (re.union (re.range "X" "X") (re.range "x" "x")))(re.union (re.++ (re.union (re.range "E" "E") (re.range "e" "e"))(re.++ (re.union (re.range "X" "X") (re.range "x" "x")) (re.range "." ".")))(re.union (re.++ (re.union (re.range "E" "E") (re.range "e" "e"))(re.++ (re.union (re.range "X" "X") (re.range "x" "x")) (re.union (re.range "T" "T") (re.range "t" "t")))) (re.++ (re.union (re.range "E" "E") (re.range "e" "e"))(re.++ (re.union (re.range "X" "X") (re.range "x" "x"))(re.++ (re.union (re.range "T" "T") (re.range "t" "t")) (re.range "." "."))))))))(re.++ (re.opt (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))) ((_ re.loop 3 4) (re.range "0" "9"))))))))))) ((_ re.loop 7 7) (re.union (re.range "A" "Z") (re.range "a" "z"))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "&" (str.++ "#" (str.++ "1" (str.++ "9" (str.++ "5" (str.++ ";" (str.++ "[" (str.++ "\u{c7}" "")))))))))

(define-fun Witness2 () String (str.++ "\u{1a}" (str.++ "&" (str.++ "a" (str.++ "m" (str.++ "p" (str.++ ";" (str.++ "a" (str.++ "r" (str.++ "i" (str.++ "n" (str.++ "g" (str.++ ";" (str.++ "\u{db}" ""))))))))))))))

(assert (= regexA (re.union (str.to_re (str.++ "&" (str.++ "#" (str.++ "1" (str.++ "9" (str.++ "2" (str.++ ";" "")))))))(re.union (str.to_re (str.++ "&" (str.++ "#" (str.++ "1" (str.++ "9" (str.++ "3" (str.++ ";" "")))))))(re.union (str.to_re (str.++ "&" (str.++ "#" (str.++ "1" (str.++ "9" (str.++ "4" (str.++ ";" "")))))))(re.union (str.to_re (str.++ "&" (str.++ "#" (str.++ "1" (str.++ "9" (str.++ "5" (str.++ ";" "")))))))(re.union (str.to_re (str.++ "&" (str.++ "#" (str.++ "1" (str.++ "9" (str.++ "6" (str.++ ";" "")))))))(re.union (str.to_re (str.++ "&" (str.++ "#" (str.++ "1" (str.++ "9" (str.++ "7" (str.++ ";" "")))))))(re.union (str.to_re (str.++ "&" (str.++ "#" (str.++ "2" (str.++ "2" (str.++ "4" (str.++ ";" "")))))))(re.union (str.to_re (str.++ "&" (str.++ "#" (str.++ "2" (str.++ "2" (str.++ "5" (str.++ ";" "")))))))(re.union (str.to_re (str.++ "&" (str.++ "#" (str.++ "2" (str.++ "2" (str.++ "6" (str.++ ";" "")))))))(re.union (str.to_re (str.++ "&" (str.++ "#" (str.++ "2" (str.++ "2" (str.++ "7" (str.++ ";" "")))))))(re.union (str.to_re (str.++ "&" (str.++ "#" (str.++ "2" (str.++ "2" (str.++ "8" (str.++ ";" "")))))))(re.union (str.to_re (str.++ "&" (str.++ "#" (str.++ "2" (str.++ "2" (str.++ "9" (str.++ ";" "")))))))(re.union (str.to_re (str.++ "&" (str.++ "a" (str.++ "m" (str.++ "p" (str.++ ";" (str.++ "#" (str.++ "0" (str.++ "9" (str.++ "7" (str.++ ";" "")))))))))))(re.union (str.to_re (str.++ "&" (str.++ "a" (str.++ "m" (str.++ "p" (str.++ ";" (str.++ "#" (str.++ "0" (str.++ "6" (str.++ "5" (str.++ ";" "")))))))))))(re.union (str.to_re (str.++ "&" (str.++ "a" (str.++ "m" (str.++ "p" (str.++ ";" (str.++ "#" (str.++ "0" (str.++ "6" (str.++ "4" (str.++ ";" "")))))))))))(re.union (str.to_re (str.++ "&" (str.++ "a" (str.++ "m" (str.++ "p" (str.++ ";" (str.++ "c" (str.++ "o" (str.++ "m" (str.++ "m" (str.++ "a" (str.++ "t" (str.++ ";" "")))))))))))))(re.union (str.to_re (str.++ "&" (str.++ "a" (str.++ "m" (str.++ "p" (str.++ ";" (str.++ "a" (str.++ "l" (str.++ "p" (str.++ "h" (str.++ "a" (str.++ ";" ""))))))))))))(re.union (str.to_re (str.++ "&" (str.++ "a" (str.++ "m" (str.++ "p" (str.++ ";" (str.++ "#" (str.++ "1" (str.++ "9" (str.++ "2" (str.++ ";" "")))))))))))(re.union (str.to_re (str.++ "&" (str.++ "a" (str.++ "m" (str.++ "p" (str.++ ";" (str.++ "#" (str.++ "1" (str.++ "9" (str.++ "3" (str.++ ";" "")))))))))))(re.union (str.to_re (str.++ "&" (str.++ "a" (str.++ "m" (str.++ "p" (str.++ ";" (str.++ "#" (str.++ "1" (str.++ "9" (str.++ "4" (str.++ ";" "")))))))))))(re.union (str.to_re (str.++ "&" (str.++ "a" (str.++ "m" (str.++ "p" (str.++ ";" (str.++ "#" (str.++ "1" (str.++ "9" (str.++ "5" (str.++ ";" "")))))))))))(re.union (str.to_re (str.++ "&" (str.++ "a" (str.++ "m" (str.++ "p" (str.++ ";" (str.++ "#" (str.++ "1" (str.++ "9" (str.++ "6" (str.++ ";" "")))))))))))(re.union (str.to_re (str.++ "&" (str.++ "a" (str.++ "m" (str.++ "p" (str.++ ";" (str.++ "#" (str.++ "1" (str.++ "9" (str.++ "7" (str.++ ";" "")))))))))))(re.union (str.to_re (str.++ "&" (str.++ "a" (str.++ "m" (str.++ "p" (str.++ ";" (str.++ "A" (str.++ "g" (str.++ "r" (str.++ "a" (str.++ "v" (str.++ "e" (str.++ ";" "")))))))))))))(re.union (str.to_re (str.++ "&" (str.++ "a" (str.++ "m" (str.++ "p" (str.++ ";" (str.++ "A" (str.++ "a" (str.++ "c" (str.++ "u" (str.++ "t" (str.++ "e" (str.++ ";" "")))))))))))))(re.union (str.to_re (str.++ "&" (str.++ "a" (str.++ "m" (str.++ "p" (str.++ ";" (str.++ "A" (str.++ "c" (str.++ "i" (str.++ "r" (str.++ "c" (str.++ ";" ""))))))))))))(re.union (str.to_re (str.++ "&" (str.++ "a" (str.++ "m" (str.++ "p" (str.++ ";" (str.++ "A" (str.++ "t" (str.++ "i" (str.++ "l" (str.++ "d" (str.++ "e" (str.++ ";" "")))))))))))))(re.union (str.to_re (str.++ "&" (str.++ "a" (str.++ "m" (str.++ "p" (str.++ ";" (str.++ "A" (str.++ "u" (str.++ "m" (str.++ "l" (str.++ ";" "")))))))))))(re.union (str.to_re (str.++ "&" (str.++ "a" (str.++ "m" (str.++ "p" (str.++ ";" (str.++ "A" (str.++ "r" (str.++ "i" (str.++ "n" (str.++ "g" (str.++ ";" ""))))))))))))(re.union (str.to_re (str.++ "&" (str.++ "a" (str.++ "m" (str.++ "p" (str.++ ";" (str.++ "#" (str.++ "2" (str.++ "2" (str.++ "4" (str.++ ";" "")))))))))))(re.union (str.to_re (str.++ "&" (str.++ "a" (str.++ "m" (str.++ "p" (str.++ ";" (str.++ "#" (str.++ "2" (str.++ "2" (str.++ "5" (str.++ ";" "")))))))))))(re.union (str.to_re (str.++ "&" (str.++ "a" (str.++ "m" (str.++ "p" (str.++ ";" (str.++ "#" (str.++ "2" (str.++ "2" (str.++ "6" (str.++ ";" "")))))))))))(re.union (str.to_re (str.++ "&" (str.++ "a" (str.++ "m" (str.++ "p" (str.++ ";" (str.++ "#" (str.++ "2" (str.++ "2" (str.++ "7" (str.++ ";" "")))))))))))(re.union (str.to_re (str.++ "&" (str.++ "a" (str.++ "m" (str.++ "p" (str.++ ";" (str.++ "#" (str.++ "2" (str.++ "2" (str.++ "8" (str.++ ";" "")))))))))))(re.union (str.to_re (str.++ "&" (str.++ "a" (str.++ "m" (str.++ "p" (str.++ ";" (str.++ "#" (str.++ "2" (str.++ "2" (str.++ "9" (str.++ ";" "")))))))))))(re.union (str.to_re (str.++ "&" (str.++ "a" (str.++ "m" (str.++ "p" (str.++ ";" (str.++ "a" (str.++ "g" (str.++ "r" (str.++ "a" (str.++ "v" (str.++ "e" (str.++ ";" "")))))))))))))(re.union (str.to_re (str.++ "&" (str.++ "a" (str.++ "m" (str.++ "p" (str.++ ";" (str.++ "a" (str.++ "a" (str.++ "c" (str.++ "u" (str.++ "t" (str.++ "e" (str.++ ";" "")))))))))))))(re.union (str.to_re (str.++ "&" (str.++ "a" (str.++ "m" (str.++ "p" (str.++ ";" (str.++ "a" (str.++ "c" (str.++ "i" (str.++ "r" (str.++ "c" (str.++ ";" ""))))))))))))(re.union (str.to_re (str.++ "&" (str.++ "a" (str.++ "m" (str.++ "p" (str.++ ";" (str.++ "a" (str.++ "t" (str.++ "i" (str.++ "l" (str.++ "d" (str.++ "e" (str.++ ";" "")))))))))))))(re.union (str.to_re (str.++ "&" (str.++ "a" (str.++ "m" (str.++ "p" (str.++ ";" (str.++ "a" (str.++ "u" (str.++ "m" (str.++ "l" (str.++ ";" ""))))))))))) (str.to_re (str.++ "&" (str.++ "a" (str.++ "m" (str.++ "p" (str.++ ";" (str.++ "a" (str.++ "r" (str.++ "i" (str.++ "n" (str.++ "g" (str.++ ";" ""))))))))))))))))))))))))))))))))))))))))))))))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "#" (str.++ "+" (str.++ "9" (str.++ "8" (str.++ "9" (str.++ "1" (str.++ "_" (str.++ "_" (str.++ "3" (str.++ "4" (str.++ "8" (str.++ "9" (str.++ "1" (str.++ "0" (str.++ "6" ""))))))))))))))))

(define-fun Witness2 () String (str.++ "\u{a6}" (str.++ "x" (str.++ "+" (str.++ " " (str.++ "9" (str.++ "2" (str.++ "6" (str.++ " " (str.++ "2" (str.++ "8" (str.++ "8" (str.++ "\u{d3}" "")))))))))))))

(assert (= regexA (re.++ (re.opt (re.range "+" "+")) ((_ re.loop 2 10) (re.++ (re.opt (re.union (re.range " " " ")(re.union (re.range "(" ")")(re.union (re.range "-" ".") (re.range "_" "_")))))(re.++ ((_ re.loop 3 20) (re.range "0" "9")) (re.opt (re.union (re.range " " " ")(re.union (re.range "(" ")")(re.union (re.range "-" ".") (re.range "_" "_")))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "3" (str.++ "1" (str.++ "/" (str.++ " " (str.++ "1" (str.++ "2" (str.++ " " (str.++ " " (str.++ "9" ""))))))))))

(define-fun Witness2 () String (str.++ "3" (str.++ "0" (str.++ "t" (str.++ "H" (str.++ " " (str.++ " " (str.++ " " (str.++ " " (str.++ " " (str.++ " " (str.++ " " (str.++ " " (str.++ "f" (str.++ "E" (str.++ "B" (str.++ "R" (str.++ "U" (str.++ "a" (str.++ "r" (str.++ "y" (str.++ " " (str.++ "/" (str.++ "2" (str.++ "9" "")))))))))))))))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.union (re.++ (re.range "1" "2")(re.++ ((_ re.loop 3 3) (re.range "0" "9"))(re.++ (re.* (re.range " " " "))(re.++ (re.union (re.range " " " ") (re.range "," "/"))(re.++ (re.* (re.range " " " "))(re.++ (re.union (re.++ (re.range "1" "1") (re.range "0" "2")) (re.++ (re.opt (re.range "0" "0")) (re.range "1" "9")))(re.++ (re.* (re.range " " " "))(re.++ (re.union (re.range " " " ") (re.range "," "/"))(re.++ (re.* (re.range " " " ")) (re.union (re.++ (re.range "1" "2") (re.range "0" "9"))(re.union (re.++ (re.range "3" "3") (re.range "0" "1")) (re.++ (re.opt (re.range "0" "0")) (re.range "1" "9")))))))))))))(re.union (re.++ (re.union (re.++ (re.range "1" "1") (re.range "0" "2")) (re.++ (re.opt (re.range "0" "0")) (re.range "1" "9")))(re.++ (re.* (re.range " " " "))(re.++ (re.union (re.range " " " ") (re.range "," "/"))(re.++ (re.* (re.range " " " "))(re.++ (re.union (re.++ (re.range "1" "2") (re.range "0" "9"))(re.union (re.++ (re.range "3" "3") (re.range "0" "1")) (re.++ (re.opt (re.range "0" "0")) (re.range "1" "9"))))(re.++ (re.* (re.range " " " "))(re.++ (re.union (re.range " " " ") (re.range "," "/"))(re.++ (re.* (re.range " " " ")) (re.union ((_ re.loop 1 2) (re.range "0" "9")) (re.++ (re.range "1" "2") ((_ re.loop 3 3) (re.range "0" "9"))))))))))))(re.union (re.++ (re.union (re.++ (re.range "1" "2") (re.range "0" "9"))(re.union (re.++ (re.range "3" "3") (re.range "0" "1")) (re.++ (re.opt (re.range "0" "0")) (re.range "1" "9"))))(re.++ (re.* (re.range " " " "))(re.++ (re.union (re.range " " " ") (re.range "," "/"))(re.++ (re.* (re.range " " " "))(re.++ (re.union (re.++ (re.range "1" "1") (re.range "0" "2")) (re.++ (re.opt (re.range "0" "0")) (re.range "1" "9")))(re.++ (re.* (re.range " " " "))(re.++ (re.union (re.range " " " ") (re.range "," "/"))(re.++ (re.* (re.range " " " ")) (re.union ((_ re.loop 1 2) (re.range "0" "9")) (re.++ (re.range "1" "2") ((_ re.loop 3 3) (re.range "0" "9"))))))))))))(re.union (re.++ (re.union (re.++ (re.range "j" "j") (re.union (re.++ (str.to_re (str.++ "a" (str.++ "n" ""))) (re.opt (str.to_re (str.++ "u" (str.++ "a" (str.++ "r" (str.++ "y" ""))))))) (re.++ (re.range "u" "u") (re.union (re.++ (re.range "n" "n") (re.opt (re.range "e" "e"))) (re.++ (re.range "l" "l") (re.opt (re.range "y" "y")))))))(re.union (re.++ (re.range "a" "a") (re.union (re.++ (str.to_re (str.++ "p" (str.++ "r" ""))) (re.opt (str.to_re (str.++ "i" (str.++ "l" ""))))) (re.++ (str.to_re (str.++ "u" (str.++ "g" ""))) (re.opt (str.to_re (str.++ "u" (str.++ "s" (str.++ "t" ""))))))))(re.union (re.++ (str.to_re (str.++ "m" (str.++ "a" ""))) (re.union (re.range "y" "y") (re.++ (re.range "r" "r") (re.opt (str.to_re (str.++ "c" (str.++ "h" "")))))))(re.union (re.++ (re.union (str.to_re (str.++ "n" (str.++ "o" (str.++ "v" "")))) (str.to_re (str.++ "d" (str.++ "e" (str.++ "c" ""))))) (re.opt (str.to_re (str.++ "e" (str.++ "m" (str.++ "b" (str.++ "e" (str.++ "r" ""))))))))(re.union (re.++ (str.to_re (str.++ "f" (str.++ "e" (str.++ "b" "")))) (re.opt (str.to_re (str.++ "r" (str.++ "u" (str.++ "a" (str.++ "r" (str.++ "y" ""))))))))(re.union (re.++ (str.to_re (str.++ "s" (str.++ "e" (str.++ "p" "")))) (re.opt (str.to_re (str.++ "t" (str.++ "e" (str.++ "m" (str.++ "b" (str.++ "e" (str.++ "r" ""))))))))) (re.++ (str.to_re (str.++ "o" (str.++ "c" (str.++ "t" "")))) (re.opt (str.to_re (str.++ "o" (str.++ "b" (str.++ "e" (str.++ "r" "")))))))))))))(re.++ (re.* (re.range " " " "))(re.++ (re.union (re.range " " " ") (re.range "," "/"))(re.++ (re.* (re.range " " " "))(re.++ (re.union (re.++ (re.range "1" "2") (re.range "0" "9"))(re.union (re.++ (re.range "3" "3") (re.range "0" "1"))(re.union (re.++ (re.opt (re.range "0" "0")) (re.range "1" "9"))(re.union (re.++ (re.opt (re.range "2" "3")) (str.to_re (str.++ "1" (str.++ "s" (str.++ "t" "")))))(re.union (re.++ (re.opt (re.range "2" "2")) (str.to_re (str.++ "2" (str.++ "n" (str.++ "d" "")))))(re.union (re.++ (re.opt (re.range "2" "2")) (str.to_re (str.++ "3" (str.++ "r" (str.++ "d" "")))))(re.union (re.++ (re.range "4" "9") (str.to_re (str.++ "t" (str.++ "h" ""))))(re.union (re.++ (re.range "1" "1")(re.++ (re.range "0" "9") (str.to_re (str.++ "t" (str.++ "h" "")))))(re.union (str.to_re (str.++ "2" (str.++ "0" (str.++ "t" (str.++ "h" "")))))(re.union (re.++ (re.range "2" "2")(re.++ (re.range "4" "9") (str.to_re (str.++ "t" (str.++ "h" ""))))) (str.to_re (str.++ "3" (str.++ "0" (str.++ "t" (str.++ "h" "")))))))))))))))(re.++ (re.* (re.range " " " "))(re.++ (re.union (re.range " " " ") (re.range "," "/"))(re.++ (re.* (re.range " " " ")) (re.union ((_ re.loop 1 2) (re.range "0" "9")) (re.++ (re.range "1" "2") ((_ re.loop 3 3) (re.range "0" "9"))))))))))))(re.union (re.++ (re.union (re.++ (re.range "1" "2") (re.range "0" "9"))(re.union (re.++ (re.range "3" "3") (re.range "0" "1"))(re.union (re.++ (re.opt (re.range "0" "0")) (re.range "1" "9"))(re.union (re.++ (re.opt (re.range "2" "3")) (str.to_re (str.++ "1" (str.++ "s" (str.++ "t" "")))))(re.union (re.++ (re.opt (re.range "2" "2")) (str.to_re (str.++ "2" (str.++ "n" (str.++ "d" "")))))(re.union (re.++ (re.opt (re.range "2" "2")) (str.to_re (str.++ "3" (str.++ "r" (str.++ "d" "")))))(re.union (re.++ (re.range "4" "9") (str.to_re (str.++ "t" (str.++ "h" ""))))(re.union (re.++ (re.range "1" "1")(re.++ (re.range "0" "9") (str.to_re (str.++ "t" (str.++ "h" "")))))(re.union (str.to_re (str.++ "2" (str.++ "0" (str.++ "t" (str.++ "h" "")))))(re.union (re.++ (re.range "2" "2")(re.++ (re.range "4" "9") (str.to_re (str.++ "t" (str.++ "h" ""))))) (str.to_re (str.++ "3" (str.++ "0" (str.++ "t" (str.++ "h" "")))))))))))))))(re.++ (re.* (re.range " " " "))(re.++ (re.union (re.range " " " ") (re.range "," "/"))(re.++ (re.* (re.range " " " "))(re.++ (re.union (re.++ (re.range "j" "j") (re.union (re.++ (str.to_re (str.++ "a" (str.++ "n" ""))) (re.opt (str.to_re (str.++ "u" (str.++ "a" (str.++ "r" (str.++ "y" ""))))))) (re.++ (re.range "u" "u") (re.union (re.++ (re.range "n" "n") (re.opt (re.range "e" "e"))) (re.++ (re.range "l" "l") (re.opt (re.range "y" "y")))))))(re.union (re.++ (re.range "a" "a") (re.union (re.++ (str.to_re (str.++ "p" (str.++ "r" ""))) (re.opt (str.to_re (str.++ "i" (str.++ "l" ""))))) (re.++ (str.to_re (str.++ "u" (str.++ "g" ""))) (re.opt (str.to_re (str.++ "u" (str.++ "s" (str.++ "t" ""))))))))(re.union (re.++ (str.to_re (str.++ "m" (str.++ "a" ""))) (re.union (re.range "y" "y") (re.++ (re.range "r" "r") (re.opt (str.to_re (str.++ "c" (str.++ "h" "")))))))(re.union (re.++ (re.union (str.to_re (str.++ "n" (str.++ "o" (str.++ "v" "")))) (str.to_re (str.++ "d" (str.++ "e" (str.++ "c" ""))))) (re.opt (str.to_re (str.++ "e" (str.++ "m" (str.++ "b" (str.++ "e" (str.++ "r" ""))))))))(re.union (re.++ (str.to_re (str.++ "f" (str.++ "e" (str.++ "b" "")))) (re.opt (str.to_re (str.++ "r" (str.++ "u" (str.++ "a" (str.++ "r" (str.++ "y" ""))))))))(re.union (re.++ (str.to_re (str.++ "s" (str.++ "e" (str.++ "p" "")))) (re.opt (str.to_re (str.++ "t" (str.++ "e" (str.++ "m" (str.++ "b" (str.++ "e" (str.++ "r" ""))))))))) (re.++ (str.to_re (str.++ "o" (str.++ "c" (str.++ "t" "")))) (re.opt (str.to_re (str.++ "o" (str.++ "b" (str.++ "e" (str.++ "r" "")))))))))))))(re.++ (re.* (re.range " " " "))(re.++ (re.union (re.range " " " ") (re.range "," "/"))(re.++ (re.* (re.range " " " ")) (re.union ((_ re.loop 1 2) (re.range "0" "9")) (re.++ (re.range "1" "2") ((_ re.loop 3 3) (re.range "0" "9")))))))))))) (re.++ (re.union (re.++ (re.range "1" "2")(re.++ ((_ re.loop 3 3) (re.range "0" "9"))(re.++ (re.* (re.range " " " "))(re.++ (re.union (re.range " " " ") (re.range "," "/"))(re.++ (re.* (re.range " " " "))(re.++ (re.union (re.++ (re.range "1" "1") (re.range "0" "2")) (re.++ (re.opt (re.range "0" "0")) (re.range "1" "9")))(re.++ (re.* (re.range " " " "))(re.++ (re.union (re.range " " " ") (re.range "," "/"))(re.++ (re.* (re.range " " " ")) (re.union (re.++ (re.range "1" "2") (re.range "0" "9"))(re.union (re.++ (re.range "3" "3") (re.range "0" "1")) (re.++ (re.opt (re.range "0" "0")) (re.range "1" "9")))))))))))))(re.union (re.++ (re.union (re.++ (re.range "1" "1") (re.range "0" "2")) (re.++ (re.opt (re.range "0" "0")) (re.range "1" "9")))(re.++ (re.* (re.range " " " "))(re.++ (re.union (re.range " " " ") (re.range "," "/"))(re.++ (re.* (re.range " " " "))(re.++ (re.union (re.++ (re.range "1" "2") (re.range "0" "9"))(re.union (re.++ (re.range "3" "3") (re.range "0" "1")) (re.++ (re.opt (re.range "0" "0")) (re.range "1" "9"))))(re.++ (re.* (re.range " " " "))(re.++ (re.union (re.range " " " ") (re.range "," "/"))(re.++ (re.* (re.range " " " ")) (re.union ((_ re.loop 1 2) (re.range "0" "9")) (re.++ (re.range "1" "2") ((_ re.loop 3 3) (re.range "0" "9"))))))))))))(re.union (re.++ (re.union (re.++ (re.range "1" "2") (re.range "0" "9"))(re.union (re.++ (re.range "3" "3") (re.range "0" "1")) (re.++ (re.opt (re.range "0" "0")) (re.range "1" "9"))))(re.++ (re.* (re.range " " " "))(re.++ (re.union (re.range " " " ") (re.range "," "/"))(re.++ (re.* (re.range " " " "))(re.++ (re.union (re.++ (re.range "1" "1") (re.range "0" "2")) (re.++ (re.opt (re.range "0" "0")) (re.range "1" "9")))(re.++ (re.* (re.range " " " "))(re.++ (re.union (re.range " " " ") (re.range "," "/"))(re.++ (re.* (re.range " " " ")) (re.union ((_ re.loop 1 2) (re.range "0" "9")) (re.++ (re.range "1" "2") ((_ re.loop 3 3) (re.range "0" "9"))))))))))))(re.union (re.++ (re.union (re.++ (re.range "j" "j") (re.union (re.++ (str.to_re (str.++ "a" (str.++ "n" ""))) (re.opt (str.to_re (str.++ "u" (str.++ "a" (str.++ "r" (str.++ "y" ""))))))) (re.++ (re.range "u" "u") (re.union (re.++ (re.range "n" "n") (re.opt (re.range "e" "e"))) (re.++ (re.range "l" "l") (re.opt (re.range "y" "y")))))))(re.union (re.++ (re.range "a" "a") (re.union (re.++ (str.to_re (str.++ "p" (str.++ "r" ""))) (re.opt (str.to_re (str.++ "i" (str.++ "l" ""))))) (re.++ (str.to_re (str.++ "u" (str.++ "g" ""))) (re.opt (str.to_re (str.++ "u" (str.++ "s" (str.++ "t" ""))))))))(re.union (re.++ (str.to_re (str.++ "m" (str.++ "a" ""))) (re.union (re.range "y" "y") (re.++ (re.range "r" "r") (re.opt (str.to_re (str.++ "c" (str.++ "h" "")))))))(re.union (re.++ (re.union (str.to_re (str.++ "n" (str.++ "o" (str.++ "v" "")))) (str.to_re (str.++ "d" (str.++ "e" (str.++ "c" ""))))) (re.opt (str.to_re (str.++ "e" (str.++ "m" (str.++ "b" (str.++ "e" (str.++ "r" ""))))))))(re.union (re.++ (str.to_re (str.++ "f" (str.++ "e" (str.++ "b" "")))) (re.opt (str.to_re (str.++ "r" (str.++ "u" (str.++ "a" (str.++ "r" (str.++ "y" ""))))))))(re.union (re.++ (str.to_re (str.++ "s" (str.++ "e" (str.++ "p" "")))) (re.opt (str.to_re (str.++ "t" (str.++ "e" (str.++ "m" (str.++ "b" (str.++ "e" (str.++ "r" ""))))))))) (re.++ (str.to_re (str.++ "o" (str.++ "c" (str.++ "t" "")))) (re.opt (str.to_re (str.++ "o" (str.++ "b" (str.++ "e" (str.++ "r" "")))))))))))))(re.++ (re.* (re.range " " " "))(re.++ (re.union (re.range " " " ") (re.range "," "/"))(re.++ (re.* (re.range " " " "))(re.++ (re.union (re.++ (re.range "1" "2") (re.range "0" "9"))(re.union (re.++ (re.range "3" "3") (re.range "0" "1"))(re.union (re.++ (re.opt (re.range "0" "0")) (re.range "1" "9"))(re.union (re.++ (re.opt (re.range "2" "3")) (str.to_re (str.++ "1" (str.++ "s" (str.++ "t" "")))))(re.union (re.++ (re.opt (re.range "2" "2")) (str.to_re (str.++ "2" (str.++ "n" (str.++ "d" "")))))(re.union (re.++ (re.opt (re.range "2" "2")) (str.to_re (str.++ "3" (str.++ "r" (str.++ "d" "")))))(re.union (re.++ (re.range "4" "9") (str.to_re (str.++ "t" (str.++ "h" ""))))(re.union (re.++ (re.range "1" "1")(re.++ (re.range "0" "9") (str.to_re (str.++ "t" (str.++ "h" "")))))(re.union (str.to_re (str.++ "2" (str.++ "0" (str.++ "t" (str.++ "h" "")))))(re.union (re.++ (re.range "2" "2")(re.++ (re.range "4" "9") (str.to_re (str.++ "t" (str.++ "h" ""))))) (str.to_re (str.++ "3" (str.++ "0" (str.++ "t" (str.++ "h" "")))))))))))))))(re.++ (re.* (re.range " " " "))(re.++ (re.union (re.range " " " ") (re.range "," "/"))(re.++ (re.* (re.range " " " ")) (re.union ((_ re.loop 1 2) (re.range "0" "9")) (re.++ (re.range "1" "2") ((_ re.loop 3 3) (re.range "0" "9")))))))))))) (re.++ (re.union (re.++ (re.range "1" "2") (re.range "0" "9"))(re.union (re.++ (re.range "3" "3") (re.range "0" "1"))(re.union (re.++ (re.opt (re.range "0" "0")) (re.range "1" "9"))(re.union (re.++ (re.opt (re.range "2" "3")) (str.to_re (str.++ "1" (str.++ "s" (str.++ "t" "")))))(re.union (re.++ (re.opt (re.range "2" "2")) (str.to_re (str.++ "2" (str.++ "n" (str.++ "d" "")))))(re.union (re.++ (re.opt (re.range "2" "2")) (str.to_re (str.++ "3" (str.++ "r" (str.++ "d" "")))))(re.union (re.++ (re.range "4" "9") (str.to_re (str.++ "t" (str.++ "h" ""))))(re.union (re.++ (re.range "1" "1")(re.++ (re.range "0" "9") (str.to_re (str.++ "t" (str.++ "h" "")))))(re.union (str.to_re (str.++ "2" (str.++ "0" (str.++ "t" (str.++ "h" "")))))(re.union (re.++ (re.range "2" "2")(re.++ (re.range "4" "9") (str.to_re (str.++ "t" (str.++ "h" ""))))) (str.to_re (str.++ "3" (str.++ "0" (str.++ "t" (str.++ "h" "")))))))))))))))(re.++ (re.* (re.range " " " "))(re.++ (re.union (re.range " " " ") (re.range "," "/"))(re.++ (re.* (re.range " " " "))(re.++ (re.union (re.++ (re.range "j" "j") (re.union (re.++ (str.to_re (str.++ "a" (str.++ "n" ""))) (re.opt (str.to_re (str.++ "u" (str.++ "a" (str.++ "r" (str.++ "y" ""))))))) (re.++ (re.range "u" "u") (re.union (re.++ (re.range "n" "n") (re.opt (re.range "e" "e"))) (re.++ (re.range "l" "l") (re.opt (re.range "y" "y")))))))(re.union (re.++ (re.range "a" "a") (re.union (re.++ (str.to_re (str.++ "p" (str.++ "r" ""))) (re.opt (str.to_re (str.++ "i" (str.++ "l" ""))))) (re.++ (str.to_re (str.++ "u" (str.++ "g" ""))) (re.opt (str.to_re (str.++ "u" (str.++ "s" (str.++ "t" ""))))))))(re.union (re.++ (str.to_re (str.++ "m" (str.++ "a" ""))) (re.union (re.range "y" "y") (re.++ (re.range "r" "r") (re.opt (str.to_re (str.++ "c" (str.++ "h" "")))))))(re.union (re.++ (re.union (str.to_re (str.++ "n" (str.++ "o" (str.++ "v" "")))) (str.to_re (str.++ "d" (str.++ "e" (str.++ "c" ""))))) (re.opt (str.to_re (str.++ "e" (str.++ "m" (str.++ "b" (str.++ "e" (str.++ "r" ""))))))))(re.union (re.++ (str.to_re (str.++ "f" (str.++ "e" (str.++ "b" "")))) (re.opt (str.to_re (str.++ "r" (str.++ "u" (str.++ "a" (str.++ "r" (str.++ "y" ""))))))))(re.union (re.++ (str.to_re (str.++ "s" (str.++ "e" (str.++ "p" "")))) (re.opt (str.to_re (str.++ "t" (str.++ "e" (str.++ "m" (str.++ "b" (str.++ "e" (str.++ "r" ""))))))))) (re.++ (str.to_re (str.++ "o" (str.++ "c" (str.++ "t" "")))) (re.opt (str.to_re (str.++ "o" (str.++ "b" (str.++ "e" (str.++ "r" "")))))))))))))(re.++ (re.* (re.range " " " "))(re.++ (re.union (re.range " " " ") (re.range "," "/"))(re.++ (re.* (re.range " " " ")) (re.union ((_ re.loop 1 2) (re.range "0" "9")) (re.++ (re.range "1" "2") ((_ re.loop 3 3) (re.range "0" "9"))))))))))))))))(re.++ (re.* (re.range " " " ")) (re.union (re.++ (re.union (re.++ (re.range "1" "1") (re.range "0" "2")) (re.++ (re.opt (re.range "0" "0")) (re.range "1" "9")))(re.++ (re.opt (re.++ (re.* (re.range " " " "))(re.++ (re.range ":" ":")(re.++ (re.* (re.range " " " ")) (re.union (re.++ (re.range "1" "5") (re.range "0" "9")) (re.++ (re.opt (re.range "0" "0")) (re.range "0" "9")))))))(re.++ (re.opt (re.++ (re.* (re.range " " " "))(re.++ (re.range ":" ":")(re.++ (re.* (re.range " " " ")) (re.union (re.++ (re.range "1" "5") (re.range "0" "9")) (re.++ (re.opt (re.range "0" "0")) (re.range "0" "9")))))))(re.++ (re.* (re.range " " " "))(re.++ (re.union (re.range "a" "a") (re.range "p" "p")) (re.range "m" "m")))))) (re.++ (re.union (re.++ (re.range "2" "2") (re.range "0" "3")) (re.++ (re.opt (re.range "0" "1")) (re.range "0" "9")))(re.++ (re.* (re.range " " " "))(re.++ (re.range ":" ":")(re.++ (re.* (re.range " " " "))(re.++ (re.union (re.++ (re.range "1" "5") (re.range "0" "9")) (re.++ (re.opt (re.range "0" "0")) (re.range "0" "9"))) (re.opt (re.++ (re.* (re.range " " " "))(re.++ (re.range ":" ":")(re.++ (re.* (re.range " " " ")) (re.union (re.++ (re.range "1" "5") (re.range "0" "9")) (re.++ (re.opt (re.range "0" "0")) (re.range "0" "9")))))))))))))))))))) (str.to_re "")))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "A" (str.++ "C" (str.++ "Z" (str.++ "1" (str.++ "2" (str.++ "8" (str.++ "9" (str.++ "9" (str.++ "7" (str.++ "1" (str.++ "8" (str.++ "6" (str.++ "8" (str.++ "8" (str.++ "8" (str.++ "3" (str.++ "5" (str.++ "5" (str.++ "9" (str.++ "2" (str.++ "1" (str.++ "9" (str.++ "2" (str.++ "2" (str.++ "7" ""))))))))))))))))))))))))))

(define-fun Witness2 () String (str.++ "C" (str.++ "Z" (str.++ "2" (str.++ "1" (str.++ " " (str.++ "8" (str.++ "1" (str.++ "8" (str.++ "5" (str.++ " " (str.++ "5" (str.++ "9" (str.++ "9" (str.++ "9" (str.++ " " (str.++ "7" (str.++ "9" (str.++ "1" (str.++ "9" (str.++ " " (str.++ "8" (str.++ "8" (str.++ "6" (str.++ "9" (str.++ " " (str.++ "9" (str.++ "1" (str.++ "8" (str.++ "1" ""))))))))))))))))))))))))))))))

(assert (= regexA (re.union (re.++ (str.to_re (str.++ "C" (str.++ "Z" "")))(re.++ ((_ re.loop 2 2) (re.range "0" "9"))(re.++ (re.range " " " ")(re.++ ((_ re.loop 4 4) (re.range "0" "9"))(re.++ (re.range " " " ")(re.++ ((_ re.loop 4 4) (re.range "0" "9"))(re.++ (re.range " " " ")(re.++ ((_ re.loop 4 4) (re.range "0" "9"))(re.++ (re.range " " " ")(re.++ ((_ re.loop 4 4) (re.range "0" "9"))(re.++ (re.range " " " ") ((_ re.loop 4 4) (re.range "0" "9"))))))))))))) (re.++ (str.to_re (str.++ "C" (str.++ "Z" ""))) ((_ re.loop 22 22) (re.range "0" "9"))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "\u{c7}" (str.++ "w" (str.++ "w" (str.++ "w" (str.++ "w" (str.++ "w" (str.++ "w" (str.++ "w" (str.++ "w" (str.++ "W" (str.++ "\u{93}" (str.++ "#" "")))))))))))))

(define-fun Witness2 () String (str.++ "\u{9b}" (str.++ "\u{91}" (str.++ "w" (str.++ "w" (str.++ "w" (str.++ "w" (str.++ "w" (str.++ "w" (str.++ "w" (str.++ "w" (str.++ "\u{f3}" ""))))))))))))

(assert (= regexA (str.to_re (str.++ "w" (str.++ "w" (str.++ "w" (str.++ "w" (str.++ "w" (str.++ "w" (str.++ "w" (str.++ "w" "")))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "7" (str.++ "8" (str.++ "8" (str.++ "8" (str.++ " " (str.++ "9" (str.++ "3" (str.++ "7" (str.++ "8" (str.++ "-" (str.++ "7" (str.++ "5" (str.++ "9" (str.++ "1" (str.++ " " (str.++ "0" (str.++ "7" (str.++ "9" (str.++ "0" (str.++ "\u{8c}" (str.++ "\u{9d}" (str.++ "\u{c7}" "")))))))))))))))))))))))

(define-fun Witness2 () String (str.++ "8" (str.++ "8" (str.++ "4" (str.++ "0" (str.++ "9" (str.++ "9" (str.++ "5" (str.++ "7" (str.++ "4" (str.++ "2" (str.++ "1" (str.++ "8" (str.++ "6" (str.++ "6" (str.++ "3" (str.++ "8" "")))))))))))))))))

(assert (= regexA (re.union (re.++ (str.to_re "")(re.++ ((_ re.loop 3 3) (re.++ ((_ re.loop 4 4) (re.range "0" "9")) (re.union (re.range " " " ") (re.range "-" "-")))) ((_ re.loop 4 4) (re.range "0" "9")))) (re.++ ((_ re.loop 16 16) (re.range "0" "9")) (str.to_re "")))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String "")

(define-fun Witness2 () String (str.++ "<" (str.++ "J" (str.++ "B" ""))))

(assert (= regexA (str.to_re "")))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "X" (str.++ "U" (str.++ "-" (str.++ "Q" "")))))

(define-fun Witness2 () String (str.++ "T" (str.++ "-" (str.++ "j" (str.++ "p" (str.++ "\u{ad}" ""))))))

(assert (= regexA (re.++ (re.+ (re.union (re.range "A" "Z") (re.range "a" "z")))(re.++ (re.opt (re.range "-" "-")) (re.+ (re.union (re.range "A" "Z") (re.range "a" "z")))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "L" (str.++ "8" (str.++ "9" (str.++ "7" (str.++ "-" (str.++ "1" (str.++ "7" (str.++ "1" (str.++ "-" (str.++ "9" (str.++ "9" (str.++ "-" (str.++ "2" (str.++ "8" (str.++ "9" (str.++ "-" (str.++ "9" (str.++ "\u{bf}" (str.++ "\u{0b}" (str.++ "\u{c2}" "")))))))))))))))))))))

(define-fun Witness2 () String (str.++ "J" (str.++ "9" (str.++ "1" (str.++ "4" (str.++ "-" (str.++ "8" (str.++ "4" (str.++ "4" (str.++ "-" (str.++ "2" (str.++ "6" (str.++ "-" (str.++ "2" (str.++ "8" (str.++ "4" (str.++ "-" (str.++ "9" ""))))))))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.++ (re.union (re.range "A" "Z")(re.union (re.range "a" "z") (re.range "|" "|"))) ((_ re.loop 3 3) (re.range "0" "9")))(re.++ (re.range "-" "-")(re.++ ((_ re.loop 3 3) (re.range "0" "9"))(re.++ (re.range "-" "-")(re.++ ((_ re.loop 2 2) (re.range "0" "9"))(re.++ (re.range "-" "-")(re.++ ((_ re.loop 3 3) (re.range "0" "9"))(re.++ (re.range "-" "-") (re.range "0" "9"))))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "]" (str.++ "h" (str.++ "r" (str.++ "e" (str.++ "f" (str.++ "=" (str.++ "\u{22}" (str.++ "." (str.++ "/" (str.++ "E" (str.++ "." (str.++ "s" (str.++ "2" (str.++ "\u{cd}" (str.++ "9" (str.++ "/" (str.++ "H" (str.++ "/" (str.++ "'" ""))))))))))))))))))))

(define-fun Witness2 () String (str.++ "\u{ae}" (str.++ "\u{1f}" (str.++ "v" (str.++ "h" (str.++ "r" (str.++ "e" (str.++ "f" (str.++ "=" (str.++ "\u{22}" (str.++ "h" (str.++ "t" (str.++ "t" (str.++ "p" (str.++ ":" (str.++ "/" (str.++ "/" (str.++ "1" (str.++ "\u{aa}" (str.++ "\u{fb}" (str.++ "\u{aa}" (str.++ "\u{fd}" (str.++ "." (str.++ "v" (str.++ "." (str.++ "8" (str.++ "." (str.++ "6" (str.++ "s" (str.++ "/" (str.++ "\u{d6}" (str.++ "\u{aa}" (str.++ "/" (str.++ "_" (str.++ "\u{aa}" (str.++ "\u{b5}" (str.++ "/" (str.++ "\u{aa}" (str.++ "/" (str.++ "\u{22}" (str.++ "\u{83}" (str.++ "\u{b9}" (str.++ "\u{96}" (str.++ "\u{fb}" (str.++ "r" "")))))))))))))))))))))))))))))))))))))))))))))

(assert (= regexA (re.++ (str.to_re (str.++ "h" (str.++ "r" (str.++ "e" (str.++ "f" (str.++ "=" ""))))))(re.++ (re.union (re.range "\u{22}" "\u{22}") (re.range "'" "'"))(re.++ (re.opt (re.union (str.to_re (str.++ "h" (str.++ "t" (str.++ "t" (str.++ "p" (str.++ ":" (str.++ "/" (str.++ "/" ""))))))))(re.union (str.to_re (str.++ "." (str.++ "/" ""))) (re.range "/" "/"))))(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))(re.++ (re.* (re.++ (re.range "." ".") (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))))(re.++ (re.* (re.++ (re.range "/" "/")(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))) (re.opt (re.++ (re.range "." ".") (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))))))))(re.++ (re.opt (re.union (re.range "/" "/") (re.++ (re.range "?" "?")(re.++ (re.* (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))(re.++ (re.range "=" "=")(re.++ (re.* (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))) (re.* (re.++ (re.range "&" "&")(re.++ (re.* (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))(re.++ (re.range "=" "=") (re.* (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))))))))))))) (re.union (re.range "\u{22}" "\u{22}") (re.range "'" "'")))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "." (str.++ "D" (str.++ "+" (str.++ "8" (str.++ "2" (str.++ "9" (str.++ "9" (str.++ "1" (str.++ "5" (str.++ "8" (str.++ "4" (str.++ "8" (str.++ "8" ""))))))))))))))

(define-fun Witness2 () String (str.++ "\u{91}" (str.++ "8" (str.++ "8" (str.++ "1" (str.++ "8" (str.++ "3" (str.++ "2" (str.++ "3" (str.++ "9" (str.++ "0" (str.++ "8" (str.++ "9" (str.++ "7" (str.++ "8" "")))))))))))))))

(assert (= regexA (re.++ (re.opt (re.range "+" "+")) (re.union ((_ re.loop 10 13) (re.range "0" "9"))(re.union (re.++ (re.range "(" "(")(re.++ (re.opt (re.range "+" "+"))(re.++ (re.++ ((_ re.loop 2 2) (re.range "0" "9")) (re.* (re.range "0" "9")))(re.++ (re.* (re.union (re.range "\u{0b}" "\u{0b}") (re.range ")" ")"))) ((_ re.loop 5 13) (re.range "0" "9")))))) (re.++ ((_ re.loop 2 6) (re.range "0" "9"))(re.++ (re.range "-" "-")(re.++ ((_ re.loop 2 13) (re.range "0" "9"))(re.++ (re.* (re.range "-" "-")) ((_ re.loop 3 13) (re.range "0" "9")))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "[" (str.++ "]" (str.++ "a" (str.++ " " (str.++ " " (str.++ " " (str.++ " " (str.++ " " (str.++ " " (str.++ " " (str.++ "-" (str.++ "-" (str.++ "-" (str.++ "-" (str.++ "-" (str.++ "-" (str.++ "-" (str.++ "-" (str.++ " " (str.++ " " (str.++ " " (str.++ " " (str.++ " " (str.++ " " (str.++ " " (str.++ " " (str.++ "\u{b0}" (str.++ "\u{09}" (str.++ "=" (str.++ "\u{df}" (str.++ " " (str.++ "\u{92}" (str.++ "\u{f4}" ""))))))))))))))))))))))))))))))))))

(define-fun Witness2 () String (str.++ "[" (str.++ "]" (str.++ "%" (str.++ "U" (str.++ " " (str.++ " " (str.++ " " (str.++ " " (str.++ " " (str.++ " " (str.++ " " (str.++ "-" (str.++ "-" (str.++ "-" (str.++ "-" (str.++ "-" (str.++ "-" (str.++ "-" (str.++ "-" (str.++ " " (str.++ " " (str.++ " " (str.++ " " (str.++ " " (str.++ " " (str.++ " " (str.++ " " (str.++ "\u{85}" (str.++ "\u{0d}" (str.++ "\u{09}" (str.++ "\u{0d}" (str.++ "\u{f8}" (str.++ "Y" (str.++ "\u{8f}" (str.++ "=" (str.++ "\u{85}" (str.++ " " (str.++ "\u{a3}" (str.++ " " (str.++ "7" (str.++ "\u{ce}" ""))))))))))))))))))))))))))))))))))))))))))

(assert (= regexA (re.++ (re.range "[" "[")(re.++ (re.* (re.union (re.range "\u{00}" "\u{09}") (re.range "\u{0b}" "\u{ff}")))(re.++ (re.range "]" "]")(re.++ (re.+ (re.union (re.range "\u{00}" "Z") (re.range "\u{5c}" "\u{ff}")))(re.++ (str.to_re (str.++ " " (str.++ " " (str.++ " " (str.++ " " (str.++ " " (str.++ " " (str.++ " " (str.++ "-" (str.++ "-" (str.++ "-" (str.++ "-" (str.++ "-" (str.++ "-" (str.++ "-" (str.++ "-" (str.++ " " (str.++ " " (str.++ " " (str.++ " " (str.++ " " (str.++ " " (str.++ " " (str.++ " " ""))))))))))))))))))))))))(re.++ (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (re.+ (re.union (re.range "\u{00}" "\u{09}") (re.range "\u{0b}" "\u{ff}")))(re.++ (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (re.range "=" "=")(re.++ (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (re.+ (re.union (re.range "\u{00}" "\u{0c}") (re.range "\u{0e}" "\u{ff}"))) (re.range " " " "))))))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "\u{87}" (str.++ "\u{a3}" (str.++ "<" (str.++ "!" (str.++ "!" (str.++ ">" "")))))))

(define-fun Witness2 () String (str.++ "\u{f0}" (str.++ "<" (str.++ ">" ""))))

(assert (= regexA (re.++ (re.range "<" "<")(re.++ (re.* (re.range "!" "!"))(re.++ (re.* (re.union (re.range "\u{00}" ";")(re.union (re.range "=" "=") (re.range "?" "\u{ff}")))) (re.range ">" ">"))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "\u{91}" (str.++ "\u{1c}" (str.++ "N" (str.++ "g" (str.++ "8" (str.++ "8" (str.++ "G" ""))))))))

(define-fun Witness2 () String (str.++ "j" (str.++ "q" (str.++ "8" (str.++ "3" (str.++ "6" (str.++ "1" (str.++ "8" (str.++ "9" (str.++ "/" ""))))))))))

(assert (= regexA (re.++ (re.union (re.++ (re.union (re.range "N" "N")(re.union (re.range "S" "S")(re.union (re.range "n" "n") (re.range "s" "s")))) (re.union (re.range "A" "H")(re.union (re.range "J" "Z")(re.union (re.range "a" "h") (re.range "j" "z")))))(re.union (re.++ (re.union (re.range "O" "O")(re.union (re.range "T" "T")(re.union (re.range "o" "o") (re.range "t" "t")))) (re.union (re.range "A" "B")(re.union (re.range "F" "G")(re.union (re.range "L" "M")(re.union (re.range "Q" "R")(re.union (re.range "V" "W")(re.union (re.range "a" "b")(re.union (re.range "f" "g")(re.union (re.range "l" "m")(re.union (re.range "q" "r") (re.range "v" "w")))))))))))(re.union (re.++ (re.union (re.range "H" "H") (re.range "h" "h")) (re.union (re.range "L" "Z") (re.range "l" "z"))) (re.++ (re.union (re.range "J" "J") (re.range "j" "j")) (re.union (re.range "L" "M")(re.union (re.range "Q" "R")(re.union (re.range "V" "W")(re.union (re.range "l" "m")(re.union (re.range "q" "r") (re.range "v" "w"))))))))))(re.++ (re.opt ((_ re.loop 2 2) (re.range "0" "9"))) (re.union (re.union (re.range "A" "N")(re.union (re.range "P" "Z")(re.union (re.range "a" "n") (re.range "p" "z")))) (re.++ (re.opt ((_ re.loop 2 2) (re.range "0" "9")))(re.++ (re.opt ((_ re.loop 2 2) (re.range "0" "9")))(re.++ (re.opt ((_ re.loop 2 2) (re.range "0" "9"))) (re.opt ((_ re.loop 2 2) (re.range "0" "9")))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "(" (str.++ "9" (str.++ "0" (str.++ "0" (str.++ ")" (str.++ "8" (str.++ "8" (str.++ "8" (str.++ "-" (str.++ "9" (str.++ "8" (str.++ "6" (str.++ "5" ""))))))))))))))

(define-fun Witness2 () String (str.++ "(" (str.++ "6" (str.++ "8" (str.++ "0" (str.++ ")" (str.++ "8" (str.++ "9" (str.++ "8" (str.++ "-" (str.++ "9" (str.++ "5" (str.++ "8" (str.++ "9" (str.++ "\u{f9}" (str.++ "Y" ""))))))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.range "(" "(")(re.++ ((_ re.loop 3 3) (re.range "0" "9"))(re.++ (re.range ")" ")")(re.++ ((_ re.loop 3 3) (re.range "0" "9"))(re.++ (re.range "-" "-") ((_ re.loop 4 4) (re.range "0" "9"))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "/" (str.++ "/" (str.++ "-" (str.++ "-" (str.++ "&" (str.++ "g" (str.++ "t" (str.++ ";" (str.++ " " (str.++ "&" (str.++ "l" (str.++ "t" (str.++ ";" (str.++ "/" (str.++ "S" (str.++ "C" (str.++ "R" (str.++ "I" (str.++ "P" (str.++ "T" (str.++ "&" (str.++ "g" (str.++ "t" (str.++ ";" "")))))))))))))))))))))))))

(define-fun Witness2 () String (str.++ "\u{b6}" (str.++ "/" (str.++ "/" (str.++ "-" (str.++ "-" (str.++ "&" (str.++ "g" (str.++ "t" (str.++ ";" (str.++ "&" (str.++ "l" (str.++ "t" (str.++ ";" (str.++ "S" (str.++ "C" (str.++ "R" (str.++ "I" (str.++ "P" (str.++ "T" (str.++ "\u{1f}" (str.++ "&" (str.++ "g" (str.++ "t" (str.++ ";" "")))))))))))))))))))))))))

(assert (= regexA (re.++ (re.opt (re.++ (str.to_re (str.++ "/" (str.++ "/" (str.++ "-" (str.++ "-" (str.++ "&" (str.++ "g" (str.++ "t" (str.++ ";" ""))))))))) (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))))(re.++ (str.to_re (str.++ "&" (str.++ "l" (str.++ "t" (str.++ ";" "")))))(re.++ (re.opt (re.range "/" "/"))(re.++ (str.to_re (str.++ "S" (str.++ "C" (str.++ "R" (str.++ "I" (str.++ "P" (str.++ "T" "")))))))(re.++ (re.* (re.union (re.range "\u{00}" "%")(re.union (re.range "'" ":")(re.union (re.range "<" "f")(re.union (re.range "h" "s") (re.range "u" "\u{ff}"))))))(re.++ (str.to_re (str.++ "&" (str.++ "g" (str.++ "t" (str.++ ";" ""))))) (re.opt (re.++ (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (str.to_re (str.++ "&" (str.++ "l" (str.++ "t" (str.++ ";" (str.++ "!" (str.++ "-" (str.++ "-" "")))))))) (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "+" (str.++ "4" (str.++ "4" (str.++ "\u{0d}" (str.++ "(" (str.++ "0" (str.++ ")" (str.++ "\u{a0}" (str.++ "8" (str.++ "6" (str.++ " " (str.++ "9" (str.++ "6" (str.++ "4" (str.++ "8" (str.++ "\u{85}" (str.++ "9" (str.++ "6" (str.++ "3" (str.++ "2" (str.++ "\u{e4}" ""))))))))))))))))))))))

(define-fun Witness2 () String (str.++ "+" (str.++ "4" (str.++ "4" (str.++ " " (str.++ "(" (str.++ "0" (str.++ ")" (str.++ "\u{85}" (str.++ "2" (str.++ "9" (str.++ " " (str.++ "9" (str.++ "5" (str.++ "1" (str.++ "9" (str.++ "\u{85}" (str.++ "8" (str.++ "8" (str.++ "9" (str.++ "9" (str.++ "\u{98}" ""))))))))))))))))))))))

(assert (= regexA (re.++ (str.to_re (str.++ "+" (str.++ "4" (str.++ "4" ""))))(re.++ (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))(re.++ (str.to_re (str.++ "(" (str.++ "0" (str.++ ")" ""))))(re.++ (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))(re.++ ((_ re.loop 2 2) (re.range "0" "9"))(re.++ (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))(re.++ ((_ re.loop 4 4) (re.range "0" "9"))(re.++ (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))) ((_ re.loop 4 4) (re.range "0" "9"))))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "F" (str.++ "u" (str.++ "n" (str.++ "c" (str.++ "t" (str.++ "i" (str.++ "o" (str.++ "n" (str.++ " " (str.++ "\u{0c}" (str.++ "n" (str.++ "(" (str.++ ")" ""))))))))))))))

(define-fun Witness2 () String (str.++ "S" (str.++ "u" (str.++ "b" (str.++ "\u{a0}" (str.++ " " (str.++ "\u{d8}" (str.++ "(" (str.++ "\u{5c}" (str.++ ")" (str.++ "\u{81}" (str.++ "X" (str.++ "M" (str.++ "\u{e3}" (str.++ "\u{8b}" (str.++ "\u{f9}" (str.++ "i" (str.++ "\u{c9}" (str.++ ">" (str.++ "t" (str.++ "S" (str.++ "\u{92}" (str.++ "c" (str.++ "\u{0a}" ""))))))))))))))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.union (str.to_re (str.++ "F" (str.++ "u" (str.++ "n" (str.++ "c" (str.++ "t" (str.++ "i" (str.++ "o" (str.++ "n" ""))))))))) (str.to_re (str.++ "S" (str.++ "u" (str.++ "b" "")))))(re.++ (re.++ (re.+ (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))) (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))))(re.++ (re.range "(" "(")(re.++ (re.* (re.union (re.range "\u{00}" "'") (re.range "*" "\u{ff}"))) (re.range ")" ")"))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "(" (str.++ "2" (str.++ "8" (str.++ "9" (str.++ "3" (str.++ "4" (str.++ "9" (str.++ " " (str.++ "9" (str.++ "5" (str.++ "5" (str.++ "5" (str.++ "\u{cf}" (str.++ "\u{ae}" (str.++ "\u{1c}" (str.++ "\u{d1}" (str.++ "\u{02}" (str.++ "\u{bd}" "")))))))))))))))))))

(define-fun Witness2 () String (str.++ "8" (str.++ "1" (str.++ "3" (str.++ " " (str.++ "1" (str.++ "3" (str.++ "9" (str.++ "0" (str.++ "\u{c8}" (str.++ "A" (str.++ "\u{d9}" ""))))))))))))

(assert (= regexA (re.++ (re.opt (re.++ (re.opt (re.range "(" "("))(re.++ ((_ re.loop 3 3) (re.range "0" "9")) (re.opt (re.range ")" ")")))))(re.++ (re.opt (re.union (re.range " " " ") (re.range "-" ".")))(re.++ ((_ re.loop 3 3) (re.range "0" "9"))(re.++ (re.union (re.range " " " ") (re.range "-" ".")) ((_ re.loop 4 4) (re.range "0" "9"))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "I" (str.++ "&" (str.++ "\u{bf}" (str.++ "0" "")))))

(define-fun Witness2 () String (str.++ "u" (str.++ "0" (str.++ "\u{a0}" ""))))

(assert (= regexA (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "\u{f0}" (str.++ "'" (str.++ "\u{0a}" (str.++ "\u{85}" (str.++ "\u{0d}" (str.++ " " (str.++ "7" (str.++ "4" (str.++ "2" (str.++ "9" (str.++ "\u{85}" (str.++ "4" (str.++ "0" (str.++ "9" (str.++ "0" (str.++ " " (str.++ " " ""))))))))))))))))))

(define-fun Witness2 () String (str.++ "\u{85}" (str.++ "0" (str.++ "9" (str.++ "8" (str.++ "1" (str.++ ")" (str.++ "8" (str.++ "9" (str.++ "8" (str.++ "5" (str.++ "8" (str.++ "9" (str.++ "3" (str.++ " " (str.++ " " (str.++ "\u{a0}" "")))))))))))))))))

(assert (= regexA (re.union (re.++ (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (re.opt (re.range "(" "("))(re.++ (re.range "0" "0")(re.++ ((_ re.loop 4 4) (re.range "0" "9"))(re.++ (re.opt (re.range ")" ")"))(re.++ (re.union (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))) (re.range "-" "-"))(re.++ ((_ re.loop 3 3) (re.range "0" "9"))(re.++ (re.union (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))) (re.range "-" "-"))(re.++ ((_ re.loop 3 3) (re.range "0" "9")) (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))))))))))))(re.union (re.++ (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (re.opt (re.range "(" "("))(re.++ (re.range "0" "0")(re.++ ((_ re.loop 3 3) (re.range "0" "9"))(re.++ (re.opt (re.range ")" ")"))(re.++ (re.union (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))) (re.range "-" "-"))(re.++ ((_ re.loop 3 3) (re.range "0" "9"))(re.++ (re.union (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))) (re.range "-" "-"))(re.++ ((_ re.loop 4 4) (re.range "0" "9")) (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))))))))))) (re.++ (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (re.range "7" "8")(re.++ (re.union ((_ re.loop 7 7) (re.range "0" "9")) (re.++ ((_ re.loop 3 3) (re.range "0" "9"))(re.++ (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "-" "-")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))) ((_ re.loop 4 4) (re.range "0" "9"))))) (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "t" (str.++ "e" (str.++ "l" (str.++ "n" (str.++ "e" (str.++ "t" (str.++ ":" (str.++ "/" (str.++ "/" (str.++ "/" (str.++ "%" (str.++ "9" (str.++ "8" ""))))))))))))))

(define-fun Witness2 () String (str.++ "\u{f6}" (str.++ "h" (str.++ "t" (str.++ "t" (str.++ "p" (str.++ "s" (str.++ ":" (str.++ "/" (str.++ "/" (str.++ "8" (str.++ "." (str.++ "2" (str.++ "5" (str.++ "5" (str.++ "." (str.++ "5" (str.++ "0" (str.++ "." (str.++ "1" (str.++ "8" (str.++ "6" (str.++ "8" (str.++ "\u{f9}" ""))))))))))))))))))))))))

(assert (= regexA (re.++ (re.opt (re.++ (re.union (str.to_re (str.++ "h" (str.++ "t" (str.++ "t" (str.++ "p" "")))))(re.union (str.to_re (str.++ "h" (str.++ "t" (str.++ "t" (str.++ "p" (str.++ "s" ""))))))(re.union (str.to_re (str.++ "f" (str.++ "t" (str.++ "p" ""))))(re.union (str.to_re (str.++ "t" (str.++ "e" (str.++ "l" (str.++ "n" (str.++ "e" (str.++ "t" "")))))))(re.union (str.to_re (str.++ "g" (str.++ "o" (str.++ "p" (str.++ "h" (str.++ "e" (str.++ "r" "")))))))(re.union (str.to_re (str.++ "m" (str.++ "s" (str.++ "-" (str.++ "h" (str.++ "e" (str.++ "l" (str.++ "p" ""))))))))(re.union (str.to_re (str.++ "f" (str.++ "i" (str.++ "l" (str.++ "e" ""))))) (str.to_re (str.++ "n" (str.++ "o" (str.++ "t" (str.++ "e" (str.++ "s" ""))))))))))))) (str.to_re (str.++ ":" (str.++ "/" (str.++ "/" ""))))))(re.++ (re.opt (re.++ (re.++ (re.range "a" "z") (re.* (re.union (re.range "!" "!")(re.union (re.range "$" ".")(re.union (re.range "0" "9")(re.union (re.range ";" ";")(re.union (re.range "=" "=")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "~" "~")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))))))))(re.++ (re.opt (re.++ (re.range ":" ":") (re.* (re.union (re.range "\u{00}" "\u{09}") (re.range "\u{0b}" "\u{ff}"))))) (re.range "@" "@"))))(re.++ (re.opt (re.++ (re.* (re.++ (re.union (re.range "0" "9") (re.range "a" "z"))(re.++ (re.* (re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))))(re.++ (re.* (re.union (re.range "0" "9") (re.range "a" "z"))) (re.range "." "."))))) (re.++ (re.union (re.++ (re.++ (re.union (re.range "0" "9") (re.range "a" "z"))(re.++ (re.* (re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))) (re.* (re.union (re.range "0" "9") (re.range "a" "z"))))) (re.opt (re.++ (re.range "." ".") (re.+ (re.union (re.range "0" "9") (re.range "a" "z")))))) (re.++ ((_ re.loop 3 3) (re.++ (re.union (re.++ (str.to_re (str.++ "2" (str.++ "5" ""))) (re.range "0" "5"))(re.union (re.++ (re.range "2" "2")(re.++ (re.range "0" "4") (re.range "0" "9"))) (re.++ (re.opt (re.range "0" "1"))(re.++ (re.range "0" "9") (re.opt (re.range "0" "9")))))) (re.range "." "."))) (re.union (re.++ (str.to_re (str.++ "2" (str.++ "5" ""))) (re.range "0" "5"))(re.union (re.++ (re.range "2" "2")(re.++ (re.range "0" "4") (re.range "0" "9"))) (re.++ (re.opt (re.range "0" "1"))(re.++ (re.range "0" "9") (re.opt (re.range "0" "9")))))))) (re.opt (re.++ (re.range ":" ":") (re.+ (re.range "0" "9"))))))) (re.opt (re.++ (re.++ (re.* (re.++ (re.range "/" "/") (re.+ (re.union (re.union (re.range "!" "!")(re.union (re.range "$" "$")(re.union (re.range "(" ")")(re.union (re.range "+" "+")(re.union (re.range "-" ".")(re.union (re.range "0" "9")(re.union (re.range ";" ";")(re.union (re.range "=" "=")(re.union (re.range "A" "[")(re.union (re.range "]" "~")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))))))) (re.++ (re.range "%" "%")(re.++ (re.range "0" "9") (re.range "0" "9")))))))(re.++ (re.range "/" "/") (re.* (re.union (re.union (re.range "!" "!")(re.union (re.range "$" "$")(re.union (re.range "(" ")")(re.union (re.range "+" "+")(re.union (re.range "-" ".")(re.union (re.range "0" "9")(re.union (re.range ";" ";")(re.union (re.range "=" "=")(re.union (re.range "A" "[")(re.union (re.range "]" "~")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))))))) (re.++ (re.range "%" "%")(re.++ (re.range "0" "9") (re.range "0" "9")))))))(re.++ (re.opt (re.++ (re.range "?" "?") (re.+ (re.union (re.range "\u{00}" "\u{22}") (re.range "$" "\u{ff}"))))) (re.opt (re.++ (re.range "#" "#")(re.++ (re.union (re.range "0" "9") (re.range "a" "z")) (re.* (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))))))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "\u{94}" (str.++ "E" (str.++ "S" (str.++ "5" (str.++ "9" (str.++ " " (str.++ "4" (str.++ "4" (str.++ "0" (str.++ "9" (str.++ " " (str.++ "9" (str.++ "9" (str.++ "9" (str.++ "6" (str.++ " " (str.++ "9" (str.++ "9" (str.++ "3" (str.++ "9" (str.++ " " (str.++ "8" (str.++ "6" (str.++ "8" (str.++ "4" (str.++ " " (str.++ "9" (str.++ "8" (str.++ "9" (str.++ "8" "")))))))))))))))))))))))))))))))

(define-fun Witness2 () String (str.++ "E" (str.++ "S" (str.++ "6" (str.++ "9" (str.++ " " (str.++ "5" (str.++ "9" (str.++ "9" (str.++ "9" (str.++ " " (str.++ "5" (str.++ "8" (str.++ "5" (str.++ "4" (str.++ " " (str.++ "8" (str.++ "8" (str.++ "3" (str.++ "8" (str.++ " " (str.++ "8" (str.++ "8" (str.++ "7" (str.++ "2" (str.++ " " (str.++ "7" (str.++ "1" (str.++ "1" (str.++ "9" ""))))))))))))))))))))))))))))))

(assert (= regexA (re.union (re.++ (str.to_re (str.++ "E" (str.++ "S" "")))(re.++ ((_ re.loop 2 2) (re.range "0" "9"))(re.++ (re.range " " " ")(re.++ ((_ re.loop 4 4) (re.range "0" "9"))(re.++ (re.range " " " ")(re.++ ((_ re.loop 4 4) (re.range "0" "9"))(re.++ (re.range " " " ")(re.++ ((_ re.loop 4 4) (re.range "0" "9"))(re.++ (re.range " " " ")(re.++ ((_ re.loop 4 4) (re.range "0" "9"))(re.++ (re.range " " " ") ((_ re.loop 4 4) (re.range "0" "9"))))))))))))) (re.++ (str.to_re (str.++ "E" (str.++ "S" ""))) ((_ re.loop 22 22) (re.range "0" "9"))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "A" (str.++ "\u{a4}" (str.++ "," (str.++ "=" (str.++ "\u{0a}" (str.++ "\u{0d}" (str.++ " " (str.++ " " (str.++ " " (str.++ "r" (str.++ "e" (str.++ "p" (str.++ "l" (str.++ "a" (str.++ "c" (str.++ "e" (str.++ "m" (str.++ "e" (str.++ "n" (str.++ "t" (str.++ " " (str.++ "s" (str.++ "t" (str.++ "r" (str.++ "i" (str.++ "n" (str.++ "g" (str.++ "-" (str.++ "-" (str.++ "-" (str.++ "-" (str.++ ">" (str.++ "\u{0a}" (str.++ "\u{1c}" "")))))))))))))))))))))))))))))))))))

(define-fun Witness2 () String (str.++ "\u{e0}" (str.++ "\u{0a}" (str.++ "\u{0d}" (str.++ " " (str.++ " " (str.++ " " (str.++ "r" (str.++ "e" (str.++ "p" (str.++ "l" (str.++ "a" (str.++ "c" (str.++ "e" (str.++ "m" (str.++ "e" (str.++ "n" (str.++ "t" (str.++ " " (str.++ "s" (str.++ "t" (str.++ "r" (str.++ "i" (str.++ "n" (str.++ "g" (str.++ "-" (str.++ "-" (str.++ "-" (str.++ "-" (str.++ ">" (str.++ "\u{0a}" (str.++ "R" (str.++ "C" "")))))))))))))))))))))))))))))))))

(assert (= regexA (re.++ (str.to_re (str.++ "\u{0a}" (str.++ "\u{0d}" ""))) (str.to_re (str.++ " " (str.++ " " (str.++ " " (str.++ "r" (str.++ "e" (str.++ "p" (str.++ "l" (str.++ "a" (str.++ "c" (str.++ "e" (str.++ "m" (str.++ "e" (str.++ "n" (str.++ "t" (str.++ " " (str.++ "s" (str.++ "t" (str.++ "r" (str.++ "i" (str.++ "n" (str.++ "g" (str.++ "-" (str.++ "-" (str.++ "-" (str.++ "-" (str.++ ">" (str.++ "\u{0a}" "")))))))))))))))))))))))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "9" (str.++ "." (str.++ "8" (str.++ "9" (str.++ "\u{bb}" ""))))))

(define-fun Witness2 () String (str.++ "2" (str.++ "1" "")))

(assert (= regexA (re.union (re.++ (str.to_re "")(re.++ ((_ re.loop 1 2) (re.range "0" "9"))(re.++ (re.range "." ".")(re.++ ((_ re.loop 1 2) (re.range "0" "9"))(re.++ (re.range "." ".") ((_ re.loop 4 4) (re.range "0" "9")))))))(re.union (re.++ (str.to_re "")(re.++ ((_ re.loop 1 2) (re.range "0" "9"))(re.++ (re.range "." ".") ((_ re.loop 1 2) (re.range "0" "9"))))) (re.++ (re.++ (str.to_re "") ((_ re.loop 1 2) (re.range "0" "9"))) (str.to_re ""))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "\u{de}" (str.++ "6" (str.++ "9" (str.++ "1" (str.++ "5" (str.++ "0" (str.++ "6" (str.++ "8" "")))))))))

(define-fun Witness2 () String (str.++ "\u{a4}" (str.++ "8" (str.++ "9" ""))))

(assert (= regexA (re.union (re.range "0" "0")(re.union (re.++ (re.range "1" "9") ((_ re.loop 0 8) (re.range "0" "9")))(re.union (re.++ (re.range "1" "1") ((_ re.loop 1 9) (re.range "0" "9")))(re.union (re.++ (str.to_re (str.++ "-" (str.++ "2" ""))) (re.union (re.++ (re.range "0" "0") ((_ re.loop 8 8) (re.range "0" "9"))) (re.++ (re.range "1" "1") (re.union (re.++ (re.range "0" "3") ((_ re.loop 7 7) (re.range "0" "9"))) (re.++ (re.range "4" "4") (re.union (re.++ (re.range "0" "6") ((_ re.loop 6 6) (re.range "0" "9"))) (re.++ (re.range "7" "7") (re.union (re.++ (re.range "0" "3") ((_ re.loop 5 5) (re.range "0" "9"))) (re.++ (re.range "4" "4") (re.union (re.++ (re.range "0" "7") ((_ re.loop 4 4) (re.range "0" "9"))) (re.++ (re.range "8" "8") (re.union (re.++ (re.range "0" "2") ((_ re.loop 3 3) (re.range "0" "9"))) (re.++ (re.range "3" "3") (re.union (re.++ (re.range "0" "5") ((_ re.loop 2 2) (re.range "0" "9"))) (re.++ (re.range "6" "6") (re.union (re.++ (re.range "0" "3") (re.range "0" "9")) (re.++ (re.range "4" "4") (re.range "0" "8")))))))))))))))))) (re.++ (re.opt (re.range "+" "+"))(re.++ (re.range "2" "2") (re.union (re.++ (re.range "0" "0") ((_ re.loop 8 8) (re.range "0" "9"))) (re.++ (re.range "1" "1") (re.union (re.++ (re.range "0" "3") ((_ re.loop 7 7) (re.range "0" "9"))) (re.++ (re.range "4" "4") (re.union (re.++ (re.range "0" "6") ((_ re.loop 6 6) (re.range "0" "9"))) (re.++ (re.range "7" "7") (re.union (re.++ (re.range "0" "3") ((_ re.loop 5 5) (re.range "0" "9"))) (re.++ (re.range "4" "4") (re.union (re.++ (re.range "0" "7") ((_ re.loop 4 4) (re.range "0" "9"))) (re.++ (re.range "8" "8") (re.union (re.++ (re.range "0" "2") ((_ re.loop 3 3) (re.range "0" "9"))) (re.++ (re.range "3" "3") (re.union (re.++ (re.range "0" "5") ((_ re.loop 2 2) (re.range "0" "9"))) (re.++ (re.range "6" "6") (re.union (re.++ (re.range "0" "3") (re.range "0" "9")) (re.++ (re.range "4" "4") (re.range "0" "7")))))))))))))))))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "\u{fe}" (str.++ "(" (str.++ "e" (str.++ "\u{88}" (str.++ "\u{f2}" (str.++ "f" (str.++ "3" (str.++ "." (str.++ "F" (str.++ "0" (str.++ "F" (str.++ "9" (str.++ "." (str.++ "F" (str.++ "9" ""))))))))))))))))

(define-fun Witness2 () String (str.++ "1" (str.++ "9" (str.++ "." (str.++ "F" (str.++ "F" (str.++ "d" (str.++ "8" (str.++ "a" (str.++ "9" ""))))))))))

(assert (= regexA (re.++ ((_ re.loop 2 2) (re.union (re.range "0" "9")(re.union (re.range "A" "F") (re.range "a" "f"))))(re.++ (re.opt (re.range "." "."))(re.++ ((_ re.loop 2 2) (re.union (re.range "0" "9")(re.union (re.range "A" "F") (re.range "a" "f"))))(re.++ (re.opt (re.range "." "."))(re.++ ((_ re.loop 2 2) (re.union (re.range "0" "9")(re.union (re.range "A" "F") (re.range "a" "f"))))(re.++ (re.opt (re.range "." ".")) ((_ re.loop 2 2) (re.union (re.range "0" "9")(re.union (re.range "A" "F") (re.range "a" "f"))))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "Z" (str.++ "X" (str.++ "0" (str.++ "X" (str.++ " " (str.++ "6" (str.++ "S" (str.++ "K" (str.++ "\u{1a}" (str.++ "\u{c3}" (str.++ "\u{d7}" ""))))))))))))

(define-fun Witness2 () String (str.++ "P" (str.++ "B" (str.++ "U" (str.++ "-" (str.++ "2" (str.++ "W" (str.++ "Z" (str.++ "\u{a8}" (str.++ "\u{8f}" (str.++ "\u{1d}" "")))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.union (re.++ ((_ re.loop 1 2) (re.range "A" "Z")) ((_ re.loop 1 2) (re.range "0" "9")))(re.union ((_ re.loop 3 3) (re.range "A" "Z")) (re.++ ((_ re.loop 1 2) (re.range "A" "Z"))(re.++ (re.range "0" "9") (re.range "A" "Z")))))(re.++ (re.union (re.range " " " ") (re.range "-" "-"))(re.++ (re.range "0" "9") ((_ re.loop 2 2) (re.range "A" "Z"))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "\u{ba}" (str.++ "\u{aa}" (str.++ "'" (str.++ "\u{ed}" (str.++ "@" (str.++ "M" (str.++ "." (str.++ "9" (str.++ "." (str.++ "0" (str.++ "-" (str.++ "\u{aa}" (str.++ "\u{b5}" ""))))))))))))))

(define-fun Witness2 () String (str.++ "8" (str.++ "@" (str.++ "o" (str.++ "N" (str.++ "\u{ba}" (str.++ "9" (str.++ "\u{ba}" (str.++ "d" (str.++ "\u{aa}" (str.++ "-" (str.++ "x" (str.++ "." (str.++ "\u{ef}" (str.++ "\u{0b}" "")))))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))(re.++ (re.* (re.++ (re.union (re.range "'" "'")(re.union (re.range "+" "+") (re.range "-" "."))) (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))))(re.++ (re.range "@" "@")(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))(re.++ (re.* (re.++ (re.range "-" ".") (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))))(re.++ (re.range "." ".")(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))) (re.* (re.++ (re.range "-" ".") (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))))))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "e" (str.++ " " (str.++ " " (str.++ " " (str.++ " " (str.++ " " (str.++ " " (str.++ " " (str.++ "\u{b1}" (str.++ "y" "")))))))))))

(define-fun Witness2 () String (str.++ "\u{86}" (str.++ "A" (str.++ " " (str.++ " " (str.++ " " (str.++ " " (str.++ " " (str.++ " " (str.++ " " (str.++ "\u{ff}" (str.++ "+" (str.++ "\u{b7}" (str.++ "$" (str.++ "\u{a0}" (str.++ "\u{b9}" ""))))))))))))))))

(assert (= regexA (re.union (str.to_re (str.++ " " (str.++ " " (str.++ " " (str.++ " " (str.++ " " (str.++ " " (str.++ " " "")))))))) (re.++ (str.to_re (str.++ "1" (str.++ "0" "")))(re.++ (re.range "0" "3") ((_ re.loop 4 4) (re.range "0" "9")))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "\u{e0}" (str.++ "\u{d6}" (str.++ "N" (str.++ "9" (str.++ "\u{e0}" (str.++ "\u{fd}" (str.++ "\u{aa}" (str.++ "\u{95}" "")))))))))

(define-fun Witness2 () String (str.++ "\u{ba}" (str.++ "8" (str.++ "3" (str.++ "\u{e8}" (str.++ "k" (str.++ "h" (str.++ "_" (str.++ "_" (str.++ "0" (str.++ "\u{13}" (str.++ "\u{97}" (str.++ "<" (str.++ "\u{e3}" (str.++ "$" (str.++ "@" ""))))))))))))))))

(assert (= regexA ((_ re.loop 5 255) (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "q" (str.++ "\u{a0}" (str.++ "c" (str.++ "n" (str.++ "k" ""))))))

(define-fun Witness2 () String (str.++ ")" (str.++ "Z" (str.++ "m" (str.++ "h" (str.++ "y" (str.++ " " (str.++ "M" ""))))))))

(assert (= regexA (re.++ (re.+ (re.++ (re.union (re.range "A" "Z") (re.range "a" "z"))(re.++ (re.* (re.union (re.range "A" "Z") (re.range "a" "z")))(re.++ (re.opt (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))) (re.union (re.range "A" "Z") (re.range "a" "z")))))) (re.++ (re.opt (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))) (re.+ (re.union (re.range "A" "Z") (re.range "a" "z")))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "Z" ""))

(define-fun Witness2 () String (str.++ "j" (str.++ "\u{07}" "")))

(assert (= regexA (re.range "\u{00}" "\u{7f}")))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "+" (str.++ "\u{86}" (str.++ "\u{5c}" (str.++ "r" (str.++ "e" (str.++ "d" (str.++ "2" (str.++ "4" (str.++ "1" (str.++ "\u{5c}" (str.++ "g" (str.++ "r" (str.++ "e" (str.++ "e" (str.++ "n" (str.++ "2" (str.++ "5" (str.++ "4" (str.++ "\u{5c}" (str.++ "b" (str.++ "l" (str.++ "u" (str.++ "e" (str.++ "2" (str.++ "0" (str.++ "8" (str.++ ";" (str.++ "H" (str.++ "\u{b3}" ""))))))))))))))))))))))))))))))

(define-fun Witness2 () String (str.++ "\u{5c}" (str.++ "r" (str.++ "e" (str.++ "d" (str.++ "2" (str.++ "5" (str.++ "2" (str.++ "\u{5c}" (str.++ "g" (str.++ "r" (str.++ "e" (str.++ "e" (str.++ "n" (str.++ "9" (str.++ "8" (str.++ "\u{5c}" (str.++ "b" (str.++ "l" (str.++ "u" (str.++ "e" (str.++ "2" (str.++ "1" (str.++ "8" (str.++ ";" "")))))))))))))))))))))))))

(assert (= regexA (re.++ (str.to_re (str.++ "\u{5c}" (str.++ "r" (str.++ "e" (str.++ "d" "")))))(re.++ (re.union (re.++ (re.opt (re.range "0" "1"))(re.++ (re.range "0" "9") (re.opt (re.range "0" "9"))))(re.union (re.++ (re.range "2" "2")(re.++ (re.range "0" "4") (re.range "0" "9"))) (re.++ (str.to_re (str.++ "2" (str.++ "5" ""))) (re.range "0" "5"))))(re.++ (str.to_re (str.++ "\u{5c}" (str.++ "g" (str.++ "r" (str.++ "e" (str.++ "e" (str.++ "n" "")))))))(re.++ (re.union (re.++ (re.opt (re.range "0" "1"))(re.++ (re.range "0" "9") (re.opt (re.range "0" "9"))))(re.union (re.++ (re.range "2" "2")(re.++ (re.range "0" "4") (re.range "0" "9"))) (re.++ (str.to_re (str.++ "2" (str.++ "5" ""))) (re.range "0" "5"))))(re.++ (str.to_re (str.++ "\u{5c}" (str.++ "b" (str.++ "l" (str.++ "u" (str.++ "e" ""))))))(re.++ (re.union (re.++ (re.opt (re.range "0" "1"))(re.++ (re.range "0" "9") (re.opt (re.range "0" "9"))))(re.union (re.++ (re.range "2" "2")(re.++ (re.range "0" "4") (re.range "0" "9"))) (re.++ (str.to_re (str.++ "2" (str.++ "5" ""))) (re.range "0" "5")))) (re.range ";" ";")))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "1" (str.++ "7" (str.++ "2" (str.++ "." (str.++ "3" (str.++ "1" (str.++ "." (str.++ "\u{18}" (str.++ "\u{9f}" (str.++ "\u{5c}" (str.++ "\u{91}" ""))))))))))))

(define-fun Witness2 () String (str.++ "1" (str.++ "9" (str.++ "2" (str.++ "." (str.++ "1" (str.++ "6" (str.++ "8" (str.++ "." "")))))))))

(assert (= regexA (re.union (re.++ (str.to_re "") (str.to_re (str.++ "1" (str.++ "0" (str.++ "." "")))))(re.union (re.++ (str.to_re "")(re.++ (str.to_re (str.++ "1" (str.++ "7" (str.++ "2" (str.++ "." (str.++ "1" ""))))))(re.++ (re.range "6" "9") (re.range "." "."))))(re.union (re.++ (str.to_re "")(re.++ (str.to_re (str.++ "1" (str.++ "7" (str.++ "2" (str.++ "." (str.++ "2" ""))))))(re.++ (re.range "0" "9") (re.range "." "."))))(re.union (re.++ (str.to_re "")(re.++ (str.to_re (str.++ "1" (str.++ "7" (str.++ "2" (str.++ "." (str.++ "3" ""))))))(re.++ (re.range "0" "1") (re.range "." "."))))(re.union (re.++ (str.to_re "") (str.to_re (str.++ "1" (str.++ "9" (str.++ "2" (str.++ "." (str.++ "1" (str.++ "6" (str.++ "8" (str.++ "." "")))))))))) (re.++ (str.to_re "") (str.to_re (str.++ "1" (str.++ "2" (str.++ "7" (str.++ "." (str.++ "0" (str.++ "." (str.++ "0" (str.++ "." (str.++ "1" ""))))))))))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "s" (str.++ "g" (str.++ "4" ""))))

(define-fun Witness2 () String (str.++ "\u{a6}" (str.++ "m" (str.++ "g" (str.++ "q" (str.++ "\u{8c}" (str.++ "\u{c1}" (str.++ "\u{ed}" (str.++ "\u{80}" "")))))))))

(assert (= regexA (re.union ((_ re.loop 2 2) (re.union (re.range "d" "d") (re.range "u" "u")))(re.union ((_ re.loop 2 2) (re.union (re.range "g" "g") (re.range "u" "u")))(re.union ((_ re.loop 2 2) (re.range "t" "u"))(re.union ((_ re.loop 2 2) (re.union (re.range "d" "d") (re.range "s" "s")))(re.union ((_ re.loop 2 2) (re.union (re.range "g" "g") (re.range "s" "s")))(re.union ((_ re.loop 2 2) (re.union (re.range "a" "a") (re.range "d" "d")))(re.union ((_ re.loop 2 2) (re.union (re.range "a" "a") (re.range "g" "g")))(re.union ((_ re.loop 2 2) (re.union (re.range "a" "a") (re.range "t" "t")))(re.union ((_ re.loop 2 2) (re.union (re.range "d" "d") (re.range "q" "q")))(re.union ((_ re.loop 2 2) (re.union (re.range "g" "g") (re.range "q" "q")))(re.union ((_ re.loop 2 2) (re.union (re.range "q" "q") (re.range "t" "t")))(re.union ((_ re.loop 2 2) (re.union (re.range "D" "D") (re.range "U" "U")))(re.union ((_ re.loop 2 2) (re.union (re.range "G" "G") (re.range "U" "U")))(re.union ((_ re.loop 2 2) (re.range "T" "U"))(re.union ((_ re.loop 2 2) (re.union (re.range "D" "D") (re.range "S" "S")))(re.union ((_ re.loop 2 2) (re.union (re.range "G" "G") (re.range "S" "S")))(re.union ((_ re.loop 2 2) (re.union (re.range "A" "A") (re.range "D" "D")))(re.union ((_ re.loop 2 2) (re.union (re.range "A" "A") (re.range "G" "G")))(re.union ((_ re.loop 2 2) (re.union (re.range "A" "A") (re.range "T" "T")))(re.union ((_ re.loop 2 2) (re.union (re.range "D" "D") (re.range "Q" "Q")))(re.union ((_ re.loop 2 2) (re.union (re.range "G" "G") (re.range "Q" "Q"))) ((_ re.loop 2 2) (re.union (re.range "Q" "Q") (re.range "T" "T"))))))))))))))))))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "0" (str.++ "6" (str.++ "9" (str.++ "6" (str.++ " " (str.++ " " (str.++ "3" (str.++ "\u{0a}" (str.++ " " (str.++ "\u{09}" (str.++ "\u{85}" (str.++ "8" (str.++ " " (str.++ "\u{09}" (str.++ "\u{a0}" (str.++ "\u{a0}" (str.++ " " (str.++ "\u{09}" (str.++ " " (str.++ "\u{0d}" (str.++ "\u{85}" (str.++ "6" (str.++ "4" (str.++ "1" (str.++ "3" ""))))))))))))))))))))))))))

(define-fun Witness2 () String (str.++ "\u{c1}" (str.++ "0" (str.++ "1" (str.++ "8" (str.++ "\u{0c}" (str.++ " " (str.++ "8" (str.++ "\u{a0}" (str.++ "9" (str.++ "\u{a0}" (str.++ "\u{a0}" (str.++ "\u{09}" (str.++ "4" (str.++ "9" (str.++ "8" (str.++ "8" (str.++ "1" (str.++ "\u{82}" (str.++ "\u{c9}" (str.++ "n" "")))))))))))))))))))))

(assert (= regexA (re.union (re.++ (str.to_re (str.++ "0" (str.++ "6" "")))(re.++ (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "-" "-")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))) ((_ re.loop 8 8) (re.++ (re.range "1" "9") (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))))))(re.union (re.++ (re.range "0" "0")(re.++ (re.range "1" "9")(re.++ (re.range "0" "9")(re.++ (re.range "0" "9")(re.++ (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "-" "-")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))) ((_ re.loop 6 6) (re.++ (re.range "1" "9") (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))))))))) (re.++ (re.range "0" "0")(re.++ (re.range "1" "9")(re.++ (re.range "0" "9")(re.++ (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "-" "-")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))) ((_ re.loop 7 7) (re.++ (re.range "1" "9") (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "c" (str.++ "[" (str.++ "/" (str.++ "B" (str.++ "]" ""))))))

(define-fun Witness2 () String (str.++ "b" (str.++ "[" (str.++ "/" (str.++ "B" (str.++ "]" (str.++ "W" "")))))))

(assert (= regexA (re.++ (re.+ (re.union (re.range " " " ")(re.union (re.range "." "9")(re.union (re.range "A" "[")(re.union (re.range "]" "]")(re.union (re.range "_" "_") (re.range "a" "z"))))))) (str.to_re (str.++ "[" (str.++ "/" (str.++ "B" (str.++ "]" ""))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "5" (str.++ "7" (str.++ "9" (str.++ "8" (str.++ "9" (str.++ "8" (str.++ "9" (str.++ "2" (str.++ "8" (str.++ "9" (str.++ "8" (str.++ "\u{c8}" "")))))))))))))

(define-fun Witness2 () String (str.++ "5" (str.++ "9" (str.++ "9" (str.++ "9" (str.++ "9" (str.++ "8" (str.++ "3" (str.++ "8" (str.++ "9" (str.++ "7" (str.++ "9" (str.++ "W" "")))))))))))))

(assert (= regexA (re.union (re.++ (str.to_re "")(re.++ (str.to_re (str.++ "9" (str.++ "9" ""))) ((_ re.loop 10 10) (re.range "0" "9")))) (re.++ (str.to_re "")(re.++ (re.range "5" "5") ((_ re.loop 10 10) (re.range "0" "9")))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "\u{84}" (str.++ "\u{d6}" (str.++ "a" (str.++ "1" (str.++ "3" (str.++ "3" (str.++ "0" (str.++ "\u{a0}" (str.++ "2" (str.++ "7" (str.++ "7" (str.++ "\u{a0}" (str.++ "6" (str.++ "8" (str.++ "9" (str.++ "9" "")))))))))))))))))

(define-fun Witness2 () String (str.++ "b" (str.++ "(" (str.++ "8" (str.++ "4" (str.++ "9" (str.++ ")" (str.++ "\u{09}" (str.++ "2" (str.++ "1" (str.++ "4" (str.++ "\u{a0}" (str.++ "2" (str.++ "9" (str.++ "8" (str.++ "8" ""))))))))))))))))

(assert (= regexA (re.++ (re.opt (re.range "(" "("))(re.++ (re.++ (re.opt (re.range "1" "1"))(re.++ (re.range "2" "9") ((_ re.loop 2 2) (re.range "0" "9"))))(re.++ (re.opt (re.range ")" ")"))(re.++ (re.opt (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "-" "-")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))))(re.++ (re.++ (re.range "2" "9") ((_ re.loop 2 2) (re.range "0" "9")))(re.++ (re.opt (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "-" "-")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))) ((_ re.loop 4 4) (re.range "0" "9"))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "f" (str.++ "i" (str.++ "l" (str.++ "e" (str.++ ":" (str.++ "/" (str.++ "V" (str.++ ":" (str.++ "/" (str.++ ")" (str.++ "s" (str.++ "/" (str.++ "c" (str.++ "o" (str.++ "m" (str.++ "/" (str.++ "r" (str.++ "e" (str.++ "g" (str.++ "e" (str.++ "x" (str.++ "l" (str.++ "i" (str.++ "b" (str.++ "/" (str.++ "e" (str.++ "x" (str.++ "a" (str.++ "m" (str.++ "p" (str.++ "l" (str.++ "e" (str.++ "/" (str.++ "\u{d2}" (str.++ "\u{16}" ""))))))))))))))))))))))))))))))))))))

(define-fun Witness2 () String (str.++ "\u{a5}" (str.++ "\u{07}" (str.++ "f" (str.++ "i" (str.++ "l" (str.++ "e" (str.++ ":" (str.++ "/" (str.++ "P" (str.++ ":" (str.++ "/" (str.++ "0" (str.++ "\u{8f}" (str.++ "/" (str.++ "c" (str.++ "o" (str.++ "m" (str.++ "/" (str.++ "r" (str.++ "e" (str.++ "g" (str.++ "e" (str.++ "x" (str.++ "l" (str.++ "i" (str.++ "b" (str.++ "/" (str.++ "e" (str.++ "x" (str.++ "a" (str.++ "m" (str.++ "p" (str.++ "l" (str.++ "e" (str.++ "/" ""))))))))))))))))))))))))))))))))))))

(assert (= regexA (re.++ (re.opt (str.to_re (str.++ "j" (str.++ "a" (str.++ "r" (str.++ ":" ""))))))(re.++ (str.to_re (str.++ "f" (str.++ "i" (str.++ "l" (str.++ "e" (str.++ ":" (str.++ "/" "")))))))(re.++ (re.++ (re.opt (re.++ (re.range "A" "Z") (re.range ":" ":")))(re.++ (re.range "/" "/") (re.+ (re.union (re.range "!" "!")(re.union (re.range "#" "$")(re.union (re.range "&" "&")(re.union (re.range "(" "+")(re.union (re.range "-" "9")(re.union (re.range "@" "[")(re.union (re.range "]" "]")(re.union (re.range "_" "_") (re.range "~" "~")))))))))))) (re.union (re.++ (re.range "/" "/")(re.++ (re.+ (re.union (re.range "(" ")")(re.union (re.range "+" "+")(re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "=" "=")(re.union (re.range "A" "[")(re.union (re.range "]" "]")(re.union (re.range "_" "_") (re.range "~" "~")))))))))) (str.to_re (str.++ "." (str.++ "j" (str.++ "a" (str.++ "r" (str.++ "!" "")))))))) (re.++ (re.union (re.range "\u{00}" " ") (re.range "\u{22}" "\u{ff}")) (str.to_re (str.++ "/" (str.++ "c" (str.++ "o" (str.++ "m" (str.++ "/" (str.++ "r" (str.++ "e" (str.++ "g" (str.++ "e" (str.++ "x" (str.++ "l" (str.++ "i" (str.++ "b" (str.++ "/" (str.++ "e" (str.++ "x" (str.++ "a" (str.++ "m" (str.++ "p" (str.++ "l" (str.++ "e" (str.++ "/" ""))))))))))))))))))))))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "\u{19}" (str.++ "&" (str.++ "K" (str.++ ";" "")))))

(define-fun Witness2 () String (str.++ "L" (str.++ "&" (str.++ "z" (str.++ ";" "")))))

(assert (= regexA (re.++ (re.range "&" "&")(re.++ (re.+ (re.union (re.range "A" "Z") (re.range "a" "z")))(re.++ ((_ re.loop 0 3) (re.range "0" "9")) (re.range ";" ";"))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "E" (str.++ "v" (str.++ "e" (str.++ "n" (str.++ "i" (str.++ "n" (str.++ "g" (str.++ "e" (str.++ "x" (str.++ "t" (str.++ "\u{b8}" (str.++ "e" (str.++ "x" (str.++ "t" (str.++ "V" (str.++ "e" (str.++ "x" (str.++ "t" (str.++ "\u{01}" (str.++ "e" (str.++ "x" (str.++ "t" (str.++ "\u{a8}" (str.++ "e" (str.++ "x" (str.++ "t" (str.++ "R" (str.++ "\u{95}" (str.++ "t" ""))))))))))))))))))))))))))))))

(define-fun Witness2 () String (str.++ "8" (str.++ "2" (str.++ "+" (str.++ "\u{5c}" (str.++ "F" (str.++ "a" (str.++ "x" (str.++ ":" (str.++ "\u{09}" (str.++ "e" (str.++ "x" (str.++ "t" (str.++ "\u{d3}" (str.++ "6" (str.++ "6" (str.++ "\u{dd}" (str.++ "\u{e0}" ""))))))))))))))))))

(assert (= regexA (re.union (re.++ (re.+ (re.union (re.union (re.range " " " ")(re.union (re.range "(" ")")(re.union (re.range "-" "-") (re.range "0" "9"))))(re.union (re.++ (str.to_re (str.++ "e" (str.++ "x" (str.++ "t" "")))) (re.union (re.range "\u{00}" "\u{09}") (re.range "\u{0b}" "\u{ff}"))) (re.range "," ","))))(re.++ (re.* (re.union (re.range "\u{09}" "\u{09}")(re.union (re.range " " " ")(re.union (re.range "-" "-") (re.range ":" ":"))))) (re.union (str.to_re (str.++ "H" (str.++ "o" (str.++ "m" (str.++ "e" "")))))(re.union (str.to_re (str.++ "O" (str.++ "f" (str.++ "f" (str.++ "i" (str.++ "c" (str.++ "e" "")))))))(re.union (str.to_re (str.++ "W" (str.++ "o" (str.++ "r" (str.++ "k" "")))))(re.union (str.to_re (str.++ "A" (str.++ "w" (str.++ "a" (str.++ "y" "")))))(re.union (str.to_re (str.++ "F" (str.++ "a" (str.++ "x" ""))))(re.union (str.to_re (str.++ "F" (str.++ "A" (str.++ "X" "")))) (str.to_re (str.++ "P" (str.++ "h" (str.++ "o" (str.++ "n" (str.++ "e" ""))))))))))))))(re.union (re.++ (re.union (str.to_re (str.++ "H" (str.++ "o" (str.++ "m" (str.++ "e" "")))))(re.union (str.to_re (str.++ "O" (str.++ "f" (str.++ "f" (str.++ "i" (str.++ "c" (str.++ "e" "")))))))(re.union (str.to_re (str.++ "W" (str.++ "o" (str.++ "r" (str.++ "k" "")))))(re.union (str.to_re (str.++ "A" (str.++ "w" (str.++ "a" (str.++ "y" "")))))(re.union (str.to_re (str.++ "F" (str.++ "a" (str.++ "x" ""))))(re.union (str.to_re (str.++ "F" (str.++ "A" (str.++ "X" ""))))(re.union (str.to_re (str.++ "P" (str.++ "h" (str.++ "o" (str.++ "n" (str.++ "e" ""))))))(re.union (str.to_re (str.++ "D" (str.++ "a" (str.++ "y" (str.++ "t" (str.++ "i" (str.++ "m" (str.++ "e" "")))))))) (str.to_re (str.++ "E" (str.++ "v" (str.++ "e" (str.++ "n" (str.++ "i" (str.++ "n" (str.++ "g" ""))))))))))))))))(re.++ (re.* (re.union (re.range "\u{09}" "\u{09}")(re.union (re.range " " " ")(re.union (re.range "-" "-") (re.range ":" ":"))))) (re.+ (re.union (re.union (re.range " " " ")(re.union (re.range "(" ")")(re.union (re.range "-" "-") (re.range "0" "9"))))(re.union (re.++ (str.to_re (str.++ "e" (str.++ "x" (str.++ "t" "")))) (re.union (re.range "\u{00}" "\u{09}") (re.range "\u{0b}" "\u{ff}"))) (re.range "," ",")))))) (re.++ (re.range "(" "(")(re.++ ((_ re.loop 3 3) (re.range "0" "9"))(re.++ (re.range ")" ")")(re.++ (re.opt (re.range " " " "))(re.++ ((_ re.loop 3 3) (re.range "0" "9"))(re.++ (re.union (re.range " " " ") (re.range "-" "-")) ((_ re.loop 4 4) (re.range "0" "9"))))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "9" (str.++ "5" (str.++ "9" (str.++ "8" (str.++ "1" (str.++ "9" (str.++ "8" (str.++ "6" (str.++ "}" (str.++ "8" "")))))))))))

(define-fun Witness2 () String (str.++ "5" (str.++ "6" (str.++ "9" (str.++ "8" (str.++ "2" (str.++ "9" (str.++ "[" (str.++ "5" (str.++ "{" (str.++ "8" (str.++ "\u{ed}" ""))))))))))))

(assert (= regexA (re.++ ((_ re.loop 4 4) (re.range "0" "9"))(re.++ (re.range "0" "3") ((_ re.loop 5 5) (re.union (re.range "0" "9")(re.union (re.range "[" "[")(re.union (re.range "{" "{") (re.range "}" "}")))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "0" ""))

(define-fun Witness2 () String (str.++ "\u{d0}" (str.++ "4" (str.++ "\u{95}" (str.++ "0" "")))))

(assert (= regexA (re.union (re.++ (str.to_re "") (re.range "0" "0"))(re.union (re.++ (re.range "0" "3")(re.++ (re.range "." ".") (re.++ (re.opt (re.range "0" "9")) (re.opt (re.range "0" "9"))))) (re.++ (re.range "4" "4")(re.++ (re.union (re.range "\u{00}" "\u{09}") (re.range "\u{0b}" "\u{ff}"))(re.++ (re.range "0" "0") (str.to_re ""))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "\u{06}" (str.++ "B" (str.++ "6" (str.++ "0" (str.++ "." (str.++ "6" (str.++ "9" (str.++ "." (str.++ "8" ""))))))))))

(define-fun Witness2 () String (str.++ "F" (str.++ "f" (str.++ ":" (str.++ "\u{c4}" (str.++ "\u{89}" (str.++ "8" (str.++ "5" (str.++ "." (str.++ "1" (str.++ "4" (str.++ "." (str.++ "x" "")))))))))))))

(assert (= regexA (re.++ ((_ re.loop 2 2) (re.range "0" "9"))(re.++ (re.range "." ".")(re.++ ((_ re.loop 2 2) (re.range "0" "9"))(re.++ (re.range "." ".") (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "2" (str.++ "9" (str.++ "\u{0a}" (str.++ "F" (str.++ "e" (str.++ "b" (str.++ "r" (str.++ "u" (str.++ "a" (str.++ "r" (str.++ "y" (str.++ "\u{a0}" (str.++ "0" (str.++ "4" (str.++ "0" (str.++ "0" (str.++ "\u{8c}" ""))))))))))))))))))

(define-fun Witness2 () String (str.++ "2" (str.++ "9" (str.++ "\u{85}" (str.++ "F" (str.++ "e" (str.++ "b" (str.++ "r" (str.++ "u" (str.++ "a" (str.++ "r" (str.++ "y" (str.++ "\u{0c}" (str.++ "2" (str.++ "4" (str.++ "0" (str.++ "0" "")))))))))))))))))

(assert (= regexA (re.++ (str.to_re (str.++ "2" (str.++ "9" "")))(re.++ (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))(re.++ (str.to_re (str.++ "F" (str.++ "e" (str.++ "b" (str.++ "r" (str.++ "u" (str.++ "a" (str.++ "r" (str.++ "y" "")))))))))(re.++ (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))) (re.union (re.++ (re.union (re.++ (re.range "0" "0") (re.union (re.range "4" "4") (re.range "8" "8")))(re.union (re.++ (re.union (re.range "2" "2")(re.union (re.range "4" "4")(re.union (re.range "6" "6") (re.range "8" "8")))) (re.union (re.range "0" "0")(re.union (re.range "4" "4") (re.range "8" "8")))) (re.++ (re.union (re.range "1" "1")(re.union (re.range "3" "3")(re.union (re.range "5" "5")(re.union (re.range "7" "7") (re.range "9" "9"))))) (re.union (re.range "2" "2") (re.range "6" "6"))))) (str.to_re (str.++ "0" (str.++ "0" "")))) (re.++ ((_ re.loop 2 2) (re.range "0" "9")) (re.union (re.++ (re.range "0" "0") (re.union (re.range "4" "4") (re.range "8" "8")))(re.union (re.++ (re.union (re.range "2" "2")(re.union (re.range "4" "4")(re.union (re.range "6" "6") (re.range "8" "8")))) (re.union (re.range "0" "0")(re.union (re.range "4" "4") (re.range "8" "8")))) (re.++ (re.union (re.range "1" "1")(re.union (re.range "3" "3")(re.union (re.range "5" "5")(re.union (re.range "7" "7") (re.range "9" "9"))))) (re.union (re.range "2" "2") (re.range "6" "6")))))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "\u{10}" (str.++ "\u{04}" (str.++ "," (str.++ "\u{80}" (str.++ "]" (str.++ "9" (str.++ ":" (str.++ "/" (str.++ "/" (str.++ "2" (str.++ ":" (str.++ "/" (str.++ "\u{08}" (str.++ "\u{08}" (str.++ "\u{13}" (str.++ "\u{e5}" "")))))))))))))))))

(define-fun Witness2 () String (str.++ "i" (str.++ ":" (str.++ "/" (str.++ "/" (str.++ "H" (str.++ "\u{aa}" (str.++ "/" (str.++ "\u{aa}" "")))))))))

(assert (= regexA (re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))(re.++ (str.to_re (str.++ ":" (str.++ "/" (str.++ "/" ""))))(re.++ (re.++ (re.union (re.range "0" "9")(re.union (re.range "@" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))) (re.+ (re.union (re.range "-" ".")(re.union (re.range "0" ":")(re.union (re.range "@" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))))(re.++ (re.range "/" "/") (re.* (re.+ (re.union (re.range " " " ")(re.union (re.range "," "-")(re.union (re.range "0" "9")(re.union (re.range "=" "=")(re.union (re.range "@" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "2" (str.++ "9" (str.++ "/" (str.++ "1" (str.++ "1" (str.++ "/" (str.++ "2" (str.++ "0" (str.++ "9" (str.++ "0" "")))))))))))

(define-fun Witness2 () String (str.++ "\u{91}" (str.++ "B" (str.++ "\u{b8}" (str.++ "2" (str.++ "9" (str.++ "/" (str.++ "0" (str.++ "2" (str.++ "/" (str.++ "1" (str.++ "9" (str.++ "9" (str.++ "6" ""))))))))))))))

(assert (= regexA (re.union (re.++ (str.to_re "") (re.++ (re.union (re.++ (re.union (re.++ (re.range "0" "0") (re.range "1" "9"))(re.union (re.++ (re.range "1" "1") (re.range "0" "9")) (re.++ (re.range "2" "2") (re.range "0" "8"))))(re.++ (re.range "/" "/") (re.union (re.++ (re.range "0" "0") (re.range "1" "9")) (re.++ (re.range "1" "1") (re.range "0" "2"))))) (re.union (re.++ (str.to_re (str.++ "3" (str.++ "1" (str.++ "/" "")))) (re.union (re.++ (re.range "0" "0") (re.union (re.range "1" "1")(re.union (re.range "3" "3")(re.union (re.range "5" "5") (re.range "7" "8"))))) (re.++ (re.range "1" "1") (re.union (re.range "0" "0") (re.range "2" "2"))))) (re.++ (re.union (str.to_re (str.++ "2" (str.++ "9" ""))) (str.to_re (str.++ "3" (str.++ "0" ""))))(re.++ (re.range "/" "/") (re.union (re.++ (re.range "0" "0") (re.union (re.range "," ",")(re.union (re.range "1" "1") (re.range "3" "9")))) (re.++ (re.range "1" "1") (re.range "0" "2")))))))(re.++ (re.range "/" "/") (re.union (re.++ (str.to_re (str.++ "2" (str.++ "0" "")))(re.++ (re.range "0" "9") (re.range "0" "9"))) (re.++ (str.to_re (str.++ "1" (str.++ "9" "")))(re.++ (re.range "0" "9") (re.range "0" "9"))))))) (re.++ (re.++ (str.to_re (str.++ "2" (str.++ "9" (str.++ "/" (str.++ "0" (str.++ "2" (str.++ "/" "")))))))(re.++ (re.union (str.to_re (str.++ "1" (str.++ "9" ""))) (str.to_re (str.++ "2" (str.++ "0" "")))) (re.union (re.++ (re.union (re.range "0" "0")(re.union (re.range "2" "2")(re.union (re.range "4" "4")(re.union (re.range "6" "6") (re.range "8" "8"))))) (re.union (re.range "0" "0")(re.union (re.range "4" "4") (re.range "8" "8")))) (re.++ (re.union (re.range "1" "1")(re.union (re.range "3" "3")(re.union (re.range "5" "5")(re.union (re.range "7" "7") (re.range "9" "9"))))) (re.union (re.range "2" "2") (re.range "6" "6")))))) (str.to_re "")))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "\u{8a}" (str.++ " " (str.++ " " (str.++ " " (str.++ " " (str.++ " " (str.++ " " (str.++ "A" "")))))))))

(define-fun Witness2 () String (str.++ " " (str.++ " " (str.++ " " (str.++ " " (str.++ " " (str.++ " " (str.++ "2" (str.++ "\u{cb}" "")))))))))

(assert (= regexA (re.++ (str.to_re (str.++ " " (str.++ " " (str.++ " " (str.++ " " (str.++ " " (str.++ " " ""))))))) ((_ re.loop 1 5) (re.union (re.range "0" "9") (re.range "A" "F"))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "9" (str.++ "8" (str.++ "5" (str.++ "9" (str.++ "0" (str.++ "2" (str.++ "9" (str.++ "8" (str.++ "X" (str.++ "\u{9a}" "")))))))))))

(define-fun Witness2 () String (str.++ "E" (str.++ "S" (str.++ "X" (str.++ "0" (str.++ "3" (str.++ "9" (str.++ "8" (str.++ "9" (str.++ "1" (str.++ "8" (str.++ "N" (str.++ "{" "")))))))))))))

(assert (= regexA (re.union (re.++ (str.to_re "")(re.++ (re.opt (str.to_re (str.++ "E" (str.++ "S" "")))) (re.++ (re.union (re.range "0" "9") (re.range "A" "Z"))(re.++ ((_ re.loop 7 7) (re.range "0" "9")) (re.range "A" "Z"))))) (re.++ (re.++ (re.range "A" "Z")(re.++ ((_ re.loop 7 7) (re.range "0" "9")) (re.union (re.range "0" "9") (re.range "A" "Z")))) (str.to_re "")))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "n" (str.++ "a" (str.++ "m" (str.++ "e" (str.++ "\u{94}" (str.++ "m" (str.++ "a" (str.++ "t" (str.++ "c" (str.++ "h" (str.++ "e" (str.++ "s" (str.++ "\u{22}" (str.++ "a" (str.++ "-" (str.++ "z" (str.++ "\u{22}" ""))))))))))))))))))

(define-fun Witness2 () String (str.++ "H" (str.++ "\u{e5}" (str.++ "n" (str.++ "a" (str.++ "m" (str.++ "e" (str.++ "\u{13}" (str.++ "m" (str.++ "a" (str.++ "t" (str.++ "c" (str.++ "h" (str.++ "e" (str.++ "s" (str.++ "\u{22}" (str.++ "a" (str.++ "-" (str.++ "z" (str.++ "\u{22}" ""))))))))))))))))))))

(assert (= regexA (re.++ (str.to_re (str.++ "n" (str.++ "a" (str.++ "m" (str.++ "e" "")))))(re.++ (re.union (re.range "\u{00}" "\u{09}") (re.range "\u{0b}" "\u{ff}"))(re.++ (str.to_re (str.++ "m" (str.++ "a" (str.++ "t" (str.++ "c" (str.++ "h" (str.++ "e" (str.++ "s" "")))))))) (str.to_re (str.++ "\u{22}" (str.++ "a" (str.++ "-" (str.++ "z" (str.++ "\u{22}" "")))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "1" (str.++ "1" (str.++ " " (str.++ "3" (str.++ "0" (str.++ " " (str.++ "2" (str.++ "0" (str.++ "6" (str.++ "2" (str.++ "\u{bf}" ""))))))))))))

(define-fun Witness2 () String (str.++ "1" (str.++ "1" (str.++ " " (str.++ "8" (str.++ " " (str.++ "2" (str.++ "0" (str.++ "8" (str.++ "8" (str.++ "\u{c8}" "")))))))))))

(assert (= regexA (re.++ (re.union (re.union (re.range "1" "9") (re.++ (re.range "0" "0") (re.range "1" "9"))) (re.++ (re.range "1" "1") (re.range "0" "2")))(re.++ (re.union (re.range " " " ") (re.range "-" "/"))(re.++ (re.union (re.union (re.range "1" "9") (re.++ (re.range "0" "0") (re.range "1" "9")))(re.union (re.++ (re.range "1" "2") (re.range "0" "9")) (re.++ (re.range "3" "3") (re.range "0" "1"))))(re.++ (re.union (re.range " " " ") (re.range "-" "/"))(re.++ (re.union (str.to_re (str.++ "1" (str.++ "9" ""))) (str.to_re (str.++ "2" (str.++ "0" ""))))(re.++ (re.range "0" "9") (re.range "0" "9")))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "\u{b0}" (str.++ "c" (str.++ "8" (str.++ "a" (str.++ "\u{c5}" (str.++ "b" (str.++ "\u{b4}" (str.++ "b" (str.++ "b" (str.++ "\u{d1}" (str.++ "c" ""))))))))))))

(define-fun Witness2 () String (str.++ "6" (str.++ "\u{e3}" (str.++ "C" (str.++ "b" (str.++ "\u{95}" (str.++ "i" (str.++ "b" (str.++ "b" (str.++ "\u{8c}" (str.++ "c" "")))))))))))

(assert (= regexA (re.++ (re.range "a" "c")(re.++ (re.union (re.range "\u{00}" "\u{09}") (re.range "\u{0b}" "\u{ff}"))(re.++ (re.* (re.++ (re.range "a" "a")(re.++ (re.union (re.range "\u{00}" "\u{09}") (re.range "\u{0b}" "\u{ff}")) (re.range "b" "b"))))(re.++ (re.union (re.range "\u{00}" "\u{09}") (re.range "\u{0b}" "\u{ff}"))(re.++ (re.+ (re.range "b" "b"))(re.++ (re.union (re.range "\u{00}" "\u{09}") (re.range "\u{0b}" "\u{ff}")) (re.range "c" "c")))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "\u{b2}" (str.++ "B" (str.++ "1" (str.++ "\u{01}" (str.++ "\u{a0}" (str.++ "x" (str.++ "<" (str.++ "\u{c9}" (str.++ "@" (str.++ "\u{aa}" (str.++ "B" (str.++ "-" (str.++ "\u{ba}" (str.++ "." (str.++ "\u{b5}" (str.++ ">" "")))))))))))))))))

(define-fun Witness2 () String (str.++ "<" (str.++ "\u{c2}" (str.++ "7" (str.++ "@" (str.++ "\u{aa}" (str.++ "." (str.++ "H" (str.++ "\u{aa}" (str.++ "\u{c1}" (str.++ ">" "")))))))))))

(assert (= regexA (re.++ (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "'" "'")(re.union (re.range "-" ".")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))))))(re.++ (re.range "<" "<")(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))(re.++ (re.* (re.++ (re.union (re.range "'" "'")(re.union (re.range "+" "+") (re.range "-" "."))) (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))))(re.++ (re.range "@" "@")(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))(re.++ (re.* (re.++ (re.range "-" ".") (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))))(re.++ (re.range "." ".")(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))(re.++ (re.* (re.++ (re.range "-" ".") (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))))) (re.range ">" ">")))))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "v" (str.++ "o" (str.++ "@" (str.++ "8" (str.++ "." (str.++ "5" (str.++ "." (str.++ "5" (str.++ "8" (str.++ "x" (str.++ "6" (str.++ "3" (str.++ "9" (str.++ "3" (str.++ "\u{e4}" (str.++ "C" (str.++ "\u{8f}" (str.++ "\u{0d}" (str.++ "\u{ab}" ""))))))))))))))))))))

(define-fun Witness2 () String (str.++ "b" (str.++ "J" (str.++ "p" (str.++ "@" (str.++ "V" (str.++ "." (str.++ "J" (str.++ "J" "")))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.+ (re.union (re.range "A" "Z") (re.range "a" "z")))(re.++ (re.* (re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_") (re.range "a" "z"))))))(re.++ (re.range "@" "@")(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))) ((_ re.loop 1 2) (re.++ (re.range "." ".") (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "\u{e0}" (str.++ "\u{85}" (str.++ "{" (str.++ "x" (str.++ "i" (str.++ "," (str.++ "\u{e3}" (str.++ "}" (str.++ "\u{ff}" ""))))))))))

(define-fun Witness2 () String (str.++ "\u{a9}" (str.++ "\u{88}" (str.++ "(" (str.++ "." (str.++ "{" (str.++ "}" (str.++ "d" ""))))))))

(assert (= regexA (re.++ (re.range "{" "{")(re.++ (re.* (re.union (re.range "\u{00}" "\u{09}") (re.range "\u{0b}" "\u{ff}"))) (re.range "}" "}")))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "V" (str.++ "I" (str.++ "N" (str.++ "S" (str.++ "E" (str.++ "R" (str.++ "T" (str.++ " " (str.++ "I" (str.++ "N" (str.++ "T" (str.++ "O" (str.++ " " (str.++ " " (str.++ "\u{0d}" (str.++ "\u{f8}" (str.++ "\u{85}" (str.++ "(" (str.++ "\u{0c}" (str.++ "y" (str.++ "\u{09}" (str.++ ")" (str.++ "\u{a0}" (str.++ "V" (str.++ "A" (str.++ "L" (str.++ "U" (str.++ "E" (str.++ "S" (str.++ "\u{0b}" (str.++ "\u{0b}" (str.++ " " (str.++ " " (str.++ "(" (str.++ "\u{dd}" (str.++ "\u{f2}" (str.++ ")" ""))))))))))))))))))))))))))))))))))))))

(define-fun Witness2 () String (str.++ "I" (str.++ "N" (str.++ "S" (str.++ "E" (str.++ "R" (str.++ "T" (str.++ " " (str.++ "I" (str.++ "N" (str.++ "T" (str.++ "O" (str.++ "\u{a0}" (str.++ "\u{aa}" (str.++ "\u{ba}" (str.++ " " (str.++ "(" (str.++ "\u{0c}" (str.++ "Z" (str.++ ")" (str.++ "\u{85}" (str.++ "\u{a0}" (str.++ " " (str.++ "V" (str.++ "A" (str.++ "L" (str.++ "U" (str.++ "E" (str.++ "S" (str.++ "\u{a0}" (str.++ "\u{85}" (str.++ "\u{0d}" (str.++ " " (str.++ "\u{09}" (str.++ "(" (str.++ "8" (str.++ ")" (str.++ "\u{ef}" (str.++ "Z" (str.++ "A" (str.++ "\u{88}" (str.++ "\u{d5}" ""))))))))))))))))))))))))))))))))))))))))))

(assert (= regexA (re.++ (re.++ (str.to_re (str.++ "I" (str.++ "N" (str.++ "S" (str.++ "E" (str.++ "R" (str.++ "T" (str.++ " " (str.++ "I" (str.++ "N" (str.++ "T" (str.++ "O" "")))))))))))) (re.+ (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))))(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))(re.++ (re.++ (re.+ (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))) (re.range "(" "("))(re.++ (re.+ (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "*" ",")(re.union (re.range "0" "9")(re.union (re.range "?" "?")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{85}" "\u{85}")(re.union (re.range "\u{a0}" "\u{a0}")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))))))))(re.++ (re.++ (re.range ")" ")")(re.++ (re.+ (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (str.to_re (str.++ "V" (str.++ "A" (str.++ "L" (str.++ "U" (str.++ "E" (str.++ "S" "")))))))(re.++ (re.+ (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))) (re.range "(" "(")))))(re.++ (re.+ (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "'" "'")(re.union (re.range "*" ",")(re.union (re.range "0" "9")(re.union (re.range "?" "?")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{85}" "\u{85}")(re.union (re.range "\u{a0}" "\u{a0}")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))))))))) (re.range ")" ")")))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "\u{af}" (str.++ "\u{ba}" (str.++ "9" (str.++ "7" "")))))

(define-fun Witness2 () String (str.++ "\u{eb}" (str.++ "\u{ad}" (str.++ "\u{f7}" (str.++ "(" (str.++ "%" ""))))))

(assert (= regexA (re.* (re.union (re.range "(" ")")(re.union (re.range "+" ".") (re.range "0" "9"))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "\u{13}" (str.++ "3" (str.++ "B" (str.++ "P" (str.++ "W" (str.++ "9" (str.++ "2" (str.++ "9" "")))))))))

(define-fun Witness2 () String (str.++ "6" (str.++ "f" (str.++ "K" (str.++ "8" (str.++ "0" (str.++ "5" (str.++ "0" ""))))))))

(assert (= regexA (re.++ ((_ re.loop 6 6) (re.union (re.range "0" "9")(re.union (re.range "B" "D")(re.union (re.range "F" "H")(re.union (re.range "J" "N")(re.union (re.range "P" "T")(re.union (re.range "V" "Z")(re.union (re.range "b" "d")(re.union (re.range "f" "h")(re.union (re.range "j" "n")(re.union (re.range "p" "t") (re.range "v" "z")))))))))))) (re.range "0" "9"))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "\u{8b}" (str.++ "'" (str.++ "/" (str.++ "h" (str.++ "t" (str.++ "t" (str.++ "p" (str.++ ":" (str.++ "\u{5c}" (str.++ "/" (str.++ "/" (str.++ "v" (str.++ "i" (str.++ "d" (str.++ "e" (str.++ "o" (str.++ "\u{f7}" (str.++ "g" (str.++ "o" (str.++ "o" (str.++ "g" (str.++ "l" (str.++ "e" (str.++ "N" (str.++ "\u{ea}" (str.++ "\u{aa}" (str.++ "\u{ba}" (str.++ "/" (str.++ "v" (str.++ "i" (str.++ "d" (str.++ "e" (str.++ "o" (str.++ "p" (str.++ "l" (str.++ "a" (str.++ "y" (str.++ "?" (str.++ "d" (str.++ "o" (str.++ "c" (str.++ "i" (str.++ "d" (str.++ "=" (str.++ "a" (str.++ "-" (str.++ "/" (str.++ "i" (str.++ "'" (str.++ "\u{b8}" "")))))))))))))))))))))))))))))))))))))))))))))))))))

(define-fun Witness2 () String (str.++ "'" (str.++ "/" (str.++ "h" (str.++ "t" (str.++ "t" (str.++ "p" (str.++ ":" (str.++ "\u{5c}" (str.++ "/" (str.++ "/" (str.++ "v" (str.++ "i" (str.++ "d" (str.++ "e" (str.++ "o" (str.++ "\u{14}" (str.++ "g" (str.++ "o" (str.++ "o" (str.++ "g" (str.++ "l" (str.++ "e" (str.++ "G" (str.++ "Z" (str.++ "\u{aa}" (str.++ "z" (str.++ "/" (str.++ "v" (str.++ "i" (str.++ "d" (str.++ "e" (str.++ "o" (str.++ "p" (str.++ "l" (str.++ "a" (str.++ "y" (str.++ "?" (str.++ "d" (str.++ "o" (str.++ "c" (str.++ "i" (str.++ "d" (str.++ "=" (str.++ "_" (str.++ "l" (str.++ "/" (str.++ "i" (str.++ "'" (str.++ "8" (str.++ ">" (str.++ "\u{a0}" ""))))))))))))))))))))))))))))))))))))))))))))))))))))

(assert (= regexA (re.++ (str.to_re (str.++ "'" (str.++ "/" (str.++ "h" (str.++ "t" (str.++ "t" (str.++ "p" (str.++ ":" (str.++ "\u{5c}" (str.++ "/" (str.++ "/" "")))))))))))(re.++ (re.opt (re.range "." "."))(re.++ (str.to_re (str.++ "v" (str.++ "i" (str.++ "d" (str.++ "e" (str.++ "o" ""))))))(re.++ (re.union (re.range "\u{00}" "\u{09}") (re.range "\u{0b}" "\u{ff}"))(re.++ (str.to_re (str.++ "g" (str.++ "o" (str.++ "o" (str.++ "g" (str.++ "l" (str.++ "e" "")))))))(re.++ (re.union (re.range "\u{00}" "\u{09}") (re.range "\u{0b}" "\u{ff}"))(re.++ ((_ re.loop 2 3) (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))(re.++ (str.to_re (str.++ "/" (str.++ "v" (str.++ "i" (str.++ "d" (str.++ "e" (str.++ "o" (str.++ "p" (str.++ "l" (str.++ "a" (str.++ "y" (str.++ "?" (str.++ "d" (str.++ "o" (str.++ "c" (str.++ "i" (str.++ "d" (str.++ "=" ""))))))))))))))))))(re.++ (re.+ (re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "_" "_") (re.range "a" "z"))))) (str.to_re (str.++ "/" (str.++ "i" (str.++ "'" "")))))))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "e" (str.++ "t" (str.++ "e" (str.++ "s" (str.++ "t" (str.++ "?" "")))))))

(define-fun Witness2 () String (str.++ "$" (str.++ "t" (str.++ "e" (str.++ "s" (str.++ "t" ""))))))

(assert (= regexA (str.to_re (str.++ "t" (str.++ "e" (str.++ "s" (str.++ "t" "")))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "0" (str.++ "9" (str.++ "\u{a0}" (str.++ "A" (str.++ "M" ""))))))

(define-fun Witness2 () String (str.++ "\u{09}" (str.++ "A" (str.++ "m" (str.++ "R" "")))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.opt (re.union (re.++ (re.range "0" "0") (re.range "0" "9")) (re.++ (re.range "1" "1")(re.++ (re.range "0" "2")(re.++ (re.range "/" "/")(re.++ (re.union (re.++ (re.range "0" "2") (re.range "0" "9")) (re.++ (re.range "3" "3") (re.range "0" "1")))(re.++ (re.range "/" "/")(re.++ (re.++ (str.to_re (str.++ "2" (str.++ "0" ""))) ((_ re.loop 2 2) (re.range "0" "9")))(re.++ (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))(re.++ (re.union (re.++ (re.range "0" "1") (re.range "0" "9")) (re.++ (re.range "2" "2") (re.range "0" "3")))(re.++ (re.range ":" ":")(re.++ (re.range "0" "5")(re.++ (re.range "0" "9")(re.++ (re.range ":" ":")(re.++ (re.range "0" "5") (re.range "0" "9"))))))))))))))))(re.++ (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))) (re.union (str.to_re (str.++ "A" (str.++ "M" "")))(re.union (str.to_re (str.++ "a" (str.++ "m" "")))(re.union (str.to_re (str.++ "a" (str.++ "M" "")))(re.union (str.to_re (str.++ "A" (str.++ "m" "")))(re.union (str.to_re (str.++ "P" (str.++ "M" "")))(re.union (str.to_re (str.++ "p" (str.++ "m" "")))(re.union (str.to_re (str.++ "p" (str.++ "M" ""))) (str.to_re (str.++ "P" (str.++ "m" "")))))))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "\u{a5}" (str.++ "\u{f7}" (str.++ "\u{a4}" ""))))

(define-fun Witness2 () String (str.++ "\u{a5}" ""))

(assert (= regexA (re.range "\u{a5}" "\u{a5}")))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "\u{ff}" (str.++ "9" (str.++ "5" (str.++ "8" (str.++ "-" (str.++ "7" (str.++ "8" (str.++ "1" (str.++ "4" (str.++ "7" (str.++ "8" (str.++ "2" (str.++ "4" (str.++ "8" (str.++ "8" (str.++ "9" (str.++ "3" (str.++ "6" (str.++ "3" (str.++ "2" (str.++ "9" ""))))))))))))))))))))))

(define-fun Witness2 () String (str.++ "9" (str.++ "5" (str.++ "8" (str.++ "5" (str.++ "5" (str.++ "8" (str.++ "8" (str.++ "9" (str.++ "8" (str.++ "2" (str.++ "8" (str.++ "5" "")))))))))))))

(assert (= regexA (re.union (re.++ (str.to_re "") (re.++ (str.to_re (str.++ "9" (str.++ "5" (str.++ "8" ""))))(re.++ (re.+ (re.range "0" "9"))(re.++ (re.+ (re.range "0" "9"))(re.++ (re.+ (re.range "0" "9"))(re.++ (re.+ (re.range "0" "9"))(re.++ (re.+ (re.range "0" "9")) (re.+ (re.range "0" "9"))))))))) (re.++ (re.++ (str.to_re (str.++ "9" (str.++ "5" (str.++ "8" (str.++ "-" "")))))(re.++ (re.+ (re.range "0" "9"))(re.++ (re.+ (re.range "0" "9"))(re.++ (re.+ (re.range "0" "9"))(re.++ (re.+ (re.range "0" "9"))(re.++ (re.+ (re.range "0" "9")) (re.+ (re.range "0" "9")))))))) (str.to_re "")))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "1" (str.++ "8" (str.++ " " (str.++ "f" (str.++ "E" (str.++ "B" (str.++ " " (str.++ "9" (str.++ "9" (str.++ "7" (str.++ "7" (str.++ " " (str.++ "2" (str.++ "2" (str.++ ":" (str.++ "2" (str.++ "1" (str.++ ":" (str.++ "1" (str.++ "5" "")))))))))))))))))))))

(define-fun Witness2 () String (str.++ "1" (str.++ "9" (str.++ " " (str.++ "F" (str.++ "e" (str.++ "B" (str.++ " " (str.++ "7" (str.++ "8" (str.++ "1" (str.++ "8" (str.++ " " (str.++ "2" (str.++ "1" (str.++ ":" (str.++ "2" (str.++ "8" (str.++ ":" (str.++ "0" (str.++ "9" "")))))))))))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.union (re.++ (re.union (re.++ (re.range "0" "0") (re.range "1" "9"))(re.union (re.++ (re.range "1" "2") (re.range "0" "9")) (re.++ (re.range "3" "3") (re.range "0" "1"))))(re.++ (re.range " " " ") (re.union (str.to_re (str.++ "j" (str.++ "a" (str.++ "n" ""))))(re.union (str.to_re (str.++ "m" (str.++ "a" (str.++ "r" ""))))(re.union (str.to_re (str.++ "m" (str.++ "a" (str.++ "y" ""))))(re.union (str.to_re (str.++ "j" (str.++ "u" (str.++ "l" ""))))(re.union (str.to_re (str.++ "a" (str.++ "u" (str.++ "g" ""))))(re.union (str.to_re (str.++ "o" (str.++ "c" (str.++ "t" "")))) (str.to_re (str.++ "d" (str.++ "e" (str.++ "c" "")))))))))))) (re.union (re.++ (re.union (re.++ (re.range "0" "0") (re.range "1" "9"))(re.union (re.++ (re.range "1" "2") (re.range "0" "9")) (str.to_re (str.++ "3" (str.++ "0" "")))))(re.++ (re.range " " " ") (re.union (str.to_re (str.++ "a" (str.++ "p" (str.++ "r" ""))))(re.union (str.to_re (str.++ "j" (str.++ "u" (str.++ "n" ""))))(re.union (str.to_re (str.++ "s" (str.++ "e" (str.++ "p" "")))) (str.to_re (str.++ "n" (str.++ "o" (str.++ "v" ""))))))))) (re.++ (re.union (re.++ (re.range "0" "0") (re.range "1" "9")) (re.++ (re.range "1" "2") (re.range "0" "9"))) (str.to_re (str.++ " " (str.++ "f" (str.++ "e" (str.++ "b" ""))))))))(re.++ (re.range " " " ")(re.++ (re.range "0" "9")(re.++ (re.range "0" "9")(re.++ (re.range "0" "9")(re.++ (re.range "0" "9")(re.++ (re.range " " " ")(re.++ (re.++ (re.union (re.++ (re.range "0" "1") (re.range "0" "9")) (re.++ (re.range "2" "2") (re.range "0" "3")))(re.++ (re.range ":" ":")(re.++ (re.range "0" "5")(re.++ (re.range "0" "9")(re.++ (re.range ":" ":")(re.++ (re.range "0" "5") (re.range "0" "9"))))))) (str.to_re ""))))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "1" (str.++ "2" (str.++ "-" (str.++ "1" (str.++ "-" (str.++ "9" (str.++ "8" ""))))))))

(define-fun Witness2 () String (str.++ "1" (str.++ "0" (str.++ "-" (str.++ "0" (str.++ "4" (str.++ "/" (str.++ "4" (str.++ "4" (str.++ "8" (str.++ "8" (str.++ "\u{d1}" (str.++ "\u{9d}" (str.++ "\u{d0}" (str.++ "\u{19}" (str.++ "1" ""))))))))))))))))

(assert (= regexA (re.union (re.++ (re.union (re.++ (re.opt (re.range "0" "0")) (re.union (re.range "1" "1")(re.union (re.range "3" "3")(re.union (re.range "5" "5") (re.range "7" "8")))))(re.union (str.to_re (str.++ "1" (str.++ "0" ""))) (str.to_re (str.++ "1" (str.++ "2" "")))))(re.++ (re.union (re.range "-" "-") (re.range "/" "/"))(re.++ (re.union (re.++ (re.range "0" "0") (re.range "0" "9"))(re.union (re.++ (re.range "1" "2") (re.opt (re.range "0" "9"))) (re.++ (re.range "3" "3") (re.opt (re.range "0" "1")))))(re.++ (re.union (re.range "-" "-") (re.range "/" "/")) (re.union ((_ re.loop 4 4) (re.range "0" "9")) ((_ re.loop 2 2) (re.range "0" "9"))))))) (re.++ (re.union (re.++ (re.opt (re.range "0" "0")) (re.union (re.range "2" "2")(re.union (re.range "4" "4")(re.union (re.range "6" "6") (re.range "9" "9"))))) (str.to_re (str.++ "1" (str.++ "1" ""))))(re.++ (re.union (re.range "-" "-") (re.range "/" "/"))(re.++ (re.union (re.++ (re.range "0" "0") (re.range "0" "9"))(re.union (re.++ (re.range "1" "2") (re.opt (re.range "0" "9"))) (re.++ (re.range "3" "3") (re.opt (re.range "0" "0")))))(re.++ (re.union (re.range "-" "-") (re.range "/" "/")) (re.union ((_ re.loop 4 4) (re.range "0" "9")) ((_ re.loop 2 2) (re.range "0" "9"))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "4" (str.++ "5" (str.++ "9" (str.++ "8" (str.++ "-" (str.++ "1" (str.++ "2" (str.++ "-" (str.++ "0" (str.++ "8" (str.++ "\u{a0}" (str.++ "0" (str.++ "9" (str.++ ":" (str.++ "5" (str.++ "4" (str.++ "," ""))))))))))))))))))

(define-fun Witness2 () String (str.++ "7" (str.++ "1" (str.++ "7" (str.++ "7" (str.++ "-" (str.++ "1" (str.++ "2" (str.++ "-" (str.++ "1" (str.++ "8" (str.++ "\u{85}" (str.++ "2" (str.++ "3" (str.++ ":" (str.++ "2" (str.++ "9" (str.++ "\u{d9}" (str.++ "f" "")))))))))))))))))))

(assert (= regexA (re.++ (re.range "0" "9")(re.++ (re.range "0" "9")(re.++ (re.range "0" "9")(re.++ (re.range "0" "9")(re.++ (re.range "-" "-")(re.++ (re.union (re.++ (re.range "0" "0") (re.range "1" "9")) (re.++ (re.range "1" "1") (re.range "0" "2")))(re.++ (re.range "-" "-")(re.++ (re.union (re.++ (re.range "0" "0") (re.range "1" "9"))(re.union (re.++ (re.range "1" "1") (re.range "0" "9"))(re.union (re.++ (re.range "2" "2") (re.range "0" "9")) (re.++ (re.range "3" "3") (re.range "0" "1")))))(re.++ (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))(re.++ (re.union (re.++ (re.range "0" "0") (re.range "0" "9"))(re.union (re.++ (re.range "1" "1") (re.range "0" "9")) (re.++ (re.range "2" "2") (re.range "0" "3"))))(re.++ (re.range ":" ":") (re.++ (re.range "0" "5") (re.range "0" "9")))))))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "K" (str.++ "1" (str.++ "m" ""))))

(define-fun Witness2 () String (str.++ "c" (str.++ "s" (str.++ "\u{1e}" ""))))

(assert (= regexA ((_ re.loop 1 11) (re.union (re.range "0" "9") (re.range "a" "z")))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "&" (str.++ "l" (str.++ "t" (str.++ ";" (str.++ "t" (str.++ "a" (str.++ "b" (str.++ "l" (str.++ "e" (str.++ "&" (str.++ "g" (str.++ "t" (str.++ ";" (str.++ "&" (str.++ "l" (str.++ "t" (str.++ ";" (str.++ "/" (str.++ "t" (str.++ "a" (str.++ "b" (str.++ "l" (str.++ "e" (str.++ "&" (str.++ "g" (str.++ "t" (str.++ ";" (str.++ "C" "")))))))))))))))))))))))))))))

(define-fun Witness2 () String (str.++ "&" (str.++ "l" (str.++ "t" (str.++ ";" (str.++ "t" (str.++ "a" (str.++ "b" (str.++ "l" (str.++ "e" (str.++ "&" (str.++ "g" (str.++ "t" (str.++ ";" (str.++ "&" (str.++ "l" (str.++ "t" (str.++ ";" (str.++ "t" (str.++ "r" (str.++ "&" (str.++ "g" (str.++ "t" (str.++ ";" (str.++ "&" (str.++ "l" (str.++ "t" (str.++ ";" (str.++ "t" (str.++ "d" (str.++ "&" (str.++ "g" (str.++ "t" (str.++ ";" (str.++ "&" (str.++ "l" (str.++ "t" (str.++ ";" (str.++ "/" (str.++ "t" (str.++ "d" (str.++ "&" (str.++ "g" (str.++ "t" (str.++ ";" (str.++ "&" (str.++ "l" (str.++ "t" (str.++ ";" (str.++ "t" (str.++ "d" (str.++ "&" (str.++ "g" (str.++ "t" (str.++ ";" (str.++ "7" (str.++ "&" (str.++ "l" (str.++ "t" (str.++ ";" (str.++ "/" (str.++ "t" (str.++ "d" (str.++ "&" (str.++ "g" (str.++ "t" (str.++ ";" (str.++ "&" (str.++ "l" (str.++ "t" (str.++ ";" (str.++ "/" (str.++ "t" (str.++ "r" (str.++ "&" (str.++ "g" (str.++ "t" (str.++ ";" (str.++ "&" (str.++ "l" (str.++ "t" (str.++ ";" (str.++ "t" (str.++ "r" (str.++ "&" (str.++ "g" (str.++ "t" (str.++ ";" (str.++ "&" (str.++ "l" (str.++ "t" (str.++ ";" (str.++ "t" (str.++ "d" (str.++ "&" (str.++ "g" (str.++ "t" (str.++ ";" (str.++ "8" (str.++ "&" (str.++ "l" (str.++ "t" (str.++ ";" (str.++ "/" (str.++ "t" (str.++ "d" (str.++ "&" (str.++ "g" (str.++ "t" (str.++ ";" (str.++ "&" (str.++ "l" (str.++ "t" (str.++ ";" (str.++ "/" (str.++ "t" (str.++ "r" (str.++ "&" (str.++ "g" (str.++ "t" (str.++ ";" (str.++ "&" (str.++ "l" (str.++ "t" (str.++ ";" (str.++ "t" (str.++ "r" (str.++ "&" (str.++ "g" (str.++ "t" (str.++ ";" (str.++ "&" (str.++ "l" (str.++ "t" (str.++ ";" (str.++ "t" (str.++ "d" (str.++ "&" (str.++ "g" (str.++ "t" (str.++ ";" (str.++ "&" (str.++ "l" (str.++ "t" (str.++ ";" (str.++ "/" (str.++ "t" (str.++ "d" (str.++ "&" (str.++ "g" (str.++ "t" (str.++ ";" (str.++ "&" (str.++ "l" (str.++ "t" (str.++ ";" (str.++ "/" (str.++ "t" (str.++ "r" (str.++ "&" (str.++ "g" (str.++ "t" (str.++ ";" (str.++ "&" (str.++ "l" (str.++ "t" (str.++ ";" (str.++ "/" (str.++ "t" (str.++ "a" (str.++ "b" (str.++ "l" (str.++ "e" (str.++ "&" (str.++ "g" (str.++ "t" (str.++ ";" (str.++ "+" ""))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(assert (= regexA (re.++ (str.to_re (str.++ "&" (str.++ "l" (str.++ "t" (str.++ ";" (str.++ "t" (str.++ "a" (str.++ "b" (str.++ "l" (str.++ "e" (str.++ "&" (str.++ "g" (str.++ "t" (str.++ ";" ""))))))))))))))(re.++ (re.* (re.++ (str.to_re (str.++ "&" (str.++ "l" (str.++ "t" (str.++ ";" (str.++ "t" (str.++ "r" (str.++ "&" (str.++ "g" (str.++ "t" (str.++ ";" "")))))))))))(re.++ (re.+ (re.++ (str.to_re (str.++ "&" (str.++ "l" (str.++ "t" (str.++ ";" (str.++ "t" (str.++ "d" (str.++ "&" (str.++ "g" (str.++ "t" (str.++ ";" "")))))))))))(re.++ (re.* (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))) (str.to_re (str.++ "&" (str.++ "l" (str.++ "t" (str.++ ";" (str.++ "/" (str.++ "t" (str.++ "d" (str.++ "&" (str.++ "g" (str.++ "t" (str.++ ";" ""))))))))))))))) (str.to_re (str.++ "&" (str.++ "l" (str.++ "t" (str.++ ";" (str.++ "/" (str.++ "t" (str.++ "r" (str.++ "&" (str.++ "g" (str.++ "t" (str.++ ";" ""))))))))))))))) (str.to_re (str.++ "&" (str.++ "l" (str.++ "t" (str.++ ";" (str.++ "/" (str.++ "t" (str.++ "a" (str.++ "b" (str.++ "l" (str.++ "e" (str.++ "&" (str.++ "g" (str.++ "t" (str.++ ";" "")))))))))))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "#" (str.++ "2" (str.++ "9" (str.++ "/" (str.++ "0" (str.++ "2" (str.++ "/" (str.++ "7" (str.++ "6" (str.++ "0" (str.++ "0" (str.++ "|" (str.++ ";" ""))))))))))))))

(define-fun Witness2 () String (str.++ ")" (str.++ "2" (str.++ "4" (str.++ "/" (str.++ "0" (str.++ "5" (str.++ "/" (str.++ "2" (str.++ "," (str.++ "8" (str.++ "9" ""))))))))))))

(assert (= regexA (re.union (re.++ (re.union (re.++ (re.range "0" "0") (re.range "1" "9"))(re.union (re.++ (re.range "1" "2") (re.range "0" "9")) (re.++ (re.range "3" "3") (re.range "0" "1"))))(re.++ (re.range "/" "/")(re.++ (re.union (re.++ (re.range "0" "0") (re.union (re.range "1" "1")(re.union (re.range "3" "3")(re.union (re.range "5" "5") (re.range "7" "8")))))(re.union (str.to_re (str.++ "1" (str.++ "0" ""))) (str.to_re (str.++ "1" (str.++ "2" "")))))(re.++ (re.range "/" "/") (re.++ (re.range "1" "2")(re.++ (re.union (re.range "," ",")(re.union (re.range "0" "0") (re.range "9" "9")))(re.++ (re.range "0" "9") (re.range "0" "9"))))))))(re.union (re.++ (re.union (re.++ (re.range "0" "0") (re.range "1" "9"))(re.union (re.++ (re.range "1" "2") (re.range "0" "9")) (str.to_re (str.++ "3" (str.++ "0" "")))))(re.++ (re.range "/" "/")(re.++ (re.union (re.++ (re.range "0" "0") (re.union (re.range "4" "4")(re.union (re.range "6" "6") (re.range "9" "9")))) (str.to_re (str.++ "1" (str.++ "1" ""))))(re.++ (re.range "/" "/") (re.++ (re.range "1" "2")(re.++ (re.union (re.range "," ",")(re.union (re.range "0" "0") (re.range "9" "9")))(re.++ (re.range "0" "9") (re.range "0" "9"))))))))(re.union (re.++ (re.union (re.++ (re.range "0" "0") (re.range "1" "9"))(re.union (re.++ (re.range "1" "1") (re.range "0" "9")) (re.++ (re.range "2" "2") (re.range "0" "8"))))(re.++ (re.range "/" "/")(re.++ (str.to_re (str.++ "0" (str.++ "2" "")))(re.++ (re.range "/" "/") (re.++ (re.range "1" "2")(re.++ (re.union (re.range "," ",")(re.union (re.range "0" "0") (re.range "9" "9")))(re.++ (re.range "0" "9") (re.range "0" "9"))))))))(re.union (re.++ (str.to_re (str.++ "2" (str.++ "9" "")))(re.++ (re.range "-" "/")(re.++ (str.to_re (str.++ "0" (str.++ "2" "")))(re.++ (re.range "/" "/") (re.++ (re.union (re.range "0" "0")(re.union (re.range "2" "2")(re.union (re.range "4" "4")(re.union (re.range "6" "6") (re.range "8" "8")))))(re.++ (re.union (re.range "0" "0")(re.union (re.range "4" "4") (re.range "8" "8"))) (str.to_re (str.++ "0" (str.++ "0" "")))))))))(re.union (re.++ (str.to_re (str.++ "2" (str.++ "9" "")))(re.++ (re.range "/" "/")(re.++ (str.to_re (str.++ "0" (str.++ "2" "")))(re.++ (re.range "/" "/") (re.++ (re.union (re.range "1" "1")(re.union (re.range "3" "3")(re.union (re.range "5" "5")(re.union (re.range "7" "7") (re.range "9" "9")))))(re.++ (re.union (re.range "2" "2") (re.range "6" "6")) (str.to_re (str.++ "0" (str.++ "0" "")))))))))(re.union (re.++ (str.to_re (str.++ "2" (str.++ "9" "")))(re.++ (re.range "/" "/")(re.++ (str.to_re (str.++ "0" (str.++ "2" "")))(re.++ (re.range "/" "/") (re.++ (re.range "0" "9")(re.++ (re.range "0" "9")(re.++ (re.range "0" "0") (re.union (re.range "4" "4") (re.range "8" "8")))))))))(re.union (re.++ (str.to_re (str.++ "2" (str.++ "9" "")))(re.++ (re.range "/" "/")(re.++ (str.to_re (str.++ "0" (str.++ "2" "")))(re.++ (re.range "/" "/") (re.++ (re.range "0" "9")(re.++ (re.range "0" "9")(re.++ (re.union (re.range "2" "2")(re.union (re.range "4" "4")(re.union (re.range "6" "6") (re.range "8" "8")))) (re.union (re.range "0" "0")(re.union (re.range "4" "4") (re.range "8" "8")))))))))) (re.++ (str.to_re (str.++ "2" (str.++ "9" "")))(re.++ (re.range "/" "/")(re.++ (str.to_re (str.++ "0" (str.++ "2" "")))(re.++ (re.range "/" "/") (re.++ (re.range "0" "9")(re.++ (re.range "0" "9")(re.++ (re.union (re.range "1" "1")(re.union (re.range "3" "3")(re.union (re.range "5" "5")(re.union (re.range "7" "7") (re.range "9" "9"))))) (re.union (re.range "2" "2") (re.range "6" "6"))))))))))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "E" (str.++ "0" (str.++ "W" (str.++ " " (str.++ "6" (str.++ "Z" (str.++ "S" (str.++ ":" (str.++ "\u{cf}" (str.++ "\u{af}" (str.++ "\u{d7}" (str.++ "\u{c5}" "")))))))))))))

(define-fun Witness2 () String (str.++ "\u{fd}" (str.++ "N" (str.++ "E" (str.++ "C" (str.++ "8" (str.++ "P" (str.++ " " (str.++ "9" (str.++ "L" (str.++ "S" (str.++ "\u{c1}" (str.++ "r" "")))))))))))))

(assert (= regexA (re.++ (re.union (re.++ (re.union (re.union (re.range "B" "B")(re.union (re.range "E" "E")(re.union (re.range "G" "G")(re.union (re.range "L" "N") (re.range "S" "S")))))(re.union (re.++ (re.range "A" "A") (re.union (re.range "B" "B") (re.range "L" "L")))(re.union (re.++ (re.range "B" "B") (re.union (re.range "A" "B")(re.union (re.range "D" "D")(re.union (re.range "H" "H")(re.union (re.range "L" "L")(re.union (re.range "N" "N") (re.range "R" "T")))))))(re.union (re.++ (re.range "C" "C") (re.union (re.range "A" "B")(re.union (re.range "F" "F")(re.union (re.range "H" "H")(re.union (re.range "M" "M")(re.union (re.range "O" "O")(re.union (re.range "R" "R")(re.union (re.range "T" "T") (re.range "V" "W")))))))))(re.union (re.++ (re.range "D" "D") (re.union (re.range "A" "A")(re.union (re.range "D" "E")(re.union (re.range "G" "H")(re.union (re.range "L" "L")(re.union (re.range "N" "N")(re.union (re.range "T" "T") (re.range "Y" "Y"))))))))(re.union (re.++ (re.range "E" "E") (re.union (re.range "H" "H")(re.union (re.range "N" "N") (re.range "X" "X"))))(re.union (re.++ (re.range "F" "F") (re.union (re.range "K" "K") (re.range "Y" "Y")))(re.union (re.++ (re.range "G" "G") (re.union (re.range "L" "L")(re.union (re.range "U" "U") (re.range "Y" "Y"))))(re.union (re.++ (re.range "H" "H") (re.union (re.range "A" "A")(re.union (re.range "D" "D")(re.union (re.range "G" "G")(re.union (re.range "P" "P")(re.union (re.range "R" "S")(re.union (re.range "U" "U") (re.range "X" "X"))))))))(re.union (re.++ (re.range "I" "I") (re.union (re.range "G" "G")(re.union (re.range "M" "M")(re.union (re.range "P" "P") (re.range "V" "V")))))(re.union (str.to_re (str.++ "J" (str.++ "E" "")))(re.union (re.++ (re.range "K" "K") (re.union (re.range "A" "A")(re.union (re.range "T" "T")(re.union (re.range "W" "W") (re.range "Y" "Y")))))(re.union (re.++ (re.range "L" "L") (re.union (re.range "A" "A")(re.union (re.range "D" "E")(re.union (re.range "L" "L")(re.union (re.range "N" "N")(re.union (re.range "S" "S") (re.range "U" "U")))))))(re.union (re.++ (re.range "M" "M") (re.union (re.range "E" "E") (re.range "K" "L")))(re.union (re.++ (re.range "N" "N") (re.union (re.range "E" "E")(re.union (re.range "G" "G")(re.union (re.range "N" "N")(re.union (re.range "P" "P")(re.union (re.range "R" "R") (re.range "W" "W")))))))(re.union (re.++ (re.range "O" "O") (re.union (re.range "L" "L") (re.range "X" "X")))(re.union (re.++ (re.range "P" "P") (re.union (re.range "A" "A")(re.union (re.range "E" "E")(re.union (re.range "H" "H")(re.union (re.range "L" "L")(re.union (re.range "O" "O") (re.range "R" "R")))))))(re.union (re.++ (re.range "R" "R") (re.union (re.range "G" "H") (re.range "M" "M")))(re.union (re.++ (re.range "S" "S") (re.union (re.range "A" "A")(re.union (re.range "E" "E")(re.union (re.range "G" "G")(re.union (re.range "K" "P")(re.union (re.range "R" "T")(re.union (re.range "W" "W") (re.range "Y" "Y"))))))))(re.union (re.++ (re.range "T" "T") (re.union (re.range "A" "A")(re.union (re.range "D" "D")(re.union (re.range "F" "F")(re.union (re.range "N" "N")(re.union (re.range "Q" "S") (re.range "W" "W")))))))(re.union (str.to_re (str.++ "U" (str.++ "B" "")))(re.union (re.++ (re.range "W" "W") (re.union (re.range "A" "A")(re.union (re.range "D" "D")(re.union (re.range "F" "F")(re.union (re.range "N" "N")(re.union (re.range "R" "S") (re.range "V" "V")))))))(re.union (str.to_re (str.++ "Y" (str.++ "O" ""))) (str.to_re (str.++ "Z" (str.++ "E" "")))))))))))))))))))))))))) (re.++ (re.range "0" "9") (re.opt (re.range "0" "9"))))(re.union (re.++ (re.range "E" "E") (re.++ (re.range "0" "9") (re.range "W" "W")))(re.union (re.++ (str.to_re (str.++ "E" (str.++ "C" ""))) (re.++ (re.range "0" "9") (re.union (re.range "0" "0")(re.union (re.range "A" "A")(re.union (re.range "M" "N")(re.union (re.range "P" "P")(re.union (re.range "R" "R")(re.union (re.range "V" "V") (re.range "Y" "Y")))))))))(re.union (re.++ (re.range "N" "N") (re.++ (re.range "0" "9") (re.range "P" "P")))(re.union (re.++ (str.to_re (str.++ "N" (str.++ "W" ""))) (re.++ (re.range "0" "9") (re.range "W" "W")))(re.union (re.++ (str.to_re (str.++ "S" (str.++ "E" ""))) (re.++ (re.range "0" "9") (re.range "P" "P")))(re.union (re.++ (str.to_re (str.++ "S" (str.++ "W" ""))) (re.++ (re.range "0" "9") (re.union (re.range "A" "A")(re.union (re.range "E" "E")(re.union (re.range "H" "H")(re.union (re.range "P" "P") (re.range "V" "Y")))))))(re.union (re.++ (re.range "W" "W") (re.++ (re.range "1" "1") (re.union (re.range "0" "4")(re.union (re.range "A" "D")(re.union (re.range "F" "H")(re.union (re.range "J" "K")(re.union (re.range "S" "U") (re.range "W" "W"))))))))(re.union (re.++ (re.range "W" "W") (re.range "2" "9")) (re.++ (str.to_re (str.++ "W" (str.++ "C" ""))) (re.++ (re.range "1" "2") (re.union (re.range "A" "B")(re.union (re.range "E" "E")(re.union (re.range "H" "H")(re.union (re.range "N" "N")(re.union (re.range "R" "R")(re.union (re.range "V" "V") (re.range "X" "X"))))))))))))))))))(re.++ (re.range " " " ") (re.++ (re.range "0" "9") ((_ re.loop 2 2) (re.union (re.range "A" "B")(re.union (re.range "D" "H")(re.union (re.range "J" "J")(re.union (re.range "L" "L")(re.union (re.range "N" "N")(re.union (re.range "P" "U") (re.range "W" "Z")))))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "'" (str.++ "\u{5c}" (str.++ "\u{d2}" (str.++ "'" (str.++ "b" (str.++ "\u{7f}" "")))))))

(define-fun Witness2 () String (str.++ "'" (str.++ "\u{06}" (str.++ "\u{5c}" (str.++ "v" (str.++ "'" (str.++ "I" (str.++ "\u{87}" ""))))))))

(assert (= regexA (re.++ (re.range "'" "'")(re.++ (re.* (re.union (re.++ (re.range "\u{5c}" "\u{5c}") (re.union (re.range "\u{00}" "\u{09}") (re.range "\u{0b}" "\u{ff}"))) (re.union (re.range "\u{00}" "&")(re.union (re.range "(" "[") (re.range "]" "\u{ff}"))))) (re.range "'" "'")))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "v" (str.++ "f" (str.++ "v" (str.++ "z" (str.++ "x" (str.++ "S" (str.++ "b" (str.++ "-" (str.++ "u" ""))))))))))

(define-fun Witness2 () String (str.++ "C" (str.++ "E" (str.++ "r" (str.++ "Q" (str.++ "Z" (str.++ "y" (str.++ "7" (str.++ "-" (str.++ "\u{fe}" ""))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ ((_ re.loop 5 5) (re.union (re.range "A" "Z") (re.range "a" "z"))) ((_ re.loop 3 12) (re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "." (str.++ "u" (str.++ "\u{06}" (str.++ "C" "")))))

(define-fun Witness2 () String (str.++ "\u{12}" (str.++ "\u{12}" (str.++ "C" (str.++ "3" "")))))

(assert (= regexA (re.++ (re.union (re.range "C" "C") (re.range "c" "c")) ((_ re.loop 0 7) (re.range "0" "9")))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "\u{ae}" (str.++ "3" (str.++ "2" (str.++ "3" (str.++ "\u{e5}" ""))))))

(define-fun Witness2 () String (str.++ "7" (str.++ "1" (str.++ "4" (str.++ "\u{c6}" (str.++ "\u{b9}" (str.++ "y" "")))))))

(assert (= regexA (re.union (str.to_re (str.++ "7" (str.++ "1" (str.++ "4" ""))))(re.union (str.to_re (str.++ "7" (str.++ "6" (str.++ "0" ""))))(re.union (str.to_re (str.++ "9" (str.++ "4" (str.++ "9" ""))))(re.union (str.to_re (str.++ "6" (str.++ "1" (str.++ "9" ""))))(re.union (str.to_re (str.++ "9" (str.++ "0" (str.++ "9" ""))))(re.union (str.to_re (str.++ "9" (str.++ "5" (str.++ "1" ""))))(re.union (str.to_re (str.++ "8" (str.++ "1" (str.++ "8" ""))))(re.union (str.to_re (str.++ "3" (str.++ "1" (str.++ "0" ""))))(re.union (str.to_re (str.++ "3" (str.++ "2" (str.++ "3" ""))))(re.union (str.to_re (str.++ "2" (str.++ "1" (str.++ "3" ""))))(re.union (str.to_re (str.++ "3" (str.++ "2" (str.++ "3" ""))))(re.union (str.to_re (str.++ "5" (str.++ "6" (str.++ "2" "")))) (re.++ (str.to_re (str.++ "6" (str.++ "2" (str.++ "6" (str.++ "-" "")))))(re.++ ((_ re.loop 3 3) (re.range "0" "9"))(re.++ (re.range "-" "-") ((_ re.loop 4 4) (re.range "0" "9")))))))))))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "\u{c3}" (str.++ "w" (str.++ "\u{1d}" (str.++ "\u{c0}" (str.++ "C" (str.++ "Y" (str.++ "." (str.++ "-" (str.++ "." (str.++ "?" (str.++ "#" (str.++ "K" (str.++ "N" (str.++ "g" (str.++ "\u{a1}" ""))))))))))))))))

(define-fun Witness2 () String (str.++ "h" (str.++ "t" (str.++ "t" (str.++ "p" (str.++ ":" (str.++ "/" (str.++ "/" (str.++ "8" (str.++ "." (str.++ "&" (str.++ "," (str.++ "\u{ce}" (str.++ "\u{87}" (str.++ "\u{e1}" (str.++ "\u{b7}" (str.++ "c" "")))))))))))))))))

(assert (= regexA (re.++ (re.union (re.++ (str.to_re (str.++ "h" (str.++ "t" (str.++ "t" (str.++ "p" "")))))(re.++ (re.opt (re.range "s" "s")) (str.to_re (str.++ ":" (str.++ "/" (str.++ "/" "")))))) (re.++ (re.+ (re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z"))))) (re.range "." ".")))(re.++ (re.+ (re.union (re.range "-" "-")(re.union (re.range "/" "9")(re.union (re.range "A" "Z")(re.union (re.range "a" "z") (re.range "~" "~"))))))(re.++ (re.range "." ".")(re.++ (re.+ (re.union (re.range "&" "&")(re.union (re.range "," "9")(re.union (re.range ";" ";")(re.union (re.range "?" "?")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z") (re.range "~" "~"))))))))) (re.union (re.range "\u{00}" "\u{08}")(re.union (re.range "\u{0e}" "\u{1f}")(re.union (re.range "!" "+")(re.union (re.range "-" "-")(re.union (re.range "/" ";")(re.union (re.range "=" "\u{84}")(re.union (re.range "\u{86}" "\u{9f}") (re.range "\u{a1}" "\u{ff}"))))))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "j" (str.++ "g" (str.++ "o" (str.++ "p" (str.++ "h" (str.++ "e" (str.++ "r" (str.++ ":" (str.++ "\u{5c}" (str.++ "\u{5c}" (str.++ "\u{1b}" (str.++ "y" (str.++ "\u{00}" (str.++ "\u{e7}" "")))))))))))))))

(define-fun Witness2 () String (str.++ "t" (str.++ "e" (str.++ "l" (str.++ "n" (str.++ "e" (str.++ "t" (str.++ ":" (str.++ "\u{5c}" (str.++ "\u{5c}" (str.++ "\u{dd}" (str.++ "," (str.++ "P" (str.++ ")" (str.++ "\u{b5}" (str.++ "\u{e3}" (str.++ "\u{f1}" (str.++ "\u{1f}" (str.++ "m" (str.++ "9" ""))))))))))))))))))))

(assert (= regexA (re.++ (re.union (re.++ (str.to_re (str.++ "h" (str.++ "t" (str.++ "t" (str.++ "p" ""))))) (re.opt (re.range "s" "s")))(re.union (str.to_re (str.++ "f" (str.++ "t" (str.++ "p" ""))))(re.union (str.to_re (str.++ "g" (str.++ "o" (str.++ "p" (str.++ "h" (str.++ "e" (str.++ "r" "")))))))(re.union (str.to_re (str.++ "t" (str.++ "e" (str.++ "l" (str.++ "n" (str.++ "e" (str.++ "t" "")))))))(re.union (str.to_re (str.++ "f" (str.++ "i" (str.++ "l" (str.++ "e" "")))))(re.union (str.to_re (str.++ "n" (str.++ "o" (str.++ "t" (str.++ "e" (str.++ "s" "")))))) (str.to_re (str.++ "m" (str.++ "s" (str.++ "-" (str.++ "h" (str.++ "e" (str.++ "l" (str.++ "p" ""))))))))))))))(re.++ (re.range ":" ":")(re.++ (re.+ (re.union (str.to_re (str.++ "/" (str.++ "/" ""))) (str.to_re (str.++ "\u{5c}" (str.++ "\u{5c}" ""))))) (re.* (re.union (re.range "#" "&")(re.union (re.range "(" ")")(re.union (re.range "+" "=")(re.union (re.range "@" "Z")(re.union (re.range "\u{5c}" "\u{5c}")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "~" "~")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "0" (str.++ "7" (str.++ "8" (str.++ "\u{a0}" (str.++ "8" (str.++ "8" (str.++ "\u{85}" (str.++ "8" (str.++ "4" (str.++ "8" (str.++ "9" (str.++ "8" (str.++ "9" (str.++ "K" (str.++ "^" ""))))))))))))))))

(define-fun Witness2 () String (str.++ "\u{86}" (str.++ "0" (str.++ "7" (str.++ "9" (str.++ "\u{85}" (str.++ "8" (str.++ "1" (str.++ "2" (str.++ "9" (str.++ "1" (str.++ "7" (str.++ "5" (str.++ "1" (str.++ "\u{da}" (str.++ "g" ""))))))))))))))))

(assert (= regexA (re.++ (re.union (str.to_re (str.++ "0" (str.++ "7" (str.++ "7" ""))))(re.union (str.to_re (str.++ "0" (str.++ "7" (str.++ "8" "")))) (str.to_re (str.++ "0" (str.++ "7" (str.++ "9" ""))))))(re.++ (re.opt (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ ((_ re.loop 2 2) (re.range "0" "9"))(re.++ (re.opt (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))) ((_ re.loop 6 6) (re.range "0" "9"))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "B" (str.++ "0" (str.++ "x" (str.++ "d" (str.++ "A" (str.++ "C" (str.++ "8" (str.++ "F" (str.++ "0" (str.++ "9" (str.++ "C" (str.++ "4" (str.++ "3" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "x" (str.++ "8" (str.++ "F" (str.++ "8" (str.++ "c" (str.++ "-" (str.++ "9" (str.++ "A" (str.++ "a" (str.++ "f" (str.++ "a" (str.++ "9" (str.++ "7" (str.++ "9" (str.++ "4" (str.++ "1" (str.++ "4" (str.++ "9" (str.++ "9" (str.++ "a" (str.++ "F" (str.++ "5" "")))))))))))))))))))))))))))))))))))))))

(define-fun Witness2 () String (str.++ "(" (str.++ "9" (str.++ "e" (str.++ "9" (str.++ "8" (str.++ "D" (str.++ "A" (str.++ "9" (str.++ "B" (str.++ "-" (str.++ "0" (str.++ "4" (str.++ "a" (str.++ "c" (str.++ "C" (str.++ "9" (str.++ "9" (str.++ "9" (str.++ "8" (str.++ "f" (str.++ "9" (str.++ "f" (str.++ "-" (str.++ "a" (str.++ "f" (str.++ "b" (str.++ "8" (str.++ "8" (str.++ "2" (str.++ "b" (str.++ "F" (str.++ "9" (str.++ "6" (str.++ "a" (str.++ "f" ""))))))))))))))))))))))))))))))))))))

(assert (= regexA (re.++ (re.opt (re.union (re.range "(" "(") (re.range "{" "{")))(re.++ (re.opt (str.to_re (str.++ "0" (str.++ "x" ""))))(re.++ ((_ re.loop 8 8) (re.union (re.range "0" "9")(re.union (re.range "A" "F") (re.range "a" "f"))))(re.++ ((_ re.loop 2 2) (re.++ (re.opt (re.range "," "-"))(re.++ (re.opt (str.to_re (str.++ "0" (str.++ "x" "")))) ((_ re.loop 4 4) (re.union (re.range "0" "9")(re.union (re.range "A" "F") (re.range "a" "f")))))))(re.++ (re.union (re.++ (re.opt (re.range "-" "-"))(re.++ ((_ re.loop 4 4) (re.union (re.range "0" "9")(re.union (re.range "A" "F") (re.range "a" "f"))))(re.++ (re.opt (re.range "-" "-")) ((_ re.loop 12 12) (re.union (re.range "0" "9")(re.union (re.range "A" "F") (re.range "a" "f"))))))) (re.++ (str.to_re (str.++ "," (str.++ "{" (str.++ "0" (str.++ "x" "")))))(re.++ ((_ re.loop 2 2) (re.union (re.range "0" "9")(re.union (re.range "A" "F") (re.range "a" "f"))))(re.++ ((_ re.loop 7 7) (re.++ (str.to_re (str.++ "," (str.++ "0" (str.++ "x" "")))) ((_ re.loop 2 2) (re.union (re.range "0" "9")(re.union (re.range "A" "F") (re.range "a" "f")))))) (re.range "}" "}"))))) (re.opt (re.union (re.range ")" ")") (re.range "}" "}"))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "D" (str.++ "E" (str.++ "c" (str.++ "E" (str.++ "m" (str.++ "B" (str.++ "e" (str.++ "r" "")))))))))

(define-fun Witness2 () String (str.++ "\u{9d}" (str.++ "(" (str.++ "\u{d9}" (str.++ "s" (str.++ "E" (str.++ "p" (str.++ "\u{1e}" (str.++ "\u{7f}" (str.++ "\u{ac}" (str.++ "\u{f9}" "")))))))))))

(assert (= regexA (re.union (re.++ (re.range "j" "j") (re.union (re.++ (str.to_re (str.++ "a" (str.++ "n" ""))) (re.opt (str.to_re (str.++ "u" (str.++ "a" (str.++ "r" (str.++ "y" ""))))))) (re.++ (re.range "u" "u") (re.union (re.++ (re.range "n" "n") (re.opt (re.range "e" "e"))) (re.++ (re.range "l" "l") (re.opt (re.range "y" "y")))))))(re.union (re.++ (re.range "a" "a") (re.union (re.++ (str.to_re (str.++ "p" (str.++ "r" ""))) (re.opt (str.to_re (str.++ "i" (str.++ "l" ""))))) (re.++ (str.to_re (str.++ "u" (str.++ "g" ""))) (re.opt (str.to_re (str.++ "u" (str.++ "s" (str.++ "t" ""))))))))(re.union (re.++ (str.to_re (str.++ "m" (str.++ "a" ""))) (re.union (re.range "y" "y") (re.++ (re.range "r" "r") (re.opt (str.to_re (str.++ "c" (str.++ "h" "")))))))(re.union (re.++ (re.union (str.to_re (str.++ "n" (str.++ "o" (str.++ "v" "")))) (str.to_re (str.++ "d" (str.++ "e" (str.++ "c" ""))))) (re.opt (str.to_re (str.++ "e" (str.++ "m" (str.++ "b" (str.++ "e" (str.++ "r" ""))))))))(re.union (re.++ (str.to_re (str.++ "f" (str.++ "e" (str.++ "b" "")))) (re.opt (str.to_re (str.++ "r" (str.++ "u" (str.++ "a" (str.++ "r" (str.++ "y" ""))))))))(re.union (re.++ (str.to_re (str.++ "s" (str.++ "e" (str.++ "p" "")))) (re.opt (str.to_re (str.++ "t" (str.++ "e" (str.++ "m" (str.++ "b" (str.++ "e" (str.++ "r" ""))))))))) (re.++ (str.to_re (str.++ "o" (str.++ "c" (str.++ "t" "")))) (re.opt (str.to_re (str.++ "o" (str.++ "b" (str.++ "e" (str.++ "r" "")))))))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "\u{cf}" (str.++ "2" (str.++ "0" (str.++ "7" (str.++ "8" (str.++ "\u{00}" "")))))))

(define-fun Witness2 () String (str.++ "t" (str.++ "\u{f5}" (str.++ "1" (str.++ "," (str.++ "8" (str.++ "9" (str.++ "\u{8b}" (str.++ "\u{8d}" (str.++ "\u{ea}" (str.++ "\u{17}" (str.++ "\u{94}" (str.++ "\u{03}" "")))))))))))))

(assert (= regexA (re.++ (re.union (re.++ (re.range "1" "1") (re.union (re.range "," ",") (re.range "8" "9"))) (str.to_re (str.++ "2" (str.++ "0" "")))) ((_ re.loop 2 2) (re.range "0" "9")))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "/" (str.++ "*" (str.++ "\u{f2}" (str.++ "\u{d0}" (str.++ "/" ""))))))

(define-fun Witness2 () String (str.++ "\u{8a}" (str.++ "/" (str.++ "*" (str.++ "\u{7f}" (str.++ "\u{b7}" (str.++ "\u{e3}" (str.++ "\u{d8}" (str.++ "\u{cb}" (str.++ "\u{9c}" (str.++ "/" (str.++ "\u{dc}" (str.++ "\u{e1}" (str.++ "\u{c2}" (str.++ "\u{c7}" (str.++ "\u{e0}" (str.++ "n" (str.++ "K" (str.++ "\u{7f}" (str.++ "\u{14}" ""))))))))))))))))))))

(assert (= regexA (re.++ (str.to_re (str.++ "/" (str.++ "*" "")))(re.++ (re.+ (re.union (re.range "\u{00}" ".") (re.range "0" "\u{ff}"))) (re.range "/" "/")))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "\u{13}" (str.++ "8" (str.++ "*" ""))))

(define-fun Witness2 () String (str.++ "\u{ac}" (str.++ "!" (str.++ "@" ""))))

(assert (= regexA (re.union (re.union (re.range "A" "Z") (re.range "a" "z"))(re.union (re.union (re.range "!" "'")(re.union (re.range "*" "/")(re.union (re.range ":" "@")(re.union (re.range "[" "]") (re.range "{" "}")))))(re.union (re.range "0" "9") (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "(" ")")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "S" (str.++ "?" (str.++ "\u{84}" (str.++ "=" (str.++ "L" ""))))))

(define-fun Witness2 () String (str.++ "\u{15}" (str.++ "(" (str.++ "?" (str.++ "f" (str.++ "=" (str.++ "\u{d3}" (str.++ "\u{80}" ""))))))))

(assert (= regexA (re.++ (re.union (re.range "&" "&") (re.range "?" "?"))(re.++ (re.+ (re.union (re.range "\u{00}" "%")(re.union (re.range "'" "<") (re.range ">" "\u{ff}"))))(re.++ (re.range "=" "=") (re.+ (re.union (re.range "\u{00}" "%")(re.union (re.range "'" "<") (re.range ">" "\u{ff}")))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "S" (str.++ " " (str.++ "9" (str.++ "8" (str.++ "\u{09}" (str.++ "Z" (str.++ "X" (str.++ "G" "")))))))))

(define-fun Witness2 () String (str.++ "y" (str.++ "Z" (str.++ " " (str.++ "2" (str.++ "T" (str.++ "A" (str.++ "Y" ""))))))))

(assert (= regexA (re.union (re.++ (str.to_re "") (re.++ ((_ re.loop 3 3) (re.range "A" "Z"))(re.++ (re.opt (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (re.union ((_ re.loop 3 3) (re.range "0" "9"))(re.union ((_ re.loop 2 2) (re.range "0" "9")) (re.range "d" "d")))(re.++ (re.opt (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))) (re.range "A" "Z")))))) (re.++ (re.++ (re.range "A" "Z")(re.++ (re.opt (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (re.union ((_ re.loop 3 3) (re.range "0" "9"))(re.union ((_ re.loop 2 2) (re.range "0" "9")) (re.range "0" "9")))(re.++ (re.opt (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))) ((_ re.loop 3 3) (re.range "A" "Z")))))) (str.to_re "")))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "\u{11}" (str.++ "<" (str.++ "i" (str.++ "m" (str.++ "g" (str.++ " " (str.++ "b" (str.++ "o" (str.++ "r" (str.++ "d" (str.++ "e" (str.++ "r" (str.++ "=" (str.++ ":" (str.++ "q" (str.++ ":" (str.++ "W" (str.++ "b" (str.++ "o" (str.++ "r" (str.++ "d" (str.++ "e" (str.++ "r" (str.++ "=" (str.++ ":" (str.++ "q" (str.++ ":" (str.++ "W" (str.++ "b" (str.++ "o" (str.++ "r" (str.++ "d" (str.++ "e" (str.++ "r" (str.++ "=" (str.++ ":" (str.++ "q" (str.++ ":" (str.++ "W" (str.++ "/" (str.++ ">" ""))))))))))))))))))))))))))))))))))))))))))

(define-fun Witness2 () String (str.++ "\u{e3}" (str.++ "<" (str.++ "i" (str.++ "m" (str.++ "g" (str.++ " " (str.++ "/" (str.++ ">" (str.++ "j" ""))))))))))

(assert (= regexA (re.++ (str.to_re (str.++ "<" (str.++ "i" (str.++ "m" (str.++ "g" (str.++ " " ""))))))(re.++ (re.* (re.++ (re.union (str.to_re (str.++ "s" (str.++ "r" (str.++ "c" ""))))(re.union (str.to_re (str.++ "h" (str.++ "e" (str.++ "i" (str.++ "g" (str.++ "h" (str.++ "t" "")))))))(re.union (str.to_re (str.++ "w" (str.++ "i" (str.++ "d" (str.++ "t" (str.++ "h" "")))))) (str.to_re (str.++ "b" (str.++ "o" (str.++ "r" (str.++ "d" (str.++ "e" (str.++ "r" ""))))))))))(re.++ (str.to_re (str.++ "=" (str.++ ":" (str.++ "q" (str.++ ":" (str.++ "W" "")))))) (re.* (re.range "h" "h"))))) (str.to_re (str.++ "/" (str.++ ">" "")))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "2" (str.++ "1" (str.++ "0" (str.++ "8" (str.++ "3" (str.++ "0" (str.++ "3" (str.++ "0" (str.++ "8" (str.++ "0" (str.++ "2" (str.++ "5" (str.++ "8" ""))))))))))))))

(define-fun Witness2 () String (str.++ "*" (str.++ "Z" (str.++ "5" (str.++ "9" (str.++ "1" (str.++ "1" (str.++ "1" (str.++ "1" (str.++ "0" (str.++ "8" (str.++ "4" (str.++ "9" (str.++ "1" (str.++ "9" (str.++ "2" (str.++ "*" "")))))))))))))))))

(assert (= regexA (re.++ (re.union (re.++ ((_ re.loop 2 2) (re.range "0" "9")) (re.union (re.++ (re.union (re.++ (re.range "0" "0") (re.union (re.range "1" "1")(re.union (re.range "3" "3")(re.union (re.range "5" "5") (re.range "7" "8"))))) (re.++ (re.range "1" "1") (re.union (re.range "0" "0") (re.range "2" "2")))) (re.union (re.++ (re.range "0" "0") (re.range "1" "9"))(re.union (re.++ (re.range "1" "2") (re.range "0" "9")) (re.++ (re.range "3" "3") (re.range "0" "1")))))(re.union (re.++ (re.union (re.++ (re.range "0" "0") (re.union (re.range "1" "1") (re.range "3" "9"))) (re.++ (re.range "1" "1") (re.range "0" "2"))) (re.union (re.++ (re.range "0" "0") (re.range "1" "9"))(re.union (re.++ (re.range "1" "2") (re.range "0" "9")) (str.to_re (str.++ "3" (str.++ "0" "")))))) (re.++ (str.to_re (str.++ "0" (str.++ "2" ""))) (re.union (re.++ (re.range "0" "0") (re.range "1" "9"))(re.union (re.++ (re.range "1" "1") (re.range "0" "9")) (re.++ (re.range "2" "2") (re.range "0" "8")))))))) (re.++ (re.union (re.++ (re.union (re.range "0" "0")(re.union (re.range "2" "2")(re.union (re.range "4" "4")(re.union (re.range "6" "6") (re.range "8" "8"))))) (re.union (re.range "0" "0")(re.union (re.range "4" "4") (re.range "8" "8")))) (re.++ (re.union (re.range "1" "1")(re.union (re.range "3" "3")(re.union (re.range "5" "5")(re.union (re.range "7" "7") (re.range "9" "9"))))) (re.union (re.range "2" "2") (re.range "6" "6")))) (str.to_re (str.++ "0" (str.++ "2" (str.++ "2" (str.++ "9" ""))))))) (re.union (re.++ (re.union (re.range " " " ") (re.range "-" "-"))(re.++ ((_ re.loop 4 4) (re.range "0" "9"))(re.++ (re.union (re.range " " " ") (re.range "-" "-")) ((_ re.loop 3 3) (re.range "0" "9"))))) ((_ re.loop 7 7) (re.range "0" "9"))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "0" (str.++ "7" (str.++ "4" (str.++ "3" (str.++ "8" (str.++ "8" (str.++ "9" (str.++ "3" (str.++ "8" (str.++ "2" (str.++ "\u{01}" ""))))))))))))

(define-fun Witness2 () String (str.++ "0" (str.++ "8" (str.++ "2" (str.++ "5" (str.++ "5" (str.++ "5" (str.++ "9" (str.++ "2" (str.++ "8" (str.++ "9" (str.++ "\u{d3}" (str.++ "\u{da}" (str.++ "\u{df}" (str.++ "|" (str.++ "\u{aa}" (str.++ ")" "")))))))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.range "0" "0")(re.++ (re.range "7" "8")(re.++ (re.union (re.range "2" "4") (re.range "7" "7")) ((_ re.loop 7 7) (re.range "0" "9"))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "\u{ed}" (str.++ "i" (str.++ "\u{03}" (str.++ "q" (str.++ "\u{f6}" (str.++ "I" (str.++ "I" (str.++ " " (str.++ "R" (str.++ "m" (str.++ "." (str.++ "\u{a0}" (str.++ "\u{a0}" (str.++ "0" (str.++ "4" (str.++ ":" (str.++ "8" (str.++ "-" (str.++ "," ""))))))))))))))))))))

(define-fun Witness2 () String (str.++ "I" (str.++ "I" (str.++ "v" (str.++ "\u{e8}" (str.++ "\u{b5}" (str.++ "Z" (str.++ "." (str.++ " " (str.++ "9" (str.++ "9" (str.++ "8" (str.++ "2" (str.++ ":" (str.++ "9" (str.++ "-" (str.++ "," (str.++ "," (str.++ "\u{05}" (str.++ "\u{be}" ""))))))))))))))))))))

(assert (= regexA (re.++ (re.opt (re.union (re.range "0" "9") ((_ re.loop 1 3) (re.range "I" "I"))))(re.++ (re.opt (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (re.++ ((_ re.loop 2 2) (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))) (re.* (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))))(re.++ (re.opt (re.range "." "."))(re.++ (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (re.+ (re.range "0" "9"))(re.++ (re.range ":" ":")(re.++ (re.+ (re.range "0" "9"))(re.++ (re.opt (re.range "-" "-"))(re.++ (re.opt (re.range "," ","))(re.++ ((_ re.loop 0 2) (re.range "0" "9")) ((_ re.loop 0 2) (re.++ (re.range "," ",") ((_ re.loop 0 2) (re.range "0" "9")))))))))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "D" (str.++ "\u{cf}" (str.++ "P" (str.++ "a" (str.++ "s" (str.++ "s" (str.++ "w" (str.++ "o" (str.++ "r" (str.++ "d" (str.++ "=" (str.++ "~" (str.++ "t" (str.++ ";" (str.++ "=" (str.++ "6" (str.++ ";" (str.++ "\u{f3}" (str.++ "=" (str.++ ";" (str.++ "=" (str.++ ";" (str.++ "=" (str.++ "}" "")))))))))))))))))))))))))

(define-fun Witness2 () String (str.++ "\u{10}" (str.++ "P" (str.++ "a" (str.++ "s" (str.++ "s" (str.++ "w" (str.++ "o" (str.++ "r" (str.++ "d" (str.++ "=" (str.++ ";" (str.++ "=" (str.++ ";" (str.++ "=" (str.++ ";" (str.++ "5" (str.++ "2" (str.++ "=" (str.++ ";" (str.++ "=" (str.++ "D" (str.++ "-" "")))))))))))))))))))))))

(assert (= regexA (re.++ (str.to_re (str.++ "P" (str.++ "a" (str.++ "s" (str.++ "s" (str.++ "w" (str.++ "o" (str.++ "r" (str.++ "d" (str.++ "=" ""))))))))))(re.++ (re.* (re.union (re.range "\u{00}" "\u{09}") (re.range "\u{0b}" "\u{ff}")))(re.++ (re.range ";" ";")(re.++ (re.* (re.union (re.range "\u{00}" "\u{09}") (re.range "\u{0b}" "\u{ff}")))(re.++ (re.range "=" "=")(re.++ (re.* (re.union (re.range "\u{00}" "\u{09}") (re.range "\u{0b}" "\u{ff}")))(re.++ (re.range ";" ";")(re.++ (re.* (re.union (re.range "\u{00}" "\u{09}") (re.range "\u{0b}" "\u{ff}")))(re.++ (re.range "=" "=")(re.++ (re.* (re.union (re.range "\u{00}" "\u{09}") (re.range "\u{0b}" "\u{ff}")))(re.++ (re.range ";" ";")(re.++ (re.* (re.union (re.range "\u{00}" "\u{09}") (re.range "\u{0b}" "\u{ff}")))(re.++ (re.range "=" "=")(re.++ (re.* (re.union (re.range "\u{00}" "\u{09}") (re.range "\u{0b}" "\u{ff}")))(re.++ (re.range ";" ";")(re.++ (re.* (re.union (re.range "\u{00}" "\u{09}") (re.range "\u{0b}" "\u{ff}")))(re.++ (re.range "=" "=") (re.* (re.union (re.range "\u{00}" "\u{09}") (re.range "\u{0b}" "\u{ff}"))))))))))))))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String "")

(define-fun Witness2 () String (str.++ "\u{1d}" (str.++ "\u{87}" "")))

(assert (= regexA (re.* (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String "")

(define-fun Witness2 () String (str.++ "\u{a1}" (str.++ "\u{8a}" (str.++ "R" ""))))

(assert (= regexA (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{22}" "&")(re.union (re.range "(" ",")(re.union (re.range "." ".")(re.union (re.range "0" "9")(re.union (re.range ";" "?")(re.union (re.range "A" "Z")(re.union (re.range "\u{5c}" "\u{5c}")(re.union (re.range "a" "z")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "\u{0d}" (str.++ "2" (str.++ "5" (str.++ "8" (str.++ " " (str.++ "8" (str.++ "4" (str.++ "8" (str.++ "-" (str.++ "8" (str.++ "8" (str.++ "8" (str.++ "8" ""))))))))))))))

(define-fun Witness2 () String (str.++ "9" (str.++ "9" (str.++ "3" (str.++ "-" (str.++ "6" (str.++ "9" (str.++ "9" (str.++ " " (str.++ "8" (str.++ "2" (str.++ "8" (str.++ "6" "")))))))))))))

(assert (= regexA (re.++ (re.opt (re.union (re.++ (re.range "0" "1")(re.++ (re.union (re.range " " " ")(re.union (re.range "+" "+") (re.range "-" ".")))(re.++ (re.range "(" "(")(re.++ ((_ re.loop 3 3) (re.range "0" "9"))(re.++ (re.range ")" ")") (re.opt (re.union (re.range " " " ")(re.union (re.range "+" "+") (re.range "-" ".")))))))))(re.union (re.++ (re.range "0" "1")(re.++ (re.union (re.range " " " ")(re.union (re.range "+" "+") (re.range "-" ".")))(re.++ ((_ re.loop 3 3) (re.range "0" "9")) (re.union (re.range " " " ")(re.union (re.range "+" "+") (re.range "-" "."))))))(re.union (re.++ (re.range "(" "(")(re.++ ((_ re.loop 3 3) (re.range "0" "9"))(re.++ (re.range ")" ")") (re.opt (re.range " " " "))))) (re.++ ((_ re.loop 3 3) (re.range "0" "9")) (re.union (re.range " " " ") (re.range "-" ".")))))))(re.++ ((_ re.loop 3 3) (re.range "0" "9"))(re.++ (re.union (re.range " " " ") (re.range "-" ".")) ((_ re.loop 4 4) (re.range "0" "9")))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "\u{9b}" (str.++ "\u{9a}" (str.++ "9" (str.++ "2" (str.++ "8" (str.++ "," (str.++ "9" (str.++ "\u{e7}" "")))))))))

(define-fun Witness2 () String (str.++ "=" (str.++ "{" (str.++ "0" (str.++ "9" (str.++ "," ""))))))

(assert (= regexA (re.++ (re.range "0" "9") (re.+ (re.union (re.range "," ",")(re.union (re.range "." ".") (re.range "0" "9")))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "&" (str.++ "+" (str.++ "3" (str.++ "5" (str.++ "3" (str.++ "(" (str.++ "0" (str.++ ")" (str.++ "\u{85}" (str.++ "8" (str.++ "\u{a0}" (str.++ "8" (str.++ "5" (str.++ "7" (str.++ "\u{85}" (str.++ "9" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "l" (str.++ "h" (str.++ "F" (str.++ "$" (str.++ "\u{ff}" "")))))))))))))))))))))))))

(define-fun Witness2 () String (str.++ "\u{a7}" (str.++ "+" (str.++ "3" (str.++ "5" (str.++ "3" (str.++ "(" (str.++ "0" (str.++ ")" (str.++ "\u{0a}" (str.++ "5" (str.++ "\u{85}" (str.++ "0" (str.++ "8" (str.++ "1" (str.++ "\u{85}" (str.++ "9" (str.++ "9" (str.++ "8" (str.++ "9" ""))))))))))))))))))))

(assert (= regexA (re.++ (str.to_re (str.++ "+" (str.++ "3" (str.++ "5" (str.++ "3" (str.++ "(" (str.++ "0" (str.++ ")" ""))))))))(re.++ (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))(re.++ (re.range "0" "9")(re.++ (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))(re.++ ((_ re.loop 3 3) (re.range "0" "9"))(re.++ (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))) ((_ re.loop 4 4) (re.range "0" "9"))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "\u{87}" (str.++ "F" (str.++ "I" (str.++ "Q" (str.++ "Q" (str.++ "\u{1d}" "")))))))

(define-fun Witness2 () String (str.++ "B" (str.++ "I" (str.++ "Q" (str.++ "Q" (str.++ "u" (str.++ "\u{f2}" (str.++ "a" (str.++ "\u{09}" "")))))))))

(assert (= regexA (re.union (re.++ (str.to_re "")(re.++ (str.to_re (str.++ "B" (str.++ "F" (str.++ "P" (str.++ "O" "")))))(re.++ (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))) ((_ re.loop 1 4) (re.range "0" "9")))))(re.union (re.++ (str.to_re "")(re.++ (str.to_re (str.++ "G" (str.++ "I" (str.++ "R" ""))))(re.++ (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (str.to_re (str.++ "0" (str.++ "A" (str.++ "A" "")))) (str.to_re "")))))(re.union (re.union (str.to_re (str.++ "A" (str.++ "S" (str.++ "C" (str.++ "N" "")))))(re.union (str.to_re (str.++ "B" (str.++ "B" (str.++ "N" (str.++ "D" "")))))(re.union (str.to_re (str.++ "B" (str.++ "I" (str.++ "Q" (str.++ "Q" "")))))(re.union (str.to_re (str.++ "F" (str.++ "I" (str.++ "Q" (str.++ "Q" "")))))(re.union (str.to_re (str.++ "P" (str.++ "C" (str.++ "R" (str.++ "N" "")))))(re.union (str.to_re (str.++ "S" (str.++ "I" (str.++ "Q" (str.++ "Q" "")))))(re.union (str.to_re (str.++ "S" (str.++ "T" (str.++ "H" (str.++ "L" ""))))) (re.++ (str.to_re (str.++ "T" (str.++ "D" (str.++ "C" (str.++ "U" "")))))(re.++ (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))) (str.to_re (str.++ "1" (str.++ "Z" (str.++ "Z" ""))))))))))))) (re.++ (str.to_re "")(re.++ (re.union (re.++ (re.range "A" "A") (re.union (re.range "B" "B") (re.range "L" "L")))(re.union (re.++ (re.range "B" "B") (re.opt (re.union (re.range "A" "B")(re.union (re.range "D" "D")(re.union (re.range "H" "H")(re.union (re.range "L" "L")(re.union (re.range "N" "N") (re.range "R" "T"))))))))(re.union (re.++ (re.range "C" "C") (re.union (re.range "A" "B")(re.union (re.range "F" "F")(re.union (re.range "H" "H")(re.union (re.range "M" "M")(re.union (re.range "O" "O")(re.union (re.range "R" "R")(re.union (re.range "T" "T") (re.range "V" "W")))))))))(re.union (re.++ (re.range "D" "D") (re.union (re.range "A" "A")(re.union (re.range "D" "E")(re.union (re.range "G" "H")(re.union (re.range "L" "L")(re.union (re.range "N" "N")(re.union (re.range "T" "T") (re.range "Y" "Y"))))))))(re.union (re.++ (re.range "E" "E") (re.opt (re.union (re.range "C" "C")(re.union (re.range "H" "H")(re.union (re.range "N" "N") (re.range "X" "X"))))))(re.union (re.++ (re.range "F" "F") (re.union (re.range "K" "K") (re.range "Y" "Y")))(re.union (re.++ (re.range "G" "G") (re.opt (re.union (re.range "L" "L")(re.union (re.range "U" "U") (re.range "Y" "Y")))))(re.union (re.++ (re.range "H" "H") (re.union (re.range "A" "A")(re.union (re.range "D" "D")(re.union (re.range "G" "G")(re.union (re.range "P" "P")(re.union (re.range "R" "S")(re.union (re.range "U" "U") (re.range "X" "X"))))))))(re.union (re.++ (re.range "I" "I") (re.union (re.range "G" "G")(re.union (re.range "M" "M")(re.union (re.range "P" "P") (re.range "V" "V")))))(re.union (str.to_re (str.++ "J" (str.++ "E" "")))(re.union (re.++ (re.range "K" "K") (re.union (re.range "A" "A")(re.union (re.range "T" "T")(re.union (re.range "W" "W") (re.range "Y" "Y")))))(re.union (re.++ (re.range "L" "L") (re.opt (re.union (re.range "A" "A")(re.union (re.range "D" "E")(re.union (re.range "L" "L")(re.union (re.range "N" "N")(re.union (re.range "S" "S") (re.range "U" "U"))))))))(re.union (re.++ (re.range "M" "M") (re.opt (re.union (re.range "E" "E") (re.range "K" "L"))))(re.union (re.++ (re.range "N" "N") (re.opt (re.union (re.range "E" "E")(re.union (re.range "G" "G")(re.union (re.range "N" "N")(re.union (re.range "P" "P")(re.union (re.range "R" "R") (re.range "W" "W"))))))))(re.union (re.++ (re.range "O" "O") (re.union (re.range "L" "L") (re.range "X" "X")))(re.union (re.++ (re.range "P" "P") (re.union (re.range "A" "A")(re.union (re.range "E" "E")(re.union (re.range "H" "H")(re.union (re.range "L" "L")(re.union (re.range "O" "O") (re.range "R" "R")))))))(re.union (re.++ (re.range "R" "R") (re.opt (re.union (re.range "A" "A")(re.union (re.range "E" "E")(re.union (re.range "G" "H")(re.union (re.range "K" "P")(re.union (re.range "R" "T")(re.union (re.range "W" "W")(re.union (re.range "Y" "Y")(re.union (re.range "[" "[") (re.range "|" "|")))))))))))(re.union (re.++ (re.range "Y" "Y") (re.opt (re.union (re.range "A" "D")(re.union (re.range "F" "H")(re.union (re.range "J" "K")(re.union (re.range "M" "N")(re.union (re.range "Q" "W")(re.union (re.range "[" "[") (re.range "|" "|"))))))))) (re.union (re.range "E" "E")(re.union (re.range "O" "O") (re.range "Y" "Z")))))))))))))))))))))(re.++ (re.range "1" "9")(re.++ (re.opt (re.range "0" "9"))(re.++ (re.opt (re.union (re.range "A" "B")(re.union (re.range "E" "E")(re.union (re.range "H" "H")(re.union (re.range "M" "N")(re.union (re.range "P" "P")(re.union (re.range "R" "R") (re.range "V" "Y"))))))))(re.++ (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (re.range "0" "9")(re.++ ((_ re.loop 2 2) (re.union (re.range "A" "B")(re.union (re.range "D" "H")(re.union (re.range "J" "J")(re.union (re.range "L" "L")(re.union (re.range "N" "N")(re.union (re.range "P" "U") (re.range "W" "Z")))))))) (str.to_re ""))))))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "2" (str.++ "\u{80}" (str.++ "W" (str.++ "Y" (str.++ "3" (str.++ "f" (str.++ "B" (str.++ "l" (str.++ "\u{ce}" (str.++ "9" (str.++ "@" (str.++ "x" (str.++ "k" (str.++ "." (str.++ "Q" (str.++ "6" (str.++ "." (str.++ "4" (str.++ "F" (str.++ "." (str.++ "3" (str.++ "E" (str.++ "." (str.++ "6" (str.++ "y" (str.++ "." (str.++ "J" (str.++ "w" "")))))))))))))))))))))))))))))

(define-fun Witness2 () String (str.++ "\u{00}" (str.++ "h" (str.++ "a" (str.++ "@" (str.++ "d" (str.++ "9" (str.++ "j" (str.++ "." (str.++ "Q" (str.++ "P" (str.++ "v" (str.++ "Q" (str.++ "g" ""))))))))))))))

(assert (= regexA (re.++ (re.++ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))(re.++ (re.* (re.++ (re.* (re.union (re.range "-" ".")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))) (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))))(re.++ (re.range "@" "@")(re.++ (re.+ (re.++ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))(re.++ (re.* (re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))))(re.++ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z"))) (re.range "." "."))))) ((_ re.loop 2 9) (re.union (re.range "A" "Z") (re.range "a" "z"))))))) (str.to_re ""))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "\u{1e}" (str.++ "/" (str.++ "<" (str.++ "/" (str.++ "a" (str.++ "\u{f8}" (str.++ "\u{c0}" (str.++ "9" (str.++ "6" (str.++ "\u{dd}" (str.++ "\u{c8}" (str.++ "\u{de}" (str.++ ">" (str.++ "/" (str.++ "e" (str.++ "\u{e6}" (str.++ "V" ""))))))))))))))))))

(define-fun Witness2 () String (str.++ "V" (str.++ "c" (str.++ "\u{b3}" (str.++ "/" (str.++ "<" (str.++ "\u{aa}" (str.++ "y" (str.++ "u" (str.++ "\u{b0}" (str.++ ">" (str.++ "/" (str.++ "e" (str.++ "H" ""))))))))))))))

(assert (= regexA (re.++ (re.range "/" "/")(re.++ (re.++ (re.range "<" "<") (re.opt (re.range "/" "/")))(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))(re.++ (re.++ (re.* (re.union (re.range "\u{00}" "=") (re.range "?" "\u{ff}"))) (re.range ">" ">")) (str.to_re (str.++ "/" (str.++ "e" "")))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "\u{f4}" (str.++ "." (str.++ "]" (str.++ " " (str.++ "[" (str.++ "/" (str.++ "U" (str.++ "R" (str.++ "L" (str.++ "]" "")))))))))))

(define-fun Witness2 () String (str.++ "\u{1e}" (str.++ "x" (str.++ "-" (str.++ "]" (str.++ "1" (str.++ "K" (str.++ "[" (str.++ "/" (str.++ "U" (str.++ "R" (str.++ "L" (str.++ "]" (str.++ "\u{db}" (str.++ "j" "")))))))))))))))

(assert (= regexA (re.++ (re.+ (re.union (re.range "-" ":")(re.union (re.range "=" "=")(re.union (re.range "A" "[")(re.union (re.range "_" "_") (re.range "a" "z"))))))(re.++ (re.range "]" "]")(re.++ (re.+ (re.union (re.range " " " ")(re.union (re.range "." "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_") (re.range "a" "z")))))) (str.to_re (str.++ "[" (str.++ "/" (str.++ "U" (str.++ "R" (str.++ "L" (str.++ "]" ""))))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "3" (str.++ "\u{15}" "")))

(define-fun Witness2 () String (str.++ "3" ""))

(assert (= regexA (re.range "3" "3")))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "\u{a8}" (str.++ " " (str.++ "W" (str.++ "O" (str.++ "W" (str.++ " " (str.++ "G" (str.++ "o" (str.++ "l" (str.++ "d" "")))))))))))

(define-fun Witness2 () String (str.++ " " (str.++ "W" (str.++ "O" (str.++ "W" (str.++ " " (str.++ "G" (str.++ "o" (str.++ "l" (str.++ "d" (str.++ "\u{ae}" "")))))))))))

(assert (= regexA (str.to_re (str.++ " " (str.++ "W" (str.++ "O" (str.++ "W" (str.++ " " (str.++ "G" (str.++ "o" (str.++ "l" (str.++ "d" ""))))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "4" (str.++ "<" (str.++ "b" (str.++ "l" (str.++ "o" (str.++ "c" (str.++ "k" (str.++ "q" (str.++ "u" (str.++ "o" (str.++ "t" (str.++ "e" (str.++ ">" (str.++ "\u{85}" (str.++ "\u{be}" (str.++ "<" (str.++ "b" (str.++ "r" (str.++ ">" (str.++ "\u{85}" (str.++ "\u{de}" (str.++ "\u{1a}" (str.++ "\u{06}" (str.++ "<" (str.++ "b" (str.++ "r" (str.++ ">" (str.++ " " (str.++ "\u{09}" (str.++ " " (str.++ "\u{a0}" (str.++ "y" (str.++ "<" (str.++ "b" (str.++ "r" (str.++ ">" (str.++ "<" (str.++ "/" (str.++ "b" (str.++ "l" (str.++ "o" (str.++ "c" (str.++ "k" (str.++ "q" (str.++ "u" (str.++ "o" (str.++ "t" (str.++ "e" (str.++ ">" ""))))))))))))))))))))))))))))))))))))))))))))))))))

(define-fun Witness2 () String (str.++ "\u{de}" (str.++ "<" (str.++ "b" (str.++ "l" (str.++ "o" (str.++ "c" (str.++ "k" (str.++ "q" (str.++ "u" (str.++ "o" (str.++ "t" (str.++ "e" (str.++ ">" (str.++ "\u{85}" (str.++ " " (str.++ "\u{0d}" (str.++ " " (str.++ "\u{ce}" (str.++ "\u{d9}" (str.++ "2" (str.++ "<" (str.++ "b" (str.++ "r" (str.++ ">" (str.++ "<" (str.++ "/" (str.++ "b" (str.++ "l" (str.++ "o" (str.++ "c" (str.++ "k" (str.++ "q" (str.++ "u" (str.++ "o" (str.++ "t" (str.++ "e" (str.++ ">" (str.++ "\u{01}" "")))))))))))))))))))))))))))))))))))))))

(assert (= regexA (re.++ (str.to_re (str.++ "<" (str.++ "b" (str.++ "l" (str.++ "o" (str.++ "c" (str.++ "k" (str.++ "q" (str.++ "u" (str.++ "o" (str.++ "t" (str.++ "e" (str.++ ">" "")))))))))))))(re.++ (re.+ (re.++ (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (re.+ (re.union (re.range "\u{00}" ";") (re.range "=" "\u{ff}")))(re.++ (str.to_re (str.++ "<" (str.++ "b" (str.++ "r" (str.++ ">" ""))))) (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))))))) (str.to_re (str.++ "<" (str.++ "/" (str.++ "b" (str.++ "l" (str.++ "o" (str.++ "c" (str.++ "k" (str.++ "q" (str.++ "u" (str.++ "o" (str.++ "t" (str.++ "e" (str.++ ">" ""))))))))))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "\u{00}" (str.++ "\u{84}" (str.++ "1" (str.++ "@" (str.++ "m" (str.++ "\u{cd}" (str.++ "\u{b5}" (str.++ "." (str.++ "\u{aa}" (str.++ "." (str.++ "\u{aa}" (str.++ "-" (str.++ "_" (str.++ "\u{c1}" (str.++ "2" (str.++ "\u{dc}" (str.++ "\u{f4}" (str.++ "-" (str.++ "2" (str.++ "-" (str.++ "\u{b5}" (str.++ ";" (str.++ "\u{7f}" (str.++ "\u{95}" "")))))))))))))))))))))))))

(define-fun Witness2 () String (str.++ "8" (str.++ "\u{ba}" (str.++ "\u{aa}" (str.++ "8" (str.++ "@" (str.++ "\u{ef}" (str.++ "." (str.++ "\u{f1}" (str.++ "." (str.++ "Z" (str.++ ";" (str.++ "\u{0a}" (str.++ " " (str.++ "\u{85}" (str.++ "h" (str.++ "+" (str.++ "\u{dc}" (str.++ "@" (str.++ "x" (str.++ "." (str.++ "\u{aa}" (str.++ "k" (str.++ "\u{c6}" (str.++ "\u{f6}" (str.++ "3" (str.++ ";" (str.++ "\u{e1}" (str.++ "a" (str.++ "7" (str.++ "\u{b5}" (str.++ "@" (str.++ "u" (str.++ "." (str.++ "9" (str.++ "8" (str.++ "X" (str.++ "\u{a3}" (str.++ "\u{8a}" "")))))))))))))))))))))))))))))))))))))))

(assert (= regexA (re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))(re.++ (re.* (re.++ (re.union (re.range "+" "+") (re.range "-" ".")) (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))))(re.++ (re.range "@" "@")(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))(re.++ (re.* (re.++ (re.range "-" ".") (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))))(re.++ (re.range "." ".")(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))(re.++ (re.* (re.++ (re.range "-" ".") (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))))) (re.* (re.++ (re.union (re.range "," ",") (re.range ";" ";"))(re.++ (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))(re.++ (re.* (re.++ (re.union (re.range "+" "+") (re.range "-" ".")) (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))))(re.++ (re.range "@" "@")(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))(re.++ (re.* (re.++ (re.range "-" ".") (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))))(re.++ (re.range "." ".")(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))) (re.* (re.++ (re.range "-" ".") (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))))))))))))))))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "\u{b1}" (str.++ "_" (str.++ "\u{ad}" (str.++ "@" (str.++ "@" (str.++ "\u{c2}" (str.++ "\u{ac}" (str.++ "@" (str.++ "@" ""))))))))))

(define-fun Witness2 () String (str.++ "\u{02}" (str.++ "\u{13}" (str.++ "@" (str.++ "@" (str.++ "J" (str.++ "\u{ea}" (str.++ "@" (str.++ "@" "")))))))))

(assert (= regexA (re.++ ((_ re.loop 2 2) (re.range "@" "@"))(re.++ (re.+ (re.union (re.range "\u{00}" "\u{08}")(re.union (re.range "\u{0e}" "\u{1f}")(re.union (re.range "!" "\u{84}")(re.union (re.range "\u{86}" "\u{9f}") (re.range "\u{a1}" "\u{ff}")))))) ((_ re.loop 2 2) (re.range "@" "@"))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "0" (str.++ "." (str.++ "8" (str.++ "0" (str.++ "0" (str.++ "8" (str.++ "3" ""))))))))

(define-fun Witness2 () String (str.++ "\u{8e}" (str.++ "0" (str.++ "." (str.++ "1" (str.++ "8" (str.++ "7" (str.++ "8" (str.++ "9" "")))))))))

(assert (= regexA (re.union (re.++ (str.to_re "") (re.++ (re.++ (re.range "1" "9") (re.opt (re.+ (re.range "0" "9")))) (re.opt (re.++ (re.range "." ".") (re.+ (re.range "0" "9")))))) (re.++ (re.++ (str.to_re (str.++ "0" (str.++ "." "")))(re.++ (re.opt (re.+ (re.range "0" "9")))(re.++ (re.range "1" "9") (re.opt (re.+ (re.range "0" "9")))))) (str.to_re "")))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "\u{b2}" (str.++ "." (str.++ "P" (str.++ "N" (str.++ "g" ""))))))

(define-fun Witness2 () String (str.++ "}" (str.++ "\u{c1}" (str.++ "." (str.++ "B" (str.++ "M" (str.++ "P" (str.++ "\u{d6}" (str.++ "\u{85}" (str.++ "\u{f8}" (str.++ "b" (str.++ "n" (str.++ ":" "")))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.* (re.union (re.range "\u{00}" "\u{09}") (re.range "\u{0b}" "\u{ff}"))) (re.++ (re.union (re.range "\u{00}" "-") (re.range "/" "\u{ff}"))(re.++ (re.range "." ".") (re.union (re.++ (re.union (re.range "G" "G") (re.range "g" "g"))(re.++ (re.union (re.range "I" "I") (re.range "i" "i")) (re.union (re.range "F" "F") (re.range "f" "f"))))(re.union (re.++ (re.union (re.range "J" "J") (re.range "j" "j"))(re.++ (re.union (re.range "P" "P") (re.range "p" "p")) (re.union (re.range "G" "G") (re.range "g" "g"))))(re.union (re.++ (re.union (re.range "J" "J") (re.range "j" "j"))(re.++ (re.union (re.range "P" "P") (re.range "p" "p"))(re.++ (re.union (re.range "E" "E") (re.range "e" "e")) (re.union (re.range "G" "G") (re.range "g" "g")))))(re.union (re.++ (re.union (re.range "B" "B") (re.range "b" "b"))(re.++ (re.union (re.range "M" "M") (re.range "m" "m")) (re.union (re.range "P" "P") (re.range "p" "p")))) (re.++ (re.union (re.range "P" "P") (re.range "p" "p"))(re.++ (re.union (re.range "N" "N") (re.range "n" "n")) (re.union (re.range "G" "G") (re.range "g" "g"))))))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "\u{9d}" (str.++ "\u{ff}" (str.++ "/" ""))))

(define-fun Witness2 () String (str.++ "4" ""))

(assert (= regexA (re.union (re.range "!" "!")(re.union (re.range "#" "'")(re.union (re.range "*" "+")(re.union (re.range "-" "-")(re.union (re.range "/" "9")(re.union (re.range "=" "=")(re.union (re.range "?" "?")(re.union (re.range "A" "Z") (re.range "^" "~")))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "\u{dc}" (str.++ "\u{b8}" (str.++ "G" (str.++ "G" (str.++ "\u{a5}" ""))))))

(define-fun Witness2 () String (str.++ "S" (str.++ "S" (str.++ "V" (str.++ "\u{93}" (str.++ "?" ""))))))

(assert (= regexA (re.union ((_ re.loop 2 2) (re.union (re.range "d" "d") (re.range "u" "u")))(re.union ((_ re.loop 2 2) (re.union (re.range "g" "g") (re.range "u" "u")))(re.union ((_ re.loop 2 2) (re.range "t" "u"))(re.union ((_ re.loop 2 2) (re.union (re.range "d" "d") (re.range "s" "s")))(re.union ((_ re.loop 2 2) (re.union (re.range "g" "g") (re.range "s" "s")))(re.union ((_ re.loop 2 2) (re.union (re.range "a" "a") (re.range "d" "d")))(re.union ((_ re.loop 2 2) (re.union (re.range "a" "a") (re.range "g" "g")))(re.union ((_ re.loop 2 2) (re.union (re.range "a" "a") (re.range "t" "t")))(re.union ((_ re.loop 2 2) (re.union (re.range "d" "d") (re.range "q" "q")))(re.union ((_ re.loop 2 2) (re.union (re.range "g" "g") (re.range "q" "q")))(re.union ((_ re.loop 2 2) (re.union (re.range "q" "q") (re.range "t" "t")))(re.union ((_ re.loop 2 2) (re.union (re.range "D" "D") (re.range "U" "U")))(re.union ((_ re.loop 2 2) (re.union (re.range "G" "G") (re.range "U" "U")))(re.union ((_ re.loop 2 2) (re.range "T" "U"))(re.union ((_ re.loop 2 2) (re.union (re.range "D" "D") (re.range "S" "S")))(re.union ((_ re.loop 2 2) (re.union (re.range "G" "G") (re.range "S" "S")))(re.union ((_ re.loop 2 2) (re.union (re.range "A" "A") (re.range "D" "D")))(re.union ((_ re.loop 2 2) (re.union (re.range "A" "A") (re.range "G" "G")))(re.union ((_ re.loop 2 2) (re.union (re.range "A" "A") (re.range "T" "T")))(re.union ((_ re.loop 2 2) (re.union (re.range "D" "D") (re.range "Q" "Q")))(re.union ((_ re.loop 2 2) (re.union (re.range "G" "G") (re.range "Q" "Q"))) ((_ re.loop 2 2) (re.union (re.range "Q" "Q") (re.range "T" "T"))))))))))))))))))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "-" (str.++ "8" (str.++ "8" (str.++ "." (str.++ "3" (str.++ "3" (str.++ "9" (str.++ "8" "")))))))))

(define-fun Witness2 () String (str.++ "-" (str.++ "6" (str.++ "." (str.++ "2" (str.++ "\u{a8}" (str.++ "E" "")))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.opt (re.range "-" "-"))(re.++ (re.union (re.++ (re.opt (re.range "1" "8")) (re.range "1" "9")) (re.++ (re.range "1" "9") (re.range "0" "0")))(re.++ (re.range "." ".") ((_ re.loop 1 6) (re.range "0" "9"))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "." (str.++ "," "")))

(define-fun Witness2 () String (str.++ "2" (str.++ "." (str.++ "\u{a0}" (str.++ "D" (str.++ "N" (str.++ "K" (str.++ "4" (str.++ "7" (str.++ "\u{a0}" (str.++ " " (str.++ "," (str.++ "\u{d2}" (str.++ "l" (str.++ "\u{94}" "")))))))))))))))

(assert (= regexA (re.++ (re.+ (re.++ (re.+ (re.union (re.range "." ".")(re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z"))))) (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))))) (re.range "," ","))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "\u{e7}" (str.++ "/" (str.++ ":" (str.++ "1" (str.++ "9" (str.++ "8" (str.++ "\u{0b}" ""))))))))

(define-fun Witness2 () String (str.++ ":" (str.++ "1" (str.++ "9" (str.++ "4" (str.++ "7" (str.++ "9" (str.++ "F" ""))))))))

(assert (= regexA (re.opt (re.++ (re.range ":" ":") (re.union (re.++ (str.to_re (str.++ "6" (str.++ "5" (str.++ "5" (str.++ "3" ""))))) (re.range "0" "5"))(re.union (re.++ (str.to_re (str.++ "6" (str.++ "5" (str.++ "5" ""))))(re.++ (re.range "0" "2")(re.++ (re.range "0" "9") (re.range "0" "9"))))(re.union (re.++ (str.to_re (str.++ "6" (str.++ "5" "")))(re.++ (re.range "0" "4") ((_ re.loop 2 2) (re.range "0" "9"))))(re.union (re.++ (re.range "6" "6")(re.++ (re.range "0" "4") ((_ re.loop 3 3) (re.range "0" "9"))))(re.union (re.++ (re.range "1" "5") ((_ re.loop 4 4) (re.range "0" "9"))) (re.++ (re.range "1" "9") ((_ re.loop 0 3) (re.range "0" "9"))))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "\u{b4}" (str.++ ">" (str.++ "\u{0a}" (str.++ "[" (str.++ "u" (str.++ "]" (str.++ "\u{93}" (str.++ "\u{ea}" (str.++ "[" (str.++ "/" (str.++ "b" (str.++ "]" (str.++ "\u{c0}" (str.++ "+" (str.++ "\u{8d}" ""))))))))))))))))

(define-fun Witness2 () String (str.++ "[" (str.++ "u" (str.++ "\u{b1}" (str.++ "]" (str.++ "2" (str.++ "[" (str.++ "u" (str.++ "]" (str.++ "\u{9f}" ""))))))))))

(assert (= regexA (re.++ (re.++ (re.range "[" "[")(re.++ (re.union (re.range "a" "b")(re.union (re.range "i" "i") (re.range "u" "u")))(re.++ (re.* (re.union (re.range "\u{00}" "Z")(re.union (re.range "\u{5c}" "\u{5c}") (re.range "^" "\u{ff}")))) (re.range "]" "]"))))(re.++ (re.+ (re.union (re.range "\u{00}" "Z")(re.union (re.range "\u{5c}" "\u{5c}") (re.range "^" "\u{ff}")))) (re.++ (re.range "[" "[")(re.++ (re.opt (re.range "/" "/"))(re.++ (re.union (re.range "a" "b")(re.union (re.range "i" "i") (re.range "u" "u"))) (re.range "]" "]"))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "C" (str.++ "\u{8d}" (str.++ "\u{f0}" (str.++ "1" (str.++ " " (str.++ "6" (str.++ "9" (str.++ "9" (str.++ " " (str.++ "9" (str.++ "8" (str.++ "0" (str.++ "-" (str.++ "7" (str.++ "5" (str.++ "3" (str.++ "8" ""))))))))))))))))))

(define-fun Witness2 () String (str.++ "1" (str.++ " " (str.++ "9" (str.++ "0" (str.++ "3" (str.++ " " (str.++ "9" (str.++ "4" (str.++ "3" (str.++ "-" (str.++ "8" (str.++ "4" (str.++ "8" (str.++ "9" (str.++ "|" ""))))))))))))))))

(assert (= regexA (re.++ (re.opt (str.to_re (str.++ "1" (str.++ " " ""))))(re.++ ((_ re.loop 3 3) (re.range "0" "9"))(re.++ (re.range " " " ")(re.++ ((_ re.loop 3 3) (re.range "0" "9"))(re.++ (re.range "-" "-") ((_ re.loop 4 4) (re.range "0" "9")))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "9" (str.++ ":" (str.++ "3" (str.++ "1" (str.++ ":" (str.++ ":" (str.++ "5" (str.++ "\u{ea}" "")))))))))

(define-fun Witness2 () String (str.++ "8" (str.++ "8" (str.++ ":" (str.++ "4" (str.++ "\u{85}" (str.++ "\u{0c}" (str.++ " " (str.++ "\u{a0}" (str.++ "a" (str.++ "p" (str.++ "D" (str.++ "\u{08}" (str.++ "S" (str.++ "\u{93}" (str.++ "\u{cb}" ""))))))))))))))))

(assert (= regexA (re.++ ((_ re.loop 1 2) (re.range "0" "9"))(re.++ (re.range ":" ":")(re.++ ((_ re.loop 1 2) (re.range "0" "9"))(re.++ ((_ re.loop 0 2) (re.range ":" ":"))(re.++ ((_ re.loop 0 2) (re.range "0" "9"))(re.++ (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))) ((_ re.loop 0 2) (re.union (re.range "A" "A")(re.union (re.range "M" "M")(re.union (re.range "P" "P")(re.union (re.range "a" "a")(re.union (re.range "m" "m") (re.range "p" "p")))))))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "7" (str.++ "&" (str.++ "#" (str.++ "2" (str.++ "0" (str.++ "1" (str.++ ";" ""))))))))

(define-fun Witness2 () String (str.++ "\u{d7}" (str.++ "&" (str.++ "a" (str.++ "m" (str.++ "p" (str.++ ";" (str.++ "e" (str.++ "u" (str.++ "m" (str.++ "l" (str.++ ";" ""))))))))))))

(assert (= regexA (re.union (str.to_re (str.++ "&" (str.++ "#" (str.++ "2" (str.++ "0" (str.++ "0" (str.++ ";" "")))))))(re.union (str.to_re (str.++ "&" (str.++ "#" (str.++ "2" (str.++ "0" (str.++ "1" (str.++ ";" "")))))))(re.union (str.to_re (str.++ "&" (str.++ "#" (str.++ "2" (str.++ "0" (str.++ "2" (str.++ ";" "")))))))(re.union (str.to_re (str.++ "&" (str.++ "#" (str.++ "2" (str.++ "0" (str.++ "3" (str.++ ";" "")))))))(re.union (str.to_re (str.++ "&" (str.++ "#" (str.++ "2" (str.++ "3" (str.++ "2" (str.++ ";" "")))))))(re.union (str.to_re (str.++ "&" (str.++ "#" (str.++ "2" (str.++ "3" (str.++ "3" (str.++ ";" "")))))))(re.union (str.to_re (str.++ "&" (str.++ "#" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ ";" "")))))))(re.union (str.to_re (str.++ "&" (str.++ "#" (str.++ "2" (str.++ "3" (str.++ "5" (str.++ ";" "")))))))(re.union (str.to_re (str.++ "&" (str.++ "a" (str.++ "m" (str.++ "p" (str.++ ";" (str.++ "#" (str.++ "0" (str.++ "6" (str.++ "9" (str.++ ";" "")))))))))))(re.union (str.to_re (str.++ "&" (str.++ "a" (str.++ "m" (str.++ "p" (str.++ ";" (str.++ "#" (str.++ "1" (str.++ "0" (str.++ "1" (str.++ ";" "")))))))))))(re.union (str.to_re (str.++ "&" (str.++ "a" (str.++ "m" (str.++ "p" (str.++ ";" (str.++ "#" (str.++ "2" (str.++ "0" (str.++ "0" (str.++ ";" "")))))))))))(re.union (str.to_re (str.++ "&" (str.++ "a" (str.++ "m" (str.++ "p" (str.++ ";" (str.++ "#" (str.++ "2" (str.++ "0" (str.++ "1" (str.++ ";" "")))))))))))(re.union (str.to_re (str.++ "&" (str.++ "a" (str.++ "m" (str.++ "p" (str.++ ";" (str.++ "#" (str.++ "2" (str.++ "0" (str.++ "2" (str.++ ";" "")))))))))))(re.union (str.to_re (str.++ "&" (str.++ "a" (str.++ "m" (str.++ "p" (str.++ ";" (str.++ "#" (str.++ "2" (str.++ "0" (str.++ "3" (str.++ ";" "")))))))))))(re.union (str.to_re (str.++ "&" (str.++ "a" (str.++ "m" (str.++ "p" (str.++ ";" (str.++ "E" (str.++ "g" (str.++ "r" (str.++ "a" (str.++ "v" (str.++ "e" (str.++ ";" "")))))))))))))(re.union (str.to_re (str.++ "&" (str.++ "a" (str.++ "m" (str.++ "p" (str.++ ";" (str.++ "E" (str.++ "a" (str.++ "c" (str.++ "u" (str.++ "t" (str.++ "e" (str.++ ";" "")))))))))))))(re.union (str.to_re (str.++ "&" (str.++ "a" (str.++ "m" (str.++ "p" (str.++ ";" (str.++ "E" (str.++ "c" (str.++ "i" (str.++ "r" (str.++ "c" (str.++ ";" ""))))))))))))(re.union (str.to_re (str.++ "&" (str.++ "a" (str.++ "m" (str.++ "p" (str.++ ";" (str.++ "E" (str.++ "u" (str.++ "m" (str.++ "l" (str.++ ";" "")))))))))))(re.union (str.to_re (str.++ "&" (str.++ "a" (str.++ "m" (str.++ "p" (str.++ ";" (str.++ "#" (str.++ "2" (str.++ "3" (str.++ "2" (str.++ ";" "")))))))))))(re.union (str.to_re (str.++ "&" (str.++ "a" (str.++ "m" (str.++ "p" (str.++ ";" (str.++ "#" (str.++ "2" (str.++ "3" (str.++ "3" (str.++ ";" "")))))))))))(re.union (str.to_re (str.++ "&" (str.++ "a" (str.++ "m" (str.++ "p" (str.++ ";" (str.++ "#" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ ";" "")))))))))))(re.union (str.to_re (str.++ "&" (str.++ "a" (str.++ "m" (str.++ "p" (str.++ ";" (str.++ "#" (str.++ "2" (str.++ "3" (str.++ "5" (str.++ ";" "")))))))))))(re.union (str.to_re (str.++ "&" (str.++ "a" (str.++ "m" (str.++ "p" (str.++ ";" (str.++ "e" (str.++ "g" (str.++ "r" (str.++ "a" (str.++ "v" (str.++ "e" (str.++ ";" "")))))))))))))(re.union (str.to_re (str.++ "&" (str.++ "a" (str.++ "m" (str.++ "p" (str.++ ";" (str.++ "e" (str.++ "a" (str.++ "c" (str.++ "u" (str.++ "t" (str.++ "e" (str.++ ";" "")))))))))))))(re.union (str.to_re (str.++ "&" (str.++ "a" (str.++ "m" (str.++ "p" (str.++ ";" (str.++ "e" (str.++ "c" (str.++ "i" (str.++ "r" (str.++ "c" (str.++ ";" "")))))))))))) (str.to_re (str.++ "&" (str.++ "a" (str.++ "m" (str.++ "p" (str.++ ";" (str.++ "e" (str.++ "u" (str.++ "m" (str.++ "l" (str.++ ";" ""))))))))))))))))))))))))))))))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "a" (str.++ "n" (str.++ "w" ""))))

(define-fun Witness2 () String (str.++ "a" ""))

(assert (= regexA (re.union (re.range "A" "A") (re.range "a" "a"))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "*" (str.++ "\u{ec}" "")))

(define-fun Witness2 () String (str.++ ":" ""))

(assert (= regexA (re.++ (str.to_re "") (re.union (re.range "*" "*") (re.range ":" ":")))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "d" (str.++ "\u{d4}" "")))

(define-fun Witness2 () String "")

(assert (= regexA (re.union (re.++ (str.to_re (str.++ "I" (str.++ "N" (str.++ "S" (str.++ "E" (str.++ "R" (str.++ "T" "")))))))(re.++ (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))(re.++ (str.to_re (str.++ "I" (str.++ "N" (str.++ "T" (str.++ "O" "")))))(re.++ (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))(re.++ (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "(" ")")(re.union (re.range "," ",")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{85}" "\u{85}")(re.union (re.range "\u{a0}" "\u{a0}")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))))))))(re.++ (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))(re.++ (str.to_re (str.++ "V" (str.++ "A" (str.++ "L" (str.++ "U" (str.++ "E" (str.++ "S" "")))))))(re.++ (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))(re.++ (re.range "(" "(") (re.+ (re.union (re.range "'" "'")(re.union (re.range ")" ")")(re.union (re.range "," ",")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))))))))))))))) (str.to_re ""))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "." (str.++ "j" (str.++ "P" (str.++ "G" (str.++ "\u{7f}" ""))))))

(define-fun Witness2 () String (str.++ "." (str.++ "J" (str.++ "P" (str.++ "G" (str.++ "\u{e9}" (str.++ "x" "")))))))

(assert (= regexA (re.++ (re.* (re.union (re.range "\u{00}" "\u{09}") (re.range "\u{0b}" "\u{ff}"))) (re.union (re.++ (re.range "." ".")(re.++ (re.union (re.range "J" "J") (re.range "j" "j"))(re.++ (re.union (re.range "P" "P") (re.range "p" "p")) (re.union (re.range "G" "G") (re.range "g" "g")))))(re.union (re.++ (re.range "." ".")(re.++ (re.union (re.range "G" "G") (re.range "g" "g"))(re.++ (re.union (re.range "I" "I") (re.range "i" "i")) (re.union (re.range "F" "F") (re.range "f" "f")))))(re.union (re.++ (re.range "." ".")(re.++ (re.union (re.range "J" "J") (re.range "j" "j"))(re.++ (re.union (re.range "P" "P") (re.range "p" "p"))(re.++ (re.union (re.range "E" "E") (re.range "e" "e")) (re.union (re.range "G" "G") (re.range "g" "g")))))) (re.++ (re.range "." ".")(re.++ (re.union (re.range "P" "P") (re.range "p" "p"))(re.++ (re.union (re.range "N" "N") (re.range "n" "n")) (re.union (re.range "G" "G") (re.range "g" "g")))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "0" ""))

(define-fun Witness2 () String (str.++ "9" (str.++ "." (str.++ "9" (str.++ "8" (str.++ "\u{ca}" (str.++ "5" (str.++ "\u{0a}" (str.++ "\u{92}" "")))))))))

(assert (= regexA (re.union (re.++ (str.to_re "") (re.++ (re.+ (re.range "0" "9"))(re.++ (re.+ (re.range "." ".")) (re.+ (re.range "0" "9"))))) (re.++ (re.range "0" "0") (str.to_re "")))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "2" (str.++ "5" (str.++ "4" (str.++ "." (str.++ "8" (str.++ "." (str.++ "2" (str.++ "1" (str.++ "8" (str.++ "." (str.++ "2" (str.++ "9" (str.++ "\u{86}" ""))))))))))))))

(define-fun Witness2 () String (str.++ "\u{d5}" (str.++ "\u{00}" (str.++ "7" (str.++ "." (str.++ "2" (str.++ "4" (str.++ "9" (str.++ "." (str.++ "0" (str.++ "." (str.++ "1" (str.++ "\u{ec}" (str.++ "\u{cb}" ""))))))))))))))

(assert (= regexA (re.++ (re.union (re.++ (str.to_re (str.++ "2" (str.++ "5" ""))) (re.range "0" "5"))(re.union (re.++ (re.range "2" "2")(re.++ (re.range "0" "4") (re.range "0" "9")))(re.union (re.++ (re.range "1" "1")(re.++ (re.opt (re.range "0" "9")) (re.opt (re.range "0" "9")))) (re.++ (re.range "1" "9") (re.opt (re.range "0" "9"))))))(re.++ (re.range "." ".")(re.++ (re.union (re.++ (str.to_re (str.++ "2" (str.++ "5" ""))) (re.range "0" "5"))(re.union (re.++ (re.range "2" "2")(re.++ (re.range "0" "4") (re.range "0" "9")))(re.union (re.++ (re.range "1" "1")(re.++ (re.opt (re.range "0" "9")) (re.opt (re.range "0" "9"))))(re.union (re.++ (re.range "1" "9") (re.opt (re.range "0" "9"))) (re.range "0" "0")))))(re.++ (re.range "." ".")(re.++ (re.union (re.++ (str.to_re (str.++ "2" (str.++ "5" ""))) (re.range "0" "5"))(re.union (re.++ (re.range "2" "2")(re.++ (re.range "0" "4") (re.range "0" "9")))(re.union (re.++ (re.range "1" "1")(re.++ (re.opt (re.range "0" "9")) (re.opt (re.range "0" "9"))))(re.union (re.++ (re.range "1" "9") (re.opt (re.range "0" "9"))) (re.range "0" "0")))))(re.++ (re.range "." ".") (re.union (re.++ (str.to_re (str.++ "2" (str.++ "5" ""))) (re.range "0" "5"))(re.union (re.++ (re.range "2" "2")(re.++ (re.range "0" "4") (re.range "0" "9")))(re.union (re.++ (re.range "1" "1")(re.++ (re.opt (re.range "0" "9")) (re.opt (re.range "0" "9")))) (re.++ (re.range "1" "9") (re.opt (re.range "0" "9"))))))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "{" (str.++ "\u{5c}" (str.++ "f" (str.++ "\u{5c}" (str.++ "\u{8f}" (str.++ ";" (str.++ "\u{9a}" ""))))))))

(define-fun Witness2 () String (str.++ "{" (str.++ "\u{5c}" (str.++ "f" (str.++ "1" (str.++ "\u{5c}" (str.++ "\u{1e}" (str.++ ";" (str.++ "\u{b0}" (str.++ "\u{c6}" ""))))))))))

(assert (= regexA (re.++ (re.++ (str.to_re (str.++ "{" (str.++ "\u{5c}" (str.++ "f" "")))) (re.* (re.range "0" "9")))(re.++ (re.range "\u{5c}" "\u{5c}") (re.++ (re.+ (re.union (re.range "\u{00}" ":") (re.range "<" "\u{ff}"))) (re.range ";" ";"))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "8" (str.++ "<" (str.++ "\u{91}" (str.++ "\u{a1}" (str.++ "\u{a0}" (str.++ "G" (str.++ " " (str.++ "\u{85}" (str.++ " " (str.++ ">" (str.++ "P" ""))))))))))))

(define-fun Witness2 () String (str.++ "\u{b5}" (str.++ "<" (str.++ "\u{85}" (str.++ "\u{04}" (str.++ "/" (str.++ ">" (str.++ "q" ""))))))))

(assert (= regexA (re.++ (re.opt (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))(re.++ (re.range "<" "<")(re.++ (re.opt (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (re.opt (re.range "/" "/"))(re.++ (re.+ (re.union (re.range "\u{00}" "\u{08}")(re.union (re.range "\u{0e}" "\u{1f}")(re.union (re.range "!" "=")(re.union (re.range "?" "\u{84}")(re.union (re.range "\u{86}" "\u{9f}") (re.range "\u{a1}" "\u{ff}")))))))(re.++ (re.* (re.++ (re.+ (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (re.+ (re.union (re.range "\u{00}" "!")(re.union (re.range "#" "&")(re.union (re.range "(" "<") (re.range ">" "\u{ff}"))))) (re.opt (re.union (re.++ (re.range "=" "=") (re.++ (re.range "\u{22}" "\u{22}")(re.++ (re.* (re.union (re.range "\u{00}" "!") (re.range "#" "\u{ff}"))) (re.range "\u{22}" "\u{22}"))))(re.union (re.++ (re.range "'" "'")(re.++ (re.* (re.union (re.range "\u{00}" "&") (re.range "(" "\u{ff}"))) (re.range "'" "'"))) (re.* (re.union (re.range "\u{00}" "\u{08}")(re.union (re.range "\u{0e}" "\u{1f}")(re.union (re.range "!" "!")(re.union (re.range "#" "&")(re.union (re.range "(" "=")(re.union (re.range "?" "\u{84}")(re.union (re.range "\u{86}" "\u{9f}") (re.range "\u{a1}" "\u{ff}")))))))))))))))(re.++ (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (re.opt (re.range "/" "/")) (re.range ">" ">")))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "s" (str.++ "t" (str.++ "y" (str.++ "l" (str.++ "e" (str.++ "=" (str.++ "\u{22}" (str.++ "\u{12}" (str.++ "\u{e3}" (str.++ "\u{f1}" (str.++ "8" (str.++ "\u{82}" (str.++ "\u{22}" (str.++ "D" "")))))))))))))))

(define-fun Witness2 () String (str.++ "'" (str.++ "'" "")))

(assert (= regexA (re.union (re.++ (str.to_re (str.++ "s" (str.++ "t" (str.++ "y" (str.++ "l" (str.++ "e" (str.++ "=" (str.++ "\u{22}" ""))))))))(re.++ (re.* (re.union (re.range "\u{00}" "!") (re.range "#" "\u{ff}"))) (re.range "\u{22}" "\u{22}"))) (re.++ (re.range "'" "'")(re.++ (re.* (re.union (re.range "\u{00}" "&") (re.range "(" "\u{ff}"))) (re.range "'" "'"))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "\u{9f}" (str.++ "{" (str.++ "\u{da}" (str.++ "&" (str.++ "a" (str.++ "m" (str.++ "p" (str.++ ";" (str.++ "#" (str.++ "x" (str.++ "0" (str.++ "0" (str.++ "1" (str.++ "E" (str.++ ";" ""))))))))))))))))

(define-fun Witness2 () String (str.++ "&" (str.++ "a" (str.++ "m" (str.++ "p" (str.++ ";" (str.++ "#" (str.++ "x" (str.++ "0" (str.++ "0" (str.++ "1" (str.++ "9" (str.++ ";" "")))))))))))))

(assert (= regexA (re.++ (str.to_re (str.++ "&" (str.++ "a" (str.++ "m" (str.++ "p" (str.++ ";" (str.++ "#" (str.++ "x" ""))))))))(re.++ (re.* (re.range "0" "0"))(re.++ (re.union (re.union (re.range "0" "8")(re.union (re.range "B" "C") (re.range "E" "F")))(re.union (str.to_re (str.++ "1" (str.++ "0" "")))(re.union (str.to_re (str.++ "1" (str.++ "1" "")))(re.union (str.to_re (str.++ "1" (str.++ "2" "")))(re.union (str.to_re (str.++ "1" (str.++ "3" "")))(re.union (str.to_re (str.++ "1" (str.++ "4" "")))(re.union (str.to_re (str.++ "1" (str.++ "5" "")))(re.union (str.to_re (str.++ "1" (str.++ "6" "")))(re.union (str.to_re (str.++ "1" (str.++ "7" "")))(re.union (str.to_re (str.++ "1" (str.++ "8" "")))(re.union (str.to_re (str.++ "1" (str.++ "9" "")))(re.union (str.to_re (str.++ "1" (str.++ "A" "")))(re.union (str.to_re (str.++ "1" (str.++ "B" "")))(re.union (str.to_re (str.++ "1" (str.++ "C" "")))(re.union (str.to_re (str.++ "1" (str.++ "D" "")))(re.union (str.to_re (str.++ "1" (str.++ "E" ""))) (str.to_re (str.++ "1" (str.++ "F" ""))))))))))))))))))) (re.range ";" ";"))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "(" (str.++ "7" (str.++ "2" (str.++ "7" (str.++ "9" (str.++ "9" (str.++ "5" (str.++ "7" (str.++ "9" (str.++ "3" "")))))))))))

(define-fun Witness2 () String (str.++ "2" (str.++ "7" (str.++ "(" (str.++ "0" (str.++ "8" (str.++ "2" (str.++ ")" (str.++ "8" (str.++ "8" (str.++ "8" (str.++ "2" (str.++ "9" (str.++ "4" (str.++ "7" (str.++ "\u{c6}" ""))))))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.opt (re.union (str.to_re (str.++ "+" (str.++ "2" (str.++ "7" "")))) (str.to_re (str.++ "2" (str.++ "7" "")))))(re.++ (re.opt (re.range "(" "("))(re.++ (re.opt (re.range "0" "0"))(re.++ (re.range "7" "8")(re.++ (re.union (re.range "2" "4") (re.range "6" "7"))(re.++ (re.opt (re.range ")" ")"))(re.++ (re.opt (re.union (re.range " " " ")(re.union (re.range "-" ".") (re.range "_" "_"))))(re.++ ((_ re.loop 3 3) (re.range "0" "9"))(re.++ (re.opt (re.union (re.range " " " ")(re.union (re.range "-" ".") (re.range "_" "_")))) ((_ re.loop 4 4) (re.range "0" "9"))))))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "0" (str.++ "2" (str.++ "/" (str.++ "7" (str.++ "5" ""))))))

(define-fun Witness2 () String (str.++ "\u{f4}" (str.++ "1" (str.++ "0" (str.++ "/" (str.++ "9" (str.++ "8" (str.++ ";" (str.++ "L" (str.++ "\u{fd}" ""))))))))))

(assert (= regexA (re.++ (re.union (re.++ (re.range "0" "0") (re.range "1" "9")) (re.++ (re.range "1" "1") (re.union (re.range "0" "0") (re.range "2" "2"))))(re.++ (re.range "/" "/") ((_ re.loop 2 2) (re.range "0" "9"))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "g" (str.++ "`" (str.++ "\u{1d}" (str.++ "R" (str.++ "\u{97}" (str.++ "c" (str.++ "m" ""))))))))

(define-fun Witness2 () String (str.++ "t" (str.++ "p" "")))

(assert (= regexA (re.union (re.++ (re.range "a" "a") (re.union (re.union (re.range "c" "g")(re.union (re.range "i" "i")(re.union (re.range "l" "o")(re.union (re.range "q" "u")(re.union (re.range "w" "x") (re.range "z" "z"))))))(re.union (str.to_re (str.++ "e" (str.++ "r" (str.++ "o" "")))) (re.++ (re.union (str.to_re (str.++ "r" (str.++ "p" ""))) (str.to_re (str.++ "s" (str.++ "i" "")))) (re.range "a" "a")))))(re.union (re.++ (re.range "b" "b")(re.++ (re.union (re.range "a" "b")(re.union (re.range "d" "j")(re.union (re.range "m" "o")(re.union (re.range "r" "t")(re.union (re.range "v" "w") (re.range "y" "z")))))) (str.to_re (str.++ "i" (str.++ "z" "")))))(re.union (re.++ (re.range "c" "c") (re.union (re.union (re.range "a" "a")(re.union (re.range "c" "d")(re.union (re.range "f" "i")(re.union (re.range "k" "o")(re.union (re.range "r" "r")(re.union (re.range "u" "v") (re.range "x" "z")))))))(re.union (str.to_re (str.++ "a" (str.++ "t" ""))) (re.++ (re.range "o" "o") (re.union (re.range "m" "m") (str.to_re (str.++ "o" (str.++ "p" ""))))))))(re.union (re.++ (re.range "d" "d") (re.union (re.range "e" "e")(re.union (re.range "j" "k")(re.union (re.range "m" "m")(re.union (re.range "o" "o") (re.range "z" "z"))))))(re.union (re.++ (re.range "e" "e") (re.union (re.union (re.range "c" "c")(re.union (re.range "e" "e")(re.union (re.range "g" "h") (re.range "r" "u")))) (str.to_re (str.++ "d" (str.++ "u" "")))))(re.union (re.++ (re.range "f" "f") (re.union (re.range "i" "k")(re.union (re.range "m" "m")(re.union (re.range "o" "o") (re.range "r" "r")))))(re.union (re.++ (re.range "g" "g") (re.union (re.union (re.range "a" "b")(re.union (re.range "d" "i")(re.union (re.range "l" "n")(re.union (re.range "p" "u")(re.union (re.range "w" "w") (re.range "y" "y")))))) (str.to_re (str.++ "o" (str.++ "v" "")))))(re.union (re.++ (re.range "h" "h") (re.union (re.range "k" "k")(re.union (re.range "m" "n")(re.union (re.range "r" "r") (re.range "t" "u")))))(re.union (re.++ (re.range "i" "i") (re.union (re.union (re.range "d" "e")(re.union (re.range "l" "o") (re.range "q" "t"))) (re.++ (re.range "n" "n") (re.union (str.to_re (str.++ "f" (str.++ "o" ""))) (re.range "t" "t")))))(re.union (re.++ (re.range "j" "j") (re.union (re.union (re.range "e" "e")(re.union (re.range "m" "m") (re.range "o" "p"))) (str.to_re (str.++ "o" (str.++ "b" (str.++ "s" ""))))))(re.union (re.++ (re.range "k" "k") (re.union (re.range "e" "e")(re.union (re.range "g" "i")(re.union (re.range "m" "n")(re.union (re.range "p" "p")(re.union (re.range "r" "r")(re.union (re.range "w" "w") (re.range "y" "z"))))))))(re.union (re.++ (re.range "l" "l") (re.union (re.range "a" "c")(re.union (re.range "i" "i")(re.union (re.range "k" "k")(re.union (re.range "r" "v") (re.range "y" "y"))))))(re.union (re.++ (re.range "m" "m") (re.union (re.union (re.range "a" "a")(re.union (re.range "c" "e")(re.union (re.range "g" "h") (re.range "k" "z"))))(re.union (str.to_re (str.++ "i" (str.++ "l" "")))(re.union (str.to_re (str.++ "o" (str.++ "b" (str.++ "i" "")))) (str.to_re (str.++ "u" (str.++ "s" (str.++ "e" (str.++ "u" (str.++ "m" ""))))))))))(re.union (re.++ (re.range "n" "n") (re.union (re.union (re.range "a" "a")(re.union (re.range "c" "c")(re.union (re.range "e" "g")(re.union (re.range "i" "i")(re.union (re.range "l" "l")(re.union (re.range "o" "p")(re.union (re.range "r" "r")(re.union (re.range "u" "u") (re.range "z" "z")))))))))(re.union (str.to_re (str.++ "a" (str.++ "m" (str.++ "e" "")))) (str.to_re (str.++ "e" (str.++ "t" ""))))))(re.union (re.++ (re.range "o" "o") (re.union (re.range "m" "m") (str.to_re (str.++ "r" (str.++ "g" "")))))(re.union (re.++ (re.range "p" "p") (re.union (re.union (re.range "a" "a")(re.union (re.range "e" "h")(re.union (re.range "k" "n")(re.union (re.range "r" "t")(re.union (re.range "w" "w") (re.range "y" "y")))))) (str.to_re (str.++ "r" (str.++ "o" "")))))(re.union (str.to_re (str.++ "q" (str.++ "a" "")))(re.union (re.++ (re.range "r" "r") (re.union (re.range "e" "e")(re.union (re.range "o" "o")(re.union (re.range "s" "s")(re.union (re.range "u" "u") (re.range "w" "w"))))))(re.union (re.++ (re.range "s" "s") (re.union (re.range "a" "e")(re.union (re.range "g" "o")(re.union (re.range "r" "r")(re.union (re.range "t" "v") (re.range "y" "z"))))))(re.union (re.++ (re.range "t" "t") (re.union (re.union (re.range "c" "d")(re.union (re.range "f" "h")(re.union (re.range "j" "p")(re.union (re.range "r" "r")(re.union (re.range "t" "t")(re.union (re.range "v" "w") (re.range "z" "z"))))))) (re.++ (re.opt (str.to_re (str.++ "r" (str.++ "a" (str.++ "v" ""))))) (str.to_re (str.++ "e" (str.++ "l" ""))))))(re.union (re.++ (re.range "u" "u") (re.union (re.range "a" "a")(re.union (re.range "g" "g")(re.union (re.range "k" "k")(re.union (re.range "m" "m")(re.union (re.range "s" "s") (re.range "y" "z")))))))(re.union (re.++ (re.range "v" "v") (re.union (re.range "a" "a")(re.union (re.range "c" "c")(re.union (re.range "e" "e")(re.union (re.range "g" "g")(re.union (re.range "i" "i")(re.union (re.range "n" "n") (re.range "u" "u"))))))))(re.union (re.++ (re.range "w" "w") (re.union (re.range "f" "f") (re.range "s" "s")))(re.union (re.++ (re.range "y" "y") (re.union (re.range "e" "e") (re.range "t" "u"))) (re.++ (re.range "z" "z") (re.union (re.range "a" "a")(re.union (re.range "m" "m") (re.range "w" "w"))))))))))))))))))))))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "7" (str.++ "2" (str.++ "3" (str.++ "7" (str.++ "4" (str.++ "3" (str.++ "7" (str.++ "9" (str.++ "x" ""))))))))))

(define-fun Witness2 () String (str.++ "5" (str.++ "6" (str.++ "8" (str.++ "4" (str.++ "9" (str.++ "-" (str.++ "3" (str.++ "4" (str.++ "7" ""))))))))))

(assert (= regexA (re.union (re.++ (str.to_re "")(re.++ ((_ re.loop 5 5) (re.range "0" "9"))(re.++ (re.range "-" "-") ((_ re.loop 3 3) (re.range "0" "9")))))(re.union (re.++ (str.to_re "")(re.++ ((_ re.loop 2 2) (re.range "0" "9"))(re.++ (re.union (re.range "\u{00}" "\u{09}") (re.range "\u{0b}" "\u{ff}"))(re.++ ((_ re.loop 3 3) (re.range "0" "9"))(re.++ (re.range "-" "-") ((_ re.loop 3 3) (re.range "0" "9"))))))) ((_ re.loop 8 8) (re.range "0" "9"))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "\u{1a}" (str.++ "5" (str.++ "9" (str.++ "9" (str.++ "7" (str.++ "-" (str.++ "9" (str.++ "3" (str.++ "9" (str.++ "8" (str.++ "-" (str.++ "9" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "-" (str.++ "9" (str.++ "4" (str.++ "8" (str.++ "6" (str.++ "\u{9a}" (str.++ "$" (str.++ "\u{bd}" (str.++ "K" (str.++ "\u{a9}" (str.++ "\u{a3}" "")))))))))))))))))))))))))))

(define-fun Witness2 () String (str.++ "\u{df}" (str.++ "2" (str.++ "8" (str.++ "2" (str.++ "6" (str.++ "-" (str.++ "7" (str.++ "8" (str.++ "4" (str.++ "2" (str.++ "-" (str.++ "9" (str.++ "7" (str.++ "4" (str.++ "8" (str.++ "-" (str.++ "0" (str.++ "1" (str.++ "8" (str.++ "8" "")))))))))))))))))))))

(assert (= regexA (re.++ ((_ re.loop 3 3) (re.++ ((_ re.loop 4 4) (re.range "0" "9")) (re.range "-" "-"))) ((_ re.loop 4 4) (re.range "0" "9")))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "7" (str.++ "9" (str.++ "9" (str.++ "8" (str.++ "-" (str.++ "8" (str.++ "1" (str.++ "9" (str.++ "9" ""))))))))))

(define-fun Witness2 () String (str.++ "7" (str.++ "5" (str.++ "6" (str.++ "5" (str.++ "-" (str.++ "0" (str.++ "3" (str.++ "0" (str.++ "7" (str.++ "\u{c1}" (str.++ "\u{22}" ""))))))))))))

(assert (= regexA (re.union (re.++ (re.range "7" "9")(re.++ ((_ re.loop 3 3) (re.range "0" "9"))(re.++ (re.range "-" "-") ((_ re.loop 4 4) (re.range "0" "9"))))) (re.++ (re.range "7" "9") ((_ re.loop 7 7) (re.range "0" "9"))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "w" (str.++ "." (str.++ "J" (str.++ "P" (str.++ "E" (str.++ "G" (str.++ "\u{0b}" ""))))))))

(define-fun Witness2 () String (str.++ "\u{aa}" (str.++ "." (str.++ "J" (str.++ "P" (str.++ "E" (str.++ "G" (str.++ "\u{b2}" (str.++ "\u{f2}" "")))))))))

(assert (= regexA (re.union (re.++ (re.* (re.union (re.range "\u{00}" "\u{09}") (re.range "\u{0b}" "\u{ff}")))(re.++ (str.to_re (str.++ "." (str.++ "j" (str.++ "p" ""))))(re.++ (re.opt (re.range "e" "e")) (re.range "g" "g")))) (re.++ (re.* (re.union (re.range "\u{00}" "\u{09}") (re.range "\u{0b}" "\u{ff}")))(re.++ (str.to_re (str.++ "." (str.++ "J" (str.++ "P" ""))))(re.++ (re.opt (re.range "E" "E")) (re.range "G" "G")))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "\u{80}" (str.++ "q" (str.++ "[" (str.++ "<" (str.++ "/" (str.++ "\u{aa}" (str.++ " " (str.++ "8" (str.++ "=" (str.++ "\u{09}" (str.++ "\u{22}" (str.++ "\u{aa}" (str.++ "M" (str.++ "\u{86}" (str.++ "'" (str.++ "E" (str.++ "\u{85}" (str.++ "\u{85}" (str.++ "=" (str.++ "\u{22}" (str.++ "\u{22}" (str.++ "S" (str.++ "\u{ba}" (str.++ "\u{f2}" (str.++ "_" (str.++ "\u{aa}" (str.++ "\u{a0}" (str.++ "=" (str.++ "#" (str.++ "\u{a0}" (str.++ "\u{85}" (str.++ "\u{85}" (str.++ "G" (str.++ "\u{aa}" (str.++ "7" (str.++ "\u{e5}" (str.++ "r" (str.++ "=" (str.++ "\u{85}" (str.++ "'" (str.++ "'" (str.++ "\u{ba}" (str.++ "\u{0c}" (str.++ "=" (str.++ "\u{85}" (str.++ "p" (str.++ "a" (str.++ "=" (str.++ "2" (str.++ "\u{a0}" (str.++ " " (str.++ "\u{85}" (str.++ "\u{aa}" (str.++ "3" (str.++ "\u{a0}" (str.++ "\u{a0}" (str.++ "\u{85}" (str.++ "=" (str.++ "\u{85}" (str.++ "\u{e6}" (str.++ "9" (str.++ "t" (str.++ " " (str.++ "\u{09}" (str.++ "\u{85}" (str.++ "\u{0c}" (str.++ ">" ""))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(define-fun Witness2 () String (str.++ "<" (str.++ " " (str.++ " " (str.++ "\u{b5}" (str.++ "P" (str.++ "Q" (str.++ "\u{aa}" (str.++ " " (str.++ "\u{a0}" (str.++ "\u{85}" (str.++ "\u{a0}" (str.++ "/" (str.++ " " (str.++ "\u{0d}" (str.++ ">" (str.++ "\u{db}" (str.++ "3" ""))))))))))))))))))

(assert (= regexA (re.++ (re.range "<" "<")(re.++ (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (re.opt (re.range "/" "/"))(re.++ (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))(re.++ (re.* (re.++ (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))(re.++ (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (re.range "=" "=")(re.++ (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))) (re.union (re.++ (re.union (re.range "\u{22}" "\u{22}") (re.range "'" "'"))(re.++ (re.* (re.union (re.range "\u{00}" "!")(re.union (re.range "#" "&") (re.range "(" "\u{ff}")))) (re.union (re.range "\u{22}" "\u{22}") (re.range "'" "'")))) (re.+ (re.union (re.range "#" "#")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))))))))))(re.++ (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (re.opt (re.range "/" "/"))(re.++ (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))) (re.range ">" ">"))))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "8" (str.++ "3" (str.++ "0" (str.++ "9" (str.++ "-" (str.++ "3" (str.++ "0" (str.++ "0" (str.++ "8" (str.++ "2" (str.++ "5" (str.++ "1" (str.++ "8" (str.++ "X" (str.++ "\u{d2}" ""))))))))))))))))

(define-fun Witness2 () String (str.++ "1" (str.++ "1" (str.++ "8" (str.++ "9" (str.++ "-" (str.++ "0" (str.++ "9" (str.++ "-" (str.++ "2" (str.++ "8" (str.++ "0" (str.++ "8" (str.++ ":" (str.++ "5" (str.++ "7" (str.++ ":" (str.++ "5" (str.++ "6" "")))))))))))))))))))

(assert (= regexA (re.++ (re.union ((_ re.loop 2 2) (re.range "0" "9")) ((_ re.loop 4 4) (re.range "0" "9")))(re.++ (re.opt (re.range "-" "-"))(re.++ (re.union (re.++ (re.range "0" "0") (re.range "0" "9")) (re.++ (re.range "1" "1") (re.range "0" "2")))(re.++ (re.opt (re.range "-" "-"))(re.++ (re.union (re.++ (re.range "0" "2") (re.range "0" "9")) (re.++ (re.range "3" "3") (re.range "0" "1")))(re.++ (re.opt (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (re.union (re.++ (re.range "0" "1") (re.range "0" "9")) (re.++ (re.range "2" "2") (re.range "0" "3")))(re.++ (re.opt (re.range ":" ":"))(re.++ (re.++ (re.range "0" "5") (re.range "0" "9"))(re.++ (re.opt (re.range ":" ":")) (re.++ (re.range "0" "5") (re.range "0" "9"))))))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "\u{85}" (str.++ "\u{d9}" (str.++ "\u{a6}" (str.++ "2" (str.++ "2" (str.++ ":" (str.++ "3" (str.++ "4" (str.++ "5" ""))))))))))

(define-fun Witness2 () String (str.++ "1" (str.++ "1" (str.++ ":" (str.++ "4" (str.++ "9" ""))))))

(assert (= regexA (re.++ (re.union (re.++ (re.range "0" "1") (re.range "0" "9")) (re.++ (re.range "2" "2") (re.range "0" "3")))(re.++ (re.range ":" ":")(re.++ (re.range "0" "5") (re.range "0" "9"))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "\u{1b}" (str.++ "0" (str.++ "8" (str.++ "/" (str.++ "3" (str.++ "0" (str.++ "/" (str.++ "9" (str.++ "8" (str.++ "\u{83}" "")))))))))))

(define-fun Witness2 () String (str.++ "1" (str.++ "2" (str.++ "/" (str.++ "9" (str.++ "/" (str.++ "9" (str.++ "1" (str.++ "\u{c3}" (str.++ "\u{bd}" (str.++ "\u{b1}" (str.++ "\u{e9}" ""))))))))))))

(assert (= regexA (re.++ (re.union (re.++ (re.range "0" "0") (re.range "1" "9")) (re.++ (re.range "1" "1") (re.range "0" "2")))(re.++ (re.range "/" "/")(re.++ (re.union (re.range "0" "9")(re.union (re.++ (re.range "0" "2") (re.range "0" "9")) (re.++ (re.range "3" "3") (re.range "0" "1"))))(re.++ (re.range "/" "/") ((_ re.loop 2 2) (re.range "0" "9"))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "0" (str.++ "4" (str.++ "6" (str.++ "8" (str.++ "3" (str.++ "6" (str.++ "5" (str.++ "8" (str.++ "2" (str.++ "9" (str.++ "5" ""))))))))))))

(define-fun Witness2 () String (str.++ "1" (str.++ "8" (str.++ "0" (str.++ "0" (str.++ "\u{b9}" (str.++ "\u{f3}" "")))))))

(assert (= regexA (re.union (re.++ (str.to_re "")(re.++ (str.to_re (str.++ "1" (str.++ "3" (str.++ "0" (str.++ "0" "")))))(re.++ ((_ re.loop 6 6) (re.range "0" "9")) (str.to_re ""))))(re.union (re.union (re.++ (str.to_re "") (str.to_re (str.++ "1" (str.++ "8" (str.++ "0" (str.++ "0" ""))))))(re.union (str.to_re (str.++ "1" (str.++ "9" (str.++ "0" (str.++ "0" ""))))) (re.++ (str.to_re (str.++ "1" (str.++ "9" (str.++ "0" (str.++ "2" "")))))(re.++ ((_ re.loop 6 6) (re.range "0" "9")) (str.to_re "")))))(re.union (re.++ (str.to_re "")(re.++ (re.range "0" "0")(re.++ (re.union (re.range "2" "3")(re.union (re.range "7" "8") (re.range "|" "|")))(re.++ ((_ re.loop 8 8) (re.range "0" "9")) (str.to_re "")))))(re.union (re.++ (str.to_re "")(re.++ (str.to_re (str.++ "1" (str.++ "3" "")))(re.++ ((_ re.loop 4 4) (re.range "0" "9")) (str.to_re "")))) (re.++ (str.to_re "")(re.++ (str.to_re (str.++ "0" (str.++ "4" "")))(re.++ ((_ re.loop 2 3) (re.range "0" "9"))(re.++ ((_ re.loop 6 6) (re.range "0" "9")) (str.to_re "")))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "h" (str.++ "t" (str.++ "t" (str.++ "p" (str.++ "~" (str.++ "L" (str.++ "c" (str.++ "\u{ea}" (str.++ "3" ""))))))))))

(define-fun Witness2 () String (str.++ "\u{17}" (str.++ "w" (str.++ "w" (str.++ "w" (str.++ "@" (str.++ "\u{87}" (str.++ "\u{dc}" (str.++ "\u{9e}" (str.++ "\u{80}" (str.++ "\u{1a}" (str.++ "\u{bb}" (str.++ "\u{e4}" (str.++ "\u{06}" (str.++ "\u{ef}" (str.++ "\u{ec}" (str.++ "\u{5c}" (str.++ "\u{db}" (str.++ "\u{a9}" "")))))))))))))))))))

(assert (= regexA (re.++ (re.union (str.to_re (str.++ "w" (str.++ "w" (str.++ "w" "")))) (str.to_re (str.++ "h" (str.++ "t" (str.++ "t" (str.++ "p" "")))))) (re.++ (re.+ (re.union (re.range "\u{00}" "/")(re.union (re.range ":" "@")(re.union (re.range "[" "^")(re.union (re.range "`" "`")(re.union (re.range "{" "\u{a9}")(re.union (re.range "\u{ab}" "\u{b4}")(re.union (re.range "\u{b6}" "\u{b9}")(re.union (re.range "\u{bb}" "\u{bf}")(re.union (re.range "\u{d7}" "\u{d7}") (re.range "\u{f7}" "\u{f7}")))))))))))(re.++ (re.+ (re.union (re.range "\u{00}" "\u{08}")(re.union (re.range "\u{0e}" "\u{1f}")(re.union (re.range "!" "\u{84}")(re.union (re.range "\u{86}" "\u{9f}") (re.range "\u{a1}" "\u{ff}")))))) (re.+ (re.union (re.range "\u{00}" "\u{09}")(re.union (re.range "\u{0b}" "\u{0c}")(re.union (re.range "\u{0e}" "\u{1f}")(re.union (re.range "!" "#")(re.union (re.range "%" "(")(re.union (re.range "*" "+")(re.union (re.range "-" "-")(re.union (re.range "/" "9")(re.union (re.range "<" ">")(re.union (re.range "@" "\u{5c}")(re.union (re.range "^" "|") (re.range "~" "\u{ff}"))))))))))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "&" (str.++ "l" (str.++ "t" (str.++ ";" (str.++ "!" (str.++ "[" (str.++ "C" (str.++ "D" (str.++ "A" (str.++ "T" (str.++ "A" (str.++ "[" (str.++ "]" (str.++ "]" (str.++ "&" (str.++ "g" (str.++ "t" (str.++ ";" (str.++ "9" (str.++ "\u{e5}" "")))))))))))))))))))))

(define-fun Witness2 () String (str.++ "&" (str.++ "l" (str.++ "t" (str.++ ";" (str.++ "!" (str.++ "[" (str.++ "C" (str.++ "D" (str.++ "A" (str.++ "T" (str.++ "A" (str.++ "[" (str.++ "\u{d5}" (str.++ "]" (str.++ "]" (str.++ "&" (str.++ "g" (str.++ "t" (str.++ ";" (str.++ "\u{d0}" "")))))))))))))))))))))

(assert (= regexA (re.++ (str.to_re (str.++ "&" (str.++ "l" (str.++ "t" (str.++ ";" (str.++ "!" (str.++ "[" (str.++ "C" (str.++ "D" (str.++ "A" (str.++ "T" (str.++ "A" (str.++ "[" "")))))))))))))(re.++ (re.* (re.union (re.range "\u{00}" "\u{5c}") (re.range "^" "\u{ff}"))) (str.to_re (str.++ "]" (str.++ "]" (str.++ "&" (str.++ "g" (str.++ "t" (str.++ ";" "")))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "&" (str.++ "l" (str.++ "t" (str.++ ";" (str.++ "a" (str.++ "q" (str.++ "h" (str.++ "r" (str.++ "e" (str.++ "f" (str.++ "=" (str.++ "\u{a0}" (str.++ "=" (str.++ "x" (str.++ " " (str.++ "\u{0d}" (str.++ "/" (str.++ "&" (str.++ "g" (str.++ "t" (str.++ ";" (str.++ "/" "")))))))))))))))))))))))

(define-fun Witness2 () String (str.++ "&" (str.++ "l" (str.++ "t" (str.++ ";" (str.++ "a" (str.++ "." (str.++ "?" (str.++ "L" (str.++ "T" (str.++ "4" (str.++ "h" (str.++ "r" (str.++ "e" (str.++ "f" (str.++ "\u{0c}" (str.++ "\u{85}" (str.++ "=" (str.++ "A" (str.++ "g" (str.++ "A" (str.++ "&" (str.++ "g" (str.++ "t" (str.++ ";" (str.++ "&" (str.++ "l" (str.++ "t" (str.++ ";" (str.++ "/" (str.++ "a" (str.++ "&" (str.++ "g" (str.++ "t" (str.++ ";" (str.++ "\u{c1}" ""))))))))))))))))))))))))))))))))))))

(assert (= regexA (re.++ (str.to_re (str.++ "&" (str.++ "l" (str.++ "t" (str.++ ";" (str.++ "a" ""))))))(re.++ (re.* (re.union (re.range " " " ")(re.union (re.range "&" "'")(re.union (re.range "." "9")(re.union (re.range ";" ";")(re.union (re.range "=" "=")(re.union (re.range "?" "?")(re.union (re.range "A" "Z")(re.union (re.range "_" "_") (re.range "a" "z"))))))))))(re.++ (re.++ (str.to_re (str.++ "h" (str.++ "r" (str.++ "e" (str.++ "f" "")))))(re.++ (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (re.range "=" "=") (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))))))(re.++ (re.* (re.union (re.range " " " ")(re.union (re.range "&" "'")(re.union (re.range "." "9")(re.union (re.range ";" ";")(re.union (re.range "=" "=")(re.union (re.range "?" "?")(re.union (re.range "A" "Z")(re.union (re.range "_" "_") (re.range "a" "z"))))))))))(re.++ (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))) (re.union (str.to_re (str.++ "/" (str.++ "&" (str.++ "g" (str.++ "t" (str.++ ";" "")))))) (re.++ (str.to_re (str.++ "&" (str.++ "g" (str.++ "t" (str.++ ";" "")))))(re.++ (re.* (re.union (re.range " " " ")(re.union (re.range "&" "'")(re.union (re.range "." "9")(re.union (re.range ";" ";")(re.union (re.range "=" "=")(re.union (re.range "?" "?")(re.union (re.range "A" "Z")(re.union (re.range "_" "_") (re.range "a" "z")))))))))) (str.to_re (str.++ "&" (str.++ "l" (str.++ "t" (str.++ ";" (str.++ "/" (str.++ "a" (str.++ "&" (str.++ "g" (str.++ "t" (str.++ ";" "")))))))))))))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "[" (str.++ "u" (str.++ "r" (str.++ "l" (str.++ "\u{22}" (str.++ "]" (str.++ "\u{14}" (str.++ "\u{a8}" (str.++ "[" (str.++ "/" (str.++ "u" (str.++ "r" (str.++ "l" (str.++ "]" "")))))))))))))))

(define-fun Witness2 () String (str.++ "c" (str.++ "p" (str.++ "[" (str.++ "u" (str.++ "r" (str.++ "l" (str.++ "\u{22}" (str.++ "]" (str.++ "[" (str.++ "/" (str.++ "u" (str.++ "r" (str.++ "l" (str.++ "]" "")))))))))))))))

(assert (= regexA (re.++ (re.++ (str.to_re (str.++ "[" (str.++ "u" (str.++ "r" (str.++ "l" "")))))(re.++ (re.opt (re.range "=" "=")) (re.opt (re.range "\u{22}" "\u{22}"))))(re.++ (re.* (re.union (re.range "\u{00}" "!")(re.union (re.range "#" "\u{5c}") (re.range "^" "\u{ff}"))))(re.++ (re.++ (re.opt (re.range "\u{22}" "\u{22}")) (re.range "]" "]"))(re.++ (re.* (re.union (re.range "\u{00}" "Z") (re.range "\u{5c}" "\u{ff}"))) (str.to_re (str.++ "[" (str.++ "/" (str.++ "u" (str.++ "r" (str.++ "l" (str.++ "]" "")))))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "\u{0a}" (str.++ "W" (str.++ "@" (str.++ "a" (str.++ "9" (str.++ "p" "")))))))

(define-fun Witness2 () String (str.++ "q" (str.++ "6" (str.++ "y" (str.++ "0" (str.++ "l" (str.++ "-" (str.++ "@" (str.++ "." (str.++ "\u{13}" ""))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.* (re.union (re.range "\u{0a}" "\u{0a}")(re.union (re.range " " " ")(re.union (re.range "&" "'")(re.union (re.range ";" ";")(re.union (re.range "l" "l")(re.union (re.range "o" "o")(re.union (re.range "q" "q") (re.range "t" "u"))))))))) (re.++ (re.+ (re.union (re.range "-" ".")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_") (re.range "a" "z"))))))(re.++ (re.range "@" "@") (re.+ (re.union (re.range "-" ".")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_") (re.range "a" "z"))))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "-" (str.++ "2" (str.++ "8" (str.++ "x" (str.++ "h" (str.++ "-" (str.++ "\u{98}" (str.++ "\u{c8}" "")))))))))

(define-fun Witness2 () String (str.++ "E" (str.++ "\u{03}" (str.++ "-" (str.++ "0" (str.++ "9" (str.++ "x" "")))))))

(assert (= regexA (re.++ (re.range "-" "-")(re.++ (re.* (re.range "0" "9"))(re.++ (re.range "x" "x") (re.* (re.range "0" "9")))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "]" (str.++ "\u{c5}" (str.++ "=" (str.++ "\u{22}" (str.++ "\u{5c}" (str.++ "@" (str.++ "\u{5c}" (str.++ ":" (str.++ "\u{5c}" (str.++ "@" (str.++ "\u{5c}" (str.++ "@" (str.++ "\u{5c}" (str.++ "%" (str.++ "\u{5c}" (str.++ "\u{04}" (str.++ "\u{5c}" (str.++ "\u{d7}" (str.++ "\u{5c}" (str.++ "@" (str.++ "\u{5c}" (str.++ "$" (str.++ "\u{22}" (str.++ "." (str.++ ")" (str.++ "\u{e7}" "")))))))))))))))))))))))))))

(define-fun Witness2 () String (str.++ "8" (str.++ " " (str.++ "=" (str.++ "\u{22}" (str.++ "\u{5c}" (str.++ "\u{f7}" (str.++ "\u{aa}" (str.++ "X" (str.++ "\u{5c}" (str.++ "=" (str.++ "A" (str.++ "^" (str.++ "\u{5c}" (str.++ "\u{d7}" (str.++ "\u{5c}" (str.++ "\u{0d}" (str.++ "\u{5c}" (str.++ "\u{ab}" (str.++ "\u{5c}" (str.++ "\u{bb}" (str.++ "\u{5c}" (str.++ "`" (str.++ "\u{5c}" (str.++ "\u{a5}" (str.++ "\u{5c}" (str.++ "\u{f7}" (str.++ "\u{5c}" (str.++ "\u{d7}" (str.++ "\u{5c}" (str.++ "\u{03}" (str.++ "\u{5c}" (str.++ "\u{d7}" (str.++ "\u{5c}" (str.++ "\u{96}" (str.++ "\u{f5}" (str.++ "\u{93}" (str.++ "\u{5c}" (str.++ "\u{f7}" (str.++ "7" (str.++ "\u{22}" (str.++ "\u{15}" (str.++ "\u{e6}" (str.++ "G" ""))))))))))))))))))))))))))))))))))))))))))))

(assert (= regexA (re.++ (re.* (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))(re.++ (re.* (re.range " " " "))(re.++ (re.range "=" "=")(re.++ (re.* (re.range " " " "))(re.++ (re.range "\u{22}" "\u{22}")(re.++ (re.* (re.++ (re.* (re.++ (re.* (re.++ (re.range "\u{5c}" "\u{5c}") (re.union (re.range "\u{00}" "/")(re.union (re.range ":" "@")(re.union (re.range "[" "^")(re.union (re.range "`" "`")(re.union (re.range "{" "\u{a9}")(re.union (re.range "\u{ab}" "\u{b4}")(re.union (re.range "\u{b6}" "\u{b9}")(re.union (re.range "\u{bb}" "\u{bf}")(re.union (re.range "\u{d7}" "\u{d7}") (re.range "\u{f7}" "\u{f7}"))))))))))))(re.++ (re.range "\u{5c}" "\u{5c}") (re.union (re.range "\u{00}" "/")(re.union (re.range ":" "@")(re.union (re.range "[" "^")(re.union (re.range "`" "`")(re.union (re.range "{" "\u{a9}")(re.union (re.range "\u{ab}" "\u{b4}")(re.union (re.range "\u{b6}" "\u{b9}")(re.union (re.range "\u{bb}" "\u{bf}")(re.union (re.range "\u{d7}" "\u{d7}") (re.range "\u{f7}" "\u{f7}")))))))))))))(re.++ (re.* (re.union (re.range "\u{00}" "!") (re.range "#" "\u{ff}")))(re.++ (re.range "\u{5c}" "\u{5c}") (re.union (re.range "\u{00}" "/")(re.union (re.range ":" "@")(re.union (re.range "[" "^")(re.union (re.range "`" "`")(re.union (re.range "{" "\u{a9}")(re.union (re.range "\u{ab}" "\u{b4}")(re.union (re.range "\u{b6}" "\u{b9}")(re.union (re.range "\u{bb}" "\u{bf}")(re.union (re.range "\u{d7}" "\u{d7}") (re.range "\u{f7}" "\u{f7}"))))))))))))))(re.++ (re.* (re.union (re.range "\u{00}" "!") (re.range "#" "\u{ff}"))) (re.range "\u{22}" "\u{22}"))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "\u{0e}" (str.++ " " (str.++ "\u{91}" (str.++ "\u{82}" (str.++ "_" (str.++ "\u{06}" "")))))))

(define-fun Witness2 () String (str.++ " " (str.++ "\u{13}" (str.++ "\u{f4}" ""))))

(assert (= regexA (re.union (str.to_re (str.++ " " (str.++ " " ""))) (re.range " " " "))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "\u{fe}" (str.++ "h" (str.++ "r" (str.++ "e" (str.++ "f" (str.++ "=" (str.++ "'" (str.++ "\u{9a}" (str.++ "c" (str.++ "s" (str.++ "s" (str.++ "'" "")))))))))))))

(define-fun Witness2 () String (str.++ "\u{06}" (str.++ "\u{83}" (str.++ "l" (str.++ "\u{db}" (str.++ "u" (str.++ "r" (str.++ "l" (str.++ "\u{22}" (str.++ "u" (str.++ "c" (str.++ "s" (str.++ "s" (str.++ "'" (str.++ "\u{a2}" "")))))))))))))))

(assert (= regexA (re.++ (re.union (str.to_re (str.++ "h" (str.++ "r" (str.++ "e" (str.++ "f" (str.++ "=" ""))))))(re.union (str.to_re (str.++ "u" (str.++ "r" (str.++ "l" "")))) (str.to_re (str.++ "i" (str.++ "m" (str.++ "p" (str.++ "o" (str.++ "r" (str.++ "t" "")))))))))(re.++ (re.* (re.union (re.range "\u{00}" "\u{09}") (re.range "\u{0b}" "\u{ff}")))(re.++ (re.union (re.range "\u{22}" "\u{22}") (re.range "'" "'"))(re.++ (re.++ (re.union (re.range "\u{00}" "'")(re.union (re.range "*" "9")(re.union (re.range ";" "g")(re.union (re.range "i" "o")(re.union (re.range "q" "s") (re.range "u" "\u{ff}"))))))(re.++ (re.* (re.union (re.range "\u{00}" "\u{09}") (re.range "\u{0b}" "\u{ff}"))) (str.to_re (str.++ "c" (str.++ "s" (str.++ "s" "")))))) (re.union (re.range "\u{22}" "\u{22}") (re.range "'" "'"))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "\u{95}" (str.++ "\u{cb}" (str.++ "\u{e1}" (str.++ "&" (str.++ "l" (str.++ "t" (str.++ ";" (str.++ "\u{0a}" (str.++ "\u{8d}" (str.++ "=" (str.++ "." (str.++ "j" (str.++ "p" (str.++ "g" (str.++ "&" (str.++ "q" (str.++ "u" (str.++ "o" (str.++ "t" (str.++ ";" (str.++ "&" (str.++ "g" (str.++ "t" (str.++ ";" (str.++ "n" ""))))))))))))))))))))))))))

(define-fun Witness2 () String (str.++ "&" (str.++ "l" (str.++ "t" (str.++ ";" (str.++ "\u{19}" (str.++ "\u{d1}" (str.++ "\u{b7}" (str.++ "\u{9c}" (str.++ "\u{d1}" (str.++ "=" (str.++ "." (str.++ "j" (str.++ "p" (str.++ "g" (str.++ "'" (str.++ "f" (str.++ "\u{97}" (str.++ "\u{d0}" (str.++ "&" (str.++ "g" (str.++ "t" (str.++ ";" (str.++ "t" ""))))))))))))))))))))))))

(assert (= regexA (re.++ (str.to_re (str.++ "&" (str.++ "l" (str.++ "t" (str.++ ";" "")))))(re.++ (re.* (re.union (re.range "\u{00}" "%")(re.union (re.range "'" ":")(re.union (re.range "<" "f")(re.union (re.range "h" "s") (re.range "u" "\u{ff}"))))))(re.++ (re.opt (re.range "\u{0a}" "\u{0a}"))(re.++ (re.* (re.union (re.range "\u{00}" "\u{09}") (re.range "\u{0b}" "\u{ff}")))(re.++ (re.range "=" "=")(re.++ (re.opt (re.union (str.to_re (str.++ "&" (str.++ "q" (str.++ "u" (str.++ "o" (str.++ "t" (str.++ ";" ""))))))) (re.range "'" "'")))(re.++ (re.++ (re.* (re.union (re.range "\u{00}" "\u{09}") (re.range "\u{0b}" "\u{ff}"))) (str.to_re (str.++ "." (str.++ "j" (str.++ "p" (str.++ "g" ""))))))(re.++ (re.opt (re.union (str.to_re (str.++ "&" (str.++ "q" (str.++ "u" (str.++ "o" (str.++ "t" (str.++ ";" ""))))))) (re.range "'" "'")))(re.++ (re.* (re.union (re.range "\u{00}" "\u{09}") (re.range "\u{0b}" "\u{ff}")))(re.++ (re.opt (re.range "\u{0a}" "\u{0a}"))(re.++ (re.* (re.union (re.range "\u{00}" "%")(re.union (re.range "'" ":")(re.union (re.range "<" "k")(re.union (re.range "m" "s") (re.range "u" "\u{ff}")))))) (str.to_re (str.++ "&" (str.++ "g" (str.++ "t" (str.++ ";" ""))))))))))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String "")

(define-fun Witness2 () String (str.++ "+" ""))

(assert (= regexA (re.union (re.++ (str.to_re (str.++ "U" (str.++ "P" (str.++ "D" (str.++ "A" (str.++ "T" (str.++ "E" "")))))))(re.++ (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))(re.++ (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))(re.++ (str.to_re (str.++ "S" (str.++ "E" (str.++ "T" ""))))(re.++ (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))) (re.+ (re.union (re.range "'" "'")(re.union (re.range "," ",")(re.union (re.range "0" "9")(re.union (re.range "=" "=")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))))))))))) (str.to_re ""))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "&" (str.++ "a" (str.++ "m" (str.++ "p" (str.++ ";" (str.++ "l" (str.++ "t" (str.++ ";" (str.++ "/" (str.++ "z" (str.++ "-" (str.++ " " (str.++ "\u{85}" (str.++ "\u{a0}" (str.++ "\u{85}" (str.++ "\u{c0}" (str.++ "\u{c8}" (str.++ "\u{d1}" (str.++ "_" (str.++ "\u{b5}" (str.++ "&" (str.++ "a" (str.++ "m" (str.++ "p" (str.++ ";" (str.++ "g" (str.++ "t" (str.++ ";" "")))))))))))))))))))))))))))))

(define-fun Witness2 () String (str.++ "&" (str.++ "a" (str.++ "m" (str.++ "p" (str.++ ";" (str.++ "l" (str.++ "t" (str.++ ";" (str.++ "/" (str.++ "y" (str.++ "C" (str.++ "c" (str.++ "\u{a0}" (str.++ "\u{0b}" (str.++ "&" (str.++ "a" (str.++ "m" (str.++ "p" (str.++ ";" (str.++ "g" (str.++ "t" (str.++ ";" (str.++ "\u{e0}" ""))))))))))))))))))))))))

(assert (= regexA (re.++ (str.to_re (str.++ "&" (str.++ "a" (str.++ "m" (str.++ "p" (str.++ ";" (str.++ "l" (str.++ "t" (str.++ ";" "")))))))))(re.++ (re.opt (re.range "/" "/"))(re.++ (re.++ (re.union (re.range "A" "Z") (re.range "a" "z")) ((_ re.loop 0 71) (re.union (re.range "-" ".")(re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z"))))))(re.++ (re.* (re.++ (re.+ (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (re.+ (re.union (re.range "\u{00}" "\u{08}")(re.union (re.range "\u{0e}" "\u{1f}")(re.union (re.range "!" "\u{84}")(re.union (re.range "\u{86}" "\u{9f}") (re.range "\u{a1}" "\u{ff}")))))) (re.opt (re.++ (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (re.range "=" "=")(re.++ (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))) (re.union ((_ re.loop 1 1024) (re.union (re.range "-" ".")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))))(re.union (re.++ (str.to_re (str.++ "&" (str.++ "a" (str.++ "m" (str.++ "p" (str.++ ";" (str.++ "q" (str.++ "u" (str.++ "o" (str.++ "t" (str.++ ";" "")))))))))))(re.++ ((_ re.loop 0 1024) (re.union (re.range "\u{00}" "%")(re.union (re.range "'" ":")(re.union (re.range "<" "`")(re.union (re.range "b" "l")(re.union (re.range "n" "n")(re.union (re.range "r" "s") (re.range "v" "\u{ff}")))))))) (str.to_re (str.++ "&" (str.++ "a" (str.++ "m" (str.++ "p" (str.++ ";" (str.++ "q" (str.++ "u" (str.++ "o" (str.++ "t" (str.++ ";" ""))))))))))))) (re.++ (re.range "'" "'")(re.++ ((_ re.loop 0 1024) (re.union (re.range "\u{00}" "&") (re.range "(" "\u{ff}"))) (re.range "'" "'"))))))))))))(re.++ (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))) (str.to_re (str.++ "&" (str.++ "a" (str.++ "m" (str.++ "p" (str.++ ";" (str.++ "g" (str.++ "t" (str.++ ";" ""))))))))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "p" (str.++ "w" (str.++ "w" (str.++ "w" (str.++ "\u{1b}" (str.++ "f" (str.++ "t" (str.++ "p" (str.++ ":" (str.++ "/" (str.++ "/" (str.++ "f" (str.++ "t" (str.++ "p" (str.++ ":" (str.++ "/" (str.++ "/" (str.++ "." (str.++ "." (str.++ "q" (str.++ "B" (str.++ "m" "")))))))))))))))))))))))

(define-fun Witness2 () String (str.++ "w" (str.++ "w" (str.++ "w" (str.++ "O" (str.++ "h" (str.++ "t" (str.++ "t" (str.++ "p" (str.++ "s" (str.++ ":" (str.++ "/" (str.++ "/" (str.++ "9" (str.++ "." (str.++ "8" (str.++ "." (str.++ "5" (str.++ "8" (str.++ "3" (str.++ "." (str.++ "3" ""))))))))))))))))))))))

(assert (= regexA (re.++ (re.+ (re.union (re.union (str.to_re (str.++ "h" (str.++ "t" (str.++ "t" (str.++ "p" (str.++ ":" (str.++ "/" (str.++ "/" ""))))))))(re.union (str.to_re (str.++ "h" (str.++ "t" (str.++ "t" (str.++ "p" (str.++ "s" (str.++ ":" (str.++ "/" (str.++ "/" ""))))))))) (str.to_re (str.++ "f" (str.++ "t" (str.++ "p" (str.++ ":" (str.++ "/" (str.++ "/" ""))))))))) (re.++ (str.to_re (str.++ "w" (str.++ "w" (str.++ "w" "")))) (re.union (re.range "\u{00}" "\u{09}") (re.range "\u{0b}" "\u{ff}")))))(re.++ (re.union (re.++ (re.+ (re.union (re.range "-" ".")(re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))))(re.++ (re.range "." ".") ((_ re.loop 2 4) (re.union (re.range "A" "Z") (re.range "a" "z"))))) (re.++ ((_ re.loop 1 3) (re.range "0" "9"))(re.++ (re.range "." ".")(re.++ ((_ re.loop 1 3) (re.range "0" "9"))(re.++ (re.range "." ".")(re.++ ((_ re.loop 1 3) (re.range "0" "9"))(re.++ (re.range "." ".") ((_ re.loop 1 3) (re.range "0" "9"))))))))) (re.opt (re.++ (re.range "/" "/") (re.* (re.union (re.range "%" "%")(re.union (re.range "'" "'")(re.union (re.range "." "_")(re.union (re.range "a" "z") (re.range "~" "~"))))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "\u{e6}" (str.++ "@" (str.++ "9" (str.++ "." (str.++ "5" (str.++ "9" (str.++ "." (str.++ "8" (str.++ "5" (str.++ "." (str.++ "3" (str.++ "7" (str.++ "9" ""))))))))))))))

(define-fun Witness2 () String (str.++ "z" (str.++ "0" (str.++ "@" (str.++ "d" (str.++ "k" (str.++ "." (str.++ "2" (str.++ "." (str.++ "\u{b5}" (str.++ "\u{aa}" (str.++ "." (str.++ "\u{e6}" (str.++ "." (str.++ "\u{c3}" (str.++ "\u{b5}" (str.++ "\u{ba}" (str.++ "8" (str.++ "\u{aa}" (str.++ "." (str.++ "9" (str.++ "." (str.++ "p" (str.++ "e" (str.++ "\u{d5}" (str.++ "\u{c9}" (str.++ "\u{fb}" (str.++ "^" (str.++ ">" "")))))))))))))))))))))))))))))

(assert (= regexA (re.++ (re.* (re.union (re.range "-" ".")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))))(re.++ (re.range "@" "@") (re.union (re.++ ((_ re.loop 1 3) (re.range "0" "9"))(re.++ (re.range "." ".")(re.++ ((_ re.loop 1 3) (re.range "0" "9"))(re.++ (re.range "." ".")(re.++ ((_ re.loop 1 3) (re.range "0" "9"))(re.++ (re.range "." ".") ((_ re.loop 1 3) (re.range "0" "9")))))))) (re.++ (re.+ (re.++ (re.+ (re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))) (re.range "." "."))) (re.opt (re.union (str.to_re (str.++ "a" (str.++ "f" "")))(re.union (str.to_re (str.++ "a" (str.++ "x" "")))(re.union (str.to_re (str.++ "a" (str.++ "l" "")))(re.union (str.to_re (str.++ "d" (str.++ "z" "")))(re.union (str.to_re (str.++ "a" (str.++ "s" "")))(re.union (str.to_re (str.++ "a" (str.++ "d" "")))(re.union (str.to_re (str.++ "a" (str.++ "o" "")))(re.union (str.to_re (str.++ "a" (str.++ "i" "")))(re.union (str.to_re (str.++ "a" (str.++ "q" "")))(re.union (str.to_re (str.++ "a" (str.++ "g" "")))(re.union (str.to_re (str.++ "a" (str.++ "m" "")))(re.union (str.to_re (str.++ "a" (str.++ "w" "")))(re.union (str.to_re (str.++ "a" (str.++ "u" "")))(re.union (str.to_re (str.++ "a" (str.++ "t" "")))(re.union (str.to_re (str.++ "a" (str.++ "z" "")))(re.union (str.to_re (str.++ "b" (str.++ "s" "")))(re.union (str.to_re (str.++ "b" (str.++ "h" "")))(re.union (str.to_re (str.++ "b" (str.++ "d" "")))(re.union (str.to_re (str.++ "b" (str.++ "b" "")))(re.union (str.to_re (str.++ "b" (str.++ "y" "")))(re.union (str.to_re (str.++ "b" (str.++ "e" "")))(re.union (str.to_re (str.++ "b" (str.++ "z" "")))(re.union (str.to_re (str.++ "b" (str.++ "j" "")))(re.union (str.to_re (str.++ "b" (str.++ "m" "")))(re.union (str.to_re (str.++ "b" (str.++ "t" "")))(re.union (str.to_re (str.++ "b" (str.++ "o" "")))(re.union (str.to_re (str.++ "b" (str.++ "a" "")))(re.union (str.to_re (str.++ "b" (str.++ "w" "")))(re.union (str.to_re (str.++ "b" (str.++ "v" "")))(re.union (str.to_re (str.++ "b" (str.++ "r" "")))(re.union (str.to_re (str.++ "i" (str.++ "o" "")))(re.union (str.to_re (str.++ "b" (str.++ "n" "")))(re.union (str.to_re (str.++ "b" (str.++ "g" "")))(re.union (str.to_re (str.++ "b" (str.++ "f" "")))(re.union (str.to_re (str.++ "k" (str.++ "h" "")))(re.union (str.to_re (str.++ "c" (str.++ "m" "")))(re.union (str.to_re (str.++ "c" (str.++ "a" "")))(re.union (str.to_re (str.++ "c" (str.++ "v" "")))(re.union (str.to_re (str.++ "k" (str.++ "y" "")))(re.union (str.to_re (str.++ "c" (str.++ "f" "")))(re.union (str.to_re (str.++ "t" (str.++ "d" "")))(re.union (str.to_re (str.++ "c" (str.++ "l" "")))(re.union (str.to_re (str.++ "c" (str.++ "n" "")))(re.union (str.to_re (str.++ "c" (str.++ "x" "")))(re.union (str.to_re (str.++ "c" (str.++ "c" "")))(re.union (str.to_re (str.++ "k" (str.++ "m" "")))(re.union (str.to_re (str.++ "c" (str.++ "g" "")))(re.union (str.to_re (str.++ "c" (str.++ "d" "")))(re.union (str.to_re (str.++ "c" (str.++ "k" "")))(re.union (str.to_re (str.++ "c" (str.++ "r" "")))(re.union (str.to_re (str.++ "c" (str.++ "i" "")))(re.union (str.to_re (str.++ "h" (str.++ "r" "")))(re.union (str.to_re (str.++ "c" (str.++ "u" "")))(re.union (str.to_re (str.++ "c" (str.++ "y" "")))(re.union (str.to_re (str.++ "c" (str.++ "z" "")))(re.union (str.to_re (str.++ "d" (str.++ "k" "")))(re.union (str.to_re (str.++ "d" (str.++ "j" "")))(re.union (str.to_re (str.++ "d" (str.++ "m" "")))(re.union (str.to_re (str.++ "d" (str.++ "o" "")))(re.union (str.to_re (str.++ "e" (str.++ "c" "")))(re.union (str.to_re (str.++ "e" (str.++ "g" "")))(re.union (str.to_re (str.++ "s" (str.++ "v" "")))(re.union (str.to_re (str.++ "g" (str.++ "q" "")))(re.union (str.to_re (str.++ "e" (str.++ "r" "")))(re.union (str.to_re (str.++ "e" (str.++ "e" "")))(re.union (str.to_re (str.++ "e" (str.++ "t" "")))(re.union (str.to_re (str.++ "f" (str.++ "k" "")))(re.union (str.to_re (str.++ "f" (str.++ "o" "")))(re.union (str.to_re (str.++ "f" (str.++ "j" "")))(re.union (str.to_re (str.++ "f" (str.++ "i" "")))(re.union (str.to_re (str.++ "f" (str.++ "r" "")))(re.union (str.to_re (str.++ "g" (str.++ "f" "")))(re.union (str.to_re (str.++ "p" (str.++ "f" "")))(re.union (str.to_re (str.++ "t" (str.++ "f" "")))(re.union (str.to_re (str.++ "g" (str.++ "a" "")))(re.union (str.to_re (str.++ "g" (str.++ "m" "")))(re.union (str.to_re (str.++ "g" (str.++ "e" "")))(re.union (str.to_re (str.++ "d" (str.++ "e" "")))(re.union (str.to_re (str.++ "g" (str.++ "h" "")))(re.union (str.to_re (str.++ "g" (str.++ "i" "")))(re.union (str.to_re (str.++ "g" (str.++ "r" "")))(re.union (str.to_re (str.++ "g" (str.++ "l" "")))(re.union (str.to_re (str.++ "g" (str.++ "d" "")))(re.union (str.to_re (str.++ "g" (str.++ "p" "")))(re.union (str.to_re (str.++ "g" (str.++ "u" "")))(re.union (str.to_re (str.++ "g" (str.++ "t" "")))(re.union (str.to_re (str.++ " " (str.++ "g" (str.++ "g" ""))))(re.union (str.to_re (str.++ "g" (str.++ "n" "")))(re.union (str.to_re (str.++ "g" (str.++ "w" "")))(re.union (str.to_re (str.++ "g" (str.++ "y" "")))(re.union (str.to_re (str.++ "h" (str.++ "t" "")))(re.union (str.to_re (str.++ "h" (str.++ "m" "")))(re.union (str.to_re (str.++ "v" (str.++ "a" "")))(re.union (str.to_re (str.++ "h" (str.++ "n" "")))(re.union (str.to_re (str.++ "h" (str.++ "k" "")))(re.union (str.to_re (str.++ "h" (str.++ "u" "")))(re.union (str.to_re (str.++ "i" (str.++ "s" "")))(re.union (str.to_re (str.++ "i" (str.++ "d" "")))(re.union (str.to_re (str.++ "i" (str.++ "r" "")))(re.union (str.to_re (str.++ "i" (str.++ "q" "")))(re.union (str.to_re (str.++ "i" (str.++ "e" "")))(re.union (str.to_re (str.++ "i" (str.++ "m" "")))(re.union (str.to_re (str.++ "i" (str.++ "l" "")))(re.union (str.to_re (str.++ "i" (str.++ "t" "")))(re.union (str.to_re (str.++ "j" (str.++ "m" "")))(re.union (str.to_re (str.++ "j" (str.++ "p" "")))(re.union (str.to_re (str.++ "j" (str.++ "e" "")))(re.union (str.to_re (str.++ "j" (str.++ "o" "")))(re.union (str.to_re (str.++ "k" (str.++ "z" "")))(re.union (str.to_re (str.++ "k" (str.++ "e" "")))(re.union (str.to_re (str.++ "k" (str.++ "i" "")))(re.union (str.to_re (str.++ "k" (str.++ "p" "")))(re.union (str.to_re (str.++ "k" (str.++ "r" "")))(re.union (str.to_re (str.++ "k" (str.++ "w" "")))(re.union (str.to_re (str.++ "k" (str.++ "g" "")))(re.union (str.to_re (str.++ "l" (str.++ "a" "")))(re.union (str.to_re (str.++ "l" (str.++ "v" "")))(re.union (str.to_re (str.++ "l" (str.++ "b" "")))(re.union (str.to_re (str.++ "l" (str.++ "s" "")))(re.union (str.to_re (str.++ "l" (str.++ "r" "")))(re.union (str.to_re (str.++ "l" (str.++ "y" "")))(re.union (str.to_re (str.++ "l" (str.++ "i" "")))(re.union (str.to_re (str.++ "l" (str.++ "t" "")))(re.union (str.to_re (str.++ "l" (str.++ "u" "")))(re.union (str.to_re (str.++ "m" (str.++ "o" "")))(re.union (str.to_re (str.++ "m" (str.++ "k" "")))(re.union (str.to_re (str.++ "m" (str.++ "g" "")))(re.union (str.to_re (str.++ "m" (str.++ "w" "")))(re.union (str.to_re (str.++ "m" (str.++ "y" "")))(re.union (str.to_re (str.++ "m" (str.++ "v" "")))(re.union (str.to_re (str.++ "m" (str.++ "l" "")))(re.union (str.to_re (str.++ "m" (str.++ "t" "")))(re.union (str.to_re (str.++ "m" (str.++ "h" "")))(re.union (str.to_re (str.++ "m" (str.++ "q" "")))(re.union (str.to_re (str.++ "m" (str.++ "r" "")))(re.union (str.to_re (str.++ "y" (str.++ "t" "")))(re.union (str.to_re (str.++ "m" (str.++ "x" "")))(re.union (str.to_re (str.++ "f" (str.++ "m" "")))(re.union (str.to_re (str.++ "m" (str.++ "d" "")))(re.union (str.to_re (str.++ "m" (str.++ "c" "")))(re.union (str.to_re (str.++ "m" (str.++ "n" "")))(re.union (str.to_re (str.++ "m" (str.++ "s" "")))(re.union (str.to_re (str.++ "m" (str.++ "a" "")))(re.union (str.to_re (str.++ "m" (str.++ "z" "")))(re.union (str.to_re (str.++ "m" (str.++ "m" "")))(re.union (str.to_re (str.++ "n" (str.++ "r" "")))(re.union (str.to_re (str.++ "n" (str.++ "p" "")))(re.union (str.to_re (str.++ "n" (str.++ "l" "")))(re.union (str.to_re (str.++ "a" (str.++ "n" "")))(re.union (str.to_re (str.++ "n" (str.++ "c" "")))(re.union (str.to_re (str.++ "n" (str.++ "z" "")))(re.union (str.to_re (str.++ "n" (str.++ "i" "")))(re.union (str.to_re (str.++ "n" (str.++ "g" "")))(re.union (str.to_re (str.++ "n" (str.++ "u" "")))(re.union (str.to_re (str.++ "n" (str.++ "f" "")))(re.union (str.to_re (str.++ "m" (str.++ "p" "")))(re.union (str.to_re (str.++ "n" (str.++ "o" "")))(re.union (str.to_re (str.++ "o" (str.++ "m" "")))(re.union (str.to_re (str.++ "p" (str.++ "k" "")))(re.union (str.to_re (str.++ "p" (str.++ "w" "")))(re.union (str.to_re (str.++ "p" (str.++ "s" "")))(re.union (str.to_re (str.++ "p" (str.++ "a" "")))(re.union (str.to_re (str.++ "p" (str.++ "g" "")))(re.union (str.to_re (str.++ "p" (str.++ "y" "")))(re.union (str.to_re (str.++ "p" (str.++ "e" "")))(re.union (str.to_re (str.++ "p" (str.++ "h" "")))(re.union (str.to_re (str.++ "p" (str.++ "n" "")))(re.union (str.to_re (str.++ "p" (str.++ "l" "")))(re.union (str.to_re (str.++ "p" (str.++ "t" "")))(re.union (str.to_re (str.++ "q" (str.++ "a" "")))(re.union (str.to_re (str.++ "r" (str.++ "e" "")))(re.union (str.to_re (str.++ "r" (str.++ "o" "")))(re.union (str.to_re (str.++ "r" (str.++ "u" "")))(re.union (str.to_re (str.++ "r" (str.++ "w" "")))(re.union (str.to_re (str.++ "s" (str.++ "h" "")))(re.union (str.to_re (str.++ "k" (str.++ "n" "")))(re.union (str.to_re (str.++ "l" (str.++ "c" "")))(re.union (str.to_re (str.++ "p" (str.++ "m" "")))(re.union (str.to_re (str.++ "v" (str.++ "c" "")))(re.union (str.to_re (str.++ "w" (str.++ "s" "")))(re.union (str.to_re (str.++ "s" (str.++ "m" "")))(re.union (str.to_re (str.++ "s" (str.++ "t" "")))(re.union (str.to_re (str.++ "s" (str.++ "a" "")))(re.union (str.to_re (str.++ "s" (str.++ "n" "")))(re.union (str.to_re (str.++ "c" (str.++ "s" "")))(re.union (str.to_re (str.++ "s" (str.++ "c" "")))(re.union (str.to_re (str.++ "s" (str.++ "l" "")))(re.union (str.to_re (str.++ "s" (str.++ "g" "")))(re.union (str.to_re (str.++ "s" (str.++ "k" "")))(re.union (str.to_re (str.++ "s" (str.++ "i" "")))(re.union (str.to_re (str.++ "s" (str.++ "b" "")))(re.union (str.to_re (str.++ "s" (str.++ "o" "")))(re.union (str.to_re (str.++ "z" (str.++ "a" "")))(re.union (str.to_re (str.++ "g" (str.++ "s" "")))(re.union (str.to_re (str.++ "e" (str.++ "s" "")))(re.union (str.to_re (str.++ "l" (str.++ "k" "")))(re.union (str.to_re (str.++ "s" (str.++ "d" "")))(re.union (str.to_re (str.++ "s" (str.++ "r" "")))(re.union (str.to_re (str.++ "s" (str.++ "j" "")))(re.union (str.to_re (str.++ "s" (str.++ "z" "")))(re.union (str.to_re (str.++ "s" (str.++ "e" "")))(re.union (str.to_re (str.++ "c" (str.++ "h" "")))(re.union (str.to_re (str.++ "s" (str.++ "y" "")))(re.union (str.to_re (str.++ "t" (str.++ "w" "")))(re.union (str.to_re (str.++ "t" (str.++ "j" "")))(re.union (str.to_re (str.++ "t" (str.++ "z" "")))(re.union (str.to_re (str.++ "t" (str.++ "h" "")))(re.union (str.to_re (str.++ "t" (str.++ "l" "")))(re.union (str.to_re (str.++ "t" (str.++ "g" "")))(re.union (str.to_re (str.++ "t" (str.++ "k" "")))(re.union (str.to_re (str.++ "t" (str.++ "o" "")))(re.union (str.to_re (str.++ "t" (str.++ "t" "")))(re.union (str.to_re (str.++ "t" (str.++ "n" "")))(re.union (str.to_re (str.++ "t" (str.++ "r" "")))(re.union (str.to_re (str.++ "t" (str.++ "m" "")))(re.union (str.to_re (str.++ "t" (str.++ "c" "")))(re.union (str.to_re (str.++ "t" (str.++ "v" "")))(re.union (str.to_re (str.++ "u" (str.++ "g" "")))(re.union (str.to_re (str.++ "u" (str.++ "a" "")))(re.union (str.to_re (str.++ "g" (str.++ "b" "")))(re.union (str.to_re (str.++ "u" (str.++ "s" "")))(re.union (str.to_re (str.++ "u" (str.++ "m" "")))(re.union (str.to_re (str.++ "u" (str.++ "y" "")))(re.union (str.to_re (str.++ "u" (str.++ "z" "")))(re.union (str.to_re (str.++ "v" (str.++ "u" "")))(re.union (str.to_re (str.++ "v" (str.++ "e" "")))(re.union (str.to_re (str.++ "v" (str.++ "n" "")))(re.union (str.to_re (str.++ "v" (str.++ "g" "")))(re.union (str.to_re (str.++ "v" (str.++ "i" "")))(re.union (str.to_re (str.++ "w" (str.++ "f" "")))(re.union (str.to_re (str.++ "e" (str.++ "h" "")))(re.union (str.to_re (str.++ "y" (str.++ "e" "")))(re.union (str.to_re (str.++ "z" (str.++ "m" "")))(re.union (str.to_re (str.++ "z" (str.++ "w" "")))(re.union (str.to_re (str.++ "u" (str.++ "k" "")))(re.union (str.to_re (str.++ "c" (str.++ "o" (str.++ "m" ""))))(re.union (str.to_re (str.++ "e" (str.++ "d" (str.++ "u" ""))))(re.union (str.to_re (str.++ "g" (str.++ "o" (str.++ "v" ""))))(re.union (str.to_re (str.++ "i" (str.++ "n" (str.++ "t" ""))))(re.union (str.to_re (str.++ "m" (str.++ "i" (str.++ "l" ""))))(re.union (str.to_re (str.++ "n" (str.++ "e" (str.++ "t" ""))))(re.union (str.to_re (str.++ "o" (str.++ "r" (str.++ "g" ""))))(re.union (str.to_re (str.++ "b" (str.++ "i" (str.++ "z" ""))))(re.union (str.to_re (str.++ "i" (str.++ "n" (str.++ "f" (str.++ "o" "")))))(re.union (str.to_re (str.++ "n" (str.++ "a" (str.++ "m" (str.++ "e" "")))))(re.union (str.to_re (str.++ "p" (str.++ "r" (str.++ "o" ""))))(re.union (str.to_re (str.++ "a" (str.++ "e" (str.++ "r" (str.++ "o" "")))))(re.union (str.to_re (str.++ "c" (str.++ "o" (str.++ "o" (str.++ "p" "")))))(re.union (str.to_re (str.++ "m" (str.++ "u" (str.++ "s" (str.++ "e" (str.++ "u" (str.++ "m" "")))))))(re.union (str.to_re (str.++ "a" (str.++ "r" (str.++ "p" (str.++ "a" "")))))(re.union (str.to_re (str.++ "c" (str.++ "o" "")))(re.union (str.to_re (str.++ "i" (str.++ "n" "")))(re.union (str.to_re (str.++ "n" (str.++ "e" "")))(re.union (str.to_re (str.++ "b" (str.++ "i" "")))(re.union (str.to_re (str.++ "n" (str.++ "a" "")))(re.union (str.to_re (str.++ "p" (str.++ "r" "")))(re.union (str.to_re (str.++ "a" (str.++ "e" "")))(re.union (str.to_re (str.++ "m" (str.++ "u" ""))) (str.to_re (str.++ "a" (str.++ "r" ""))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "k" (str.++ "5" (str.++ "1" (str.++ "2" (str.++ "4" (str.++ "5" (str.++ "1" (str.++ "2" (str.++ "7" (str.++ "9" (str.++ "1" (str.++ "9" (str.++ "8" (str.++ "0" (str.++ "4" ""))))))))))))))))

(define-fun Witness2 () String (str.++ "F" (str.++ "\u{8d}" (str.++ "\u{15}" (str.++ "\u{87}" (str.++ "\u{a1}" (str.++ "\u{b0}" (str.++ "8" (str.++ "5" (str.++ "3" (str.++ "8" (str.++ "9" (str.++ "4" (str.++ "4" (str.++ "0" (str.++ "4" (str.++ "8" (str.++ "4" ""))))))))))))))))))

(assert (= regexA (re.union (re.union (re.++ (str.to_re "") (re.++ ((_ re.loop 2 2) (re.range "0" "9"))(re.++ (re.union (re.range "\u{00}" "\u{09}") (re.range "\u{0b}" "\u{ff}"))(re.++ ((_ re.loop 3 3) (re.range "0" "9"))(re.++ (re.union (re.range "\u{00}" "\u{09}") (re.range "\u{0b}" "\u{ff}"))(re.++ ((_ re.loop 3 3) (re.range "0" "9"))(re.++ (re.range "/" "/")(re.++ ((_ re.loop 4 4) (re.range "0" "9"))(re.++ (re.range "-" "-") ((_ re.loop 2 2) (re.range "0" "9"))))))))))) (re.++ ((_ re.loop 14 14) (re.range "0" "9")) (str.to_re ""))) (re.union (re.++ (str.to_re "") (re.++ ((_ re.loop 3 3) (re.range "0" "9"))(re.++ (re.union (re.range "\u{00}" "\u{09}") (re.range "\u{0b}" "\u{ff}"))(re.++ ((_ re.loop 3 3) (re.range "0" "9"))(re.++ (re.union (re.range "\u{00}" "\u{09}") (re.range "\u{0b}" "\u{ff}"))(re.++ ((_ re.loop 3 3) (re.range "0" "9"))(re.++ (re.range "-" "-") ((_ re.loop 2 2) (re.range "0" "9"))))))))) (re.++ ((_ re.loop 11 11) (re.range "0" "9")) (str.to_re ""))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "\u{f6}" (str.++ "O" (str.++ "\u{b9}" (str.++ "0" (str.++ "1" (str.++ "8" (str.++ "9" (str.++ "9" (str.++ "8" (str.++ "5" (str.++ "9" (str.++ "8" (str.++ "0" (str.++ "0" "")))))))))))))))

(define-fun Witness2 () String (str.++ "0" (str.++ "1" (str.++ "9" (str.++ "8" (str.++ "3" (str.++ "9" (str.++ "\u{a0}" (str.++ "8" (str.++ "9" (str.++ "8" (str.++ "7" (str.++ "2" "")))))))))))))

(assert (= regexA (re.union (re.++ (str.to_re (str.++ "0" (str.++ "2" "")))(re.++ (re.range "0" "9")(re.++ (re.opt (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ ((_ re.loop 4 4) (re.range "0" "9"))(re.++ (re.opt (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))) ((_ re.loop 4 4) (re.range "0" "9")))))))(re.union (re.++ (str.to_re (str.++ "0" (str.++ "1" "")))(re.++ ((_ re.loop 2 2) (re.range "0" "9"))(re.++ (re.opt (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ ((_ re.loop 3 3) (re.range "0" "9"))(re.++ (re.opt (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))) ((_ re.loop 4 4) (re.range "0" "9")))))))(re.union (re.++ (str.to_re (str.++ "0" (str.++ "1" "")))(re.++ ((_ re.loop 3 3) (re.range "0" "9"))(re.++ (re.opt (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))) ((_ re.loop 5 6) (re.range "0" "9"))))) (re.++ (str.to_re (str.++ "0" (str.++ "1" "")))(re.++ ((_ re.loop 4 4) (re.range "0" "9"))(re.++ (re.opt (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))) ((_ re.loop 4 5) (re.range "0" "9"))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "<" (str.++ "\u{7f}" (str.++ "\u{dd}" (str.++ "\u{85}" (str.++ "j" (str.++ "7" (str.++ "'" (str.++ "\u{1e}" (str.++ "\u{af}" (str.++ ">" (str.++ "\u{fd}" (str.++ "\u{d4}" (str.++ "\u{fc}" ""))))))))))))))

(define-fun Witness2 () String (str.++ "\u{c3}" (str.++ "<" (str.++ "\u{8e}" (str.++ "\u{0b}" (str.++ ">" (str.++ "\u{03}" (str.++ "\u{ac}" (str.++ "Q" (str.++ "\u{bc}" ""))))))))))

(assert (= regexA (re.++ (re.range "<" "<")(re.++ (re.* (re.union (re.range "\u{00}" "\u{08}")(re.union (re.range "\u{0e}" "\u{1f}")(re.union (re.range "!" "=")(re.union (re.range "?" "\u{84}")(re.union (re.range "\u{86}" "\u{9f}") (re.range "\u{a1}" "\u{ff}")))))))(re.++ (re.++ (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))) (re.* (re.union (re.range "\u{00}" ";") (re.range "=" "\u{ff}")))) (re.range ">" ">"))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "\u{e9}" (str.++ "9" (str.++ "9" (str.++ "8" (str.++ "\u{dd}" (str.++ "0" (str.++ "3" (str.++ "9" (str.++ "8" (str.++ "1" (str.++ "9" (str.++ "4" (str.++ "Z" ""))))))))))))))

(define-fun Witness2 () String (str.++ "9" (str.++ "9" (str.++ "8" (str.++ ")" (str.++ "\u{96}" (str.++ "9" (str.++ "8" (str.++ "8" (str.++ "\u{b0}" (str.++ "8" (str.++ "1" (str.++ "8" (str.++ "9" (str.++ "\u{8b}" (str.++ "o" (str.++ "\u{97}" (str.++ "\u{15}" ""))))))))))))))))))

(assert (= regexA (re.++ (re.opt (re.range "(" "("))(re.++ ((_ re.loop 3 3) (re.range "0" "9"))(re.++ (re.opt (re.range ")" ")"))(re.++ (re.opt (re.union (re.union (re.range " " " ") (re.range "-" "-")) (re.union (re.range "\u{00}" "\u{09}") (re.range "\u{0b}" "\u{ff}"))))(re.++ ((_ re.loop 3 3) (re.range "0" "9"))(re.++ (re.opt (re.union (re.union (re.range " " " ") (re.range "-" "-")) (re.union (re.range "\u{00}" "\u{09}") (re.range "\u{0b}" "\u{ff}")))) ((_ re.loop 4 4) (re.range "0" "9"))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "S" (str.++ "K" (str.++ "9" (str.++ "8" (str.++ "2" (str.++ "9" (str.++ "4" (str.++ "9" (str.++ "9" (str.++ "5" (str.++ "8" (str.++ "4" (str.++ "4" (str.++ "8" (str.++ "1" (str.++ "9" (str.++ "9" (str.++ "9" (str.++ "7" (str.++ "4" (str.++ "7" (str.++ "8" (str.++ "6" (str.++ "3" (str.++ "\u{ea}" ""))))))))))))))))))))))))))

(define-fun Witness2 () String (str.++ "S" (str.++ "K" (str.++ "8" (str.++ "6" (str.++ " " (str.++ "3" (str.++ "8" (str.++ "3" (str.++ "9" (str.++ " " (str.++ "8" (str.++ "5" (str.++ "6" (str.++ "8" (str.++ " " (str.++ "8" (str.++ "9" (str.++ "9" (str.++ "8" (str.++ " " (str.++ "5" (str.++ "4" (str.++ "9" (str.++ "9" (str.++ " " (str.++ "9" (str.++ "0" (str.++ "8" (str.++ "3" ""))))))))))))))))))))))))))))))

(assert (= regexA (re.union (re.++ (str.to_re (str.++ "S" (str.++ "K" "")))(re.++ ((_ re.loop 2 2) (re.range "0" "9"))(re.++ (re.range " " " ")(re.++ ((_ re.loop 4 4) (re.range "0" "9"))(re.++ (re.range " " " ")(re.++ ((_ re.loop 4 4) (re.range "0" "9"))(re.++ (re.range " " " ")(re.++ ((_ re.loop 4 4) (re.range "0" "9"))(re.++ (re.range " " " ")(re.++ ((_ re.loop 4 4) (re.range "0" "9"))(re.++ (re.range " " " ") ((_ re.loop 4 4) (re.range "0" "9"))))))))))))) (re.++ (str.to_re (str.++ "S" (str.++ "K" ""))) ((_ re.loop 22 22) (re.range "0" "9"))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "," (str.++ "\u{df}" (str.++ "/" ""))))

(define-fun Witness2 () String (str.++ "," (str.++ "\u{e6}" (str.++ "\u{f8}" (str.++ "\u{86}" (str.++ "-" (str.++ "." "")))))))

(assert (= regexA (re.union (re.range "+" ",")(re.union (re.range "\u{5c}" "\u{5c}") (re.range "s" "s")))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "{" (str.++ "C" (str.++ "E" (str.++ "9" (str.++ "3" (str.++ "8" (str.++ "6" (str.++ "F" (str.++ "D" (str.++ "-" (str.++ "a" (str.++ "8" (str.++ "7" (str.++ "a" (str.++ "-" (str.++ "c" (str.++ "C" (str.++ "F" (str.++ "8" (str.++ "-" (str.++ "7" (str.++ "F" (str.++ "8" (str.++ "2" (str.++ "-" (str.++ "c" (str.++ "d" (str.++ "9" (str.++ "5" (str.++ "1" (str.++ "3" (str.++ "A" (str.++ "D" (str.++ "1" (str.++ "E" (str.++ "2" (str.++ "9" (str.++ "}" "")))))))))))))))))))))))))))))))))))))))

(define-fun Witness2 () String (str.++ "\u{9f}" (str.++ "{" (str.++ "F" (str.++ "A" (str.++ "f" (str.++ "B" (str.++ "b" (str.++ "d" (str.++ "4" (str.++ "A" (str.++ "-" (str.++ "3" (str.++ "F" (str.++ "A" (str.++ "a" (str.++ "-" (str.++ "C" (str.++ "a" (str.++ "a" (str.++ "b" (str.++ "-" (str.++ "c" (str.++ "9" (str.++ "0" (str.++ "5" (str.++ "-" (str.++ "E" (str.++ "F" (str.++ "9" (str.++ "D" (str.++ "8" (str.++ "8" (str.++ "6" (str.++ "6" (str.++ "5" (str.++ "f" (str.++ "5" (str.++ "3" (str.++ "}" (str.++ "\u{8c}" "")))))))))))))))))))))))))))))))))))))))))

(assert (= regexA (re.++ (re.range "{" "{")(re.++ ((_ re.loop 8 8) (re.union (re.range "0" "9")(re.union (re.range "A" "F") (re.range "a" "f"))))(re.++ (re.range "-" "-")(re.++ ((_ re.loop 4 4) (re.union (re.range "0" "9")(re.union (re.range "A" "F") (re.range "a" "f"))))(re.++ (re.range "-" "-")(re.++ ((_ re.loop 4 4) (re.union (re.range "0" "9")(re.union (re.range "A" "F") (re.range "a" "f"))))(re.++ (re.range "-" "-")(re.++ ((_ re.loop 4 4) (re.union (re.range "0" "9")(re.union (re.range "A" "F") (re.range "a" "f"))))(re.++ (re.range "-" "-")(re.++ ((_ re.loop 12 12) (re.union (re.range "0" "9")(re.union (re.range "A" "F") (re.range "a" "f")))) (re.range "}" "}")))))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "|" (str.++ "<" (str.++ "i" (str.++ "m" (str.++ "g" (str.++ "\u{de}" (str.++ " " (str.++ "s" (str.++ "r" (str.++ "c" (str.++ "=" (str.++ "\u{22}" (str.++ "\u{22}" (str.++ "g" (str.++ "\u{a8}" (str.++ ">" "")))))))))))))))))

(define-fun Witness2 () String (str.++ "<" (str.++ "i" (str.++ "m" (str.++ "g" (str.++ "\u{d0}" (str.++ "%" (str.++ " " (str.++ "s" (str.++ "r" (str.++ "c" (str.++ "=" (str.++ "\u{22}" (str.++ "\u{22}" (str.++ "i" (str.++ ">" (str.++ "\u{93}" (str.++ "o" (str.++ "H" "")))))))))))))))))))

(assert (= regexA (re.++ (str.to_re (str.++ "<" (str.++ "i" (str.++ "m" (str.++ "g" "")))))(re.++ (re.* (re.union (re.range "\u{00}" "=") (re.range "?" "\u{ff}")))(re.++ (str.to_re (str.++ " " (str.++ "s" (str.++ "r" (str.++ "c" (str.++ "=" (str.++ "\u{22}" "")))))))(re.++ (re.* (re.union (re.range "\u{00}" "!") (re.range "#" "\u{ff}")))(re.++ (re.range "\u{22}" "\u{22}")(re.++ (re.* (re.union (re.range "\u{00}" "=") (re.range "?" "\u{ff}"))) (re.range ">" ">")))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "}" (str.++ "." (str.++ "t" (str.++ "x" (str.++ "t" ""))))))

(define-fun Witness2 () String (str.++ "\u{ac}" (str.++ "\u{16}" (str.++ "." (str.++ "t" (str.++ "x" (str.++ "t" "")))))))

(assert (= regexA (re.++ (str.to_re (str.++ "." (str.++ "t" (str.++ "x" (str.++ "t" ""))))) (str.to_re ""))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "u" (str.++ "f" (str.++ "u" (str.++ "n" (str.++ "c" (str.++ "t" (str.++ "i" (str.++ "o" (str.++ "n" (str.++ "\u{09}" (str.++ "\u{ab}" (str.++ "\u{0c}" (str.++ " " (str.++ "{" (str.++ "\u{09}" (str.++ "}" (str.++ "\u{16}" (str.++ "\u{9d}" "")))))))))))))))))))

(define-fun Witness2 () String (str.++ "f" (str.++ "u" (str.++ "n" (str.++ "c" (str.++ "t" (str.++ "i" (str.++ "o" (str.++ "n" (str.++ "\u{a0}" (str.++ "\u{04}" (str.++ "\u{0a}" (str.++ "{" (str.++ " " (str.++ "\u{b6}" (str.++ "}" (str.++ "\u{ae}" "")))))))))))))))))

(assert (= regexA (re.++ (str.to_re (str.++ "f" (str.++ "u" (str.++ "n" (str.++ "c" (str.++ "t" (str.++ "i" (str.++ "o" (str.++ "n" "")))))))))(re.++ (re.+ (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (re.+ (re.union (re.range "\u{00}" "\u{08}")(re.union (re.range "\u{0e}" "\u{1f}")(re.union (re.range "!" "\u{84}")(re.union (re.range "\u{86}" "\u{9f}") (re.range "\u{a1}" "\u{ff}"))))))(re.++ (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (re.range "{" "{")(re.++ (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (re.* (re.range "\u{00}" "\u{ff}"))(re.++ (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))) (re.range "}" "}")))))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "\u{b2}" ""))

(define-fun Witness2 () String "")

(assert (= regexA (str.to_re "")))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "\u{b1}" (str.++ "\u{22}" (str.++ "\u{a7}" (str.++ "\u{22}" (str.++ " " ""))))))

(define-fun Witness2 () String (str.++ "\u{14}" (str.++ "I" (str.++ "\u{22}" (str.++ "\u{a3}" (str.++ "\u{22}" (str.++ " " "")))))))

(assert (= regexA (re.++ (re.range "\u{22}" "\u{22}")(re.++ (re.+ (re.union (re.range "\u{00}" "!") (re.range "#" "\u{ff}"))) (str.to_re (str.++ "\u{22}" (str.++ " " "")))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "m" (str.++ "e" (str.++ "g" (str.++ "a" (str.++ "u" (str.++ "p" (str.++ "l" (str.++ "o" (str.++ "a" (str.++ "d" (str.++ "." (str.++ "c" (str.++ "o" (str.++ "m" (str.++ "`" (str.++ "\u{a4}" (str.++ "\u{83}" (str.++ "\u{e3}" (str.++ "&" (str.++ "f" (str.++ "=" (str.++ "-" (str.++ "A" (str.++ "j" (str.++ "9" (str.++ "-" (str.++ "5" (str.++ "-" (str.++ "j" ""))))))))))))))))))))))))))))))

(define-fun Witness2 () String (str.++ "V" (str.++ "m" (str.++ "e" (str.++ "g" (str.++ "a" (str.++ "u" (str.++ "p" (str.++ "l" (str.++ "o" (str.++ "a" (str.++ "d" (str.++ "." (str.++ "c" (str.++ "o" (str.++ "m" (str.++ "&" (str.++ "f" (str.++ "=" (str.++ "a" (str.++ "X" (str.++ "W" (str.++ "8" (str.++ "8" (str.++ "P" (str.++ "X" (str.++ "Z" "")))))))))))))))))))))))))))

(assert (= regexA (re.++ (str.to_re (str.++ "m" (str.++ "e" (str.++ "g" (str.++ "a" (str.++ "u" (str.++ "p" (str.++ "l" (str.++ "o" (str.++ "a" (str.++ "d" (str.++ "." (str.++ "c" (str.++ "o" (str.++ "m" "")))))))))))))))(re.++ (re.* (re.union (re.range "\u{00}" "\u{09}") (re.range "\u{0b}" "\u{ff}")))(re.++ (re.union (re.range "&" "&") (re.range "?" "?"))(re.++ (re.union (re.++ (re.opt (str.to_re (str.++ "f" (str.++ "o" (str.++ "l" (str.++ "d" (str.++ "e" (str.++ "r" (str.++ "i" ""))))))))) (re.range "d" "d")) (re.range "f" "f"))(re.++ (re.range "=" "=") ((_ re.loop 8 8) (re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z"))))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "T" (str.++ "E" (str.++ "S" (str.++ "T" (str.++ "I" (str.++ "N" (str.++ "G" (str.++ "R" (str.++ "X" (str.++ "L" (str.++ "I" (str.++ "B" (str.++ "S" (str.++ "C" (str.++ "H" (str.++ "E" (str.++ "M" (str.++ "A" (str.++ "2" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "\u{93}

(define-fun Witness2 () String (str.++ "T" (str.++ "E" (str.++ "S" (str.++ "T" (str.++ "I" (str.++ "N" (str.++ "G" (str.++ "R" (str.++ "X" (str.++ "L" (str.++ "I" (str.++ "B" (str.++ "S" (str.++ "C" (str.++ "H" (str.++ "E" (str.++ "M" (str.++ "A" (str.++ "2" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "\u{bd}

(assert (= regexA (str.to_re (str.++ "T" (str.++ "E" (str.++ "S" (str.++ "T" (str.++ "I" (str.++ "N" (str.++ "G" (str.++ "R" (str.++ "X" (str.++ "L" (str.++ "I" (str.++ "B" (str.++ "S" (str.++ "C" (str.++ "H" (str.++ "E" (str.++ "M" (str.++ "A" (str.++ "2" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "5" (str


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "I" (str.++ "C" (str.++ "O" (str.++ "N" (str.++ "=" (str.++ "\u{97}" "")))))))

(define-fun Witness2 () String (str.++ "g" (str.++ "I" (str.++ "C" (str.++ "O" (str.++ "N" (str.++ "=" (str.++ "\u{f3}" ""))))))))

(assert (= regexA (re.++ (str.to_re (str.++ "I" (str.++ "C" (str.++ "O" (str.++ "N" (str.++ "=" "")))))) (re.* (re.union (re.range "\u{22}" "\u{22}")(re.union (re.range "+" ";")(re.union (re.range "=" "=")(re.union (re.range "A" "Z") (re.range "a" "z")))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "R" (str.++ "8" (str.++ "8" (str.++ "3" (str.++ "5" (str.++ "4" (str.++ "9" (str.++ "2" (str.++ "4" (str.++ "\u{86}" "")))))))))))

(define-fun Witness2 () String (str.++ "R" (str.++ "9" (str.++ "8" (str.++ "9" (str.++ "3" (str.++ "9" (str.++ "6" (str.++ "1" (str.++ "3" ""))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.range "R" "R") ((_ re.loop 8 8) (re.range "0" "9"))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "8" (str.++ "0" (str.++ "d" (str.++ " " (str.++ "8" (str.++ "1" (str.++ "h" (str.++ "d" (str.++ "\u{84}" ""))))))))))

(define-fun Witness2 () String (str.++ "8" (str.++ "9" (str.++ "d" (str.++ " " (str.++ "2" (str.++ "h" (str.++ "\u{99}" ""))))))))

(assert (= regexA (re.++ ((_ re.loop 1 2) (re.range "0" "9"))(re.++ (str.to_re (str.++ "d" (str.++ " " "")))(re.++ ((_ re.loop 1 2) (re.range "0" "9")) (re.range "h" "h"))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "Y" (str.++ "\u{0d}" (str.++ " " (str.++ " " (str.++ "\u{0a}" (str.++ "/" (str.++ "/" (str.++ "\u{d0}" (str.++ "\u{e7}" ""))))))))))

(define-fun Witness2 () String (str.++ "/" (str.++ "/" (str.++ "\u{ff}" (str.++ "A" "")))))

(assert (= regexA (re.+ (re.++ (re.* (re.union (re.range "\u{0a}" "\u{0a}")(re.union (re.range "\u{0d}" "\u{0d}") (re.range " " " "))))(re.++ (str.to_re (str.++ "/" (str.++ "/" ""))) (re.* (re.union (re.range "\u{00}" "\u{09}")(re.union (re.range "\u{0b}" "\u{0c}") (re.range "\u{0e}" "\u{ff}")))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "\u{04}" (str.++ "2" (str.++ "7" (str.++ "." (str.++ "1" (str.++ "8" (str.++ "\u{d1}" (str.++ "\u{b4}" "")))))))))

(define-fun Witness2 () String (str.++ "-" (str.++ "0" (str.++ "." (str.++ "0" (str.++ "3" ""))))))

(assert (= regexA (re.union (re.++ (re.opt (re.range "-" "-"))(re.++ (re.range "1" "9")(re.++ ((_ re.loop 0 16) (re.range "0" "9"))(re.++ (re.opt (re.range "." ".")) ((_ re.loop 0 2) (re.range "0" "9"))))))(re.union (re.++ (re.opt (re.range "-" "-"))(re.++ (re.opt (re.range "0" "0"))(re.++ (re.range "." ".") ((_ re.loop 1 2) (re.range "1" "9"))))) (re.++ (re.opt (re.range "-" "-"))(re.++ (re.opt (re.range "0" "0"))(re.++ (re.range "." ".")(re.++ (re.range "0" "9") (re.range "1" "9")))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "7" (str.++ "<" (str.++ "9" (str.++ "\u{b5}" (str.++ "@" (str.++ "2" (str.++ "." (str.++ "3" (str.++ "." (str.++ "T" (str.++ "3" (str.++ "8" (str.++ "5" (str.++ ">" (str.++ "\u{df}" ""))))))))))))))))

(define-fun Witness2 () String (str.++ "\u{a0}" (str.++ "\u{0a}" (str.++ "<" (str.++ "\u{ba}" (str.++ "+" (str.++ "\u{b5}" (str.++ "\u{da}" (str.++ "@" (str.++ "\u{e2}" (str.++ "-" (str.++ "\u{ca}" (str.++ "." (str.++ "6" (str.++ ">" "")))))))))))))))

(assert (= regexA (re.union (re.++ (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "'" "'")(re.union (re.range "-" ".")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))))))(re.++ (re.range "<" "<")(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))(re.++ (re.* (re.++ (re.union (re.range "'" "'")(re.union (re.range "+" "+") (re.range "-" "."))) (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))))(re.++ (re.range "@" "@")(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))(re.++ (re.* (re.++ (re.range "-" ".") (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))))(re.++ (re.range "." ".")(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))(re.++ (re.* (re.++ (re.range "-" ".") (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))))) (re.range ">" ">"))))))))))) (re.++ (str.to_re "")(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))(re.++ (re.* (re.++ (re.union (re.range "'" "'")(re.union (re.range "+" "+") (re.range "-" "."))) (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))))(re.++ (re.range "@" "@")(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))(re.++ (re.* (re.++ (re.range "-" ".") (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))))(re.++ (re.range "." ".")(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))) (re.* (re.++ (re.range "-" ".") (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))))))))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "1" (str.++ "-" (str.++ "\u{09}" (str.++ "\u{a0}" (str.++ " " (str.++ "\u{a0}" (str.++ "\u{85}" (str.++ "9" (str.++ "9" (str.++ "2" (str.++ " " (str.++ ")" (str.++ "\u{a0}" (str.++ "9" (str.++ "8" (str.++ "2" (str.++ "-" (str.++ "7" (str.++ "9" (str.++ "8" (str.++ "3" (str.++ ")" (str.++ "J" ""))))))))))))))))))))))))

(define-fun Witness2 () String (str.++ "1" (str.++ "-" (str.++ "9" (str.++ "9" (str.++ "1" (str.++ "\u{85}" (str.++ ")" (str.++ "\u{a0}" (str.++ "-" (str.++ "4" (str.++ "2" (str.++ "7" (str.++ "\u{0a}" (str.++ "\u{0c}" (str.++ "2" (str.++ "8" (str.++ "9" (str.++ "7" "")))))))))))))))))))

(assert (= regexA (re.++ (re.opt (re.range "1" "1"))(re.++ (re.opt (re.range "-" "-"))(re.++ (re.opt (re.range "(" "("))(re.++ (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ ((_ re.loop 3 3) (re.range "0" "9"))(re.++ (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (re.opt (re.range ")" ")"))(re.++ (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (re.opt (re.range "-" "-"))(re.++ ((_ re.loop 3 3) (re.range "0" "9"))(re.++ (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (re.opt (re.range "-" "-"))(re.++ (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ ((_ re.loop 4 4) (re.range "0" "9")) (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))))))))))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "-" (str.++ "9" (str.++ "9" (str.++ "-" (str.++ "8" (str.++ "9" (str.++ "-" (str.++ "9" (str.++ "7" (str.++ "-" (str.++ "8" (str.++ "8" "")))))))))))))

(define-fun Witness2 () String (str.++ "\u{11}" (str.++ "\u{9a}" (str.++ "\u{b4}" (str.++ "-" (str.++ "4" (str.++ "9" (str.++ "-" (str.++ "5" (str.++ "8" (str.++ "-" (str.++ "6" (str.++ "3" (str.++ "-" (str.++ "9" (str.++ "8" ""))))))))))))))))

(assert (= regexA (re.union (re.++ (str.to_re "")(re.++ (re.range "0" "0")(re.++ (re.range "1" "6") ((_ re.loop 4 4) ((_ re.loop 2 2) (re.range "0" "9"))))))(re.union ((_ re.loop 4 4) (re.++ (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))) ((_ re.loop 2 2) (re.range "0" "9")))) (re.++ ((_ re.loop 4 4) (re.++ (re.range "-" "-") ((_ re.loop 2 2) (re.range "0" "9")))) (str.to_re ""))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "|" (str.++ "\u{94}" (str.++ "1" (str.++ "2" (str.++ "/" (str.++ "e" (str.++ "r" (str.++ "r" "")))))))))

(define-fun Witness2 () String (str.++ "1" (str.++ "2" (str.++ "/" (str.++ "e" (str.++ "r" (str.++ "r" "")))))))

(assert (= regexA (str.to_re (str.++ "1" (str.++ "2" (str.++ "/" (str.++ "e" (str.++ "r" (str.++ "r" "")))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "v" (str.++ "\u{e9}" (str.++ "8" (str.++ "5" (str.++ "2" (str.++ "8" (str.++ "-" (str.++ "1" (str.++ "1" (str.++ "-" (str.++ "1" (str.++ "8" (str.++ "T" (str.++ "1" (str.++ "8" (str.++ ":" (str.++ "3" (str.++ "7" (str.++ ":" (str.++ "3" (str.++ "9" (str.++ "Q" (str.++ "0" (str.++ "8" (str.++ "9" (str.++ "9" (str.++ "0" (str.++ "8" (str.++ "8" (str.++ "-" (str.++ "0" (str.++ "8" (str.++ ":" (str.++ "1" (str.++ "5" ""))))))))))))))))))))))))))))))))))))

(define-fun Witness2 () String (str.++ "4" (str.++ "2" (str.++ "9" (str.++ "9" (str.++ "-" (str.++ "0" (str.++ "9" (str.++ "-" (str.++ "0" (str.++ "8" (str.++ "T" (str.++ "1" (str.++ "8" (str.++ ":" (str.++ "2" (str.++ "5" (str.++ ":" (str.++ "2" (str.++ "9" (str.++ "P" (str.++ "2" (str.++ "9" (str.++ "9" (str.++ "7" (str.++ "8" (str.++ "8" (str.++ "0" (str.++ "|" (str.++ "0" (str.++ "8" (str.++ ":" (str.++ "3" (str.++ "0" ""))))))))))))))))))))))))))))))))))

(assert (= regexA (re.++ ((_ re.loop 4 4) (re.range "0" "9"))(re.++ (re.range "-" "-")(re.++ (re.union (re.++ (re.range "0" "0") (re.range "1" "9")) (re.++ (re.range "1" "1") (re.range "0" "2")))(re.++ (re.range "-" "-")(re.++ (re.union (re.++ (re.range "0" "0") (re.range "1" "9"))(re.union (re.++ (re.range "1" "2") (re.range "0" "9")) (re.++ (re.range "3" "3") (re.range "0" "1"))))(re.++ (re.range "T" "T")(re.++ (re.union (re.++ (re.range "0" "1") (re.range "0" "9")) (re.++ (re.range "2" "2") (re.range "0" "3")))(re.++ (re.range ":" ":")(re.++ (re.++ (re.range "0" "5") (re.range "0" "9"))(re.++ (re.range ":" ":")(re.++ (re.++ (re.range "0" "5") (re.range "0" "9"))(re.++ (re.opt (re.++ (re.union (re.range "\u{00}" "\u{09}") (re.range "\u{0b}" "\u{ff}")) ((_ re.loop 7 7) (re.range "0" "9"))))(re.++ (re.union (re.range "+" "+")(re.union (re.range "-" "-") (re.range "|" "|")))(re.++ (re.union (re.++ (re.range "0" "0") (re.range "0" "9")) (re.++ (re.range "1" "1") (re.range "0" "2")))(re.++ (re.range ":" ":") (re.union (str.to_re (str.++ "0" (str.++ "0" "")))(re.union (str.to_re (str.++ "1" (str.++ "5" "")))(re.union (str.to_re (str.++ "3" (str.++ "0" ""))) (str.to_re (str.++ "4" (str.++ "5" "")))))))))))))))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "4" (str.++ "9" (str.++ "'" (str.++ "'" (str.++ "'" (str.++ "'" (str.++ "-" (str.++ "-" (str.++ "&" (str.++ "q" (str.++ "u" (str.++ "o" (str.++ "t" (str.++ ";" "")))))))))))))))

(define-fun Witness2 () String (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "0" (str.++ "&" (str.++ "q" (str.++ "u" (str.++ "o" (str.++ "t" (str.++ ";" (str.++ "\u{fd}" ""))))))))))))

(assert (= regexA (re.++ (re.* (re.range "0" "9"))(re.++ (re.* (re.range "'" "'"))(re.++ (re.* (re.range "-" "-"))(re.++ (re.* (re.range "0" "9"))(re.++ (re.* (re.range "/" "/"))(re.++ (re.* (re.range "0" "9")) (str.to_re (str.++ "&" (str.++ "q" (str.++ "u" (str.++ "o" (str.++ "t" (str.++ ";" "")))))))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "\u{a7}" (str.++ "\u{d0}" (str.++ "Y" (str.++ "b" (str.++ "5" (str.++ "7" (str.++ "9" (str.++ "M" (str.++ "I" (str.++ "\u{ef}" "")))))))))))

(define-fun Witness2 () String (str.++ "x" (str.++ "A" (str.++ "8" (str.++ "7" (str.++ "9" (str.++ "9" (str.++ "a" (str.++ "l" "")))))))))

(assert (= regexA (re.++ ((_ re.loop 2 2) (re.union (re.range "A" "Z") (re.range "a" "z")))(re.++ ((_ re.loop 1 2) (re.range "0" "9"))(re.++ (re.opt (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ ((_ re.loop 1 2) (re.range "0" "9")) ((_ re.loop 2 2) (re.union (re.range "A" "Z") (re.range "a" "z")))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "\u{e4}" (str.++ "\u{ec}" (str.++ "3" (str.++ "8" (str.++ "a" (str.++ "p" (str.++ "r" ""))))))))

(define-fun Witness2 () String (str.++ "V" (str.++ "X" (str.++ "J" (str.++ "2" (str.++ "1" (str.++ "M" (str.++ "A" (str.++ "Y" "")))))))))

(assert (= regexA (re.++ (re.range "0" "3")(re.++ (re.range "0" "9") (re.union (str.to_re (str.++ "j" (str.++ "a" (str.++ "n" ""))))(re.union (str.to_re (str.++ "J" (str.++ "A" (str.++ "N" ""))))(re.union (str.to_re (str.++ "f" (str.++ "e" (str.++ "b" ""))))(re.union (str.to_re (str.++ "F" (str.++ "E" (str.++ "B" ""))))(re.union (str.to_re (str.++ "m" (str.++ "a" (str.++ "r" ""))))(re.union (str.to_re (str.++ "M" (str.++ "A" (str.++ "R" ""))))(re.union (str.to_re (str.++ "a" (str.++ "p" (str.++ "r" ""))))(re.union (str.to_re (str.++ "A" (str.++ "P" (str.++ "R" ""))))(re.union (str.to_re (str.++ "m" (str.++ "a" (str.++ "y" ""))))(re.union (str.to_re (str.++ "M" (str.++ "A" (str.++ "Y" ""))))(re.union (str.to_re (str.++ "j" (str.++ "u" (str.++ "n" ""))))(re.union (str.to_re (str.++ "J" (str.++ "U" (str.++ "N" ""))))(re.union (str.to_re (str.++ "j" (str.++ "u" (str.++ "l" ""))))(re.union (str.to_re (str.++ "J" (str.++ "U" (str.++ "L" ""))))(re.union (str.to_re (str.++ "a" (str.++ "u" (str.++ "g" ""))))(re.union (str.to_re (str.++ "A" (str.++ "U" (str.++ "G" ""))))(re.union (str.to_re (str.++ "s" (str.++ "e" (str.++ "p" ""))))(re.union (str.to_re (str.++ "S" (str.++ "E" (str.++ "P" ""))))(re.union (str.to_re (str.++ "o" (str.++ "c" (str.++ "t" ""))))(re.union (str.to_re (str.++ "O" (str.++ "C" (str.++ "T" ""))))(re.union (str.to_re (str.++ "n" (str.++ "o" (str.++ "v" ""))))(re.union (str.to_re (str.++ "N" (str.++ "O" (str.++ "V" ""))))(re.union (str.to_re (str.++ "d" (str.++ "e" (str.++ "c" "")))) (str.to_re (str.++ "D" (str.++ "E" (str.++ "C" "")))))))))))))))))))))))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "2" (str.++ "0" (str.++ "6" (str.++ "8" (str.++ "-" (str.++ "0" (str.++ "8" (str.++ "/" (str.++ "2" (str.++ "8" (str.++ "T" (str.++ "0" (str.++ "8" (str.++ ":" (str.++ "5" (str.++ "8" (str.++ ":" (str.++ "3" (str.++ "1" (str.++ "\u{09}" "")))))))))))))))))))))

(define-fun Witness2 () String (str.++ "2" (str.++ "0" (str.++ "8" (str.++ "9" (str.++ "-" (str.++ "1" (str.++ "1" (str.++ "-" (str.++ "3" (str.++ "1" (str.++ "\u{a0}" (str.++ "0" (str.++ "4" (str.++ ":" (str.++ "4" (str.++ "8" (str.++ ":" (str.++ "5" (str.++ "2" ""))))))))))))))))))))

(assert (= regexA (re.++ (str.to_re (str.++ "2" (str.++ "0" "")))(re.++ ((_ re.loop 2 2) (re.range "0" "9"))(re.++ (re.union (re.range "-" "-") (re.range "/" "/"))(re.++ (re.union (re.++ (re.range "0" "0") (re.range "1" "9")) (re.++ (re.range "1" "1") (re.range "0" "2")))(re.++ (re.union (re.range "-" "-") (re.range "/" "/"))(re.++ (re.union (re.++ (re.range "0" "0") (re.range "1" "9"))(re.union (re.++ (re.range "1" "2") (re.range "0" "9")) (re.++ (re.range "3" "3") (re.range "0" "1"))))(re.++ (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "T" "T")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (re.union (re.++ (re.range "0" "1") (re.range "0" "9")) (re.++ (re.range "2" "2") (re.range "0" "3")))(re.++ (re.range ":" ":")(re.++ (re.++ (re.range "0" "5") (re.range "0" "9"))(re.++ (re.range ":" ":") (re.++ (re.range "0" "5") (re.range "0" "9")))))))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "\u{0f}" (str.++ "\u{c4}" (str.++ "$" (str.++ "3" (str.++ "w" (str.++ "H" "")))))))

(define-fun Witness2 () String (str.++ "\u{89}" (str.++ "$" (str.++ "9" (str.++ "m" (str.++ "B" (str.++ "y" (str.++ "f" (str.++ "9" (str.++ "F" ""))))))))))

(assert (= regexA (re.++ (re.range "$" "$")(re.++ (re.++ (re.opt (re.range "0" "9")) (re.+ (re.union (re.range "A" "Z") (re.range "a" "z")))) (re.opt (re.range "0" "9"))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "5" (str.++ "4" (str.++ "8" (str.++ "8" (str.++ "8" (str.++ "2" (str.++ "5" (str.++ "4" (str.++ "2" (str.++ "1" (str.++ "8" (str.++ "2" (str.++ "6" (str.++ "8" (str.++ "0" (str.++ "4" (str.++ "\u{bd}" (str.++ "\u{fc}" (str.++ "\u{82}" ""))))))))))))))))))))

(define-fun Witness2 () String (str.++ "\u{15}" (str.++ "4" (str.++ "0" (str.++ "8" (str.++ "2" (str.++ "9" (str.++ "9" (str.++ "5" (str.++ "8" (str.++ "4" (str.++ "3" (str.++ "9" (str.++ "2" (str.++ "9" "")))))))))))))))

(assert (= regexA (re.union (re.++ (str.to_re "")(re.++ (re.++ (re.range "5" "5")(re.++ (re.range "1" "5") ((_ re.loop 2 2) (re.range "0" "9")))) ((_ re.loop 12 12) (re.range "0" "9")))) (re.++ (re.++ (re.range "4" "4") ((_ re.loop 3 3) (re.range "0" "9")))(re.++ (re.union ((_ re.loop 12 12) (re.range "0" "9")) ((_ re.loop 9 9) (re.range "0" "9"))) (str.to_re ""))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "+" (str.++ "\u{84}" (str.++ "E" (str.++ "\u{f4}" (str.++ "Z" (str.++ "\u{d2}" "")))))))

(define-fun Witness2 () String (str.++ "\u{11}" ""))

(assert (= regexA ((_ re.loop 1 5) (re.union (re.union (re.range "\u{00}" "\u{09}") (re.range "\u{0b}" "\u{ff}")) (re.union (re.range "\u{0a}" "\u{0a}") (re.range "\u{0d}" "\u{0d}"))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "\u{0b}" (str.++ "i" (str.++ "-" (str.++ "4" (str.++ "8" (str.++ "8" (str.++ "4" (str.++ "-" (str.++ "8" (str.++ "-" (str.++ "2" ""))))))))))))

(define-fun Witness2 () String (str.++ "8" (str.++ "6" (str.++ "8" (str.++ "9" (str.++ "-" (str.++ "8" (str.++ "8" (str.++ "-" (str.++ "3" (str.++ "\u{0a}" (str.++ "v" (str.++ "\u{22}" "")))))))))))))

(assert (= regexA (re.++ ((_ re.loop 4 4) (re.range "0" "9"))(re.++ (re.range "-" "-")(re.++ ((_ re.loop 1 2) (re.range "0" "9"))(re.++ (re.range "-" "-") ((_ re.loop 1 2) (re.range "0" "9"))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "B" (str.++ "\u{0e}" (str.++ "\u{a6}" (str.++ "\u{e9}" (str.++ "2" (str.++ "8" (str.++ "." (str.++ "4" (str.++ "." (str.++ "1" (str.++ "6" (str.++ "." (str.++ "2" (str.++ "8" (str.++ "7" (str.++ "\u{eb}" "")))))))))))))))))

(define-fun Witness2 () String (str.++ "_" (str.++ "A" (str.++ "." (str.++ "\u{ff}" (str.++ "<" (str.++ "\u{b8}" (str.++ "\u{a5}" (str.++ "\u{13}" (str.++ "\u{ad}" (str.++ "\u{8b}" "")))))))))))

(assert (= regexA (re.union (re.++ (re.union (re.++ (re.union (str.to_re (str.++ "h" (str.++ "t" ""))) (re.range "f" "f"))(re.++ (str.to_re (str.++ "t" (str.++ "p" "")))(re.++ (re.opt (re.range "s" "s")) (str.to_re (str.++ ":" (str.++ "/" (str.++ "/" "")))))))(re.union (re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))(re.++ (re.range "." ".") (re.+ (re.union (re.range "\u{00}" "\u{08}")(re.union (re.range "\u{0b}" "\u{0c}")(re.union (re.range "\u{0e}" "\u{1f}")(re.union (re.range "!" "'")(re.union (re.range "*" "Z")(re.union (re.range "\u{5c}" "\u{5c}") (re.range "^" "\u{ff}")))))))))) (re.++ (re.++ ((_ re.loop 3 3) (re.++ (re.opt (re.range "0" "2"))(re.++ ((_ re.loop 1 2) (re.range "0" "9")) (re.range "." "."))))(re.++ (re.opt (re.range "0" "2")) ((_ re.loop 1 2) (re.range "0" "9")))) (re.range "/" "/"))))(re.++ (re.+ (re.union (re.range "\u{00}" "\u{08}")(re.union (re.range "\u{0b}" "\u{0c}")(re.union (re.range "\u{0e}" "\u{1f}")(re.union (re.range "!" "!")(re.union (re.range "#" "&")(re.union (re.range "*" "+")(re.union (re.range "-" ":")(re.union (re.range "=" "=")(re.union (re.range "?" "Z")(re.union (re.range "\u{5c}" "\u{5c}") (re.range "^" "\u{ff}")))))))))))) (re.union (re.range "\u{00}" "\u{08}")(re.union (re.range "\u{0b}" "\u{0c}")(re.union (re.range "\u{0e}" "\u{1f}")(re.union (re.range "!" "!")(re.union (re.range "#" "&")(re.union (re.range "*" "+")(re.union (re.range "-" "-")(re.union (re.range "/" ":")(re.union (re.range "=" "=")(re.union (re.range "?" "Z")(re.union (re.range "\u{5c}" "\u{5c}") (re.range "^" "\u{ff}")))))))))))))) (re.++ ((_ re.loop 3 3) (re.++ (re.opt (re.range "0" "2"))(re.++ ((_ re.loop 1 2) (re.range "0" "9")) (re.range "." "."))))(re.++ (re.opt (re.range "0" "2")) ((_ re.loop 1 2) (re.range "0" "9")))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "\u{aa}" (str.++ "." (str.++ "[" (str.++ "9" (str.++ "\u{85}" (str.++ "B" (str.++ "e" (str.++ "t" (str.++ "w" (str.++ "e" (str.++ "e" (str.++ "n" (str.++ "N" (str.++ "o" (str.++ "t" (str.++ "R" (str.++ "'" (str.++ "\u{e5}" (str.++ "'" (str.++ "\u{aa}" (str.++ "x" (str.++ "\u{aa}" "")))))))))))))))))))))))

(define-fun Witness2 () String (str.++ "\u{c1}" (str.++ "I" (str.++ "[" (str.++ "\u{aa}" (str.++ "]" (str.++ "=" (str.++ "x" (str.++ "\u{aa}" (str.++ "\u{f0}" ""))))))))))

(assert (= regexA (re.++ (re.opt (re.++ (re.++ (re.opt (re.range "[" "["))(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))) (re.opt (re.range "]" "]")))) (re.range "." ".")))(re.++ (re.++ (re.opt (re.range "[" "["))(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))) (re.opt (re.range "]" "]"))))(re.++ (re.++ (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (re.union ((_ re.loop 1 2) (re.range "<" ">")) ((_ re.loop 1 2) (re.union (str.to_re (str.++ "N" (str.++ "o" (str.++ "t" ""))))(re.union (str.to_re (str.++ "I" (str.++ "n" (str.++ "(" "")))) (str.to_re (str.++ "B" (str.++ "e" (str.++ "t" (str.++ "w" (str.++ "e" (str.++ "e" (str.++ "n" "")))))))))))) (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))))) (re.+ (re.union (re.range "'" "'")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "\u{1c}" (str.++ "\u{10}" (str.++ "9" (str.++ "L" "")))))

(define-fun Witness2 () String (str.++ "W" (str.++ "N" (str.++ "\u{99}" (str.++ "\u{9c}" (str.++ "B" (str.++ "\u{05}" (str.++ "x" (str.++ "<" "")))))))))

(assert (= regexA (re.+ (re.++ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))) (re.opt (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "\u{f0}" (str.++ "&" (str.++ "q" (str.++ "u" (str.++ "o" (str.++ "t" (str.++ ";" (str.++ "]" (str.++ "&" (str.++ "q" (str.++ "u" (str.++ "o" (str.++ "t" (str.++ ";" "")))))))))))))))

(define-fun Witness2 () String (str.++ "\u{b4}" (str.++ "\u{84}" (str.++ "&" (str.++ "q" (str.++ "u" (str.++ "o" (str.++ "t" (str.++ ";" (str.++ "w" (str.++ "\u{5c}" (str.++ "\u{8d}" (str.++ "&" (str.++ "q" (str.++ "u" (str.++ "o" (str.++ "t" (str.++ ";" (str.++ "\u{d9}" "")))))))))))))))))))

(assert (= regexA (re.++ (str.to_re (str.++ "&" (str.++ "q" (str.++ "u" (str.++ "o" (str.++ "t" (str.++ ";" "")))))))(re.++ (re.++ (re.union (re.range "\u{00}" "%")(re.union (re.range "'" ":")(re.union (re.range "<" "n")(re.union (re.range "p" "p")(re.union (re.range "r" "s") (re.range "v" "\u{ff}")))))) (re.* (re.union (re.++ (re.range "\u{5c}" "\u{5c}") (re.union (re.range "\u{00}" "\u{09}") (re.range "\u{0b}" "\u{ff}"))) (re.* (re.union (re.range "\u{00}" "%")(re.union (re.range "'" ":")(re.union (re.range "<" "[")(re.union (re.range "]" "n")(re.union (re.range "p" "p")(re.union (re.range "r" "s") (re.range "v" "\u{ff}"))))))))))) (str.to_re (str.++ "&" (str.++ "q" (str.++ "u" (str.++ "o" (str.++ "t" (str.++ ";" "")))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "2" (str.++ "i" (str.++ "." (str.++ "4" (str.++ "." (str.++ "_" (str.++ "i" (str.++ "k" (str.++ "." (str.++ "c" (str.++ "c" (str.++ "c" (str.++ "n" (str.++ "M" "")))))))))))))))

(define-fun Witness2 () String (str.++ "t" (str.++ "." (str.++ "1" (str.++ "." (str.++ "z" (str.++ "x" (str.++ "j" (str.++ "." (str.++ "n" (str.++ "n" "")))))))))))

(assert (= regexA (re.++ (re.union (re.range "0" "9") (re.range "a" "z"))(re.++ (re.* (re.union (re.range "-" ".")(re.union (re.range "0" "9")(re.union (re.range "_" "_") (re.range "a" "z")))))(re.++ (re.union (re.range "0" "9") (re.range "a" "z"))(re.++ (re.range "." ".")(re.++ (re.union (re.range "0" "9") (re.range "a" "z"))(re.++ (re.* (re.union (re.range "-" ".")(re.union (re.range "0" "9")(re.union (re.range "_" "_") (re.range "a" "z")))))(re.++ (re.union (re.range "0" "9") (re.range "a" "z"))(re.++ (re.range "." ".") ((_ re.loop 2 4) (re.union (re.range "c" "c") (re.range "n" "n")))))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "\u{c8}" (str.++ "\u{f9}" (str.++ "M" (str.++ "B" (str.++ "A" (str.++ "/" (str.++ "i" ""))))))))

(define-fun Witness2 () String (str.++ "\u{c4}" (str.++ "\u{c2}" (str.++ "\u{ff}" (str.++ "w" (str.++ "P" (str.++ "h" (str.++ "d" (str.++ "." (str.++ "\u{e3}" (str.++ "\u{e5}" "")))))))))))

(assert (= regexA (re.union (re.++ (str.to_re (str.++ "/" (str.++ "D" (str.++ "r" "")))) (re.opt (re.range "." ".")))(re.union (re.++ (str.to_re (str.++ "P" (str.++ "h" (str.++ "d" "")))) (re.opt (re.range "." "."))) (str.to_re (str.++ "M" (str.++ "B" (str.++ "A" (str.++ "/" (str.++ "i" ""))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ " " (str.++ " " (str.++ " " (str.++ "d" (str.++ "." (str.++ " " (str.++ "#" (str.++ "a" (str.++ "c" (str.++ "c" (str.++ "e" (str.++ "p" (str.++ "t" (str.++ " " (str.++ "A" (str.++ "S" (str.++ "C" (str.++ "I" (str.++ "I" (str.++ " " (str.++ "a" (str.++ "l" (str.++ "p" (str.++ "h" (str.++ "a" (str.++ "n" (str.++ "u" (str.++ "m" (str.++ "e" (str.++ "r" (str.++ "i" (str.++ "c" (str.++ " " (str.++ "a" (str.++ "n" (str.++ "d" (str.++ " " (str.++ "p" (str.++ "e" (str.++ "r" (str.++ "i" (str.++ "o" (str.++ "d" (str.++ "y" "")))))))))))))))))))))))))))))))))))))))))))))

(define-fun Witness2 () String (str.++ " " (str.++ " " (str.++ " " (str.++ "." (str.++ "t" (str.++ " " (str.++ "#" (str.++ "a" (str.++ "c" (str.++ "c" (str.++ "e" (str.++ "p" (str.++ "t" (str.++ " " (str.++ "A" (str.++ "S" (str.++ "C" (str.++ "I" (str.++ "I" (str.++ " " (str.++ "a" (str.++ "l" (str.++ "p" (str.++ "h" (str.++ "a" (str.++ "n" (str.++ "u" (str.++ "m" (str.++ "e" (str.++ "r" (str.++ "i" (str.++ "c" (str.++ " " (str.++ "a" (str.++ "n" (str.++ "d" (str.++ " " (str.++ "p" (str.++ "e" (str.++ "r" (str.++ "i" (str.++ "o" (str.++ "d" (str.++ "\u{ee}" (str.++ "\u{1b}" ""))))))))))))))))))))))))))))))))))))))))))))))

(assert (= regexA (re.++ (str.to_re (str.++ " " (str.++ " " (str.++ " " ""))))(re.++ ((_ re.loop 2 31) (re.union (re.range "." ".")(re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z"))))) (str.to_re (str.++ " " (str.++ "#" (str.++ "a" (str.++ "c" (str.++ "c" (str.++ "e" (str.++ "p" (str.++ "t" (str.++ " " (str.++ "A" (str.++ "S" (str.++ "C" (str.++ "I" (str.++ "I" (str.++ " " (str.++ "a" (str.++ "l" (str.++ "p" (str.++ "h" (str.++ "a" (str.++ "n" (str.++ "u" (str.++ "m" (str.++ "e" (str.++ "r" (str.++ "i" (str.++ "c" (str.++ " " (str.++ "a" (str.++ "n" (str.++ "d" (str.++ " " (str.++ "p" (str.++ "e" (str.++ "r" (str.++ "i" (str.++ "o" (str.++ "d" "")))))))))))))))))))))))))))))))))))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "\u{22}" (str.++ "0" (str.++ "8" (str.++ "0" (str.++ "0" (str.++ "\u{a0}" (str.++ "1" (str.++ "1" (str.++ "2" (str.++ "7" (str.++ "3" ""))))))))))))

(define-fun Witness2 () String (str.++ "(" (str.++ "0" (str.++ "6" (str.++ ")" (str.++ "8" (str.++ "8" (str.++ "8" (str.++ "9" (str.++ "8" (str.++ "0" (str.++ "8" ""))))))))))))

(assert (= regexA (re.union (re.++ (re.++ (str.to_re "")(re.++ (str.to_re (str.++ "(" (str.++ "0" "")))(re.++ (re.range "0" "9") (re.range ")" ")")))) (re.++ ((_ re.loop 7 7) (re.range "0" "9")) (str.to_re "")))(re.union (re.++ (re.++ (str.to_re "")(re.++ (str.to_re (str.++ "(" (str.++ "0" (str.++ "2" ""))))(re.++ (re.range "0" "9") (re.range ")" ")")))) (re.++ ((_ re.loop 6 8) (re.range "0" "9")) (str.to_re ""))) (re.++ (str.to_re (str.++ "0" (str.++ "8" (str.++ "0" (str.++ "0" "")))))(re.++ (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))) (re.++ ((_ re.loop 5 8) (re.range "0" "9")) (str.to_re ""))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "\u{e6}" (str.++ "p" (str.++ "(" (str.++ "1" (str.++ "9" (str.++ "8" (str.++ ")" (str.++ "8" (str.++ "9" (str.++ "8" (str.++ "8" (str.++ "9" (str.++ "9" (str.++ "4" "")))))))))))))))

(define-fun Witness2 () String (str.++ "\u{80}" (str.++ "\u{d9}" (str.++ "Z" (str.++ "\u{f4}" (str.++ "g" (str.++ "(" (str.++ "9" (str.++ "1" (str.++ "0" (str.++ "5" (str.++ ")" (str.++ "8" (str.++ "0" (str.++ "2" (str.++ "9" (str.++ "\u{15}" "")))))))))))))))))

(assert (= regexA (re.union (re.++ (re.union (re.++ (re.range "(" "(")(re.++ ((_ re.loop 3 4) (re.range "0" "9")) (re.range ")" ")"))) (re.++ ((_ re.loop 3 4) (re.range "0" "9")) (re.range "-" "-")))(re.++ ((_ re.loop 4 9) (re.range "0" "9")) (re.union (re.++ (re.range "-" "-") ((_ re.loop 1 5) (re.range "0" "9"))) (str.to_re "")))) ((_ re.loop 4 12) (re.range "0" "9")))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "\u{11}" (str.++ "U" (str.++ "p" (str.++ "l" (str.++ "o" (str.++ "a" (str.++ "d" (str.++ "F" (str.++ "r" (str.++ "i" (str.++ "e" (str.++ "n" (str.++ "d" (str.++ "l" (str.++ "y" (str.++ " " (str.++ "i" (str.++ "s" (str.++ " " (str.++ "a" (str.++ "n" (str.++ " " (str.++ "e" (str.++ "a" (str.++ "s" (str.++ "y" (str.++ " " (str.++ "t" (str.++ "o" (str.++ " " (str.++ "u" (str.++ "s" (str.++ "e" (str.++ " " (str.++ "J" (str.++ "a" (str.++ "v" (str.++ "a" (str.++ " " (str.++ "A" (str.++ "p" (str.++ "p" (str.++ "l" (str.++ "e" (str.++ "t" (str.++ " " (str.++ "t" (str.++ "h" (str.++ "a" (str.++ "t" (str.++ " " (str.++ "w" (str.++ "i" (str.++ "l" (str.++ "l" (str.++ " " (str.++ "a" (str.++ "l" (str.++ "l" (str.++ "o" (str.++ "w" (str.++ " " (str.++ "m" (str.++ "u" (str.++ "l" (str.++ "t" (str.++ "i" (str.++ "p" (str.++ "l" (str.++ "e" (str.++ " " (str.++ "f" (str.++ "i" (str.++ "l" (str.++ "e" (str.++ " " (str.++ "u" (str.++ "p" (str.++ "l" (str.++ "o" (str.++ "a" (str.++ "d" (str.++ "s" (str.++ " " (str.++ "o" (str.++ "n" (str.++ " " (str.++ "a" (str.++ " " (str.++ "w" (str.++ "e" (str.++ "b" (str.++ " " (str.++ "s" (str.++ "e" (str.++ "r" (str.++ "v" (str.++ "e" (str.++ "r" (str.++ " " (str.++ "i" (str.++ "n" (str.++ " " (str.++ "a" (str.++ " " (str.++ "w" (str.++ "e" (str.++ "b" (str.++ " " (str.++ "p" (str.++ "a" (str.++ "g" (str.++ "e" (str.++ "\u{d7}" (str.++ " " (str.++ "T" (str.++ "h" (str.++ "e" (str.++ " " (str.++ "c" (str.++ "o" (str.++ "n" (str.++ "t" (str.++ "r" (str.++ "o" (str.++ "l" (str.++ " " (str.++ "s" (str.++ "u" (str.++ "p" (str.++ "p" (str.++ "o" (str.++ "r" (str.++ "t" (str.++ "s" (str.++ " " (str.++ "f" (str.++ "i" (str.++ "l" (str.++ "e" (str.++ " " (str.++ "f" (str.++ "i" (str.++ "l" (str.++ "t" (str.++ "e" (str.++ "r" (str.++ "i" (str.++ "n" (str.++ "g" (str.++ "," (str.++ " " (str.++ "l" (str.++ "i" (str.++ "m" (str.++ "i" (str.++ "t" (str.++ "s" (str.++ " " (str.++ "a" (str.++ "n" (str.++ "d" (str.++ " " (str.++ "m" (str.++ "o" (str.++ "r" (str.++ "e" (str.++ " " (str.++ " " (str.++ "S" (str.++ "a" (str.++ "m" (str.++ "p" (str.++ "l" (str.++ "e" (str.++ "s" (str.++ " " (str.++ "a" (str.++ "v" (str.++ "a" (str.++ "i" (str.++ "l" (str.++ "a" (str.++ "b" (str.++ "l" (str.++ "e" (str.++ " " (str.++ "i" (str.++ "n" (str.++ " " (str.++ "t" (str.++ "h" (str.++ "e" (str.++ " " (str.++ "f" (str.++ "o" (str.++ "l" (str.++ "l" (str.++ "o" (str.++ "w" (str.++ "i" (str.++ "n" (str.++ "g" (str.++ " " (str.++ "l" (str.++ "a" (str.++ "n" (str.++ "g" (str.++ "u" (str.++ "a" (str.++ "g" (str.++ "e" (str.++ "s" (str.++ ":" (str.++ " " (str.++ "A" (str.++ "S" (str.++ "P" (str.++ "," (str.++ " " (str.++ "A" (str.++ "S" (str.++ "P" (str.++ "\u{10}" (str.++ "N" (str.++ "E" (str.++ "T" (str.++ "," (str.++ " " (str.++ "P" (str.++ "H" (str.++ "P" (str.++ "," (str.++ " " (str.++ "C" (str.++ "o" (str.++ "l" (str.++ "d" (str.++ "f" (str.++ "u" (str.++ "s" (str.++ "i" (str.++ "o" (str.++ "n" (str.++ " " (str.++ "a" (str.++ "n" (str.++ "d" (str.++ " " (str.++ "J" (str.++ "S" (str.++ "P" (str.++ "\u{e3}" (str.++ "B" (str.++ "\u{c9}" (str.++ "h" (str.++ "=" (str.++ "r" "")))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(define-fun Witness2 () String (str.++ "U" (str.++ "p" (str.++ "l" (str.++ "o" (str.++ "a" (str.++ "d" (str.++ "F" (str.++ "r" (str.++ "i" (str.++ "e" (str.++ "n" (str.++ "d" (str.++ "l" (str.++ "y" (str.++ " " (str.++ "i" (str.++ "s" (str.++ " " (str.++ "a" (str.++ "n" (str.++ " " (str.++ "e" (str.++ "a" (str.++ "s" (str.++ "y" (str.++ " " (str.++ "t" (str.++ "o" (str.++ " " (str.++ "u" (str.++ "s" (str.++ "e" (str.++ " " (str.++ "J" (str.++ "a" (str.++ "v" (str.++ "a" (str.++ " " (str.++ "A" (str.++ "p" (str.++ "p" (str.++ "l" (str.++ "e" (str.++ "t" (str.++ " " (str.++ "t" (str.++ "h" (str.++ "a" (str.++ "t" (str.++ " " (str.++ "w" (str.++ "i" (str.++ "l" (str.++ "l" (str.++ " " (str.++ "a" (str.++ "l" (str.++ "l" (str.++ "o" (str.++ "w" (str.++ " " (str.++ "m" (str.++ "u" (str.++ "l" (str.++ "t" (str.++ "i" (str.++ "p" (str.++ "l" (str.++ "e" (str.++ " " (str.++ "f" (str.++ "i" (str.++ "l" (str.++ "e" (str.++ " " (str.++ "u" (str.++ "p" (str.++ "l" (str.++ "o" (str.++ "a" (str.++ "d" (str.++ "s" (str.++ " " (str.++ "o" (str.++ "n" (str.++ " " (str.++ "a" (str.++ " " (str.++ "w" (str.++ "e" (str.++ "b" (str.++ " " (str.++ "s" (str.++ "e" (str.++ "r" (str.++ "v" (str.++ "e" (str.++ "r" (str.++ " " (str.++ "i" (str.++ "n" (str.++ " " (str.++ "a" (str.++ " " (str.++ "w" (str.++ "e" (str.++ "b" (str.++ " " (str.++ "p" (str.++ "a" (str.++ "g" (str.++ "e" (str.++ "\u{e7}" (str.++ " " (str.++ "T" (str.++ "h" (str.++ "e" (str.++ " " (str.++ "c" (str.++ "o" (str.++ "n" (str.++ "t" (str.++ "r" (str.++ "o" (str.++ "l" (str.++ " " (str.++ "s" (str.++ "u" (str.++ "p" (str.++ "p" (str.++ "o" (str.++ "r" (str.++ "t" (str.++ "s" (str.++ " " (str.++ "f" (str.++ "i" (str.++ "l" (str.++ "e" (str.++ " " (str.++ "f" (str.++ "i" (str.++ "l" (str.++ "t" (str.++ "e" (str.++ "r" (str.++ "i" (str.++ "n" (str.++ "g" (str.++ "," (str.++ " " (str.++ "l" (str.++ "i" (str.++ "m" (str.++ "i" (str.++ "t" (str.++ "s" (str.++ " " (str.++ "a" (str.++ "n" (str.++ "d" (str.++ " " (str.++ "m" (str.++ "o" (str.++ "r" (str.++ "e" (str.++ "\u{ba}" (str.++ " " (str.++ "S" (str.++ "a" (str.++ "m" (str.++ "p" (str.++ "l" (str.++ "e" (str.++ "s" (str.++ " " (str.++ "a" (str.++ "v" (str.++ "a" (str.++ "i" (str.++ "l" (str.++ "a" (str.++ "b" (str.++ "l" (str.++ "e" (str.++ " " (str.++ "i" (str.++ "n" (str.++ " " (str.++ "t" (str.++ "h" (str.++ "e" (str.++ " " (str.++ "f" (str.++ "o" (str.++ "l" (str.++ "l" (str.++ "o" (str.++ "w" (str.++ "i" (str.++ "n" (str.++ "g" (str.++ " " (str.++ "l" (str.++ "a" (str.++ "n" (str.++ "g" (str.++ "u" (str.++ "a" (str.++ "g" (str.++ "e" (str.++ "s" (str.++ ":" (str.++ " " (str.++ "A" (str.++ "S" (str.++ "P" (str.++ "," (str.++ " " (str.++ "A" (str.++ "S" (str.++ "P" (str.++ "-" (str.++ "N" (str.++ "E" (str.++ "T" (str.++ "," (str.++ " " (str.++ "P" (str.++ "H" (str.++ "P" (str.++ "," (str.++ " " (str.++ "C" (str.++ "o" (str.++ "l" (str.++ "d" (str.++ "f" (str.++ "u" (str.++ "s" (str.++ "i" (str.++ "o" (str.++ "n" (str.++ " " (str.++ "a" (str.++ "n" (str.++ "d" (str.++ " " (str.++ "J" (str.++ "S" (str.++ "P" ""))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(assert (= regexA (re.++ (str.to_re (str.++ "U" (str.++ "p" (str.++ "l" (str.++ "o" (str.++ "a" (str.++ "d" (str.++ "F" (str.++ "r" (str.++ "i" (str.++ "e" (str.++ "n" (str.++ "d" (str.++ "l" (str.++ "y" (str.++ " " (str.++ "i" (str.++ "s" (str.++ " " (str.++ "a" (str.++ "n" (str.++ " " (str.++ "e" (str.++ "a" (str.++ "s" (str.++ "y" (str.++ " " (str.++ "t" (str.++ "o" (str.++ " " (str.++ "u" (str.++ "s" (str.++ "e" (str.++ " " (str.++ "J" (str.++ "a" (str.++ "v" (str.++ "a" (str.++ " " (str.++ "A" (str.++ "p" (str.++ "p" (str.++ "l" (str.++ "e" (str.++ "t" (str.++ " " (str.++ "t" (str.++ "h" (str.++ "a" (str.++ "t" (str.++ " " (str.++ "w" (str.++ "i" (str.++ "l" (str.++ "l" (str.++ " " (str.++ "a" (str.++ "l" (str.++ "l" (str.++ "o" (str.++ "w" (str.++ " " (str.++ "m" (str.++ "u" (str.++ "l" (str.++ "t" (str.++ "i" (str.++ "p" (str.++ "l" (str.++ "e" (str.++ " " (str.++ "f" (str.++ "i" (str.++ "l" (str.++ "e" (str.++ " " (str.++ "u" (str.++ "p" (str.++ "l" (str.++ "o" (str.++ "a" (str.++ "d" (str.++ "s" (str.++ " " (str.++ "o" (str.++ "n" (str.++ " " (str.++ "a" (str.++ " " (str.++ "w" (str.++ "e" (str.++ "b" (str.++ " " (str.++ "s" (str.++ "e" (str.++ "r" (str.++ "v" (str.++ "e" (str.++ "r" (str.++ " " (str.++ "i" (str.++ "n" (str.++ " " (str.++ "a" (str.++ " " (str.++ "w" (str.++ "e" (str.++ "b" (str.++ " " (str.++ "p" (str.++ "a" (str.++ "g" (str.++ "e" "")))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))(re.++ (re.union (re.range "\u{00}" "\u{09}") (re.range "\u{0b}" "\u{ff}"))(re.++ (str.to_re (str.++ " " (str.++ "T" (str.++ "h" (str.++ "e" (str.++ " " (str.++ "c" (str.++ "o" (str.++ "n" (str.++ "t" (str.++ "r" (str.++ "o" (str.++ "l" (str.++ " " (str.++ "s" (str.++ "u" (str.++ "p" (str.++ "p" (str.++ "o" (str.++ "r" (str.++ "t" (str.++ "s" (str.++ " " (str.++ "f" (str.++ "i" (str.++ "l" (str.++ "e" (str.++ " " (str.++ "f" (str.++ "i" (str.++ "l" (str.++ "t" (str.++ "e" (str.++ "r" (str.++ "i" (str.++ "n" (str.++ "g" (str.++ "," (str.++ " " (str.++ "l" (str.++ "i" (str.++ "m" (str.++ "i" (str.++ "t" (str.++ "s" (str.++ " " (str.++ "a" (str.++ "n" (str.++ "d" (str.++ " " (str.++ "m" (str.++ "o" (str.++ "r" (str.++ "e" ""))))))))))))))))))))))))))))))))))))))))))))))))))))))(re.++ (re.union (re.range "\u{00}" "\u{09}") (re.range "\u{0b}" "\u{ff}"))(re.++ (str.to_re (str.++ " " (str.++ "S" (str.++ "a" (str.++ "m" (str.++ "p" (str.++ "l" (str.++ "e" (str.++ "s" (str.++ " " (str.++ "a" (str.++ "v" (str.++ "a" (str.++ "i" (str.++ "l" (str.++ "a" (str.++ "b" (str.++ "l" (str.++ "e" (str.++ " " (str.++ "i" (str.++ "n" (str.++ " " (str.++ "t" (str.++ "h" (str.++ "e" (str.++ " " (str.++ "f" (str.++ "o" (str.++ "l" (str.++ "l" (str.++ "o" (str.++ "w" (str.++ "i" (str.++ "n" (str.++ "g" (str.++ " " (str.++ "l" (str.++ "a" (str.++ "n" (str.++ "g" (str.++ "u" (str.++ "a" (str.++ "g" (str.++ "e" (str.++ "s" (str.++ ":" (str.++ " " (str.++ "A" (str.++ "S" (str.++ "P" (str.++ "," (str.++ " " (str.++ "A" (str.++ "S" (str.++ "P" ""))))))))))))))))))))))))))))))))))))))))))))))))))))))))(re.++ (re.union (re.range "\u{00}" "\u{09}") (re.range "\u{0b}" "\u{ff}")) (str.to_re (str.++ "N" (str.++ "E" (str.++ "T" (str.++ "," (str.++ " " (str.++ "P" (str.++ "H" (str.++ "P" (str.++ "," (str.++ " " (str.++ "C" (str.++ "o" (str.++ "l" (str.++ "d" (str.++ "f" (str.++ "u" (str.++ "s" (str.++ "i" (str.++ "o" (str.++ "n" (str.++ " " (str.++ "a" (str.++ "n" (str.++ "d" (str.++ " " (str.++ "J" (str.++ "S" (str.++ "P" "")))))))))))))))))))))))))))))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "\u{9d}" (str.++ "U" (str.++ "P" (str.++ "D" (str.++ "A" (str.++ "T" (str.++ "E" (str.++ "\u{85}" (str.++ "\u{aa}" (str.++ "\u{85}" (str.++ "\u{0d}" (str.++ "\u{85}" (str.++ " " (str.++ "\u{a0}" (str.++ "\u{0b}" (str.++ "S" (str.++ "E" (str.++ "T" (str.++ "\u{a0}" (str.++ "C" (str.++ "h" (str.++ "R" (str.++ "\u{aa}" (str.++ "\u{85}" (str.++ "\u{85}" (str.++ " " (str.++ "W" (str.++ "H" (str.++ "E" (str.++ "R" (str.++ "E" (str.++ "\u{c2}" "")))))))))))))))))))))))))))))))))

(define-fun Witness2 () String (str.++ "\u{15}" (str.++ "\u{c5}" (str.++ "\u{1f}" (str.++ "\u{8c}" (str.++ "U" (str.++ "P" (str.++ "D" (str.++ "A" (str.++ "T" (str.++ "E" (str.++ "\u{0a}" (str.++ "\u{d4}" (str.++ "\u{aa}" (str.++ "\u{a0}" (str.++ "\u{a0}" (str.++ "\u{85}" (str.++ "S" (str.++ "E" (str.++ "T" (str.++ " " (str.++ "G" (str.++ "\u{a0}" (str.++ "\u{85}" (str.++ "W" (str.++ "H" (str.++ "E" (str.++ "R" (str.++ "E" (str.++ "\u{ac}" (str.++ "\u{d0}" "")))))))))))))))))))))))))))))))

(assert (= regexA (re.++ (re.++ (str.to_re (str.++ "U" (str.++ "P" (str.++ "D" (str.++ "A" (str.++ "T" (str.++ "E" ""))))))) (re.+ (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))))(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))(re.++ (re.+ (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (str.to_re (str.++ "S" (str.++ "E" (str.++ "T" ""))))(re.++ (re.+ (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (re.+ (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "*" ",")(re.union (re.range "0" "9")(re.union (re.range "=" "=")(re.union (re.range "?" "?")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{85}" "\u{85}")(re.union (re.range "\u{a0}" "\u{a0}")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))))))))))(re.++ (re.+ (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))) (re.++ (str.to_re (str.++ "W" (str.++ "H" (str.++ "E" (str.++ "R" (str.++ "E" "")))))) (re.+ (re.union (re.range "\u{00}" "\u{09}") (re.range "\u{0b}" "\u{ff}")))))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "\u{e7}" (str.++ "e" (str.++ "\u{e8}" ""))))

(define-fun Witness2 () String (str.++ "k" (str.++ "\u{c6}" (str.++ "\u{ae}" (str.++ "\u{bd}" (str.++ "}" (str.++ "e" (str.++ "v" (str.++ "i" "")))))))))

(assert (= regexA (re.++ (re.range "e" "e") (re.opt (re.++ (re.range "v" "v") (re.opt (re.range "i" "i")))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "J" (str.++ "-" (str.++ "Z" (str.++ "a" (str.++ "-" (str.++ "z" (str.++ "]" ""))))))))

(define-fun Witness2 () String (str.++ "-" (str.++ "Z" (str.++ "a" (str.++ "-" (str.++ "z" (str.++ "]" "")))))))

(assert (= regexA (re.++ (str.to_re (str.++ "-" (str.++ "Z" (str.++ "a" (str.++ "-" (str.++ "z" (str.++ "]" ""))))))) (str.to_re ""))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "[" (str.++ "b" (str.++ "]" (str.++ "\u{cb}" (str.++ "\u{d3}" (str.++ "[" (str.++ "/" (str.++ "b" (str.++ "]" (str.++ "/" "")))))))))))

(define-fun Witness2 () String (str.++ "[" (str.++ "b" (str.++ "]" (str.++ "\u{04}" (str.++ "[" (str.++ "/" (str.++ "b" (str.++ "]" "")))))))))

(assert (= regexA (re.++ (str.to_re (str.++ "[" (str.++ "b" (str.++ "]" ""))))(re.++ (re.+ (re.union (re.range "\u{00}" "Z")(re.union (re.range "\u{5c}" "\u{5c}") (re.range "^" "\u{ff}")))) (str.to_re (str.++ "[" (str.++ "/" (str.++ "b" (str.++ "]" "")))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "5" (str.++ "4" (str.++ "2" (str.++ "0" (str.++ "8" (str.++ "0" (str.++ "\u{85}" (str.++ "3" (str.++ "2" (str.++ "8" (str.++ "8" (str.++ "8" (str.++ "4" (str.++ "9" (str.++ "8" (str.++ "8" (str.++ "9" (str.++ "9" (str.++ "7" (str.++ "\u{98}" (str.++ "5" (str.++ "\u{5c}" "")))))))))))))))))))))))

(define-fun Witness2 () String (str.++ "\u{d1}" (str.++ "Y" (str.++ "3" (str.++ "8" (str.++ "4" (str.++ "5" (str.++ "\u{09}" (str.++ "9" (str.++ "7" (str.++ "0" (str.++ "9" (str.++ "\u{a0}" (str.++ "3" (str.++ "9" (str.++ "9" (str.++ "4" (str.++ "\u{0c}" (str.++ "5" (str.++ "9" (str.++ "0" (str.++ "5" ""))))))))))))))))))))))

(assert (= regexA (re.union (re.++ ((_ re.loop 6 6) (re.range "0" "9"))(re.++ (re.opt (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "-" "-")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))) ((_ re.loop 12 12) (re.range "0" "9")))) (re.++ ((_ re.loop 4 4) (re.range "0" "9"))(re.++ (re.opt (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "-" "-")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))))(re.++ ((_ re.loop 4 4) (re.range "0" "9"))(re.++ (re.opt (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "-" "-")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))))(re.++ ((_ re.loop 4 4) (re.range "0" "9"))(re.++ (re.opt (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "-" "-")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))) ((_ re.loop 4 4) (re.range "0" "9")))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "\u{97}" (str.++ "q" (str.++ "\u{22}" (str.++ "\u{5c}" (str.++ "d" (str.++ "d" (str.++ "d" (str.++ "\u{5c}" (str.++ "\u{cc}" (str.++ "\u{5c}" (str.++ "d" (str.++ "\u{5c}" (str.++ "H" (str.++ "\u{5c}" (str.++ "d" (str.++ "\u{5c}" (str.++ "\u{97}" (str.++ "\u{5c}" (str.++ "d" (str.++ "d" (str.++ "d" (str.++ "\u{22}" (str.++ "A" (str.++ "\u{b6}" "")))))))))))))))))))))))))

(define-fun Witness2 () String (str.++ "\u{cd}" (str.++ "\u{ee}" (str.++ "\u{22}" (str.++ "\u{5c}" (str.++ "d" (str.++ "d" (str.++ "d" (str.++ "\u{5c}" (str.++ "\u{9e}" (str.++ "\u{5c}" (str.++ "d" (str.++ "d" (str.++ "d" (str.++ "\u{5c}" (str.++ "\u{93}" (str.++ "\u{5c}" (str.++ "d" (str.++ "\u{5c}" (str.++ "\u{1a}" (str.++ "\u{5c}" (str.++ "d" (str.++ "d" (str.++ "\u{22}" ""))))))))))))))))))))))))

(assert (= regexA (re.++ (str.to_re (str.++ "\u{22}" (str.++ "\u{5c}" "")))(re.++ ((_ re.loop 1 3) (re.range "d" "d"))(re.++ (re.range "\u{5c}" "\u{5c}")(re.++ (re.union (re.range "\u{00}" "\u{09}") (re.range "\u{0b}" "\u{ff}"))(re.++ (re.range "\u{5c}" "\u{5c}")(re.++ ((_ re.loop 1 3) (re.range "d" "d"))(re.++ (re.range "\u{5c}" "\u{5c}")(re.++ (re.union (re.range "\u{00}" "\u{09}") (re.range "\u{0b}" "\u{ff}"))(re.++ (re.range "\u{5c}" "\u{5c}")(re.++ ((_ re.loop 1 3) (re.range "d" "d"))(re.++ (re.range "\u{5c}" "\u{5c}")(re.++ (re.union (re.range "\u{00}" "\u{09}") (re.range "\u{0b}" "\u{ff}"))(re.++ (re.range "\u{5c}" "\u{5c}")(re.++ ((_ re.loop 1 3) (re.range "d" "d")) (re.range "\u{22}" "\u{22}")))))))))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "\u{8e}" (str.++ "$" (str.++ " " (str.++ " " (str.++ " " (str.++ " " (str.++ "\u{a5}" (str.++ "\u{a6}" "")))))))))

(define-fun Witness2 () String (str.++ "\u{f3}" (str.++ "1" "")))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.+ (re.union (re.range "\u{00}" "\u{1f}")(re.union (re.range "!" "!")(re.union (re.range "#" ")")(re.union (re.range "+" ".")(re.union (re.range "0" "9")(re.union (re.range ";" ";")(re.union (re.range "=" "=")(re.union (re.range "@" "[")(re.union (re.range "]" "{") (re.range "}" "\u{ff}")))))))))))(re.++ (re.* (re.++ (re.+ (re.range " " " ")) (re.+ (re.union (re.range "\u{00}" "\u{1f}")(re.union (re.range "!" "!")(re.union (re.range "#" ")")(re.union (re.range "+" ".")(re.union (re.range "0" "9")(re.union (re.range ";" ";")(re.union (re.range "=" "=")(re.union (re.range "@" "[")(re.union (re.range "]" "{") (re.range "}" "\u{ff}"))))))))))))) (str.to_re ""))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "2" (str.++ "2" (str.++ ":" (str.++ "2" (str.++ "5" ""))))))

(define-fun Witness2 () String (str.++ "0" (str.++ "5" (str.++ ":" (str.++ "4" (str.++ "4" ""))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.union (re.++ (re.range "0" "1") (re.range "0" "9")) (re.++ (re.range "2" "2") (re.range "0" "3")))(re.++ (re.range ":" ":")(re.++ (re.++ (re.range "0" "5") (re.range "0" "9")) (str.to_re "")))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "N" (str.++ "o" (str.++ "a" (str.++ "w" (str.++ "e" (str.++ "a" "")))))))

(define-fun Witness2 () String (str.++ "Z" (str.++ "w" (str.++ "i" (str.++ "e" (str.++ "u" (str.++ "e" "")))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.range "A" "Z")(re.++ (re.+ (re.range "a" "z"))(re.++ (re.++ (re.opt (re.range "i" "i"))(re.++ (re.range "e" "e")(re.++ (re.opt (re.range "a" "a"))(re.++ (re.opt (re.range "u" "u")) (re.opt (re.union (re.range "(" ")")(re.union (re.range "?" "?")(re.union (re.range "e" "e")(re.union (re.range "r" "r")(re.union (re.range "x" "x") (re.range "|" "|"))))))))))) (str.to_re "")))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "+" (str.++ "4" (str.++ "4" (str.++ "7" (str.++ "9" (str.++ "8" (str.++ "9" (str.++ "9" (str.++ "9" (str.++ "5" (str.++ "9" (str.++ "7" (str.++ "8" ""))))))))))))))

(define-fun Witness2 () String (str.++ "+" (str.++ "4" (str.++ "4" (str.++ "7" (str.++ "9" (str.++ "9" (str.++ "7" (str.++ "8" (str.++ "3" (str.++ "7" (str.++ "9" (str.++ "6" (str.++ "7" ""))))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (str.to_re (str.++ "+" (str.++ "4" (str.++ "4" (str.++ "7" "")))))(re.++ ((_ re.loop 9 9) (re.range "0" "9")) (str.to_re ""))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "y" (str.++ "c" (str.++ "z" ""))))

(define-fun Witness2 () String (str.++ "i" (str.++ "\u{fc}" "")))

(assert (= regexA (re.++ (re.+ (re.union (re.range "a" "z")(re.union (re.range "\u{e0}" "\u{ef}")(re.union (re.range "\u{f2}" "\u{f6}") (re.range "\u{f9}" "\u{fc}"))))) (str.to_re ""))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "\u{88}" (str.++ "\u{fe}" (str.++ "/" (str.++ "\u{dd}" (str.++ "\u{10}" (str.++ "\u{de}" (str.++ "/" (str.++ "-" "")))))))))

(define-fun Witness2 () String (str.++ "l" ""))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.* (re.range "/" "/"))(re.++ (re.* (re.++ (re.union (re.range "\u{00}" "\u{1f}")(re.union (re.range "!" "!")(re.union (re.range "#" ")")(re.union (re.range "+" "-")(re.union (re.range "0" "9")(re.union (re.range ";" ";")(re.union (re.range "=" "=")(re.union (re.range "@" "[")(re.union (re.range "]" "{") (re.range "}" "\u{ff}"))))))))))(re.++ ((_ re.loop 0 63) (re.union (re.range "\u{00}" "!")(re.union (re.range "#" ")")(re.union (re.range "+" ".")(re.union (re.range "0" "9")(re.union (re.range ";" ";")(re.union (re.range "=" "=")(re.union (re.range "@" "[")(re.union (re.range "]" "{") (re.range "}" "\u{ff}")))))))))) (re.range "/" "/"))))(re.++ (re.union (re.range "\u{00}" "\u{1f}")(re.union (re.range "!" "!")(re.union (re.range "#" ")")(re.union (re.range "+" "-")(re.union (re.range "0" "9")(re.union (re.range ";" ";")(re.union (re.range "=" "=")(re.union (re.range "@" "[")(re.union (re.range "]" "{") (re.range "}" "\u{ff}"))))))))))(re.++ ((_ re.loop 0 63) (re.union (re.range "\u{00}" "!")(re.union (re.range "#" ")")(re.union (re.range "+" ".")(re.union (re.range "0" "9")(re.union (re.range ";" ";")(re.union (re.range "=" "=")(re.union (re.range "@" "[")(re.union (re.range "]" "{") (re.range "}" "\u{ff}")))))))))) (str.to_re ""))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "S" (str.++ "S" (str.++ "7" (str.++ "8" (str.++ "4" (str.++ "7" (str.++ "1" (str.++ "0" "")))))))))

(define-fun Witness2 () String (str.++ "C" (str.++ "S" (str.++ "8" (str.++ "9" (str.++ "8" (str.++ "8" (str.++ "9" (str.++ "8" "")))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ ((_ re.loop 2 2) (re.union (re.range "C" "C") (re.range "S" "S")))(re.++ ((_ re.loop 6 6) (re.range "0" "9")) (str.to_re ""))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "1" (str.++ "6" (str.++ "5" (str.++ "7" (str.++ "5" (str.++ "3" "")))))))

(define-fun Witness2 () String (str.++ "1" (str.++ "7" (str.++ "1" (str.++ "1" (str.++ "1" (str.++ "3" "")))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.++ (re.union (re.++ (re.range "0" "0") (re.range "1" "9"))(re.union (re.++ (re.range "1" "1") (re.range "0" "9")) (re.++ (re.range "2" "2") (re.range "0" "4")))) ((_ re.loop 2 2) (re.++ (re.range "0" "5") (re.range "0" "9")))) (str.to_re "")))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "q" (str.++ "h" (str.++ "u" (str.++ "-" (str.++ "f" (str.++ "." (str.++ "e" (str.++ "d" (str.++ "u" ""))))))))))

(define-fun Witness2 () String (str.++ "N" (str.++ "l" (str.++ "b" (str.++ "." (str.++ "e" (str.++ "d" (str.++ "u" ""))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z"))))(re.++ (re.opt (re.+ (re.union (re.range "-" ".")(re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z"))))))(re.++ (re.range "." ".")(re.++ (re.union (str.to_re (str.++ "c" (str.++ "o" (str.++ "m" ""))))(re.union (str.to_re (str.++ "o" (str.++ "r" (str.++ "g" ""))))(re.union (str.to_re (str.++ "n" (str.++ "e" (str.++ "t" ""))))(re.union (str.to_re (str.++ "m" (str.++ "i" (str.++ "l" ""))))(re.union (str.to_re (str.++ "e" (str.++ "d" (str.++ "u" ""))))(re.union (str.to_re (str.++ "C" (str.++ "O" (str.++ "M" ""))))(re.union (str.to_re (str.++ "O" (str.++ "R" (str.++ "G" ""))))(re.union (str.to_re (str.++ "N" (str.++ "E" (str.++ "T" ""))))(re.union (str.to_re (str.++ "M" (str.++ "I" (str.++ "L" "")))) (str.to_re (str.++ "E" (str.++ "D" (str.++ "U" ""))))))))))))) (str.to_re ""))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "I" (str.++ "T" (str.++ "9" (str.++ "9" (str.++ "9" (str.++ "8" (str.++ "8" (str.++ "0" (str.++ "4" (str.++ "8" (str.++ "9" (str.++ "K" (str.++ "9" (str.++ "0" (str.++ "C" (str.++ "9" "")))))))))))))))))

(define-fun Witness2 () String (str.++ "Q" (str.++ "O" (str.++ "Q" (str.++ "S" (str.++ "P" (str.++ "9" (str.++ "7" (str.++ "9" (str.++ "9" (str.++ "2" (str.++ "0" (str.++ "U" (str.++ "9" (str.++ "," (str.++ "9" (str.++ "," "")))))))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.union (re.++ ((_ re.loop 2 2) (re.range "A" "Z")) ((_ re.loop 3 3) (re.range "9" "9")))(re.union (re.++ ((_ re.loop 3 3) (re.range "A" "Z")) ((_ re.loop 2 2) (re.range "9" "9")))(re.union (re.++ ((_ re.loop 4 4) (re.range "A" "Z")) (re.range "9" "9")) ((_ re.loop 5 5) (re.range "A" "Z")))))(re.++ ((_ re.loop 6 6) (re.range "0" "9"))(re.++ (re.union (re.++ (re.range "A" "Z") (re.range "9" "9")) ((_ re.loop 2 2) (re.range "A" "Z")))(re.++ ((_ re.loop 3 3) (re.union (re.range "," ",")(re.union (re.range "0" "0")(re.union (re.range "9" "9") (re.range "A" "Z"))))) (str.to_re ""))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "8" (str.++ "1" (str.++ "2" (str.++ "9" "")))))

(define-fun Witness2 () String (str.++ "4" (str.++ "8" (str.++ "8" (str.++ "8" "")))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.range "1" "9")(re.++ ((_ re.loop 3 3) (re.range "0" "9")) (str.to_re ""))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "2" (str.++ "\u{a0}" (str.++ "s" (str.++ "," (str.++ "2" (str.++ "J" "")))))))

(define-fun Witness2 () String (str.++ "4" (str.++ "d" (str.++ "\u{a0}" (str.++ "8" (str.++ " " (str.++ "," (str.++ "\u{a0}" (str.++ "K" (str.++ " " ""))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.+ (re.++ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z"))) (re.opt (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))))(re.++ (re.* (re.++ (re.range "," ",")(re.++ (re.opt (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))) (re.+ (re.++ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z"))) (re.opt (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))))))) (str.to_re ""))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "9" (str.++ "9" (str.++ "9" (str.++ "9" "")))))

(define-fun Witness2 () String (str.++ "9" (str.++ "9" (str.++ "9" (str.++ "9" "")))))

(assert (= regexA (re.union (re.++ (str.to_re "")(re.++ (re.range "1" "9") (str.to_re "")))(re.union (re.++ (str.to_re "")(re.++ (re.range "0" "9")(re.++ (re.range "0" "9")(re.++ (re.range "0" "9")(re.++ (re.range "0" "9") (str.to_re "")))))) (re.++ (str.to_re "")(re.++ (str.to_re (str.++ "9" (str.++ "9" (str.++ "9" (str.++ "9" ""))))) (str.to_re "")))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "5" (str.++ "9" (str.++ "9" (str.++ " " (str.++ "7" (str.++ "2" (str.++ "7" (str.++ " " (str.++ "0" (str.++ "5" (str.++ "8" (str.++ "9" "")))))))))))))

(define-fun Witness2 () String (str.++ "{" (str.++ "1" (str.++ "}" (str.++ "6" (str.++ "5" (str.++ "5" (str.++ ")" (str.++ "5" (str.++ "8" (str.++ "9" (str.++ "8" (str.++ "3" (str.++ "9" (str.++ "8" "")))))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.union (re.++ (str.to_re (str.++ "{" (str.++ "1" (str.++ "}" ""))))(re.++ (re.range "2" "9")(re.++ ((_ re.loop 2 2) (re.range "0" "9"))(re.++ (re.range ")" ")")(re.++ (re.opt (re.range " " " "))(re.++ (re.range "2" "9")(re.++ ((_ re.loop 2 2) (re.range "0" "9"))(re.++ (re.opt (re.union (re.range " " " ") (re.range "-" "-"))) ((_ re.loop 4 4) (re.range "0" "9"))))))))))(re.union (re.++ (re.range "2" "9")(re.++ ((_ re.loop 2 2) (re.range "0" "9"))(re.++ (re.range " " " ")(re.++ (re.range "2" "9")(re.++ ((_ re.loop 2 2) (re.range "0" "9"))(re.++ (re.range " " " ") ((_ re.loop 4 4) (re.range "0" "9"))))))))(re.union (re.++ (re.range "2" "9")(re.++ ((_ re.loop 2 2) (re.range "0" "9"))(re.++ (re.range "2" "9") ((_ re.loop 6 6) (re.range "0" "9"))))) (re.++ (re.range "2" "9")(re.++ ((_ re.loop 2 2) (re.range "0" "9"))(re.++ (re.range "-" "-")(re.++ (re.range "2" "9")(re.++ ((_ re.loop 2 2) (re.range "0" "9"))(re.++ (re.range "-" "-") ((_ re.loop 4 4) (re.range "0" "9"))))))))))) (str.to_re "")))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "3" (str.++ "0" (str.++ "." (str.++ "1" (str.++ "2" (str.++ "." (str.++ "1" (str.++ "9" (str.++ "4" (str.++ "2" "")))))))))))

(define-fun Witness2 () String (str.++ "1" (str.++ "8" (str.++ "." (str.++ "0" (str.++ "8" (str.++ "." (str.++ "2" (str.++ "9" (str.++ "6" (str.++ "8" "")))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.union (re.++ (re.union (re.++ (re.range "0" "0") (re.range "1" "9"))(re.union (re.++ (re.range "1" "2") (re.range "0" "9")) (re.++ (re.range "3" "3") (re.range "0" "1"))))(re.++ (re.range "." ".")(re.++ (re.union (re.++ (re.range "0" "0") (re.union (re.range "1" "1")(re.union (re.range "3" "3")(re.union (re.range "5" "5") (re.range "7" "8")))))(re.union (str.to_re (str.++ "1" (str.++ "0" ""))) (str.to_re (str.++ "1" (str.++ "2" "")))))(re.++ (re.range "." ".") (re.union (re.++ (str.to_re (str.++ "1" (str.++ "9" "")))(re.++ (re.range "0" "9") (re.range "0" "9"))) (re.++ (re.range "2" "2")(re.++ (re.range "0" "9")(re.++ (re.range "0" "9") (re.range "0" "9")))))))))(re.union (re.++ (re.union (re.++ (re.range "0" "0") (re.range "1" "9"))(re.union (re.++ (re.range "1" "2") (re.range "0" "9")) (str.to_re (str.++ "3" (str.++ "0" "")))))(re.++ (re.range "." ".")(re.++ (re.union (re.++ (re.range "0" "0") (re.union (re.range "4" "4")(re.union (re.range "6" "6") (re.range "9" "9")))) (str.to_re (str.++ "1" (str.++ "1" ""))))(re.++ (re.range "." ".") (re.union (re.++ (str.to_re (str.++ "1" (str.++ "9" "")))(re.++ (re.range "0" "9") (re.range "0" "9"))) (re.++ (re.range "2" "2")(re.++ (re.range "0" "9")(re.++ (re.range "0" "9") (re.range "0" "9")))))))))(re.union (re.++ (re.union (re.++ (re.range "0" "0") (re.range "1" "9"))(re.union (re.++ (re.range "1" "1") (re.range "0" "9")) (re.++ (re.range "2" "2") (re.range "0" "8"))))(re.++ (re.range "." ".")(re.++ (str.to_re (str.++ "0" (str.++ "2" "")))(re.++ (re.range "." ".") (re.union (re.++ (str.to_re (str.++ "1" (str.++ "9" "")))(re.++ (re.range "0" "9") (re.range "0" "9"))) (re.++ (re.range "2" "2")(re.++ (re.range "0" "9")(re.++ (re.range "0" "9") (re.range "0" "9")))))))))(re.union (re.++ (str.to_re (str.++ "2" (str.++ "9" "")))(re.++ (re.range "." ".")(re.++ (str.to_re (str.++ "0" (str.++ "2" "")))(re.++ (re.range "." ".") (re.++ (re.union (re.range "0" "0")(re.union (re.range "2" "2")(re.union (re.range "4" "4")(re.union (re.range "6" "6") (re.range "8" "8")))))(re.++ (re.union (re.range "0" "0")(re.union (re.range "4" "4") (re.range "8" "8"))) (str.to_re (str.++ "0" (str.++ "0" "")))))))))(re.union (re.++ (str.to_re (str.++ "2" (str.++ "9" "")))(re.++ (re.range "." ".")(re.++ (str.to_re (str.++ "0" (str.++ "2" "")))(re.++ (re.range "." ".") (re.++ (re.union (re.range "1" "1")(re.union (re.range "3" "3")(re.union (re.range "5" "5")(re.union (re.range "7" "7") (re.range "9" "9")))))(re.++ (re.union (re.range "2" "2") (re.range "6" "6")) (str.to_re (str.++ "0" (str.++ "0" "")))))))))(re.union (re.++ (str.to_re (str.++ "2" (str.++ "9" "")))(re.++ (re.range "." ".")(re.++ (str.to_re (str.++ "0" (str.++ "2" "")))(re.++ (re.range "." ".") (re.++ (re.range "0" "9")(re.++ (re.range "0" "9")(re.++ (re.range "0" "0") (re.union (re.range "4" "4") (re.range "8" "8")))))))))(re.union (re.++ (str.to_re (str.++ "2" (str.++ "9" "")))(re.++ (re.range "." ".")(re.++ (str.to_re (str.++ "0" (str.++ "2" "")))(re.++ (re.range "." ".") (re.++ (re.range "0" "9")(re.++ (re.range "0" "9")(re.++ (re.union (re.range "2" "2")(re.union (re.range "4" "4")(re.union (re.range "6" "6") (re.range "8" "8")))) (re.union (re.range "0" "0")(re.union (re.range "4" "4") (re.range "8" "8")))))))))) (re.++ (str.to_re (str.++ "2" (str.++ "9" "")))(re.++ (re.range "." ".")(re.++ (str.to_re (str.++ "0" (str.++ "2" "")))(re.++ (re.range "." ".") (re.++ (re.range "0" "9")(re.++ (re.range "0" "9")(re.++ (re.union (re.range "1" "1")(re.union (re.range "3" "3")(re.union (re.range "5" "5")(re.union (re.range "7" "7") (re.range "9" "9"))))) (re.union (re.range "2" "2") (re.range "6" "6")))))))))))))))) (str.to_re "")))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "h" (str.++ "t" (str.++ "t" (str.++ "p" (str.++ "s" (str.++ ":" (str.++ "/" (str.++ "/" (str.++ "n" (str.++ "\u{bb}" (str.++ "\u{a0}" ""))))))))))))

(define-fun Witness2 () String (str.++ "h" (str.++ "t" (str.++ "t" (str.++ "p" (str.++ "s" (str.++ ":" (str.++ "/" (str.++ "/" (str.++ "\u{cf}" (str.++ " " "")))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.++ (str.to_re (str.++ "h" (str.++ "t" (str.++ "t" (str.++ "p" "")))))(re.++ (re.opt (re.range "s" "s"))(re.++ (str.to_re (str.++ ":" (str.++ "/" (str.++ "/" "")))) (re.+ (re.union (re.range "\u{00}" "\u{08}")(re.union (re.range "\u{0e}" "\u{1f}")(re.union (re.range "!" "\u{84}")(re.union (re.range "\u{86}" "\u{9f}") (re.range "\u{a1}" "\u{ff}"))))))))) (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "8" (str.++ "," (str.++ "9" (str.++ "7" "")))))

(define-fun Witness2 () String (str.++ "0" (str.++ "6" (str.++ "," (str.++ "8" "")))))

(assert (= regexA (re.union (re.++ (str.to_re "")(re.++ (str.to_re (str.++ "1" (str.++ "0" (str.++ "0" "")))) (str.to_re "")))(re.union (re.++ (str.to_re "")(re.++ ((_ re.loop 1 2) (re.range "0" "9")) (str.to_re ""))) (re.++ (str.to_re "")(re.++ ((_ re.loop 1 2) (re.range "0" "9"))(re.++ (re.range "," ",")(re.++ ((_ re.loop 1 3) (re.range "0" "9")) (str.to_re "")))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "1" (str.++ "0" (str.++ "0" ""))))

(define-fun Witness2 () String (str.++ "1" (str.++ "0" (str.++ "0" ""))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.union (re.range "1" "9")(re.union (re.++ (re.range "1" "9") (re.range "0" "9")) (str.to_re (str.++ "1" (str.++ "0" (str.++ "0" "")))))) (str.to_re "")))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "<" (str.++ "!" (str.++ "-" (str.++ "-" (str.++ "Z" (str.++ "." (str.++ "-" (str.++ "\u{07}" (str.++ "\u{e3}" (str.++ "-" (str.++ "-" (str.++ ">" "")))))))))))))

(define-fun Witness2 () String (str.++ "<" (str.++ "!" (str.++ "-" (str.++ "-" (str.++ "/" (str.++ "-" (str.++ "-" (str.++ ">" "")))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (str.to_re (str.++ "<" (str.++ "!" (str.++ "-" (str.++ "-" "")))))(re.++ (re.+ (re.* (re.union (re.range "\u{00}" "\u{09}") (re.range "\u{0b}" "\u{ff}"))))(re.++ (re.opt (re.range "/" "/"))(re.++ (str.to_re (str.++ "-" (str.++ "-" (str.++ ">" "")))) (str.to_re ""))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "9" (str.++ "9" "")))

(define-fun Witness2 () String (str.++ "2" ""))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.union (re.range "1" "9")(re.union (re.++ (re.range "1" "9") (re.range "0" "9"))(re.union (re.++ (re.range "1" "1") ((_ re.loop 2 2) (re.range "0" "9")))(re.union (re.++ (re.range "2" "2")(re.++ (re.range "0" "4") (re.range "0" "9"))) (re.++ (str.to_re (str.++ "2" (str.++ "5" ""))) (re.range "0" "5")))))) (str.to_re "")))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "0" (str.++ "7" (str.++ "0" (str.++ "8" (str.++ "1" (str.++ "8" (str.++ "9" (str.++ "3" (str.++ "7" (str.++ "4" (str.++ "8" ""))))))))))))

(define-fun Witness2 () String (str.++ "0" (str.++ "7" (str.++ "0" (str.++ "8" (str.++ "8" (str.++ "\u{cc}" (str.++ "8" (str.++ "9" (str.++ "5" (str.++ "\u{0d}" (str.++ "5" (str.++ "0" (str.++ "2" ""))))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (str.to_re (str.++ "0" (str.++ "7" "")))(re.++ ((_ re.loop 3 3) (re.range "0" "9"))(re.++ (re.opt (re.union (re.range "\u{00}" "/") (re.range ":" "\u{ff}")))(re.++ ((_ re.loop 3 3) (re.range "0" "9"))(re.++ (re.opt (re.union (re.range "\u{00}" "/") (re.range ":" "\u{ff}")))(re.++ ((_ re.loop 3 3) (re.range "0" "9")) (str.to_re ""))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "8" (str.++ "." (str.++ "8" (str.++ "9" (str.++ "1" (str.++ "." (str.++ "2" (str.++ "5" (str.++ "7" (str.++ "-" (str.++ "k" ""))))))))))))

(define-fun Witness2 () String (str.++ "8" (str.++ "8" (str.++ "." (str.++ "8" (str.++ "0" (str.++ "8" (str.++ "." (str.++ "1" (str.++ "8" (str.++ "9" (str.++ "-" (str.++ "K" "")))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ ((_ re.loop 1 2) (re.range "0" "9"))(re.++ (re.range "." ".")(re.++ ((_ re.loop 3 3) (re.range "0" "9"))(re.++ (re.range "." ".")(re.++ ((_ re.loop 3 3) (re.range "0" "9"))(re.++ (re.range "-" "-")(re.++ (re.union (re.range "0" "9")(re.union (re.range "K" "K") (re.range "k" "k"))) (str.to_re "")))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "1" (str.++ "1" (str.++ "9" (str.++ "8" (str.++ "\u{85}" (str.++ "R" (str.++ "b" ""))))))))

(define-fun Witness2 () String (str.++ "9" (str.++ "8" (str.++ "9" (str.++ "6" (str.++ "\u{85}" (str.++ "d" (str.++ "a" ""))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ ((_ re.loop 4 4) (re.range "0" "9"))(re.++ ((_ re.loop 0 2) (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ ((_ re.loop 2 2) (re.range "A" "z")) (str.to_re "")))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "y" (str.++ "-" (str.++ "2" (str.++ "@" (str.++ "k" (str.++ "." (str.++ "R" (str.++ "t" (str.++ "m" (str.++ "R" "")))))))))))

(define-fun Witness2 () String (str.++ "8" (str.++ "." (str.++ "1" (str.++ "4" (str.++ "@" (str.++ "X" (str.++ "0" (str.++ "." (str.++ "h" (str.++ "A" "")))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))(re.++ (re.* (re.++ (re.opt (re.union (re.range "-" ".") (re.range "_" "_"))) (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z"))))))(re.++ (re.range "@" "@")(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z"))))(re.++ (re.* (re.++ (re.opt (re.range "-" ".")) (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z"))))))(re.++ (re.range "." ".")(re.++ (re.++ ((_ re.loop 2 2) (re.union (re.range "A" "Z") (re.range "a" "z"))) (re.* (re.union (re.range "A" "Z") (re.range "a" "z")))) (str.to_re "")))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "+" (str.++ "4" (str.++ "4" (str.++ "5" (str.++ "2" (str.++ "7" (str.++ "4" (str.++ "8" (str.++ "8" (str.++ "8" (str.++ "8" (str.++ "3" "")))))))))))))

(define-fun Witness2 () String (str.++ "(" (str.++ "0" (str.++ "5" (str.++ "8" (str.++ "0" (str.++ ")" (str.++ " " (str.++ "1" (str.++ "9" (str.++ "8" (str.++ "\u{a0}" (str.++ "9" (str.++ "1" (str.++ "7" "")))))))))))))))

(assert (= regexA (re.union (re.++ (re.union (re.++ (re.opt (re.range "(" "("))(re.++ (str.to_re (str.++ "+" (str.++ "4" (str.++ "4" ""))))(re.++ (re.opt (re.range ")" ")"))(re.++ (re.opt (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (re.union (re.range "1" "3") (re.range "7" "8")) ((_ re.loop 3 3) (re.range "0" "9"))))))) (re.++ (re.opt (re.range "(" "("))(re.++ (re.union (str.to_re (str.++ "0" (str.++ "1" "")))(re.union (str.to_re (str.++ "0" (str.++ "2" "")))(re.union (str.to_re (str.++ "0" (str.++ "3" "")))(re.union (str.to_re (str.++ "0" (str.++ "7" ""))) (str.to_re (str.++ "0" (str.++ "8" "")))))))(re.++ ((_ re.loop 3 3) (re.range "0" "9")) (re.opt (re.range ")" ")"))))))(re.++ (re.opt (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ ((_ re.loop 3 3) (re.range "0" "9"))(re.++ (re.opt (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))) ((_ re.loop 3 3) (re.range "0" "9"))))))(re.union (re.++ (re.union (re.++ (re.opt (re.range "(" "("))(re.++ (str.to_re (str.++ "+" (str.++ "4" (str.++ "4" ""))))(re.++ (re.opt (re.range ")" ")"))(re.++ (re.opt (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (re.union (re.range "1" "3")(re.union (re.range "5" "5") (re.range "7" "8"))) ((_ re.loop 2 2) (re.range "0" "9"))))))) (re.++ (re.opt (re.range "(" "("))(re.++ (re.union (str.to_re (str.++ "0" (str.++ "1" "")))(re.union (str.to_re (str.++ "0" (str.++ "2" "")))(re.union (str.to_re (str.++ "0" (str.++ "3" "")))(re.union (str.to_re (str.++ "0" (str.++ "5" "")))(re.union (str.to_re (str.++ "0" (str.++ "7" ""))) (str.to_re (str.++ "0" (str.++ "8" ""))))))))(re.++ ((_ re.loop 2 2) (re.range "0" "9")) (re.opt (re.range ")" ")"))))))(re.++ (re.opt (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ ((_ re.loop 3 3) (re.range "0" "9"))(re.++ (re.opt (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))) ((_ re.loop 4 4) (re.range "0" "9")))))) (re.++ (re.union (re.++ (re.opt (re.range "(" "("))(re.++ (str.to_re (str.++ "+" (str.++ "4" (str.++ "4" ""))))(re.++ (re.opt (re.range ")" ")"))(re.++ (re.opt (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (re.union (re.range "5" "5") (re.range "9" "9")) ((_ re.loop 2 2) (re.range "0" "9"))))))) (re.++ (re.opt (re.range "(" "("))(re.++ (re.union (str.to_re (str.++ "0" (str.++ "5" ""))) (str.to_re (str.++ "0" (str.++ "9" ""))))(re.++ ((_ re.loop 2 2) (re.range "0" "9")) (re.opt (re.range ")" ")"))))))(re.++ (re.opt (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ ((_ re.loop 3 3) (re.range "0" "9"))(re.++ (re.opt (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))) ((_ re.loop 3 3) (re.range "0" "9"))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "t" (str.++ "." (str.++ "x" (str.++ "@" (str.++ "0" (str.++ "4" (str.++ "1" (str.++ "." (str.++ "2" (str.++ "3" (str.++ "." (str.++ "2" (str.++ "1" (str.++ "2" (str.++ "." (str.++ "2" (str.++ "5" (str.++ "5" "")))))))))))))))))))

(define-fun Witness2 () String (str.++ "-" (str.++ "a" (str.++ "." (str.++ "@" (str.++ "2" (str.++ "5" (str.++ "5" (str.++ "." (str.++ "6" (str.++ "9" (str.++ "." (str.++ "2" (str.++ "5" (str.++ "1" (str.++ "." (str.++ "2" (str.++ "1" (str.++ "8" "")))))))))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.++ (re.+ (re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_") (re.range "a" "z"))))))(re.++ (re.range "." ".") (re.* (re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_") (re.range "a" "z"))))))))(re.++ (re.range "@" "@")(re.++ (re.union (re.++ ((_ re.loop 2 255) (re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))))(re.++ (re.range "." ".") (re.union (str.to_re (str.++ "a" (str.++ "d" "")))(re.union (str.to_re (str.++ "a" (str.++ "e" "")))(re.union (str.to_re (str.++ "a" (str.++ "f" "")))(re.union (str.to_re (str.++ "a" (str.++ "g" "")))(re.union (str.to_re (str.++ "a" (str.++ "i" "")))(re.union (str.to_re (str.++ "a" (str.++ "l" "")))(re.union (str.to_re (str.++ "a" (str.++ "m" "")))(re.union (str.to_re (str.++ "a" (str.++ "n" "")))(re.union (str.to_re (str.++ "a" (str.++ "o" "")))(re.union (str.to_re (str.++ "a" (str.++ "q" "")))(re.union (str.to_re (str.++ "a" (str.++ "r" "")))(re.union (str.to_re (str.++ "a" (str.++ "s" "")))(re.union (str.to_re (str.++ "a" (str.++ "t" "")))(re.union (str.to_re (str.++ "a" (str.++ "u" "")))(re.union (str.to_re (str.++ "a" (str.++ "w" "")))(re.union (str.to_re (str.++ "a" (str.++ "z" "")))(re.union (str.to_re (str.++ "b" (str.++ "a" "")))(re.union (str.to_re (str.++ "b" (str.++ "b" "")))(re.union (str.to_re (str.++ "b" (str.++ "d" "")))(re.union (str.to_re (str.++ "b" (str.++ "e" "")))(re.union (str.to_re (str.++ "b" (str.++ "f" "")))(re.union (str.to_re (str.++ "b" (str.++ "g" "")))(re.union (str.to_re (str.++ "b" (str.++ "h" "")))(re.union (str.to_re (str.++ "b" (str.++ "i" "")))(re.union (str.to_re (str.++ "b" (str.++ "j" "")))(re.union (str.to_re (str.++ "b" (str.++ "m" "")))(re.union (str.to_re (str.++ "b" (str.++ "n" "")))(re.union (str.to_re (str.++ "b" (str.++ "o" "")))(re.union (str.to_re (str.++ "b" (str.++ "r" "")))(re.union (str.to_re (str.++ "b" (str.++ "s" "")))(re.union (str.to_re (str.++ "b" (str.++ "t" "")))(re.union (str.to_re (str.++ "b" (str.++ "v" "")))(re.union (str.to_re (str.++ "b" (str.++ "w" "")))(re.union (str.to_re (str.++ "b" (str.++ "y" "")))(re.union (str.to_re (str.++ "b" (str.++ "z" "")))(re.union (str.to_re (str.++ "c" (str.++ "a" "")))(re.union (str.to_re (str.++ "c" (str.++ "c" "")))(re.union (str.to_re (str.++ "c" (str.++ "f" "")))(re.union (str.to_re (str.++ "c" (str.++ "g" "")))(re.union (str.to_re (str.++ "c" (str.++ "h" "")))(re.union (str.to_re (str.++ "c" (str.++ "i" "")))(re.union (str.to_re (str.++ "c" (str.++ "k" "")))(re.union (str.to_re (str.++ "c" (str.++ "l" "")))(re.union (str.to_re (str.++ "c" (str.++ "m" "")))(re.union (str.to_re (str.++ "c" (str.++ "n" "")))(re.union (str.to_re (str.++ "c" (str.++ "o" "")))(re.union (str.to_re (str.++ "c" (str.++ "r" "")))(re.union (str.to_re (str.++ "c" (str.++ "u" "")))(re.union (str.to_re (str.++ "c" (str.++ "v" "")))(re.union (str.to_re (str.++ "c" (str.++ "x" "")))(re.union (str.to_re (str.++ "c" (str.++ "y" "")))(re.union (str.to_re (str.++ "c" (str.++ "z" "")))(re.union (str.to_re (str.++ "d" (str.++ "e" "")))(re.union (str.to_re (str.++ "d" (str.++ "i" "")))(re.union (str.to_re (str.++ "d" (str.++ "k" "")))(re.union (str.to_re (str.++ "d" (str.++ "m" "")))(re.union (str.to_re (str.++ "d" (str.++ "o" "")))(re.union (str.to_re (str.++ "d" (str.++ "z" "")))(re.union (str.to_re (str.++ "e" (str.++ "c" "")))(re.union (str.to_re (str.++ "e" (str.++ "e" "")))(re.union (str.to_re (str.++ "e" (str.++ "g" "")))(re.union (str.to_re (str.++ "e" (str.++ "h" "")))(re.union (str.to_re (str.++ "e" (str.++ "r" "")))(re.union (str.to_re (str.++ "e" (str.++ "s" "")))(re.union (str.to_re (str.++ "e" (str.++ "t" "")))(re.union (str.to_re (str.++ "f" (str.++ "i" "")))(re.union (str.to_re (str.++ "f" (str.++ "j" "")))(re.union (str.to_re (str.++ "f" (str.++ "k" "")))(re.union (str.to_re (str.++ "f" (str.++ "m" "")))(re.union (str.to_re (str.++ "f" (str.++ "o" "")))(re.union (str.to_re (str.++ "f" (str.++ "r" "")))(re.union (str.to_re (str.++ "g" (str.++ "a" "")))(re.union (str.to_re (str.++ "g" (str.++ "b" "")))(re.union (str.to_re (str.++ "g" (str.++ "d" "")))(re.union (str.to_re (str.++ "g" (str.++ "e" "")))(re.union (str.to_re (str.++ "g" (str.++ "f" "")))(re.union (str.to_re (str.++ "g" (str.++ "h" "")))(re.union (str.to_re (str.++ "g" (str.++ "i" "")))(re.union (str.to_re (str.++ "g" (str.++ "l" "")))(re.union (str.to_re (str.++ "g" (str.++ "m" "")))(re.union (str.to_re (str.++ "g" (str.++ "n" "")))(re.union (str.to_re (str.++ "g" (str.++ "p" "")))(re.union (str.to_re (str.++ "g" (str.++ "q" "")))(re.union (str.to_re (str.++ "g" (str.++ "r" "")))(re.union (str.to_re (str.++ "g" (str.++ "s" "")))(re.union (str.to_re (str.++ "g" (str.++ "t" "")))(re.union (str.to_re (str.++ "g" (str.++ "u" "")))(re.union (str.to_re (str.++ "g" (str.++ "w" "")))(re.union (str.to_re (str.++ "g" (str.++ "y" "")))(re.union (str.to_re (str.++ "h" (str.++ "k" "")))(re.union (str.to_re (str.++ "h" (str.++ "m" "")))(re.union (str.to_re (str.++ "h" (str.++ "n" "")))(re.union (str.to_re (str.++ "h" (str.++ "r" "")))(re.union (str.to_re (str.++ "h" (str.++ "t" "")))(re.union (str.to_re (str.++ "h" (str.++ "u" "")))(re.union (str.to_re (str.++ "i" (str.++ "d" "")))(re.union (str.to_re (str.++ "i" (str.++ "e" "")))(re.union (str.to_re (str.++ "i" (str.++ "l" "")))(re.union (str.to_re (str.++ "i" (str.++ "n" "")))(re.union (str.to_re (str.++ "i" (str.++ "o" "")))(re.union (str.to_re (str.++ "i" (str.++ "q" "")))(re.union (str.to_re (str.++ "i" (str.++ "r" "")))(re.union (str.to_re (str.++ "i" (str.++ "s" "")))(re.union (str.to_re (str.++ "i" (str.++ "t" "")))(re.union (str.to_re (str.++ "j" (str.++ "o" "")))(re.union (str.to_re (str.++ "j" (str.++ "m" "")))(re.union (str.to_re (str.++ "j" (str.++ "p" "")))(re.union (str.to_re (str.++ "k" (str.++ "e" "")))(re.union (str.to_re (str.++ "k" (str.++ "g" "")))(re.union (str.to_re (str.++ "k" (str.++ "h" "")))(re.union (str.to_re (str.++ "k" (str.++ "i" "")))(re.union (str.to_re (str.++ "k" (str.++ "m" "")))(re.union (str.to_re (str.++ "k" (str.++ "n" "")))(re.union (str.to_re (str.++ "k" (str.++ "p" "")))(re.union (str.to_re (str.++ "k" (str.++ "r" "")))(re.union (str.to_re (str.++ "k" (str.++ "w" "")))(re.union (str.to_re (str.++ "k" (str.++ "y" "")))(re.union (str.to_re (str.++ "k" (str.++ "z" "")))(re.union (str.to_re (str.++ "l" (str.++ "a" "")))(re.union (str.to_re (str.++ "l" (str.++ "b" "")))(re.union (str.to_re (str.++ "l" (str.++ "c" "")))(re.union (str.to_re (str.++ "l" (str.++ "i" "")))(re.union (str.to_re (str.++ "l" (str.++ "k" "")))(re.union (str.to_re (str.++ "l" (str.++ "r" "")))(re.union (str.to_re (str.++ "l" (str.++ "s" "")))(re.union (str.to_re (str.++ "l" (str.++ "t" "")))(re.union (str.to_re (str.++ "l" (str.++ "u" "")))(re.union (str.to_re (str.++ "l" (str.++ "v" "")))(re.union (str.to_re (str.++ "l" (str.++ "y" "")))(re.union (str.to_re (str.++ "m" (str.++ "a" "")))(re.union (str.to_re (str.++ "m" (str.++ "c" "")))(re.union (str.to_re (str.++ "m" (str.++ "d" "")))(re.union (str.to_re (str.++ "m" (str.++ "g" "")))(re.union (str.to_re (str.++ "m" (str.++ "h" "")))(re.union (str.to_re (str.++ "m" (str.++ "k" "")))(re.union (str.to_re (str.++ "m" (str.++ "l" "")))(re.union (str.to_re (str.++ "m" (str.++ "m" "")))(re.union (str.to_re (str.++ "m" (str.++ "n" "")))(re.union (str.to_re (str.++ "m" (str.++ "o" "")))(re.union (str.to_re (str.++ "m" (str.++ "p" "")))(re.union (str.to_re (str.++ "m" (str.++ "q" "")))(re.union (str.to_re (str.++ "m" (str.++ "r" "")))(re.union (str.to_re (str.++ "m" (str.++ "s" "")))(re.union (str.to_re (str.++ "m" (str.++ "t" "")))(re.union (str.to_re (str.++ "m" (str.++ "u" "")))(re.union (str.to_re (str.++ "m" (str.++ "v" "")))(re.union (str.to_re (str.++ "m" (str.++ "w" "")))(re.union (str.to_re (str.++ "m" (str.++ "x" "")))(re.union (str.to_re (str.++ "m" (str.++ "y" "")))(re.union (str.to_re (str.++ "m" (str.++ "z" "")))(re.union (str.to_re (str.++ "a" (str.++ "n" "")))(re.union (str.to_re (str.++ "n" (str.++ "c" "")))(re.union (str.to_re (str.++ "n" (str.++ "e" "")))(re.union (str.to_re (str.++ "n" (str.++ "f" "")))(re.union (str.to_re (str.++ "n" (str.++ "g" "")))(re.union (str.to_re (str.++ "n" (str.++ "i" "")))(re.union (str.to_re (str.++ "n" (str.++ "l" "")))(re.union (str.to_re (str.++ "n" (str.++ "o" "")))(re.union (str.to_re (str.++ "n" (str.++ "p" "")))(re.union (str.to_re (str.++ "n" (str.++ "r" "")))(re.union (str.to_re (str.++ "n" (str.++ "t" "")))(re.union (str.to_re (str.++ "n" (str.++ "u" "")))(re.union (str.to_re (str.++ "n" (str.++ "z" "")))(re.union (str.to_re (str.++ "o" (str.++ "m" "")))(re.union (str.to_re (str.++ "p" (str.++ "a" "")))(re.union (str.to_re (str.++ "p" (str.++ "e" "")))(re.union (str.to_re (str.++ "p" (str.++ "f" "")))(re.union (str.to_re (str.++ "p" (str.++ "g" "")))(re.union (str.to_re (str.++ "p" (str.++ "h" "")))(re.union (str.to_re (str.++ "p" (str.++ "k" "")))(re.union (str.to_re (str.++ "p" (str.++ "l" "")))(re.union (str.to_re (str.++ "p" (str.++ "m" "")))(re.union (str.to_re (str.++ "p" (str.++ "n" "")))(re.union (str.to_re (str.++ "p" (str.++ "r" "")))(re.union (str.to_re (str.++ "p" (str.++ "t" "")))(re.union (str.to_re (str.++ "p" (str.++ "w" "")))(re.union (str.to_re (str.++ "p" (str.++ "y" "")))(re.union (str.to_re (str.++ "q" (str.++ "a" "")))(re.union (str.to_re (str.++ "r" (str.++ "e" "")))(re.union (str.to_re (str.++ "r" (str.++ "o" "")))(re.union (str.to_re (str.++ "r" (str.++ "u" "")))(re.union (str.to_re (str.++ "r" (str.++ "w" "")))(re.union (str.to_re (str.++ "s" (str.++ "a" "")))(re.union (str.to_re (str.++ "s" (str.++ "b" "")))(re.union (str.to_re (str.++ "s" (str.++ "c" "")))(re.union (str.to_re (str.++ "s" (str.++ "d" "")))(re.union (str.to_re (str.++ "s" (str.++ "e" "")))(re.union (str.to_re (str.++ "s" (str.++ "q" "")))(re.union (str.to_re (str.++ "s" (str.++ "h" "")))(re.union (str.to_re (str.++ "s" (str.++ "i" "")))(re.union (str.to_re (str.++ "s" (str.++ "j" "")))(re.union (str.to_re (str.++ "s" (str.++ "k" "")))(re.union (str.to_re (str.++ "s" (str.++ "l" "")))(re.union (str.to_re (str.++ "s" (str.++ "m" "")))(re.union (str.to_re (str.++ "s" (str.++ "n" "")))(re.union (str.to_re (str.++ "s" (str.++ "o" "")))(re.union (str.to_re (str.++ "s" (str.++ "r" "")))(re.union (str.to_re (str.++ "s" (str.++ "t" "")))(re.union (str.to_re (str.++ "s" (str.++ "u" "")))(re.union (str.to_re (str.++ "s" (str.++ "v" "")))(re.union (str.to_re (str.++ "s" (str.++ "y" "")))(re.union (str.to_re (str.++ "s" (str.++ "z" "")))(re.union (str.to_re (str.++ "t" (str.++ "c" "")))(re.union (str.to_re (str.++ "t" (str.++ "d" "")))(re.union (str.to_re (str.++ "t" (str.++ "f" "")))(re.union (str.to_re (str.++ "t" (str.++ "g" "")))(re.union (str.to_re (str.++ "t" (str.++ "h" "")))(re.union (str.to_re (str.++ "t" (str.++ "j" "")))(re.union (str.to_re (str.++ "t" (str.++ "k" "")))(re.union (str.to_re (str.++ "t" (str.++ "m" "")))(re.union (str.to_re (str.++ "t" (str.++ "n" "")))(re.union (str.to_re (str.++ "t" (str.++ "o" "")))(re.union (str.to_re (str.++ "t" (str.++ "p" "")))(re.union (str.to_re (str.++ "t" (str.++ "r" "")))(re.union (str.to_re (str.++ "t" (str.++ "t" "")))(re.union (str.to_re (str.++ "t" (str.++ "v" "")))(re.union (str.to_re (str.++ "t" (str.++ "w" "")))(re.union (str.to_re (str.++ "t" (str.++ "z" "")))(re.union (str.to_re (str.++ "u" (str.++ "a" "")))(re.union (str.to_re (str.++ "u" (str.++ "g" "")))(re.union (str.to_re (str.++ "u" (str.++ "k" "")))(re.union (str.to_re (str.++ "u" (str.++ "m" "")))(re.union (str.to_re (str.++ "u" (str.++ "s" "")))(re.union (str.to_re (str.++ "u" (str.++ "y" "")))(re.union (str.to_re (str.++ "u" (str.++ "z" "")))(re.union (str.to_re (str.++ "v" (str.++ "a" "")))(re.union (str.to_re (str.++ "v" (str.++ "c" "")))(re.union (str.to_re (str.++ "v" (str.++ "e" "")))(re.union (str.to_re (str.++ "v" (str.++ "g" "")))(re.union (str.to_re (str.++ "v" (str.++ "i" "")))(re.union (str.to_re (str.++ "v" (str.++ "n" "")))(re.union (str.to_re (str.++ "v" (str.++ "u" "")))(re.union (str.to_re (str.++ "w" (str.++ "f" "")))(re.union (str.to_re (str.++ "w" (str.++ "s" "")))(re.union (str.to_re (str.++ "y" (str.++ "e" "")))(re.union (str.to_re (str.++ "y" (str.++ "t" "")))(re.union (str.to_re (str.++ "y" (str.++ "u" "")))(re.union (str.to_re (str.++ "z" (str.++ "a" "")))(re.union (str.to_re (str.++ "z" (str.++ "m" "")))(re.union (str.to_re (str.++ "z" (str.++ "r" "")))(re.union (str.to_re (str.++ "z" (str.++ "w" "")))(re.union (str.to_re (str.++ "a" (str.++ "r" (str.++ "p" (str.++ "a" "")))))(re.union (str.to_re (str.++ "a" (str.++ "r" (str.++ "t" (str.++ "s" "")))))(re.union (str.to_re (str.++ "b" (str.++ "i" (str.++ "z" ""))))(re.union (str.to_re (str.++ "c" (str.++ "o" (str.++ "m" ""))))(re.union (str.to_re (str.++ "e" (str.++ "d" (str.++ "u" ""))))(re.union (str.to_re (str.++ "f" (str.++ "i" (str.++ "r" (str.++ "m" "")))))(re.union (str.to_re (str.++ "g" (str.++ "o" (str.++ "v" ""))))(re.union (str.to_re (str.++ "i" (str.++ "n" (str.++ "f" (str.++ "o" "")))))(re.union (str.to_re (str.++ "i" (str.++ "n" (str.++ "t" ""))))(re.union (str.to_re (str.++ "m" (str.++ "i" (str.++ "l" ""))))(re.union (str.to_re (str.++ "n" (str.++ "a" (str.++ "t" (str.++ "o" "")))))(re.union (str.to_re (str.++ "n" (str.++ "e" (str.++ "t" ""))))(re.union (str.to_re (str.++ "n" (str.++ "o" (str.++ "m" ""))))(re.union (str.to_re (str.++ "o" (str.++ "r" (str.++ "g" ""))))(re.union (str.to_re (str.++ "r" (str.++ "e" (str.++ "c" ""))))(re.union (str.to_re (str.++ "s" (str.++ "t" (str.++ "o" (str.++ "r" (str.++ "e" "")))))) (str.to_re (str.++ "w" (str.++ "e" (str.++ "b" ""))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) (re.++ (re.union (re.++ (str.to_re (str.++ "2" (str.++ "5" ""))) (re.range "0" "5"))(re.union (re.++ (re.range "2" "2")(re.++ (re.range "0" "4") (re.range "0" "9")))(re.union (re.++ (re.range "0" "1") ((_ re.loop 2 2) (re.range "0" "9")))(re.union (re.++ (re.range "1" "9") (re.range "0" "9")) (re.range "1" "9")))))(re.++ (re.range "." ".")(re.++ (re.union (re.++ (str.to_re (str.++ "2" (str.++ "5" ""))) (re.range "0" "5"))(re.union (re.++ (re.range "2" "2")(re.++ (re.range "0" "4") (re.range "0" "9")))(re.union (re.++ (re.range "0" "1") ((_ re.loop 2 2) (re.range "0" "9")))(re.union (re.++ (re.range "1" "9") (re.range "0" "9")) (re.range "0" "9")))))(re.++ (re.range "." ".")(re.++ (re.union (re.++ (str.to_re (str.++ "2" (str.++ "5" ""))) (re.range "0" "5"))(re.union (re.++ (re.range "2" "2")(re.++ (re.range "0" "4") (re.range "0" "9")))(re.union (re.++ (re.range "0" "1") ((_ re.loop 2 2) (re.range "0" "9")))(re.union (re.++ (re.range "1" "9") (re.range "0" "9")) (re.range "0" "9")))))(re.++ (re.range "." ".") (re.union (re.++ (str.to_re (str.++ "2" (str.++ "5" ""))) (re.range "0" "5"))(re.union (re.++ (re.range "2" "2")(re.++ (re.range "0" "4") (re.range "0" "9")))(re.union (re.++ (re.range "0" "1") ((_ re.loop 2 2) (re.range "0" "9")))(re.union (re.++ (re.range "1" "9") (re.range "0" "9")) (re.range "0" "9")))))))))))) (str.to_re "")))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "8" (str.++ "9" (str.++ "-" (str.++ " " (str.++ "9" (str.++ "9" (str.++ "0" (str.++ "4" (str.++ "9" (str.++ "8" "")))))))))))

(define-fun Witness2 () String (str.++ "9" (str.++ "8" (str.++ "4" (str.++ "-" (str.++ "8" (str.++ "8" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "3" (str.++ "8" ""))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ ((_ re.loop 2 3) (re.range "0" "9"))(re.++ (re.opt (re.range "-" "-"))(re.++ (re.opt (re.range " " " "))(re.++ ((_ re.loop 6 7) (re.range "0" "9")) (str.to_re ""))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "(" (str.++ "0" (str.++ "8" (str.++ "6" (str.++ ")" (str.++ "9" (str.++ "9" (str.++ "8" (str.++ "9" (str.++ "3" (str.++ "9" (str.++ "7" "")))))))))))))

(define-fun Witness2 () String (str.++ "(" (str.++ "0" (str.++ "5" (str.++ "8" (str.++ ")" (str.++ "0" (str.++ "8" (str.++ "8" (str.++ "5" (str.++ "8" (str.++ "6" (str.++ "9" "")))))))))))))

(assert (= regexA (re.++ (re.++ (str.to_re "")(re.++ (str.to_re (str.++ "(" (str.++ "0" "")))(re.++ ((_ re.loop 2 2) (re.range "0" "9")) (re.range ")" ")")))) (re.++ ((_ re.loop 6 7) (re.range "0" "9")) (str.to_re "")))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "y" (str.++ "y" (str.++ "V" ""))))

(define-fun Witness2 () String (str.++ "\u{8b}" (str.++ "\u{b4}" "")))

(assert (= regexA (re.+ (re.union (re.range "\u{00}" "\u{22}")(re.union (re.range "$" "%")(re.union (re.range "'" ".")(re.union (re.range "0" ":")(re.union (re.range "=" "=")(re.union (re.range "@" "z")(re.union (re.range "|" "|") (re.range "~" "\u{ff}")))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "3" (str.++ "|" (str.++ "4" (str.++ "8" (str.++ "9" (str.++ "6" (str.++ "9" (str.++ "4" (str.++ "4" (str.++ "9" (str.++ "8" (str.++ "9" (str.++ "8" (str.++ "8" (str.++ "9" ""))))))))))))))))

(define-fun Witness2 () String (str.++ "3" (str.++ "3" (str.++ "6" (str.++ "3" (str.++ "9" (str.++ "8" (str.++ "9" (str.++ "8" (str.++ "8" (str.++ "9" (str.++ "8" (str.++ "8" (str.++ "9" (str.++ "1" (str.++ "1" ""))))))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ ((_ re.loop 2 2) (re.union (re.range "3" "4")(re.union (re.range "7" "7") (re.range "|" "|"))))(re.++ ((_ re.loop 13 13) (re.range "0" "9")) (str.to_re ""))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "\u{08}" (str.++ "\u{ac}" (str.++ "@" (str.++ "\u{01}" (str.++ "=" (str.++ "." (str.++ "X" (str.++ "P" "")))))))))

(define-fun Witness2 () String (str.++ "f" (str.++ "@" (str.++ "\u{b6}" (str.++ "-" (str.++ "b" (str.++ "O" (str.++ "\u{f2}" (str.++ "k" (str.++ "8" (str.++ "\u{1e}" (str.++ "K" (str.++ "." (str.++ "b" (str.++ "Z" "")))))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.+ (re.union (re.range "\u{00}" "\u{08}")(re.union (re.range "\u{0e}" "\u{1f}")(re.union (re.range "!" "\u{84}")(re.union (re.range "\u{86}" "\u{9f}") (re.range "\u{a1}" "\u{ff}"))))))(re.++ (re.range "@" "@")(re.++ (re.union (re.range "\u{00}" "-") (re.range "/" "\u{ff}"))(re.++ (re.+ (re.union (re.range "\u{00}" "\u{08}")(re.union (re.range "\u{0e}" "\u{1f}")(re.union (re.range "!" "\u{84}")(re.union (re.range "\u{86}" "\u{9f}") (re.range "\u{a1}" "\u{ff}"))))))(re.++ (re.range "." ".")(re.++ ((_ re.loop 2 10) (re.union (re.range "A" "Z") (re.range "a" "z"))) (str.to_re ""))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "s" (str.++ "m" (str.++ "t" (str.++ "p" (str.++ "." (str.++ "3" (str.++ "." (str.++ "1" (str.++ "\u{ba}" ""))))))))))

(define-fun Witness2 () String (str.++ "s" (str.++ "m" (str.++ "t" (str.++ "p" (str.++ "." (str.++ "\u{ff}" (str.++ "." (str.++ "\u{ba}" (str.++ "\u{fc}" (str.++ "9" "")))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (str.to_re (str.++ "s" (str.++ "m" (str.++ "t" (str.++ "p" "")))))(re.++ (re.range "." ".")(re.++ (re.+ (re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))))(re.++ (re.range "." ".")(re.++ ((_ re.loop 2 3) (re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))) (str.to_re "")))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "O" (str.++ "p" (str.++ "," (str.++ "\u{0b}" (str.++ "8" (str.++ "," (str.++ "\u{09}" (str.++ "N" (str.++ "o" (str.++ "8" (str.++ "\u{85}" (str.++ "8" "")))))))))))))

(define-fun Witness2 () String (str.++ "O" (str.++ "p" (str.++ "u" (str.++ "s" (str.++ "\u{85}" (str.++ "5" (str.++ "8" ""))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.++ (str.to_re (str.++ "O" (str.++ "p" ""))) (re.union (re.union (re.range "\u{00}" "\u{09}") (re.range "\u{0b}" "\u{ff}")) (str.to_re (str.++ "u" (str.++ "s" "")))))(re.++ (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))(re.++ (re.range "1" "9")(re.++ (re.* (re.range "0" "9"))(re.++ (re.opt (re.++ (re.opt (re.range "," ","))(re.++ (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))(re.++ (re.range "N" "N")(re.++ (re.union (re.++ (re.range "o" "o") (re.union (re.range "\u{00}" "\u{09}") (re.range "\u{0b}" "\u{ff}"))) (re.++ (str.to_re (str.++ "u" (str.++ "m" ""))) (re.union (re.union (re.range "\u{00}" "\u{09}") (re.range "\u{0b}" "\u{ff}")) (str.to_re (str.++ "b" (str.++ "e" (str.++ "r" "")))))))(re.++ (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))(re.++ (re.range "1" "9") (re.* (re.range "0" "9"))))))))) (str.to_re "")))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "0" (str.++ "9" (str.++ "9" (str.++ "7" (str.++ "4" (str.++ "1" (str.++ "1" (str.++ "2" (str.++ "4" ""))))))))))

(define-fun Witness2 () String (str.++ "0" (str.++ "4" (str.++ "-" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "8" (str.++ "9" (str.++ "6" "")))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.range "0" "0")(re.++ (re.union (re.range "2" "4")(re.union (re.range "6" "7") (re.range "9" "9")))(re.++ (re.opt (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (re.opt (re.range "-" "-"))(re.++ (re.opt (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (re.range "1" "9")(re.++ ((_ re.loop 6 6) (re.range "0" "9")) (str.to_re "")))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "M" (str.++ "h" (str.++ " " (str.++ "E" (str.++ "." ""))))))

(define-fun Witness2 () String (str.++ "v" ""))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.++ (re.+ (re.union (re.range "A" "Z") (re.range "a" "z")))(re.++ (re.opt (re.range "." ".")) (re.* (re.++ (re.range " " " ")(re.++ (re.+ (re.union (re.range "A" "Z") (re.range "a" "z"))) (re.opt (re.range "." "."))))))) (str.to_re "")))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "\u{22}" (str.++ "\u{f5}" (str.++ "\u{22}" (str.++ "@" (str.++ "8" (str.++ "9" (str.++ "." (str.++ "8" (str.++ "8" (str.++ "." (str.++ "2" (str.++ "0" (str.++ "7" (str.++ "." (str.++ "2" (str.++ "4" (str.++ "9" ""))))))))))))))))))

(define-fun Witness2 () String (str.++ "\u{22}" (str.++ "\u{dd}" (str.++ "\u{22}" (str.++ "@" (str.++ "1" (str.++ "8" (str.++ "9" (str.++ "." (str.++ "2" (str.++ "3" (str.++ "8" (str.++ "." (str.++ "1" (str.++ "4" (str.++ "." (str.++ "1" (str.++ "6" (str.++ "3" "")))))))))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.union (re.++ (re.range "\u{22}" "\u{22}")(re.++ (re.+ (re.union (re.range "\u{00}" "\u{07}")(re.union (re.range "\u{0e}" "!") (re.range "#" "\u{ff}")))) (re.range "\u{22}" "\u{22}"))) (re.++ (re.+ (re.union (re.range "!" "!")(re.union (re.range "#" "'")(re.union (re.range "*" "+")(re.union (re.range "-" "-")(re.union (re.range "/" "9")(re.union (re.range "A" "Z")(re.union (re.range "^" "~")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))))) (re.* (re.++ (re.range "." ".") (re.+ (re.union (re.range "!" "!")(re.union (re.range "#" "'")(re.union (re.range "*" "+")(re.union (re.range "-" "-")(re.union (re.range "/" "9")(re.union (re.range "A" "Z")(re.union (re.range "^" "~")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))))))))))(re.++ (re.range "@" "@")(re.++ (re.union (re.++ (re.range "[" "[")(re.++ (re.++ (re.union (re.++ (str.to_re (str.++ "2" (str.++ "5" ""))) (re.range "0" "5"))(re.union (re.++ (re.range "2" "2")(re.++ (re.range "0" "4") (re.range "0" "9"))) (re.++ (re.opt (re.range "0" "1"))(re.++ (re.opt (re.range "0" "9")) (re.range "0" "9")))))(re.++ (re.range "." ".")(re.++ (re.union (re.++ (str.to_re (str.++ "2" (str.++ "5" ""))) (re.range "0" "5"))(re.union (re.++ (re.range "2" "2")(re.++ (re.range "0" "4") (re.range "0" "9"))) (re.++ (re.opt (re.range "0" "1"))(re.++ (re.opt (re.range "0" "9")) (re.range "0" "9")))))(re.++ (re.range "." ".")(re.++ (re.union (re.++ (str.to_re (str.++ "2" (str.++ "5" ""))) (re.range "0" "5"))(re.union (re.++ (re.range "2" "2")(re.++ (re.range "0" "4") (re.range "0" "9"))) (re.++ (re.opt (re.range "0" "1"))(re.++ (re.opt (re.range "0" "9")) (re.range "0" "9")))))(re.++ (re.range "." ".") (re.union (re.++ (str.to_re (str.++ "2" (str.++ "5" ""))) (re.range "0" "5"))(re.union (re.++ (re.range "2" "2")(re.++ (re.range "0" "4") (re.range "0" "9"))) (re.++ (re.opt (re.range "0" "1"))(re.++ (re.opt (re.range "0" "9")) (re.range "0" "9"))))))))))) (re.range "]" "]")))(re.union (re.++ (re.union (re.++ (str.to_re (str.++ "2" (str.++ "5" ""))) (re.range "0" "5"))(re.union (re.++ (re.range "2" "2")(re.++ (re.range "0" "4") (re.range "0" "9"))) (re.++ (re.opt (re.range "0" "1"))(re.++ (re.opt (re.range "0" "9")) (re.range "0" "9")))))(re.++ (re.range "." ".")(re.++ (re.union (re.++ (str.to_re (str.++ "2" (str.++ "5" ""))) (re.range "0" "5"))(re.union (re.++ (re.range "2" "2")(re.++ (re.range "0" "4") (re.range "0" "9"))) (re.++ (re.opt (re.range "0" "1"))(re.++ (re.opt (re.range "0" "9")) (re.range "0" "9")))))(re.++ (re.range "." ".")(re.++ (re.union (re.++ (str.to_re (str.++ "2" (str.++ "5" ""))) (re.range "0" "5"))(re.union (re.++ (re.range "2" "2")(re.++ (re.range "0" "4") (re.range "0" "9"))) (re.++ (re.opt (re.range "0" "1"))(re.++ (re.opt (re.range "0" "9")) (re.range "0" "9")))))(re.++ (re.range "." ".") (re.union (re.++ (str.to_re (str.++ "2" (str.++ "5" ""))) (re.range "0" "5"))(re.union (re.++ (re.range "2" "2")(re.++ (re.range "0" "4") (re.range "0" "9"))) (re.++ (re.opt (re.range "0" "1"))(re.++ (re.opt (re.range "0" "9")) (re.range "0" "9"))))))))))) (re.++ (re.+ (re.++ (re.+ (re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z"))))) (re.range "." "."))) (re.+ (re.union (re.range "-" "-")(re.union (re.range "A" "Z") (re.range "a" "z"))))))) (str.to_re "")))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "2" (str.++ "9" (str.++ "5" (str.++ " " (str.++ "4" (str.++ "0" "")))))))

(define-fun Witness2 () String (str.++ "8" (str.++ "2" (str.++ "9" (str.++ "4" (str.++ "9" ""))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.union ((_ re.loop 5 5) (re.range "0" "9")) (re.++ ((_ re.loop 3 3) (re.range "0" "9"))(re.++ (re.opt (re.range " " " ")) ((_ re.loop 2 2) (re.range "0" "9"))))) (str.to_re "")))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "3" (str.++ "7" "")))

(define-fun Witness2 () String (str.++ "9" ""))

(assert (= regexA (re.++ (str.to_re "")(re.++ ((_ re.loop 1 7) (re.range "0" "9")) (str.to_re "")))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "9" ""))

(define-fun Witness2 () String (str.++ "8" (str.++ "," (str.++ "9" ""))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.+ (re.range "0" "9"))(re.++ (re.* (re.++ (re.range "," ",") (re.+ (re.range "0" "9")))) (str.to_re ""))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "1" (str.++ "7" (str.++ "." (str.++ "9" (str.++ "8" (str.++ "." (str.++ "8" (str.++ "2" (str.++ "." (str.++ "2" (str.++ "1" (str.++ "1" "")))))))))))))

(define-fun Witness2 () String (str.++ "1" (str.++ "0" (str.++ "2" (str.++ "." (str.++ "1" (str.++ "8" (str.++ "." (str.++ "2" (str.++ "2" (str.++ "2" (str.++ "." (str.++ "1" "")))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.++ (re.range "1" "1")(re.++ (re.union (re.range "0" "0")(re.union (re.range "7" "7") (re.range "9" "9"))) (re.opt (re.range "2" "2"))))(re.++ (re.range "." ".")(re.++ (re.union (re.++ (re.opt (re.range "0" "1"))(re.++ (re.opt (re.range "0" "9")) (re.range "0" "9")))(re.union (re.++ (re.range "2" "2")(re.++ (re.range "0" "4") (re.range "0" "9"))) (re.++ (str.to_re (str.++ "2" (str.++ "5" ""))) (re.range "0" "5"))))(re.++ (re.range "." ".")(re.++ (re.union (re.++ (re.opt (re.range "0" "1"))(re.++ (re.opt (re.range "0" "9")) (re.range "0" "9")))(re.union (re.++ (re.range "2" "2")(re.++ (re.range "0" "4") (re.range "0" "9"))) (re.++ (str.to_re (str.++ "2" (str.++ "5" ""))) (re.range "0" "5"))))(re.++ (re.range "." ".")(re.++ (re.union (re.++ (re.opt (re.range "0" "1"))(re.++ (re.opt (re.range "0" "9")) (re.range "0" "9")))(re.union (re.++ (re.range "2" "2")(re.++ (re.range "0" "4") (re.range "0" "9"))) (re.++ (str.to_re (str.++ "2" (str.++ "5" ""))) (re.range "0" "5")))) (str.to_re "")))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "8" (str.++ "1" (str.++ "9" (str.++ "9" (str.++ "8" (str.++ "3" (str.++ "0" (str.++ "2" ""))))))))))))

(define-fun Witness2 () String (str.++ "8" (str.++ "8" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "0" (str.++ "\u{85}" (str.++ "8" (str.++ "5" (str.++ "6" (str.++ "8" ""))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.opt (re.++ (re.range "0" "1") (re.opt (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "-" "/")(re.union (re.range "\u{5c}" "\u{5c}")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))))))(re.++ (re.union (re.++ (re.opt (re.range "(" "("))(re.++ (re.range "2" "9")(re.++ ((_ re.loop 2 2) (re.range "0" "9")) (re.opt (re.range ")" ")"))))) (re.++ (re.range "2" "9") ((_ re.loop 3 3) (re.range "0" "9"))))(re.++ (re.opt (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "-" "/")(re.union (re.range "\u{5c}" "\u{5c}")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))))(re.++ (re.union (re.++ ((_ re.loop 3 3) (re.range "0" "9"))(re.++ (re.opt (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "-" "/")(re.union (re.range "\u{5c}" "\u{5c}")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))))) ((_ re.loop 4 4) (re.range "0" "9")))) ((_ re.loop 7 7) (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z"))))) (str.to_re ""))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "0" (str.++ "0" (str.++ "3" (str.++ "1" (str.++ "-" (str.++ "6" (str.++ "9" (str.++ "8" (str.++ "8" (str.++ "9" (str.++ "3" (str.++ "3" (str.++ "9" (str.++ "5" "")))))))))))))))

(define-fun Witness2 () String (str.++ "0" (str.++ "8" (str.++ "7" (str.++ "9" (str.++ "8" (str.++ "9" (str.++ "4" (str.++ "9" (str.++ "2" (str.++ "5" "")))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.union (re.++ (re.union (str.to_re (str.++ "0" (str.++ "0" (str.++ "3" (str.++ "1" ""))))) (str.to_re (str.++ "+" (str.++ "3" (str.++ "1" "")))))(re.++ (re.opt (re.range "-" "-"))(re.++ (re.range "6" "6")(re.++ (re.opt (re.range "-" "-")) ((_ re.loop 8 8) (re.range "0" "9"))))))(re.union (re.++ (str.to_re (str.++ "0" (str.++ "6" "")))(re.++ (re.opt (re.range "-" "-")) ((_ re.loop 8 8) (re.range "0" "9"))))(re.union (re.++ (re.union (str.to_re (str.++ "0" (str.++ "0" (str.++ "3" (str.++ "1" ""))))) (str.to_re (str.++ "+" (str.++ "3" (str.++ "1" "")))))(re.++ (re.opt (re.range "-" "-"))(re.++ (re.range "1" "9") (re.union (re.++ (re.range "0" "9")(re.++ (re.opt (re.range "-" "-")) ((_ re.loop 7 7) (re.range "0" "9")))) (re.++ ((_ re.loop 2 2) (re.range "0" "9"))(re.++ (re.opt (re.range "-" "-")) ((_ re.loop 6 6) (re.range "0" "9")))))))) (re.++ (re.range "0" "0")(re.++ (re.range "1" "9") (re.union (re.++ (re.range "0" "9")(re.++ (re.opt (re.range "-" "-")) ((_ re.loop 7 7) (re.range "0" "9")))) (re.++ ((_ re.loop 2 2) (re.range "0" "9"))(re.++ (re.opt (re.range "-" "-")) ((_ re.loop 6 6) (re.range "0" "9")))))))))) (str.to_re "")))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "1" ""))

(define-fun Witness2 () String (str.++ "9" (str.++ "8" (str.++ "9" ""))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.range "1" "9")(re.++ ((_ re.loop 0 2) (re.range "0" "9"))(re.++ (re.* (re.++ (re.opt (re.union (re.range "," ",") (re.range "." "."))) ((_ re.loop 3 3) (re.range "0" "9")))) (str.to_re "")))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "-" ""))

(define-fun Witness2 () String (str.++ "8" ""))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.opt (re.range "-" "-"))(re.++ (re.* (re.range "0" "9"))(re.++ (re.opt (re.++ (re.range "." ".") (re.+ (re.range "0" "9")))) (str.to_re "")))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "Q" (str.++ ":" (str.++ "\u{5c}" (str.++ "\u{b0}" (str.++ "F" (str.++ "3" (str.++ "." (str.++ "Y" (str.++ "P" (str.++ "w" (str.++ "A" ""))))))))))))

(define-fun Witness2 () String (str.++ "Z" (str.++ ":" (str.++ "\u{5c}" (str.++ "\u{98}" (str.++ "\u{99}" (str.++ "\u{ee}" (str.++ "." (str.++ "V" (str.++ "H" (str.++ "C" (str.++ "M" ""))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.opt (re.++ (re.union (re.range "A" "Z") (re.range "a" "z")) (str.to_re (str.++ ":" (str.++ "\u{5c}" "")))))(re.++ (re.+ (re.union (re.range " " "!")(re.union (re.range "#" ")")(re.union (re.range "+" ".")(re.union (re.range "0" "9")(re.union (re.range ";" ";")(re.union (re.range "=" "=")(re.union (re.range "@" "{") (re.range "}" "\u{ff}")))))))))(re.++ (re.range "." ".")(re.++ ((_ re.loop 3 4) (re.union (re.range "A" "Z") (re.range "a" "z"))) (str.to_re ""))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "2" (str.++ "2" (str.++ "8" (str.++ "7" (str.++ "9" (str.++ "8" (str.++ " " (str.++ "5" (str.++ "1" (str.++ "2" (str.++ "9" (str.++ "8" (str.++ "9" (str.++ "6" (str.++ "9" (str.++ "9" (str.++ "9" (str.++ "8" (str.++ "5" ""))))))))))))))))))))

(define-fun Witness2 () String (str.++ "8" (str.++ "8" (str.++ "2" (str.++ "8" (str.++ "9" (str.++ "9" (str.++ "\u{a0}" (str.++ "8" (str.++ "9" (str.++ "9" (str.++ "8" (str.++ "0" (str.++ "9" (str.++ "5" (str.++ "9" (str.++ "8" (str.++ "6" (str.++ "2" (str.++ "0" ""))))))))))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.union (re.++ ((_ re.loop 6 6) (re.range "0" "9"))(re.++ (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "-" "-")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))) ((_ re.loop 12 12) (re.range "0" "9")))) ((_ re.loop 18 18) (re.range "0" "9"))) (str.to_re "")))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "9" ""))

(define-fun Witness2 () String (str.++ "0" (str.++ "0" (str.++ "0" (str.++ "0" (str.++ "5" (str.++ "9" (str.++ "8" (str.++ "0" "")))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.union (re.++ (re.+ (re.range "0" "0")) (re.range "1" "9")) (re.range "1" "9"))(re.++ (re.* (re.range "0" "9")) (str.to_re ""))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "9" (str.++ "9" (str.++ "1" (str.++ "2" (str.++ "-" (str.++ "6" (str.++ "5" (str.++ "8" (str.++ "7" (str.++ "-" (str.++ "0" (str.++ "8" (str.++ "8" (str.++ "5" (str.++ "-" (str.++ "0" (str.++ "7" (str.++ "3" (str.++ "9" ""))))))))))))))))))))

(define-fun Witness2 () String (str.++ "4" (str.++ "9" (str.++ "7" (str.++ "8" (str.++ " " (str.++ "9" (str.++ "2" (str.++ "6" (str.++ "9" (str.++ " " (str.++ "6" (str.++ "5" (str.++ "9" (str.++ "8" (str.++ " " (str.++ "9" (str.++ "0" (str.++ "3" (str.++ "8" ""))))))))))))))))))))

(assert (= regexA (re.union (re.++ (str.to_re "")(re.++ ((_ re.loop 3 3) (re.++ ((_ re.loop 4 4) (re.range "0" "9")) (re.range "-" "-")))(re.++ ((_ re.loop 4 4) (re.range "0" "9")) (str.to_re ""))))(re.union (re.++ (str.to_re "")(re.++ ((_ re.loop 3 3) (re.++ ((_ re.loop 4 4) (re.range "0" "9")) (re.range " " " ")))(re.++ ((_ re.loop 4 4) (re.range "0" "9")) (str.to_re "")))) (re.++ (str.to_re "")(re.++ ((_ re.loop 16 16) (re.range "0" "9")) (str.to_re "")))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "\u{fd}" (str.++ "\u{aa}" (str.++ "\u{aa}" (str.++ " " (str.++ "\u{b5}" (str.++ "\u{dd}" (str.++ "2" (str.++ " " (str.++ "3" (str.++ " " (str.++ "2" (str.++ "1" (str.++ "1" (str.++ "8" (str.++ "9" (str.++ "9" (str.++ ":" (str.++ "6" (str.++ "4" (str.++ ":" (str.++ "0" (str.++ " " (str.++ "G" (str.++ "M" (str.++ "T" (str.++ "9" (str.++ "5" (str.++ "8" (str.++ "8" (str.++ " " (str.++ "\u{0a}" (str.++ ")" "")))))))))))))))))))))))))))))))))

(define-fun Witness2 () String (str.++ "1" (str.++ "7" (str.++ "c" (str.++ " " (str.++ "0" (str.++ "\u{aa}" (str.++ "A" (str.++ " " (str.++ "3" (str.++ "0" (str.++ " " (str.++ "9" (str.++ "9" (str.++ "6" (str.++ "6" (str.++ " " (str.++ "8" (str.++ ":" (str.++ "8" (str.++ "9" (str.++ ":" (str.++ "8" (str.++ "9" (str.++ " " (str.++ "G" (str.++ "M" (str.++ "T" (str.++ "8" (str.++ "2" (str.++ "0" (str.++ "9" (str.++ " " (str.++ "(" (str.++ "\u{a0}" "")))))))))))))))))))))))))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ ((_ re.loop 3 3) (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))(re.++ (re.range " " " ")(re.++ ((_ re.loop 3 3) (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))(re.++ (re.range " " " ")(re.++ ((_ re.loop 1 2) (re.range "0" "9"))(re.++ (re.range " " " ")(re.++ (re.opt ((_ re.loop 4 4) (re.range "0" "9")))(re.++ (re.opt (re.range " " " "))(re.++ ((_ re.loop 1 2) (re.range "0" "9"))(re.++ (re.range ":" ":")(re.++ ((_ re.loop 1 2) (re.range "0" "9"))(re.++ (re.range ":" ":")(re.++ ((_ re.loop 1 2) (re.range "0" "9"))(re.++ (re.range " " " ")(re.++ (re.union (str.to_re (str.++ "G" (str.++ "M" (str.++ "T" "")))) (str.to_re (str.++ "U" (str.++ "T" (str.++ "C" "")))))(re.++ (re.++ (re.opt (re.union (re.range "+" "+") (re.range "-" "-"))) ((_ re.loop 4 4) (re.range "0" "9")))(re.++ (re.range " " " ")(re.++ (re.opt ((_ re.loop 4 4) (re.range "0" "9")))(re.++ (re.opt (re.range "(" "("))(re.++ (re.opt (re.+ (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "A" "Z")(re.union (re.range "a" "z")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))))))(re.++ (re.opt (re.range ")" ")")) (str.to_re "")))))))))))))))))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "4" (str.++ "0" (str.++ "5" (str.++ "3" (str.++ "7" (str.++ "5" "")))))))

(define-fun Witness2 () String (str.++ "3" (str.++ "9" (str.++ "9" (str.++ "\u{0a}" (str.++ "4" (str.++ "9" (str.++ "9" ""))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ ((_ re.loop 3 3) (re.range "0" "9"))(re.++ (re.opt (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ ((_ re.loop 3 3) (re.range "0" "9")) (str.to_re "")))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "2" ""))

(define-fun Witness2 () String (str.++ "4" (str.++ "y" (str.++ "b" ""))))

(assert (= regexA (re.++ (str.to_re "")(re.++ ((_ re.loop 1 5) (re.union (re.range "!" "!") (re.range "#" "~"))) (str.to_re "")))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "6" ""))

(define-fun Witness2 () String (str.++ "9" ""))

(assert (= regexA (re.union (re.++ (str.to_re "")(re.++ (re.opt (re.union (re.range "+" "+")(re.union (re.range "-" "-") (re.range "|" "|"))))(re.++ ((_ re.loop 1 3) (re.range "0" "9"))(re.++ (re.* (re.++ (re.range "," ",") ((_ re.loop 3 3) (re.range "0" "9")))) (str.to_re ""))))) (re.++ (str.to_re "")(re.++ (re.opt (re.union (re.range "+" "+")(re.union (re.range "-" "-") (re.range "|" "|"))))(re.++ (re.+ (re.range "0" "9")) (str.to_re "")))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "I" (str.++ "L" (str.++ "9" (str.++ "9" (str.++ "9" (str.++ "Y" (str.++ "Q" ""))))))))

(define-fun Witness2 () String (str.++ "G" (str.++ "L" (str.++ "9" (str.++ "8" (str.++ "8" (str.++ "S" (str.++ "M" ""))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.union (re.++ (re.range "B" "B") (re.union (re.range "A" "C")(re.union (re.range "J" "J")(re.union (re.range "L" "L")(re.union (re.range "N" "N")(re.union (re.range "R" "S") (re.range "Y" "Y")))))))(re.union (str.to_re (str.++ "C" (str.++ "A" "")))(re.union (re.++ (re.range "D" "D") (re.union (re.range "K" "K") (re.range "S" "T")))(re.union (re.++ (re.range "G" "G") (re.union (re.range "A" "A") (re.range "L" "L")))(re.union (re.++ (re.range "H" "H") (re.union (re.range "C" "C") (re.range "E" "E")))(re.union (str.to_re (str.++ "I" (str.++ "L" "")))(re.union (re.++ (re.range "K" "K") (re.union (re.range "A" "A")(re.union (re.range "E" "E")(re.union (re.range "I" "I")(re.union (re.range "K" "K")(re.union (re.range "M" "N") (re.range "S" "S")))))))(re.union (re.++ (re.range "L" "L") (re.union (re.range "C" "C")(re.union (re.range "E" "E")(re.union (re.range "M" "M") (re.range "V" "V")))))(re.union (re.++ (re.range "M" "M") (re.union (re.range "A" "A")(re.union (re.range "I" "I")(re.union (re.range "L" "L")(re.union (re.range "T" "T") (re.range "Y" "Y"))))))(re.union (re.++ (re.range "N" "N") (re.union (re.range "I" "I")(re.union (re.range "M" "M")(re.union (re.range "O" "O")(re.union (re.range "R" "R") (re.range "Z" "Z"))))))(re.union (re.++ (re.range "P" "P") (re.union (re.range "B" "B")(re.union (re.range "D" "E")(re.union (re.range "K" "K")(re.union (re.range "N" "P") (re.range "T" "V"))))))(re.union (re.++ (re.range "R" "R") (re.union (re.range "A" "A")(re.union (re.range "K" "K")(re.union (re.range "S" "S") (re.range "V" "V")))))(re.union (re.++ (re.range "S" "S") (re.union (re.range "A" "C")(re.union (re.range "E" "E")(re.union (re.range "I" "I")(re.union (re.range "K" "L")(re.union (re.range "N" "P") (re.range "V" "V")))))))(re.union (re.++ (re.range "T" "T") (re.union (re.range "A" "A")(re.union (re.range "C" "C")(re.union (re.range "N" "O")(re.union (re.range "R" "T") (re.range "V" "V"))))))(re.union (re.++ (re.range "V" "V") (re.union (re.range "K" "K") (re.range "T" "T"))) (re.++ (re.range "Z" "Z") (re.union (re.range "A" "A")(re.union (re.range "C" "C")(re.union (re.range "H" "I")(re.union (re.range "M" "M") (re.range "V" "V")))))))))))))))))))))(re.++ (re.opt (re.range " " " "))(re.++ ((_ re.loop 3 3) (re.range "0" "9"))(re.++ ((_ re.loop 2 2) (re.range "A" "Z")) (str.to_re ""))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "\u{5c}" (str.++ "\u{5c}" (str.++ "%" (str.++ "\u{f8}" "")))))

(define-fun Witness2 () String (str.++ "\u{5c}" (str.++ "\u{5c}" "")))

(assert (= regexA (re.union (re.++ (str.to_re "")(re.++ (re.union (re.range "A" "Z") (re.range "a" "z"))(re.++ (str.to_re (str.++ ":" (str.++ "\u{5c}" ""))) (re.* (re.union (re.range "\u{00}" "\u{09}") (re.range "\u{0b}" "\u{ff}")))))) (re.++ (str.to_re "")(re.++ (str.to_re (str.++ "\u{5c}" (str.++ "\u{5c}" ""))) (re.* (re.union (re.range "\u{00}" "\u{09}") (re.range "\u{0b}" "\u{ff}"))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "3" (str.++ "Z" (str.++ "m" (str.++ "4" (str.++ "_" (str.++ "8" (str.++ "_" (str.++ "v" (str.++ "N" (str.++ "@" (str.++ "Z" (str.++ "." (str.++ "g" (str.++ "x" (str.++ "Y" ""))))))))))))))))

(define-fun Witness2 () String (str.++ "0" (str.++ "@" (str.++ "A" (str.++ "8" (str.++ "." (str.++ "-" (str.++ "O" (str.++ "W" (str.++ "." (str.++ "Y" (str.++ "l" (str.++ "Z" "")))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.* (re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))) (re.union (re.range "&" "&")(re.union (re.range "+" "+")(re.union (re.range "-" ".")(re.union (re.range ";" ";")(re.union (re.range "_" "_")(re.union (re.range "a" "a")(re.union (re.range "m" "m") (re.range "p" "p"))))))))))(re.++ (re.+ (re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_") (re.range "a" "z"))))))(re.++ (re.range "@" "@")(re.++ (re.+ (re.++ (re.+ (re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z"))))) (re.range "." ".")))(re.++ ((_ re.loop 2 6) (re.union (re.range "A" "Z") (re.range "a" "z"))) (str.to_re "")))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "." (str.++ "7" (str.++ "4" ""))))

(define-fun Witness2 () String (str.++ "8" (str.++ "1" (str.++ "9" (str.++ "." (str.++ "1" ""))))))

(assert (= regexA (re.union (re.++ (str.to_re "")(re.++ (re.++ (re.* (re.range "0" "9"))(re.++ (re.range "." ".")(re.++ (re.* (re.range "0" "9"))(re.++ (re.+ (re.range "1" "9")) (re.* (re.range "0" "9")))))) (str.to_re "")))(re.union (re.++ (str.to_re "")(re.++ (re.++ (re.* (re.range "0" "9"))(re.++ (re.+ (re.range "1" "9"))(re.++ (re.* (re.range "0" "9"))(re.++ (re.range "." ".") (re.+ (re.range "0" "9")))))) (str.to_re ""))) (re.++ (str.to_re "")(re.++ (re.++ (re.+ (re.range "1" "9")) (re.* (re.range "0" "9"))) (str.to_re "")))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "9" (str.++ "2" (str.++ "7" (str.++ "9" (str.++ "2" (str.++ "-" (str.++ "8" (str.++ "9" (str.++ "8" (str.++ "8" "")))))))))))

(define-fun Witness2 () String (str.++ "2" (str.++ "8" (str.++ "8" (str.++ "2" (str.++ "8" ""))))))

(assert (= regexA (re.union (re.++ (str.to_re "")(re.++ ((_ re.loop 5 5) (re.range "0" "9")) (str.to_re ""))) (re.++ (str.to_re "")(re.++ ((_ re.loop 5 5) (re.range "0" "9"))(re.++ (re.range "-" "-")(re.++ ((_ re.loop 4 4) (re.range "0" "9")) (str.to_re ""))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "5" (str.++ "f" (str.++ "c" (str.++ "9" (str.++ "." (str.++ "0" (str.++ "c" (str.++ "9" (str.++ "f" (str.++ "." (str.++ "3" (str.++ "9" (str.++ "8" (str.++ "e" "")))))))))))))))

(define-fun Witness2 () String (str.++ "1" (str.++ "5" (str.++ "3" (str.++ "9" (str.++ "." (str.++ "9" (str.++ "c" (str.++ "8" (str.++ "f" (str.++ "." (str.++ "a" (str.++ "9" (str.++ "c" (str.++ "8" "")))))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.++ ((_ re.loop 4 4) (re.union (re.range "0" "9") (re.range "a" "f")))(re.++ (re.range "." ".")(re.++ ((_ re.loop 4 4) (re.union (re.range "0" "9") (re.range "a" "f")))(re.++ (re.range "." ".") ((_ re.loop 4 4) (re.union (re.range "0" "9") (re.range "a" "f"))))))) (str.to_re "")))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "1" (str.++ "6" (str.++ "5" ""))))

(define-fun Witness2 () String (str.++ "6" (str.++ "6" (str.++ "2" ""))))

(assert (= regexA (re.++ (str.to_re "")(re.++ ((_ re.loop 3 3) (re.range "0" "7")) (str.to_re "")))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "1" (str.++ "1" (str.++ "9" (str.++ "9" (str.++ "9" (str.++ "5" (str.++ "4" ""))))))))

(define-fun Witness2 () String (str.++ "1" (str.++ "1" (str.++ "1" (str.++ "8" (str.++ "7" (str.++ "4" (str.++ "9" (str.++ "8" "")))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.++ (re.union (re.++ (re.union (re.++ (re.range "0" "0") (re.union (re.range "1" "1")(re.union (re.range "3" "3")(re.union (re.range "5" "5") (re.range "7" "8")))))(re.union (re.union (re.range "1" "1")(re.union (re.range "3" "3")(re.union (re.range "5" "5") (re.range "7" "8")))) (re.++ (re.range "1" "1") (re.union (re.range "0" "0") (re.range "2" "2")))))(re.++ (re.opt (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "-" "-")(re.union (re.range "/" "/")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))))) (re.union (re.++ (re.range "0" "0") (re.range "1" "9"))(re.union (re.range "1" "9")(re.union (re.++ (re.range "1" "2") (re.range "0" "9")) (re.++ (re.range "3" "3") (re.range "0" "1")))))))(re.union (re.++ (re.union (re.union (re.range "4" "4")(re.union (re.range "6" "6") (re.range "9" "9"))) (str.to_re (str.++ "1" (str.++ "1" ""))))(re.++ (re.opt (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "-" "-")(re.union (re.range "/" "/")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))))) (re.union (re.++ (re.range "0" "0") (re.range "1" "9"))(re.union (re.range "1" "9")(re.union (re.++ (re.range "1" "2") (re.range "0" "9")) (str.to_re (str.++ "3" (str.++ "0" "")))))))) (re.++ (re.union (str.to_re (str.++ "0" (str.++ "2" ""))) (re.range "2" "2"))(re.++ (re.opt (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "-" "-")(re.union (re.range "/" "/")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))))) (re.union (re.++ (re.range "0" "0") (re.range "1" "9"))(re.union (re.range "1" "9") (re.++ (re.range "1" "2") (re.range "0" "9"))))))))(re.++ (re.opt (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "-" "-")(re.union (re.range "/" "/")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))))) ((_ re.loop 4 4) (re.range "0" "9"))))(re.++ (re.opt (re.++ (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))) (re.++ (re.union (re.++ (re.range "0" "0") (re.range "1" "9"))(re.union (re.range "1" "9") (re.++ (re.range "1" "1") (re.range "0" "2"))))(re.++ (re.range ":" ":")(re.++ (re.++ (re.range "0" "5") (re.range "0" "9"))(re.++ (re.union (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))) (re.++ (re.range ":" ":")(re.++ (re.++ (re.range "0" "5") (re.range "0" "9")) (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))))) ((_ re.loop 2 2) (re.union (re.range "A" "A")(re.union (re.range "M" "M")(re.union (re.range "P" "P")(re.union (re.range "a" "a")(re.union (re.range "m" "m")(re.union (re.range "p" "p") (re.range "|" "|")))))))))))))) (str.to_re ""))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "8" (str.++ "8" (str.++ "6" (str.++ "4" (str.++ "0" ""))))))

(define-fun Witness2 () String (str.++ "8" (str.++ "8" (str.++ "8" (str.++ "8" (str.++ "8" ""))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ ((_ re.loop 5 5) (re.range "0" "9")) (str.to_re "")))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "$" (str.++ "5" (str.++ "." (str.++ "9" (str.++ "0" ""))))))

(define-fun Witness2 () String (str.++ "$" (str.++ "9" (str.++ "." (str.++ "6" (str.++ "4" ""))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.range "$" "$")(re.++ (re.+ (re.range "0" "9"))(re.++ (re.opt (re.++ (re.range "." ".")(re.++ (re.range "0" "9") (re.range "0" "9")))) (str.to_re "")))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "9" (str.++ "9" (str.++ "2" (str.++ "4" (str.++ "5" ""))))))

(define-fun Witness2 () String (str.++ "8" (str.++ "8" (str.++ "7" (str.++ "8" (str.++ "2" (str.++ "\u{0c}" (str.++ "8" (str.++ "5" (str.++ "7" (str.++ "9" "")))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ ((_ re.loop 5 5) (re.range "0" "9"))(re.++ (re.opt (re.++ (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "-" "-")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))) ((_ re.loop 4 4) (re.range "0" "9")))) (str.to_re ""))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "\u{b5}" (str.++ "I" (str.++ "T" ""))))

(define-fun Witness2 () String "")

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.* (re.union (re.range " " "!")(re.union (re.range "#" ";")(re.union (re.range "=" "=")(re.union (re.range "?" "~")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))) (str.to_re "")))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "9" (str.++ "2" (str.++ "0" (str.++ "2" (str.++ "2" (str.++ "9" "")))))))

(define-fun Witness2 () String (str.++ "2" (str.++ "5" (str.++ "0" (str.++ "9" (str.++ "2" (str.++ "9" "")))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.union (re.++ ((_ re.loop 2 2) (re.range "0" "9")) (re.union (re.++ (re.union (re.++ (re.range "0" "0") (re.range "1" "9")) (re.++ (re.range "1" "1") (re.range "0" "2"))) (re.union (re.++ (re.range "0" "0") (re.range "1" "9"))(re.union (re.++ (re.range "1" "1") (re.range "0" "9")) (re.++ (re.range "2" "2") (re.range "0" "8")))))(re.union (re.++ (re.union (re.++ (re.range "0" "0") (re.union (re.range "1" "1") (re.range "3" "9"))) (re.++ (re.range "1" "1") (re.range "0" "2"))) (re.union (str.to_re (str.++ "2" (str.++ "9" ""))) (str.to_re (str.++ "3" (str.++ "0" ""))))) (re.++ (re.union (re.++ (re.range "0" "0") (re.union (re.range "1" "1")(re.union (re.range "3" "3")(re.union (re.range "5" "5") (re.range "7" "8"))))) (re.++ (re.range "1" "1") (re.union (re.range "0" "0") (re.range "2" "2")))) (str.to_re (str.++ "3" (str.++ "1" ""))))))) (re.++ (re.union (re.++ (re.union (re.range "0" "0")(re.union (re.range "2" "2")(re.union (re.range "4" "4")(re.union (re.range "6" "6") (re.range "8" "8"))))) (re.union (re.range "0" "0")(re.union (re.range "4" "4") (re.range "8" "8")))) (re.++ (re.union (re.range "1" "1")(re.union (re.range "3" "3")(re.union (re.range "5" "5")(re.union (re.range "7" "7") (re.range "9" "9"))))) (re.union (re.range "2" "2") (re.range "6" "6")))) (str.to_re (str.++ "0" (str.++ "2" (str.++ "2" (str.++ "9" ""))))))) (str.to_re "")))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "G" (str.++ "I" (str.++ "R" (str.++ " " (str.++ "\u{85}" (str.++ "0" (str.++ "A" (str.++ "A" "")))))))))

(define-fun Witness2 () String (str.++ "L" (str.++ "L" (str.++ "9" (str.++ " " "")))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.union (re.++ (re.++ (re.union (re.range "A" "P")(re.union (re.range "R" "U")(re.union (re.range "W" "W") (re.range "Y" "Z")))) (re.union (re.++ (re.range "0" "9") (re.opt (re.union (re.range "0" "9")(re.union (re.range "A" "H")(re.union (re.range "J" "K")(re.union (re.range "S" "U") (re.range "W" "W"))))))) (re.++ (re.union (re.range "A" "H") (re.range "K" "Y"))(re.++ (re.range "0" "9") (re.opt (re.union (re.range "0" "9")(re.union (re.range "A" "B")(re.union (re.range "E" "E")(re.union (re.range "H" "H")(re.union (re.range "M" "N")(re.union (re.range "P" "P")(re.union (re.range "R" "R") (re.range "V" "Y")))))))))))))(re.++ (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))) (re.opt (re.++ (re.range "0" "9") ((_ re.loop 2 2) (re.union (re.range "A" "B")(re.union (re.range "D" "H")(re.union (re.range "J" "J")(re.union (re.range "L" "L")(re.union (re.range "N" "N")(re.union (re.range "P" "U") (re.range "W" "Z")))))))))))) (re.++ (str.to_re (str.++ "G" (str.++ "I" (str.++ "R" ""))))(re.++ (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))) (str.to_re (str.++ "0" (str.++ "A" (str.++ "A" ""))))))) (str.to_re "")))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "6" (str.++ "8" (str.++ "\u{0d}" (str.++ ":" (str.++ "4" (str.++ "9" "")))))))

(define-fun Witness2 () String (str.++ "9" (str.++ ":" (str.++ "5" (str.++ "4" "")))))

(assert (= regexA (re.++ (str.to_re "")(re.++ ((_ re.loop 1 2) (re.range "0" "9"))(re.++ (re.++ (re.opt (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))) (re.opt (re.union (re.range "H" "H") (re.range "h" "h"))))(re.++ (re.opt (re.++ (re.range ":" ":") (re.++ (re.range "0" "5") (re.range "0" "9")))) (str.to_re "")))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "1" (str.++ "9" (str.++ "7" (str.++ "2" (str.++ "-" (str.++ "0" (str.++ "2" (str.++ "-" (str.++ "2" (str.++ "9" "")))))))))))

(define-fun Witness2 () String (str.++ "2" (str.++ "0" (str.++ "8" (str.++ "0" (str.++ "-" (str.++ "0" (str.++ "2" (str.++ "-" (str.++ "2" (str.++ "9" "")))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.union (re.++ (re.union (str.to_re (str.++ "1" (str.++ "9" ""))) (str.to_re (str.++ "2" (str.++ "0" ""))))(re.++ (re.union (re.++ (re.union (re.range "0" "0")(re.union (re.range "2" "2")(re.union (re.range "4" "4")(re.union (re.range "6" "6") (re.range "8" "8"))))) (re.union (re.range "0" "0")(re.union (re.range "4" "4") (re.range "8" "8")))) (re.++ (re.union (re.range "1" "1")(re.union (re.range "3" "3")(re.union (re.range "5" "5")(re.union (re.range "7" "7") (re.range "9" "9"))))) (re.union (re.range "2" "2") (re.range "6" "6")))) (str.to_re (str.++ "-" (str.++ "0" (str.++ "2" (str.++ "-" (str.++ "2" (str.++ "9" ""))))))))) (re.++ (re.union (re.++ (str.to_re (str.++ "2" (str.++ "0" "")))(re.++ (re.range "0" "9") (re.range "0" "9"))) (re.++ (str.to_re (str.++ "1" (str.++ "9" "")))(re.++ (re.range "0" "9") (re.range "0" "9"))))(re.++ (re.range "-" "-") (re.union (re.++ (re.union (re.++ (re.range "0" "0") (re.range "1" "9")) (re.++ (re.range "1" "1") (re.range "0" "2")))(re.++ (re.range "-" "-") (re.union (re.++ (re.range "0" "0") (re.range "1" "9"))(re.union (re.++ (re.range "1" "1") (re.range "0" "9")) (re.++ (re.range "2" "2") (re.range "0" "8")))))) (re.union (re.++ (re.union (re.++ (re.range "0" "0") (re.union (re.range "1" "1")(re.union (re.range "3" "3")(re.union (re.range "5" "5") (re.range "7" "8"))))) (re.++ (re.range "1" "1") (re.union (re.range "0" "0") (re.range "2" "2")))) (str.to_re (str.++ "-" (str.++ "3" (str.++ "1" ""))))) (re.++ (re.union (re.++ (re.range "0" "0") (re.union (re.range "," ",")(re.union (re.range "1" "1") (re.range "3" "9")))) (re.++ (re.range "1" "1") (re.range "0" "2")))(re.++ (re.range "-" "-") (re.union (str.to_re (str.++ "2" (str.++ "9" ""))) (str.to_re (str.++ "3" (str.++ "0" ""))))))))))) (str.to_re "")))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "8" (str.++ "8" (str.++ "-" (str.++ "9" (str.++ "8" (str.++ "-" (str.++ "9" (str.++ "9" "")))))))))

(define-fun Witness2 () String (str.++ "9" (str.++ "8" (str.++ "/" (str.++ "8" (str.++ "9" (str.++ "6" (str.++ "2" (str.++ "8" (str.++ "9" ""))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.opt (re.++ ((_ re.loop 2 4) (re.range "0" "9")) (re.range "/" "/")))(re.++ (re.union ((_ re.loop 6 8) (re.range "0" "9"))(re.union (re.++ ((_ re.loop 2 2) (re.range "0" "9"))(re.++ (re.range "-" "-")(re.++ ((_ re.loop 2 2) (re.range "0" "9"))(re.++ (re.range "-" "-") ((_ re.loop 2 4) (re.range "0" "9")))))) (re.++ ((_ re.loop 3 4) (re.range "0" "9"))(re.++ (re.range "-" "-") ((_ re.loop 3 4) (re.range "0" "9")))))) (str.to_re ""))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "O" (str.++ "U" (str.++ "=" (str.++ "_" (str.++ "\u{cb}" (str.++ "\u{5c}" (str.++ "/" (str.++ "," (str.++ "D" (str.++ "C" (str.++ "=" (str.++ "q" (str.++ "\u{85}" (str.++ "\u{a0}" (str.++ "D" (str.++ "C" (str.++ "=" (str.++ "\u{a0}" (str.++ "3" (str.++ "D" (str.++ "C" (str.++ "=" (str.++ "\u{cd}" (str.++ "," (str.++ "D" (str.++ "C" (str.++ "=" (str.++ "\u{0c}" (str.++ "\u{85}" (str.++ "," (str.++ "D" (str.++ "C" (str.++ "=" (str.++ "h" (str.++ "\u{a0}" ""))))))))))))))))))))))))))))))))))))

(define-fun Witness2 () String (str.++ "C" (str.++ "N" (str.++ "=" (str.++ "\u{dc}" (str.++ "5" (str.++ "y" (str.++ "\u{5c}" (str.++ "/" (str.++ "\u{5c}" (str.++ "/" (str.++ "\u{5c}" (str.++ "/" (str.++ "\u{5c}" (str.++ "/" (str.++ "," (str.++ "\u{85}" (str.++ "\u{a0}" (str.++ " " (str.++ "O" (str.++ "U" (str.++ "=" (str.++ "\u{ba}" (str.++ "\u{d6}" (str.++ "." (str.++ "\u{5c}" (str.++ "/" (str.++ ";" (str.++ "\u{5c}" (str.++ "," (str.++ "R" (str.++ "\u{85}" (str.++ "\u{5c}" (str.++ "/" (str.++ "\u{5c}" (str.++ "/" (str.++ "," (str.++ "D" (str.++ "C" (str.++ "=" (str.++ "K" (str.++ "\u{0d}" (str.++ "\u{e0}" (str.++ "\u{db}" (str.++ " " (str.++ "\u{a0}" (str.++ "\u{0b}" (str.++ "D" (str.++ "C" (str.++ "=" (str.++ "4" "")))))))))))))))))))))))))))))))))))))))))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.++ (re.* (re.++ (str.to_re (str.++ "C" (str.++ "N" (str.++ "=" ""))))(re.++ (re.+ (re.++ (re.+ (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "&" "'")(re.union (re.range "-" ".")(re.union (re.range "0" "9")(re.union (re.range ";" ";")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{85}" "\u{85}")(re.union (re.range "\u{a0}" "\u{a0}")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))))))))))(re.++ (re.* (str.to_re (str.++ "\u{5c}" (str.++ "/" "")))) (re.* (str.to_re (str.++ "\u{5c}" (str.++ "," "")))))))(re.++ (re.range "," ",") (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))))))(re.++ (re.* (re.++ (str.to_re (str.++ "O" (str.++ "U" (str.++ "=" ""))))(re.++ (re.+ (re.++ (re.+ (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "&" "'")(re.union (re.range "-" ".")(re.union (re.range "0" "9")(re.union (re.range ";" ";")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{85}" "\u{85}")(re.union (re.range "\u{a0}" "\u{a0}")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))))))))))(re.++ (re.* (str.to_re (str.++ "\u{5c}" (str.++ "/" "")))) (re.* (str.to_re (str.++ "\u{5c}" (str.++ "," "")))))))(re.++ (re.range "," ",") (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))))))(re.++ (re.+ (re.++ (str.to_re (str.++ "D" (str.++ "C" (str.++ "=" ""))))(re.++ (re.+ (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "&" "'")(re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range ";" ";")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{85}" "\u{85}")(re.union (re.range "\u{a0}" "\u{a0}")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))))))))))(re.++ (re.* (re.range "," ",")) (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))))))) (re.++ (str.to_re (str.++ "D" (str.++ "C" (str.++ "=" ""))))(re.++ (re.+ (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "&" "'")(re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range ";" ";")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{85}" "\u{85}")(re.union (re.range "\u{a0}" "\u{a0}")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))))))))) (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))))))) (str.to_re "")))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "5" ""))

(define-fun Witness2 () String (str.++ "9" (str.++ "," (str.++ "9" (str.++ "4" (str.++ "9" (str.++ "," (str.++ "8" (str.++ "9" (str.++ "7" ""))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.union (re.++ (re.range "1" "9")(re.++ ((_ re.loop 0 2) (re.range "0" "9"))(re.++ (re.range "," ",")(re.++ (re.* (re.++ ((_ re.loop 3 3) (re.range "0" "9")) (re.range "," ","))) ((_ re.loop 3 3) (re.range "0" "9")))))) (re.++ (re.range "1" "9") (re.* (re.range "0" "9")))) (str.to_re "")))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "h" (str.++ "t" (str.++ "t" (str.++ "p" (str.++ ":" (str.++ "/" (str.++ "/" (str.++ "w" (str.++ "w" (str.++ "w" (str.++ "." (str.++ "t" (str.++ "9" (str.++ "0" (str.++ "w" (str.++ "." (str.++ "z" (str.++ "8" (str.++ "X" (str.++ "D" (str.++ "A" (str.++ "-" (str.++ "e" (str.++ "." (str.++ "z" (str.++ "e" (str.++ "/" ""))))))))))))))))))))))))))))

(define-fun Witness2 () String (str.++ "h" (str.++ "t" (str.++ "t" (str.++ "p" (str.++ ":" (str.++ "/" (str.++ "/" (str.++ "4" (str.++ "_" (str.++ "7" (str.++ "-" (str.++ "A" (str.++ "Z" (str.++ "_" (str.++ "7" (str.++ "." (str.++ "G" (str.++ "A" (str.++ "9" (str.++ "y" (str.++ "Y" (str.++ "8" (str.++ "_" (str.++ "z" (str.++ "-" (str.++ "8" (str.++ "." (str.++ "2" (str.++ "Y" (str.++ "Y" (str.++ "." (str.++ "x" (str.++ "X" (str.++ "/" "")))))))))))))))))))))))))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.++ (str.to_re (str.++ "h" (str.++ "t" (str.++ "t" (str.++ "p" (str.++ ":" (str.++ "/" (str.++ "/" ""))))))))(re.++ (re.opt (str.to_re (str.++ "w" (str.++ "w" (str.++ "w" (str.++ "." ""))))))(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z"))))(re.++ (re.* (re.++ (re.union (re.range "-" "-") (re.range "_" "_")) (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z"))))))(re.++ (re.* (re.++ (re.range "." ".")(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))) (re.* (re.++ (re.union (re.range "-" "-") (re.range "_" "_")) (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))))))))(re.++ (re.range "." ".")(re.++ ((_ re.loop 2 4) (re.union (re.range "A" "Z") (re.range "a" "z"))) (re.opt (re.range "/" "/"))))))))) (str.to_re "")))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "p" (str.++ "m" "")))

(define-fun Witness2 () String (str.++ "o" ""))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))) (str.to_re "")))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "d" (str.++ "8" (str.++ "3" (str.++ "4" (str.++ "1" (str.++ "z" (str.++ "n" (str.++ "2" (str.++ "x" (str.++ "8" (str.++ "\u{ba}" (str.++ "8" (str.++ "@" (str.++ "d" (str.++ "\u{d5}" (str.++ "." (str.++ "a" (str.++ "r" (str.++ "g" (str.++ "." (str.++ "a" (str.++ "l" (str.++ "t" ""))))))))))))))))))))))))

(define-fun Witness2 () String (str.++ "0" (str.++ "E" (str.++ "f" (str.++ "9" (str.++ "8" (str.++ "d" (str.++ "3" (str.++ "\u{e9}" (str.++ "h" (str.++ "n" (str.++ "7" (str.++ "." (str.++ "z" (str.++ "\u{ba}" (str.++ "6" (str.++ "@" (str.++ "1" (str.++ "8" (str.++ "w" (str.++ "7" (str.++ "\u{e6}" (str.++ "6" (str.++ "l" (str.++ "z" (str.++ "7" (str.++ "\u{d0}" (str.++ "0" (str.++ "o" (str.++ "\u{aa}" (str.++ "." (str.++ "x" (str.++ "a" (str.++ "." (str.++ "q" (str.++ "w" (str.++ "z" (str.++ "a" ""))))))))))))))))))))))))))))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.+ (re.++ (re.+ (re.++ (re.+ (re.union (re.range "0" "9") (re.range "a" "z"))) (re.opt (re.union (re.range "-" ".")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))))) (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))(re.++ (re.range "@" "@")(re.++ (re.+ (re.++ (re.+ (re.++ (re.+ (re.union (re.range "0" "9") (re.range "a" "z"))) (re.opt (re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))))) (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))(re.++ (re.range "." ".")(re.++ ((_ re.loop 2 3) (re.range "a" "z"))(re.++ (re.opt (re.++ (re.range "." ".") ((_ re.loop 2 4) (re.range "a" "z")))) (str.to_re ""))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "0" (str.++ "5" (str.++ "." (str.++ "1" (str.++ "5" ""))))))

(define-fun Witness2 () String (str.++ "9" (str.++ ":" (str.++ "1" (str.++ "5" "")))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.union (re.++ (re.union (re.++ (re.opt (re.range "0" "0")) (re.range "1" "9")) (re.++ (re.range "1" "1") (re.range "0" "2")))(re.++ (re.union (re.range "." ".") (re.range ":" ":"))(re.++ (re.opt (re.union (str.to_re (str.++ "0" (str.++ "0" "")))(re.union (str.to_re (str.++ "1" (str.++ "5" "")))(re.union (str.to_re (str.++ "3" (str.++ "0" ""))) (str.to_re (str.++ "4" (str.++ "5" "")))))))(re.++ (re.opt (re.range " " " ")) (re.union (str.to_re (str.++ "A" (str.++ "M" "")))(re.union (str.to_re (str.++ "a" (str.++ "m" "")))(re.union (str.to_re (str.++ "a" (str.++ "M" "")))(re.union (str.to_re (str.++ "A" (str.++ "m" "")))(re.union (str.to_re (str.++ "P" (str.++ "M" "")))(re.union (str.to_re (str.++ "p" (str.++ "m" "")))(re.union (str.to_re (str.++ "p" (str.++ "M" ""))) (str.to_re (str.++ "P" (str.++ "m" "")))))))))))))) (re.++ (re.union (re.++ (re.opt (re.range "0" "0")) (re.range "0" "9"))(re.union (re.++ (re.range "1" "1") (re.range "0" "9")) (re.++ (re.range "2" "2") (re.range "0" "3"))))(re.++ (re.union (re.range "." ".") (re.range ":" ":")) (re.opt (re.union (str.to_re (str.++ "0" (str.++ "0" "")))(re.union (str.to_re (str.++ "1" (str.++ "5" "")))(re.union (str.to_re (str.++ "3" (str.++ "0" ""))) (str.to_re (str.++ "4" (str.++ "5" "")))))))))) (str.to_re "")))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "-" (str.++ "r" (str.++ "w" (str.++ "x" (str.++ "r" (str.++ "w" (str.++ "s" (str.++ "r" (str.++ "w" (str.++ "-" (str.++ " " (str.++ "\u{0a}" (str.++ " " (str.++ "2" (str.++ "6" (str.++ "8" (str.++ "0" (str.++ "\u{0c}" (str.++ "\u{ba}" (str.++ "\u{d6}" (str.++ " " (str.++ "\u{0d}" (str.++ "\u{0d}" (str.++ "\u{a0}" (str.++ "\u{b5}" (str.++ "\u{a0}" (str.++ "1" (str.++ "\u{09}" (str.++ "0" (str.++ "8" (str.++ "8" (str.++ "9" (str.++ "-" (str.++ "8" (str.++ "8" (str.++ "-" (str.++ "6" (str.++ " " (str.++ " " (str.++ "5" (str.++ "8" (str.++ ":" (str.++ "4" (str.++ "7" (str.++ "\u{85}" (str.++ "\u{f2}" (str.++ "\u{b6}" (str.++ "\u{86}" "")))))))))))))))))))))))))))))))))))))))))))))))))

(define-fun Witness2 () String (str.++ "-" (str.++ "r" (str.++ "-" (str.++ "-" (str.++ "r" (str.++ "w" (str.++ "-" (str.++ "-" (str.++ "-" (str.++ "-" (str.++ "\u{85}" (str.++ "0" (str.++ "1" (str.++ "3" (str.++ "\u{a0}" (str.++ "\u{85}" (str.++ "9" (str.++ "\u{aa}" (str.++ "1" (str.++ " " (str.++ "\u{a0}" (str.++ "\u{85}" (str.++ "\u{e4}" (str.++ "\u{b5}" (str.++ "8" (str.++ " " (str.++ "\u{85}" (str.++ "7" (str.++ "8" (str.++ "3" (str.++ " " (str.++ "0" (str.++ "6" (str.++ "1" (str.++ "9" (str.++ "-" (str.++ "0" (str.++ "5" (str.++ "-" (str.++ "2" (str.++ "0" (str.++ "\u{85}" (str.++ "1" (str.++ "8" (str.++ ":" (str.++ "6" (str.++ "8" (str.++ "\u{0d}" (str.++ "\u{0d}" (str.++ "\u{a0}" (str.++ "9" (str.++ "\u{d5}" "")))))))))))))))))))))))))))))))))))))))))))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.++ (re.union (re.range "-" "-")(re.union (re.range "d" "d") (re.range "l" "l")))(re.++ ((_ re.loop 3 3) (re.++ (re.union (re.range "-" "-") (re.range "r" "r"))(re.++ (re.union (re.range "-" "-") (re.range "w" "w")) (re.union (re.range "-" "-")(re.union (re.range "s" "s") (re.range "x" "x"))))))(re.++ (re.+ (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (re.+ (re.range "0" "9"))(re.++ (re.+ (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))(re.++ (re.+ (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))(re.++ (re.+ (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (re.+ (re.range "0" "9"))(re.++ (re.+ (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (re.++ ((_ re.loop 4 4) (re.range "0" "9"))(re.++ (re.range "-" "-")(re.++ ((_ re.loop 2 2) (re.range "0" "9"))(re.++ (re.range "-" "-")(re.++ (re.++ (re.opt (re.range "0" "9")) (re.range "0" "9"))(re.++ (re.+ (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ ((_ re.loop 2 2) (re.range "0" "9"))(re.++ (re.range ":" ":") ((_ re.loop 2 2) (re.range "0" "9"))))))))))(re.++ (re.+ (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))) (re.++ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))) (re.+ (re.union (re.range "\u{00}" "\u{09}") (re.range "\u{0b}" "\u{ff}"))))))))))))))))) (str.to_re "")))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "2" (str.++ "." (str.++ "8" (str.++ "8" (str.++ "." (str.++ "9" (str.++ "." (str.++ "8" "")))))))))

(define-fun Witness2 () String (str.++ "9" (str.++ "3" (str.++ "." (str.++ "2" (str.++ "." (str.++ "2" (str.++ "." (str.++ "8" "")))))))))

(assert (= regexA (re.++ ((_ re.loop 1 3) (re.range "0" "9"))(re.++ (re.range "." ".")(re.++ ((_ re.loop 1 3) (re.range "0" "9"))(re.++ (re.range "." ".")(re.++ ((_ re.loop 1 3) (re.range "0" "9"))(re.++ (re.range "." ".") ((_ re.loop 1 3) (re.range "0" "9"))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "-" (str.++ "1" (str.++ "7" (str.++ "." (str.++ "9" ""))))))

(define-fun Witness2 () String (str.++ "9" (str.++ "0" (str.++ "." (str.++ "0" (str.++ "0" (str.++ "0" "")))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.opt (re.range "-" "-")) (re.union (re.++ (re.opt (re.range "1" "8"))(re.++ (re.range "0" "9")(re.++ (re.range "." ".")(re.++ ((_ re.loop 1 6) (re.range "0" "9")) (str.to_re ""))))) (re.++ (str.to_re (str.++ "9" (str.++ "0" (str.++ "." ""))))(re.++ ((_ re.loop 1 6) (re.range "0" "0")) (str.to_re ""))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "O" (str.++ "9" (str.++ "\u{5c}" (str.++ "s" (str.++ "5" (str.++ "X" (str.++ "Z" ""))))))))

(define-fun Witness2 () String (str.++ "A" (str.++ "D" (str.++ "2" (str.++ "\u{5c}" (str.++ "s" (str.++ "9" (str.++ "L" (str.++ "A" "")))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.union (re.++ (str.to_re (str.++ "G" (str.++ "I" (str.++ "R" (str.++ "\u{5c}" "")))))(re.++ (re.opt (re.range "s" "s")) (str.to_re (str.++ "0" (str.++ "A" (str.++ "A" "")))))) (re.++ (re.union (re.range "A" "P")(re.union (re.range "R" "U")(re.union (re.range "W" "W") (re.range "Y" "Z"))))(re.++ (re.union ((_ re.loop 1 2) (re.range "0" "9"))(re.union (re.union (re.++ (re.union (re.range "A" "H") (re.range "K" "Y")) (re.range "0" "9")) (re.++ (re.union (re.range "A" "H") (re.range "K" "Y"))(re.++ (re.range "0" "9") (re.union (re.range "0" "9")(re.union (re.range "A" "B")(re.union (re.range "E" "E")(re.union (re.range "H" "H")(re.union (re.range "M" "N")(re.union (re.range "P" "P")(re.union (re.range "R" "R") (re.range "V" "Y"))))))))))) (re.++ (re.range "0" "9") (re.union (re.range "A" "H")(re.union (re.range "J" "K")(re.union (re.range "S" "U") (re.range "W" "W")))))))(re.++ (re.range "\u{5c}" "\u{5c}")(re.++ (re.opt (re.range "s" "s"))(re.++ (re.range "0" "9") ((_ re.loop 2 2) (re.union (re.range "A" "B")(re.union (re.range "D" "H")(re.union (re.range "J" "J")(re.union (re.range "L" "L")(re.union (re.range "N" "N")(re.union (re.range "P" "U") (re.range "W" "Z")))))))))))))) (str.to_re "")))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "2" (str.++ "3" (str.++ "\u{85}" (str.++ "0" (str.++ "2" (str.++ "\u{85}" (str.++ "3" (str.++ "7" (str.++ "5" (str.++ "9" "")))))))))))

(define-fun Witness2 () String (str.++ "2" (str.++ "9" (str.++ "-" (str.++ "0" (str.++ "2" (str.++ "-" (str.++ "9" (str.++ "2" (str.++ "0" (str.++ "0" "")))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.union (re.++ (re.union (re.++ (re.range "0" "0") (re.range "1" "9"))(re.union (re.++ (re.range "1" "2") (re.range "0" "9")) (re.++ (re.range "3" "3") (re.range "0" "1"))))(re.++ (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "-" "/")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (re.union (re.++ (re.range "0" "0") (re.union (re.range "1" "1")(re.union (re.range "3" "3")(re.union (re.range "5" "5") (re.range "7" "8"))))) (re.++ (re.range "1" "1") (re.union (re.range "0" "0") (re.range "2" "2"))))(re.++ (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "-" "/")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))) (re.++ (re.union (str.to_re (str.++ "1" (str.++ "9" ""))) (re.++ (re.range "2" "9") (re.range "0" "9"))) ((_ re.loop 2 2) (re.range "0" "9")))))))(re.union (re.++ (re.union (re.++ (re.range "0" "0") (re.range "1" "9"))(re.union (re.++ (re.range "1" "2") (re.range "0" "9")) (str.to_re (str.++ "3" (str.++ "0" "")))))(re.++ (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "-" "/")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (re.union (re.++ (re.range "0" "0") (re.union (re.range "1" "1") (re.range "3" "9"))) (re.++ (re.range "1" "1") (re.range "0" "2")))(re.++ (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "-" "/")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))) (re.++ (re.union (str.to_re (str.++ "1" (str.++ "9" ""))) (re.++ (re.range "2" "9") (re.range "0" "9"))) ((_ re.loop 2 2) (re.range "0" "9")))))))(re.union (re.++ (re.union (re.++ (re.range "0" "0") (re.range "1" "9"))(re.union (re.++ (re.range "1" "1") (re.range "0" "9")) (re.++ (re.range "2" "2") (re.range "0" "8"))))(re.++ (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "-" "/")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (str.to_re (str.++ "0" (str.++ "2" "")))(re.++ (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "-" "/")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))) (re.++ (re.union (str.to_re (str.++ "1" (str.++ "9" ""))) (re.++ (re.range "2" "9") (re.range "0" "9"))) ((_ re.loop 2 2) (re.range "0" "9"))))))) (re.++ (str.to_re (str.++ "2" (str.++ "9" "")))(re.++ (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "-" "/")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (str.to_re (str.++ "0" (str.++ "2" "")))(re.++ (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "-" "/")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))) (re.union (re.++ (re.union (re.++ (re.range "1" "1") (re.range "6" "9")) (re.++ (re.range "2" "9") (re.range "0" "9"))) (re.union (re.++ (re.range "0" "0") (re.union (re.range "4" "4") (re.range "8" "8")))(re.union (re.++ (re.union (re.range "2" "2")(re.union (re.range "4" "4")(re.union (re.range "6" "6") (re.range "8" "8")))) (re.union (re.range "0" "0")(re.union (re.range "4" "4") (re.range "8" "8")))) (re.++ (re.union (re.range "1" "1")(re.union (re.range "3" "3")(re.union (re.range "5" "5")(re.union (re.range "7" "7") (re.range "9" "9"))))) (re.union (re.range "2" "2") (re.range "6" "6")))))) (re.++ (re.union (str.to_re (str.++ "1" (str.++ "6" "")))(re.union (re.++ (re.union (re.range "2" "2")(re.union (re.range "4" "4")(re.union (re.range "6" "6") (re.range "8" "8")))) (re.union (re.range "0" "0")(re.union (re.range "4" "4") (re.range "8" "8")))) (re.++ (re.union (re.range "3" "3")(re.union (re.range "5" "5")(re.union (re.range "7" "7") (re.range "9" "9")))) (re.union (re.range "2" "2") (re.range "6" "6"))))) (str.to_re (str.++ "0" (str.++ "0" "")))))))))))) (str.to_re "")))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "3" (str.++ "0" (str.++ "-" (str.++ "1" (str.++ "0" (str.++ "-" (str.++ "2" (str.++ "0" (str.++ "1" (str.++ "0" "")))))))))))

(define-fun Witness2 () String (str.++ "3" (str.++ "0" (str.++ "-" (str.++ "0" (str.++ "," (str.++ "-" (str.++ "2" (str.++ "0" (str.++ "2" (str.++ "9" "")))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.union (re.++ (re.union (re.++ (re.union (re.++ (re.range "0" "0") (re.range "1" "9"))(re.union (re.++ (re.range "1" "1") (re.range "0" "9")) (re.++ (re.range "2" "2") (re.range "0" "8"))))(re.++ (re.range "-" "-") (re.union (re.++ (re.range "0" "0") (re.range "1" "9")) (re.++ (re.range "1" "1") (re.range "0" "2"))))) (re.union (re.++ (str.to_re (str.++ "3" (str.++ "1" (str.++ "-" "")))) (re.union (re.++ (re.range "0" "0") (re.union (re.range "1" "1")(re.union (re.range "3" "3")(re.union (re.range "5" "5") (re.range "7" "8"))))) (re.++ (re.range "1" "1") (re.union (re.range "0" "0") (re.range "2" "2"))))) (re.++ (re.union (str.to_re (str.++ "2" (str.++ "9" ""))) (str.to_re (str.++ "3" (str.++ "0" ""))))(re.++ (re.range "-" "-") (re.union (re.++ (re.range "0" "0") (re.union (re.range "," ",")(re.union (re.range "1" "1") (re.range "3" "9")))) (re.++ (re.range "1" "1") (re.range "0" "2")))))))(re.++ (re.range "-" "-") (re.++ (str.to_re (str.++ "2" (str.++ "0" "")))(re.++ (re.range "0" "9") (re.range "0" "9"))))) (re.++ (str.to_re (str.++ "2" (str.++ "9" (str.++ "-" (str.++ "0" (str.++ "2" (str.++ "-" (str.++ "2" (str.++ "0" ""))))))))) (re.union (re.++ (re.union (re.range "0" "0")(re.union (re.range "2" "2")(re.union (re.range "4" "4")(re.union (re.range "6" "6") (re.range "8" "8"))))) (re.union (re.range "0" "0")(re.union (re.range "4" "4") (re.range "8" "8")))) (re.++ (re.union (re.range "1" "1")(re.union (re.range "3" "3")(re.union (re.range "5" "5")(re.union (re.range "7" "7") (re.range "9" "9"))))) (re.union (re.range "2" "2") (re.range "6" "6")))))) (str.to_re "")))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "h" (str.++ "t" (str.++ "t" (str.++ "p" (str.++ "s" (str.++ ":" (str.++ "/" (str.++ "/" (str.++ "Y" (str.++ "-" (str.++ "/" ""))))))))))))

(define-fun Witness2 () String (str.++ "h" (str.++ "t" (str.++ "t" (str.++ "p" (str.++ ":" (str.++ "/" (str.++ "/" (str.++ "-" (str.++ "_" (str.++ "z" (str.++ "Y" (str.++ "v" (str.++ "z" (str.++ "\u{88}" (str.++ "R" (str.++ "x" (str.++ "6" (str.++ "/" "")))))))))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.union (str.to_re (str.++ "h" (str.++ "t" (str.++ "t" (str.++ "p" (str.++ ":" (str.++ "/" (str.++ "/" "")))))))) (str.to_re (str.++ "h" (str.++ "t" (str.++ "t" (str.++ "p" (str.++ "s" (str.++ ":" (str.++ "/" (str.++ "/" ""))))))))))(re.++ (re.union (re.++ (re.* (re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_") (re.range "a" "z"))))))(re.++ (re.opt (re.union (re.range "\u{00}" "\u{09}") (re.range "\u{0b}" "\u{ff}"))) (re.* (re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_") (re.range "a" "z")))))))) (re.++ (re.* (re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_") (re.range "a" "z"))))))(re.++ (re.opt (re.union (re.range "\u{00}" "\u{09}") (re.range "\u{0b}" "\u{ff}")))(re.++ (re.* (re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_") (re.range "a" "z"))))))(re.++ (re.opt (re.union (re.range "\u{00}" "\u{09}") (re.range "\u{0b}" "\u{ff}"))) (re.* (re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_") (re.range "a" "z")))))))))))(re.++ (re.opt (re.range "/" "/"))(re.++ (re.* (re.union (re.range "#" "#")(re.union (re.range "%" "&")(re.union (re.range "+" "+") (re.range "." "~"))))) (str.to_re ""))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "1" (str.++ "9" (str.++ "5" (str.++ "e" (str.++ "-" (str.++ "1" (str.++ "4" (str.++ "4" "")))))))))

(define-fun Witness2 () String (str.++ "." (str.++ "9" (str.++ "1" ""))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.opt (re.union (re.range "+" "+") (re.range "-" "-")))(re.++ (re.union (re.++ (re.+ (re.range "0" "9")) (re.opt (re.range "." "."))) (re.++ (re.range "." ".") (re.range "0" "9")))(re.++ (re.* (re.range "0" "9"))(re.++ (re.opt (re.++ (re.union (re.range "E" "E") (re.range "e" "e"))(re.++ (re.opt (re.union (re.range "+" "+") (re.range "-" "-"))) (re.+ (re.range "0" "9"))))) (str.to_re ""))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "\u{5c}" (str.++ "\u{5c}" (str.++ "\u{c6}" (str.++ "$" (str.++ "\u{5c}" (str.++ "\u{ee}" (str.++ "\u{c6}" (str.++ "8" (str.++ "." (str.++ "H" (str.++ "T" (str.++ "M" (str.++ "L" ""))))))))))))))

(define-fun Witness2 () String (str.++ "R" (str.++ ":" (str.++ "\u{5c}" (str.++ "\u{aa}" (str.++ "v" (str.++ "\u{5c}" (str.++ "\u{aa}" (str.++ "." (str.++ "H" (str.++ "T" (str.++ "M" (str.++ "L" "")))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.union (re.++ (re.union (re.range "A" "Z") (re.range "a" "z")) (re.range ":" ":")) (re.++ (re.++ ((_ re.loop 2 2) (re.range "\u{5c}" "\u{5c}")) (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))) (re.opt (re.range "$" "$"))))(re.++ (re.+ (re.++ (re.range "\u{5c}" "\u{5c}") (re.++ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))(re.++ (re.* (re.union (re.range " " " ")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))) (re.* (re.union (re.range "\u{00}" "\u{09}") (re.range "\u{0b}" "\u{ff}")))))))(re.++ (re.range "." ".")(re.++ (re.union (re.union (str.to_re (str.++ "h" (str.++ "t" (str.++ "m" (str.++ "l" ""))))) (str.to_re (str.++ "H" (str.++ "T" (str.++ "M" (str.++ "L" "")))))) (re.union (str.to_re (str.++ "h" (str.++ "t" (str.++ "m" "")))) (str.to_re (str.++ "H" (str.++ "T" (str.++ "M" "")))))) (str.to_re ""))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "3" (str.++ "," (str.++ "4" (str.++ " " (str.++ "9" (str.++ "7" (str.++ "8" (str.++ "0" (str.++ "-" (str.++ "8" (str.++ "7" (str.++ "4" (str.++ "8" (str.++ " " (str.++ "8" (str.++ "9" (str.++ "9" (str.++ "2" (str.++ "-" ""))))))))))))))))))))

(define-fun Witness2 () String (str.++ "3" (str.++ "7" (str.++ "9" (str.++ "0" (str.++ " " (str.++ "0" (str.++ "9" (str.++ "0" (str.++ "8" (str.++ "8" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "-" (str.++ "7" (str.++ "9" (str.++ "8" (str.++ "6" "")))))))))))))))))))

(assert (= regexA (re.union (re.++ (re.range "4" "4") ((_ re.loop 12 12) (re.range "0" "9")))(re.union (re.++ (re.union (re.++ (re.range "3" "4") ((_ re.loop 3 3) (re.range "0" "9")))(re.union (re.++ (re.range "5" "5")(re.++ (re.range "1" "5") ((_ re.loop 2 2) (re.range "0" "9")))) (str.to_re (str.++ "6" (str.++ "0" (str.++ "1" (str.++ "1" "")))))))(re.++ (re.union (re.opt (re.range "-" "-")) (re.opt (re.range " " " "))) ((_ re.loop 3 3) (re.++ ((_ re.loop 4 4) (re.range "0" "9")) (re.union (re.opt (re.range "-" "-")) (re.opt (re.range " " " ")))))))(re.union (re.++ (re.++ (re.range "3" "3")(re.++ (re.union (re.range "," ",")(re.union (re.range "4" "4") (re.range "7" "7"))) ((_ re.loop 2 2) (re.range "0" "9")))) (re.++ (re.union (re.opt (re.range "-" "-")) (re.opt (re.range " " " ")))(re.++ ((_ re.loop 6 6) (re.range "0" "9"))(re.++ (re.union (re.opt (re.range "-" "-")) (re.opt (re.range " " " "))) ((_ re.loop 5 5) (re.range "0" "9"))))))(re.union (re.++ (re.++ (re.range "3" "3")(re.++ (re.union (re.range "," ",")(re.union (re.range "4" "4") (re.range "7" "7"))) ((_ re.loop 2 2) (re.range "0" "9")))) (re.++ (re.union (re.opt (re.range "-" "-")) (re.opt (re.range " " " ")))(re.++ ((_ re.loop 4 4) (re.range "0" "9"))(re.++ (re.union (re.opt (re.range "-" "-")) (re.opt (re.range " " " ")))(re.++ ((_ re.loop 4 4) (re.range "0" "9"))(re.++ (re.union (re.opt (re.range "-" "-")) (re.opt (re.range " " " "))) ((_ re.loop 3 3) (re.range "0" "9"))))))))(re.union (re.++ (re.++ (re.range "3" "3")(re.++ (re.union (re.range "," ",")(re.union (re.range "4" "4") (re.range "7" "7"))) (re.range "0" "9")))(re.++ (re.union (re.opt (re.range "-" "-")) (re.opt (re.range " " " "))) ((_ re.loop 3 3) (re.++ ((_ re.loop 4 4) (re.range "0" "9")) (re.union (re.opt (re.range "-" "-")) (re.opt (re.range " " " ")))))))(re.union (re.++ (re.union (re.++ (str.to_re (str.++ "3" (str.++ "0" "")))(re.++ (re.range "0" "5") (re.range "0" "9"))) (re.++ (re.union (str.to_re (str.++ "3" (str.++ "6" ""))) (str.to_re (str.++ "3" (str.++ "8" ""))))(re.++ (re.range "0" "9") (re.range "2" "2")))) (re.++ (re.union (re.opt (re.range "-" "-")) (re.opt (re.range " " " ")))(re.++ ((_ re.loop 4 4) (re.range "0" "9"))(re.++ (re.union (re.opt (re.range "-" "-")) (re.opt (re.range " " " ")))(re.++ ((_ re.loop 4 4) (re.range "0" "9"))(re.++ (re.union (re.opt (re.range "-" "-")) (re.opt (re.range " " " "))) ((_ re.loop 2 2) (re.range "0" "9")))))))) (re.++ (re.union (re.union (str.to_re (str.++ "2" (str.++ "1" (str.++ "3" (str.++ "1" ""))))) (str.to_re (str.++ "1" (str.++ "8" (str.++ "0" (str.++ "0" "")))))) (re.union (str.to_re (str.++ "2" (str.++ "0" (str.++ "1" (str.++ "4" ""))))) (str.to_re (str.++ "2" (str.++ "1" (str.++ "4" (str.++ "9" ""))))))) (re.++ (re.union (re.opt (re.range "-" "-")) (re.opt (re.range " " " ")))(re.++ ((_ re.loop 4 4) (re.range "0" "9"))(re.++ (re.union (re.opt (re.range "-" "-")) (re.opt (re.range " " " ")))(re.++ ((_ re.loop 4 4) (re.range "0" "9"))(re.++ (re.union (re.opt (re.range "-" "-")) (re.opt (re.range " " " "))) ((_ re.loop 3 3) (re.range "0" "9"))))))))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "1" (str.++ "9" (str.++ "3" (str.++ "E" (str.++ "9" (str.++ "8" (str.++ "c" (str.++ "3" (str.++ "[" (str.++ "1" "")))))))))))

(define-fun Witness2 () String (str.++ "2" (str.++ "0" (str.++ "9" (str.++ "V" (str.++ "2" (str.++ "3" (str.++ "1" (str.++ "\u{d4}" (str.++ "1" (str.++ "8" (str.++ "3" (str.++ "\u{be}" (str.++ "8" (str.++ "5" "")))))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.++ (re.union (re.++ (re.range "1" "1") ((_ re.loop 2 2) (re.range "0" "9")))(re.union (re.++ (str.to_re (str.++ "2" (str.++ "2" ""))) (re.range "0" "3"))(re.union (re.++ (re.range "1" "9") (re.range "0" "9"))(re.union (re.++ (re.range "2" "2")(re.++ (re.range "0" "1") (re.range "0" "9"))) (re.range "1" "9")))))(re.++ (re.union (re.range "\u{00}" "\u{09}") (re.range "\u{0b}" "\u{ff}"))(re.++ (re.union (re.++ (re.range "1" "1") ((_ re.loop 2 2) (re.range "0" "9")))(re.union (re.++ (re.range "2" "2")(re.++ (re.range "0" "4") (re.range "0" "9")))(re.union (re.++ (str.to_re (str.++ "2" (str.++ "5" ""))) (re.range "0" "5"))(re.union (re.++ (re.range "1" "9") (re.range "0" "9")) (re.range "0" "9")))))(re.++ (re.union (re.range "\u{00}" "\u{09}") (re.range "\u{0b}" "\u{ff}"))(re.++ (re.union (re.++ (re.range "1" "1") ((_ re.loop 2 2) (re.range "0" "9")))(re.union (re.++ (re.range "2" "2")(re.++ (re.range "0" "4") (re.range "0" "9")))(re.union (re.++ (str.to_re (str.++ "2" (str.++ "5" ""))) (re.range "0" "5"))(re.union (re.++ (re.range "1" "9") (re.range "0" "9")) (re.range "0" "9")))))(re.++ (re.union (re.range "\u{00}" "\u{09}") (re.range "\u{0b}" "\u{ff}")) (re.union (re.++ (re.range "1" "1") ((_ re.loop 2 2) (re.range "0" "9")))(re.union (re.++ (re.range "2" "2")(re.++ (re.range "0" "4") (re.range "0" "9")))(re.union (re.++ (str.to_re (str.++ "2" (str.++ "5" ""))) (re.range "0" "5"))(re.union (re.++ (re.range "1" "9") (re.range "0" "9")) (re.range "0" "9"))))))))))) (str.to_re "")))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "D" (str.++ "i" (str.++ "@" (str.++ "-" (str.++ "1" (str.++ "." (str.++ "8" (str.++ "-" (str.++ "9" (str.++ "." (str.++ "r" (str.++ "U" (str.++ "N" (str.++ "." (str.++ "x" (str.++ "c" (str.++ "." (str.++ "L" (str.++ "O" (str.++ "." (str.++ "x" (str.++ "Y" (str.++ "." (str.++ "z" (str.++ "Z" (str.++ "c" "")))))))))))))))))))))))))))

(define-fun Witness2 () String (str.++ "L" (str.++ "-" (str.++ "@" (str.++ "0" (str.++ "1" (str.++ "o" (str.++ "8" (str.++ "2" (str.++ "e" (str.++ "." (str.++ "b" (str.++ "E" (str.++ "." (str.++ "R" (str.++ "d" ""))))))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.union (re.range "A" "Z") (re.range "a" "z"))(re.++ (re.+ (re.union (re.range "-" ".")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_") (re.range "a" "z"))))))(re.++ (re.range "@" "@")(re.++ (re.+ (re.++ (re.++ ((_ re.loop 2 2) (re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z"))))) (re.* (re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))))) (re.range "." ".")))(re.++ (re.union ((_ re.loop 2 4) (re.union (re.range "A" "Z") (re.range "a" "z"))) (re.++ ((_ re.loop 2 2) (re.union (re.range "A" "Z") (re.range "a" "z")))(re.++ (re.range "." ".") ((_ re.loop 2 2) (re.union (re.range "A" "Z") (re.range "a" "z")))))) (str.to_re "")))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "Q" (str.++ "y" (str.++ "e" (str.++ "i" (str.++ "r" (str.++ "o" "")))))))

(define-fun Witness2 () String (str.++ "K" (str.++ "m" (str.++ "n" (str.++ "h" (str.++ "o" ""))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.range "A" "Z")(re.++ (re.+ (re.range "a" "z"))(re.++ (re.++ (re.union (str.to_re (str.++ "e" (str.++ "i" (str.++ "r" "")))) (re.++ (re.union (re.range "l" "l") (re.range "n" "n")) (re.range "h" "h"))) (re.union (re.range "a" "a") (re.range "o" "o"))) (str.to_re "")))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "3" (str.++ "0" (str.++ "/" (str.++ "," (str.++ "/" (str.++ "9" (str.++ "1" (str.++ "5" (str.++ "3" (str.++ " " (str.++ "2" (str.++ "2" (str.++ ":" (str.++ "4" (str.++ ":" (str.++ "5" (str.++ "6" ""))))))))))))))))))

(define-fun Witness2 () String (str.++ "2" (str.++ "9" (str.++ "/" (str.++ "2" (str.++ "/" (str.++ "0" (str.++ "4" (str.++ " " (str.++ "2" (str.++ "1" (str.++ ":" (str.++ "5" (str.++ ":" (str.++ "8" "")))))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.union (re.++ (re.union (re.++ (str.to_re (str.++ "3" (str.++ "1" (str.++ "/" "")))) (re.union (re.++ (re.opt (re.range "0" "0")) (re.union (re.range "1" "1")(re.union (re.range "3" "3")(re.union (re.range "5" "5") (re.range "7" "8"))))) (re.++ (re.range "1" "1") (re.union (re.range "0" "0") (re.range "2" "2"))))) (re.++ (re.union (str.to_re (str.++ "2" (str.++ "9" ""))) (str.to_re (str.++ "3" (str.++ "0" ""))))(re.++ (re.range "/" "/") (re.union (re.++ (re.opt (re.range "0" "0")) (re.union (re.range "," ",")(re.union (re.range "1" "1") (re.range "3" "9")))) (re.++ (re.range "1" "1") (re.range "0" "2"))))))(re.++ (re.range "/" "/")(re.++ (re.opt (re.union (re.++ (re.range "1" "1") (re.range "6" "9")) (re.++ (re.range "2" "9") (re.range "0" "9")))) ((_ re.loop 2 2) (re.range "0" "9")))))(re.union (re.++ (str.to_re (str.++ "2" (str.++ "9" (str.++ "/" ""))))(re.++ (re.opt (re.range "0" "0"))(re.++ (str.to_re (str.++ "2" (str.++ "/" ""))) (re.union (re.++ (re.opt (re.union (re.++ (re.range "1" "1") (re.range "6" "9")) (re.++ (re.range "2" "9") (re.range "0" "9")))) (re.union (re.++ (re.range "0" "0") (re.union (re.range "4" "4") (re.range "8" "8")))(re.union (re.++ (re.union (re.range "2" "2")(re.union (re.range "4" "4")(re.union (re.range "6" "6") (re.range "8" "8")))) (re.union (re.range "0" "0")(re.union (re.range "4" "4") (re.range "8" "8")))) (re.++ (re.union (re.range "1" "1")(re.union (re.range "3" "3")(re.union (re.range "5" "5")(re.union (re.range "7" "7") (re.range "9" "9"))))) (re.union (re.range "2" "2") (re.range "6" "6")))))) (re.++ (re.union (str.to_re (str.++ "1" (str.++ "6" "")))(re.union (re.++ (re.union (re.range "2" "2")(re.union (re.range "4" "4")(re.union (re.range "6" "6") (re.range "8" "8")))) (re.union (re.range "0" "0")(re.union (re.range "4" "4") (re.range "8" "8")))) (re.++ (re.union (re.range "3" "3")(re.union (re.range "5" "5")(re.union (re.range "7" "7") (re.range "9" "9")))) (re.union (re.range "2" "2") (re.range "6" "6"))))) (str.to_re (str.++ "0" (str.++ "0" "")))))))) (re.++ (re.union (re.++ (re.opt (re.range "0" "0")) (re.range "1" "9"))(re.union (re.++ (re.range "1" "1") (re.range "0" "9")) (re.++ (re.range "2" "2") (re.range "0" "8"))))(re.++ (re.range "/" "/")(re.++ (re.union (re.++ (re.opt (re.range "0" "0")) (re.range "1" "9")) (re.++ (re.range "1" "1") (re.range "0" "2")))(re.++ (re.range "/" "/") (re.++ (re.opt (re.union (re.++ (re.range "1" "1") (re.range "6" "9")) (re.++ (re.range "2" "9") (re.range "0" "9")))) ((_ re.loop 2 2) (re.range "0" "9")))))))))(re.++ (re.range " " " ")(re.++ (re.union (str.to_re (str.++ "2" (str.++ "0" "")))(re.union (str.to_re (str.++ "2" (str.++ "1" "")))(re.union (str.to_re (str.++ "2" (str.++ "2" "")))(re.union (str.to_re (str.++ "2" (str.++ "3" ""))) (re.++ (re.opt (re.range "0" "1")) (re.range "0" "9"))))))(re.++ (re.range ":" ":")(re.++ (re.opt (re.range "0" "5"))(re.++ (re.range "0" "9")(re.++ (re.range ":" ":")(re.++ (re.opt (re.range "0" "5"))(re.++ (re.range "0" "9") (str.to_re "")))))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "2" (str.++ "3" (str.++ "8" (str.++ "." (str.++ "9" (str.++ "." (str.++ "8" (str.++ "6" (str.++ "." (str.++ "9" (str.++ "8" ""))))))))))))

(define-fun Witness2 () String (str.++ "1" (str.++ "8" (str.++ "1" (str.++ "." (str.++ "1" (str.++ "8" (str.++ "9" (str.++ "." (str.++ "2" (str.++ "4" (str.++ "7" (str.++ "." (str.++ "1" (str.++ "9" (str.++ "9" ""))))))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.union ((_ re.loop 1 2) (re.range "0" "9"))(re.union (re.++ (re.range "1" "1")(re.++ (re.range "0" "9") (re.range "0" "9")))(re.union (re.++ (re.range "2" "2")(re.++ (re.range "0" "4") (re.range "0" "9"))) (re.++ (str.to_re (str.++ "2" (str.++ "5" ""))) (re.range "0" "5")))))(re.++ (re.range "." ".")(re.++ (re.union ((_ re.loop 1 2) (re.range "0" "9"))(re.union (re.++ (re.range "1" "1")(re.++ (re.range "0" "9") (re.range "0" "9")))(re.union (re.++ (re.range "2" "2")(re.++ (re.range "0" "4") (re.range "0" "9"))) (re.++ (str.to_re (str.++ "2" (str.++ "5" ""))) (re.range "0" "5")))))(re.++ (re.range "." ".")(re.++ (re.union ((_ re.loop 1 2) (re.range "0" "9"))(re.union (re.++ (re.range "1" "1")(re.++ (re.range "0" "9") (re.range "0" "9")))(re.union (re.++ (re.range "2" "2")(re.++ (re.range "0" "4") (re.range "0" "9"))) (re.++ (str.to_re (str.++ "2" (str.++ "5" ""))) (re.range "0" "5")))))(re.++ (re.range "." ".")(re.++ (re.union ((_ re.loop 1 2) (re.range "0" "9"))(re.union (re.++ (re.range "1" "1")(re.++ (re.range "0" "9") (re.range "0" "9")))(re.union (re.++ (re.range "2" "2")(re.++ (re.range "0" "4") (re.range "0" "9"))) (re.++ (str.to_re (str.++ "2" (str.++ "5" ""))) (re.range "0" "5"))))) (str.to_re "")))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "-" (str.++ "6" (str.++ "3" ""))))

(define-fun Witness2 () String (str.++ "-" (str.++ "6" (str.++ "4" ""))))

(assert (= regexA (re.union (re.++ (str.to_re "")(re.++ (re.range "0" "9") (str.to_re "")))(re.union (re.++ (str.to_re "")(re.++ (re.range "1" "6")(re.++ (re.range "0" "3") (str.to_re ""))))(re.union (re.++ (str.to_re "")(re.++ (str.to_re (str.++ "6" (str.++ "4" ""))) (str.to_re "")))(re.union (re.++ (re.range "-" "-")(re.++ (re.range "1" "9") (str.to_re "")))(re.union (re.++ (str.to_re "")(re.++ (re.range "-" "-")(re.++ (re.range "1" "6")(re.++ (re.range "0" "3") (str.to_re ""))))) (re.++ (str.to_re "")(re.++ (str.to_re (str.++ "-" (str.++ "6" (str.++ "4" "")))) (str.to_re ""))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ ":" (str.++ "[" (str.++ "." (str.++ "A" (str.++ "s" (str.++ "p" (str.++ "x" ""))))))))

(define-fun Witness2 () String (str.++ "f" (str.++ "0" (str.++ ";" (str.++ "\u{b6}" (str.++ "." (str.++ "A" (str.++ "S" (str.++ "p" (str.++ "X" ""))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.union (re.++ (re.union (re.range "A" "Z") (re.range "a" "z")) (re.* (re.union (re.range "\u{00}" "\u{09}") (re.range "\u{0b}" "\u{ff}"))))(re.union (re.++ (re.range "1" "9") (re.* (re.union (re.range "\u{00}" "\u{09}") (re.range "\u{0b}" "\u{ff}")))) (re.++ (re.union (re.range "." "/") (re.range ":" ":")) (re.* (re.union (re.range "\u{00}" "\u{09}") (re.range "\u{0b}" "\u{ff}"))))))(re.++ (re.range "." ".")(re.++ (re.++ (re.union (re.range "A" "A") (re.range "a" "a"))(re.++ (re.union (re.range "S" "S") (re.range "s" "s"))(re.++ (re.union (re.range "P" "P") (re.range "p" "p")) (re.union (re.range "X" "X") (re.range "x" "x"))))) (str.to_re "")))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "4" ""))

(define-fun Witness2 () String (str.++ "9" (str.++ "7" (str.++ "9" (str.++ "1" "")))))

(assert (= regexA (re.union (re.++ (str.to_re "")(re.++ (re.* (re.range "0" "9"))(re.++ (re.+ (re.range "1" "9")) (str.to_re "")))) (re.++ (str.to_re "")(re.++ (re.+ (re.range "1" "9"))(re.++ (re.* (re.range "0" "9")) (str.to_re "")))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "<" (str.++ "7" (str.++ "\u{e2}" (str.++ ">" (str.++ "\u{e5}" (str.++ "\u{a4}" (str.++ "\u{ad}" (str.++ "p" (str.++ "<" (str.++ "9" (str.++ ">" ""))))))))))))

(define-fun Witness2 () String (str.++ "<" (str.++ "\u{d0}" (str.++ ">" (str.++ "<" (str.++ "\u{aa}" (str.++ ">" "")))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.range "<" "<")(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))(re.++ (re.range ">" ">")(re.++ (re.* (re.union (re.range "\u{00}" "\u{09}") (re.range "\u{0b}" "\u{ff}")))(re.++ (re.union (re.range "/" "/") (re.range "<" "<"))(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))(re.++ (re.range ">" ">") (str.to_re "")))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "3" ""))

(define-fun Witness2 () String (str.++ "5" ""))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.range "1" "5") (str.to_re "")))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "0" (str.++ "." (str.++ "4" ""))))

(define-fun Witness2 () String "")

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.union (re.++ (re.range "1" "9")(re.++ ((_ re.loop 0 2) (re.range "0" "9"))(re.++ (re.* (re.++ (re.range "," ",") ((_ re.loop 3 3) (re.range "0" "9")))) (re.opt (re.++ (re.range "." ".") ((_ re.loop 0 2) (re.range "0" "9")))))))(re.union (re.++ (re.range "1" "9")(re.++ (re.* (re.range "0" "9")) (re.opt (re.++ (re.range "." ".") ((_ re.loop 0 2) (re.range "0" "9"))))))(re.union (re.++ (re.range "0" "0") (re.opt (re.++ (re.range "." ".") ((_ re.loop 0 2) (re.range "0" "9"))))) (re.opt (re.++ (re.range "." ".") ((_ re.loop 1 2) (re.range "0" "9"))))))) (str.to_re "")))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "4" (str.++ "2" (str.++ "8" (str.++ "3" (str.++ "3" (str.++ "8" (str.++ "8" (str.++ "8" (str.++ "9" (str.++ "9" (str.++ "8" (str.++ "9" (str.++ "9" (str.++ "8" (str.++ "9" ""))))))))))))))))

(define-fun Witness2 () String (str.++ "4" (str.++ "9" (str.++ "6" (str.++ "1" (str.++ "4" (str.++ "5" (str.++ "1" (str.++ "8" (str.++ "6" (str.++ "9" (str.++ "8" (str.++ "0" (str.++ "9" (str.++ "3" (str.++ "3" ""))))))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.range "4" "4")(re.++ ((_ re.loop 12 15) (re.range "0" "9")) (str.to_re ""))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "7" (str.++ "9" (str.++ "2" (str.++ "." (str.++ "2" (str.++ "0" (str.++ "2" (str.++ "1" (str.++ "8" (str.++ "8" (str.++ "8" (str.++ "." (str.++ "0" (str.++ "4" (str.++ "8" (str.++ "5" (str.++ "8" (str.++ "1" (str.++ "9" (str.++ "." (str.++ "2" (str.++ "0" (str.++ "8" (str.++ "4" (str.++ "8" ""))))))))))))))))))))))))))

(define-fun Witness2 () String (str.++ "2" (str.++ "9" (str.++ "9" (str.++ "." (str.++ "2" (str.++ "9" (str.++ "4" (str.++ "6" (str.++ "5" (str.++ "9" (str.++ "." (str.++ "1" (str.++ "8" (str.++ "8" (str.++ "0" (str.++ "." (str.++ "1" (str.++ "0" (str.++ "1" (str.++ "8" (str.++ "8" (str.++ "8" (str.++ "2" (str.++ "8" "")))))))))))))))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.++ (re.++ (re.* (re.range "0" "2"))(re.++ (re.+ (re.range "0" "9")) (re.+ (re.range "0" "9"))))(re.++ (re.range "." ".")(re.++ (re.++ (re.* (re.range "0" "2"))(re.++ (re.+ (re.range "0" "9")) (re.+ (re.range "0" "9"))))(re.++ (re.range "." ".")(re.++ (re.++ (re.* (re.range "0" "2"))(re.++ (re.+ (re.range "0" "9")) (re.+ (re.range "0" "9"))))(re.++ (re.range "." ".") (re.++ (re.* (re.range "0" "2"))(re.++ (re.+ (re.range "0" "9")) (re.+ (re.range "0" "9")))))))))) (str.to_re "")))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "1" (str.++ "3" (str.++ "8" (str.++ ")" (str.++ "\u{a0}" (str.++ " " (str.++ "\u{85}" (str.++ "\u{85}" (str.++ "9" (str.++ "4" (str.++ "1" (str.++ "-" (str.++ "9" (str.++ "9" (str.++ "9" (str.++ "8" "")))))))))))))))))

(define-fun Witness2 () String (str.++ "9" (str.++ "6" (str.++ "0" (str.++ ")" (str.++ "9" (str.++ "2" (str.++ "8" (str.++ "\u{0d}" (str.++ "\u{85}" (str.++ "5" (str.++ "9" (str.++ "9" (str.++ "9" ""))))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.opt (re.range "(" "("))(re.++ ((_ re.loop 3 3) (re.range "0" "9"))(re.++ (re.opt (re.range ")" ")"))(re.++ (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "-" ".")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))))(re.++ ((_ re.loop 3 3) (re.range "0" "9"))(re.++ (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "-" ".")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))))(re.++ ((_ re.loop 4 4) (re.range "0" "9")) (str.to_re "")))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "8" (str.++ "0" (str.++ "8" (str.++ "9" (str.++ "1" ""))))))

(define-fun Witness2 () String (str.++ "1" (str.++ "8" (str.++ "9" (str.++ "9" (str.++ "7" ""))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.++ (re.union (re.range "0" "2")(re.union (re.range "4" "4") (re.range "6" "8"))) ((_ re.loop 4 4) (re.range "0" "9"))) (str.to_re "")))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "X" (str.++ "\u{a0}" (str.++ "\u{a0}" (str.++ "\u{85}" "")))))

(define-fun Witness2 () String "")

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.union (re.++ (re.union (re.range "A" "Z") (re.range "a" "z")) (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "&" "'")(re.union (re.range "-" ".")(re.union (re.range ";" ";")(re.union (re.range "A" "Z")(re.union (re.range "a" "z")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))))))))) (str.to_re "")) (str.to_re "")))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "Y" (str.++ "9" (str.++ "Z" (str.++ "1" (str.++ "G" (str.++ "9" "")))))))

(define-fun Witness2 () String (str.++ "N" (str.++ "9" (str.++ "H" (str.++ "2" (str.++ "X" (str.++ "4" "")))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.++ (re.union (re.range "A" "C")(re.union (re.range "E" "E")(re.union (re.range "G" "H")(re.union (re.range "J" "N")(re.union (re.range "P" "P")(re.union (re.range "R" "T")(re.union (re.range "V" "V") (re.range "X" "Y"))))))))(re.++ (re.range "0" "9") (re.union (re.range "A" "C")(re.union (re.range "E" "E")(re.union (re.range "G" "H")(re.union (re.range "J" "N")(re.union (re.range "P" "P")(re.union (re.range "R" "T") (re.range "V" "Z")))))))))(re.++ (re.opt (re.range " " " "))(re.++ (re.++ (re.range "0" "9")(re.++ (re.union (re.range "A" "C")(re.union (re.range "E" "E")(re.union (re.range "G" "H")(re.union (re.range "J" "N")(re.union (re.range "P" "P")(re.union (re.range "R" "T") (re.range "V" "Z"))))))) (re.range "0" "9"))) (str.to_re "")))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String "")

(define-fun Witness2 () String "")

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.* (re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))(re.++ (re.* (re.++ (re.union (re.range "." ".") (re.range "_" "_")) (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))))(re.++ (re.range "@" "@")(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))(re.++ (re.* (re.++ (re.union (re.range "." ".") (re.range "_" "_")) (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))))(re.++ (re.range "." ".")(re.++ ((_ re.loop 2 3) (re.union (re.range "A" "Z") (re.range "a" "z"))) (re.opt (re.range ";" ";")))))))))) (str.to_re "")))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "$" (str.++ "0" (str.++ "." (str.++ "8" (str.++ "3" ""))))))

(define-fun Witness2 () String (str.++ "$" (str.++ "8" (str.++ "," (str.++ "9" (str.++ "1" (str.++ "1" (str.++ "," (str.++ "9" (str.++ "9" (str.++ "9" "")))))))))))

(assert (= regexA (re.union (re.++ (str.to_re "")(re.++ (re.range "$" "$")(re.++ (re.union (re.range "0" "0")(re.union (re.++ (re.range "1" "9") ((_ re.loop 1 2) (re.range "0" "9")))(re.union (re.++ (re.range "1" "9")(re.++ (re.opt (re.range "0" "9"))(re.++ (re.range "," ",") ((_ re.loop 3 3) (re.range "0" "9")))))(re.union (re.++ (re.range "1" "9")(re.++ ((_ re.loop 2 2) (re.range "0" "9"))(re.++ (re.range "," ",") ((_ re.loop 3 3) (re.range "0" "9"))))) (re.++ (re.range "1" "9")(re.++ (re.range "," ",")(re.++ ((_ re.loop 3 3) (re.range "0" "9"))(re.++ (re.range "," ",") ((_ re.loop 3 3) (re.range "0" "9"))))))))))(re.++ (re.opt (re.++ (re.range "." ".") ((_ re.loop 1 2) (re.range "0" "9")))) (str.to_re "")))))(re.union (re.++ (str.to_re "")(re.++ (str.to_re (str.++ "(" (str.++ "$" "")))(re.++ (re.union (re.range "0" "0")(re.union (re.++ (re.range "1" "9") ((_ re.loop 1 2) (re.range "0" "9")))(re.union (re.++ (re.range "1" "9")(re.++ (re.opt (re.range "0" "9"))(re.++ (re.range "," ",") ((_ re.loop 3 3) (re.range "0" "9")))))(re.union (re.++ (re.range "1" "9")(re.++ ((_ re.loop 2 2) (re.range "0" "9"))(re.++ (re.range "," ",") ((_ re.loop 3 3) (re.range "0" "9"))))) (re.++ (re.range "1" "9")(re.++ (re.range "," ",")(re.++ ((_ re.loop 3 3) (re.range "0" "9"))(re.++ (re.range "," ",") ((_ re.loop 3 3) (re.range "0" "9"))))))))))(re.++ (re.opt (re.++ (re.range "." ".") ((_ re.loop 1 2) (re.range "0" "9"))))(re.++ (re.range ")" ")") (str.to_re "")))))) (re.++ (str.to_re "")(re.++ (re.opt (re.range "$" "$"))(re.++ (re.opt (re.range "-" "-"))(re.++ (re.union (re.range "0" "0") (re.++ (re.range "1" "9") ((_ re.loop 0 6) (re.range "0" "9"))))(re.++ (re.opt (re.++ (re.range "." ".") ((_ re.loop 1 2) (re.range "0" "9")))) (str.to_re ""))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "\u{aa}" (str.++ "s" (str.++ ":" (str.++ "/" (str.++ "/" (str.++ "\u{ee}" (str.++ "\u{fa}" (str.++ "." (str.++ "\u{ef}" (str.++ "\u{ef}" (str.++ "\u{e7}" ""))))))))))))

(define-fun Witness2 () String (str.++ "2" (str.++ "s" (str.++ ":" (str.++ "/" (str.++ "/" (str.++ "." (str.++ "A" (str.++ "\u{d0}" (str.++ "\u{aa}" (str.++ "\u{b5}" "")))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))(re.++ (re.opt (re.range "s" "s"))(re.++ (str.to_re (str.++ ":" (str.++ "/" (str.++ "/" ""))))(re.++ (re.opt (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))))(re.++ (re.opt (re.range "." "."))(re.++ (re.opt (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))))(re.++ (re.range "." ".")(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))) (str.to_re ""))))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "9" ""))

(define-fun Witness2 () String (str.++ "8" (str.++ "8" (str.++ "8" (str.++ "6" (str.++ "8" (str.++ "4" (str.++ "." (str.++ "5" (str.++ "9" (str.++ "9" "")))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.union (re.++ (re.range "1" "9") (re.* (re.range "0" "9")))(re.union (re.++ (re.union (re.range "0" "0") (re.++ (re.range "1" "9") (re.* (re.range "0" "9"))))(re.++ (re.range "." ".") (re.+ (re.range "0" "9")))) (re.++ (re.* (re.++ (re.union (re.++ (re.range "1" "9") (re.* (re.range "0" "9"))) (re.++ (re.union (re.range "0" "0") (re.++ (re.range "1" "9") (re.* (re.range "0" "9"))))(re.++ (re.range "." ".") (re.+ (re.range "0" "9"))))) (re.range ":" ":"))) (re.union (re.++ (re.range "1" "9") (re.* (re.range "0" "9"))) (re.++ (re.union (re.range "0" "0") (re.++ (re.range "1" "9") (re.* (re.range "0" "9"))))(re.++ (re.range "." ".") (re.+ (re.range "0" "9")))))))) (str.to_re "")))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "9" (str.++ "R" (str.++ " " (str.++ "9" (str.++ "3" (str.++ "8" (str.++ "1" (str.++ "7" (str.++ "5" (str.++ "9" (str.++ "8" (str.++ "9" "")))))))))))))

(define-fun Witness2 () String (str.++ "F" (str.++ "R" (str.++ "9" (str.++ "9" (str.++ " " (str.++ "8" (str.++ "6" (str.++ "0" (str.++ "4" (str.++ "5" (str.++ "3" (str.++ "6" (str.++ "8" (str.++ "9" "")))))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.opt (str.to_re (str.++ "F" (str.++ "R" ""))))(re.++ ((_ re.loop 2 2) (re.union (re.range "0" "9") (re.range "A" "Z")))(re.++ (re.range " " " ")(re.++ ((_ re.loop 9 9) (re.range "0" "9")) (str.to_re ""))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "5" (str.++ ":" (str.++ "1" (str.++ "6" "")))))

(define-fun Witness2 () String (str.++ "2" (str.++ "0" (str.++ ":" (str.++ "0" (str.++ "8" ""))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.union (re.++ (re.opt (re.range "0" "1")) (re.range "0" "9")) (re.++ (re.range "2" "2") (re.range "0" "3")))(re.++ (re.range ":" ":")(re.++ (re.++ (re.range "0" "5") (re.range "0" "9")) (str.to_re "")))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "Z" (str.++ "W" (str.++ "Z" ""))))

(define-fun Witness2 () String (str.++ "U" (str.++ "\u{a0}" "")))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.++ (re.+ (re.range "A" "Z")) (re.* (re.union (re.range "A" "Z") (re.range "a" "z"))))(re.++ (re.opt (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "-" "-")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))))(re.++ (re.opt (re.++ (re.+ (re.range "A" "Z")) (re.* (re.union (re.range "A" "Z") (re.range "a" "z")))))(re.++ (re.opt (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "-" "-")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))))(re.++ (re.opt (re.++ (re.+ (re.range "A" "Z")) (re.* (re.union (re.range "A" "Z") (re.range "a" "z"))))) (str.to_re "")))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "3" (str.++ "0" (str.++ "/" (str.++ "2" (str.++ "1" (str.++ "8" (str.++ "2" ""))))))))

(define-fun Witness2 () String (str.++ "1" (str.++ "9" (str.++ "/" (str.++ "2" (str.++ "8" (str.++ "7" (str.++ "1" ""))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.union (re.++ (re.range "1" "4") (re.range "0" "9"))(re.union (re.++ (re.range "0" "0") (re.range "1" "9")) (re.++ (re.range "5" "5") (re.range "0" "2"))))(re.++ (re.range "/" "/")(re.++ (re.range "1" "2")(re.++ ((_ re.loop 3 3) (re.range "0" "9")) (str.to_re ""))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "1" (str.++ "9" (str.++ "1" (str.++ "3" (str.++ "-" (str.++ "0" (str.++ "2" (str.++ "-" (str.++ "2" (str.++ "9" (str.++ " " (str.++ "2" (str.++ "0" (str.++ ":" (str.++ "5" (str.++ "8" (str.++ ":" (str.++ "3" (str.++ "8" ""))))))))))))))))))))

(define-fun Witness2 () String (str.++ "1" (str.++ "9" (str.++ "9" (str.++ "8" (str.++ "-" (str.++ "1" (str.++ "1" (str.++ "-" (str.++ "2" (str.++ "0" (str.++ " " (str.++ "1" (str.++ "7" (str.++ ":" (str.++ "3" (str.++ "7" (str.++ ":" (str.++ "2" (str.++ "0" ""))))))))))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.union (re.++ (str.to_re (str.++ "1" (str.++ "9" ""))) ((_ re.loop 2 2) (re.range "0" "9"))) (re.++ (re.range "2" "9") ((_ re.loop 3 3) (re.range "0" "9"))))(re.++ (re.range "-" "-")(re.++ (re.union (re.++ (re.union (re.++ (re.range "0" "0") (re.union (re.range "1" "1")(re.union (re.range "3" "3")(re.union (re.range "5" "5") (re.range "7" "8")))))(re.union (str.to_re (str.++ "1" (str.++ "0" ""))) (str.to_re (str.++ "1" (str.++ "2" "")))))(re.++ (re.range "-" "-") (re.union (re.++ (re.range "0" "0") (re.range "1" "9"))(re.union (re.++ (re.range "1" "1") (re.range "0" "9"))(re.union (re.++ (re.range "2" "2") (re.range "0" "9")) (re.++ (re.range "3" "3") (re.range "0" "1")))))))(re.union (re.++ (re.union (re.++ (re.range "0" "0") (re.union (re.range "4" "4")(re.union (re.range "6" "6") (re.range "9" "9")))) (str.to_re (str.++ "1" (str.++ "1" ""))))(re.++ (re.range "-" "-") (re.union (re.++ (re.range "0" "0") (re.range "1" "9"))(re.union (re.++ (re.range "1" "1") (re.range "0" "9"))(re.union (re.++ (re.range "2" "2") (re.range "0" "9")) (str.to_re (str.++ "3" (str.++ "0" "")))))))) (re.++ (str.to_re (str.++ "0" (str.++ "2" "")))(re.++ (re.range "-" "-") (re.union (re.++ (re.range "0" "0") (re.range "1" "9"))(re.union (re.++ (re.range "1" "1") (re.range "0" "9")) (re.++ (re.range "2" "2") (re.range "0" "9"))))))))(re.++ (re.range " " " ")(re.++ (re.union (re.++ (re.range "0" "0") (re.range "0" "9"))(re.union (re.++ (re.range "1" "1") (re.range "0" "9")) (re.++ (re.range "2" "2") (re.range "0" "3"))))(re.++ ((_ re.loop 2 2) (re.++ (re.range ":" ":")(re.++ (re.range "0" "5") (re.range "0" "9")))) (str.to_re ""))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "9" (str.++ "9" (str.++ "9" (str.++ "9" (str.++ "-" (str.++ "1" (str.++ "2" (str.++ "-" (str.++ "3" (str.++ "1" "")))))))))))

(define-fun Witness2 () String (str.++ "5" (str.++ "8" (str.++ "9" (str.++ "8" (str.++ "-" (str.++ "1" (str.++ "1" (str.++ "-" (str.++ "2" (str.++ "9" "")))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ ((_ re.loop 4 4) (re.range "0" "9"))(re.++ (re.range "-" "-")(re.++ (re.union (re.++ (re.range "0" "0") (re.range "1" "9")) (re.++ (re.range "1" "1") (re.range "0" "2")))(re.++ (re.range "-" "-")(re.++ (re.union (re.++ (re.range "0" "0") (re.range "1" "9"))(re.union (re.++ (re.range "1" "2") (re.range "0" "9")) (re.++ (re.range "3" "3") (re.range "0" "1")))) (str.to_re "")))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "Z" ""))

(define-fun Witness2 () String (str.++ "Z" ""))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.range "A" "Z") (str.to_re "")))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "S" (str.++ "6" (str.++ "K" (str.++ "9" (str.++ "N" (str.++ "4" "")))))))

(define-fun Witness2 () String (str.++ "X" (str.++ "8" (str.++ "Y" (str.++ "9" (str.++ "F" (str.++ "8" "")))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.union (re.range "A" "C")(re.union (re.range "E" "E")(re.union (re.range "G" "H")(re.union (re.range "J" "N")(re.union (re.range "P" "P")(re.union (re.range "R" "T")(re.union (re.range "V" "V") (re.range "X" "Y"))))))))(re.++ (re.range "0" "9")(re.++ (re.range "A" "Z")(re.++ (re.* (re.range " " " "))(re.++ (re.range "0" "9")(re.++ (re.range "A" "Z")(re.++ (re.range "0" "9") (str.to_re "")))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "1" (str.++ "8" (str.++ "-" (str.++ "f" (str.++ "e" (str.++ "b" (str.++ " " (str.++ "5" (str.++ "4" (str.++ "1" (str.++ "1" ""))))))))))))

(define-fun Witness2 () String (str.++ "j" (str.++ "u" (str.++ "n" (str.++ "e" (str.++ " " (str.++ "2" (str.++ "8" (str.++ "," (str.++ " " (str.++ "1" (str.++ "7" (str.++ "9" (str.++ "6" ""))))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.union (re.++ (re.union (re.++ (re.union (re.++ (re.union (re.++ (str.to_re (str.++ "j" (str.++ "a" (str.++ "n" "")))) (re.opt (str.to_re (str.++ "u" (str.++ "a" (str.++ "r" (str.++ "y" "")))))))(re.union (re.++ (str.to_re (str.++ "m" (str.++ "a" (str.++ "r" "")))) (re.opt (str.to_re (str.++ "c" (str.++ "h" "")))))(re.union (str.to_re (str.++ "m" (str.++ "a" (str.++ "y" ""))))(re.union (re.++ (str.to_re (str.++ "j" (str.++ "u" (str.++ "l" "")))) (re.opt (re.range "y" "y")))(re.union (re.++ (str.to_re (str.++ "a" (str.++ "u" (str.++ "g" "")))) (re.opt (str.to_re (str.++ "u" (str.++ "s" (str.++ "t" ""))))))(re.union (re.++ (str.to_re (str.++ "o" (str.++ "c" (str.++ "t" "")))) (re.opt (str.to_re (str.++ "o" (str.++ "b" (str.++ "e" (str.++ "r" ""))))))) (re.++ (str.to_re (str.++ "d" (str.++ "e" (str.++ "c" "")))) (re.opt (str.to_re (str.++ "e" (str.++ "m" (str.++ "b" (str.++ "e" (str.++ "r" ""))))))))))))))(re.++ (re.range " " " ") (re.union (re.++ (re.range "3" "3") (re.range "0" "1")) (str.to_re (str.++ "2" (str.++ "9" ""))))))(re.union (re.++ (re.union (re.++ (str.to_re (str.++ "a" (str.++ "p" (str.++ "r" "")))) (re.opt (str.to_re (str.++ "i" (str.++ "l" "")))))(re.union (re.++ (str.to_re (str.++ "j" (str.++ "u" (str.++ "n" "")))) (re.opt (re.range "e" "e")))(re.union (re.++ (str.to_re (str.++ "s" (str.++ "e" (str.++ "p" "")))) (re.opt (str.to_re (str.++ "t" (str.++ "e" (str.++ "m" (str.++ "b" (str.++ "e" (str.++ "r" ""))))))))) (re.++ (str.to_re (str.++ "n" (str.++ "o" (str.++ "v" "")))) (re.opt (str.to_re (str.++ "e" (str.++ "m" (str.++ "b" (str.++ "e" (str.++ "r" "")))))))))))(re.++ (re.range " " " ") (re.union (str.to_re (str.++ "3" (str.++ "0" ""))) (str.to_re (str.++ "2" (str.++ "9" "")))))) (re.++ (re.union (re.++ (str.to_re (str.++ "j" (str.++ "a" (str.++ "n" "")))) (re.opt (str.to_re (str.++ "u" (str.++ "a" (str.++ "r" (str.++ "y" ""))))))) (re.union (re.++ (str.to_re (str.++ "f" (str.++ "e" (str.++ "b" "")))) (re.opt (str.to_re (str.++ "r" (str.++ "u" (str.++ "a" (str.++ "r" (str.++ "y" ""))))))))(re.union (re.++ (str.to_re (str.++ "m" (str.++ "a" (str.++ "r" "")))) (re.opt (str.to_re (str.++ "c" (str.++ "h" "")))))(re.union (re.++ (str.to_re (str.++ "a" (str.++ "p" (str.++ "r" "")))) (re.opt (str.to_re (str.++ "i" (str.++ "l" "")))))(re.union (str.to_re (str.++ "m" (str.++ "a" (str.++ "y" ""))))(re.union (re.++ (str.to_re (str.++ "j" (str.++ "u" (str.++ "n" "")))) (re.opt (re.range "e" "e")))(re.union (re.++ (str.to_re (str.++ "j" (str.++ "u" (str.++ "l" "")))) (re.opt (re.range "y" "y")))(re.union (re.++ (str.to_re (str.++ "a" (str.++ "u" (str.++ "g" "")))) (re.opt (str.to_re (str.++ "u" (str.++ "s" (str.++ "t" ""))))))(re.union (re.++ (str.to_re (str.++ "s" (str.++ "e" (str.++ "p" "")))) (re.opt (str.to_re (str.++ "t" (str.++ "e" (str.++ "m" (str.++ "b" (str.++ "e" (str.++ "r" "")))))))))(re.union (re.++ (str.to_re (str.++ "o" (str.++ "c" (str.++ "t" "")))) (re.opt (str.to_re (str.++ "o" (str.++ "b" (str.++ "e" (str.++ "r" "")))))))(re.union (re.++ (str.to_re (str.++ "n" (str.++ "o" (str.++ "v" "")))) (re.opt (str.to_re (str.++ "e" (str.++ "m" (str.++ "b" (str.++ "e" (str.++ "r" "")))))))) (re.++ (str.to_re (str.++ "d" (str.++ "e" (str.++ "c" "")))) (re.opt (str.to_re (str.++ "e" (str.++ "m" (str.++ "b" (str.++ "e" (str.++ "r" "")))))))))))))))))))(re.++ (re.range " " " ") (re.union (re.++ (re.range "2" "2") (re.range "0" "8"))(re.union (re.++ (re.range "1" "1") (re.range "0" "9")) (re.++ (re.opt (re.range "0" "0")) (re.range "1" "9"))))))))(re.++ (re.opt (re.range "," ",")) (re.range " " " ")))(re.union (re.++ (re.union (re.++ (re.union (re.++ (re.range "1" "1") (re.union (re.range "0" "0") (re.range "2" "2"))) (re.++ (re.opt (re.range "0" "0")) (re.union (re.range "1" "1")(re.union (re.range "3" "3")(re.union (re.range "5" "5") (re.range "7" "8"))))))(re.++ (re.range "-" "/") (re.union (re.++ (re.range "3" "3") (re.range "0" "1")) (str.to_re (str.++ "2" (str.++ "9" ""))))))(re.union (re.++ (re.union (str.to_re (str.++ "1" (str.++ "1" ""))) (re.++ (re.opt (re.range "0" "0")) (re.union (re.range "4" "4")(re.union (re.range "6" "6") (re.range "9" "9")))))(re.++ (re.range "-" "/") (re.union (str.to_re (str.++ "3" (str.++ "0" ""))) (str.to_re (str.++ "2" (str.++ "9" "")))))) (re.++ (re.union (re.++ (re.range "1" "1") (re.range "0" "2")) (re.++ (re.opt (re.range "0" "0")) (re.range "1" "9")))(re.++ (re.range "-" "/") (re.union (re.++ (re.range "2" "2") (re.range "0" "8"))(re.union (re.++ (re.range "1" "1") (re.range "0" "9")) (re.++ (re.opt (re.range "0" "0")) (re.range "1" "9")))))))) (re.range "-" "/"))(re.union (re.++ (re.union (re.++ (re.union (re.++ (re.range "3" "3") (re.range "0" "1")) (str.to_re (str.++ "2" (str.++ "9" ""))))(re.++ (re.union (re.range " " " ") (re.range "-" "/")) (re.union (re.++ (str.to_re (str.++ "j" (str.++ "a" (str.++ "n" "")))) (re.opt (str.to_re (str.++ "u" (str.++ "a" (str.++ "r" (str.++ "y" "")))))))(re.union (re.++ (str.to_re (str.++ "m" (str.++ "a" (str.++ "r" "")))) (re.opt (str.to_re (str.++ "c" (str.++ "h" "")))))(re.union (str.to_re (str.++ "m" (str.++ "a" (str.++ "y" ""))))(re.union (re.++ (str.to_re (str.++ "j" (str.++ "u" (str.++ "l" "")))) (re.opt (re.range "y" "y")))(re.union (re.++ (str.to_re (str.++ "a" (str.++ "u" (str.++ "g" "")))) (re.opt (str.to_re (str.++ "u" (str.++ "s" (str.++ "t" ""))))))(re.union (re.++ (str.to_re (str.++ "o" (str.++ "c" (str.++ "t" "")))) (re.opt (str.to_re (str.++ "o" (str.++ "b" (str.++ "e" (str.++ "r" ""))))))) (re.++ (str.to_re (str.++ "d" (str.++ "e" (str.++ "c" "")))) (re.opt (str.to_re (str.++ "e" (str.++ "m" (str.++ "b" (str.++ "e" (str.++ "r" ""))))))))))))))))(re.union (re.++ (re.union (str.to_re (str.++ "3" (str.++ "0" ""))) (str.to_re (str.++ "2" (str.++ "9" ""))))(re.++ (re.union (re.range " " " ") (re.range "-" "/")) (re.union (re.++ (str.to_re (str.++ "a" (str.++ "p" (str.++ "r" "")))) (re.opt (str.to_re (str.++ "i" (str.++ "l" "")))))(re.union (re.++ (str.to_re (str.++ "j" (str.++ "u" (str.++ "n" "")))) (re.opt (re.range "e" "e")))(re.union (re.++ (str.to_re (str.++ "s" (str.++ "e" (str.++ "p" "")))) (re.opt (str.to_re (str.++ "t" (str.++ "e" (str.++ "m" (str.++ "b" (str.++ "e" (str.++ "r" ""))))))))) (re.++ (str.to_re (str.++ "n" (str.++ "o" (str.++ "v" "")))) (re.opt (str.to_re (str.++ "e" (str.++ "m" (str.++ "b" (str.++ "e" (str.++ "r" ""))))))))))))) (re.++ (re.union (re.++ (re.range "2" "2") (re.range "0" "8"))(re.union (re.++ (re.range "1" "1") (re.range "0" "9")) (re.++ (re.opt (re.range "0" "0")) (re.range "1" "9"))))(re.++ (re.union (re.range " " " ") (re.range "-" "/")) (re.union (re.++ (str.to_re (str.++ "j" (str.++ "a" (str.++ "n" "")))) (re.opt (str.to_re (str.++ "u" (str.++ "a" (str.++ "r" (str.++ "y" ""))))))) (re.union (re.++ (str.to_re (str.++ "f" (str.++ "e" (str.++ "b" "")))) (re.opt (str.to_re (str.++ "r" (str.++ "u" (str.++ "a" (str.++ "r" (str.++ "y" ""))))))))(re.union (re.++ (str.to_re (str.++ "m" (str.++ "a" (str.++ "r" "")))) (re.opt (str.to_re (str.++ "c" (str.++ "h" "")))))(re.union (re.++ (str.to_re (str.++ "a" (str.++ "p" (str.++ "r" "")))) (re.opt (str.to_re (str.++ "i" (str.++ "l" "")))))(re.union (str.to_re (str.++ "m" (str.++ "a" (str.++ "y" ""))))(re.union (re.++ (str.to_re (str.++ "j" (str.++ "u" (str.++ "n" "")))) (re.opt (re.range "e" "e")))(re.union (re.++ (str.to_re (str.++ "j" (str.++ "u" (str.++ "l" "")))) (re.opt (re.range "y" "y")))(re.union (re.++ (str.to_re (str.++ "a" (str.++ "u" (str.++ "g" "")))) (re.opt (str.to_re (str.++ "u" (str.++ "s" (str.++ "t" ""))))))(re.union (re.++ (str.to_re (str.++ "s" (str.++ "e" (str.++ "p" "")))) (re.opt (str.to_re (str.++ "t" (str.++ "e" (str.++ "m" (str.++ "b" (str.++ "e" (str.++ "r" "")))))))))(re.union (re.++ (str.to_re (str.++ "o" (str.++ "c" (str.++ "t" "")))) (re.opt (str.to_re (str.++ "o" (str.++ "b" (str.++ "e" (str.++ "r" "")))))))(re.union (re.++ (str.to_re (str.++ "n" (str.++ "o" (str.++ "v" "")))) (re.opt (str.to_re (str.++ "e" (str.++ "m" (str.++ "b" (str.++ "e" (str.++ "r" "")))))))) (re.++ (str.to_re (str.++ "d" (str.++ "e" (str.++ "c" "")))) (re.opt (str.to_re (str.++ "e" (str.++ "m" (str.++ "b" (str.++ "e" (str.++ "r" ""))))))))))))))))))))))) (re.union (re.range " " " ") (re.range "-" "/"))) (re.union (re.++ (re.union (re.++ (re.range "3" "3") (re.range "0" "1")) (str.to_re (str.++ "2" (str.++ "9" "")))) (re.union (str.to_re (str.++ "j" (str.++ "a" (str.++ "n" ""))))(re.union (str.to_re (str.++ "m" (str.++ "a" (str.++ "r" ""))))(re.union (str.to_re (str.++ "m" (str.++ "a" (str.++ "y" ""))))(re.union (str.to_re (str.++ "j" (str.++ "u" (str.++ "l" ""))))(re.union (str.to_re (str.++ "a" (str.++ "u" (str.++ "g" ""))))(re.union (str.to_re (str.++ "o" (str.++ "c" (str.++ "t" "")))) (str.to_re (str.++ "d" (str.++ "e" (str.++ "c" "")))))))))))(re.union (re.++ (re.union (str.to_re (str.++ "3" (str.++ "0" ""))) (str.to_re (str.++ "2" (str.++ "9" "")))) (re.union (str.to_re (str.++ "a" (str.++ "p" (str.++ "r" ""))))(re.union (str.to_re (str.++ "j" (str.++ "u" (str.++ "n" ""))))(re.union (str.to_re (str.++ "s" (str.++ "e" (str.++ "p" "")))) (str.to_re (str.++ "n" (str.++ "o" (str.++ "v" "")))))))) (re.++ (re.union (re.++ (re.range "2" "2") (re.range "0" "8"))(re.union (re.++ (re.range "1" "1") (re.range "0" "9")) (re.++ (re.range "0" "0") (re.range "1" "9")))) (re.union (str.to_re (str.++ "j" (str.++ "a" (str.++ "n" ""))))(re.union (str.to_re (str.++ "f" (str.++ "e" (str.++ "b" ""))))(re.union (str.to_re (str.++ "m" (str.++ "a" (str.++ "r" ""))))(re.union (str.to_re (str.++ "a" (str.++ "p" (str.++ "r" ""))))(re.union (str.to_re (str.++ "m" (str.++ "a" (str.++ "y" ""))))(re.union (str.to_re (str.++ "j" (str.++ "u" (str.++ "n" ""))))(re.union (str.to_re (str.++ "j" (str.++ "u" (str.++ "l" ""))))(re.union (str.to_re (str.++ "a" (str.++ "u" (str.++ "g" ""))))(re.union (str.to_re (str.++ "s" (str.++ "e" (str.++ "p" ""))))(re.union (str.to_re (str.++ "o" (str.++ "c" (str.++ "t" ""))))(re.union (str.to_re (str.++ "n" (str.++ "o" (str.++ "v" "")))) (str.to_re (str.++ "d" (str.++ "e" (str.++ "c" ""))))))))))))))))))))) (re.union (re.union (re.++ (str.to_re (str.++ "1" (str.++ "7" (str.++ "5" "")))) (re.range "3" "9"))(re.union (re.++ (str.to_re (str.++ "1" (str.++ "7" "")))(re.++ (re.range "6" "9") (re.range "0" "9")))(re.union (re.++ (re.range "1" "1")(re.++ (re.range "8" "9") ((_ re.loop 2 2) (re.range "0" "9")))) (re.++ (re.range "2" "9") ((_ re.loop 3 3) (re.range "0" "9")))))) ((_ re.loop 2 2) (re.range "0" "9"))))(re.union (re.++ (re.union (re.union (re.++ (str.to_re (str.++ "1" (str.++ "7" (str.++ "5" "")))) (re.range "3" "9"))(re.union (re.++ (str.to_re (str.++ "1" (str.++ "7" "")))(re.++ (re.range "6" "9") (re.range "0" "9")))(re.union (re.++ (re.range "1" "1")(re.++ (re.range "8" "9") ((_ re.loop 2 2) (re.range "0" "9")))) (re.++ (re.range "2" "9") ((_ re.loop 3 3) (re.range "0" "9")))))) ((_ re.loop 2 2) (re.range "0" "9"))) (re.union (re.++ (re.union (re.++ (re.range "1" "1") (re.union (re.range "0" "0") (re.range "2" "2"))) (re.++ (re.range "0" "0") (re.union (re.range "1" "1")(re.union (re.range "3" "3")(re.union (re.range "5" "5") (re.range "7" "8")))))) (re.union (re.++ (re.range "3" "3") (re.range "0" "1")) (str.to_re (str.++ "2" (str.++ "9" "")))))(re.union (re.++ (re.union (str.to_re (str.++ "1" (str.++ "1" ""))) (re.++ (re.range "0" "0") (re.union (re.range "4" "4")(re.union (re.range "6" "6") (re.range "9" "9"))))) (re.union (str.to_re (str.++ "3" (str.++ "0" ""))) (str.to_re (str.++ "2" (str.++ "9" ""))))) (re.++ (re.union (re.++ (re.range "1" "1") (re.range "0" "2")) (re.++ (re.range "0" "0") (re.range "1" "9"))) (re.union (re.++ (re.range "2" "2") (re.range "0" "8"))(re.union (re.++ (re.range "1" "1") (re.range "0" "9")) (re.++ (re.range "0" "0") (re.range "1" "9"))))))))(re.union (re.++ (re.union (str.to_re (str.++ "2" (str.++ "9" (str.++ "f" (str.++ "e" (str.++ "b" ""))))))(re.union (re.++ (str.to_re (str.++ "2" (str.++ "9" "")))(re.++ (re.union (re.range " " " ") (re.range "-" "/"))(re.++ (str.to_re (str.++ "f" (str.++ "e" (str.++ "b" ""))))(re.++ (re.opt (str.to_re (str.++ "r" (str.++ "u" (str.++ "a" (str.++ "r" (str.++ "y" ""))))))) (re.union (re.range " " " ") (re.range "-" "/"))))))(re.union (re.++ (str.to_re (str.++ "f" (str.++ "e" (str.++ "b" ""))))(re.++ (re.opt (str.to_re (str.++ "r" (str.++ "u" (str.++ "a" (str.++ "r" (str.++ "y" "")))))))(re.++ (str.to_re (str.++ " " (str.++ "2" (str.++ "9" ""))))(re.++ (re.opt (re.range "," ",")) (re.opt (re.range " " " ")))))) (re.++ (re.opt (re.range "0" "0"))(re.++ (re.range "2" "2")(re.++ (re.range "-" "/")(re.++ (str.to_re (str.++ "2" (str.++ "9" ""))) (re.range "-" "/")))))))) (re.union (re.union (re.++ (re.union (re.++ (re.union (re.range "2" "2")(re.union (re.range "4" "4")(re.union (re.range "6" "6") (re.range "8" "8")))) (re.union (re.range "0" "0")(re.union (re.range "4" "4") (re.range "8" "8")))) (re.++ (re.union (re.range "3" "3")(re.union (re.range "5" "5")(re.union (re.range "7" "7") (re.range "9" "9")))) (re.union (re.range "2" "2") (re.range "6" "6")))) (str.to_re (str.++ "0" (str.++ "0" ""))))(re.union (re.++ (str.to_re (str.++ "1" (str.++ "7" ""))) (re.union (str.to_re (str.++ "5" (str.++ "6" "")))(re.union (re.++ (re.union (re.range "6" "6") (re.range "8" "8")) (re.union (re.range "0" "0")(re.union (re.range "4" "4") (re.range "8" "8")))) (re.++ (re.union (re.range "7" "7") (re.range "9" "9")) (re.union (re.range "2" "2") (re.range "6" "6")))))) (re.++ (re.union (re.++ (re.range "1" "1") (re.range "8" "9")) (re.++ (re.range "2" "9") (re.range "0" "9"))) (re.union (re.++ (re.union (re.range "2" "2")(re.union (re.range "4" "4")(re.union (re.range "6" "6") (re.range "8" "8")))) (re.union (re.range "0" "0")(re.union (re.range "4" "4") (re.range "8" "8"))))(re.union (re.++ (re.union (re.range "1" "1")(re.union (re.range "3" "3")(re.union (re.range "5" "5")(re.union (re.range "7" "7") (re.range "9" "9"))))) (re.union (re.range "2" "2") (re.range "6" "6"))) (re.++ (re.range "0" "0") (re.union (re.range "4" "4") (re.range "8" "8")))))))) (re.union (re.++ (re.union (re.range "0" "0")(re.union (re.range "2" "2")(re.union (re.range "4" "4")(re.union (re.range "6" "6") (re.range "8" "8"))))) (re.union (re.range "0" "0")(re.union (re.range "4" "4") (re.range "8" "8")))) (re.++ (re.union (re.range "1" "1")(re.union (re.range "3" "3")(re.union (re.range "5" "5")(re.union (re.range "7" "7") (re.range "9" "9"))))) (re.union (re.range "2" "2") (re.range "6" "6")))))) (re.++ (re.union (re.union (re.++ (re.union (re.++ (re.union (re.range "2" "2")(re.union (re.range "4" "4")(re.union (re.range "6" "6") (re.range "8" "8")))) (re.union (re.range "0" "0")(re.union (re.range "4" "4") (re.range "8" "8")))) (re.++ (re.union (re.range "3" "3")(re.union (re.range "5" "5")(re.union (re.range "7" "7") (re.range "9" "9")))) (re.union (re.range "2" "2") (re.range "6" "6")))) (str.to_re (str.++ "0" (str.++ "0" ""))))(re.union (re.++ (str.to_re (str.++ "1" (str.++ "7" ""))) (re.union (str.to_re (str.++ "5" (str.++ "6" "")))(re.union (re.++ (re.union (re.range "6" "6") (re.range "8" "8")) (re.union (re.range "0" "0")(re.union (re.range "4" "4") (re.range "8" "8")))) (re.++ (re.union (re.range "7" "7") (re.range "9" "9")) (re.union (re.range "2" "2") (re.range "6" "6")))))) (re.++ (re.union (re.++ (re.range "1" "1") (re.range "8" "9")) (re.++ (re.range "2" "9") (re.range "0" "9"))) (re.union (re.++ (re.union (re.range "2" "2")(re.union (re.range "4" "4")(re.union (re.range "6" "6") (re.range "8" "8")))) (re.union (re.range "0" "0")(re.union (re.range "4" "4") (re.range "8" "8"))))(re.union (re.++ (re.union (re.range "1" "1")(re.union (re.range "3" "3")(re.union (re.range "5" "5")(re.union (re.range "7" "7") (re.range "9" "9"))))) (re.union (re.range "2" "2") (re.range "6" "6"))) (re.++ (re.range "0" "0") (re.union (re.range "4" "4") (re.range "8" "8")))))))) (re.union (re.++ (re.union (re.range "0" "0")(re.union (re.range "2" "2")(re.union (re.range "4" "4")(re.union (re.range "6" "6") (re.range "8" "8"))))) (re.union (re.range "0" "0")(re.union (re.range "4" "4") (re.range "8" "8")))) (re.++ (re.union (re.range "1" "1")(re.union (re.range "3" "3")(re.union (re.range "5" "5")(re.union (re.range "7" "7") (re.range "9" "9"))))) (re.union (re.range "2" "2") (re.range "6" "6"))))) (str.to_re (str.++ "0" (str.++ "2" (str.++ "2" (str.++ "9" ""))))))))) (str.to_re "")))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "3" (str.++ "7" (str.++ "1" (str.++ "3" (str.++ "0" (str.++ "7" (str.++ "3" (str.++ "6" (str.++ "8" (str.++ "3" (str.++ "1" (str.++ "9" (str.++ "3" (str.++ "1" (str.++ "9" ""))))))))))))))))

(define-fun Witness2 () String (str.++ "3" (str.++ "7" (str.++ "9" (str.++ "9" (str.++ "5" (str.++ "4" (str.++ "0" (str.++ "6" (str.++ "8" (str.++ "1" (str.++ "8" (str.++ "9" (str.++ "0" ""))))))))))))))

(assert (= regexA (re.++ (re.++ (str.to_re "")(re.++ (re.range "3" "3") (re.union (re.range "4" "4") (re.range "7" "7")))) (re.union (re.++ ((_ re.loop 11 11) (re.range "0" "9")) (str.to_re "")) (re.++ ((_ re.loop 13 13) (re.range "0" "9")) (str.to_re ""))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "1" (str.++ "8" (str.++ "/" (str.++ "0" (str.++ "1" (str.++ "/" (str.++ "1" (str.++ "7" (str.++ "9" (str.++ "9" "")))))))))))

(define-fun Witness2 () String (str.++ "2" (str.++ "9" (str.++ "/" (str.++ "0" (str.++ "2" (str.++ "/" (str.++ "8" (str.++ "8" (str.++ "0" (str.++ "4" "")))))))))))

(assert (= regexA (re.union (re.++ (str.to_re "")(re.++ (re.union (re.++ (re.opt (re.range "0" "0")) (re.range "1" "9"))(re.union (re.++ (re.range "1" "1") (re.range "0" "9")) (re.++ (re.range "2" "2") (re.range "0" "8"))))(re.++ (re.range "/" "/")(re.++ (re.union (re.++ (re.opt (re.range "0" "0")) (re.range "1" "9")) (re.++ (re.range "1" "1") (re.range "0" "2")))(re.++ (re.range "/" "/")(re.++ (re.union (re.++ (re.range "1" "1") (re.range "6" "9")) (re.++ (re.range "2" "9") (re.range "0" "9")))(re.++ ((_ re.loop 2 2) (re.range "0" "9")) (str.to_re ""))))))))(re.union (re.++ (str.to_re "")(re.++ (re.union (re.++ (str.to_re (str.++ "3" (str.++ "1" (str.++ "/" ""))))(re.++ (re.opt (re.range "0" "0")) (re.union (re.range "1" "1")(re.union (re.range "3" "3")(re.union (re.range "5" "5") (re.range "7" "8"))))))(re.union (re.++ (re.range "1" "1") (re.union (re.range "0" "0") (re.range "2" "2"))) (re.++ (re.union (str.to_re (str.++ "2" (str.++ "9" ""))) (str.to_re (str.++ "3" (str.++ "0" ""))))(re.++ (re.range "/" "/") (re.union (re.++ (re.opt (re.range "0" "0")) (re.union (re.range "," ",")(re.union (re.range "1" "1") (re.range "3" "9")))) (re.++ (re.range "1" "1") (re.range "0" "2")))))))(re.++ (re.range "/" "/")(re.++ (re.union (re.++ (re.range "1" "1") (re.range "6" "9")) (re.++ (re.range "2" "9") (re.range "0" "9")))(re.++ ((_ re.loop 2 2) (re.range "0" "9")) (str.to_re "")))))) (re.++ (str.to_re "")(re.++ (str.to_re (str.++ "2" (str.++ "9" (str.++ "/" ""))))(re.++ (re.opt (re.range "0" "0"))(re.++ (str.to_re (str.++ "2" (str.++ "/" "")))(re.++ (re.union (re.++ (re.range "1" "1") (re.range "6" "9")) (re.++ (re.range "2" "9") (re.range "0" "9")))(re.++ (re.union (re.++ (re.range "0" "0") (re.union (re.range "4" "4") (re.range "8" "8")))(re.union (re.++ (re.union (re.range "2" "2")(re.union (re.range "4" "4")(re.union (re.range "6" "6") (re.range "8" "8")))) (re.union (re.range "0" "0")(re.union (re.range "4" "4") (re.range "8" "8")))) (re.++ (re.union (re.range "1" "1")(re.union (re.range "3" "3")(re.union (re.range "5" "5")(re.union (re.range "7" "7") (re.range "9" "9"))))) (re.union (re.range "2" "2") (re.range "6" "6"))))) (str.to_re "")))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "8" (str.++ "7" "")))

(define-fun Witness2 () String (str.++ "i" (str.++ "4" "")))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))) (str.to_re "")))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "-" (str.++ "." (str.++ "8" (str.++ "4" (str.++ "6" ""))))))

(define-fun Witness2 () String (str.++ "-" (str.++ "." (str.++ "0" ""))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.++ (re.opt (re.union (re.range "+" "+") (re.range "-" "-"))) (re.union (re.++ (re.+ (re.range "0" "9"))(re.++ (re.opt (re.range "." ".")) (re.* (re.range "0" "9")))) (re.++ (re.* (re.range "0" "9"))(re.++ (re.opt (re.range "." ".")) (re.+ (re.range "0" "9")))))) (str.to_re "")))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "1" (str.++ "8" (str.++ "1" (str.++ "8" (str.++ "3" (str.++ "1" (str.++ "8" (str.++ "0" (str.++ "-" (str.++ "0" (str.++ "8" (str.++ "0" (str.++ "4" ""))))))))))))))

(define-fun Witness2 () String (str.++ "8" (str.++ "9" (str.++ "1" (str.++ "9" (str.++ "3" (str.++ "8" (str.++ "-" (str.++ "9" (str.++ "3" (str.++ "-" (str.++ "8" (str.++ "5" (str.++ "8" (str.++ "4" "")))))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ ((_ re.loop 2 2) (re.range "0" "9"))(re.++ (re.range "0" "1")(re.++ (re.range "0" "9")(re.++ (re.range "0" "3")(re.++ (re.range "0" "9")(re.++ (re.opt (re.range "-" "-"))(re.++ ((_ re.loop 2 2) (re.range "0" "9"))(re.++ (re.opt (re.range "-" "-"))(re.++ ((_ re.loop 4 4) (re.range "0" "9")) (str.to_re "")))))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "\u{a0}" (str.++ "\u{a0}" (str.++ " " (str.++ "\u{85}" (str.++ "\u{85}" (str.++ "\u{85}" (str.++ " " (str.++ " " (str.++ "\u{09}" (str.++ "\u{85}" (str.++ "\u{a0}" (str.++ "h" (str.++ " " (str.++ "-" (str.++ "." (str.++ "-" (str.++ "." (str.++ "-" (str.++ "." (str.++ "8" (str.++ "0" (str.++ "9" (str.++ "9" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "8" (str.++ "8" (str.++ "9" (str.++ "\u{a0}" (str.++ " " ""))))))))))))))))))))))))))))))))

(define-fun Witness2 () String (str.++ " " (str.++ "n" (str.++ "y" (str.++ " " (str.++ "N" (str.++ "." (str.++ "-" (str.++ "L" (str.++ "." (str.++ "A" (str.++ "k" (str.++ "." (str.++ "4" (str.++ "7" (str.++ "0" (str.++ "8" (str.++ "6" (str.++ "2" (str.++ "5" (str.++ "7" (str.++ "7" (str.++ "8" (str.++ "\u{a0}" (str.++ " " (str.++ "\u{a0}" (str.++ " " "")))))))))))))))))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (re.+ (re.union (re.range " " " ")(re.union (re.range "-" "-")(re.union (re.range "A" "Z") (re.range "a" "z")))))(re.++ (re.range "." ".")(re.++ (re.+ (re.union (re.range " " " ")(re.union (re.range "-" "-")(re.union (re.range "A" "Z") (re.range "a" "z")))))(re.++ (re.opt (re.++ (re.range "." ".") (re.+ (re.union (re.range " " " ")(re.union (re.range "-" "-")(re.union (re.range "A" "Z") (re.range "a" "z")))))))(re.++ (re.opt (re.++ (re.range "." ".") (re.+ (re.union (re.range "I" "I")(re.union (re.range "V" "V") (re.range "X" "X"))))))(re.++ (re.range "." ".")(re.++ ((_ re.loop 10 10) (re.range "0" "9"))(re.++ (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))) (str.to_re "")))))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "1" (str.++ "1" (str.++ "5" (str.++ "." (str.++ "2" (str.++ "4" (str.++ "3" (str.++ "." (str.++ "3" (str.++ "." (str.++ "3" (str.++ "8" "")))))))))))))

(define-fun Witness2 () String (str.++ "1" (str.++ "9" (str.++ "." (str.++ "1" (str.++ "5" (str.++ "." (str.++ "2" (str.++ "5" (str.++ "5" (str.++ "." (str.++ "1" (str.++ "8" "")))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.union (re.range "1" "9")(re.union (re.++ (re.range "1" "9") (re.range "0" "9"))(re.union (re.++ (re.range "1" "1")(re.++ (re.range "0" "9") (re.range "0" "9")))(re.union (re.++ (re.range "2" "2")(re.++ (re.range "0" "4") (re.range "0" "9"))) (re.++ (str.to_re (str.++ "2" (str.++ "5" ""))) (re.range "0" "5"))))))(re.++ ((_ re.loop 3 3) (re.++ (re.range "." ".") (re.union (re.range "0" "9")(re.union (re.++ (re.range "1" "9") (re.range "0" "9"))(re.union (re.++ (re.range "1" "1")(re.++ (re.range "0" "9") (re.range "0" "9")))(re.union (re.++ (re.range "2" "2")(re.++ (re.range "0" "4") (re.range "0" "9"))) (re.++ (str.to_re (str.++ "2" (str.++ "5" ""))) (re.range "0" "5")))))))) (str.to_re ""))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "9" (str.++ "6" (str.++ "9" (str.++ "2" (str.++ "5" (str.++ "-" (str.++ "9" (str.++ "8" (str.++ "7" ""))))))))))

(define-fun Witness2 () String (str.++ "8" (str.++ "8" (str.++ "4" (str.++ "4" (str.++ "3" (str.++ "-" (str.++ "8" (str.++ "4" (str.++ "3" ""))))))))))

(assert (= regexA (re.union (re.union (re.++ (str.to_re "")(re.++ ((_ re.loop 5 5) (re.range "0" "9")) (str.to_re ""))) (re.++ (str.to_re "")(re.++ ((_ re.loop 8 8) (re.range "0" "9")) (str.to_re "")))) (re.++ (str.to_re "")(re.++ ((_ re.loop 5 5) (re.range "0" "9"))(re.++ (re.range "-" "-")(re.++ ((_ re.loop 3 3) (re.range "0" "9")) (str.to_re ""))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "\u{5c}" (str.++ "\u{5c}" "")))

(define-fun Witness2 () String (str.++ "n" (str.++ ":" (str.++ "\u{5c}" ""))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.union (re.++ (re.union (re.range "A" "Z") (re.range "a" "z")) (re.range ":" ":")) (re.range "\u{5c}" "\u{5c}"))(re.++ (re.union (re.range "\u{5c}" "\u{5c}") (re.+ (re.++ (re.range "\u{5c}" "\u{5c}")(re.++ (re.union (re.range "\u{00}" "[") (re.range "]" "\u{ff}")) (re.* (re.union (re.range "\u{00}" "!")(re.union (re.range "#" ")")(re.union (re.range "+" ".")(re.union (re.range "0" "9")(re.union (re.range ";" ";")(re.union (re.range "=" "=")(re.union (re.range "@" "{") (re.range "}" "\u{ff}"))))))))))))) (str.to_re ""))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "1" (str.++ "5" (str.++ "8" (str.++ "7" (str.++ "2" ""))))))

(define-fun Witness2 () String (str.++ "-" (str.++ "1" (str.++ "." (str.++ "5" (str.++ "8" (str.++ "9" (str.++ "1" (str.++ "8" "")))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.opt (re.union (re.range "+" "+") (re.range "-" "-")))(re.++ (re.+ (re.range "0" "9"))(re.++ (re.opt (re.++ (re.range "." ".") (re.+ (re.range "0" "9")))) (str.to_re "")))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "\u{da}" (str.++ "8" (str.++ "\u{ab}" (str.++ "@" (str.++ "f" (str.++ "i" (str.++ "." (str.++ "x" (str.++ "h" (str.++ "t" "")))))))))))

(define-fun Witness2 () String (str.++ "\u{22}" (str.++ "4" (str.++ "u" (str.++ "@" (str.++ "y" (str.++ "." (str.++ "y" (str.++ "x" (str.++ "c" (str.++ "." (str.++ "e" (str.++ "t" (str.++ "r" ""))))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.union (re.range "\u{00}" "^") (re.range "`" "\u{ff}"))(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_") (re.range "a" "z")))))(re.++ (re.union (re.range "\u{00}" "^") (re.range "`" "\u{ff}"))(re.++ (re.range "@" "@")(re.++ (re.+ (re.range "a" "z"))(re.++ (re.range "." ".")(re.++ (re.union ((_ re.loop 2 3) (re.range "a" "z")) (re.++ ((_ re.loop 2 3) (re.range "a" "z"))(re.++ (re.range "." ".") ((_ re.loop 2 3) (re.range "a" "z"))))) (str.to_re "")))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "9" (str.++ "9" (str.++ "8" (str.++ "7" (str.++ " " (str.++ " " (str.++ " " ""))))))))

(define-fun Witness2 () String (str.++ "9" (str.++ "4" "")))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.+ (re.range "0" "9"))(re.++ (re.* (re.range " " " "))(re.++ (re.opt (re.++ (re.union (re.range "P" "P") (re.range "p" "p")) (re.union (re.range "T" "T")(re.union (re.range "X" "X")(re.union (re.range "t" "t") (re.range "x" "x")))))) (str.to_re "")))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "0" (str.++ "2" (str.++ "/" (str.++ "2" (str.++ "9" (str.++ "5" (str.++ "9" (str.++ "8" (str.++ "9" ""))))))))))

(define-fun Witness2 () String (str.++ "0" (str.++ "2" (str.++ "0" (str.++ "8" (str.++ "8" (str.++ "5" (str.++ "8" (str.++ "0" "")))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.union (re.++ (re.union (re.++ (re.range "0" "0") (re.union (re.range "1" "1")(re.union (re.range "3" "3")(re.union (re.range "5" "5") (re.range "7" "8"))))) (re.++ (re.range "1" "1") (re.union (re.range "0" "0") (re.range "2" "2"))))(re.++ (re.opt (re.range "/" "/")) (re.union (re.++ (re.range "0" "2") (re.range "0" "9")) (re.++ (re.range "3" "3") (re.range "0" "1")))))(re.union (re.++ (re.union (re.++ (re.range "0" "0") (re.union (re.range "4" "4")(re.union (re.range "6" "6") (re.range "9" "9")))) (str.to_re (str.++ "1" (str.++ "1" ""))))(re.++ (re.opt (re.range "/" "/")) (re.union (re.++ (re.range "0" "2") (re.range "0" "9")) (str.to_re (str.++ "3" (str.++ "0" "")))))) (re.++ (str.to_re (str.++ "0" (str.++ "2" "")))(re.++ (re.opt (re.range "/" "/"))(re.++ (re.range "0" "2") (re.range "0" "9"))))))(re.++ (re.opt (re.range "/" "/"))(re.++ ((_ re.loop 4 4) (re.range "0" "9")) (str.to_re "")))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "9" (str.++ "3" "")))

(define-fun Witness2 () String (str.++ "1" (str.++ "5" (str.++ "5" (str.++ "." (str.++ "9" ""))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.union (re.++ (str.to_re (str.++ "1" (str.++ "0" (str.++ "." "")))) (re.range "0" "9"))(re.union (re.++ (re.range "1" "9") (re.range "0" "9"))(re.union (re.++ (re.range "1" "2")(re.++ (re.range "0" "5")(re.++ (re.range "0" "5")(re.++ (re.range "." ".") (re.range "0" "9")))))(re.union (re.++ (re.range "1" "9") (re.range "0" "9"))(re.union (re.++ (re.range "1" "2")(re.++ (re.range "0" "5")(re.++ (re.range "0" "5")(re.++ (re.range "." ".") (re.range "0" "9")))))(re.union (re.++ (re.range "1" "9") (re.range "0" "9")) (re.++ (re.range "1" "2")(re.++ (re.range "0" "5") (re.range "0" "5"))))))))) (str.to_re "")))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "\u{22}" (str.++ "\u{a3}" (str.++ "\u{11}" (str.++ "\u{22}" (str.++ "l" (str.++ "=" (str.++ "\u{8e}" (str.++ "\u{eb}" "")))))))))

(define-fun Witness2 () String (str.++ "\u{22}" (str.++ "'" (str.++ "}" (str.++ "\u{22}" (str.++ "*" ""))))))

(assert (= regexA (re.++ (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))) (re.union (re.++ (re.range "\u{22}" "\u{22}")(re.++ (re.+ (re.union (re.range "\u{00}" "!") (re.range "#" "\u{ff}"))) (re.range "\u{22}" "\u{22}"))) (re.+ (re.union (re.range "\u{00}" "\u{1f}")(re.union (re.range "!" "+") (re.range "-" "\u{ff}"))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "8" (str.++ "9" (str.++ "8" (str.++ "3" "")))))

(define-fun Witness2 () String (str.++ "8" (str.++ "8" (str.++ "9" (str.++ "8" "")))))

(assert (= regexA (re.union (re.++ (str.to_re "")(re.++ (re.union (re.++ (re.union (re.++ (re.range "0" "0") (re.union (re.range "1" "1")(re.union (re.range "3" "3")(re.union (re.range "5" "5") (re.range "7" "8")))))(re.union (re.union (re.range "1" "1")(re.union (re.range "3" "3")(re.union (re.range "5" "5") (re.range "7" "8")))) (re.++ (re.range "1" "1") (re.union (re.range "0" "0") (re.range "2" "2")))))(re.++ (re.range "/" "/") (re.union (re.range "1" "9")(re.union (re.++ (re.range "0" "2") (re.range "0" "9")) (re.++ (re.range "3" "3") (re.range "0" "1"))))))(re.union (re.++ (re.union (re.++ (re.range "0" "0") (re.union (re.range "4" "4")(re.union (re.range "6" "6") (re.range "9" "9"))))(re.union (re.union (re.range "4" "4")(re.union (re.range "6" "6") (re.range "9" "9"))) (str.to_re (str.++ "1" (str.++ "1" "")))))(re.++ (re.range "/" "/") (re.union (re.range "1" "9")(re.union (re.++ (re.range "0" "2") (re.range "0" "9")) (str.to_re (str.++ "3" (str.++ "0" ""))))))) (re.++ (re.union (re.range "2" "2") (str.to_re (str.++ "0" (str.++ "2" ""))))(re.++ (re.range "/" "/") (re.union (re.range "1" "9") (re.++ (re.range "0" "2") (re.range "0" "9")))))))(re.++ (re.range "/" "/")(re.++ ((_ re.loop 4 4) (re.range "0" "9")) (str.to_re ""))))) (re.++ (str.to_re "")(re.++ ((_ re.loop 4 4) (re.range "0" "9")) (str.to_re ""))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "." (str.++ "9" "")))

(define-fun Witness2 () String (str.++ "3" (str.++ "." (str.++ "7" (str.++ "1" "")))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.union (re.+ (re.range "0" "9")) (re.++ (re.* (re.range "0" "9"))(re.++ (re.range "." ".") ((_ re.loop 1 2) (re.range "0" "9"))))) (str.to_re "")))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "8" (str.++ "2" (str.++ "8" ""))))

(define-fun Witness2 () String (str.++ "$" (str.++ "9" (str.++ "0" (str.++ "8" "")))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.opt (re.range "$" "$"))(re.++ (re.* (re.range "0" "9"))(re.++ (re.opt (re.range "." "."))(re.++ (re.opt (re.range "0" "9"))(re.++ (re.opt (re.range "0" "9")) (str.to_re "")))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "*" (str.++ "/" (str.++ "2" (str.++ "9" (str.++ " " (str.++ "*" (str.++ "/" (str.++ "1" (str.++ "2" (str.++ " " (str.++ "*" (str.++ "/" (str.++ "9" (str.++ " " (str.++ "a" (str.++ "u" (str.++ "g" (str.++ " " (str.++ "t" (str.++ "u" (str.++ "e" ""))))))))))))))))))))))

(define-fun Witness2 () String (str.++ "*" (str.++ " " (str.++ "*" (str.++ " " (str.++ "6" (str.++ " " (str.++ "s" (str.++ "e" (str.++ "p" (str.++ " " (str.++ "m" (str.++ "o" (str.++ "n" ""))))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.++ (re.union (re.range "*" "*") (re.++ (re.opt (str.to_re (str.++ "*" (str.++ "/" "")))) (re.union (re.range "0" "9") (re.++ (re.range "1" "5") (re.range "0" "9")))))(re.++ (re.range " " " ")(re.++ (re.union (re.range "*" "*") (re.++ (re.opt (str.to_re (str.++ "*" (str.++ "/" "")))) (re.union (re.range "0" "9")(re.union (re.++ (re.range "1" "1") (re.range "0" "9")) (re.++ (re.range "2" "2") (re.range "0" "3"))))))(re.++ (re.range " " " ")(re.++ (re.union (re.range "*" "*") (re.++ (re.opt (str.to_re (str.++ "*" (str.++ "/" "")))) (re.union (re.range "1" "9")(re.union (re.++ (re.range "1" "2") (re.range "0" "9")) (re.++ (re.range "3" "3") (re.range "0" "1"))))))(re.++ (re.range " " " ")(re.++ (re.union (re.range "*" "*")(re.union (re.++ (re.opt (str.to_re (str.++ "*" (str.++ "/" "")))) (re.union (re.range "1" "9")(re.union (re.++ (re.range "1" "2") (re.range "0" "9")) (re.++ (re.range "3" "3") (re.range "0" "1"))))) (re.union (str.to_re (str.++ "j" (str.++ "a" (str.++ "n" ""))))(re.union (str.to_re (str.++ "f" (str.++ "e" (str.++ "b" ""))))(re.union (str.to_re (str.++ "m" (str.++ "a" (str.++ "r" ""))))(re.union (str.to_re (str.++ "a" (str.++ "p" (str.++ "r" ""))))(re.union (str.to_re (str.++ "m" (str.++ "a" (str.++ "y" ""))))(re.union (str.to_re (str.++ "j" (str.++ "u" (str.++ "n" ""))))(re.union (str.to_re (str.++ "j" (str.++ "u" (str.++ "l" ""))))(re.union (str.to_re (str.++ "a" (str.++ "u" (str.++ "g" ""))))(re.union (str.to_re (str.++ "s" (str.++ "e" (str.++ "p" ""))))(re.union (str.to_re (str.++ "o" (str.++ "k" (str.++ "t" ""))))(re.union (str.to_re (str.++ "n" (str.++ "o" (str.++ "v" "")))) (str.to_re (str.++ "d" (str.++ "e" (str.++ "c" "")))))))))))))))))(re.++ (re.range " " " ") (re.union (re.range "*" "*")(re.union (re.++ (re.opt (str.to_re (str.++ "*" (str.++ "/" "")))) (re.range "0" "7")) (re.union (str.to_re (str.++ "s" (str.++ "u" (str.++ "n" ""))))(re.union (str.to_re (str.++ "m" (str.++ "o" (str.++ "n" ""))))(re.union (str.to_re (str.++ "t" (str.++ "u" (str.++ "e" ""))))(re.union (str.to_re (str.++ "w" (str.++ "e" (str.++ "d" ""))))(re.union (str.to_re (str.++ "t" (str.++ "h" (str.++ "u" ""))))(re.union (str.to_re (str.++ "f" (str.++ "r" (str.++ "i" "")))) (str.to_re (str.++ "s" (str.++ "a" (str.++ "t" "")))))))))))))))))))) (str.to_re "")))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "8" (str.++ "8" (str.++ "/" (str.++ "-" (str.++ "9" (str.++ " " (str.++ "6" (str.++ "8" (str.++ " " (str.++ "3" (str.++ " " (str.++ "2" (str.++ "6" ""))))))))))))))

(define-fun Witness2 () String (str.++ "+" (str.++ "3" (str.++ "6" (str.++ "0" (str.++ "8" (str.++ "/" (str.++ "9" (str.++ "7" (str.++ "0" (str.++ "-" (str.++ "9" (str.++ " " (str.++ "3" (str.++ "6" (str.++ " " (str.++ "8" "")))))))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.opt (re.++ (re.opt (re.range "+" "+")) (str.to_re (str.++ "3" (str.++ "6" "")))))(re.++ (re.opt (re.union (re.range " " " ") (re.range "-" "-")))(re.++ (re.union ((_ re.loop 1 2) (re.range "0" "9")) (re.++ (re.range "(" "(")(re.++ ((_ re.loop 1 2) (re.range "0" "9")) (re.range ")" ")"))))(re.++ (re.opt (re.range "/" "/"))(re.++ ((_ re.loop 6 7) (re.++ (re.opt (re.union (re.range " " " ") (re.range "-" "-"))) (re.range "0" "9"))) (str.to_re "")))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "$" (str.++ "n" (str.++ "x" (str.++ "c" "")))))

(define-fun Witness2 () String (str.++ "$" (str.++ "z" (str.++ "p" ""))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.range "$" "$")(re.++ (re.range "a" "z")(re.++ ((_ re.loop 0 6) (re.union (re.range "0" "9") (re.range "a" "z"))) (str.to_re "")))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "Y" (str.++ "\u{09}" (str.++ "." (str.++ "K" (str.++ "\u{a0}" (str.++ "q" (str.++ "\u{85}" (str.++ "X" "")))))))))

(define-fun Witness2 () String (str.++ "t" (str.++ "8" (str.++ "." (str.++ "q" (str.++ "a" (str.++ "1" (str.++ "9" (str.++ "\u{a0}" "")))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z"))))(re.++ (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (re.+ (re.union (re.range "#" "#")(re.union (re.range "," ".")(re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z"))))))(re.++ (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (re.+ (re.union (re.range "#" "#")(re.union (re.range "," ".")(re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z"))))))(re.++ (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "#" "#")(re.union (re.range "," ".")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "a" "z")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))))))) (str.to_re ""))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "0" (str.++ "9" (str.++ "3" (str.++ "9" "")))))

(define-fun Witness2 () String (str.++ "2" (str.++ "2" (str.++ "4" (str.++ "4" "")))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.union (str.to_re (str.++ "2" (str.++ "0" "")))(re.union (str.to_re (str.++ "2" (str.++ "1" "")))(re.union (str.to_re (str.++ "2" (str.++ "2" "")))(re.union (str.to_re (str.++ "2" (str.++ "3" ""))) (re.++ (re.range "0" "1") (re.range "0" "9"))))))(re.++ (re.range "0" "5")(re.++ (re.range "0" "9") (str.to_re "")))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "0" (str.++ "5" (str.++ ":" (str.++ "5" (str.++ "4" (str.++ " " (str.++ "P" (str.++ "M" "")))))))))

(define-fun Witness2 () String (str.++ "1" (str.++ "2" (str.++ ":" (str.++ "4" (str.++ "9" (str.++ " " (str.++ "A" (str.++ "M" "")))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.union (re.++ (re.range "0" "0") (re.range "1" "9")) (re.++ (re.range "1" "1") (re.range "0" "2")))(re.++ (re.range ":" ":")(re.++ (re.range "0" "5")(re.++ (re.range "0" "9")(re.++ (re.range " " " ")(re.++ (re.union (str.to_re (str.++ "A" (str.++ "M" "")))(re.union (str.to_re (str.++ "P" (str.++ "M" "")))(re.union (str.to_re (str.++ "a" (str.++ "m" ""))) (str.to_re (str.++ "p" (str.++ "m" "")))))) (str.to_re ""))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "\u{e7}" (str.++ "9" (str.++ "\u{e3}" (str.++ "-" (str.++ "\u{ba}" (str.++ "_" (str.++ "\u{f1}" (str.++ "." (str.++ "b" (str.++ "i" (str.++ "z" (str.++ "-" (str.++ "&" (str.++ "&" (str.++ "&" (str.++ "/" (str.++ "_" (str.++ "#" "")))))))))))))))))))

(define-fun Witness2 () String (str.++ "h" (str.++ "t" (str.++ "t" (str.++ "p" (str.++ "s" (str.++ ":" (str.++ "/" (str.++ "/" (str.++ "\u{ba}" (str.++ "-" (str.++ "7" (str.++ "-" (str.++ "\u{aa}" (str.++ "z" (str.++ "-" (str.++ "\u{ba}" (str.++ "y" (str.++ "\u{c8}" (str.++ "-" (str.++ "0" (str.++ "-" (str.++ "f" (str.++ "-" (str.++ "\u{ba}" (str.++ "-" (str.++ "\u{aa}" (str.++ "0" (str.++ "\u{d8}" (str.++ "9" (str.++ "\u{aa}" (str.++ "7" (str.++ "\u{b5}" (str.++ "-" (str.++ "\u{c7}" (str.++ "-" (str.++ "\u{e8}" (str.++ "\u{cb}" (str.++ "-" (str.++ "\u{fb}" (str.++ "\u{db}" (str.++ "-" (str.++ "9" (str.++ "l" (str.++ "." (str.++ "6" (str.++ "." (str.++ "9" (str.++ "." (str.++ "2" (str.++ "-" (str.++ "\u{e9}" (str.++ "\u{fe}" (str.++ "9" (str.++ "." (str.++ "9" (str.++ "\u{fa}" (str.++ "\u{fb}" (str.++ "E" (str.++ "\u{ba}" (str.++ "l" (str.++ "\u{f8}" (str.++ "-" (str.++ "q" (str.++ "9" (str.++ "-" (str.++ "\u{ba}" (str.++ "-" (str.++ "\u{ef}" (str.++ "\u{f6}" (str.++ "u" (str.++ "t" (str.++ "\u{b5}" (str.++ "." (str.++ "l" (str.++ "v" (str.++ "-" (str.++ "5" (str.++ "\u{aa}" (str.++ "\u{c8}" (str.++ "." (str.++ "y" (str.++ "-" (str.++ "3" (str.++ "." (str.++ "\u{f0}" (str.++ "." (str.++ "m" (str.++ "u" (str.++ "s" (str.++ "e" (str.++ "u" (str.++ "m" (str.++ "/" (str.++ "6" (str.++ "_" (str.++ "\u{f9}" (str.++ "M" ""))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(assert (= regexA (re.++ (re.opt (re.++ (str.to_re (str.++ "h" (str.++ "t" (str.++ "t" (str.++ "p" "")))))(re.++ (re.opt (re.range "s" "s")) (str.to_re (str.++ ":" (str.++ "/" (str.++ "/" "")))))))(re.++ (re.+ (re.++ (re.* (re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))) (re.range "-" "-")))(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))) (re.range "." "."))))(re.++ (re.union (str.to_re (str.++ "c" (str.++ "o" (str.++ "m" ""))))(re.union (str.to_re (str.++ "o" (str.++ "r" (str.++ "g" ""))))(re.union (str.to_re (str.++ "n" (str.++ "e" (str.++ "t" ""))))(re.union (str.to_re (str.++ "e" (str.++ "d" (str.++ "u" ""))))(re.union (str.to_re (str.++ "g" (str.++ "o" (str.++ "v" ""))))(re.union (str.to_re (str.++ "b" (str.++ "i" (str.++ "z" ""))))(re.union (str.to_re (str.++ "i" (str.++ "n" (str.++ "f" (str.++ "o" "")))))(re.union (str.to_re (str.++ "n" (str.++ "a" (str.++ "m" (str.++ "e" "")))))(re.union (str.to_re (str.++ "m" (str.++ "u" (str.++ "s" (str.++ "e" (str.++ "u" (str.++ "m" ""))))))) ((_ re.loop 2 2) (re.range "a" "z")))))))))))(re.++ (re.+ (re.++ (re.opt (re.range "/" "/"))(re.++ (re.opt (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))(re.++ (re.opt (re.range "-" "-"))(re.++ (re.opt (re.range "=" "="))(re.++ (re.opt (re.range "_" "_"))(re.++ (re.opt (re.range "?" "?")) (re.opt (re.range "&" "&")))))))))(re.++ (re.opt (re.range "." ".")) (re.* (re.union (re.range "#" "#")(re.union (re.range "%" "&")(re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "=" "=")(re.union (re.range "?" "?")(re.union (re.range "_" "_") (re.range "a" "z"))))))))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "W" (str.++ "B" (str.++ "Q" (str.++ "B" (str.++ "6" (str.++ "4" (str.++ "8" (str.++ "6" (str.++ "6" (str.++ "3" (str.++ "T" (str.++ "G" (str.++ "L" ""))))))))))))))

(define-fun Witness2 () String (str.++ "K" (str.++ "R" (str.++ "E" (str.++ "O" (str.++ "|" (str.++ "9" (str.++ "8" (str.++ "0" (str.++ "8" (str.++ "2" (str.++ "7" (str.++ "3" (str.++ "8" (str.++ "o" "")))))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ ((_ re.loop 4 4) (re.union (re.range "A" "Z") (re.range "a" "z")))(re.++ (re.opt (re.union (re.range " " " ")(re.union (re.range "-" "-") (re.range "|" "|"))))(re.++ ((_ re.loop 6 6) (re.range "0" "9"))(re.++ (re.opt (re.union (re.range " " " ")(re.union (re.range "-" "-") (re.range "|" "|"))))(re.++ ((_ re.loop 3 3) (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))) (str.to_re "")))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "1" (str.++ "0" (str.++ "-" (str.++ "9" (str.++ "-" (str.++ "3" (str.++ "9" (str.++ "2" (str.++ "8" ""))))))))))

(define-fun Witness2 () String (str.++ "8" (str.++ "-" (str.++ "1" (str.++ "-" (str.++ "8" (str.++ "6" (str.++ "7" (str.++ "5" "")))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.union (re.++ (re.range "3" "3") (re.range "0" "1")) (re.++ (re.opt (re.range "1" "1")) (re.range "0" "9")))(re.++ (re.range "-" "-")(re.++ (re.union (re.++ (re.opt (re.range "0" "1")) (re.range "0" "2")) (re.range "0" "9"))(re.++ (re.range "-" "-")(re.++ ((_ re.loop 4 4) (re.range "0" "9"))(re.++ (re.opt (re.++ (re.+ (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (re.union (re.++ (re.range "2" "2") (re.range "0" "3")) (re.++ (re.opt (re.range "0" "1")) (re.range "0" "9")))(re.++ (re.range ":" ":")(re.++ (re.++ (re.opt (re.range "0" "5")) (re.range "0" "9")) (re.opt (re.++ (re.range ":" ":") (re.++ (re.opt (re.range "0" "5")) (re.range "0" "9"))))))))) (str.to_re ""))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "R" (str.++ "C" (str.++ "2" (str.++ "N" (str.++ "9" (str.++ "M" (str.++ "q" ""))))))))

(define-fun Witness2 () String (str.++ "K" (str.++ "6" (str.++ "0" (str.++ "Y" (str.++ "8" (str.++ "p" (str.++ "d" ""))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ ((_ re.loop 1 2) (re.union (re.range "A" "Z") (re.range "a" "z")))(re.++ ((_ re.loop 1 2) (re.range "0" "9"))(re.++ (re.opt (re.union (re.range "A" "Z") (re.range "a" "z")))(re.++ (re.opt (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (re.range "0" "9")(re.++ ((_ re.loop 2 2) (re.union (re.range "A" "Z") (re.range "a" "z"))) (str.to_re ""))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "1" (str.++ "0" (str.++ "/" (str.++ "3" (str.++ "0" (str.++ "1" (str.++ "9" (str.++ "2" (str.++ "4" (str.++ "1" (str.++ "8" (str.++ ":" (str.++ "5" (str.++ "8" "")))))))))))))))

(define-fun Witness2 () String (str.++ "1" (str.++ "0" (str.++ "/" (str.++ "2" (str.++ "5" (str.++ "2" (str.++ "8" (str.++ "7" (str.++ "8" (str.++ " " (str.++ "0" (str.++ "8" (str.++ "4" (str.++ "0" "")))))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.++ (re.union (re.++ (re.range "0" "0") (re.range "1" "9")) (re.++ (re.range "1" "1") (re.range "0" "2")))(re.++ (re.opt (re.range "/" "/"))(re.++ (re.union (re.++ (re.range "0" "2") (re.range "1" "9")) (re.++ (re.range "3" "3") (re.range "0" "1")))(re.++ (re.opt (re.range "/" "/"))(re.++ (re.++ (re.opt (re.++ (re.range "1" "2") (re.range "0" "9"))) ((_ re.loop 2 2) (re.range "0" "9")))(re.++ (re.opt (re.range " " " "))(re.++ (re.union (re.++ (re.range "0" "1") (re.range "0" "9")) (re.++ (re.range "2" "2") (re.range "0" "4")))(re.++ (re.opt (re.range ":" ":")) (re.++ (re.range "0" "5") (re.range "0" "9")))))))))) (str.to_re "")))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "\u{5c}" (str.++ "\u{5c}" (str.++ "\u{cf}" (str.++ "\u{aa}" (str.++ "\u{5c}" (str.++ "\u{f4}" (str.++ "8" (str.++ "6" (str.++ "\u{f1}" (str.++ "\u{f2}" (str.++ "\u{d5}" (str.++ "\u{5c}" (str.++ "\u{aa}" (str.++ "\u{5c}" "")))))))))))))))

(define-fun Witness2 () String (str.++ "\u{5c}" (str.++ "\u{5c}" (str.++ "H" (str.++ "5" (str.++ "\u{5c}" (str.++ "\u{f8}" (str.++ "\u{5c}" (str.++ "\u{cf}" (str.++ "\u{5c}" (str.++ "\u{e7}" (str.++ "\u{d2}" (str.++ "\u{5c}" (str.++ "\u{fc}" (str.++ "\u{5c}" "")))))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.range "\u{5c}" "\u{5c}")(re.++ (re.+ (re.++ (re.range "\u{5c}" "\u{5c}") (re.+ (re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))))))(re.++ (re.+ (re.++ (re.range "\u{5c}" "\u{5c}")(re.++ (re.+ (re.union (re.range "(" ")")(re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))))) (re.* (re.++ (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))) (re.+ (re.union (re.range "(" ")")(re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))))))))))(re.++ (re.opt (re.++ (re.range "\u{5c}" "\u{5c}") (re.opt (re.++ (re.+ (re.++ (re.+ (re.union (re.range "(" ")")(re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))))) (re.* (re.++ (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))) (re.+ (re.union (re.range "(" ")")(re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))))))))(re.++ (re.range "." ".") (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))))))) (str.to_re ""))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "2" (str.++ "9" (str.++ "/" (str.++ "0" (str.++ "2" (str.++ "/" (str.++ "1" (str.++ "9" (str.++ "4" (str.++ "0" (str.++ " " (str.++ "1" (str.++ "6" (str.++ ":" (str.++ "6" (str.++ ":" (str.++ "4" ""))))))))))))))))))

(define-fun Witness2 () String (str.++ "2" (str.++ "9" (str.++ "/" (str.++ "0" (str.++ "," (str.++ "/" (str.++ "1" (str.++ "9" (str.++ "9" (str.++ "4" (str.++ " " (str.++ "2" (str.++ "3" (str.++ ":" (str.++ "4" (str.++ "6" (str.++ ":" (str.++ "8" "")))))))))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.union (re.++ (re.union (re.++ (re.union (re.++ (re.opt (re.range "0" "1")) (re.range "0" "9")) (re.++ (re.range "2" "2") (re.range "0" "8")))(re.++ (re.range "/" "/") (re.union (re.++ (re.opt (re.range "0" "0")) (re.range "0" "9")) (re.++ (re.range "1" "1") (re.range "0" "2")))))(re.union (re.++ (str.to_re (str.++ "2" (str.++ "9" (str.++ "/" "")))) (re.union (re.++ (re.opt (re.range "0" "0")) (re.union (re.range "," ",")(re.union (re.range "1" "1") (re.range "3" "9")))) (re.++ (re.range "1" "1") (re.range "0" "2"))))(re.union (re.++ (str.to_re (str.++ "3" (str.++ "0" (str.++ "/" "")))) (re.union (re.++ (re.opt (re.range "0" "0")) (re.union (re.range "," ",")(re.union (re.range "1" "1") (re.range "3" "9")))) (re.++ (re.range "1" "1") (re.range "0" "2")))) (re.++ (str.to_re (str.++ "3" (str.++ "1" (str.++ "/" "")))) (re.union (re.++ (re.opt (re.range "0" "0")) (re.union (re.range "1" "1")(re.union (re.range "3" "3")(re.union (re.range "5" "5") (re.range "7" "8"))))) (re.++ (re.range "1" "1") (re.range "0" "2")))))))(re.++ (re.range "/" "/") (re.union (re.++ (str.to_re (str.++ "1" (str.++ "9" ""))) ((_ re.loop 2 2) (re.range "0" "9"))) (re.++ (re.range "2" "9") ((_ re.loop 3 3) (re.range "0" "9")))))) (re.++ (str.to_re (str.++ "2" (str.++ "9" (str.++ "/" ""))))(re.++ (re.opt (re.range "0" "0"))(re.++ (str.to_re (str.++ "2" (str.++ "/" ""))) (re.union (re.++ (re.union (re.++ (re.union (re.range "2" "2")(re.union (re.range "4" "4")(re.union (re.range "6" "6") (re.range "8" "8")))) (re.union (re.range "0" "0")(re.union (re.range "4" "4") (re.range "8" "8")))) (re.++ (re.union (re.range "3" "3")(re.union (re.range "5" "5")(re.union (re.range "7" "7") (re.range "9" "9")))) (re.union (re.range "2" "2") (re.range "6" "6")))) (str.to_re (str.++ "0" (str.++ "0" "")))) (re.++ (re.union (str.to_re (str.++ "1" (str.++ "9" ""))) (re.++ (re.range "2" "9") (re.range "0" "9"))) (re.union (re.++ (re.union (re.range "2" "2")(re.union (re.range "4" "4")(re.union (re.range "6" "6") (re.range "8" "8")))) (re.range "0" "0"))(re.union (re.++ (re.union (re.range "0" "0")(re.union (re.range "2" "2")(re.union (re.range "4" "4")(re.union (re.range "6" "6") (re.range "8" "8"))))) (re.union (re.range "4" "4") (re.range "8" "8"))) (re.++ (re.union (re.range "1" "1")(re.union (re.range "3" "3")(re.union (re.range "5" "5")(re.union (re.range "7" "7") (re.range "9" "9"))))) (re.union (re.range "2" "2") (re.range "6" "6")))))))))))(re.++ (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))(re.++ (re.union (re.++ (re.opt (re.range "0" "1")) (re.range "0" "9")) (re.++ (re.range "2" "2") (re.range "0" "3")))(re.++ ((_ re.loop 2 2) (re.++ (re.range ":" ":")(re.++ (re.opt (re.range "0" "5")) (re.range "0" "9")))) (str.to_re ""))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "O" (str.++ "Q" (str.++ "$" ""))))

(define-fun Witness2 () String (str.++ "M" ""))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.range "A" "Z")(re.++ (re.* (re.union (re.range "\u{00}" "\u{09}") (re.range "\u{0b}" "\u{ff}"))) (str.to_re ""))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "S" (str.++ "9" (str.++ "8" ""))))

(define-fun Witness2 () String (str.++ "L" (str.++ "9" (str.++ "7" (str.++ "." (str.++ "9" ""))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.range "A" "Z")(re.++ ((_ re.loop 2 2) (re.range "0" "9"))(re.++ (re.opt (re.++ (re.range "." ".") (re.range "0" "9"))) (str.to_re "")))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "0" (str.++ "." (str.++ "8" (str.++ "," (str.++ "+" (str.++ "8" (str.++ "3" (str.++ "2" (str.++ "7" ""))))))))))

(define-fun Witness2 () String (str.++ "-" (str.++ "3" (str.++ "8" (str.++ "," (str.++ "+" (str.++ "1" (str.++ "8" (str.++ "." (str.++ "5" (str.++ "8" "")))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.union (re.opt (re.range "0" "9"))(re.union (re.union (re.++ (re.opt (re.union (re.range "+" "+") (re.range "-" "-")))(re.++ (re.+ (re.range "0" "9"))(re.++ (re.opt (re.range "." ".")) (re.* (re.range "0" "9"))))) (re.++ (re.opt (re.union (re.range "+" "+") (re.range "-" "-")))(re.++ (re.* (re.range "0" "9"))(re.++ (re.opt (re.range "." ".")) (re.+ (re.range "0" "9"))))))(re.union (re.++ (re.* (re.++ (re.opt (re.union (re.range "+" "+") (re.range "-" "-")))(re.++ (re.+ (re.range "0" "9"))(re.++ (re.opt (re.range "." "."))(re.++ (re.* (re.range "0" "9"))(re.++ (re.range "," ",") (re.opt (re.range " " " ")))))))) (re.++ (re.opt (re.union (re.range "+" "+") (re.range "-" "-")))(re.++ (re.+ (re.range "0" "9"))(re.++ (re.opt (re.range "." ".")) (re.* (re.range "0" "9"))))))(re.union (re.++ (re.* (re.++ (re.opt (re.union (re.range "+" "+") (re.range "-" "-")))(re.++ (re.* (re.range "0" "9"))(re.++ (re.opt (re.range "." "."))(re.++ (re.+ (re.range "0" "9"))(re.++ (re.range "," ",") (re.opt (re.range " " " ")))))))) (re.++ (re.opt (re.union (re.range "+" "+") (re.range "-" "-")))(re.++ (re.* (re.range "0" "9"))(re.++ (re.opt (re.range "." ".")) (re.+ (re.range "0" "9"))))))(re.union (re.++ (re.* (re.++ (re.opt (re.union (re.range "+" "+") (re.range "-" "-")))(re.++ (re.+ (re.range "0" "9"))(re.++ (re.opt (re.range "." "."))(re.++ (re.* (re.range "0" "9"))(re.++ (re.range "," ",") (re.opt (re.range " " " ")))))))) (re.++ (re.opt (re.union (re.range "+" "+") (re.range "-" "-")))(re.++ (re.* (re.range "0" "9"))(re.++ (re.opt (re.range "." ".")) (re.+ (re.range "0" "9")))))) (re.++ (re.* (re.++ (re.opt (re.union (re.range "+" "+") (re.range "-" "-")))(re.++ (re.* (re.range "0" "9"))(re.++ (re.opt (re.range "." "."))(re.++ (re.+ (re.range "0" "9"))(re.++ (re.range "," ",") (re.opt (re.range " " " ")))))))) (re.++ (re.opt (re.union (re.range "+" "+") (re.range "-" "-")))(re.++ (re.+ (re.range "0" "9"))(re.++ (re.opt (re.range "." ".")) (re.* (re.range "0" "9"))))))))))) (str.to_re "")))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "7" (str.++ "0" (str.++ "6" ""))))

(define-fun Witness2 () String (str.++ "8" (str.++ "2" (str.++ "6" ""))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.union (re.++ (re.range "0" "0") (re.union (re.++ (re.range "0" "0") (re.union (re.range "4" "4") (re.range "8" "8")))(re.union (re.++ (re.range "1" "1") (re.union (re.range "0" "0")(re.union (re.range "2" "2") (re.range "6" "6"))))(re.union (re.++ (re.range "2" "2") (re.union (re.range "0" "0")(re.union (re.range "4" "4") (re.range "8" "8"))))(re.union (re.++ (re.range "3" "3") (re.union (re.range "1" "2") (re.range "6" "6")))(re.union (re.++ (re.range "4" "4") (re.union (re.range "0" "0")(re.union (re.range "4" "4") (re.range "8" "8"))))(re.union (re.++ (re.range "5" "5") (re.union (re.range "0" "2") (re.range "6" "6")))(re.union (re.++ (re.range "6" "6") (re.union (re.range "0" "0")(re.union (re.range "4" "4") (re.range "8" "8"))))(re.union (re.++ (re.range "7" "7") (re.union (re.range "0" "0")(re.union (re.range "2" "2")(re.union (re.range "4" "4") (re.range "6" "6")))))(re.union (re.++ (re.range "8" "8") (re.union (re.range "4" "4") (re.range "6" "6"))) (re.++ (re.range "9" "9") (re.union (re.range "0" "0")(re.union (re.range "2" "2") (re.range "6" "6"))))))))))))))(re.union (re.++ (re.range "1" "1") (re.union (re.++ (re.range "0" "0") (re.union (re.range "0" "0")(re.union (re.range "4" "4") (re.range "8" "8"))))(re.union (re.++ (re.range "1" "1") (re.union (re.range "2" "2") (re.range "6" "6")))(re.union (re.++ (re.range "2" "2") (re.union (re.range "0" "0") (re.range "4" "4")))(re.union (re.++ (re.range "3" "3") (re.union (re.range "2" "2") (re.range "6" "6")))(re.union (re.++ (re.range "4" "4") (re.union (re.range "0" "0")(re.union (re.range "4" "4") (re.range "8" "8"))))(re.union (re.++ (re.range "5" "5") (re.union (re.range "2" "2") (re.range "6" "6")))(re.union (re.++ (re.range "6" "6") (re.union (re.range "2" "2") (re.range "6" "6")))(re.union (re.++ (re.range "7" "7") (re.union (re.range "0" "0")(re.union (re.range "4" "5") (re.range "8" "8"))))(re.union (re.++ (re.range "8" "8") (re.union (re.range "0" "0")(re.union (re.range "4" "4") (re.range "8" "8")))) (re.++ (re.range "9" "9") (re.union (re.range "1" "2") (re.range "6" "6")))))))))))))(re.union (re.++ (re.range "2" "2") (re.union (re.++ (re.range "0" "0") (re.union (re.range "3" "4") (re.range "8" "8")))(re.union (re.++ (re.range "1" "1") (re.union (re.range "2" "2")(re.union (re.range "4" "4") (re.range "8" "8"))))(re.union (re.++ (re.range "2" "2") (re.union (re.range "2" "2") (re.range "6" "6")))(re.union (re.++ (re.range "3" "3") (re.union (re.range "1" "4") (re.range "8" "9")))(re.union (re.++ (re.range "4" "4") (re.union (re.range "2" "2")(re.union (re.range "4" "4") (re.range "8" "8"))))(re.union (re.++ (re.range "5" "5") (re.union (re.range "0" "0")(re.union (re.range "4" "4") (re.range "8" "8"))))(re.union (re.++ (re.range "6" "6") (re.union (re.range "0" "0")(re.union (re.range "2" "2")(re.union (re.range "6" "6") (re.range "8" "8")))))(re.union (re.++ (re.range "7" "7") (re.union (re.range "0" "0") (re.range "5" "6")))(re.union (str.to_re (str.++ "8" (str.++ "8" ""))) (re.++ (re.range "9" "9") (re.union (re.range "2" "2") (re.range "6" "6")))))))))))))(re.union (re.++ (re.range "3" "3") (re.union (re.++ (re.range "0" "0") (re.union (re.range "0" "0")(re.union (re.range "4" "4") (re.range "8" "8"))))(re.union (re.++ (re.range "1" "1") (re.union (re.range "2" "2") (re.range "6" "6")))(re.union (re.++ (re.range "2" "2") (re.union (re.range "0" "0")(re.union (re.range "4" "4") (re.range "8" "8"))))(re.union (re.++ (re.range "3" "3") (re.union (re.range "2" "2")(re.union (re.range "4" "4") (re.range "6" "6"))))(re.union (re.++ (re.range "4" "4") (re.union (re.range "0" "0")(re.union (re.range "4" "4") (re.range "8" "8"))))(re.union (re.++ (re.range "5" "5") (re.union (re.range "2" "2") (re.range "6" "6")))(re.union (re.++ (re.range "6" "6") (re.union (re.range "0" "0")(re.union (re.range "4" "4") (re.range "8" "8"))))(re.union (re.++ (re.range "7" "7") (re.union (re.range "2" "2") (re.range "6" "6")))(re.union (re.++ (re.range "8" "8") (re.union (re.range "0" "0")(re.union (re.range "4" "4") (re.range "8" "9")))) (str.to_re (str.++ "9" (str.++ "2" "")))))))))))))(re.union (re.++ (re.range "4" "4") (re.union (re.++ (re.range "0" "0") (re.union (re.range "0" "0")(re.union (re.range "4" "4") (re.range "8" "8"))))(re.union (re.++ (re.range "1" "1") (re.union (re.range "0" "0")(re.union (re.range "4" "4") (re.range "7" "8"))))(re.union (re.++ (re.range "2" "2") (re.union (re.range "2" "2")(re.union (re.range "6" "6") (re.range "8" "8"))))(re.union (re.++ (re.range "3" "3") (re.union (re.range "0" "0")(re.union (re.range "4" "4") (re.range "8" "8"))))(re.union (re.++ (re.range "4" "4") (re.union (re.range "0" "0")(re.union (re.range "2" "2") (re.range "6" "6"))))(re.union (re.++ (re.range "5" "5") (re.union (re.range "0" "0")(re.union (re.range "4" "4") (re.range "8" "8"))))(re.union (re.++ (re.range "6" "6") (re.union (re.range "2" "2") (re.range "6" "6")))(re.union (re.++ (re.range "7" "7") (re.union (re.range "0" "0")(re.union (re.range "4" "4") (re.range "8" "8"))))(re.union (re.++ (re.range "8" "8") (re.union (re.range "0" "0") (re.range "4" "4"))) (re.++ (re.range "9" "9") (re.union (re.range "2" "2")(re.union (re.range "6" "6") (re.range "8" "9"))))))))))))))(re.union (re.++ (re.range "5" "5") (re.union (re.++ (re.range "0" "0") (re.union (re.range "0" "0")(re.union (re.range "4" "4") (re.range "8" "8"))))(re.union (re.++ (re.range "1" "1") (re.union (re.range "2" "2") (re.range "6" "6")))(re.union (re.++ (re.range "2" "2") (re.union (re.range "0" "0")(re.union (re.range "4" "4") (re.range "8" "8"))))(re.union (re.++ (re.range "3" "3") (re.union (re.range "0" "0") (re.range "3" "3")))(re.union (re.++ (re.range "4" "4") (re.union (re.range "0" "0") (re.range "8" "8")))(re.union (re.++ (re.range "5" "5") (re.union (re.range "4" "4") (re.range "8" "8")))(re.union (re.++ (re.range "6" "6") (re.union (re.range "2" "2") (re.range "6" "6")))(re.union (re.++ (re.range "7" "7") (re.union (re.range "0" "0")(re.union (re.range "4" "4") (re.range "8" "8"))))(re.union (re.++ (re.range "8" "8") (re.union (re.range "0" "1") (re.range "3" "6"))) (re.++ (re.range "9" "9") (re.union (re.range "1" "1") (re.range "8" "8")))))))))))))(re.union (re.++ (re.range "6" "6") (re.union (re.++ (re.range "0" "0") (re.union (re.range "0" "0")(re.union (re.range "4" "4") (re.range "8" "8"))))(re.union (re.++ (re.range "1" "1") (re.union (re.range "2" "2") (re.range "6" "6")))(re.union (re.++ (re.range "2" "2") (re.union (re.range "0" "0")(re.union (re.range "4" "4") (re.range "6" "6"))))(re.union (re.++ (re.range "3" "3") (re.union (re.range "0" "0")(re.union (re.range "4" "4") (re.range "8" "8"))))(re.union (re.++ (re.range "4" "4") (re.union (re.range "2" "3") (re.range "6" "6")))(re.union (re.++ (re.range "5" "5") (re.union (re.range "2" "2")(re.union (re.range "4" "4") (re.range "9" "9"))))(re.union (re.++ (re.range "6" "6") (re.union (re.range "0" "0")(re.union (re.range "2" "3") (re.range "6" "6"))))(re.union (re.++ (re.range "7" "7") (re.union (re.range "0" "0")(re.union (re.range "4" "4") (re.range "8" "8"))))(re.union (re.++ (re.range "8" "8") (re.union (re.range "2" "2")(re.union (re.range "6" "6") (re.range "8" "8")))) (re.++ (re.range "9" "9") (re.union (re.range "0" "0") (re.range "4" "4")))))))))))))(re.union (re.++ (re.range "7" "7") (re.union (re.++ (re.range "0" "0") (re.range "2" "6"))(re.union (re.++ (re.range "1" "1") (re.union (re.range "0" "0") (re.range "6" "6")))(re.union (str.to_re (str.++ "2" (str.++ "4" "")))(re.union (re.++ (re.range "3" "3") (re.union (re.range "2" "2") (re.range "6" "6")))(re.union (re.++ (re.range "4" "4") (re.union (re.range "0" "0")(re.union (re.range "4" "4") (re.range "8" "8"))))(re.union (re.++ (re.range "5" "5") (re.union (re.range "2" "2") (re.range "6" "6")))(re.union (re.++ (re.range "6" "6") (re.union (re.range "0" "0")(re.union (re.range "4" "4") (re.range "8" "8"))))(re.union (re.++ (re.range "7" "7") (re.union (re.range "2" "2") (re.range "6" "6")))(re.union (re.++ (re.range "8" "8") (re.union (re.range "0" "0")(re.union (re.range "4" "4") (re.range "8" "8")))) (re.++ (re.range "9" "9") (re.union (re.range "2" "2")(re.union (re.range "5" "6") (re.range "8" "8")))))))))))))) (re.++ (re.range "8" "8") (re.union (re.++ (re.range "0" "0") (re.union (re.range "0" "0")(re.union (re.range "4" "4") (re.range "7" "7"))))(re.union (str.to_re (str.++ "2" (str.++ "6" "")))(re.union (re.++ (re.range "3" "3") (re.range "1" "4"))(re.union (str.to_re (str.++ "4" (str.++ "0" "")))(re.union (re.++ (re.range "5" "5") (re.union (re.range "0" "0") (re.range "8" "8")))(re.union (re.++ (re.range "6" "6") (re.union (re.range "0" "0") (re.range "2" "2")))(re.union (str.to_re (str.++ "7" (str.++ "6" "")))(re.union (re.++ (re.range "8" "8") (re.union (re.range "2" "2") (re.range "7" "7"))) (str.to_re (str.++ "9" (str.++ "4" "")))))))))))))))))))) (str.to_re "")))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "0" (str.++ ":" (str.++ "4" (str.++ "9" (str.++ ":" (str.++ "0" (str.++ "1" (str.++ "Z" "")))))))))

(define-fun Witness2 () String (str.++ "1" (str.++ "1" (str.++ ":" (str.++ "3" (str.++ "3" (str.++ ":" (str.++ "4" (str.++ "1" (str.++ "-" (str.++ "6" (str.++ ":" (str.++ "5" (str.++ "0" ""))))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.union (re.++ (re.opt (re.range "0" "1")) (re.range "0" "9")) (re.++ (re.range "2" "2") (re.range "0" "3")))(re.++ (re.range ":" ":")(re.++ (re.++ (re.range "0" "5") (re.range "0" "9"))(re.++ (re.range ":" ":")(re.++ (re.++ (re.range "0" "5") (re.range "0" "9"))(re.++ (re.opt (re.++ (re.union (re.range "\u{00}" "\u{09}") (re.range "\u{0b}" "\u{ff}")) ((_ re.loop 1 3) (re.range "0" "9"))))(re.++ (re.union (re.range "Z" "Z") (re.++ (re.union (re.++ (re.opt (re.union (re.range "+" "+") (re.range "-" "-")))(re.++ (re.opt (re.range "0" "1")) (re.range "0" "9"))) (re.++ (re.range "2" "2") (re.range "0" "3")))(re.++ (re.range ":" ":") (re.++ (re.range "0" "5") (re.range "0" "9"))))) (str.to_re "")))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "H" (str.++ "u" (str.++ "9" (str.++ "8" (str.++ "4" (str.++ "6" (str.++ "9" (str.++ "7" (str.++ "8" (str.++ "8" "")))))))))))

(define-fun Witness2 () String (str.++ "j" (str.++ "V" (str.++ "8" (str.++ "8" (str.++ "6" (str.++ "9" (str.++ "8" (str.++ "8" "")))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.union (re.++ (re.union (re.range "N" "N")(re.union (re.range "S" "S")(re.union (re.range "n" "n") (re.range "s" "s")))) (re.union (re.range "A" "H")(re.union (re.range "J" "Z")(re.union (re.range "a" "h") (re.range "j" "z")))))(re.union (re.++ (re.union (re.range "O" "O")(re.union (re.range "T" "T")(re.union (re.range "o" "o") (re.range "t" "t")))) (re.union (re.range "A" "B")(re.union (re.range "F" "G")(re.union (re.range "L" "M")(re.union (re.range "Q" "R")(re.union (re.range "V" "W")(re.union (re.range "a" "b")(re.union (re.range "f" "g")(re.union (re.range "l" "m")(re.union (re.range "q" "r") (re.range "v" "w")))))))))))(re.union (re.++ (re.union (re.range "H" "H") (re.range "h" "h")) (re.union (re.range "L" "Z") (re.range "l" "z"))) (re.++ (re.union (re.range "J" "J") (re.range "j" "j")) (re.union (re.range "L" "M")(re.union (re.range "Q" "R")(re.union (re.range "V" "W")(re.union (re.range "l" "m")(re.union (re.range "q" "r") (re.range "v" "w"))))))))))(re.++ (re.opt ((_ re.loop 2 2) (re.range "0" "9")))(re.++ (re.opt ((_ re.loop 2 2) (re.range "0" "9")))(re.++ (re.opt ((_ re.loop 2 2) (re.range "0" "9")))(re.++ (re.opt ((_ re.loop 2 2) (re.range "0" "9")))(re.++ (re.opt ((_ re.loop 2 2) (re.range "0" "9"))) (str.to_re ""))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ " " (str.++ "1" (str.++ ":" (str.++ "4" (str.++ "8" (str.++ "a" (str.++ "M" ""))))))))

(define-fun Witness2 () String (str.++ "7" (str.++ ":" (str.++ "2" (str.++ "3" (str.++ " " (str.++ " " (str.++ " " (str.++ " " (str.++ " " (str.++ "p" (str.++ "M" (str.++ " " (str.++ " " ""))))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.* (re.range " " " "))(re.++ (re.union (re.++ (re.range "1" "1") (re.range "0" "2")) (re.range "1" "9"))(re.++ (re.range ":" ":")(re.++ (re.range "0" "5")(re.++ (re.range "0" "9")(re.++ (re.* (re.range " " " "))(re.++ (re.union (re.range "A" "A")(re.union (re.range "P" "P")(re.union (re.range "a" "a") (re.range "p" "p"))))(re.++ (re.union (re.range "M" "M") (re.range "m" "m"))(re.++ (re.* (re.range " " " ")) (str.to_re "")))))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "6" (str.++ "0" (str.++ "0" (str.++ "2" (str.++ "2" (str.++ "9" (str.++ "\u{e4}" (str.++ "\u{f6}" (str.++ "A" ""))))))))))

(define-fun Witness2 () String (str.++ "3" (str.++ "2" (str.++ "0" (str.++ "2" (str.++ "2" (str.++ "9" (str.++ "\u{ce}" (str.++ "\u{f1}" (str.++ "|" (str.++ "\u{aa}" (str.++ "\u{b5}" (str.++ "a" "")))))))))))))

(assert (= regexA (re.union (re.++ (str.to_re "")(re.++ (re.union (re.++ ((_ re.loop 3 3) (re.union (re.range "&" "&")(re.union (re.range ";" ";")(re.union (re.range "A" "Z")(re.union (re.range "a" "z") (re.range "|" "|"))))))(re.++ ((_ re.loop 2 2) (re.range "0" "9")) (re.union (re.++ (re.union (re.++ (re.range "0" "0") (re.range "1" "9")) (re.++ (re.range "1" "1") (re.range "0" "2"))) (re.union (re.++ (re.range "0" "0") (re.range "1" "9"))(re.union (re.++ (re.range "1" "1") (re.range "0" "9")) (re.++ (re.range "2" "2") (re.range "0" "8")))))(re.union (re.++ (re.union (re.++ (re.range "0" "0") (re.union (re.range "1" "1") (re.range "3" "9"))) (re.++ (re.range "1" "1") (re.range "0" "2"))) (re.union (str.to_re (str.++ "2" (str.++ "9" ""))) (str.to_re (str.++ "3" (str.++ "0" ""))))) (re.++ (re.union (re.++ (re.range "0" "0") (re.union (re.range "1" "1")(re.union (re.range "3" "3")(re.union (re.range "5" "5") (re.range "7" "8"))))) (re.++ (re.range "1" "1") (re.union (re.range "0" "0") (re.range "2" "2")))) (str.to_re (str.++ "3" (str.++ "1" "")))))))) (re.++ (re.union (re.++ (re.union (re.range "0" "0")(re.union (re.range "2" "2")(re.union (re.range "4" "4")(re.union (re.range "6" "6") (re.range "8" "8"))))) (re.union (re.range "0" "0")(re.union (re.range "4" "4") (re.range "8" "8")))) (re.++ (re.union (re.range "1" "1")(re.union (re.range "3" "3")(re.union (re.range "5" "5")(re.union (re.range "7" "7") (re.range "9" "9"))))) (re.union (re.range "2" "2") (re.range "6" "6")))) (str.to_re (str.++ "0" (str.++ "2" (str.++ "2" (str.++ "9" "")))))))(re.++ ((_ re.loop 2 2) (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))(re.++ (re.union (re.range "0" "9")(re.union (re.range "A" "A")(re.union (re.range "a" "a") (re.range "|" "|")))) (str.to_re ""))))) (re.++ (str.to_re "")(re.++ (re.union (re.++ ((_ re.loop 4 4) (re.union (re.range "A" "Z")(re.union (re.range "a" "z") (re.range "|" "|"))))(re.++ ((_ re.loop 2 2) (re.range "0" "9")) (re.union (re.++ (re.union (re.++ (re.range "0" "0") (re.range "1" "9")) (re.++ (re.range "1" "1") (re.range "0" "2"))) (re.union (re.++ (re.range "0" "0") (re.range "1" "9"))(re.union (re.++ (re.range "1" "1") (re.range "0" "9")) (re.++ (re.range "2" "2") (re.range "0" "8")))))(re.union (re.++ (re.union (re.++ (re.range "0" "0") (re.union (re.range "1" "1") (re.range "3" "9"))) (re.++ (re.range "1" "1") (re.range "0" "2"))) (re.union (str.to_re (str.++ "2" (str.++ "9" ""))) (str.to_re (str.++ "3" (str.++ "0" ""))))) (re.++ (re.union (re.++ (re.range "0" "0") (re.union (re.range "1" "1")(re.union (re.range "3" "3")(re.union (re.range "5" "5") (re.range "7" "8"))))) (re.++ (re.range "1" "1") (re.union (re.range "0" "0") (re.range "2" "2")))) (str.to_re (str.++ "3" (str.++ "1" "")))))))) (re.++ (re.union (re.++ (re.union (re.range "0" "0")(re.union (re.range "2" "2")(re.union (re.range "4" "4")(re.union (re.range "6" "6") (re.range "8" "8"))))) (re.union (re.range "0" "0")(re.union (re.range "4" "4") (re.range "8" "8")))) (re.++ (re.union (re.range "1" "1")(re.union (re.range "3" "3")(re.union (re.range "5" "5")(re.union (re.range "7" "7") (re.range "9" "9"))))) (re.union (re.range "2" "2") (re.range "6" "6")))) (str.to_re (str.++ "0" (str.++ "2" (str.++ "2" (str.++ "9" "")))))))(re.++ ((_ re.loop 0 3) (re.++ ((_ re.loop 2 2) (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))) (re.union (re.range "0" "9")(re.union (re.range "A" "A")(re.union (re.range "a" "a") (re.range "|" "|")))))) (str.to_re "")))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "-" (str.++ "-" (str.++ "-" (str.++ "-" (str.++ "-" (str.++ "Z" (str.++ "\u{0c}" (str.++ "\u{aa}" (str.++ "K" (str.++ "\u{a0}" (str.++ "9" (str.++ "A" (str.++ "-" (str.++ " " (str.++ "8" (str.++ "-" (str.++ "\u{0a}" (str.++ "\u{85}" (str.++ "4" (str.++ "\u{09}" (str.++ "l" (str.++ "\u{98}" (str.++ "\u{ad}" (str.++ " " (str.++ " " (str.++ "8" (str.++ " " (str.++ "2" (str.++ "9" (str.++ ":" (str.++ "5" (str.++ "6" (str.++ " " (str.++ "\u{a0}" (str.++ "\u{83}" ""))))))))))))))))))))))))))))))))))))

(define-fun Witness2 () String (str.++ "-" (str.++ "-" (str.++ "-" (str.++ "-" (str.++ "x" (str.++ " " (str.++ "\u{85}" (str.++ "\u{0b}" (str.++ "\u{a0}" (str.++ "\u{85}" (str.++ "\u{ba}" (str.++ "\u{0a}" (str.++ "." (str.++ " " (str.++ "\u{a0}" (str.++ "\u{a0}" (str.++ "\u{85}" (str.++ "\u{85}" (str.++ "\u{0a}" (str.++ "\u{85}" (str.++ "z" (str.++ "\u{09}" (str.++ " " (str.++ "6" (str.++ " " (str.++ "\u{a7}" (str.++ "(" (str.++ "\u{80}" (str.++ " " (str.++ " " (str.++ "8" (str.++ " " (str.++ " " (str.++ "8" (str.++ "9" (str.++ "8" (str.++ "1" (str.++ "\u{85}" (str.++ "\u{d8}" ""))))))))))))))))))))))))))))))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.+ (re.union (re.range "-" "-")(re.union (re.range "A" "Z") (re.range "a" "z"))))(re.++ (re.+ (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))(re.++ (re.+ (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (re.+ (re.union (re.range "-" ".")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_") (re.range "a" "z"))))))(re.++ (re.+ (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (re.+ (re.union (re.range "-" ".")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_") (re.range "a" "z"))))))(re.++ (re.+ (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (re.+ (re.range "0" "9"))(re.++ (re.+ (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (re.++ ((_ re.loop 3 3) (re.union (re.range "\u{00}" "\u{09}") (re.range "\u{0b}" "\u{ff}")))(re.++ (re.range " " " ")(re.++ ((_ re.loop 2 2) (re.union (re.range " " " ") (re.range "0" "9")))(re.++ (re.range " " " ") (re.union (re.++ (re.range "0" "9")(re.++ (re.range "0" "9")(re.++ (re.range ":" ":")(re.++ (re.range "0" "9") (re.range "0" "9"))))) (re.++ (re.range " " " ") ((_ re.loop 4 4) (re.range "0" "9"))))))))(re.++ (re.+ (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (re.+ (re.union (re.range "\u{00}" "\u{09}") (re.range "\u{0b}" "\u{ff}"))) (str.to_re "")))))))))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "M" (str.++ "A" (str.++ "f" ""))))

(define-fun Witness2 () String (str.++ "9" (str.++ "2" (str.++ "s" ""))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))(re.++ ((_ re.loop 2 29) (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_") (re.range "a" "z"))))) (str.to_re ""))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "\u{94}" ""))

(define-fun Witness2 () String (str.++ "\u{97}" (str.++ "\u{86}" "")))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.+ (re.union (re.range "\u{00}" "/")(re.union (re.range ":" "@")(re.union (re.range "[" "`") (re.range "{" "\u{ff}"))))) (str.to_re "")))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "8" (str.++ "6" (str.++ "8" (str.++ "9" (str.++ "3" (str.++ "7" (str.++ "-" (str.++ "f" (str.++ "8" (str.++ "9" (str.++ "8" ""))))))))))))

(define-fun Witness2 () String (str.++ "0" (str.++ "0" (str.++ "2" (str.++ "7" (str.++ "1" (str.++ "7" (str.++ "-" (str.++ "9" (str.++ "9" (str.++ "5" (str.++ "1" ""))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ ((_ re.loop 6 6) (re.range "0" "9"))(re.++ (re.range "-" "-")(re.++ (re.union (re.range "0" "9")(re.union (re.range "F" "F")(re.union (re.range "P" "P")(re.union (re.range "T" "T")(re.union (re.range "f" "f")(re.union (re.range "p" "p") (re.range "t" "t")))))))(re.++ ((_ re.loop 3 3) (re.range "0" "9")) (str.to_re ""))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "\u{c1}" (str.++ "X" (str.++ "\u{07}" (str.++ "\u{f8}" (str.++ "\u{cd}" (str.++ "\u{c8}" (str.++ "\u{1b}" (str.++ "\u{bc}" (str.++ "\u{c1}" (str.++ "\u{e7}" (str.++ "\u{7f}" ""))))))))))))

(define-fun Witness2 () String (str.++ "C" (str.++ "`" (str.++ "}" (str.++ "\u{da}" (str.++ "\u{b3}" (str.++ "\u{bf}" (str.++ "," (str.++ "\u{86}" (str.++ "\u{f8}" ""))))))))))

(assert (= regexA (re.union (re.++ (str.to_re "") (re.++ (re.* (re.union (re.range "\u{00}" "\u{09}") (re.range "\u{0b}" "\u{ff}")))(re.++ (re.union (re.++ (re.union (re.range "A" "Z") (re.range "a" "z")) (re.union (re.range "\u{00}" "@")(re.union (re.range "[" "`") (re.range "{" "\u{ff}")))) (re.++ (re.union (re.range "\u{00}" "@")(re.union (re.range "[" "`") (re.range "{" "\u{ff}"))) (re.union (re.range "A" "Z") (re.range "a" "z")))) (re.++ ((_ re.loop 4 4) (re.union (re.range "\u{00}" "\u{09}") (re.range "\u{0b}" "\u{ff}"))) (re.* (re.union (re.range "\u{00}" "\u{09}") (re.range "\u{0b}" "\u{ff}")))))))(re.union (re.++ (re.+ (re.union (re.range "\u{00}" "\u{09}") (re.range "\u{0b}" "\u{ff}")))(re.++ (re.union (re.++ (re.union (re.range "A" "Z") (re.range "a" "z")) (re.union (re.range "\u{00}" "@")(re.union (re.range "[" "`") (re.range "{" "\u{ff}")))) (re.++ (re.union (re.range "\u{00}" "@")(re.union (re.range "[" "`") (re.range "{" "\u{ff}"))) (re.union (re.range "A" "Z") (re.range "a" "z")))) (re.++ ((_ re.loop 3 3) (re.union (re.range "\u{00}" "\u{09}") (re.range "\u{0b}" "\u{ff}"))) (re.* (re.union (re.range "\u{00}" "\u{09}") (re.range "\u{0b}" "\u{ff}"))))))(re.union (re.++ (re.++ ((_ re.loop 2 2) (re.union (re.range "\u{00}" "\u{09}") (re.range "\u{0b}" "\u{ff}"))) (re.* (re.union (re.range "\u{00}" "\u{09}") (re.range "\u{0b}" "\u{ff}"))))(re.++ (re.union (re.++ (re.union (re.range "A" "Z") (re.range "a" "z")) (re.union (re.range "\u{00}" "@")(re.union (re.range "[" "`") (re.range "{" "\u{ff}")))) (re.++ (re.union (re.range "\u{00}" "@")(re.union (re.range "[" "`") (re.range "{" "\u{ff}"))) (re.union (re.range "A" "Z") (re.range "a" "z")))) (re.++ ((_ re.loop 2 2) (re.union (re.range "\u{00}" "\u{09}") (re.range "\u{0b}" "\u{ff}"))) (re.* (re.union (re.range "\u{00}" "\u{09}") (re.range "\u{0b}" "\u{ff}"))))))(re.union (re.++ (re.++ ((_ re.loop 3 3) (re.union (re.range "\u{00}" "\u{09}") (re.range "\u{0b}" "\u{ff}"))) (re.* (re.union (re.range "\u{00}" "\u{09}") (re.range "\u{0b}" "\u{ff}"))))(re.++ (re.union (re.++ (re.union (re.range "A" "Z") (re.range "a" "z")) (re.union (re.range "\u{00}" "@")(re.union (re.range "[" "`") (re.range "{" "\u{ff}")))) (re.++ (re.union (re.range "\u{00}" "@")(re.union (re.range "[" "`") (re.range "{" "\u{ff}"))) (re.union (re.range "A" "Z") (re.range "a" "z")))) (re.+ (re.union (re.range "\u{00}" "\u{09}") (re.range "\u{0b}" "\u{ff}"))))) (re.++ (re.++ (re.++ ((_ re.loop 4 4) (re.union (re.range "\u{00}" "\u{09}") (re.range "\u{0b}" "\u{ff}"))) (re.* (re.union (re.range "\u{00}" "\u{09}") (re.range "\u{0b}" "\u{ff}"))))(re.++ (re.union (re.++ (re.union (re.range "A" "Z") (re.range "a" "z")) (re.union (re.range "\u{00}" "@")(re.union (re.range "[" "`") (re.range "{" "\u{ff}")))) (re.++ (re.union (re.range "\u{00}" "@")(re.union (re.range "[" "`") (re.range "{" "\u{ff}"))) (re.union (re.range "A" "Z") (re.range "a" "z")))) (re.* (re.union (re.range "\u{00}" "\u{09}") (re.range "\u{0b}" "\u{ff}"))))) (str.to_re ""))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "1" (str.++ "1" (str.++ "." (str.++ "0" (str.++ "9" (str.++ "9" (str.++ "." (str.++ "9" (str.++ "." (str.++ "6" "")))))))))))

(define-fun Witness2 () String (str.++ "0" (str.++ "0" (str.++ "0" (str.++ "0" (str.++ "2" (str.++ "5" (str.++ "5" (str.++ "." (str.++ "2" (str.++ "4" (str.++ "7" (str.++ "." (str.++ "8" (str.++ "." (str.++ "1" (str.++ "9" "")))))))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ ((_ re.loop 3 3) (re.union (re.++ (re.* (re.range "0" "0"))(re.++ (re.opt (re.range "0" "1"))(re.++ ((_ re.loop 1 2) (re.range "0" "9")) (re.range "." ".")))) (re.++ (re.* (re.range "0" "0"))(re.++ (re.union (re.++ (re.range "2" "2")(re.++ (re.range "0" "4") (re.range "0" "9"))) (re.++ (str.to_re (str.++ "2" (str.++ "5" ""))) (re.range "0" "5"))) (re.range "." ".")))))(re.++ (re.union (re.++ (re.* (re.range "0" "0"))(re.++ (re.opt (re.range "0" "1")) ((_ re.loop 1 2) (re.range "0" "9")))) (re.++ (re.* (re.range "0" "0")) (re.union (re.++ (re.range "2" "2")(re.++ (re.range "0" "4") (re.range "0" "9"))) (re.++ (str.to_re (str.++ "2" (str.++ "5" ""))) (re.range "0" "5"))))) (str.to_re ""))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "p" (str.++ "e" (str.++ "f" (str.++ "s" (str.++ "1" (str.++ "." (str.++ "f" (str.++ "h" (str.++ "-" (str.++ "-" (str.++ "w" (str.++ "5" (str.++ "-" (str.++ "t" (str.++ "." (str.++ "z" (str.++ "m" (str.++ "." (str.++ "5" (str.++ "0" (str.++ "x" (str.++ "k" (str.++ "8" (str.++ "6" (str.++ "." (str.++ "5" (str.++ "t" (str.++ "0" (str.++ "g" (str.++ "4" (str.++ "v" (str.++ "z" (str.++ "-" (str.++ "l" (str.++ "-" (str.++ "-" (str.++ "9" (str.++ "." (str.++ "1" (str.++ "a" (str.++ "." (str.++ "8" (str.++ "c" ""))))))))))))))))))))))))))))))))))))))))))))

(define-fun Witness2 () String (str.++ "9" (str.++ "9" (str.++ "v" (str.++ "9" (str.++ "8" (str.++ "8" (str.++ "." (str.++ "8" (str.++ "h" (str.++ "z" (str.++ "9" (str.++ "9" (str.++ "." (str.++ "t" (str.++ "d" (str.++ "d" (str.++ "." (str.++ "8" (str.++ "z" (str.++ "8" (str.++ "o" (str.++ "f" (str.++ "k" (str.++ "v" (str.++ "x" (str.++ "l" (str.++ "z" (str.++ "g" (str.++ "w" (str.++ "a" (str.++ "." (str.++ "z" (str.++ "6" (str.++ "." (str.++ "u" (str.++ "8" "")))))))))))))))))))))))))))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.* (re.++ (re.+ (re.union (re.range "0" "9") (re.range "a" "z")))(re.++ (re.opt (re.++ (re.* (re.union (re.range "-" "-")(re.union (re.range "0" "9") (re.range "a" "z")))) (re.+ (re.union (re.range "0" "9") (re.range "a" "z"))))) (re.range "." "."))))(re.++ ((_ re.loop 1 63) (re.++ (re.+ (re.union (re.range "0" "9") (re.range "a" "z"))) (re.opt (re.++ (re.* (re.union (re.range "-" "-")(re.union (re.range "0" "9") (re.range "a" "z")))) (re.+ (re.union (re.range "0" "9") (re.range "a" "z")))))))(re.++ (re.+ (re.++ (re.range "." ".") ((_ re.loop 2 7) (re.union (re.range "0" "9") (re.range "a" "z"))))) (str.to_re "")))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "9" (str.++ "," (str.++ "8" (str.++ "8" (str.++ "9" ""))))))

(define-fun Witness2 () String (str.++ "2" (str.++ "7" (str.++ "." (str.++ "0" (str.++ "9" ""))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.opt (re.range "$" "$"))(re.++ (re.union (re.++ ((_ re.loop 1 3) (re.range "0" "9"))(re.++ (re.range "," ",")(re.++ (re.* (re.++ ((_ re.loop 3 3) (re.range "0" "9")) (re.range "," ","))) ((_ re.loop 3 3) (re.range "0" "9"))))) (re.+ (re.range "0" "9")))(re.++ (re.opt (re.++ (re.range "." ".")(re.++ (re.range "0" "9") (re.range "0" "9")))) (str.to_re "")))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "Z" (str.++ "9" (str.++ "4" (str.++ "X" (str.++ "A" (str.++ "-" (str.++ "Y" (str.++ "8" (str.++ "8" (str.++ "D" (str.++ "8" (str.++ "-" (str.++ "T" (str.++ "S" (str.++ "U" (str.++ "2" (str.++ "D" (str.++ "-" (str.++ "8" (str.++ "4" (str.++ "3" (str.++ "M" (str.++ "T" (str.++ "-" (str.++ "X" (str.++ "2" (str.++ "C" (str.++ "1" (str.++ "W" ""))))))))))))))))))))))))))))))

(define-fun Witness2 () String (str.++ "L" (str.++ "U" (str.++ "M" (str.++ "I" (str.++ "9" (str.++ "-" (str.++ "9" (str.++ "1" (str.++ "T" (str.++ "Z" (str.++ "C" (str.++ "-" (str.++ "7" (str.++ "1" (str.++ "8" (str.++ "3" (str.++ "Z" (str.++ "-" (str.++ "9" (str.++ "T" (str.++ "8" (str.++ "E" (str.++ "Z" (str.++ "-" (str.++ "4" (str.++ "R" (str.++ "8" (str.++ "A" (str.++ "8" ""))))))))))))))))))))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ ((_ re.loop 5 5) (re.union (re.range "1" "9") (re.range "A" "Z")))(re.++ (re.range "-" "-")(re.++ ((_ re.loop 5 5) (re.union (re.range "1" "9") (re.range "A" "Z")))(re.++ (re.range "-" "-")(re.++ ((_ re.loop 5 5) (re.union (re.range "1" "9") (re.range "A" "Z")))(re.++ (re.range "-" "-")(re.++ ((_ re.loop 5 5) (re.union (re.range "1" "9") (re.range "A" "Z")))(re.++ (re.range "-" "-")(re.++ ((_ re.loop 5 5) (re.union (re.range "1" "9") (re.range "A" "Z"))) (str.to_re "")))))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "6" (str.++ "0" (str.++ "1" (str.++ "\u{98}" (str.++ "0" (str.++ "9" (str.++ "8" (str.++ "1" (str.++ "0" (str.++ "9" (str.++ "3" (str.++ "3" (str.++ "9" ""))))))))))))))

(define-fun Witness2 () String (str.++ "4" (str.++ "9" (str.++ "1" (str.++ "1" (str.++ "8" (str.++ "0" (str.++ "0" (str.++ "6" (str.++ "6" (str.++ "9" (str.++ "8" (str.++ "4" (str.++ "2" (str.++ "6" (str.++ "8" (str.++ "3" (str.++ "2" (str.++ "8" "")))))))))))))))))))

(assert (= regexA (re.union (re.++ (str.to_re "")(re.++ (re.++ (re.range "5" "5") (re.union (re.range "0" "0") (re.range "6" "8")))(re.++ ((_ re.loop 11 18) (re.range "0" "9")) (str.to_re ""))))(re.union (re.++ (str.to_re "")(re.++ (re.++ (re.range "6" "6") (re.union (re.range "\u{00}" "/")(re.union (re.range "1" "4") (re.range "6" "\u{ff}"))))(re.++ ((_ re.loop 11 18) (re.range "0" "9")) (str.to_re ""))))(re.union (re.++ (str.to_re "")(re.++ (str.to_re (str.++ "6" (str.++ "0" (str.++ "1" ""))))(re.++ (re.union (re.range "\u{00}" "0") (re.range "2" "\u{ff}"))(re.++ ((_ re.loop 9 16) (re.range "0" "9")) (str.to_re "")))))(re.union (re.++ (str.to_re "")(re.++ (str.to_re (str.++ "6" (str.++ "0" (str.++ "1" (str.++ "1" "")))))(re.++ ((_ re.loop 9 11) (re.range "0" "9")) (str.to_re ""))))(re.union (re.++ (str.to_re "")(re.++ (str.to_re (str.++ "6" (str.++ "0" (str.++ "1" (str.++ "1" "")))))(re.++ ((_ re.loop 13 16) (re.range "0" "9")) (str.to_re ""))))(re.union (re.++ (str.to_re "")(re.++ (str.to_re (str.++ "6" (str.++ "5" "")))(re.++ ((_ re.loop 11 13) (re.range "0" "9")) (str.to_re ""))))(re.union (re.++ (str.to_re "")(re.++ (str.to_re (str.++ "6" (str.++ "5" "")))(re.++ ((_ re.loop 15 18) (re.range "0" "9")) (str.to_re ""))))(re.union (re.++ (str.to_re "")(re.++ (str.to_re (str.++ "4" (str.++ "9" (str.++ "0" (str.++ "3" (str.++ "0" ""))))))(re.++ (re.range "2" "9") (re.union (re.++ ((_ re.loop 10 10) (re.range "0" "9")) (str.to_re "")) (re.++ ((_ re.loop 12 13) (re.range "0" "9")) (str.to_re ""))))))(re.union (re.++ (str.to_re "")(re.++ (str.to_re (str.++ "4" (str.++ "9" (str.++ "0" (str.++ "3" (str.++ "3" ""))))))(re.++ (re.range "5" "9") (re.union (re.++ ((_ re.loop 10 10) (re.range "0" "9")) (str.to_re "")) (re.++ ((_ re.loop 12 13) (re.range "0" "9")) (str.to_re ""))))))(re.union (re.++ (str.to_re "")(re.++ (str.to_re (str.++ "4" (str.++ "9" (str.++ "1" (str.++ "1" (str.++ "0" ""))))))(re.++ (re.range "1" "2") (re.union (re.++ ((_ re.loop 10 10) (re.range "0" "9")) (str.to_re "")) (re.++ ((_ re.loop 12 13) (re.range "0" "9")) (str.to_re ""))))))(re.union (re.++ (str.to_re "")(re.++ (str.to_re (str.++ "4" (str.++ "9" (str.++ "1" (str.++ "1" (str.++ "7" ""))))))(re.++ (re.range "4" "9") (re.union (re.++ ((_ re.loop 10 10) (re.range "0" "9")) (str.to_re "")) (re.++ ((_ re.loop 12 13) (re.range "0" "9")) (str.to_re ""))))))(re.union (re.++ (str.to_re "")(re.++ (str.to_re (str.++ "4" (str.++ "9" (str.++ "1" (str.++ "1" (str.++ "8" ""))))))(re.++ (re.range "0" "2") (re.union (re.++ ((_ re.loop 10 10) (re.range "0" "9")) (str.to_re "")) (re.++ ((_ re.loop 12 13) (re.range "0" "9")) (str.to_re "")))))) (re.++ (str.to_re "")(re.++ (str.to_re (str.++ "4" (str.++ "9" (str.++ "3" (str.++ "6" ""))))) (re.union (re.++ ((_ re.loop 12 12) (re.range "0" "9")) (str.to_re "")) (re.++ ((_ re.loop 14 15) (re.range "0" "9")) (str.to_re "")))))))))))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "+" (str.++ "@" (str.++ "[" (str.++ "9" (str.++ "4" (str.++ "8" (str.++ "." (str.++ "2" (str.++ "8" (str.++ "8" (str.++ "." (str.++ "8" (str.++ "." (str.++ "X" (str.++ "j" ""))))))))))))))))

(define-fun Witness2 () String (str.++ "-" (str.++ "@" (str.++ "P" (str.++ "Z" (str.++ "S" (str.++ "N" (str.++ "." (str.++ "-" (str.++ "." (str.++ "8" "")))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.+ (re.union (re.range "+" "+")(re.union (re.range "-" ".")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_") (re.range "a" "z")))))))(re.++ (re.range "@" "@")(re.++ (re.union (re.++ (re.range "[" "[")(re.++ ((_ re.loop 1 3) (re.range "0" "9"))(re.++ (re.range "." ".")(re.++ ((_ re.loop 1 3) (re.range "0" "9"))(re.++ (re.range "." ".")(re.++ ((_ re.loop 1 3) (re.range "0" "9")) (re.range "." "."))))))) (re.+ (re.++ (re.+ (re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z"))))) (re.range "." "."))))(re.++ (re.union ((_ re.loop 2 6) (re.union (re.range "A" "Z") (re.range "a" "z"))) ((_ re.loop 1 3) (re.range "0" "9")))(re.++ (re.opt (re.range "]" "]")) (str.to_re "")))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "X" (str.++ "w" (str.++ "t" (str.++ "z" (str.++ "m" (str.++ "a" (str.++ "n" ""))))))))

(define-fun Witness2 () String (str.++ "S" (str.++ "z" (str.++ "t" (str.++ "z" (str.++ "m" (str.++ "a" (str.++ "n" ""))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.range "A" "Z")(re.++ (re.+ (re.range "a" "z"))(re.++ (re.opt (str.to_re (str.++ "t" (str.++ "z" ""))))(re.++ (re.union (str.to_re (str.++ "m" (str.++ "a" (str.++ "n" "")))) (str.to_re (str.++ "b" (str.++ "e" (str.++ "r" (str.++ "g" "")))))) (str.to_re ""))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "\u{9e}" (str.++ "\u{97}" (str.++ "\u{94}" (str.++ "\u{fd}" (str.++ "\u{c2}" (str.++ "\u{12}" (str.++ "," (str.++ "\u{9e}" (str.++ "\u{16}" (str.++ "," (str.++ "d" (str.++ "\u{f6}" "")))))))))))))

(define-fun Witness2 () String (str.++ "\u{94}" (str.++ "_" (str.++ "\u{ad}" (str.++ "," (str.++ "/" (str.++ "," (str.++ "-" (str.++ "E" "")))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.+ (re.union (re.range "\u{00}" "+") (re.range "-" "\u{ff}")))(re.++ (re.range "," ",")(re.++ (re.+ (re.union (re.range "\u{00}" "+") (re.range "-" "\u{ff}")))(re.++ (re.range "," ",")(re.++ (re.+ (re.union (re.range "\u{00}" "+") (re.range "-" "\u{ff}"))) (str.to_re "")))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "3" (str.++ "/" (str.++ "8" (str.++ "/" (str.++ "2" (str.++ "0" (str.++ "9" (str.++ "9" "")))))))))

(define-fun Witness2 () String (str.++ "1" (str.++ "8" (str.++ "/" (str.++ "3" (str.++ "2" (str.++ "/" (str.++ "2" (str.++ "0" (str.++ "8" (str.++ "1" "")))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.++ (re.opt (re.range "0" "1"))(re.++ (re.range "0" "9")(re.++ (re.range "/" "/")(re.++ (re.opt (re.range "0" "3"))(re.++ (re.range "0" "9")(re.++ (str.to_re (str.++ "/" (str.++ "2" (str.++ "0" "")))) ((_ re.loop 2 2) (re.range "0" "9")))))))) (str.to_re "")))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "2" (str.++ "8" (str.++ "/" (str.++ "1" (str.++ "1" (str.++ "/" (str.++ "2" (str.++ "0" (str.++ "3" (str.++ "8" (str.++ "\u{a0}" (str.++ "2" (str.++ "1" (str.++ ":" (str.++ "0" (str.++ "6" (str.++ ":" (str.++ "0" (str.++ "3" ""))))))))))))))))))))

(define-fun Witness2 () String (str.++ "0" (str.++ "8" (str.++ "/" (str.++ "1" (str.++ "0" (str.++ "/" (str.++ "2" (str.++ "0" (str.++ "0" (str.++ "1" (str.++ " " (str.++ "0" (str.++ "2" (str.++ ":" (str.++ "2" (str.++ "2" (str.++ ":" (str.++ "4" (str.++ "6" ""))))))))))))))))))))

(assert (= regexA (re.union (re.++ (str.to_re "")(re.++ (re.++ (re.union (re.++ (re.range "0" "2") (re.range "0" "9")) (re.++ (re.range "3" "3") (re.range "0" "1")))(re.++ (re.range "/" "/")(re.++ (re.union (re.++ (re.range "0" "0") (re.range "0" "9")) (re.++ (re.range "1" "1") (re.range "0" "2")))(re.++ (str.to_re (str.++ "/" (str.++ "2" (str.++ "0" "")))) ((_ re.loop 2 2) (re.range "0" "9")))))) (str.to_re ""))) (re.++ (str.to_re "")(re.++ (re.++ (re.union (re.++ (re.range "0" "2") (re.range "0" "9")) (re.++ (re.range "3" "3") (re.range "0" "1")))(re.++ (re.range "/" "/")(re.++ (re.union (re.++ (re.range "0" "0") (re.range "0" "9")) (re.++ (re.range "1" "1") (re.range "0" "2")))(re.++ (str.to_re (str.++ "/" (str.++ "2" (str.++ "0" ""))))(re.++ ((_ re.loop 2 2) (re.range "0" "9"))(re.++ (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))(re.++ (re.union (re.++ (re.range "0" "1") (re.range "0" "9")) (re.++ (re.range "2" "2") (re.range "0" "3")))(re.++ (re.range ":" ":")(re.++ (re.range "0" "5")(re.++ (re.range "0" "9")(re.++ (re.range ":" ":")(re.++ (re.range "0" "5") (re.range "0" "9"))))))))))))) (str.to_re ""))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "-" (str.++ "5" (str.++ "," (str.++ "0" (str.++ "8" (str.++ "1" (str.++ "," (str.++ "9" (str.++ "0" (str.++ "8" (str.++ "," (str.++ "9" (str.++ "9" (str.++ "1" "")))))))))))))))

(define-fun Witness2 () String (str.++ "\u{0d}" (str.++ "2" (str.++ "5" (str.++ "8" "")))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.opt (re.range "$" "$"))(re.++ (re.opt (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (re.opt (re.range "-" "-"))(re.++ (re.union (re.+ (re.range "0" "9")) (re.++ ((_ re.loop 1 3) (re.range "0" "9")) (re.* (re.++ (re.range "," ",") ((_ re.loop 3 3) (re.range "0" "9"))))))(re.++ (re.opt (re.++ (re.range "." ".") (re.++ ((_ re.loop 2 2) (re.range "0" "9")) (re.* (re.range "0" "9"))))) (str.to_re "")))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "1" (str.++ "6" (str.++ "0" (str.++ "0" "")))))

(define-fun Witness2 () String (str.++ "-" (str.++ "3" (str.++ "9" (str.++ "8" (str.++ "7" (str.++ "-" (str.++ "0" (str.++ "9" (str.++ "-" (str.++ "0" (str.++ "1" (str.++ "T" (str.++ "1" (str.++ "3" (str.++ ":" (str.++ "1" (str.++ "8" (str.++ ":" (str.++ "1" (str.++ "8" (str.++ "Z" ""))))))))))))))))))))))

(assert (= regexA (re.union (re.++ (str.to_re "")(re.++ (re.opt (re.range "-" "-"))(re.++ (re.++ (re.union (re.++ (re.range "1" "1") (re.range "6" "9")) (re.++ (re.range "2" "9") (re.range "0" "9")))(re.++ ((_ re.loop 2 2) (re.range "0" "9"))(re.++ (re.range "-" "-")(re.++ (re.union (re.++ (re.range "0" "0") (re.union (re.range "1" "1")(re.union (re.range "3" "3")(re.union (re.range "5" "5") (re.range "7" "8"))))) (re.++ (re.range "1" "1") (re.union (re.range "0" "0") (re.range "2" "2"))))(re.++ (re.range "-" "-") (re.union (re.++ (re.range "0" "0") (re.range "1" "9"))(re.union (re.++ (re.range "1" "2") (re.range "0" "9")) (re.++ (re.range "3" "3") (re.range "0" "1")))))))))(re.++ (re.range "T" "T")(re.++ (re.union (re.++ (re.range "0" "1") (re.range "0" "9")) (re.++ (re.range "2" "2") (re.range "0" "3")))(re.++ (re.range ":" ":")(re.++ (re.++ (re.range "0" "5") (re.range "0" "9"))(re.++ (re.range ":" ":")(re.++ (re.++ (re.range "0" "5") (re.range "0" "9"))(re.++ (re.opt (re.union (re.range "Z" "Z")(re.union (re.++ (re.range "." ".") ((_ re.loop 4 4) (re.range "0" "9"))) (re.++ (re.union (re.range "+" "+")(re.union (re.range "-" "-") (re.range "|" "|")))(re.++ (re.union (re.++ (re.range "0" "1") (re.range "0" "9")) (re.++ (re.range "2" "2") (re.range "0" "3")))(re.++ (re.range ":" ":") (re.++ (re.range "0" "5") (re.range "0" "9")))))))) (str.to_re "")))))))))))(re.union (re.++ (str.to_re "")(re.++ (re.opt (re.range "-" "-"))(re.++ (re.++ (re.union (re.++ (re.range "1" "1") (re.range "6" "9")) (re.++ (re.range "2" "9") (re.range "0" "9")))(re.++ ((_ re.loop 2 2) (re.range "0" "9"))(re.++ (re.range "-" "-")(re.++ (re.union (re.++ (re.range "0" "0") (re.union (re.range "4" "4")(re.union (re.range "6" "6") (re.range "9" "9")))) (str.to_re (str.++ "1" (str.++ "1" ""))))(re.++ (re.range "-" "-") (re.union (re.++ (re.range "0" "0") (re.range "1" "9"))(re.union (re.++ (re.range "1" "2") (re.range "0" "9")) (str.to_re (str.++ "3" (str.++ "0" ""))))))))))(re.++ (re.range "T" "T")(re.++ (re.union (re.++ (re.range "0" "1") (re.range "0" "9")) (re.++ (re.range "2" "2") (re.range "0" "3")))(re.++ (re.range ":" ":")(re.++ (re.++ (re.range "0" "5") (re.range "0" "9"))(re.++ (re.range ":" ":")(re.++ (re.++ (re.range "0" "5") (re.range "0" "9"))(re.++ (re.opt (re.union (re.range "Z" "Z")(re.union (re.++ (re.range "." ".") ((_ re.loop 4 4) (re.range "0" "9"))) (re.++ (re.union (re.range "+" "+")(re.union (re.range "-" "-") (re.range "|" "|")))(re.++ (re.union (re.++ (re.range "0" "1") (re.range "0" "9")) (re.++ (re.range "2" "2") (re.range "0" "3")))(re.++ (re.range ":" ":") (re.++ (re.range "0" "5") (re.range "0" "9")))))))) (str.to_re "")))))))))))(re.union (re.++ (str.to_re "")(re.++ (re.opt (re.range "-" "-")) (re.++ (re.union (str.to_re (str.++ "1" (str.++ "6" "")))(re.union (re.++ (re.union (re.range "2" "2")(re.union (re.range "4" "4") (re.range "8" "8"))) (re.union (re.range "0" "0")(re.union (re.range "4" "4") (re.range "8" "8")))) (re.++ (re.union (re.range "3" "3")(re.union (re.range "5" "5")(re.union (re.range "7" "7") (re.range "9" "9")))) (re.union (re.range "2" "2") (re.range "6" "6"))))) (str.to_re (str.++ "0" (str.++ "0" ""))))))(re.union (re.++ (re.union (re.++ (re.range "1" "1") (re.range "6" "9")) (re.++ (re.range "2" "9") (re.range "0" "9")))(re.++ (re.union (re.++ (re.range "0" "0") (re.union (re.range "4" "4") (re.range "8" "8")))(re.union (re.++ (re.union (re.range "1" "1")(re.union (re.range "3" "3")(re.union (re.range "5" "5")(re.union (re.range "7" "7") (re.range "9" "9"))))) (re.union (re.range "2" "2") (re.range "6" "6"))) (re.++ (re.union (re.range "2" "2")(re.union (re.range "4" "4")(re.union (re.range "6" "6") (re.range "8" "8")))) (re.union (re.range "0" "0")(re.union (re.range "4" "4") (re.range "8" "8"))))))(re.++ (str.to_re (str.++ "-" (str.++ "0" (str.++ "2" (str.++ "-" "")))))(re.++ (re.union (re.++ (re.range "0" "0") (re.range "1" "9"))(re.union (re.++ (re.range "1" "1") (re.range "0" "9")) (re.++ (re.range "2" "2") (re.range "0" "9"))))(re.++ (re.range "T" "T")(re.++ (re.union (re.++ (re.range "0" "1") (re.range "0" "9")) (re.++ (re.range "2" "2") (re.range "0" "3")))(re.++ (re.range ":" ":")(re.++ (re.++ (re.range "0" "5") (re.range "0" "9"))(re.++ (re.range ":" ":")(re.++ (re.++ (re.range "0" "5") (re.range "0" "9"))(re.++ (re.opt (re.union (re.range "Z" "Z")(re.union (re.++ (re.range "." ".") ((_ re.loop 4 4) (re.range "0" "9"))) (re.++ (re.union (re.range "+" "+")(re.union (re.range "-" "-") (re.range "|" "|")))(re.++ (re.union (re.++ (re.range "0" "1") (re.range "0" "9")) (re.++ (re.range "2" "2") (re.range "0" "3")))(re.++ (re.range ":" ":") (re.++ (re.range "0" "5") (re.range "0" "9")))))))) (str.to_re "")))))))))))) (re.++ (str.to_re "")(re.++ (re.opt (re.range "-" "-"))(re.++ (re.union (re.++ (re.range "1" "1") (re.range "6" "9")) (re.++ (re.range "2" "9") (re.range "0" "9")))(re.++ ((_ re.loop 2 2) (re.range "0" "9"))(re.++ (str.to_re (str.++ "-" (str.++ "0" (str.++ "2" (str.++ "-" "")))))(re.++ (re.union (re.++ (re.range "0" "0") (re.range "1" "9"))(re.union (re.++ (re.range "1" "1") (re.range "0" "9")) (re.++ (re.range "2" "2") (re.range "0" "8"))))(re.++ (re.range "T" "T")(re.++ (re.union (re.++ (re.range "0" "1") (re.range "0" "9")) (re.++ (re.range "2" "2") (re.range "0" "3")))(re.++ (re.range ":" ":")(re.++ (re.++ (re.range "0" "5") (re.range "0" "9"))(re.++ (re.range ":" ":")(re.++ (re.++ (re.range "0" "5") (re.range "0" "9"))(re.++ (re.opt (re.union (re.range "Z" "Z")(re.union (re.++ (re.range "." ".") ((_ re.loop 4 4) (re.range "0" "9"))) (re.++ (re.union (re.range "+" "+")(re.union (re.range "-" "-") (re.range "|" "|")))(re.++ (re.union (re.++ (re.range "0" "1") (re.range "0" "9")) (re.++ (re.range "2" "2") (re.range "0" "3")))(re.++ (re.range ":" ":") (re.++ (re.range "0" "5") (re.range "0" "9")))))))) (str.to_re ""))))))))))))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "2" (str.++ "/" (str.++ "2" (str.++ "9" (str.++ "/" (str.++ "2" (str.++ "0" (str.++ "0" (str.++ "0" (str.++ "\u{a0}" (str.++ "0" (str.++ "5" (str.++ ":" (str.++ "3" (str.++ "8" ""))))))))))))))))

(define-fun Witness2 () String (str.++ "1" (str.++ "0" (str.++ "/" (str.++ "2" (str.++ "9" (str.++ "/" (str.++ "4" (str.++ "9" (str.++ "5" (str.++ "2" (str.++ " " (str.++ "0" (str.++ "4" (str.++ ":" (str.++ "5" (str.++ "8" (str.++ ":" (str.++ "3" (str.++ "2" ""))))))))))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.union (re.++ (re.union (re.++ (re.union (re.++ (re.opt (re.range "0" "0")) (re.range "1" "9")) (re.++ (re.range "1" "1") (re.range "0" "2")))(re.++ (re.range "/" "/") (re.union (re.++ (re.opt (re.range "0" "0")) (re.range "1" "9"))(re.union (re.++ (re.range "1" "1") (re.range "0" "9")) (re.++ (re.range "2" "2") (re.range "0" "8"))))))(re.union (re.++ (re.union (re.++ (re.opt (re.range "0" "0")) (re.union (re.range "1" "1") (re.range "3" "9"))) (re.++ (re.range "1" "1") (re.range "0" "2")))(re.++ (re.range "/" "/") (re.union (str.to_re (str.++ "2" (str.++ "9" ""))) (str.to_re (str.++ "3" (str.++ "0" "")))))) (re.++ (re.union (re.++ (re.opt (re.range "0" "0")) (re.union (re.range "1" "1")(re.union (re.range "3" "3")(re.union (re.range "5" "5") (re.range "7" "8"))))) (re.++ (re.range "1" "1") (re.union (re.range "0" "0") (re.range "2" "2")))) (str.to_re (str.++ "/" (str.++ "3" (str.++ "1" "")))))))(re.++ (re.range "/" "/")(re.++ (re.union (str.to_re (str.++ "1" (str.++ "9" ""))) (re.++ (re.range "2" "9") (re.range "0" "9"))) ((_ re.loop 2 2) (re.range "0" "9"))))) (re.++ (re.opt (re.range "0" "0"))(re.++ (str.to_re (str.++ "2" (str.++ "/" (str.++ "2" (str.++ "9" (str.++ "/" "")))))) (re.union (re.++ (re.union (str.to_re (str.++ "1" (str.++ "9" ""))) (re.++ (re.range "2" "9") (re.range "0" "9"))) (re.union (re.++ (re.range "0" "0") (re.union (re.range "4" "4") (re.range "8" "8")))(re.union (re.++ (re.union (re.range "2" "2")(re.union (re.range "4" "4")(re.union (re.range "6" "6") (re.range "8" "8")))) (re.union (re.range "0" "0")(re.union (re.range "4" "4") (re.range "8" "8")))) (re.++ (re.union (re.range "1" "1")(re.union (re.range "3" "3")(re.union (re.range "5" "5")(re.union (re.range "7" "7") (re.range "9" "9"))))) (re.union (re.range "2" "2") (re.range "6" "6")))))) (re.++ (re.union (re.++ (re.union (re.range "2" "2")(re.union (re.range "4" "4")(re.union (re.range "6" "6") (re.range "8" "8")))) (re.union (re.range "0" "0")(re.union (re.range "4" "4") (re.range "8" "8")))) (re.++ (re.union (re.range "3" "3")(re.union (re.range "5" "5")(re.union (re.range "7" "7") (re.range "9" "9")))) (re.union (re.range "2" "2") (re.range "6" "6")))) (str.to_re (str.++ "0" (str.++ "0" ""))))))))(re.++ (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))(re.++ (re.union (re.++ (re.union (re.++ (re.opt (re.range "0" "0")) (re.range "1" "9")) (re.++ (re.range "1" "1") (re.range "0" "2")))(re.++ (re.union (re.range "." ".") (re.range ":" ":"))(re.++ (re.range "0" "5")(re.++ (re.range "0" "9")(re.++ (re.opt (re.++ (re.union (re.range "." ".") (re.range ":" ":"))(re.++ (re.range "0" "5") (re.range "0" "9"))))(re.++ (re.opt (re.range " " " ")) (re.union (str.to_re (str.++ "A" (str.++ "M" "")))(re.union (str.to_re (str.++ "a" (str.++ "m" "")))(re.union (str.to_re (str.++ "a" (str.++ "M" "")))(re.union (str.to_re (str.++ "A" (str.++ "m" "")))(re.union (str.to_re (str.++ "P" (str.++ "M" "")))(re.union (str.to_re (str.++ "p" (str.++ "m" "")))(re.union (str.to_re (str.++ "p" (str.++ "M" ""))) (str.to_re (str.++ "P" (str.++ "m" "")))))))))))))))) (re.++ (re.union (re.++ (re.opt (re.range "0" "0")) (re.range "0" "9"))(re.union (re.++ (re.range "1" "1") (re.range "0" "9")) (re.++ (re.range "2" "2") (re.range "0" "3"))))(re.++ (re.union (re.range "." ".") (re.range ":" ":"))(re.++ (re.range "0" "5")(re.++ (re.range "0" "9") (re.opt (re.++ (re.union (re.range "." ".") (re.range ":" ":"))(re.++ (re.range "0" "5") (re.range "0" "9"))))))))) (str.to_re "")))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "1" (str.++ "0" (str.++ "8" (str.++ "9" (str.++ "1" (str.++ "9" (str.++ "2" (str.++ "8" (str.++ "-" (str.++ "7" (str.++ "2" (str.++ "6" (str.++ "8" ""))))))))))))))

(define-fun Witness2 () String (str.++ "1" (str.++ "|" (str.++ "4" (str.++ "9" (str.++ "1" (str.++ "8" (str.++ "3" (str.++ "8" (str.++ "-" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "9" ""))))))))))))))

(assert (= regexA (re.++ (re.range "1" "2")(re.++ (re.union (re.range "0" "0")(re.union (re.range "9" "9") (re.range "|" "|")))(re.++ ((_ re.loop 2 2) (re.range "0" "9"))(re.++ (re.range "0" "1")(re.++ (re.range "0" "9")(re.++ (re.range "0" "3")(re.++ (re.range "0" "9")(re.++ (re.range "-" "-") ((_ re.loop 4 4) (re.range "0" "9"))))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "*" (str.++ "." (str.++ "A" (str.++ "d" (str.++ "z" ""))))))

(define-fun Witness2 () String (str.++ "*" (str.++ "." (str.++ "Z" (str.++ "q" (str.++ "Y" ""))))))

(assert (= regexA (re.union (re.++ (str.to_re "")(re.++ (str.to_re (str.++ "*" (str.++ "." "")))(re.++ (re.union (re.range "A" "Z") (re.range "a" "z"))(re.++ (re.union (re.range "A" "Z") (re.range "a" "z"))(re.++ (re.union (re.range "A" "Z") (re.range "a" "z")) (str.to_re "")))))) (re.++ (str.to_re "")(re.++ (str.to_re (str.++ "*" (str.++ "." (str.++ "*" "")))) (str.to_re ""))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "3" (str.++ "4" (str.++ "-" (str.++ "2" (str.++ "2" (str.++ "-" (str.++ "4" ""))))))))

(define-fun Witness2 () String (str.++ "8" (str.++ "8" (str.++ "-" (str.++ "4" (str.++ "1" (str.++ "-" (str.++ "8" ""))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ ((_ re.loop 2 6) (re.range "0" "9"))(re.++ (re.range "-" "-")(re.++ ((_ re.loop 2 2) (re.range "0" "9"))(re.++ (re.range "-" "-")(re.++ (re.range "0" "9") (str.to_re "")))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "\u{85}" (str.++ "z" (str.++ "I" ""))))

(define-fun Witness2 () String (str.++ "3" (str.++ "t" (str.++ "w" ""))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.+ (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "'" "'")(re.union (re.range "-" ".")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))))))))) (str.to_re "")))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "I" (str.++ "w" (str.++ "T" (str.++ "w" (str.++ "E" (str.++ "l" (str.++ "n" (str.++ "q" (str.++ "i" (str.++ "p" (str.++ "i" (str.++ "j" (str.++ "U" (str.++ "a" (str.++ "d" (str.++ "z" (str.++ "i" (str.++ "s" (str.++ "X" (str.++ "V" (str.++ "O" (str.++ "X" (str.++ "Q" (str.++ "L" (str.++ "F" (str.++ "Z" (str.++ "H" (str.++ "H" (str.++ "P" (str.++ "r" "")))))))))))))))))))))))))))))))

(define-fun Witness2 () String (str.++ "T" (str.++ "U" (str.++ "B" (str.++ "y" (str.++ "w" (str.++ "X" (str.++ "a" (str.++ "F" (str.++ "y" (str.++ "Z" (str.++ "k" (str.++ "M" (str.++ "X" (str.++ "V" (str.++ "T" (str.++ "B" (str.++ "R" (str.++ "f" (str.++ "n" (str.++ "P" (str.++ "T" ""))))))))))))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.++ (re.+ (re.range "A" "Z"))(re.++ (re.+ (re.range "a" "z"))(re.++ (re.* (re.range "A" "Z"))(re.++ (re.* (re.range "a" "z"))(re.++ (re.* (re.range "A" "Z"))(re.++ (re.* (re.range "a" "z"))(re.++ (re.* (re.range "A" "Z"))(re.++ (re.* (re.range "a" "z"))(re.++ (re.* (re.range "A" "Z"))(re.++ (re.* (re.range "a" "z"))(re.++ (re.* (re.range "A" "Z"))(re.++ (re.* (re.range "a" "z"))(re.++ (re.* (re.range "A" "Z"))(re.++ (re.* (re.range "a" "z"))(re.++ (re.* (re.range "A" "Z"))(re.++ (re.* (re.range "a" "z"))(re.++ (re.* (re.range "A" "Z"))(re.++ (re.* (re.range "a" "z"))(re.++ (re.* (re.range "A" "Z"))(re.++ (re.* (re.range "a" "z"))(re.++ (re.* (re.range "A" "Z"))(re.++ (re.* (re.range "a" "z"))(re.++ (re.* (re.range "A" "Z")) (re.* (re.range "a" "z"))))))))))))))))))))))))) (str.to_re "")))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "C" (str.++ "o" (str.++ "n" (str.++ "t" (str.++ "e" (str.++ "n" (str.++ "t" (str.++ "-" (str.++ "T" (str.++ "y" (str.++ "p" (str.++ "e" (str.++ ":" (str.++ "\u{85}" (str.++ " " (str.++ "l" (str.++ "9" (str.++ "8" (str.++ "\u{a0}" (str.++ "/" (str.++ ";" (str.++ "\u{0c}" "")))))))))))))))))))))))

(define-fun Witness2 () String (str.++ "C" (str.++ "o" (str.++ "n" (str.++ "t" (str.++ "e" (str.++ "n" (str.++ "t" (str.++ "-" (str.++ "T" (str.++ "y" (str.++ "p" (str.++ "e" (str.++ ":" (str.++ "\u{aa}" (str.++ "9" (str.++ "/" (str.++ ";" (str.++ "\u{a0}" (str.++ "\u{b5}" (str.++ "\u{d6}" (str.++ "=" (str.++ " " (str.++ "\u{22}" (str.++ "<" (str.++ "\u{22}" (str.++ "l" "")))))))))))))))))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (str.to_re (str.++ "C" (str.++ "o" (str.++ "n" (str.++ "t" (str.++ "e" (str.++ "n" (str.++ "t" (str.++ "-" (str.++ "T" (str.++ "y" (str.++ "p" (str.++ "e" (str.++ ":" ""))))))))))))))(re.++ (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))(re.++ (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (re.opt (re.range "/" "/"))(re.++ (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (re.opt (re.* (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))))(re.++ (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (re.range ";" ";")(re.++ (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))) (re.opt (re.++ (re.opt (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))))(re.++ (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (re.range "=" "=")(re.++ (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))) (re.union (re.++ (re.range "\u{22}" "\u{22}")(re.++ (re.+ (re.union (re.range "\u{00}" "\u{09}") (re.range "\u{0b}" "\u{ff}"))) (re.range "\u{22}" "\u{22}"))) (re.+ (re.union (re.range "\u{00}" "\u{08}")(re.union (re.range "\u{0e}" "\u{1f}")(re.union (re.range "!" "\u{84}")(re.union (re.range "\u{86}" "\u{9f}") (re.range "\u{a1}" "\u{ff}")))))))))))))))))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "8" (str.++ ":" (str.++ "3" (str.++ "8" "")))))

(define-fun Witness2 () String (str.++ "6" (str.++ ":" (str.++ "0" (str.++ "6" "")))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.union (re.++ (re.opt (re.range "0" "1")) (re.range "0" "9")) (re.++ (re.range "2" "2") (re.range "0" "3")))(re.++ (re.range ":" ":")(re.++ (re.++ (re.range "0" "5") (re.range "0" "9")) (str.to_re "")))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "\u{ae}" (str.++ "\u{ac}" (str.++ "\u{ee}" (str.++ "E" (str.++ "\u{ac}" ""))))))

(define-fun Witness2 () String (str.++ "\u{d4}" (str.++ "0" (str.++ "," (str.++ "8" "")))))

(assert (= regexA (re.++ (re.++ (re.union (re.range "\u{00}" "+")(re.union (re.range "-" "/") (re.range ":" "\u{ff}"))) (re.* (re.union (re.range "\u{00}" "/") (re.range ":" "\u{ff}"))))(re.++ (re.union (re.* (re.range "0" "9")) (re.++ (re.* (re.range "0" "9"))(re.++ (re.range "," ",") (re.* (re.range "0" "9"))))) (str.to_re "")))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "6" (str.++ "0" (str.++ "6" (str.++ "6" (str.++ "3" (str.++ "3" (str.++ "1" (str.++ "8" (str.++ "5" (str.++ "8" (str.++ "2" (str.++ "9" (str.++ "9" (str.++ "9" (str.++ "8" (str.++ "9" "")))))))))))))))))

(define-fun Witness2 () String (str.++ "6" (str.++ "6" (str.++ "1" (str.++ "6" (str.++ "4" (str.++ "0" (str.++ "9" (str.++ "9" (str.++ "9" (str.++ "6" (str.++ "8" (str.++ "1" (str.++ "0" (str.++ "2" (str.++ "3" (str.++ "7" "")))))))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ ((_ re.loop 4 4) (re.union (re.range "0" "1") (re.range "6" "6")))(re.++ ((_ re.loop 12 12) (re.range "0" "9")) (str.to_re ""))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "\u{8f}" (str.++ "0" (str.++ "\u{1b}" (str.++ "\u{1a}" (str.++ "p" (str.++ "r" (str.++ "e" (str.++ "s" (str.++ "c" (str.++ "r" (str.++ "1" (str.++ "p" (str.++ "t" (str.++ "\u{f5}" "")))))))))))))))

(define-fun Witness2 () String (str.++ "P" (str.++ "r" (str.++ "e" (str.++ "$" (str.++ "c" (str.++ "r" (str.++ "i" (str.++ "p" (str.++ "t" ""))))))))))

(assert (= regexA (re.++ (re.* (re.union (re.range "\u{00}" "\u{09}") (re.range "\u{0b}" "\u{ff}")))(re.++ (re.union (re.range "P" "P") (re.range "p" "p"))(re.++ (str.to_re (str.++ "r" (str.++ "e" "")))(re.++ (re.union (re.range "$" "$")(re.union (re.range "S" "S") (re.range "s" "s")))(re.++ (str.to_re (str.++ "c" (str.++ "r" "")))(re.++ (re.union (re.range "1" "1")(re.union (re.range "I" "I") (re.range "i" "i")))(re.++ (str.to_re (str.++ "p" (str.++ "t" ""))) (re.* (re.union (re.range "\u{00}" "\u{09}") (re.range "\u{0b}" "\u{ff}"))))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "Z" (str.++ ":" (str.++ "\u{5c}" (str.++ "\u{de}" (str.++ "\u{aa}" (str.++ "\u{f2}" (str.++ "\u{12}" ""))))))))

(define-fun Witness2 () String (str.++ "\u{5c}" (str.++ "\u{5c}" (str.++ "\u{c1}" ""))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.++ (re.union (re.++ (str.to_re (str.++ "\u{5c}" (str.++ "\u{5c}" ""))) (re.+ (re.union (re.range "\u{00}" "\u{1f}")(re.union (re.range "!" "!")(re.union (re.range "#" ")")(re.union (re.range "+" "-")(re.union (re.range "0" "9")(re.union (re.range ";" ";")(re.union (re.range "=" "=")(re.union (re.range "@" "[")(re.union (re.range "]" "{") (re.range "}" "\u{ff}")))))))))))) (re.++ (re.union (re.range "A" "Z") (re.range "a" "z")) (str.to_re (str.++ ":" (str.++ "\u{5c}" ""))))) (re.* (re.++ (re.* (re.union (re.range "\u{00}" "\u{1f}")(re.union (re.range "!" "!")(re.union (re.range "#" ")")(re.union (re.range "+" "-")(re.union (re.range "0" "9")(re.union (re.range ";" ";")(re.union (re.range "=" "=")(re.union (re.range "@" "[")(re.union (re.range "]" "{") (re.range "}" "\u{ff}"))))))))))) (re.* (re.range "\u{5c}" "\u{5c}"))))) (str.to_re "")))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "\u{85}" ""))

(define-fun Witness2 () String (str.++ "\u{85}" (str.++ "z" "")))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.+ (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "-" ".")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "a" "z")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))))))) (str.to_re "")))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "\u{1c}" (str.++ "\u{22}" (str.++ "\u{22}" (str.++ "\u{9e}" (str.++ "\u{ec}" (str.++ "\u{b3}" (str.++ "\u{92}" ""))))))))

(define-fun Witness2 () String (str.++ "\u{d5}" (str.++ "&" (str.++ "1" (str.++ "\u{85}" "")))))

(assert (= regexA (re.++ (re.opt (re.range ";" ";")) (re.union (re.++ (re.range "\u{22}" "\u{22}")(re.++ (re.* (re.union (re.union (re.range "\u{00}" "!") (re.range "#" "\u{ff}")) (str.to_re (str.++ "\u{22}" (str.++ "\u{22}" ""))))) (re.range "\u{22}" "\u{22}"))) (re.* (re.union (re.range "\u{00}" ":") (re.range "<" "\u{ff}")))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "-" (str.++ "1" (str.++ "8" (str.++ "0" (str.++ "." (str.++ "9" (str.++ "5" ""))))))))

(define-fun Witness2 () String (str.++ "-" (str.++ "8" (str.++ "0" (str.++ "." (str.++ "0" ""))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.opt (re.range "-" "-"))(re.++ (re.union (re.++ (re.opt (re.range "1" "1"))(re.++ (re.range "1" "7") (re.range "1" "9")))(re.union (re.++ (re.opt (re.range "1" "1"))(re.++ (re.range "1" "8") (re.range "0" "0"))) (re.++ (re.opt (re.range "1" "9")) (re.range "0" "9"))))(re.++ (re.range "." ".") ((_ re.loop 1 6) (re.range "0" "9"))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "|" (str.++ "A" (str.++ "7" (str.++ "2" (str.++ "8" (str.++ "8" "")))))))

(define-fun Witness2 () String (str.++ "|" (str.++ "C" (str.++ "8" (str.++ "5" (str.++ "8" (str.++ "4" "")))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.union (re.range "B" "B")(re.union (re.range "K" "K")(re.union (re.range "P" "P")(re.union (re.range "T" "T") (re.range "|" "|")))))(re.++ (re.range "A" "Z")(re.++ ((_ re.loop 4 4) (re.range "0" "9")) (str.to_re "")))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "2" (str.++ "9" (str.++ "t" (str.++ "1" (str.++ "." (str.++ "C" (str.++ "8" (str.++ "1" (str.++ "2" (str.++ "9" "")))))))))))

(define-fun Witness2 () String (str.++ "0" (str.++ "9" (str.++ "H" (str.++ "0" (str.++ "8" (str.++ "\u{db}" (str.++ "4" (str.++ "8" (str.++ "8" (str.++ "8" "")))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.union (re.union (re.range "." ".")(re.union (re.range "1" "1") (re.range "9" "9")))(re.union (re.++ (re.range "0" "0") (re.union (re.range "." ".")(re.union (re.range "1" "1") (re.range "9" "9"))))(re.union (re.++ (re.range "1" "1") (re.range "0" "9"))(re.union (re.++ (re.range "2" "2") (re.range "0" "9")) (re.++ (re.range "3" "3") (re.union (re.range "." ".") (re.range "0" "1")))))))(re.++ (re.union (re.range "\u{00}" "\u{09}") (re.range "\u{0b}" "\u{ff}"))(re.++ (re.union (re.range "0" "9")(re.union (re.++ (re.range "0" "0") (re.range "0" "9")) (re.++ (re.range "1" "1") (re.union (re.range "." ".")(re.union (re.range "0" "0") (re.range "2" "2"))))))(re.++ (re.union (re.range "\u{00}" "\u{09}") (re.range "\u{0b}" "\u{ff}"))(re.++ ((_ re.loop 4 4) (re.range "0" "9")) (str.to_re "")))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "\u{a3}" (str.++ " " "")))

(define-fun Witness2 () String (str.++ "8" (str.++ "6" (str.++ "H" (str.++ "8" "")))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.++ (re.* (re.range " " " "))(re.++ (re.opt (re.range "\u{a3}" "\u{a3}")) (re.* (re.range " " " "))))(re.++ (re.* (re.range "0" "9"))(re.++ (re.opt (re.++ (re.union (re.range "\u{00}" "\u{09}") (re.range "\u{0b}" "\u{ff}")) ((_ re.loop 1 2) (re.range "0" "9")))) (str.to_re "")))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "0" (str.++ "8" (str.++ "5" (str.++ "0" "")))))

(define-fun Witness2 () String (str.++ "4" ""))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.union (re.++ ((_ re.loop 1 2) (re.range "0" "9"))(re.++ (re.range "," ",")(re.++ (re.* (re.++ ((_ re.loop 2 2) (re.range "0" "9")) (re.range "," ","))) ((_ re.loop 3 3) (re.range "0" "9"))))) (re.+ (re.range "0" "9"))) (str.to_re "")))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "2" (str.++ "1" (str.++ ":" (str.++ "1" (str.++ "8" (str.++ ":" (str.++ "5" (str.++ "2" (str.++ "," (str.++ "8" (str.++ "8" (str.++ "4" (str.++ " " (str.++ "-" (str.++ "-" (str.++ ">" (str.++ " " (str.++ "2" (str.++ "3" (str.++ ":" (str.++ "1" (str.++ "1" (str.++ ":" (str.++ "0" (str.++ "9" (str.++ "," (str.++ "5" (str.++ "5" (str.++ "2" (str.++ "A" "")))))))))))))))))))))))))))))))

(define-fun Witness2 () String (str.++ "2" (str.++ "1" (str.++ ":" (str.++ "4" (str.++ "9" (str.++ ":" (str.++ "0" (str.++ "3" (str.++ "," (str.++ "8" (str.++ "9" (str.++ "8" (str.++ " " (str.++ "-" (str.++ "-" (str.++ ">" (str.++ " " (str.++ "2" (str.++ "3" (str.++ ":" (str.++ "3" (str.++ "7" (str.++ ":" (str.++ "4" (str.++ "5" (str.++ "," (str.++ "6" (str.++ "7" (str.++ "6" (str.++ "\u{83}" "")))))))))))))))))))))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.union (re.++ (re.range "0" "1") (re.range "0" "9")) (re.++ (re.range "2" "2") (re.range "0" "3")))(re.++ (re.range ":" ":")(re.++ (re.++ (re.range "0" "5") (re.range "0" "9"))(re.++ (re.range ":" ":")(re.++ (re.++ (re.range "0" "5") (re.range "0" "9"))(re.++ (re.range "," ",")(re.++ (re.++ (re.range "0" "9")(re.++ (re.range "0" "9") (re.range "0" "9")))(re.++ (str.to_re (str.++ " " (str.++ "-" (str.++ "-" (str.++ ">" (str.++ " " ""))))))(re.++ (re.union (re.++ (re.range "0" "1") (re.range "0" "9")) (re.++ (re.range "2" "2") (re.range "0" "3")))(re.++ (re.range ":" ":")(re.++ (re.++ (re.range "0" "5") (re.range "0" "9"))(re.++ (re.range ":" ":")(re.++ (re.++ (re.range "0" "5") (re.range "0" "9"))(re.++ (re.range "," ",")(re.++ (re.++ (re.range "0" "9")(re.++ (re.range "0" "9") (re.range "0" "9")))(re.++ (re.* (re.union (re.range "\u{00}" "\u{09}") (re.range "\u{0b}" "\u{ff}"))) (str.to_re ""))))))))))))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "8" ""))

(define-fun Witness2 () String (str.++ "9" (str.++ "9" (str.++ "1" (str.++ "9" (str.++ "5" (str.++ "1" (str.++ "4" ""))))))))

(assert (= regexA (re.union (re.++ (str.to_re "")(re.++ ((_ re.loop 1 3) (re.range "0" "9"))(re.++ (re.* (re.++ (re.range "," ",") ((_ re.loop 3 3) (re.range "0" "9")))) (str.to_re "")))) (re.++ (str.to_re "")(re.++ ((_ re.loop 1 16) (re.range "0" "9")) (str.to_re ""))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "9" (str.++ "0" (str.++ "\u{0c}" (str.++ "1" (str.++ "4" (str.++ "8" (str.++ "3" (str.++ "5" "")))))))))

(define-fun Witness2 () String (str.++ "+" (str.++ "(" (str.++ "8" (str.++ "2" (str.++ "9" (str.++ "3" (str.++ "8" (str.++ "7" (str.++ "8" (str.++ "8" "")))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.opt (re.range "+" "+"))(re.++ (re.opt (re.range "(" "("))(re.++ (re.+ (re.range "0" "9"))(re.++ (re.opt (re.range ")" ")"))(re.++ (re.opt (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "-" ".")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))))(re.++ ((_ re.loop 1 3) (re.range "0" "9"))(re.++ (re.opt (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "-" ".")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))))(re.++ ((_ re.loop 4 4) (re.range "0" "9")) (str.to_re ""))))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "i" (str.++ "-" (str.++ "2" (str.++ "9" (str.++ "1" (str.++ "0" (str.++ "8" (str.++ "3" (str.++ "8" (str.++ "-" (str.++ "W" ""))))))))))))

(define-fun Witness2 () String (str.++ "Z" (str.++ "-" (str.++ "8" (str.++ "9" (str.++ "1" (str.++ "2" (str.++ "5" (str.++ "3" (str.++ "8" (str.++ "-" (str.++ "f" ""))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.union (re.range "A" "Z") (re.range "a" "z"))(re.++ (re.range "-" "-")(re.++ ((_ re.loop 7 7) (re.range "0" "9"))(re.++ (re.range "-" "-")(re.++ (re.union (re.range "A" "Z") (re.range "a" "z")) (str.to_re "")))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "h" (str.++ "t" (str.++ "t" (str.++ "p" (str.++ "s" (str.++ ":" (str.++ "/" (str.++ "/" (str.++ "3" (str.++ "." (str.++ "X" (str.++ "Z" (str.++ "." (str.++ "v" (str.++ "%" (str.++ "1" (str.++ "3" (str.++ "?" "")))))))))))))))))))

(define-fun Witness2 () String (str.++ "h" (str.++ "t" (str.++ "t" (str.++ "p" (str.++ ":" (str.++ "/" (str.++ "/" (str.++ "\u{a4}" (str.++ "\u{d4}" (str.++ ":" (str.++ "@" (str.++ "f" (str.++ "/" ""))))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.union (str.to_re (str.++ "f" (str.++ "t" (str.++ "p" "")))) (re.++ (str.to_re (str.++ "h" (str.++ "t" (str.++ "t" (str.++ "p" ""))))) (re.opt (re.range "s" "s"))))(re.++ (str.to_re (str.++ ":" (str.++ "/" (str.++ "/" ""))))(re.++ (re.opt (re.++ (re.+ (re.union (re.range "\u{00}" "9") (re.range ";" "\u{ff}")))(re.++ (re.range ":" ":")(re.++ (re.* (re.union (re.range "\u{00}" "?") (re.range "A" "\u{ff}"))) (re.range "@" "@")))))(re.++ (re.* (re.++ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))(re.++ (re.* (re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_") (re.range "a" "z")))))) (re.range "." "."))))(re.++ (re.++ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z"))) (re.* (re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_") (re.range "a" "z")))))))(re.++ (re.opt (re.++ (re.range ":" ":") (re.+ (re.range "0" "9"))))(re.++ (re.opt (re.range "/" "/"))(re.++ (re.opt (re.++ (re.* (re.union (re.union (re.range "-" ":")(re.union (re.range "A" "[")(re.union (re.range "]" "]")(re.union (re.range "_" "_")(re.union (re.range "a" "z") (re.range "~" "~")))))) (re.++ (re.range "%" "%") ((_ re.loop 2 2) (re.union (re.range "0" "9")(re.union (re.range "A" "F") (re.range "a" "f")))))))(re.++ (re.range "?" "?") (re.* (re.++ (re.* (re.union (re.union (re.range "," "/")(re.union (re.range ":" ":")(re.union (re.range "=" "=")(re.union (re.range "[" "[")(re.union (re.range "]" "]")(re.union (re.range "_" "_") (re.range "~" "~")))))))(re.union (str.to_re "")(re.union (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "a" "{") (re.range "}" "}")))) (re.++ (re.range "%" "%") ((_ re.loop 2 2) (re.union (re.range "0" "9")(re.union (re.range "A" "F") (re.range "a" "f"))))))))) (re.opt (re.range "&" "&")))))))(re.++ (re.opt (re.++ (re.range "#" "#") (re.* (re.union (re.union (re.range "-" ".")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_") (re.range "a" "z"))))) (re.++ (re.range "%" "%") ((_ re.loop 2 2) (re.union (re.range "0" "9")(re.union (re.range "A" "F") (re.range "a" "f"))))))))) (str.to_re "")))))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "0" (str.++ "3" (str.++ "/" (str.++ "0" (str.++ "2" (str.++ "/" (str.++ "5" (str.++ "4" (str.++ "8" (str.++ "1" "")))))))))))

(define-fun Witness2 () String (str.++ "3" (str.++ "0" (str.++ "/" (str.++ "1" (str.++ "1" (str.++ "/" (str.++ "1" (str.++ "8" (str.++ "0" (str.++ "7" "")))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.union (re.++ (re.union (re.++ (re.range "0" "0") (re.range "1" "9"))(re.union (re.++ (re.range "1" "2") (re.range "0" "9")) (re.++ (re.range "3" "3") (re.range "0" "1"))))(re.++ (re.range "/" "/")(re.++ (re.union (re.++ (re.range "0" "0") (re.union (re.range "1" "1")(re.union (re.range "3" "3")(re.union (re.range "5" "5") (re.range "7" "8"))))) (re.++ (re.range "1" "1") (re.union (re.range "0" "0") (re.range "2" "2"))))(re.++ (re.range "/" "/") (re.++ (re.union (re.++ (re.range "1" "1") (re.range "6" "9")) (re.++ (re.range "2" "9") (re.range "0" "9"))) ((_ re.loop 2 2) (re.range "0" "9")))))))(re.union (re.++ (re.union (re.++ (re.range "0" "0") (re.range "1" "9"))(re.union (re.++ (re.range "1" "2") (re.range "0" "9")) (str.to_re (str.++ "3" (str.++ "0" "")))))(re.++ (re.range "/" "/")(re.++ (re.union (re.++ (re.range "0" "0") (re.union (re.range "1" "1") (re.range "3" "9"))) (re.++ (re.range "1" "1") (re.range "0" "2")))(re.++ (re.range "/" "/") (re.++ (re.union (re.++ (re.range "1" "1") (re.range "6" "9")) (re.++ (re.range "2" "9") (re.range "0" "9"))) ((_ re.loop 2 2) (re.range "0" "9")))))))(re.union (re.++ (re.union (re.++ (re.range "0" "0") (re.range "1" "9"))(re.union (re.++ (re.range "1" "1") (re.range "0" "9")) (re.++ (re.range "2" "2") (re.range "0" "8"))))(re.++ (str.to_re (str.++ "/" (str.++ "0" (str.++ "2" (str.++ "/" ""))))) (re.++ (re.union (re.++ (re.range "1" "1") (re.range "6" "9")) (re.++ (re.range "2" "9") (re.range "0" "9"))) ((_ re.loop 2 2) (re.range "0" "9"))))) (re.++ (str.to_re (str.++ "2" (str.++ "9" (str.++ "/" (str.++ "0" (str.++ "2" (str.++ "/" ""))))))) (re.union (re.++ (re.union (re.++ (re.range "1" "1") (re.range "6" "9")) (re.++ (re.range "2" "9") (re.range "0" "9"))) (re.union (re.++ (re.range "0" "0") (re.union (re.range "4" "4") (re.range "8" "8")))(re.union (re.++ (re.union (re.range "2" "2")(re.union (re.range "4" "4")(re.union (re.range "6" "6") (re.range "8" "8")))) (re.union (re.range "0" "0")(re.union (re.range "4" "4") (re.range "8" "8")))) (re.++ (re.union (re.range "1" "1")(re.union (re.range "3" "3")(re.union (re.range "5" "5")(re.union (re.range "7" "7") (re.range "9" "9"))))) (re.union (re.range "2" "2") (re.range "6" "6")))))) (re.++ (re.union (str.to_re (str.++ "1" (str.++ "6" "")))(re.union (re.++ (re.union (re.range "2" "2")(re.union (re.range "4" "4")(re.union (re.range "6" "6") (re.range "8" "8")))) (re.union (re.range "0" "0")(re.union (re.range "4" "4") (re.range "8" "8")))) (re.++ (re.union (re.range "3" "3")(re.union (re.range "5" "5")(re.union (re.range "7" "7") (re.range "9" "9")))) (re.union (re.range "2" "2") (re.range "6" "6"))))) (str.to_re (str.++ "0" (str.++ "0" ""))))))))) (str.to_re "")))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "6" (str.++ "9" (str.++ "5" (str.++ "\u{0b}" (str.++ "\u{85}" (str.++ "8" (str.++ "8" (str.++ "9" (str.++ "9" (str.++ "9" (str.++ "8" (str.++ "4" (str.++ "\u{0c}" ""))))))))))))))

(define-fun Witness2 () String (str.++ "1" (str.++ "3" (str.++ "9" (str.++ "6" (str.++ "1" (str.++ "8" (str.++ "4" (str.++ "2" (str.++ "9" (str.++ "9" (str.++ "\u{0a}" ""))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ ((_ re.loop 3 3) (re.range "0" "9"))(re.++ (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "-" "-")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))))(re.++ ((_ re.loop 3 3) (re.range "0" "9"))(re.++ (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "-" "-")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))))(re.++ ((_ re.loop 4 4) (re.range "0" "9"))(re.++ (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))) (str.to_re ""))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "8" (str.++ "9" "")))

(define-fun Witness2 () String (str.++ "1" (str.++ "9" (str.++ "3" (str.++ "4" (str.++ "9" (str.++ "8" (str.++ "3" (str.++ "3" "")))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.+ (re.range "1" "9"))(re.++ (re.* (re.range "0" "9")) (str.to_re ""))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "-" (str.++ "9" (str.++ "6" (str.++ "1" (str.++ "9" ""))))))

(define-fun Witness2 () String (str.++ "3" (str.++ "0" (str.++ "9" (str.++ "9" (str.++ "1" (str.++ "9" "")))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.opt (re.range "-" "-"))(re.++ (re.+ (re.range "0" "9"))(re.++ (re.union (re.++ (re.opt (re.union (re.range "," ",") (re.range "." "."))) (re.+ (re.range "0" "9"))) (re.* (re.range "0" "9"))) (str.to_re "")))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "8" (str.++ "8" (str.++ ":" (str.++ "5" (str.++ "9" (str.++ ":" (str.++ "8" (str.++ "8" (str.++ " " (str.++ "l" (str.++ "K" (str.++ "r" (str.++ " " (str.++ "8" (str.++ "9" (str.++ "9" (str.++ "," (str.++ " " (str.++ "9" (str.++ "6" (str.++ "9" (str.++ "7" (str.++ " " (str.++ "a" (str.++ "m" (str.++ "H" "")))))))))))))))))))))))))))

(define-fun Witness2 () String (str.++ "8" (str.++ "8" (str.++ ":" (str.++ "7" (str.++ "2" (str.++ ":" (str.++ "4" (str.++ "8" (str.++ " " (str.++ "k" (str.++ "e" (str.++ "J" (str.++ " " (str.++ "9" (str.++ "8" (str.++ "," (str.++ " " (str.++ "7" (str.++ "4" (str.++ "4" (str.++ "9" (str.++ " " (str.++ "x" (str.++ "m" (str.++ "R" ""))))))))))))))))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ ((_ re.loop 2 2) (re.range "0" "9"))(re.++ (re.range ":" ":")(re.++ ((_ re.loop 2 2) (re.range "0" "9"))(re.++ (re.range ":" ":")(re.++ ((_ re.loop 2 2) (re.range "0" "9"))(re.++ (re.range " " " ")(re.++ ((_ re.loop 3 3) (re.union (re.range "A" "Z") (re.range "a" "z")))(re.++ (re.range " " " ")(re.++ (re.+ (re.range "0" "9"))(re.++ (str.to_re (str.++ "," (str.++ " " "")))(re.++ ((_ re.loop 4 4) (re.range "0" "9"))(re.++ (re.range " " " ")(re.++ ((_ re.loop 3 3) (re.union (re.range "A" "Z") (re.range "a" "z"))) (str.to_re "")))))))))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "9" (str.++ "7" (str.++ "9" (str.++ "9" (str.++ "9" ""))))))

(define-fun Witness2 () String (str.++ "4" (str.++ "7" (str.++ "8" (str.++ "0" (str.++ "5" (str.++ "-" (str.++ "4" (str.++ "5" (str.++ "1" (str.++ "1" "")))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.union (re.++ ((_ re.loop 5 5) (re.range "0" "9"))(re.++ (re.range "-" "-") ((_ re.loop 4 4) (re.range "0" "9")))) ((_ re.loop 5 5) (re.range "0" "9"))) (str.to_re "")))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "1" (str.++ "5" "")))

(define-fun Witness2 () String (str.++ "3" (str.++ "0" "")))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.union (re.++ (re.opt (re.range "1" "2")) (re.range "0" "9")) (re.++ (re.range "3" "3") (re.range "0" "1"))) (str.to_re "")))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "." (str.++ "." (str.++ "/" (str.++ "." (str.++ "7" (str.++ "8" (str.++ "Z" ""))))))))

(define-fun Witness2 () String (str.++ "." (str.++ "." (str.++ "/" (str.++ "." (str.++ "W" ""))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.++ (re.* (re.union (str.to_re (str.++ "." (str.++ "." (str.++ "/" "")))) (re.union (re.range "-" "-")(re.union (re.range "/" "9")(re.union (re.range "A" "Z")(re.union (re.range "\u{5c}" "\u{5c}")(re.union (re.range "_" "_") (re.range "a" "z"))))))))(re.++ (re.range "." ".") (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))))) (str.to_re "")))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "I" (str.++ "R" "")))

(define-fun Witness2 () String (str.++ "B" (str.++ "Z" "")))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.union (re.++ (re.range "A" "A") (re.union (re.range "D" "G")(re.union (re.range "I" "I")(re.union (re.range "L" "O")(re.union (re.range "Q" "U")(re.union (re.range "W" "X") (re.range "Z" "Z")))))))(re.union (re.++ (re.range "B" "B") (re.union (re.range "A" "B")(re.union (re.range "D" "J")(re.union (re.range "L" "O")(re.union (re.range "R" "T")(re.union (re.range "V" "W") (re.range "Y" "Z")))))))(re.union (re.++ (re.range "C" "C") (re.union (re.range "A" "A")(re.union (re.range "C" "D")(re.union (re.range "F" "I")(re.union (re.range "K" "O")(re.union (re.range "R" "R")(re.union (re.range "U" "V") (re.range "X" "Z"))))))))(re.union (re.++ (re.range "D" "D") (re.union (re.range "E" "E")(re.union (re.range "J" "K")(re.union (re.range "M" "M")(re.union (re.range "O" "O") (re.range "Z" "Z"))))))(re.union (re.++ (re.range "E" "E") (re.union (re.range "C" "C")(re.union (re.range "E" "E")(re.union (re.range "G" "H") (re.range "R" "T")))))(re.union (re.++ (re.range "F" "F") (re.union (re.range "I" "K")(re.union (re.range "M" "M")(re.union (re.range "O" "O") (re.range "R" "R")))))(re.union (re.++ (re.range "G" "G") (re.union (re.range "A" "B")(re.union (re.range "D" "I")(re.union (re.range "L" "N")(re.union (re.range "P" "U")(re.union (re.range "W" "W") (re.range "Y" "Y")))))))(re.union (re.++ (re.range "H" "H") (re.union (re.range "K" "K")(re.union (re.range "M" "N")(re.union (re.range "R" "R") (re.range "T" "U")))))(re.union (re.++ (re.range "I" "I") (re.union (re.range "D" "E")(re.union (re.range "L" "O") (re.range "Q" "T"))))(re.union (re.++ (re.range "J" "J") (re.union (re.range "E" "E")(re.union (re.range "M" "M") (re.range "O" "P"))))(re.union (re.++ (re.range "K" "K") (re.union (re.range "E" "E")(re.union (re.range "G" "I")(re.union (re.range "M" "N")(re.union (re.range "P" "P")(re.union (re.range "R" "R")(re.union (re.range "W" "W") (re.range "Y" "Z"))))))))(re.union (re.++ (re.range "L" "L") (re.union (re.range "A" "C")(re.union (re.range "I" "I")(re.union (re.range "K" "K")(re.union (re.range "R" "V") (re.range "Y" "Y"))))))(re.union (re.++ (re.range "M" "M") (re.union (re.range "A" "A")(re.union (re.range "C" "H") (re.range "K" "Z"))))(re.union (re.++ (re.range "N" "N") (re.union (re.range "A" "A")(re.union (re.range "C" "C")(re.union (re.range "E" "G")(re.union (re.range "I" "I")(re.union (re.range "L" "L")(re.union (re.range "O" "P")(re.union (re.range "R" "R")(re.union (re.range "U" "U") (re.range "Z" "Z"))))))))))(re.union (str.to_re (str.++ "O" (str.++ "M" "")))(re.union (re.++ (re.range "P" "P") (re.union (re.range "A" "A")(re.union (re.range "E" "H")(re.union (re.range "K" "N")(re.union (re.range "R" "T")(re.union (re.range "W" "W") (re.range "Y" "Y")))))))(re.union (str.to_re (str.++ "Q" (str.++ "A" "")))(re.union (re.++ (re.range "R" "R") (re.union (re.range "E" "E")(re.union (re.range "O" "O")(re.union (re.range "S" "S")(re.union (re.range "U" "U") (re.range "W" "W"))))))(re.union (re.++ (re.range "S" "S") (re.union (re.range "A" "E")(re.union (re.range "G" "O")(re.union (re.range "R" "R")(re.union (re.range "T" "T")(re.union (re.range "V" "V") (re.range "Y" "Z")))))))(re.union (re.++ (re.range "T" "T") (re.union (re.range "C" "D")(re.union (re.range "F" "H")(re.union (re.range "J" "O")(re.union (re.range "R" "R")(re.union (re.range "T" "T")(re.union (re.range "V" "W") (re.range "Z" "Z"))))))))(re.union (re.++ (re.range "U" "U") (re.union (re.range "A" "A")(re.union (re.range "G" "G")(re.union (re.range "M" "M")(re.union (re.range "S" "S") (re.range "Y" "Z"))))))(re.union (re.++ (re.range "V" "V") (re.union (re.range "A" "A")(re.union (re.range "C" "C")(re.union (re.range "E" "E")(re.union (re.range "G" "G")(re.union (re.range "I" "I")(re.union (re.range "N" "N") (re.range "U" "U"))))))))(re.union (re.++ (re.range "W" "W") (re.union (re.range "F" "F") (re.range "S" "S")))(re.union (re.++ (re.range "Y" "Y") (re.union (re.range "E" "E") (re.range "T" "T"))) (re.++ (re.range "Z" "Z") (re.union (re.range "A" "A")(re.union (re.range "M" "M") (re.range "W" "W")))))))))))))))))))))))))))) (str.to_re "")))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "4" (str.++ "9" (str.++ "9" (str.++ "8" (str.++ "7" ""))))))

(define-fun Witness2 () String (str.++ "9" (str.++ "6" (str.++ "9" (str.++ "0" (str.++ "5" ""))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ ((_ re.loop 5 5) (re.range "0" "9")) (str.to_re "")))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "q" (str.++ "i" (str.++ "." (str.++ "Z" (str.++ "@" (str.++ "D" (str.++ "." (str.++ "a" (str.++ "O" (str.++ "." (str.++ "x" (str.++ "d" "")))))))))))))

(define-fun Witness2 () String (str.++ "3" (str.++ "@" (str.++ "0" (str.++ "-" (str.++ "-" (str.++ "z" (str.++ "." (str.++ "2" (str.++ "-" (str.++ "-" (str.++ "4" (str.++ "9" (str.++ "-" (str.++ "8" (str.++ "e" (str.++ "." (str.++ "X" (str.++ "L" (str.++ "l" (str.++ "Z" (str.++ "K" (str.++ "g" "")))))))))))))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))) (re.* (re.++ (re.union (re.range "+" "+")(re.union (re.range "-" ".") (re.range "_" "_"))) (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))))))(re.++ (re.range "@" "@")(re.++ (re.++ (re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))) (re.* (re.++ (re.union (re.range "." ".") ((_ re.loop 1 2) (re.range "-" "-"))) (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))))))(re.++ (re.range "." ".") ((_ re.loop 2 6) (re.union (re.range "A" "Z") (re.range "a" "z"))))) (str.to_re "")))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "+" (str.++ "8" (str.++ "3" (str.++ "e" (str.++ "+" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "i" ""))))))))))

(define-fun Witness2 () String (str.++ "3" (str.++ "." (str.++ "0" (str.++ "4" (str.++ "-" (str.++ "i" "")))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.union (re.++ (re.opt (re.union (re.range "+" "+") (re.range "-" "-")))(re.++ (re.union (re.++ (re.+ (re.range "0" "9"))(re.++ (re.opt (re.range "." ".")) (re.* (re.range "0" "9")))) (re.++ (re.* (re.range "0" "9"))(re.++ (re.opt (re.range "." ".")) (re.+ (re.range "0" "9")))))(re.++ (re.opt (re.++ (re.union (re.range "E" "E") (re.range "e" "e"))(re.++ (re.opt (re.union (re.range "+" "+") (re.range "-" "-")))(re.++ (re.opt (re.range "0" "2")) ((_ re.loop 1 2) (re.range "0" "9")))))) (re.opt (re.range "r" "r")))))(re.union (re.++ (re.opt (re.union (re.range "+" "+") (re.range "-" "-")))(re.++ (re.opt (re.++ (re.union (re.++ (re.+ (re.range "0" "9"))(re.++ (re.opt (re.range "." ".")) (re.* (re.range "0" "9")))) (re.++ (re.* (re.range "0" "9"))(re.++ (re.opt (re.range "." ".")) (re.+ (re.range "0" "9"))))) (re.opt (re.++ (re.union (re.range "E" "E") (re.range "e" "e"))(re.++ (re.opt (re.union (re.range "+" "+") (re.range "-" "-")))(re.++ (re.opt (re.range "0" "2")) ((_ re.loop 1 2) (re.range "0" "9")))))))) (re.range "i" "i"))) (re.++ (re.opt (re.union (re.range "+" "+") (re.range "-" "-")))(re.++ (re.union (re.++ (re.+ (re.range "0" "9"))(re.++ (re.opt (re.range "." ".")) (re.* (re.range "0" "9")))) (re.++ (re.* (re.range "0" "9"))(re.++ (re.opt (re.range "." ".")) (re.+ (re.range "0" "9")))))(re.++ (re.opt (re.++ (re.union (re.range "E" "E") (re.range "e" "e"))(re.++ (re.opt (re.union (re.range "+" "+") (re.range "-" "-")))(re.++ (re.opt (re.range "0" "2")) ((_ re.loop 1 2) (re.range "0" "9"))))))(re.++ (re.opt (re.range "r" "r"))(re.++ (re.union (re.range "+" "+") (re.range "-" "-"))(re.++ (re.opt (re.++ (re.union (re.++ (re.+ (re.range "0" "9"))(re.++ (re.opt (re.range "." ".")) (re.* (re.range "0" "9")))) (re.++ (re.* (re.range "0" "9"))(re.++ (re.opt (re.range "." ".")) (re.+ (re.range "0" "9"))))) (re.opt (re.++ (re.union (re.range "E" "E") (re.range "e" "e"))(re.++ (re.opt (re.union (re.range "+" "+") (re.range "-" "-")))(re.++ (re.opt (re.range "0" "2")) ((_ re.loop 1 2) (re.range "0" "9")))))))) (re.range "i" "i"))))))))) (str.to_re "")))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ " " (str.++ "\u{a0}" (str.++ "s" (str.++ "t" (str.++ "r" (str.++ "i" (str.++ "n" (str.++ "g" (str.++ "&" (str.++ " " (str.++ "r" (str.++ "(" (str.++ " " (str.++ "\u{85}" (str.++ "c" (str.++ "h" (str.++ "a" (str.++ "r" (str.++ " " (str.++ " " (str.++ "\u{0d}" (str.++ " " (str.++ " " (str.++ "i" (str.++ "9" (str.++ "\u{85}" (str.++ ")" (str.++ "\u{a0}" (str.++ ";" ""))))))))))))))))))))))))))))))

(define-fun Witness2 () String (str.++ " " (str.++ "c" (str.++ "h" (str.++ "a" (str.++ "r" (str.++ "\u{85}" (str.++ "\u{0c}" (str.++ " " (str.++ "g" (str.++ "\u{85}" (str.++ "\u{85}" (str.++ "(" (str.++ "d" (str.++ "o" (str.++ "u" (str.++ "b" (str.++ "l" (str.++ "e" (str.++ " " (str.++ " " (str.++ "\u{0c}" (str.++ "\u{0d}" (str.++ "e" (str.++ "h" (str.++ ")" (str.++ " " (str.++ ";" ""))))))))))))))))))))))))))))

(assert (= regexA (re.++ (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (re.union (str.to_re (str.++ "i" (str.++ "n" (str.++ "t" ""))))(re.union (str.to_re (str.++ "v" (str.++ "o" (str.++ "i" (str.++ "d" "")))))(re.union (str.to_re (str.++ "f" (str.++ "l" (str.++ "o" (str.++ "a" (str.++ "t" ""))))))(re.union (str.to_re (str.++ "c" (str.++ "h" (str.++ "a" (str.++ "r" "")))))(re.union (str.to_re (str.++ "d" (str.++ "o" (str.++ "u" (str.++ "b" (str.++ "l" (str.++ "e" ""))))))) (str.to_re (str.++ "s" (str.++ "t" (str.++ "r" (str.++ "i" (str.++ "n" (str.++ "g" ""))))))))))))(re.++ (re.* (re.union (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))) (re.range "*" "*")))(re.++ (re.opt (re.range "&" "&"))(re.++ (re.+ (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (re.range "a" "z")(re.++ (re.* (re.union (re.range "0" "9") (re.range "a" "z")))(re.++ (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (re.range "(" "(")(re.++ (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (re.opt (re.++ (re.union (str.to_re (str.++ "i" (str.++ "n" (str.++ "t" ""))))(re.union (str.to_re (str.++ "v" (str.++ "o" (str.++ "i" (str.++ "d" "")))))(re.union (str.to_re (str.++ "f" (str.++ "l" (str.++ "o" (str.++ "a" (str.++ "t" ""))))))(re.union (str.to_re (str.++ "c" (str.++ "h" (str.++ "a" (str.++ "r" "")))))(re.union (str.to_re (str.++ "d" (str.++ "o" (str.++ "u" (str.++ "b" (str.++ "l" (str.++ "e" ""))))))) (str.to_re (str.++ "s" (str.++ "t" (str.++ "r" (str.++ "i" (str.++ "n" (str.++ "g" ""))))))))))))(re.++ (re.* (re.union (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))) (re.range "*" "*")))(re.++ (re.opt (re.range "&" "&"))(re.++ (re.+ (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (re.range "a" "z")(re.++ (re.* (re.union (re.range "0" "9") (re.range "a" "z"))) (re.* (re.++ (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (re.range "," ",")(re.++ (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (re.union (str.to_re (str.++ "i" (str.++ "n" (str.++ "t" ""))))(re.union (str.to_re (str.++ "v" (str.++ "o" (str.++ "i" (str.++ "d" "")))))(re.union (str.to_re (str.++ "f" (str.++ "l" (str.++ "o" (str.++ "a" (str.++ "t" ""))))))(re.union (str.to_re (str.++ "c" (str.++ "h" (str.++ "a" (str.++ "r" "")))))(re.union (str.to_re (str.++ "d" (str.++ "o" (str.++ "u" (str.++ "b" (str.++ "l" (str.++ "e" ""))))))) (str.to_re (str.++ "s" (str.++ "t" (str.++ "r" (str.++ "i" (str.++ "n" (str.++ "g" ""))))))))))))(re.++ (re.* (re.union (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))) (re.range "*" "*")))(re.++ (re.opt (re.range "&" "&"))(re.++ (re.+ (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (re.range "a" "z") (re.* (re.union (re.range "0" "9") (re.range "a" "z")))))))))))))))))))(re.++ (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (re.range ")" ")")(re.++ (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))) (re.range ";" ";")))))))))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "4" (str.++ "6" (str.++ "-" (str.++ "5" (str.++ "4" (str.++ "5" (str.++ "2" (str.++ "8" (str.++ "9" (str.++ "8" (str.++ "4" (str.++ "-" (str.++ "8" ""))))))))))))))

(define-fun Witness2 () String (str.++ "4" (str.++ "8" (str.++ "-" (str.++ "5" (str.++ "0" (str.++ "3" (str.++ "9" (str.++ "9" (str.++ "0" (str.++ "7" (str.++ "9" (str.++ "-" (str.++ "7" ""))))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ ((_ re.loop 2 2) (re.range "0" "9"))(re.++ (re.range "-" "-")(re.++ ((_ re.loop 8 8) (re.range "0" "9"))(re.++ (re.range "-" "-")(re.++ (re.range "0" "9") (str.to_re "")))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "(" (str.++ "2" (str.++ "3" (str.++ "9" (str.++ ")" (str.++ "\u{85}" (str.++ "8" (str.++ "0" (str.++ "8" (str.++ "\u{0d}" (str.++ "9" (str.++ "2" (str.++ "9" (str.++ "8" "")))))))))))))))

(define-fun Witness2 () String (str.++ "(" (str.++ "8" (str.++ "9" (str.++ "7" (str.++ ")" (str.++ "9" (str.++ "6" (str.++ "9" (str.++ "\u{a0}" (str.++ "9" (str.++ "1" (str.++ "6" (str.++ "9" ""))))))))))))))

(assert (= regexA (re.union (re.++ (str.to_re "")(re.++ (re.range "(" "(")(re.++ ((_ re.loop 3 3) (re.range "0" "9"))(re.++ (re.range ")" ")")(re.++ (re.opt (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ ((_ re.loop 3 3) (re.range "0" "9"))(re.++ (re.opt (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "-" "-")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))))(re.++ ((_ re.loop 4 4) (re.range "0" "9")) (str.to_re ""))))))))) (re.++ (str.to_re "")(re.++ ((_ re.loop 3 3) (re.range "0" "9"))(re.++ (re.opt (re.range "-" "-"))(re.++ ((_ re.loop 3 3) (re.range "0" "9"))(re.++ (re.opt (re.range "-" "-"))(re.++ ((_ re.loop 4 4) (re.range "0" "9")) (str.to_re ""))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "7" (str.++ "5" (str.++ "/" (str.++ "8" (str.++ "7" (str.++ "/" (str.++ "0" (str.++ "8" (str.++ "8" (str.++ "2" "")))))))))))

(define-fun Witness2 () String (str.++ "8" (str.++ "9" (str.++ "/" (str.++ "7" (str.++ "/" (str.++ "3" (str.++ "3" (str.++ "6" (str.++ "1" ""))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ ((_ re.loop 1 2) (re.range "0" "9"))(re.++ (re.range "/" "/")(re.++ ((_ re.loop 1 2) (re.range "0" "9"))(re.++ (re.range "/" "/")(re.++ ((_ re.loop 4 4) (re.range "0" "9")) (str.to_re "")))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "Q" (str.++ "." (str.++ "m" (str.++ "\u{cb}" (str.++ "\u{ba}" (str.++ "." (str.++ "c" (str.++ "." (str.++ "e" (str.++ "8" (str.++ "\u{d0}" (str.++ "\u{ba}" (str.++ "." (str.++ "\u{f6}" (str.++ " " (str.++ "," (str.++ "\u{a0}" (str.++ "\u{85}" (str.++ "\u{0b}" (str.++ "v" (str.++ "," (str.++ "\u{85}" (str.++ "P" (str.++ "u" (str.++ "b" (str.++ "l" (str.++ "i" (str.++ "c" (str.++ "K" (str.++ "e" (str.++ "y" (str.++ "T" (str.++ "o" (str.++ "k" (str.++ "e" (str.++ "n" (str.++ "=" (str.++ "\u{aa}" "")))))))))))))))))))))))))))))))))))))))

(define-fun Witness2 () String (str.++ "\u{de}" (str.++ "Z" (str.++ "f" (str.++ " " (str.++ "," (str.++ "\u{dd}" "")))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))) (re.+ (re.++ (re.opt (re.range "." ".")) (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))))))(re.++ (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (re.range "," ",")(re.++ (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (re.+ (re.union (re.range "." ".")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))))(re.++ (re.opt (re.++ (re.range "," ",")(re.++ (re.opt (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (str.to_re (str.++ "V" (str.++ "e" (str.++ "r" (str.++ "s" (str.++ "i" (str.++ "o" (str.++ "n" (str.++ "=" ""))))))))) (re.++ (re.+ (re.range "0" "9"))(re.++ (re.range "." ".")(re.++ (re.+ (re.range "0" "9"))(re.++ (re.range "." ".")(re.++ (re.+ (re.range "0" "9"))(re.++ (re.range "." ".") (re.+ (re.range "0" "9"))))))))))))(re.++ (re.opt (re.++ (re.range "," ",")(re.++ (re.opt (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (str.to_re (str.++ "C" (str.++ "u" (str.++ "l" (str.++ "t" (str.++ "u" (str.++ "r" (str.++ "e" (str.++ "=" ""))))))))) (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))))))(re.++ (re.opt (re.++ (re.range "," ",")(re.++ (re.opt (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (str.to_re (str.++ "P" (str.++ "u" (str.++ "b" (str.++ "l" (str.++ "i" (str.++ "c" (str.++ "K" (str.++ "e" (str.++ "y" (str.++ "T" (str.++ "o" (str.++ "k" (str.++ "e" (str.++ "n" (str.++ "=" "")))))))))))))))) (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))))))) (str.to_re ""))))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "(" (str.++ "\u{22}" (str.++ "8" (str.++ "9" (str.++ "9" (str.++ "2" (str.++ "6" (str.++ "\u{22}" "")))))))))

(define-fun Witness2 () String (str.++ "(" (str.++ "\u{22}" (str.++ "\u{22}" ""))))

(assert (= regexA (re.++ (str.to_re (str.++ "(" (str.++ "\u{22}" "")))(re.++ (re.* (re.range "0" "9")) (re.range "\u{22}" "\u{22}")))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "$" (str.++ "9" (str.++ "," (str.++ "2" (str.++ "8" (str.++ "9" (str.++ "," (str.++ "3" (str.++ "9" (str.++ "2" "")))))))))))

(define-fun Witness2 () String (str.++ "$" (str.++ "8" "")))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.range "$" "$")(re.++ (re.union (re.++ ((_ re.loop 1 3) (re.range "0" "9")) (re.* (re.++ (re.range "," ",") ((_ re.loop 3 3) (re.range "0" "9"))))) (re.+ (re.range "0" "9")))(re.++ (re.opt (re.++ (re.range "." ".") ((_ re.loop 2 2) (re.range "0" "9")))) (str.to_re "")))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "h" (str.++ "t" (str.++ "t" (str.++ "p" (str.++ ":" (str.++ "/" (str.++ "/" (str.++ "\u{aa}" (str.++ "\u{c8}" (str.++ "." (str.++ "p" (str.++ "f" (str.++ ":" (str.++ "0" (str.++ "8" (str.++ "3" (str.++ "0" ""))))))))))))))))))

(define-fun Witness2 () String (str.++ "h" (str.++ "t" (str.++ "t" (str.++ "p" (str.++ "s" (str.++ ":" (str.++ "/" (str.++ "/" (str.++ "1" (str.++ "." (str.++ "c" (str.++ "z" "")))))))))))))

(assert (= regexA (re.++ (re.union (str.to_re (str.++ "h" (str.++ "t" (str.++ "t" (str.++ "p" ""))))) (str.to_re (str.++ "h" (str.++ "t" (str.++ "t" (str.++ "p" (str.++ "s" "")))))))(re.++ (str.to_re (str.++ ":" (str.++ "/" (str.++ "/" ""))))(re.++ (re.union (re.++ ((_ re.loop 1 3) (re.range "0" "9"))(re.++ (re.range "." ".")(re.++ ((_ re.loop 1 3) (re.range "0" "9"))(re.++ (re.range "." ".")(re.++ ((_ re.loop 1 3) (re.range "0" "9"))(re.++ (re.range "." ".") ((_ re.loop 1 3) (re.range "0" "9")))))))) (re.++ (re.+ (re.++ (re.+ (re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))) (re.range "." "."))) (re.union (str.to_re (str.++ "a" (str.++ "f" "")))(re.union (str.to_re (str.++ "a" (str.++ "x" "")))(re.union (str.to_re (str.++ "a" (str.++ "l" "")))(re.union (str.to_re (str.++ "d" (str.++ "z" "")))(re.union (str.to_re (str.++ "a" (str.++ "s" "")))(re.union (str.to_re (str.++ "a" (str.++ "d" "")))(re.union (str.to_re (str.++ "a" (str.++ "o" "")))(re.union (str.to_re (str.++ "a" (str.++ "i" "")))(re.union (str.to_re (str.++ "a" (str.++ "q" "")))(re.union (str.to_re (str.++ "a" (str.++ "g" "")))(re.union (str.to_re (str.++ "a" (str.++ "m" "")))(re.union (str.to_re (str.++ "a" (str.++ "w" "")))(re.union (str.to_re (str.++ "a" (str.++ "u" "")))(re.union (str.to_re (str.++ "a" (str.++ "t" "")))(re.union (str.to_re (str.++ "a" (str.++ "z" "")))(re.union (str.to_re (str.++ "b" (str.++ "s" "")))(re.union (str.to_re (str.++ "b" (str.++ "h" "")))(re.union (str.to_re (str.++ "b" (str.++ "d" "")))(re.union (str.to_re (str.++ "b" (str.++ "b" "")))(re.union (str.to_re (str.++ "b" (str.++ "y" "")))(re.union (str.to_re (str.++ "b" (str.++ "e" "")))(re.union (str.to_re (str.++ "b" (str.++ "z" "")))(re.union (str.to_re (str.++ "b" (str.++ "j" "")))(re.union (str.to_re (str.++ "b" (str.++ "m" "")))(re.union (str.to_re (str.++ "b" (str.++ "t" "")))(re.union (str.to_re (str.++ "b" (str.++ "o" "")))(re.union (str.to_re (str.++ "b" (str.++ "a" "")))(re.union (str.to_re (str.++ "b" (str.++ "w" "")))(re.union (str.to_re (str.++ "b" (str.++ "v" "")))(re.union (str.to_re (str.++ "b" (str.++ "r" "")))(re.union (str.to_re (str.++ "i" (str.++ "o" "")))(re.union (str.to_re (str.++ "b" (str.++ "n" "")))(re.union (str.to_re (str.++ "b" (str.++ "g" "")))(re.union (str.to_re (str.++ "b" (str.++ "f" "")))(re.union (str.to_re (str.++ "k" (str.++ "h" "")))(re.union (str.to_re (str.++ "c" (str.++ "m" "")))(re.union (str.to_re (str.++ "c" (str.++ "a" "")))(re.union (str.to_re (str.++ "c" (str.++ "v" "")))(re.union (str.to_re (str.++ "k" (str.++ "y" "")))(re.union (str.to_re (str.++ "c" (str.++ "f" "")))(re.union (str.to_re (str.++ "t" (str.++ "d" "")))(re.union (str.to_re (str.++ "c" (str.++ "l" "")))(re.union (str.to_re (str.++ "c" (str.++ "n" "")))(re.union (str.to_re (str.++ "c" (str.++ "x" "")))(re.union (str.to_re (str.++ "c" (str.++ "c" "")))(re.union (str.to_re (str.++ "k" (str.++ "m" "")))(re.union (str.to_re (str.++ "c" (str.++ "g" "")))(re.union (str.to_re (str.++ "c" (str.++ "d" "")))(re.union (str.to_re (str.++ "c" (str.++ "k" "")))(re.union (str.to_re (str.++ "c" (str.++ "r" "")))(re.union (str.to_re (str.++ "c" (str.++ "i" "")))(re.union (str.to_re (str.++ "h" (str.++ "r" "")))(re.union (str.to_re (str.++ "c" (str.++ "u" "")))(re.union (str.to_re (str.++ "c" (str.++ "y" "")))(re.union (str.to_re (str.++ "c" (str.++ "z" "")))(re.union (str.to_re (str.++ "d" (str.++ "k" "")))(re.union (str.to_re (str.++ "d" (str.++ "j" "")))(re.union (str.to_re (str.++ "d" (str.++ "m" "")))(re.union (str.to_re (str.++ "d" (str.++ "o" "")))(re.union (str.to_re (str.++ "e" (str.++ "c" "")))(re.union (str.to_re (str.++ "e" (str.++ "g" "")))(re.union (str.to_re (str.++ "s" (str.++ "v" "")))(re.union (str.to_re (str.++ "g" (str.++ "q" "")))(re.union (str.to_re (str.++ "e" (str.++ "r" "")))(re.union (str.to_re (str.++ "e" (str.++ "e" "")))(re.union (str.to_re (str.++ "e" (str.++ "t" "")))(re.union (str.to_re (str.++ "f" (str.++ "k" "")))(re.union (str.to_re (str.++ "f" (str.++ "o" "")))(re.union (str.to_re (str.++ "f" (str.++ "j" "")))(re.union (str.to_re (str.++ "f" (str.++ "i" "")))(re.union (str.to_re (str.++ "f" (str.++ "r" "")))(re.union (str.to_re (str.++ "g" (str.++ "f" "")))(re.union (str.to_re (str.++ "p" (str.++ "f" "")))(re.union (str.to_re (str.++ "t" (str.++ "f" "")))(re.union (str.to_re (str.++ "g" (str.++ "a" "")))(re.union (str.to_re (str.++ "g" (str.++ "m" "")))(re.union (str.to_re (str.++ "g" (str.++ "e" "")))(re.union (str.to_re (str.++ "d" (str.++ "e" "")))(re.union (str.to_re (str.++ "g" (str.++ "h" "")))(re.union (str.to_re (str.++ "g" (str.++ "i" "")))(re.union (str.to_re (str.++ "g" (str.++ "r" "")))(re.union (str.to_re (str.++ "g" (str.++ "l" "")))(re.union (str.to_re (str.++ "g" (str.++ "d" "")))(re.union (str.to_re (str.++ "g" (str.++ "p" "")))(re.union (str.to_re (str.++ "g" (str.++ "u" "")))(re.union (str.to_re (str.++ "g" (str.++ "t" "")))(re.union (str.to_re (str.++ " " (str.++ "g" (str.++ "g" ""))))(re.union (str.to_re (str.++ "g" (str.++ "n" "")))(re.union (str.to_re (str.++ "g" (str.++ "w" "")))(re.union (str.to_re (str.++ "g" (str.++ "y" "")))(re.union (str.to_re (str.++ "h" (str.++ "t" "")))(re.union (str.to_re (str.++ "h" (str.++ "m" "")))(re.union (str.to_re (str.++ "v" (str.++ "a" "")))(re.union (str.to_re (str.++ "h" (str.++ "n" "")))(re.union (str.to_re (str.++ "h" (str.++ "k" "")))(re.union (str.to_re (str.++ "h" (str.++ "u" "")))(re.union (str.to_re (str.++ "i" (str.++ "s" "")))(re.union (str.to_re (str.++ "i" (str.++ "d" "")))(re.union (str.to_re (str.++ "i" (str.++ "r" "")))(re.union (str.to_re (str.++ "i" (str.++ "q" "")))(re.union (str.to_re (str.++ "i" (str.++ "e" "")))(re.union (str.to_re (str.++ "i" (str.++ "m" "")))(re.union (str.to_re (str.++ "i" (str.++ "l" "")))(re.union (str.to_re (str.++ "i" (str.++ "t" "")))(re.union (str.to_re (str.++ "j" (str.++ "m" "")))(re.union (str.to_re (str.++ "j" (str.++ "p" "")))(re.union (str.to_re (str.++ "j" (str.++ "e" "")))(re.union (str.to_re (str.++ "j" (str.++ "o" "")))(re.union (str.to_re (str.++ "k" (str.++ "z" "")))(re.union (str.to_re (str.++ "k" (str.++ "e" "")))(re.union (str.to_re (str.++ "k" (str.++ "i" "")))(re.union (str.to_re (str.++ "k" (str.++ "p" "")))(re.union (str.to_re (str.++ "k" (str.++ "r" "")))(re.union (str.to_re (str.++ "k" (str.++ "w" "")))(re.union (str.to_re (str.++ "k" (str.++ "g" "")))(re.union (str.to_re (str.++ "l" (str.++ "a" "")))(re.union (str.to_re (str.++ "l" (str.++ "v" "")))(re.union (str.to_re (str.++ "l" (str.++ "b" "")))(re.union (str.to_re (str.++ "l" (str.++ "s" "")))(re.union (str.to_re (str.++ "l" (str.++ "r" "")))(re.union (str.to_re (str.++ "l" (str.++ "y" "")))(re.union (str.to_re (str.++ "l" (str.++ "i" "")))(re.union (str.to_re (str.++ "l" (str.++ "t" "")))(re.union (str.to_re (str.++ "l" (str.++ "u" "")))(re.union (str.to_re (str.++ "m" (str.++ "o" "")))(re.union (str.to_re (str.++ "m" (str.++ "k" "")))(re.union (str.to_re (str.++ "m" (str.++ "g" "")))(re.union (str.to_re (str.++ "m" (str.++ "w" "")))(re.union (str.to_re (str.++ "m" (str.++ "y" "")))(re.union (str.to_re (str.++ "m" (str.++ "v" "")))(re.union (str.to_re (str.++ "m" (str.++ "l" "")))(re.union (str.to_re (str.++ "m" (str.++ "t" "")))(re.union (str.to_re (str.++ "m" (str.++ "h" "")))(re.union (str.to_re (str.++ "m" (str.++ "q" "")))(re.union (str.to_re (str.++ "m" (str.++ "r" "")))(re.union (str.to_re (str.++ "y" (str.++ "t" "")))(re.union (str.to_re (str.++ "m" (str.++ "x" "")))(re.union (str.to_re (str.++ "f" (str.++ "m" "")))(re.union (str.to_re (str.++ "m" (str.++ "d" "")))(re.union (str.to_re (str.++ "m" (str.++ "c" "")))(re.union (str.to_re (str.++ "m" (str.++ "n" "")))(re.union (str.to_re (str.++ "m" (str.++ "s" "")))(re.union (str.to_re (str.++ "m" (str.++ "a" "")))(re.union (str.to_re (str.++ "m" (str.++ "z" "")))(re.union (str.to_re (str.++ "m" (str.++ "m" "")))(re.union (str.to_re (str.++ "n" (str.++ "r" "")))(re.union (str.to_re (str.++ "n" (str.++ "p" "")))(re.union (str.to_re (str.++ "n" (str.++ "l" "")))(re.union (str.to_re (str.++ "a" (str.++ "n" "")))(re.union (str.to_re (str.++ "n" (str.++ "c" "")))(re.union (str.to_re (str.++ "n" (str.++ "z" "")))(re.union (str.to_re (str.++ "n" (str.++ "i" "")))(re.union (str.to_re (str.++ "n" (str.++ "g" "")))(re.union (str.to_re (str.++ "n" (str.++ "u" "")))(re.union (str.to_re (str.++ "n" (str.++ "f" "")))(re.union (str.to_re (str.++ "m" (str.++ "p" "")))(re.union (str.to_re (str.++ "n" (str.++ "o" "")))(re.union (str.to_re (str.++ "o" (str.++ "m" "")))(re.union (str.to_re (str.++ "p" (str.++ "k" "")))(re.union (str.to_re (str.++ "p" (str.++ "w" "")))(re.union (str.to_re (str.++ "p" (str.++ "s" "")))(re.union (str.to_re (str.++ "p" (str.++ "a" "")))(re.union (str.to_re (str.++ "p" (str.++ "g" "")))(re.union (str.to_re (str.++ "p" (str.++ "y" "")))(re.union (str.to_re (str.++ "p" (str.++ "e" "")))(re.union (str.to_re (str.++ "p" (str.++ "h" "")))(re.union (str.to_re (str.++ "p" (str.++ "n" "")))(re.union (str.to_re (str.++ "p" (str.++ "l" "")))(re.union (str.to_re (str.++ "p" (str.++ "t" "")))(re.union (str.to_re (str.++ "q" (str.++ "a" "")))(re.union (str.to_re (str.++ "r" (str.++ "e" "")))(re.union (str.to_re (str.++ "r" (str.++ "o" "")))(re.union (str.to_re (str.++ "r" (str.++ "u" "")))(re.union (str.to_re (str.++ "r" (str.++ "w" "")))(re.union (str.to_re (str.++ "s" (str.++ "h" "")))(re.union (str.to_re (str.++ "k" (str.++ "n" "")))(re.union (str.to_re (str.++ "l" (str.++ "c" "")))(re.union (str.to_re (str.++ "p" (str.++ "m" "")))(re.union (str.to_re (str.++ "v" (str.++ "c" "")))(re.union (str.to_re (str.++ "w" (str.++ "s" "")))(re.union (str.to_re (str.++ "s" (str.++ "m" "")))(re.union (str.to_re (str.++ "s" (str.++ "t" "")))(re.union (str.to_re (str.++ "s" (str.++ "a" "")))(re.union (str.to_re (str.++ "s" (str.++ "n" "")))(re.union (str.to_re (str.++ "c" (str.++ "s" "")))(re.union (str.to_re (str.++ "s" (str.++ "c" "")))(re.union (str.to_re (str.++ "s" (str.++ "l" "")))(re.union (str.to_re (str.++ "s" (str.++ "g" "")))(re.union (str.to_re (str.++ "s" (str.++ "k" "")))(re.union (str.to_re (str.++ "s" (str.++ "i" "")))(re.union (str.to_re (str.++ "s" (str.++ "b" "")))(re.union (str.to_re (str.++ "s" (str.++ "o" "")))(re.union (str.to_re (str.++ "z" (str.++ "a" "")))(re.union (str.to_re (str.++ "g" (str.++ "s" "")))(re.union (str.to_re (str.++ "e" (str.++ "s" "")))(re.union (str.to_re (str.++ "l" (str.++ "k" "")))(re.union (str.to_re (str.++ "s" (str.++ "d" "")))(re.union (str.to_re (str.++ "s" (str.++ "r" "")))(re.union (str.to_re (str.++ "s" (str.++ "j" "")))(re.union (str.to_re (str.++ "s" (str.++ "z" "")))(re.union (str.to_re (str.++ "s" (str.++ "e" "")))(re.union (str.to_re (str.++ "c" (str.++ "h" "")))(re.union (str.to_re (str.++ "s" (str.++ "y" "")))(re.union (str.to_re (str.++ "t" (str.++ "w" "")))(re.union (str.to_re (str.++ "t" (str.++ "j" "")))(re.union (str.to_re (str.++ "t" (str.++ "z" "")))(re.union (str.to_re (str.++ "t" (str.++ "h" "")))(re.union (str.to_re (str.++ "t" (str.++ "l" "")))(re.union (str.to_re (str.++ "t" (str.++ "g" "")))(re.union (str.to_re (str.++ "t" (str.++ "k" "")))(re.union (str.to_re (str.++ "t" (str.++ "o" "")))(re.union (str.to_re (str.++ "t" (str.++ "t" "")))(re.union (str.to_re (str.++ "t" (str.++ "n" "")))(re.union (str.to_re (str.++ "t" (str.++ "r" "")))(re.union (str.to_re (str.++ "t" (str.++ "m" "")))(re.union (str.to_re (str.++ "t" (str.++ "c" "")))(re.union (str.to_re (str.++ "t" (str.++ "v" "")))(re.union (str.to_re (str.++ "u" (str.++ "g" "")))(re.union (str.to_re (str.++ "u" (str.++ "a" "")))(re.union (str.to_re (str.++ "g" (str.++ "b" "")))(re.union (str.to_re (str.++ "u" (str.++ "s" "")))(re.union (str.to_re (str.++ "u" (str.++ "m" "")))(re.union (str.to_re (str.++ "u" (str.++ "y" "")))(re.union (str.to_re (str.++ "u" (str.++ "z" "")))(re.union (str.to_re (str.++ "v" (str.++ "u" "")))(re.union (str.to_re (str.++ "v" (str.++ "e" "")))(re.union (str.to_re (str.++ "v" (str.++ "n" "")))(re.union (str.to_re (str.++ "v" (str.++ "g" "")))(re.union (str.to_re (str.++ "v" (str.++ "i" "")))(re.union (str.to_re (str.++ "w" (str.++ "f" "")))(re.union (str.to_re (str.++ "e" (str.++ "h" "")))(re.union (str.to_re (str.++ "y" (str.++ "e" "")))(re.union (str.to_re (str.++ "z" (str.++ "m" "")))(re.union (str.to_re (str.++ "z" (str.++ "w" "")))(re.union (str.to_re (str.++ "u" (str.++ "k" "")))(re.union (str.to_re (str.++ "c" (str.++ "o" (str.++ "m" ""))))(re.union (str.to_re (str.++ "e" (str.++ "d" (str.++ "u" ""))))(re.union (str.to_re (str.++ "g" (str.++ "o" (str.++ "v" ""))))(re.union (str.to_re (str.++ "i" (str.++ "n" (str.++ "t" ""))))(re.union (str.to_re (str.++ "m" (str.++ "i" (str.++ "l" ""))))(re.union (str.to_re (str.++ "n" (str.++ "e" (str.++ "t" ""))))(re.union (str.to_re (str.++ "o" (str.++ "r" (str.++ "g" ""))))(re.union (str.to_re (str.++ "b" (str.++ "i" (str.++ "z" ""))))(re.union (str.to_re (str.++ "i" (str.++ "n" (str.++ "f" (str.++ "o" "")))))(re.union (str.to_re (str.++ "n" (str.++ "a" (str.++ "m" (str.++ "e" "")))))(re.union (str.to_re (str.++ "p" (str.++ "r" (str.++ "o" ""))))(re.union (str.to_re (str.++ "a" (str.++ "e" (str.++ "r" (str.++ "o" "")))))(re.union (str.to_re (str.++ "c" (str.++ "o" (str.++ "o" (str.++ "p" "")))))(re.union (str.to_re (str.++ "m" (str.++ "u" (str.++ "s" (str.++ "e" (str.++ "u" (str.++ "m" "")))))))(re.union (str.to_re (str.++ "a" (str.++ "r" (str.++ "p" (str.++ "a" "")))))(re.union (str.to_re (str.++ "c" (str.++ "o" "")))(re.union (str.to_re (str.++ "i" (str.++ "n" "")))(re.union (str.to_re (str.++ "n" (str.++ "e" "")))(re.union (str.to_re (str.++ "b" (str.++ "i" "")))(re.union (str.to_re (str.++ "n" (str.++ "a" "")))(re.union (str.to_re (str.++ "p" (str.++ "r" "")))(re.union (str.to_re (str.++ "a" (str.++ "e" "")))(re.union (str.to_re (str.++ "m" (str.++ "u" ""))) (str.to_re (str.++ "a" (str.++ "r" "")))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))(re.++ (re.opt (re.++ (re.range ":" ":") ((_ re.loop 1 4) (re.range "0" "9")))) (re.union (str.to_re "")(re.union (re.* (re.++ (re.range "/" "/") (re.* (re.union (re.range "#" "#")(re.union (re.range "%" "&")(re.union (re.range "+" "+")(re.union (re.range "-" "9")(re.union (re.range "=" "=")(re.union (re.range "?" "?")(re.union (re.range "A" "Z") (re.range "a" "z"))))))))))) (re.range "/" "/")))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "5" ""))

(define-fun Witness2 () String (str.++ "$" (str.++ "9" (str.++ "2" (str.++ "6" "")))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.union (re.++ (re.opt (re.range "-" "-"))(re.++ (re.opt (re.range "$" "$"))(re.++ (re.union (re.++ (re.range "1" "9")(re.++ ((_ re.loop 0 2) (re.range "0" "9")) (re.* (re.++ (re.range "," ",") ((_ re.loop 3 3) (re.range "0" "9"))))))(re.union (re.++ (re.range "1" "9") (re.* (re.range "0" "9")))(re.union (re.range "0" "0") (str.to_re "")))) (re.opt (re.++ (re.union (re.range "\u{00}" "\u{09}") (re.range "\u{0b}" "\u{ff}")) ((_ re.loop 1 2) (re.range "0" "9"))))))) (re.++ (re.range "(" "(")(re.++ (re.opt (re.range "$" "$"))(re.++ (re.union (re.++ (re.range "1" "9")(re.++ ((_ re.loop 0 2) (re.range "0" "9")) (re.* (re.++ (re.range "," ",") ((_ re.loop 3 3) (re.range "0" "9"))))))(re.union (re.++ (re.range "1" "9") (re.* (re.range "0" "9")))(re.union (re.range "0" "0") (str.to_re ""))))(re.++ (re.opt (re.++ (re.union (re.range "\u{00}" "\u{09}") (re.range "\u{0b}" "\u{ff}")) ((_ re.loop 1 2) (re.range "0" "9")))) (re.range ")" ")")))))) (str.to_re "")))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "1" (str.++ "9" (str.++ "6" (str.++ "4" (str.++ "-" (str.++ "0" (str.++ "2" (str.++ "-" (str.++ "2" (str.++ "9" "")))))))))))

(define-fun Witness2 () String (str.++ "2" (str.++ "0" (str.++ "8" (str.++ "1" (str.++ "-" (str.++ "0" (str.++ "2" (str.++ "-" (str.++ "2" (str.++ "3" "")))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.union (re.++ (re.union (re.++ (re.union (str.to_re (str.++ "1" (str.++ "9" ""))) (str.to_re (str.++ "2" (str.++ "0" "")))) (re.union (re.++ (re.range "0" "0") (re.union (re.range "4" "4") (re.range "8" "8")))(re.union (re.++ (re.union (re.range "2" "2")(re.union (re.range "4" "4")(re.union (re.range "6" "6") (re.range "8" "8")))) (re.union (re.range "0" "0")(re.union (re.range "4" "4") (re.range "8" "8")))) (re.++ (re.union (re.range "1" "1")(re.union (re.range "3" "3")(re.union (re.range "5" "5")(re.union (re.range "7" "7") (re.range "9" "9"))))) (re.union (re.range "2" "2") (re.range "6" "6")))))) (str.to_re (str.++ "2" (str.++ "0" (str.++ "0" (str.++ "0" ""))))))(re.++ (re.range "-" "-") (re.union (re.++ (re.union (re.++ (re.range "0" "0") (re.union (re.range "1" "1")(re.union (re.range "3" "3")(re.union (re.range "5" "5") (re.range "7" "8"))))) (re.++ (re.range "1" "1") (re.union (re.range "0" "0") (re.range "2" "2"))))(re.++ (re.range "-" "-") (re.union (re.++ (re.range "0" "2") (re.range "0" "9")) (re.++ (re.range "3" "3") (re.range "0" "1")))))(re.union (re.++ (re.union (re.++ (re.range "0" "0") (re.union (re.range "4" "4")(re.union (re.range "6" "6") (re.range "9" "9")))) (str.to_re (str.++ "1" (str.++ "1" ""))))(re.++ (re.range "-" "-") (re.union (re.++ (re.range "0" "2") (re.range "0" "9")) (str.to_re (str.++ "3" (str.++ "0" "")))))) (re.++ (str.to_re (str.++ "0" (str.++ "2" (str.++ "-" "")))) (re.++ (re.range "0" "2") (re.range "0" "9"))))))) (re.++ (re.union (re.++ (re.union (str.to_re (str.++ "1" (str.++ "9" ""))) (str.to_re (str.++ "2" (str.++ "0" "")))) (re.union (re.++ (re.union (re.range "0" "0")(re.union (re.range "2" "2")(re.union (re.range "4" "4")(re.union (re.range "6" "6") (re.range "8" "8"))))) (re.union (re.range "1" "3")(re.union (re.range "5" "7") (re.range "9" "9")))) (re.++ (re.union (re.range "1" "1")(re.union (re.range "3" "3")(re.union (re.range "5" "5")(re.union (re.range "7" "7") (re.range "9" "9"))))) (re.union (re.range "0" "1")(re.union (re.range "3" "5") (re.range "7" "9")))))) (str.to_re (str.++ "1" (str.++ "9" (str.++ "0" (str.++ "0" ""))))))(re.++ (re.range "-" "-") (re.union (re.++ (re.union (re.++ (re.range "0" "0") (re.union (re.range "1" "1")(re.union (re.range "3" "3")(re.union (re.range "5" "5") (re.range "7" "8"))))) (re.++ (re.range "1" "1") (re.union (re.range "0" "0") (re.range "2" "2"))))(re.++ (re.range "-" "-") (re.union (re.++ (re.range "0" "2") (re.range "0" "9")) (re.++ (re.range "3" "3") (re.range "0" "1")))))(re.union (re.++ (re.union (re.++ (re.range "0" "0") (re.union (re.range "4" "4")(re.union (re.range "6" "6") (re.range "9" "9")))) (str.to_re (str.++ "1" (str.++ "1" ""))))(re.++ (re.range "-" "-") (re.union (re.++ (re.range "0" "2") (re.range "0" "9")) (str.to_re (str.++ "3" (str.++ "0" "")))))) (re.++ (str.to_re (str.++ "0" (str.++ "2" (str.++ "-" "")))) (re.++ (re.range "0" "2") (re.range "0" "8")))))))) (str.to_re "")))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "\u{a0}" (str.++ "-" (str.++ "." (str.++ "1" (str.++ "0" (str.++ ":" (str.++ "6" (str.++ ":" (str.++ "5" (str.++ "6" (str.++ "." (str.++ "9" (str.++ "\u{85}" ""))))))))))))))

(define-fun Witness2 () String (str.++ "\u{0a}" (str.++ "\u{a0}" (str.++ "-" (str.++ "1" (str.++ "0" (str.++ "6" (str.++ "7" (str.++ "5" (str.++ "0" (str.++ "." (str.++ "2" (str.++ "3" (str.++ ":" (str.++ "8" "")))))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (re.opt (re.range "-" "-"))(re.++ (re.union ((_ re.loop 0 7) (re.range "0" "9"))(re.union (re.++ (str.to_re (str.++ "1" (str.++ "0" "")))(re.++ (re.range "0" "5") ((_ re.loop 0 5) (re.range "0" "9"))))(re.union (re.++ (str.to_re (str.++ "1" (str.++ "0" (str.++ "6" ""))))(re.++ (re.range "0" "6") ((_ re.loop 0 4) (re.range "0" "9"))))(re.union (re.++ (str.to_re (str.++ "1" (str.++ "0" (str.++ "6" (str.++ "7" "")))))(re.++ (re.range "0" "4") ((_ re.loop 0 3) (re.range "0" "9"))))(re.union (re.++ (str.to_re (str.++ "1" (str.++ "0" (str.++ "6" (str.++ "7" (str.++ "5" ""))))))(re.++ (re.range "0" "1") ((_ re.loop 0 2) (re.range "0" "9")))) (re.++ (re.opt (re.++ (re.union ((_ re.loop 0 7) (re.range "0" "9"))(re.union (re.++ (str.to_re (str.++ "1" (str.++ "0" "")))(re.++ (re.range "0" "5") ((_ re.loop 0 5) (re.range "0" "9"))))(re.union (re.++ (str.to_re (str.++ "1" (str.++ "0" (str.++ "6" ""))))(re.++ (re.range "0" "6") ((_ re.loop 0 4) (re.range "0" "9"))))(re.union (re.++ (str.to_re (str.++ "1" (str.++ "0" (str.++ "6" (str.++ "7" "")))))(re.++ (re.range "0" "4") ((_ re.loop 0 3) (re.range "0" "9")))) (re.++ (str.to_re (str.++ "1" (str.++ "0" (str.++ "6" (str.++ "7" (str.++ "5" ""))))))(re.++ (re.range "0" "1") ((_ re.loop 0 2) (re.range "0" "9")))))))) (re.range "." ".")))(re.++ (re.union (re.++ (re.opt (re.range "0" "1")) (re.range "0" "9")) (re.++ (re.range "2" "2") (re.range "0" "3")))(re.++ (re.range ":" ":")(re.++ (re.opt (re.range "0" "5"))(re.++ (re.range "0" "9") (re.opt (re.++ (re.range ":" ":")(re.++ (re.opt (re.range "0" "5"))(re.++ (re.range "0" "9") (re.opt (re.++ (re.range "." ".") ((_ re.loop 1 7) (re.range "0" "9"))))))))))))))))))(re.++ (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))) (str.to_re ""))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "-" (str.++ "9" (str.++ "\u{85}" (str.++ "X" (str.++ "1" (str.++ "0" (str.++ "^" (str.++ "+" (str.++ "8" (str.++ "7" (str.++ "9" ""))))))))))))

(define-fun Witness2 () String (str.++ "6" (str.++ "E" (str.++ "-" (str.++ "9" (str.++ "5" ""))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.++ (re.opt (re.range "-" "-"))(re.++ (re.range "1" "9") (re.opt (re.++ (re.range "." ".") (re.+ (re.range "0" "9"))))))(re.++ (re.union (re.++ (re.opt (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (re.union (re.range "*" "*") (re.range "X" "X"))(re.++ (re.opt (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (str.to_re (str.++ "1" (str.++ "0" "")))(re.++ (re.union (re.range "E" "E") (re.range "^" "^")) (re.++ (re.opt (re.union (re.range "+" "+") (re.range "-" "-"))) (re.+ (re.range "0" "9")))))))) (re.++ (re.range "E" "E") (re.++ (re.opt (re.union (re.range "+" "+") (re.range "-" "-"))) (re.+ (re.range "0" "9"))))) (str.to_re ""))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "V" (str.++ "J" (str.++ "L" (str.++ "\u{85}" (str.++ "8" (str.++ "2" (str.++ "6" (str.++ "6" "")))))))))

(define-fun Witness2 () String (str.++ "Q" (str.++ "Z" (str.++ "J" (str.++ "\u{a0}" (str.++ "3" (str.++ "3" (str.++ "3" (str.++ "9" "")))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ ((_ re.loop 3 3) (re.range "A" "Z"))(re.++ (re.opt (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ ((_ re.loop 4 4) (re.range "0" "9")) (str.to_re "")))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "\u{a0}" (str.++ "P" (str.++ "O" (str.++ "B" (str.++ "o" (str.++ "x" (str.++ " " (str.++ "9" (str.++ "7" (str.++ "B" (str.++ "S" (str.++ "M" (str.++ "T" (str.++ "," (str.++ " " (str.++ "\u{85}" (str.++ "\u{a0}" (str.++ "I" (str.++ "n" (str.++ "P" (str.++ "B" (str.++ "m" (str.++ "B" (str.++ "," (str.++ "\u{a0}" (str.++ "K" (str.++ "Y" (str.++ "\u{09}" (str.++ "8" (str.++ "7" (str.++ "8" (str.++ "7" (str.++ "1" ""))))))))))))))))))))))))))))))))))

(define-fun Witness2 () String (str.++ "C" (str.++ "/" (str.++ "O" (str.++ " " (str.++ "7" (str.++ "9" (str.++ "9" (str.++ "\u{fe}" (str.++ "\u{b5}" (str.++ "\u{b5}" (str.++ "," (str.++ " " (str.++ " " (str.++ " " (str.++ "R" (str.++ "M" (str.++ "." (str.++ " " (str.++ " " (str.++ " " (str.++ "K" (str.++ "," (str.++ "\u{0d}" (str.++ "C" (str.++ "\u{5c}" (str.++ "O" (str.++ " " (str.++ "\u{d1}" (str.++ "f" (str.++ "A" (str.++ "W" (str.++ "," (str.++ "L" (str.++ "O" (str.++ "W" (str.++ "R" (str.++ "," (str.++ "\u{a0}" (str.++ " " (str.++ " " (str.++ " " (str.++ "K" (str.++ "J" (str.++ "D" (str.++ " " (str.++ "," (str.++ " " (str.++ "\u{a0}" (str.++ "V" (str.++ "A" (str.++ "\u{a0}" (str.++ "\u{0d}" (str.++ "\u{0d}" (str.++ "\u{0c}" (str.++ "\u{85}" (str.++ "6" (str.++ "2" (str.++ "3" (str.++ "6" (str.++ "8" "")))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (re.++ (re.union (re.++ (re.+ (re.range "0" "9"))(re.++ (re.+ (re.++ (re.+ (re.range " " " "))(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))) (re.opt (re.range "." "."))))) (re.opt (re.++ (re.union (re.++ (re.+ (re.range " " " ")) (str.to_re (str.++ "S" (str.++ "T" (str.++ "R" (str.++ "E" (str.++ "E" (str.++ "T" ""))))))))(re.union (str.to_re (str.++ "S" (str.++ "T" "")))(re.union (str.to_re (str.++ "D" (str.++ "R" (str.++ "I" (str.++ "V" (str.++ "E" ""))))))(re.union (str.to_re (str.++ "D" (str.++ "R" "")))(re.union (str.to_re (str.++ "A" (str.++ "V" (str.++ "E" (str.++ "N" (str.++ "U" (str.++ "E" "")))))))(re.union (str.to_re (str.++ "A" (str.++ "V" (str.++ "E" ""))))(re.union (str.to_re (str.++ "R" (str.++ "O" (str.++ "A" (str.++ "D" "")))))(re.union (str.to_re (str.++ "R" (str.++ "D" "")))(re.union (str.to_re (str.++ "L" (str.++ "O" (str.++ "O" (str.++ "P" "")))))(re.union (str.to_re (str.++ "C" (str.++ "O" (str.++ "U" (str.++ "R" (str.++ "T" ""))))))(re.union (str.to_re (str.++ "C" (str.++ "T" "")))(re.union (str.to_re (str.++ "C" (str.++ "I" (str.++ "R" (str.++ "C" (str.++ "L" (str.++ "E" "")))))))(re.union (str.to_re (str.++ "L" (str.++ "A" (str.++ "N" (str.++ "E" "")))))(re.union (str.to_re (str.++ "L" (str.++ "N" "")))(re.union (str.to_re (str.++ "B" (str.++ "O" (str.++ "U" (str.++ "L" (str.++ "E" (str.++ "V" (str.++ "A" (str.++ "R" (str.++ "D" "")))))))))) (str.to_re (str.++ "B" (str.++ "L" (str.++ "V" (str.++ "D" "")))))))))))))))))))) (re.opt (re.range "." "."))))))(re.union (re.++ (re.union (re.++ (str.to_re (str.++ "P" (str.++ "." "")))(re.++ (re.opt (re.range " " " ")) (str.to_re (str.++ "O" (str.++ "." ""))))) (re.++ (re.range "P" "P")(re.++ (re.opt (re.range " " " ")) (re.range "O" "O"))))(re.++ (re.* (re.range " " " "))(re.++ (str.to_re (str.++ "B" (str.++ "o" (str.++ "x" ""))))(re.++ (re.+ (re.range " " " ")) (re.+ (re.range "0" "9"))))))(re.union (re.++ (str.to_re (str.++ "G" (str.++ "e" (str.++ "n" (str.++ "e" (str.++ "r" (str.++ "a" (str.++ "l" ""))))))))(re.++ (re.+ (re.range " " " ")) (str.to_re (str.++ "D" (str.++ "e" (str.++ "l" (str.++ "i" (str.++ "v" (str.++ "e" (str.++ "r" (str.++ "y" ""))))))))))) (re.++ (re.range "C" "C")(re.++ (re.union (re.range "/" "/") (re.range "\u{5c}" "\u{5c}"))(re.++ (re.range "O" "O")(re.++ (re.+ (re.range " " " ")) (re.+ (re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))) (re.* (re.range " " " ")))))))))))(re.++ (re.opt (re.range "," ","))(re.++ (re.* (re.range " " " ")) (re.opt (re.union (re.++ (re.union (str.to_re (str.++ "A" (str.++ "P" (str.++ "T" ""))))(re.union (str.to_re (str.++ "B" (str.++ "L" (str.++ "D" (str.++ "G" "")))))(re.union (str.to_re (str.++ "D" (str.++ "E" (str.++ "P" (str.++ "T" "")))))(re.union (str.to_re (str.++ "F" (str.++ "L" "")))(re.union (str.to_re (str.++ "H" (str.++ "N" (str.++ "G" (str.++ "R" "")))))(re.union (str.to_re (str.++ "L" (str.++ "O" (str.++ "T" ""))))(re.union (str.to_re (str.++ "P" (str.++ "I" (str.++ "E" (str.++ "R" "")))))(re.union (str.to_re (str.++ "R" (str.++ "M" "")))(re.union (re.++ (re.range "S" "S") (re.union (str.to_re (str.++ "L" (str.++ "I" (str.++ "P" ""))))(re.union (str.to_re (str.++ "P" (str.++ "C" ""))) (re.++ (re.range "T" "T") (re.union (re.range "E" "E") (str.to_re (str.++ "O" (str.++ "P" ""))))))))(re.union (str.to_re (str.++ "T" (str.++ "R" (str.++ "L" (str.++ "R" "")))))(re.union (str.to_re (str.++ "U" (str.++ "N" (str.++ "I" (str.++ "T" ""))))) (re.range "#" "#"))))))))))))(re.++ (re.opt (re.range "." "."))(re.++ (re.* (re.range " " " ")) (re.+ (re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z"))))))))(re.union (str.to_re (str.++ "B" (str.++ "S" (str.++ "M" (str.++ "T" "")))))(re.union (str.to_re (str.++ "F" (str.++ "R" (str.++ "N" (str.++ "T" "")))))(re.union (str.to_re (str.++ "L" (str.++ "B" (str.++ "B" (str.++ "Y" "")))))(re.union (str.to_re (str.++ "L" (str.++ "O" (str.++ "W" (str.++ "R" "")))))(re.union (str.to_re (str.++ "O" (str.++ "F" (str.++ "C" ""))))(re.union (str.to_re (str.++ "P" (str.++ "H" "")))(re.union (str.to_re (str.++ "R" (str.++ "E" (str.++ "A" (str.++ "R" "")))))(re.union (str.to_re (str.++ "S" (str.++ "I" (str.++ "D" (str.++ "E" ""))))) (str.to_re (str.++ "U" (str.++ "P" (str.++ "P" (str.++ "R" ""))))))))))))))))))(re.++ (re.opt (re.range "," ","))(re.++ (re.+ (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (re.opt (re.++ (re.union (re.++ (re.+ (re.range "0" "9"))(re.++ (re.+ (re.++ (re.+ (re.range " " " "))(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))) (re.opt (re.range "." "."))))) (re.opt (re.++ (re.union (re.++ (re.+ (re.range " " " ")) (str.to_re (str.++ "S" (str.++ "T" (str.++ "R" (str.++ "E" (str.++ "E" (str.++ "T" ""))))))))(re.union (str.to_re (str.++ "S" (str.++ "T" "")))(re.union (str.to_re (str.++ "D" (str.++ "R" (str.++ "I" (str.++ "V" (str.++ "E" ""))))))(re.union (str.to_re (str.++ "D" (str.++ "R" "")))(re.union (str.to_re (str.++ "A" (str.++ "V" (str.++ "E" (str.++ "N" (str.++ "U" (str.++ "E" "")))))))(re.union (str.to_re (str.++ "A" (str.++ "V" (str.++ "E" ""))))(re.union (str.to_re (str.++ "R" (str.++ "O" (str.++ "A" (str.++ "D" "")))))(re.union (str.to_re (str.++ "R" (str.++ "D" "")))(re.union (str.to_re (str.++ "L" (str.++ "O" (str.++ "O" (str.++ "P" "")))))(re.union (str.to_re (str.++ "C" (str.++ "O" (str.++ "U" (str.++ "R" (str.++ "T" ""))))))(re.union (str.to_re (str.++ "C" (str.++ "T" "")))(re.union (str.to_re (str.++ "C" (str.++ "I" (str.++ "R" (str.++ "C" (str.++ "L" (str.++ "E" "")))))))(re.union (str.to_re (str.++ "L" (str.++ "A" (str.++ "N" (str.++ "E" "")))))(re.union (str.to_re (str.++ "L" (str.++ "N" "")))(re.union (str.to_re (str.++ "B" (str.++ "O" (str.++ "U" (str.++ "L" (str.++ "E" (str.++ "V" (str.++ "A" (str.++ "R" (str.++ "D" "")))))))))) (str.to_re (str.++ "B" (str.++ "L" (str.++ "V" (str.++ "D" "")))))))))))))))))))) (re.opt (re.range "." "."))))))(re.union (re.++ (re.union (re.++ (str.to_re (str.++ "P" (str.++ "." "")))(re.++ (re.opt (re.range " " " ")) (str.to_re (str.++ "O" (str.++ "." ""))))) (re.++ (re.range "P" "P")(re.++ (re.opt (re.range " " " ")) (re.range "O" "O"))))(re.++ (re.* (re.range " " " "))(re.++ (str.to_re (str.++ "B" (str.++ "o" (str.++ "x" ""))))(re.++ (re.+ (re.range " " " ")) (re.+ (re.range "0" "9"))))))(re.union (re.++ (str.to_re (str.++ "G" (str.++ "e" (str.++ "n" (str.++ "e" (str.++ "r" (str.++ "a" (str.++ "l" ""))))))))(re.++ (re.+ (re.range " " " ")) (str.to_re (str.++ "D" (str.++ "e" (str.++ "l" (str.++ "i" (str.++ "v" (str.++ "e" (str.++ "r" (str.++ "y" ""))))))))))) (re.++ (re.range "C" "C")(re.++ (re.union (re.range "/" "/") (re.range "\u{5c}" "\u{5c}"))(re.++ (re.range "O" "O")(re.++ (re.+ (re.range " " " ")) (re.+ (re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))) (re.* (re.range " " " ")))))))))))(re.++ (re.opt (re.range "," ","))(re.++ (re.* (re.range " " " ")) (re.opt (re.union (re.++ (re.union (str.to_re (str.++ "A" (str.++ "P" (str.++ "T" ""))))(re.union (str.to_re (str.++ "B" (str.++ "L" (str.++ "D" (str.++ "G" "")))))(re.union (str.to_re (str.++ "D" (str.++ "E" (str.++ "P" (str.++ "T" "")))))(re.union (str.to_re (str.++ "F" (str.++ "L" "")))(re.union (str.to_re (str.++ "H" (str.++ "N" (str.++ "G" (str.++ "R" "")))))(re.union (str.to_re (str.++ "L" (str.++ "O" (str.++ "T" ""))))(re.union (str.to_re (str.++ "P" (str.++ "I" (str.++ "E" (str.++ "R" "")))))(re.union (str.to_re (str.++ "R" (str.++ "M" "")))(re.union (re.++ (re.range "S" "S") (re.union (str.to_re (str.++ "L" (str.++ "I" (str.++ "P" ""))))(re.union (str.to_re (str.++ "P" (str.++ "C" ""))) (re.++ (re.range "T" "T") (re.union (re.range "E" "E") (str.to_re (str.++ "O" (str.++ "P" ""))))))))(re.union (str.to_re (str.++ "T" (str.++ "R" (str.++ "L" (str.++ "R" "")))))(re.union (str.to_re (str.++ "U" (str.++ "N" (str.++ "I" (str.++ "T" ""))))) (re.range "#" "#"))))))))))))(re.++ (re.opt (re.range "." "."))(re.++ (re.* (re.range " " " ")) (re.+ (re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z"))))))))(re.union (str.to_re (str.++ "B" (str.++ "S" (str.++ "M" (str.++ "T" "")))))(re.union (str.to_re (str.++ "F" (str.++ "R" (str.++ "N" (str.++ "T" "")))))(re.union (str.to_re (str.++ "L" (str.++ "B" (str.++ "B" (str.++ "Y" "")))))(re.union (str.to_re (str.++ "L" (str.++ "O" (str.++ "W" (str.++ "R" "")))))(re.union (str.to_re (str.++ "O" (str.++ "F" (str.++ "C" ""))))(re.union (str.to_re (str.++ "P" (str.++ "H" "")))(re.union (str.to_re (str.++ "R" (str.++ "E" (str.++ "A" (str.++ "R" "")))))(re.union (str.to_re (str.++ "S" (str.++ "I" (str.++ "D" (str.++ "E" ""))))) (str.to_re (str.++ "U" (str.++ "P" (str.++ "P" (str.++ "R" "")))))))))))))))))))(re.++ (re.opt (re.range "," ","))(re.++ (re.+ (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (re.+ (re.++ (re.+ (re.union (re.range "A" "Z") (re.range "a" "z"))) (re.* (re.range " " " "))))(re.++ (re.range "," ",")(re.++ (re.+ (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (re.union (re.++ (re.range "A" "A") (re.union (re.range "A" "B")(re.union (re.range "K" "L")(re.union (re.range "P" "P")(re.union (re.range "R" "S") (re.range "Z" "Z"))))))(re.union (str.to_re (str.++ "B" (str.++ "C" "")))(re.union (re.++ (re.range "C" "C") (re.union (re.range "A" "A")(re.union (re.range "O" "O") (re.range "T" "T"))))(re.union (re.++ (re.range "D" "D") (re.union (re.range "C" "C") (re.range "E" "E")))(re.union (re.++ (re.range "F" "F") (re.range "L" "M"))(re.union (re.++ (re.range "G" "G") (re.union (re.range "A" "A") (re.range "U" "U")))(re.union (str.to_re (str.++ "H" (str.++ "I" "")))(re.union (re.++ (re.range "I" "I") (re.union (re.range "A" "A")(re.union (re.range "D" "D")(re.union (re.range "L" "L") (re.range "N" "N")))))(re.union (re.++ (re.range "K" "K") (re.union (re.range "S" "S") (re.range "Y" "Y")))(re.union (str.to_re (str.++ "L" (str.++ "A" "")))(re.union (re.++ (re.range "M" "M") (re.union (re.range "A" "B")(re.union (re.range "D" "E")(re.union (re.range "H" "I")(re.union (re.range "N" "P") (re.range "S" "T"))))))(re.union (re.++ (re.range "N" "N") (re.union (re.range "B" "E")(re.union (re.range "H" "H")(re.union (re.range "J" "J")(re.union (re.range "L" "M")(re.union (re.range "S" "V") (re.range "Y" "Y")))))))(re.union (re.++ (re.range "O" "O") (re.union (re.range "H" "H")(re.union (re.range "K" "K")(re.union (re.range "N" "N") (re.range "R" "R")))))(re.union (re.++ (re.range "P" "P") (re.union (re.range "A" "A")(re.union (re.range "E" "E")(re.union (re.range "R" "R") (re.range "W" "W")))))(re.union (str.to_re (str.++ "Q" (str.++ "C" "")))(re.union (str.to_re (str.++ "R" (str.++ "I" "")))(re.union (re.++ (re.range "S" "S") (re.union (re.range "C" "D") (re.range "K" "K")))(re.union (re.++ (re.range "T" "T") (re.union (re.range "N" "N") (re.range "X" "X")))(re.union (str.to_re (str.++ "U" (str.++ "T" "")))(re.union (re.++ (re.range "V" "V") (re.union (re.range "A" "A")(re.union (re.range "I" "I") (re.range "T" "T"))))(re.union (re.++ (re.range "W" "W") (re.union (re.range "A" "A")(re.union (re.range "I" "I")(re.union (re.range "V" "V") (re.range "Y" "Y"))))) (str.to_re (str.++ "Y" (str.++ "T" ""))))))))))))))))))))))))(re.++ (re.+ (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (re.union (re.++ ((_ re.loop 5 5) (re.range "0" "9"))(re.++ (re.range "-" "-") ((_ re.loop 4 4) (re.range "0" "9"))))(re.union ((_ re.loop 5 5) (re.range "0" "9")) (re.++ (re.union (re.range "A" "C")(re.union (re.range "E" "E")(re.union (re.range "G" "H")(re.union (re.range "J" "N")(re.union (re.range "P" "P")(re.union (re.range "R" "T")(re.union (re.range "V" "V")(re.union (re.range "X" "Y")(re.union (re.range "a" "c")(re.union (re.range "e" "e")(re.union (re.range "g" "h")(re.union (re.range "j" "n")(re.union (re.range "p" "p")(re.union (re.range "r" "t")(re.union (re.range "v" "v") (re.range "x" "y"))))))))))))))))(re.++ (re.range "0" "9")(re.++ (re.union (re.range "A" "Z") (re.range "a" "z"))(re.++ (re.opt (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (re.range "0" "9")(re.++ (re.union (re.range "A" "Z") (re.range "a" "z")) (re.range "0" "9")))))))))(re.++ (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))) (str.to_re ""))))))))))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "9" (str.++ "8" (str.++ "8" (str.++ "1" (str.++ "7" (str.++ "0" (str.++ "8" (str.++ "7" (str.++ "7" (str.++ "8" (str.++ "8" (str.++ "4" (str.++ "-" (str.++ "2" (str.++ "8" (str.++ "7" (str.++ "9" ""))))))))))))))))))

(define-fun Witness2 () String (str.++ "8" (str.++ "3" (str.++ "8" (str.++ "9" (str.++ "8" (str.++ "9" (str.++ "2" (str.++ "2" (str.++ "7" (str.++ "3" (str.++ "2" (str.++ "2" (str.++ "-" (str.++ "9" (str.++ "9" (str.++ "8" (str.++ "8" ""))))))))))))))))))

(assert (= regexA (re.++ ((_ re.loop 4 4) (re.range "0" "9"))(re.++ (re.opt (re.range "-" "-"))(re.++ ((_ re.loop 4 4) (re.range "0" "9"))(re.++ (re.opt (re.range "-" "-"))(re.++ ((_ re.loop 4 4) (re.range "0" "9"))(re.++ (re.opt (re.range "-" "-")) ((_ re.loop 4 4) (re.range "0" "9"))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "\u{85}" (str.++ "\u{09}" "")))

(define-fun Witness2 () String (str.++ " " ""))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.+ (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "(" ")")(re.union (re.range "+" "+")(re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))))))) (str.to_re "")))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "8" (str.++ "2" (str.++ "8" (str.++ "1" (str.++ "1" (str.++ "\u{0b}" (str.++ "8" (str.++ "8" (str.++ "4" (str.++ "\u{0c}" (str.++ "7" (str.++ "9" (str.++ "8" ""))))))))))))))

(define-fun Witness2 () String (str.++ "7" (str.++ "9" (str.++ "6" (str.++ "9" (str.++ "8" (str.++ "\u{0d}" (str.++ "1" (str.++ "3" (str.++ "8" (str.++ "-" (str.++ "0" (str.++ "9" (str.++ "1" ""))))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ ((_ re.loop 5 5) (re.range "0" "9"))(re.++ (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "-" "-")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ ((_ re.loop 3 3) (re.range "0" "9"))(re.++ (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "-" "-")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ ((_ re.loop 3 3) (re.range "0" "9")) (str.to_re "")))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "\u{5c}" (str.++ "\u{5c}" (str.++ "\u{d4}" (str.++ "\u{5c}" (str.++ "\u{b1}" (str.++ "\u{5c}" (str.++ "[" (str.++ "\u{1a}" (str.++ "\u{5c}" (str.++ "\u{90}" (str.++ "." (str.++ "h" (str.++ "t" (str.++ "m" "")))))))))))))))

(define-fun Witness2 () String (str.++ "\u{5c}" (str.++ "\u{5c}" (str.++ "\u{a4}" (str.++ "\u{ab}" (str.++ "\u{5c}" (str.++ "\u{e3}" (str.++ "P" (str.++ "." (str.++ "h" (str.++ "t" (str.++ "m" ""))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.union (re.++ (re.union (re.range "A" "Z") (re.range "a" "z")) (re.range ":" ":")) (re.range "\u{5c}" "\u{5c}"))(re.++ (re.range "\u{5c}" "\u{5c}")(re.++ (re.* (re.++ (re.+ (re.union (re.range "\u{00}" "[") (re.range "]" "\u{ff}"))) (re.range "\u{5c}" "\u{5c}")))(re.++ (re.+ (re.union (re.range "\u{00}" "!")(re.union (re.range "#" ")")(re.union (re.range "+" ".")(re.union (re.range "0" "9")(re.union (re.range ";" ";")(re.union (re.range "=" "=")(re.union (re.range "@" "{") (re.range "}" "\u{ff}")))))))))(re.++ (str.to_re (str.++ "." (str.++ "h" (str.++ "t" (str.++ "m" "")))))(re.++ (re.opt (re.range "l" "l")) (str.to_re ""))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "N" (str.++ "1" (str.++ "1" (str.++ "<" (str.++ "2" (str.++ "N" (str.++ "<" (str.++ "4" (str.++ "<" (str.++ "8" (str.++ "X" (str.++ "G" (str.++ "X" (str.++ "0" (str.++ "1" (str.++ "3" (str.++ "0" (str.++ "6" (str.++ "8" (str.++ "1" (str.++ "E" (str.++ "2" (str.++ "2" (str.++ "5" (str.++ "5" (str.++ "7" (str.++ "3" (str.++ "9" (str.++ "<" (str.++ "F" (str.++ "0" (str.++ "<" (str.++ "X" (str.++ "E" (str.++ "E" (str.++ "2" (str.++ "7" (str.++ "X" (str.++ "5" (str.++ "P" (str.++ "9" (str.++ "7" (str.++ "8" (str.++ "9" "")))))))))))))))))))))))))))))))))))))))))))))

(define-fun Witness2 () String (str.++ "3" (str.++ "W" (str.++ "7" (str.++ "T" (str.++ "O" (str.++ "W" (str.++ "9" (str.++ "8" (str.++ "J" (str.++ "0" (str.++ "X" (str.++ "R" (str.++ "Q" (str.++ "3" (str.++ "9" (str.++ "9" (str.++ "9" (str.++ "5" (str.++ "1" (str.++ "8" (str.++ "Z" (str.++ "8" (str.++ "7" (str.++ "7" (str.++ "9" (str.++ "9" (str.++ "8" (str.++ "6" (str.++ "9" (str.++ "J" (str.++ "8" (str.++ "<" (str.++ "5" (str.++ "6" (str.++ "Z" (str.++ "<" (str.++ "J" (str.++ "Q" (str.++ "V" (str.++ "4" (str.++ "7" (str.++ "9" (str.++ "8" (str.++ "0" "")))))))))))))))))))))))))))))))))))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ ((_ re.loop 9 9) (re.union (re.range "0" "9")(re.union (re.range "<" "<") (re.range "A" "Z"))))(re.++ (re.range "0" "9")(re.++ ((_ re.loop 3 3) (re.range "A" "Z"))(re.++ ((_ re.loop 7 7) (re.range "0" "9"))(re.++ (re.range "A" "Z")(re.++ ((_ re.loop 7 7) (re.range "0" "9"))(re.++ ((_ re.loop 14 14) (re.union (re.range "0" "9")(re.union (re.range "<" "<") (re.range "A" "Z"))))(re.++ ((_ re.loop 2 2) (re.range "0" "9")) (str.to_re ""))))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "0" ""))

(define-fun Witness2 () String (str.++ "-" (str.++ "1" (str.++ "2" (str.++ "8" "")))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.union (re.range "0" "0")(re.union (re.++ (re.range "-" "-") (re.union (re.++ (re.range "1" "9") (re.opt (re.range "0" "9"))) (re.++ (re.range "1" "1") (re.union (re.++ (re.range "0" "1") (re.range "0" "9")) (re.++ (re.range "2" "2") (re.range "0" "8")))))) (re.++ (re.opt (re.range "+" "+")) (re.union (re.++ (re.range "1" "9") (re.opt (re.range "0" "9"))) (re.++ (re.range "1" "1") (re.union (re.++ (re.range "0" "1") (re.range "0" "9")) (re.++ (re.range "2" "2") (re.range "0" "7")))))))) (str.to_re "")))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "$" (str.++ "p" (str.++ "e" (str.++ "c" (str.++ "i" (str.++ "a" (str.++ "l" (str.++ ";" (str.++ "0" (str.++ "f" (str.++ "f" (str.++ "e" (str.++ "r" ""))))))))))))))

(define-fun Witness2 () String (str.++ "S" (str.++ "p" (str.++ "e" (str.++ "c" (str.++ "i" (str.++ "a" (str.++ "1" (str.++ "=" (str.++ "0" (str.++ "f" (str.++ "f" (str.++ "e" (str.++ "r" (str.++ "_" "")))))))))))))))

(assert (= regexA (re.++ (re.* (re.union (re.range "\u{00}" "\u{09}") (re.range "\u{0b}" "\u{ff}")))(re.++ (re.union (re.range "$" "$")(re.union (re.range "S" "S") (re.range "s" "s")))(re.++ (str.to_re (str.++ "p" (str.++ "e" (str.++ "c" (str.++ "i" (str.++ "a" ""))))))(re.++ (re.union (re.range "1" "1") (re.range "l" "l"))(re.++ (re.union (re.range "\u{00}" "/")(re.union (re.range ":" "@")(re.union (re.range "[" "^")(re.union (re.range "`" "`")(re.union (re.range "{" "\u{a9}")(re.union (re.range "\u{ab}" "\u{b4}")(re.union (re.range "\u{b6}" "\u{b9}")(re.union (re.range "\u{bb}" "\u{bf}")(re.union (re.range "\u{d7}" "\u{d7}") (re.range "\u{f7}" "\u{f7}"))))))))))(re.++ (re.union (re.range "0" "0")(re.union (re.range "O" "O") (re.range "o" "o")))(re.++ (str.to_re (str.++ "f" (str.++ "f" (str.++ "e" (str.++ "r" ""))))) (re.* (re.union (re.range "\u{00}" "\u{09}") (re.range "\u{0b}" "\u{ff}"))))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "\u{5c}" (str.++ "\u{5c}" (str.++ "\u{ba}" (str.++ "9" (str.++ "\u{5c}" (str.++ "\u{ba}" (str.++ "." (str.++ "t" (str.++ "x" (str.++ "t" "")))))))))))

(define-fun Witness2 () String (str.++ "U" (str.++ ":" (str.++ "\u{5c}" (str.++ "\u{aa}" (str.++ "\u{b5}" (str.++ " " (str.++ "." (str.++ "t" (str.++ "x" (str.++ "t" "")))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.union (re.++ (re.union (re.range "A" "Z") (re.range "a" "z")) (re.range ":" ":")) (re.++ (re.++ ((_ re.loop 2 2) (re.range "\u{5c}" "\u{5c}")) (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))) (re.opt (re.range "$" "$"))))(re.++ (re.+ (re.++ (re.range "\u{5c}" "\u{5c}") (re.++ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))(re.++ (re.* (re.union (re.range " " " ")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))) (re.* (re.union (re.range "\u{00}" "\u{09}") (re.range "\u{0b}" "\u{ff}")))))))(re.++ (re.range "." ".")(re.++ (re.union (str.to_re (str.++ "t" (str.++ "x" (str.++ "t" "")))) (str.to_re (str.++ "T" (str.++ "X" (str.++ "T" ""))))) (str.to_re ""))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "\u{a5}" (str.++ "," (str.++ "\u{5c}" (str.++ "\u{f3}" (str.++ "\u{f4}" (str.++ "\u{00}" (str.++ "," (str.++ "\u{99}" (str.++ "\u{a6}" (str.++ "U" "")))))))))))

(define-fun Witness2 () String (str.++ "1" (str.++ "," (str.++ "\u{b5}" (str.++ "," (str.++ "N" (str.++ "'" "")))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.+ (re.union (re.range "\u{00}" "+") (re.range "-" "\u{ff}")))(re.++ (re.range "," ",")(re.++ (re.+ (re.union (re.range "\u{00}" "+") (re.range "-" "\u{ff}")))(re.++ (re.range "," ",")(re.++ (re.+ (re.union (re.range "\u{00}" "+") (re.range "-" "\u{ff}"))) (str.to_re "")))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "+" (str.++ "2" (str.++ "7" (str.++ "8" (str.++ "3" (str.++ "8" (str.++ "5" (str.++ "4" (str.++ "8" (str.++ "2" (str.++ "8" (str.++ "9" "")))))))))))))

(define-fun Witness2 () String (str.++ "2" (str.++ "7" (str.++ "8" (str.++ "3" (str.++ "2" (str.++ "9" (str.++ "9" (str.++ "8" (str.++ "7" (str.++ "9" (str.++ "8" ""))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.union (str.to_re (str.++ "+" (str.++ "2" (str.++ "7" ""))))(re.union (str.to_re (str.++ "2" (str.++ "7" ""))) (re.range "0" "0")))(re.++ (re.union (str.to_re (str.++ "=" (str.++ "7" (str.++ "2" ""))))(re.union (str.to_re (str.++ "8" (str.++ "2" "")))(re.union (str.to_re (str.++ "7" (str.++ "3" "")))(re.union (str.to_re (str.++ "8" (str.++ "3" "")))(re.union (str.to_re (str.++ "7" (str.++ "4" ""))) (str.to_re (str.++ "8" (str.++ "4" ""))))))))(re.++ ((_ re.loop 7 7) (re.range "0" "9")) (str.to_re "")))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "0" (str.++ "." (str.++ "9" (str.++ "2" "")))))

(define-fun Witness2 () String (str.++ "0" (str.++ "." (str.++ "8" (str.++ "1" "")))))

(assert (= regexA (re.union (re.++ (str.to_re "") (re.++ (re.union (re.++ (re.range "1" "9")(re.++ ((_ re.loop 0 2) (re.range "0" "9")) (re.* (re.++ (re.range "," ",") ((_ re.loop 3 3) (re.range "0" "9")))))) (re.++ (re.range "1" "9") (re.* (re.range "0" "9")))) (re.opt (re.++ (re.range "." ".") ((_ re.loop 2 2) (re.range "0" "9")))))) (re.++ (re.++ (str.to_re (str.++ "0" (str.++ "." ""))) (re.union (re.++ (re.range "0" "0") (re.range "1" "9")) (re.++ (re.range "1" "9") (re.range "0" "9")))) (str.to_re "")))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "3" (str.++ "8" (str.++ "9" (str.++ "4" (str.++ "5" (str.++ "9" (str.++ "8" (str.++ "5" (str.++ "4" (str.++ "X" "")))))))))))

(define-fun Witness2 () String (str.++ "9" (str.++ "7" (str.++ "9" (str.++ "9" (str.++ "9" (str.++ "9" (str.++ "3" (str.++ "9" (str.++ "6" (str.++ "1" (str.++ "8" (str.++ "1" (str.++ "5" ""))))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.opt (re.++ (str.to_re (str.++ "9" (str.++ "7" ""))) (re.range "8" "9")))(re.++ ((_ re.loop 9 9) (re.range "0" "9"))(re.++ (re.union (re.range "0" "9") (re.range "X" "X")) (str.to_re "")))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "6" (str.++ "2" (str.++ "5" (str.++ "5" (str.++ "9" ""))))))

(define-fun Witness2 () String (str.++ "1" ""))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.union (re.range "1" "9")(re.union (re.++ (re.range "1" "9") ((_ re.loop 1 3) (re.range "0" "9")))(re.union (re.++ (re.range "1" "5") ((_ re.loop 4 4) (re.range "0" "9")))(re.union (re.++ (re.range "6" "6")(re.++ (re.range "0" "4") ((_ re.loop 3 3) (re.range "0" "9"))))(re.union (re.++ (str.to_re (str.++ "6" (str.++ "5" "")))(re.++ (re.range "0" "4") ((_ re.loop 2 2) (re.range "0" "9"))))(re.union (re.++ (str.to_re (str.++ "6" (str.++ "5" (str.++ "5" ""))))(re.++ (re.range "0" "2") (re.range "0" "9"))) (re.++ (str.to_re (str.++ "6" (str.++ "5" (str.++ "5" (str.++ "3" ""))))) (re.range "0" "6")))))))) (str.to_re "")))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "7" (str.++ "2" (str.++ "8" (str.++ "3" (str.++ "8" ""))))))

(define-fun Witness2 () String (str.++ "8" (str.++ "8" (str.++ "8" (str.++ "8" (str.++ "6" (str.++ "-" (str.++ "8" (str.++ "8" (str.++ "1" (str.++ "1" "")))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ ((_ re.loop 5 5) (re.range "0" "9"))(re.++ (re.opt (re.++ (re.range "-" "-") ((_ re.loop 4 4) (re.range "0" "9")))) (str.to_re ""))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "9" (str.++ "4" (str.++ "2" (str.++ "/" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "8" (str.++ "9" (str.++ "1" (str.++ "-" (str.++ "9" (str.++ "6" (str.++ "8" (str.++ "4" (str.++ "8" (str.++ "5" ""))))))))))))))))))

(define-fun Witness2 () String (str.++ "0" (str.++ "8" (str.++ "1" (str.++ "-" (str.++ "9" (str.++ "9" (str.++ "5" (str.++ "9" (str.++ "9" (str.++ "3" (str.++ "|" (str.++ "8" (str.++ "8" (str.++ "5" (str.++ "6" (str.++ "3" (str.++ "9" ""))))))))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ ((_ re.loop 3 3) (re.range "0" "9"))(re.++ (re.union (re.range "-" "-")(re.union (re.range "/" "/") (re.range "|" "|")))(re.++ ((_ re.loop 6 6) (re.range "0" "9"))(re.++ (re.union (re.range "-" "-")(re.union (re.range "/" "/") (re.range "|" "|")))(re.++ ((_ re.loop 6 6) (re.range "0" "9")) (str.to_re "")))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "n" (str.++ "-" (str.++ "3" (str.++ "k" "")))))

(define-fun Witness2 () String (str.++ "k" (str.++ "e" (str.++ "9" (str.++ "8" (str.++ "4" (str.++ "9" (str.++ "J" (str.++ "-" (str.++ "8" (str.++ "-" (str.++ "9" ""))))))))))))

(assert (= regexA (re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z"))))(re.++ (re.* (re.++ (re.range "-" "-") (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))))) (re.* (re.++ (re.range "." ".")(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))) (re.* (re.++ (re.range "-" "-") (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "t" (str.++ "_" (str.++ "o" (str.++ "@" (str.++ "j" (str.++ "9" (str.++ "." (str.++ "b" (str.++ "s" (str.++ "9" "")))))))))))

(define-fun Witness2 () String (str.++ "4" (str.++ "_" (str.++ "7" (str.++ "d" (str.++ "@" (str.++ "1" (str.++ "9" (str.++ "p" (str.++ "." (str.++ "v" (str.++ "q" ""))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.union (re.range "0" "9") (re.range "a" "z"))(re.++ (re.* (re.union (re.range "-" ".")(re.union (re.range "0" "9")(re.union (re.range "_" "_") (re.range "a" "z")))))(re.++ (re.union (re.range "0" "9") (re.range "a" "z"))(re.++ (re.range "@" "@")(re.++ (re.union (re.range "0" "9") (re.range "a" "z"))(re.++ (re.* (re.union (re.range "-" ".")(re.union (re.range "0" "9")(re.union (re.range "_" "_") (re.range "a" "z")))))(re.++ (re.union (re.range "0" "9") (re.range "a" "z"))(re.++ (re.range "." ".")(re.++ ((_ re.loop 2 4) (re.union (re.range "0" "9") (re.range "a" "z"))) (str.to_re "")))))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "x" (str.++ "8" (str.++ "Z" (str.++ " " (str.++ "4" (str.++ "R" (str.++ "8" ""))))))))

(define-fun Witness2 () String (str.++ "G" (str.++ "5" (str.++ "r" (str.++ " " (str.++ "6" (str.++ "K" (str.++ "3" ""))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.union (re.range "A" "C")(re.union (re.range "E" "E")(re.union (re.range "G" "H")(re.union (re.range "J" "N")(re.union (re.range "P" "P")(re.union (re.range "R" "T")(re.union (re.range "V" "V")(re.union (re.range "X" "Y")(re.union (re.range "a" "c")(re.union (re.range "e" "e")(re.union (re.range "g" "h")(re.union (re.range "j" "n")(re.union (re.range "p" "p")(re.union (re.range "r" "t")(re.union (re.range "v" "v") (re.range "x" "y"))))))))))))))))(re.++ (re.range "0" "9")(re.++ (re.union (re.range "A" "C")(re.union (re.range "E" "E")(re.union (re.range "G" "H")(re.union (re.range "J" "N")(re.union (re.range "P" "P")(re.union (re.range "R" "T")(re.union (re.range "V" "Z")(re.union (re.range "a" "c")(re.union (re.range "e" "e")(re.union (re.range "g" "h")(re.union (re.range "j" "n")(re.union (re.range "p" "p")(re.union (re.range "r" "t") (re.range "v" "z"))))))))))))))(re.++ (re.opt (re.range " " " "))(re.++ (re.range "0" "9")(re.++ (re.union (re.range "A" "C")(re.union (re.range "E" "E")(re.union (re.range "G" "H")(re.union (re.range "J" "N")(re.union (re.range "P" "P")(re.union (re.range "R" "T")(re.union (re.range "V" "Z")(re.union (re.range "a" "c")(re.union (re.range "e" "e")(re.union (re.range "g" "h")(re.union (re.range "j" "n")(re.union (re.range "p" "p")(re.union (re.range "r" "t") (re.range "v" "z"))))))))))))))(re.++ (re.range "0" "9") (str.to_re "")))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "7" (str.++ "," (str.++ "8" (str.++ "2" (str.++ "8" (str.++ "0" (str.++ "7" ""))))))))

(define-fun Witness2 () String (str.++ "2" ""))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.union (re.++ ((_ re.loop 1 3) (re.range "0" "9"))(re.++ (re.union (re.* (re.++ (re.range "," ",") ((_ re.loop 3 3) (re.range "0" "9")))) (re.* (re.range "0" "9")))(re.++ (re.opt (re.range "." ".")) (re.+ (re.range "0" "9"))))) (re.+ (re.range "0" "9"))) (str.to_re "")))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "0" (str.++ "1" (str.++ "1" (str.++ "-" (str.++ "8" (str.++ "8" (str.++ "5" (str.++ "-" (str.++ "2" (str.++ "-" (str.++ "0" (str.++ "0" (str.++ "8" ""))))))))))))))

(define-fun Witness2 () String (str.++ "0" (str.++ "1" (str.++ "1" (str.++ "-" (str.++ "3" (str.++ "0" (str.++ "8" (str.++ "-" (str.++ "4" (str.++ "5" (str.++ "-" (str.++ "0" (str.++ "9" (str.++ "2" (str.++ "\u{95}" (str.++ "\u{16}" (str.++ "\u{17}" (str.++ "Y" (str.++ "8" ""))))))))))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (str.to_re (str.++ "0" (str.++ "1" (str.++ "1" (str.++ "-" "")))))(re.++ (re.++ (re.range "1" "9") ((_ re.loop 1 5) (re.range "0" "9")))(re.++ (re.range "-" "-")(re.++ (re.+ (re.range "0" "9"))(re.++ (re.range "-" "-")(re.++ (re.++ (re.opt (re.range "0" "0"))(re.++ (re.range "0" "9") (re.+ (re.range "0" "9"))))(re.++ (re.opt (re.++ (re.+ (re.union (re.range "\u{00}" ",")(re.union (re.range "." "/") (re.range ":" "\u{ff}")))) ((_ re.loop 1 4) (re.range "0" "9")))) (str.to_re "")))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "9" (str.++ "/" (str.++ "9" (str.++ "1" (str.++ "0" ""))))))

(define-fun Witness2 () String (str.++ "9" (str.++ "/" (str.++ "9" (str.++ "2" (str.++ "0" ""))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ ((_ re.loop 1 2) (re.range "0" "9"))(re.++ (re.range "/" "/")(re.++ ((_ re.loop 2 4) (re.range "0" "9")) (str.to_re "")))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "F" (str.++ "6" (str.++ "5" (str.++ "F" (str.++ "#" (str.++ "#" (str.++ "X" (str.++ "B" (str.++ "V" (str.++ "8" (str.++ "*" ""))))))))))))

(define-fun Witness2 () String (str.++ "a" (str.++ "*" (str.++ "#" (str.++ "#" (str.++ "*" (str.++ "v" (str.++ "8" (str.++ "V" (str.++ "O" ""))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ ((_ re.loop 8 15) (re.union (re.range "#" "#")(re.union (re.range "*" "*")(re.union (re.range "0" "9")(re.union (re.range "@" "Z") (re.range "a" "z")))))) (str.to_re "")))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "0" (str.++ "8" (str.++ "/" (str.++ "0" (str.++ "6" (str.++ "/" (str.++ "2" (str.++ "9" (str.++ "9" (str.++ "9" "")))))))))))

(define-fun Witness2 () String (str.++ "0" (str.++ "8" (str.++ "/" (str.++ "8" (str.++ "/" (str.++ "1" (str.++ "9" (str.++ "6" (str.++ "9" ""))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.union (re.range "1" "9")(re.union (re.++ (re.range "0" "0") (re.range "1" "9")) (re.++ (re.range "1" "1") (re.range "0" "2"))))(re.++ (re.range "/" "/")(re.++ (re.union (re.range "0" "9")(re.union (re.++ (re.range "0" "2") (re.range "0" "9")) (re.++ (re.range "3" "3") (re.range "0" "1"))))(re.++ (re.range "/" "/")(re.++ (re.union (re.++ (re.range "0" "9") (re.range "0" "9")) (re.++ (re.range "1" "2")(re.++ (re.union (re.range "," ",")(re.union (re.range "0" "0") (re.range "9" "9")))(re.++ (re.range "0" "9") (re.range "0" "9"))))) (str.to_re "")))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "h" (str.++ "t" (str.++ "t" (str.++ "p" (str.++ ":" (str.++ "/" (str.++ "/" (str.++ "b" (str.++ "-" (str.++ "9" (str.++ "4" (str.++ "/" (str.++ "\u{05}" (str.++ "\u{ed}" (str.++ "-" (str.++ "\u{be}" (str.++ "\u{86}" ""))))))))))))))))))

(define-fun Witness2 () String (str.++ "h" (str.++ "t" (str.++ "t" (str.++ "p" (str.++ ":" (str.++ "/" (str.++ "/" (str.++ "x" (str.++ "w" (str.++ "." (str.++ "8" (str.++ "R" (str.++ "a" (str.++ "9" (str.++ "." (str.++ "y" (str.++ "/" (str.++ "\u{c5}" (str.++ ">" (str.++ "\u{d0}" (str.++ "\u{d8}" (str.++ "\u{11}" "")))))))))))))))))))))))

(assert (= regexA (re.++ (str.to_re (str.++ "h" (str.++ "t" (str.++ "t" (str.++ "p" "")))))(re.++ (re.opt (re.range "s" "s"))(re.++ (str.to_re (str.++ ":" (str.++ "/" (str.++ "/" ""))))(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z"))))(re.++ (re.* (re.++ (re.range "-" "-") (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z"))))))(re.++ (re.* (re.++ (re.range "." ".")(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))) (re.* (re.++ (re.range "-" "-") (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))))))))(re.++ (re.range "/" "/") (re.* (re.union (re.range "\u{00}" "\u{08}")(re.union (re.range "\u{0e}" "\u{1f}")(re.union (re.range "!" "\u{84}")(re.union (re.range "\u{86}" "\u{9f}") (re.range "\u{a1}" "\u{ff}")))))))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "9" (str.++ "8" (str.++ "8" (str.++ "9" (str.++ "6" (str.++ "8" (str.++ "8" (str.++ "8" (str.++ "9" (str.++ "8" "")))))))))))

(define-fun Witness2 () String "")

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.opt (re.union ((_ re.loop 8 8) (re.range "0" "9"))(re.union ((_ re.loop 10 10) (re.range "0" "9"))(re.union ((_ re.loop 11 11) (re.range "0" "9")) (re.++ ((_ re.loop 6 6) (re.range "0" "9"))(re.++ (re.range "-" "-") ((_ re.loop 5 5) (re.range "0" "9")))))))) (str.to_re "")))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "{" (str.++ "x" (str.++ "x" (str.++ "e" (str.++ "8" (str.++ "a" (str.++ "9" (str.++ "," (str.++ " " (str.++ "c" (str.++ "E" (str.++ "8" (str.++ "e" (str.++ "," (str.++ " " (str.++ "A" (str.++ "C" (str.++ "E" (str.++ "," (str.++ "{" (str.++ "x" (str.++ "E" (str.++ "x" (str.++ "B" (str.++ "," (str.++ " " (str.++ "9" (str.++ "x" (str.++ "f" (str.++ "," (str.++ " " (str.++ "6" (str.++ "9" (str.++ "D" (str.++ "," (str.++ "0" (str.++ "c" (str.++ "A" (str.++ "," (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "," (str.++ "A" (str.++ "7" (str.++ "6" (str.++ "," (str.++ " " (str.++ "F" (str.++ "4" (str.++ "0" (str.++ "," (str.++ "5" (str.++ "9" (str.++ "f" (str.++ "}" (str.++ "}" ""))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(define-fun Witness2 () String (str.++ "9" (str.++ "a" (str.++ "4" (str.++ "8" (str.++ "D" (str.++ "3" (str.++ "0" (str.++ "3" (str.++ "b" (str.++ "0" (str.++ "8" (str.++ "8" (str.++ "f" (str.++ "A" (str.++ "D" (str.++ "9" (str.++ "6" (str.++ "A" (str.++ "f" (str.++ "F" (str.++ "2" (str.++ "F" (str.++ "f" (str.++ "f" (str.++ "0" (str.++ "F" (str.++ "9" (str.++ "B" (str.++ "2" (str.++ "F" (str.++ "b" (str.++ "A" "")))))))))))))))))))))))))))))))))

(assert (= regexA (re.union (re.++ (str.to_re "")(re.++ ((_ re.loop 32 32) (re.union (re.range "0" "9")(re.union (re.range "A" "F") (re.range "a" "f")))) (str.to_re "")))(re.union (re.++ (re.opt (re.union (re.range "(" "(") (re.range "{" "{")))(re.++ ((_ re.loop 8 8) (re.union (re.range "0" "9")(re.union (re.range "A" "F") (re.range "a" "f"))))(re.++ (re.range "-" "-")(re.++ ((_ re.loop 3 3) (re.++ ((_ re.loop 4 4) (re.union (re.range "0" "9")(re.union (re.range "A" "F") (re.range "a" "f")))) (re.range "-" "-")))(re.++ ((_ re.loop 12 12) (re.union (re.range "0" "9")(re.union (re.range "A" "F") (re.range "a" "f"))))(re.++ (re.opt (re.union (re.range ")" ")") (re.range "}" "}"))) (str.to_re ""))))))) (re.++ (str.to_re "")(re.++ (re.opt (re.range "{" "{"))(re.++ ((_ re.loop 3 10) (re.union (re.range "0" "9")(re.union (re.range "A" "F")(re.union (re.range "a" "f") (re.range "x" "x")))))(re.++ ((_ re.loop 2 2) (re.++ (re.range "," ",")(re.++ (re.opt (re.range " " " ")) ((_ re.loop 3 6) (re.union (re.range "0" "9")(re.union (re.range "A" "F")(re.union (re.range "a" "f") (re.range "x" "x"))))))))(re.++ (re.range "," ",")(re.++ (re.opt (re.range " " " "))(re.++ (re.range "{" "{")(re.++ ((_ re.loop 7 7) (re.++ ((_ re.loop 3 4) (re.union (re.range "0" "9")(re.union (re.range "A" "F")(re.union (re.range "a" "f") (re.range "x" "x")))))(re.++ (re.range "," ",") (re.opt (re.range " " " ")))))(re.++ ((_ re.loop 3 4) (re.union (re.range "0" "9")(re.union (re.range "A" "F")(re.union (re.range "a" "f") (re.range "x" "x")))))(re.++ (str.to_re (str.++ "}" (str.++ "}" ""))) (str.to_re "")))))))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "=" (str.++ " " (str.++ " " (str.++ " " (str.++ ";" (str.++ "c" (str.++ "i" (str.++ "d" (str.++ " " (str.++ " " (str.++ ":" (str.++ "\u{98}" "")))))))))))))

(define-fun Witness2 () String (str.++ " " (str.++ "=" (str.++ " " (str.++ ";" (str.++ ";" (str.++ "c" (str.++ "i" (str.++ "d" (str.++ ":" (str.++ " " (str.++ "\u{c9}" (str.++ "\u{89}" (str.++ "N" ""))))))))))))))

(assert (= regexA (re.++ (re.* (re.range " " " "))(re.++ (re.range "=" "=")(re.++ (re.* (re.range " " " "))(re.++ (re.* (re.union (re.range "&" "&")(re.union (re.range ";" ";")(re.union (re.range "o" "o")(re.union (re.range "q" "q") (re.range "t" "u"))))))(re.++ (str.to_re (str.++ "c" (str.++ "i" (str.++ "d" ""))))(re.++ (re.* (re.range " " " "))(re.++ (re.range ":" ":")(re.++ (re.* (re.range " " " ")) (re.+ (re.union (re.range "\u{00}" "\u{1f}")(re.union (re.range "!" "%")(re.union (re.range "'" ":")(re.union (re.range "<" "f")(re.union (re.range "h" "k")(re.union (re.range "m" "n")(re.union (re.range "p" "p")(re.union (re.range "r" "s") (re.range "v" "\u{ff}"))))))))))))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "$" (str.++ "9" "")))

(define-fun Witness2 () String (str.++ "$" (str.++ "0" "")))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.range "$" "$")(re.++ (re.opt (re.union (re.range "+" "+") (re.range "-" "-")))(re.++ (re.union (re.+ (re.range "0" "9")) (re.++ ((_ re.loop 1 3) (re.range "0" "9")) (re.* (re.++ (re.range "," ",") ((_ re.loop 3 3) (re.range "0" "9"))))))(re.++ (re.opt (re.++ (re.range "." ".") ((_ re.loop 1 2) (re.range "0" "9")))) (str.to_re ""))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String "")

(define-fun Witness2 () String (str.++ "-" (str.++ "d" "")))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.* (re.union (re.range "\u{00}" "!")(re.union (re.range "#" ")")(re.union (re.range "+" ".")(re.union (re.range "0" "9")(re.union (re.range ";" ";")(re.union (re.range "=" "=")(re.union (re.range "@" "[")(re.union (re.range "]" "{") (re.range "}" "\u{ff}")))))))))) (str.to_re "")))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "." (str.++ "@" (str.++ "C" (str.++ "\u{f2}" (str.++ "\u{eb}" (str.++ "9" (str.++ "\u{c1}" (str.++ "\u{c1}" (str.++ "." (str.++ "\u{aa}" (str.++ "\u{db}" (str.++ "\u{aa}" "")))))))))))))

(define-fun Witness2 () String (str.++ "\u{cc}" (str.++ "\u{f6}" (str.++ "@" (str.++ "\u{b5}" (str.++ "." (str.++ "e" (str.++ "\u{c5}" ""))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.+ (re.union (re.range "-" ".")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))))(re.++ (re.range "@" "@")(re.++ (re.+ (re.++ (re.+ (re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))) (re.range "." ".")))(re.++ ((_ re.loop 2 4) (re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))) (str.to_re ""))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "h" (str.++ "9" (str.++ "y" (str.++ " " (str.++ "5" (str.++ "w" (str.++ "7" ""))))))))

(define-fun Witness2 () String (str.++ "t" (str.++ "1" (str.++ "f" (str.++ "9" (str.++ "z" (str.++ "8" "")))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.union (re.range "A" "C")(re.union (re.range "E" "E")(re.union (re.range "G" "H")(re.union (re.range "J" "N")(re.union (re.range "P" "P")(re.union (re.range "R" "T")(re.union (re.range "V" "V")(re.union (re.range "X" "Y")(re.union (re.range "a" "c")(re.union (re.range "e" "e")(re.union (re.range "g" "h")(re.union (re.range "j" "n")(re.union (re.range "p" "p")(re.union (re.range "r" "t")(re.union (re.range "v" "v") (re.range "x" "y"))))))))))))))))(re.++ (re.range "0" "9")(re.++ (re.union (re.range "A" "Z") (re.range "a" "z"))(re.++ (re.opt (re.range " " " "))(re.++ (re.range "0" "9")(re.++ (re.union (re.range "A" "Z") (re.range "a" "z"))(re.++ (re.range "0" "9") (str.to_re "")))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "8" (str.++ "1" (str.++ "1" (str.++ "1" (str.++ "3" (str.++ "6" "")))))))

(define-fun Witness2 () String (str.++ "5" (str.++ "1" (str.++ "1" (str.++ "9" (str.++ "0" (str.++ "8" "")))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ ((_ re.loop 3 3) (re.range "1" "9"))(re.++ (re.opt (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ ((_ re.loop 3 3) (re.range "0" "9")) (str.to_re "")))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "+" (str.++ "5" (str.++ "(" (str.++ "8" (str.++ ")" (str.++ "8" (str.++ "9" ""))))))))

(define-fun Witness2 () String (str.++ "0" (str.++ "8" (str.++ "4" ""))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.opt (re.++ (re.range "+" "+")(re.++ (re.range "1" "9")(re.++ (re.* (re.range "0" "9")) (re.union (re.++ (re.range "(" "(")(re.++ (re.* (re.range "0" "9")) (re.range ")" ")"))) (re.++ (re.range "-" "-")(re.++ (re.* (re.range "0" "9")) (re.range "-" "-"))))))))(re.++ (re.opt (re.range "0" "0"))(re.++ (re.range "1" "9")(re.++ (re.* (re.union (re.range " " " ")(re.union (re.range "-" "-") (re.range "0" "9")))) (str.to_re ""))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "2" (str.++ "\u{e2}" (str.++ "$" (str.++ "l" (str.++ "\u{e7}" (str.++ "K" (str.++ "E" (str.++ "@" (str.++ "6" (str.++ "G" (str.++ "R" (str.++ "R" (str.++ "H" (str.++ "8" (str.++ "9" (str.++ "." (str.++ "d" (str.++ "g" (str.++ "r" (str.++ "e" (str.++ "z" (str.++ "v" "")))))))))))))))))))))))

(define-fun Witness2 () String (str.++ "u" (str.++ "g" (str.++ "N" (str.++ "\u{da}" (str.++ "@" (str.++ "U" (str.++ "W" (str.++ "I" (str.++ "f" (str.++ "4" (str.++ "." (str.++ "s" (str.++ "R" (str.++ "X" (str.++ "z" ""))))))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.union (re.range "!" "!")(re.union (re.range "#" "'")(re.union (re.range "*" "+")(re.union (re.range "-" "-")(re.union (re.range "/" "9")(re.union (re.range "=" "=")(re.union (re.range "?" "?")(re.union (re.range "A" "Z")(re.union (re.range "^" "~")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))))))(re.++ ((_ re.loop 0 31) (re.++ (re.opt (re.union (re.range "!" "!")(re.union (re.range "#" "'")(re.union (re.range "*" "+")(re.union (re.range "-" ".")(re.union (re.range "0" "9")(re.union (re.range "=" "=")(re.union (re.range "?" "?")(re.union (re.range "A" "Z")(re.union (re.range "^" "~")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))))))) (re.union (re.range "!" "!")(re.union (re.range "#" "'")(re.union (re.range "*" "+")(re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "=" "=")(re.union (re.range "?" "?")(re.union (re.range "A" "Z")(re.union (re.range "^" "~")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))))))))(re.++ (re.opt (re.union (re.range "!" "!")(re.union (re.range "#" "'")(re.union (re.range "*" "+")(re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "=" "=")(re.union (re.range "?" "?")(re.union (re.range "A" "Z")(re.union (re.range "^" "~")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))))))))(re.++ (re.range "@" "@")(re.++ (re.+ (re.++ (re.++ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z"))) ((_ re.loop 0 31) (re.++ (re.opt (re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z"))))) (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))))) (re.range "." ".")))(re.++ (re.union ((_ re.loop 2 2) (re.union (re.range "A" "Z") (re.range "a" "z")))(re.union ((_ re.loop 3 3) (re.union (re.range "A" "Z") (re.range "a" "z")))(re.union ((_ re.loop 4 4) (re.union (re.range "A" "Z") (re.range "a" "z"))) ((_ re.loop 6 6) (re.union (re.range "A" "Z") (re.range "a" "z")))))) (str.to_re ""))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "4" (str.++ "9" (str.++ "9" ""))))

(define-fun Witness2 () String (str.++ "1" (str.++ "4" (str.++ "9" (str.++ "5" "")))))

(assert (= regexA (re.++ (str.to_re "")(re.++ ((_ re.loop 3 4) (re.range "0" "9")) (str.to_re "")))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "0" (str.++ "7" (str.++ "-" (str.++ "0" (str.++ "8" (str.++ "/" (str.++ "8" (str.++ "1" (str.++ "0" (str.++ "9" "")))))))))))

(define-fun Witness2 () String (str.++ "0" (str.++ "3" (str.++ "/" (str.++ "9" (str.++ "-" (str.++ "1" (str.++ "5" (str.++ "9" (str.++ "9" ""))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.union (re.++ (re.range "1" "1") (re.range "1" "2")) (re.++ (re.opt (re.range "0" "0")) (re.range "1" "9")))(re.++ (re.union (re.range "-" "-") (re.range "/" "/"))(re.++ (re.union (re.++ (re.range "3" "3") (re.range "0" "1"))(re.union (re.++ (re.range "1" "2") (re.range "0" "9")) (re.++ (re.opt (re.range "0" "0")) (re.range "1" "9"))))(re.++ (re.union (re.range "-" "-") (re.range "/" "/"))(re.++ (re.union ((_ re.loop 4 4) (re.range "0" "9")) ((_ re.loop 2 2) (re.range "0" "9"))) (str.to_re "")))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "\u{c2}" (str.++ "@" (str.++ "L" (str.++ "A" (str.++ "8" (str.++ "-" (str.++ "K" (str.++ "." (str.++ "v" (str.++ "a" (str.++ "8" (str.++ "Z" "")))))))))))))

(define-fun Witness2 () String "")

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.opt (re.++ (re.+ (re.union (re.range "$" "'")(re.union (re.range "*" "+")(re.union (re.range "-" "9")(re.union (re.range "=" "=")(re.union (re.range "?" "?")(re.union (re.range "A" "Z")(re.union (re.range "^" "~")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))))))(re.++ (re.range "@" "@")(re.++ (re.* (re.++ (re.+ (re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_") (re.range "a" "z")))))) (re.range "." ".")))(re.++ (re.++ (re.+ (re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z"))))) (re.range "." ".")) ((_ re.loop 2 7) (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z"))))))))) (str.to_re "")))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "H" (str.++ "U" (str.++ "3" (str.++ "9" (str.++ "8" (str.++ "0" (str.++ "9" (str.++ "6" (str.++ "8" (str.++ "9" "")))))))))))

(define-fun Witness2 () String (str.++ "F" (str.++ "I" (str.++ "9" (str.++ "5" (str.++ "9" (str.++ "0" (str.++ "8" (str.++ "0" (str.++ "0" (str.++ "6" "")))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.opt (re.union (str.to_re (str.++ "F" (str.++ "I" "")))(re.union (str.to_re (str.++ "H" (str.++ "U" "")))(re.union (str.to_re (str.++ "L" (str.++ "U" "")))(re.union (str.to_re (str.++ "M" (str.++ "T" ""))) (str.to_re (str.++ "S" (str.++ "I" ""))))))))(re.++ ((_ re.loop 8 8) (re.range "0" "9")) (str.to_re ""))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "9" (str.++ "/" (str.++ "0" (str.++ "0" (str.++ "/" (str.++ "8" (str.++ "0" (str.++ "3" (str.++ "1" ""))))))))))

(define-fun Witness2 () String (str.++ "1" (str.++ "7" (str.++ "/" (str.++ "1" (str.++ "0" (str.++ "/" (str.++ "8" (str.++ "5" (str.++ "8" (str.++ "9" "")))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.union (re.++ (re.range "0" "2") (re.range "0" "9"))(re.union (re.++ (re.range "3" "3") (re.range "0" "1")) (re.range "1" "9")))(re.++ (re.range "/" "/")(re.++ (re.union (re.++ (re.range "0" "0") (re.range "0" "9"))(re.union (re.++ (re.range "1" "1") (re.range "0" "2")) (re.range "1" "9")))(re.++ (re.range "/" "/")(re.++ ((_ re.loop 4 4) (re.range "0" "9")) (str.to_re "")))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "9" (str.++ "8" (str.++ "8" (str.++ "-" (str.++ "9" (str.++ "4" (str.++ "-" (str.++ "2" (str.++ "3" (str.++ "9" (str.++ "5" ""))))))))))))

(define-fun Witness2 () String (str.++ "4" (str.++ "5" (str.++ "9" (str.++ "-" (str.++ "6" (str.++ "7" (str.++ "-" (str.++ "8" (str.++ "8" (str.++ "9" (str.++ "2" ""))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ ((_ re.loop 3 3) (re.range "0" "9"))(re.++ (re.range "-" "-")(re.++ ((_ re.loop 2 2) (re.range "0" "9"))(re.++ (re.range "-" "-")(re.++ ((_ re.loop 4 4) (re.range "0" "9")) (str.to_re "")))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "y" (str.++ "A" "")))

(define-fun Witness2 () String (str.++ "T" ""))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.+ (re.union (re.range "A" "Z") (re.range "a" "z"))) (str.to_re "")))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "0" (str.++ "8" (str.++ "-" (str.++ "1" (str.++ "2" (str.++ "/" (str.++ "1" (str.++ "8" (str.++ "3" (str.++ "8" "")))))))))))

(define-fun Witness2 () String (str.++ "3" (str.++ "1" (str.++ "." (str.++ "0" (str.++ "8" (str.++ "-" (str.++ "9" (str.++ "9" "")))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.union (re.union (re.++ (re.union (re.++ (re.opt (re.range "0" "0")) (re.range "1" "9"))(re.union (re.++ (re.range "1" "2") (re.range "0" "9")) (re.++ (re.range "3" "3") (re.range "0" "1"))))(re.++ (re.range "-" "/")(re.++ (re.union (re.++ (re.opt (re.range "0" "0")) (re.union (re.range "1" "1")(re.union (re.range "3" "3")(re.union (re.range "5" "5") (re.range "7" "8"))))) (re.++ (re.range "1" "1") (re.union (re.range "0" "0") (re.range "2" "2"))))(re.++ (re.range "-" "/") (re.++ (re.opt (re.union (re.++ (re.range "1" "1") (re.range "6" "9")) (re.++ (re.range "2" "9") (re.range "0" "9")))) ((_ re.loop 2 2) (re.range "0" "9")))))))(re.union (re.++ (re.union (re.++ (re.opt (re.range "0" "0")) (re.range "1" "9"))(re.union (re.++ (re.range "1" "2") (re.range "0" "9")) (str.to_re (str.++ "3" (str.++ "0" "")))))(re.++ (re.range "-" "/")(re.++ (re.union (re.++ (re.opt (re.range "0" "0")) (re.union (re.range "1" "1") (re.range "3" "9"))) (re.++ (re.range "1" "1") (re.range "0" "2")))(re.++ (re.range "-" "/") (re.++ (re.opt (re.union (re.++ (re.range "1" "1") (re.range "6" "9")) (re.++ (re.range "2" "9") (re.range "0" "9")))) ((_ re.loop 2 2) (re.range "0" "9")))))))(re.union (re.++ (re.union (re.++ (re.opt (re.range "0" "0")) (re.range "1" "9"))(re.union (re.++ (re.range "1" "1") (re.range "0" "9")) (re.++ (re.range "2" "2") (re.range "0" "8"))))(re.++ (re.range "-" "/")(re.++ (re.opt (re.range "0" "0"))(re.++ (re.range "2" "2")(re.++ (re.range "-" "/") (re.++ (re.opt (re.union (re.++ (re.range "1" "1") (re.range "6" "9")) (re.++ (re.range "2" "9") (re.range "0" "9")))) ((_ re.loop 2 2) (re.range "0" "9")))))))) (re.++ (str.to_re (str.++ "2" (str.++ "9" "")))(re.++ (re.range "-" "/")(re.++ (re.opt (re.range "0" "0"))(re.++ (re.range "2" "2")(re.++ (re.range "-" "/") (re.union (re.++ (re.opt (re.union (re.++ (re.range "1" "1") (re.range "6" "9")) (re.++ (re.range "2" "9") (re.range "0" "9")))) (re.union (re.++ (re.range "0" "0") (re.union (re.range "4" "4") (re.range "8" "8")))(re.union (re.++ (re.union (re.range "2" "2")(re.union (re.range "4" "4")(re.union (re.range "6" "6") (re.range "8" "8")))) (re.union (re.range "0" "0")(re.union (re.range "4" "4") (re.range "8" "8")))) (re.++ (re.union (re.range "1" "1")(re.union (re.range "3" "3")(re.union (re.range "5" "5")(re.union (re.range "7" "7") (re.range "9" "9"))))) (re.union (re.range "2" "2") (re.range "6" "6"))))))(re.union (re.++ (re.union (str.to_re (str.++ "1" (str.++ "6" "")))(re.union (re.++ (re.union (re.range "2" "2")(re.union (re.range "4" "4")(re.union (re.range "6" "6") (re.range "8" "8")))) (re.union (re.range "0" "0")(re.union (re.range "4" "4") (re.range "8" "8")))) (re.++ (re.union (re.range "3" "3")(re.union (re.range "5" "5")(re.union (re.range "7" "7") (re.range "9" "9")))) (re.union (re.range "2" "2") (re.range "6" "6"))))) (str.to_re (str.++ "0" (str.++ "0" "")))) (str.to_re (str.++ "0" (str.++ "0" ""))))))))))))) (re.union (re.++ (re.union (re.++ (re.range "0" "0") (re.range "1" "9"))(re.union (re.++ (re.range "1" "2") (re.range "0" "9")) (re.++ (re.range "3" "3") (re.range "0" "1"))))(re.++ (re.union (re.++ (re.range "0" "0") (re.union (re.range "1" "1")(re.union (re.range "3" "3")(re.union (re.range "5" "5") (re.range "7" "8"))))) (re.++ (re.range "1" "1") (re.union (re.range "0" "0") (re.range "2" "2")))) (re.++ (re.opt (re.union (re.++ (re.range "1" "1") (re.range "6" "9")) (re.++ (re.range "2" "9") (re.range "0" "9")))) ((_ re.loop 2 2) (re.range "0" "9")))))(re.union (re.++ (re.union (re.++ (re.range "0" "0") (re.range "1" "9"))(re.union (re.++ (re.range "1" "2") (re.range "0" "9")) (str.to_re (str.++ "3" (str.++ "0" "")))))(re.++ (re.union (re.++ (re.range "0" "0") (re.union (re.range "1" "1") (re.range "3" "9"))) (re.++ (re.range "1" "1") (re.range "0" "2"))) (re.++ (re.opt (re.union (re.++ (re.range "1" "1") (re.range "6" "9")) (re.++ (re.range "2" "9") (re.range "0" "9")))) ((_ re.loop 2 2) (re.range "0" "9")))))(re.union (re.++ (re.union (re.++ (re.range "0" "0") (re.range "1" "9"))(re.union (re.++ (re.range "1" "1") (re.range "0" "9")) (re.++ (re.range "2" "2") (re.range "0" "8"))))(re.++ (str.to_re (str.++ "0" (str.++ "2" ""))) (re.++ (re.opt (re.union (re.++ (re.range "1" "1") (re.range "6" "9")) (re.++ (re.range "2" "9") (re.range "0" "9")))) ((_ re.loop 2 2) (re.range "0" "9"))))) (re.++ (str.to_re (str.++ "2" (str.++ "9" (str.++ "0" (str.++ "2" ""))))) (re.union (re.++ (re.opt (re.union (re.++ (re.range "1" "1") (re.range "6" "9")) (re.++ (re.range "2" "9") (re.range "0" "9")))) (re.union (re.++ (re.range "0" "0") (re.union (re.range "4" "4") (re.range "8" "8")))(re.union (re.++ (re.union (re.range "2" "2")(re.union (re.range "4" "4")(re.union (re.range "6" "6") (re.range "8" "8")))) (re.union (re.range "0" "0")(re.union (re.range "4" "4") (re.range "8" "8")))) (re.++ (re.union (re.range "1" "1")(re.union (re.range "3" "3")(re.union (re.range "5" "5")(re.union (re.range "7" "7") (re.range "9" "9"))))) (re.union (re.range "2" "2") (re.range "6" "6"))))))(re.union (re.++ (re.union (str.to_re (str.++ "1" (str.++ "6" "")))(re.union (re.++ (re.union (re.range "2" "2")(re.union (re.range "4" "4")(re.union (re.range "6" "6") (re.range "8" "8")))) (re.union (re.range "0" "0")(re.union (re.range "4" "4") (re.range "8" "8")))) (re.++ (re.union (re.range "3" "3")(re.union (re.range "5" "5")(re.union (re.range "7" "7") (re.range "9" "9")))) (re.union (re.range "2" "2") (re.range "6" "6"))))) (str.to_re (str.++ "0" (str.++ "0" "")))) (str.to_re (str.++ "0" (str.++ "0" "")))))))))) (str.to_re "")))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "2" (str.++ "0" (str.++ "2" (str.++ "9" (str.++ "/" (str.++ "0" (str.++ "2" (str.++ "/" (str.++ "0" (str.++ "6" "")))))))))))

(define-fun Witness2 () String (str.++ "2" (str.++ "0" (str.++ "6" (str.++ "8" (str.++ "/" (str.++ "0" (str.++ "2" (str.++ "/" (str.++ "3" (str.++ "1" (str.++ "\u{a0}" (str.++ "0" (str.++ "9" (str.++ ":" (str.++ "5" (str.++ "8" (str.++ ":" (str.++ "2" (str.++ "8" ""))))))))))))))))))))

(assert (= regexA (re.union (re.++ (str.to_re "")(re.++ (re.++ (str.to_re (str.++ "2" (str.++ "0" "")))(re.++ ((_ re.loop 2 2) (re.range "0" "9"))(re.++ (re.range "/" "/")(re.++ (re.union (re.++ (re.range "0" "0") (re.range "0" "9")) (re.++ (re.range "1" "1") (re.range "0" "2")))(re.++ (re.range "/" "/") (re.union (re.++ (re.range "0" "2") (re.range "0" "9")) (re.++ (re.range "3" "3") (re.range "0" "1")))))))) (str.to_re ""))) (re.++ (str.to_re "")(re.++ (re.++ (str.to_re (str.++ "2" (str.++ "0" "")))(re.++ ((_ re.loop 2 2) (re.range "0" "9"))(re.++ (re.range "/" "/")(re.++ (re.union (re.++ (re.range "0" "0") (re.range "0" "9")) (re.++ (re.range "1" "1") (re.range "0" "2")))(re.++ (re.range "/" "/")(re.++ (re.union (re.++ (re.range "0" "2") (re.range "0" "9")) (re.++ (re.range "3" "3") (re.range "0" "1")))(re.++ (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))(re.++ (re.union (re.++ (re.range "0" "1") (re.range "0" "9")) (re.++ (re.range "2" "2") (re.range "0" "3")))(re.++ (re.range ":" ":")(re.++ (re.range "0" "5")(re.++ (re.range "0" "9")(re.++ (re.range ":" ":")(re.++ (re.range "0" "5") (re.range "0" "9")))))))))))))) (str.to_re ""))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "9" (str.++ "7" (str.++ "8" (str.++ "-" (str.++ "6" (str.++ "9" (str.++ "8" (str.++ "1" (str.++ "7" (str.++ "8" (str.++ "9" ""))))))))))))

(define-fun Witness2 () String (str.++ "8" (str.++ "8" (str.++ "0" (str.++ "-" (str.++ "9" (str.++ "5" (str.++ "7" (str.++ " " (str.++ "8" (str.++ "9" (str.++ "8" (str.++ "6" "")))))))))))))

(assert (= regexA (re.union (re.++ (str.to_re "")(re.++ (re.range "(" "(")(re.++ ((_ re.loop 3 3) (re.range "0" "9"))(re.++ (re.range ")" ")")(re.++ (re.opt (re.range " " " "))(re.++ ((_ re.loop 3 3) (re.range "0" "9"))(re.++ (re.opt (re.union (re.range " " " ") (re.range "-" "-"))) ((_ re.loop 4 4) (re.range "0" "9"))))))))) (re.++ (str.to_re "")(re.++ ((_ re.loop 3 3) (re.range "0" "9"))(re.++ (re.opt (re.union (re.range " " " ") (re.range "-" "-")))(re.++ ((_ re.loop 3 3) (re.range "0" "9"))(re.++ (re.opt (re.union (re.range " " " ") (re.range "-" "-"))) ((_ re.loop 4 4) (re.range "0" "9"))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "-" (str.++ "2" (str.++ "." (str.++ "E" (str.++ "D" (str.++ "U" "")))))))

(define-fun Witness2 () String (str.++ "9" (str.++ "." (str.++ "N" (str.++ "E" (str.++ "T" ""))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.+ (re.union (re.range "-" ".")(re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))))(re.++ (re.range "." ".")(re.++ (re.union (str.to_re (str.++ "c" (str.++ "o" (str.++ "m" ""))))(re.union (str.to_re (str.++ "o" (str.++ "r" (str.++ "g" ""))))(re.union (str.to_re (str.++ "n" (str.++ "e" (str.++ "t" ""))))(re.union (str.to_re (str.++ "m" (str.++ "i" (str.++ "l" ""))))(re.union (str.to_re (str.++ "e" (str.++ "d" (str.++ "u" ""))))(re.union (str.to_re (str.++ "C" (str.++ "O" (str.++ "M" ""))))(re.union (str.to_re (str.++ "O" (str.++ "R" (str.++ "G" ""))))(re.union (str.to_re (str.++ "N" (str.++ "E" (str.++ "T" ""))))(re.union (str.to_re (str.++ "M" (str.++ "I" (str.++ "L" "")))) (str.to_re (str.++ "E" (str.++ "D" (str.++ "U" ""))))))))))))) (str.to_re "")))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "6" (str.++ "5" (str.++ "5" (str.++ "3" (str.++ "4" ""))))))

(define-fun Witness2 () String (str.++ "6" (str.++ "5" (str.++ "5" (str.++ "0" (str.++ "4" ""))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.union (re.++ (str.to_re (str.++ "6" (str.++ "5" (str.++ "5" (str.++ "3" ""))))) (re.range "0" "5"))(re.union (re.++ (str.to_re (str.++ "6" (str.++ "5" (str.++ "5" ""))))(re.++ (re.range "0" "2") (re.range "0" "9")))(re.union (re.++ (str.to_re (str.++ "6" (str.++ "5" "")))(re.++ (re.range "0" "4")(re.++ (re.range "0" "9") (re.range "0" "9"))))(re.union (re.++ (re.range "6" "6")(re.++ (re.range "0" "4") ((_ re.loop 3 3) (re.range "0" "9"))))(re.union (re.++ (re.range "5" "5") ((_ re.loop 4 4) (re.range "0" "9")))(re.union (re.++ (str.to_re (str.++ "4" (str.++ "9" "")))(re.++ (re.range "2" "9")(re.++ (re.range "0" "9") (re.range "0" "9"))))(re.union (re.++ (str.to_re (str.++ "4" (str.++ "9" (str.++ "1" ""))))(re.++ (re.range "6" "9") (re.range "0" "9"))) (re.++ (str.to_re (str.++ "4" (str.++ "9" (str.++ "1" (str.++ "5" ""))))) (re.range "2" "9"))))))))) (str.to_re "")))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "0" (str.++ "1" (str.++ "/" (str.++ "3" (str.++ "1" (str.++ "/" (str.++ "1" (str.++ "9" (str.++ "0" (str.++ "8" "")))))))))))

(define-fun Witness2 () String (str.++ "0" (str.++ "3" (str.++ "/" (str.++ "3" (str.++ "0" (str.++ "/" (str.++ "1" (str.++ "9" (str.++ "2" (str.++ "9" "")))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.union (re.++ (re.union (re.++ (re.union (re.++ (re.opt (re.range "0" "0")) (re.range "1" "9")) (re.++ (re.range "1" "1") (re.range "0" "2")))(re.++ (re.range "/" "/") (re.union (re.++ (re.opt (re.range "0" "0")) (re.range "1" "9"))(re.union (re.++ (re.range "1" "1") (re.range "0" "9")) (re.++ (re.range "2" "2") (re.range "0" "8"))))))(re.union (re.++ (re.union (re.++ (re.opt (re.range "0" "0")) (re.union (re.range "1" "1") (re.range "3" "9"))) (re.++ (re.range "1" "1") (re.range "0" "2")))(re.++ (re.range "/" "/") (re.union (str.to_re (str.++ "2" (str.++ "9" ""))) (str.to_re (str.++ "3" (str.++ "0" "")))))) (re.++ (re.union (re.++ (re.opt (re.range "0" "0")) (re.union (re.range "1" "1")(re.union (re.range "3" "3")(re.union (re.range "5" "5") (re.range "7" "8"))))) (re.++ (re.range "1" "1") (re.union (re.range "0" "0") (re.range "2" "2")))) (str.to_re (str.++ "/" (str.++ "3" (str.++ "1" "")))))))(re.++ (re.range "/" "/")(re.++ (re.union (str.to_re (str.++ "1" (str.++ "9" ""))) (re.++ (re.range "2" "9") (re.range "0" "9"))) ((_ re.loop 2 2) (re.range "0" "9"))))) (re.++ (re.opt (re.range "0" "0"))(re.++ (str.to_re (str.++ "2" (str.++ "/" (str.++ "2" (str.++ "9" (str.++ "/" "")))))) (re.union (re.++ (re.union (str.to_re (str.++ "1" (str.++ "9" ""))) (re.++ (re.range "2" "9") (re.range "0" "9"))) (re.union (re.++ (re.range "0" "0") (re.union (re.range "4" "4") (re.range "8" "8")))(re.union (re.++ (re.union (re.range "2" "2")(re.union (re.range "4" "4")(re.union (re.range "6" "6") (re.range "8" "8")))) (re.union (re.range "0" "0")(re.union (re.range "4" "4") (re.range "8" "8")))) (re.++ (re.union (re.range "1" "1")(re.union (re.range "3" "3")(re.union (re.range "5" "5")(re.union (re.range "7" "7") (re.range "9" "9"))))) (re.union (re.range "2" "2") (re.range "6" "6")))))) (re.++ (re.union (re.++ (re.union (re.range "2" "2")(re.union (re.range "4" "4")(re.union (re.range "6" "6") (re.range "8" "8")))) (re.union (re.range "0" "0")(re.union (re.range "4" "4") (re.range "8" "8")))) (re.++ (re.union (re.range "3" "3")(re.union (re.range "5" "5")(re.union (re.range "7" "7") (re.range "9" "9")))) (re.union (re.range "2" "2") (re.range "6" "6")))) (str.to_re (str.++ "0" (str.++ "0" "")))))))) (str.to_re "")))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "6" (str.++ " " (str.++ "T" (str.++ "a" (str.++ "j" (str.++ "z" (str.++ " " (str.++ "K" (str.++ "k" (str.++ "o" (str.++ " " (str.++ "G" (str.++ "o" (str.++ " " (str.++ "P" (str.++ "z" (str.++ "q" ""))))))))))))))))))

(define-fun Witness2 () String (str.++ "8" (str.++ "8" (str.++ " " (str.++ "M" (str.++ "s" (str.++ "a" (str.++ "m" (str.++ " " (str.++ "Z" (str.++ "p" "")))))))))))

(assert (= regexA (re.union (re.++ (str.to_re "")(re.++ ((_ re.loop 1 6) (re.range "0" "9"))(re.++ (re.range " " " ")(re.++ (re.++ (re.range "A" "Z")(re.++ (re.+ (re.range "a" "z"))(re.++ (re.range " " " ")(re.++ (re.range "A" "Z") (re.+ (re.range "a" "z")))))) (str.to_re "")))))(re.union (re.++ (str.to_re "")(re.++ ((_ re.loop 1 6) (re.range "0" "9"))(re.++ (re.range " " " ")(re.++ (re.++ (re.range "A" "Z")(re.++ (re.+ (re.range "a" "z"))(re.++ (re.range " " " ")(re.++ (re.range "A" "Z")(re.++ (re.+ (re.range "a" "z"))(re.++ (re.range " " " ")(re.++ (re.range "A" "Z") (re.+ (re.range "a" "z"))))))))) (str.to_re ""))))) (re.++ (str.to_re "")(re.++ ((_ re.loop 1 6) (re.range "0" "9"))(re.++ (re.range " " " ")(re.++ (re.++ (re.range "A" "Z")(re.++ (re.+ (re.range "a" "z"))(re.++ (re.range " " " ")(re.++ (re.range "A" "Z")(re.++ (re.+ (re.range "a" "z"))(re.++ (re.range " " " ")(re.++ (re.range "A" "Z")(re.++ (re.+ (re.range "a" "z"))(re.++ (re.range " " " ")(re.++ (re.range "A" "Z") (re.+ (re.range "a" "z")))))))))))) (str.to_re "")))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "1" (str.++ "0" "")))

(define-fun Witness2 () String (str.++ "1" (str.++ "2" "")))

(assert (= regexA (re.union (re.++ (str.to_re "")(re.++ (re.opt (re.range "1" "1"))(re.++ (re.range "1" "2") (str.to_re ""))))(re.union (re.++ (str.to_re "")(re.++ (re.range "1" "9") (str.to_re ""))) (re.++ (str.to_re "")(re.++ (str.to_re (str.++ "1" (str.++ "0" ""))) (str.to_re "")))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String "")

(define-fun Witness2 () String (str.++ "0" (str.++ "," (str.++ "4" (str.++ "9" "")))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.union (re.++ (re.range "0" "9")(re.++ ((_ re.loop 0 2) (re.range "0" "9"))(re.++ (re.* (re.++ (re.range "," ",") ((_ re.loop 3 3) (re.range "0" "9")))) (re.opt (re.++ (re.range "," ",") ((_ re.loop 0 2) (re.range "0" "9")))))))(re.union (re.++ (re.range "0" "9")(re.++ (re.* (re.range "0" "9")) (re.opt (re.++ (re.range "," ",") ((_ re.loop 0 2) (re.range "0" "9"))))))(re.union (re.++ (re.range "0" "0") (re.opt (re.++ (re.range "," ",") ((_ re.loop 0 2) (re.range "0" "9"))))) (re.opt (re.++ (re.range "," ",") ((_ re.loop 1 2) (re.range "0" "9"))))))) (str.to_re "")))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "4" (str.++ "5" (str.++ "-" (str.++ "1" (str.++ "8" (str.++ "-" (str.++ "3" (str.++ "7" "")))))))))

(define-fun Witness2 () String (str.++ "3" (str.++ "5" (str.++ "-" (str.++ "5" (str.++ "9" (str.++ "-" (str.++ "8" (str.++ "9" "")))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ ((_ re.loop 2 2) (re.range "0" "9"))(re.++ (re.range "-" "-")(re.++ ((_ re.loop 2 2) (re.range "0" "9"))(re.++ (re.range "-" "-")(re.++ ((_ re.loop 2 2) (re.range "0" "9")) (str.to_re "")))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "O" (str.++ "R" (str.++ "0" (str.++ "c" (str.++ " " (str.++ "8" (str.++ "Z" (str.++ "X" "")))))))))

(define-fun Witness2 () String (str.++ "Z" (str.++ "E" (str.++ "8" (str.++ " " (str.++ "9" (str.++ "O" (str.++ "s" ""))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.union (re.++ ((_ re.loop 1 2) (re.union (re.range "A" "Z") (re.range "a" "z"))) ((_ re.loop 1 2) (re.range "0" "9"))) (re.++ ((_ re.loop 2 2) (re.union (re.range "A" "Z") (re.range "a" "z")))(re.++ (re.range "0" "9") (re.union (re.range "A" "Z") (re.range "a" "z")))))(re.++ (re.opt (re.range " " " "))(re.++ (re.range "0" "9")(re.++ ((_ re.loop 2 2) (re.union (re.range "A" "Z") (re.range "a" "z"))) (str.to_re ""))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "Q" (str.++ "." (str.++ "z" (str.++ "2" (str.++ "@" (str.++ "S" (str.++ "." (str.++ "n" (str.++ "e" (str.++ "t" "")))))))))))

(define-fun Witness2 () String (str.++ "D" (str.++ "." (str.++ "-" (str.++ "@" (str.++ "-" (str.++ "-" (str.++ "z" (str.++ "8" (str.++ "." (str.++ "m" (str.++ "c" (str.++ "." (str.++ "n" (str.++ "a" (str.++ "m" (str.++ "e" "")))))))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.+ (re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_") (re.range "a" "z"))))))(re.++ (re.opt (re.++ (re.range "." ".") (re.+ (re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_") (re.range "a" "z"))))))))(re.++ (re.range "@" "@")(re.++ (re.+ (re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))))(re.++ (re.union ((_ re.loop 0 3) (re.++ (re.range "." ".") ((_ re.loop 1 3) (re.range "0" "9")))) ((_ re.loop 1 2) (re.++ (re.range "." ".") (re.union (str.to_re (str.++ "c" (str.++ "o" "")))(re.union (str.to_re (str.++ "c" (str.++ "o" (str.++ "m" ""))))(re.union (str.to_re (str.++ "n" (str.++ "e" (str.++ "t" ""))))(re.union (str.to_re (str.++ "o" (str.++ "r" (str.++ "g" ""))))(re.union (str.to_re (str.++ "e" (str.++ "d" (str.++ "u" ""))))(re.union (str.to_re (str.++ "g" (str.++ "o" (str.++ "v" ""))))(re.union (str.to_re (str.++ "m" (str.++ "i" (str.++ "l" ""))))(re.union (str.to_re (str.++ "a" (str.++ "e" (str.++ "r" (str.++ "o" "")))))(re.union (str.to_re (str.++ "c" (str.++ "o" (str.++ "o" (str.++ "p" "")))))(re.union (str.to_re (str.++ "i" (str.++ "n" (str.++ "f" (str.++ "o" "")))))(re.union (str.to_re (str.++ "m" (str.++ "u" (str.++ "s" (str.++ "e" (str.++ "u" (str.++ "m" "")))))))(re.union (str.to_re (str.++ "n" (str.++ "a" (str.++ "m" (str.++ "e" "")))))(re.union (str.to_re (str.++ "a" (str.++ "c" "")))(re.union (str.to_re (str.++ "a" (str.++ "d" "")))(re.union (str.to_re (str.++ "a" (str.++ "e" "")))(re.union (str.to_re (str.++ "a" (str.++ "f" "")))(re.union (str.to_re (str.++ "a" (str.++ "g" "")))(re.union (str.to_re (str.++ "a" (str.++ "i" "")))(re.union (str.to_re (str.++ "a" (str.++ "l" "")))(re.union (str.to_re (str.++ "a" (str.++ "m" "")))(re.union (str.to_re (str.++ "a" (str.++ "n" "")))(re.union (str.to_re (str.++ "a" (str.++ "o" "")))(re.union (str.to_re (str.++ "a" (str.++ "q" "")))(re.union (str.to_re (str.++ "a" (str.++ "r" "")))(re.union (str.to_re (str.++ "a" (str.++ "s" "")))(re.union (str.to_re (str.++ "a" (str.++ "t" "")))(re.union (str.to_re (str.++ "a" (str.++ "u" "")))(re.union (str.to_re (str.++ "a" (str.++ "w" "")))(re.union (str.to_re (str.++ "a" (str.++ "z" "")))(re.union (str.to_re (str.++ "b" (str.++ "a" "")))(re.union (str.to_re (str.++ "b" (str.++ "b" "")))(re.union (str.to_re (str.++ "b" (str.++ "d" "")))(re.union (str.to_re (str.++ "b" (str.++ "e" "")))(re.union (str.to_re (str.++ "b" (str.++ "f" "")))(re.union (str.to_re (str.++ "b" (str.++ "g" "")))(re.union (str.to_re (str.++ "b" (str.++ "h" "")))(re.union (str.to_re (str.++ "b" (str.++ "i" "")))(re.union (str.to_re (str.++ "b" (str.++ "j" "")))(re.union (str.to_re (str.++ "b" (str.++ "m" "")))(re.union (str.to_re (str.++ "b" (str.++ "n" "")))(re.union (str.to_re (str.++ "b" (str.++ "o" "")))(re.union (str.to_re (str.++ "b" (str.++ "r" "")))(re.union (str.to_re (str.++ "b" (str.++ "s" "")))(re.union (str.to_re (str.++ "b" (str.++ "t" "")))(re.union (str.to_re (str.++ "b" (str.++ "v" "")))(re.union (str.to_re (str.++ "b" (str.++ "w" "")))(re.union (str.to_re (str.++ "b" (str.++ "y" "")))(re.union (str.to_re (str.++ "b" (str.++ "z" "")))(re.union (str.to_re (str.++ "c" (str.++ "a" "")))(re.union (str.to_re (str.++ "c" (str.++ "c" "")))(re.union (str.to_re (str.++ "c" (str.++ "d" "")))(re.union (str.to_re (str.++ "c" (str.++ "f" "")))(re.union (str.to_re (str.++ "c" (str.++ "g" "")))(re.union (str.to_re (str.++ "c" (str.++ "h" "")))(re.union (str.to_re (str.++ "c" (str.++ "i" "")))(re.union (str.to_re (str.++ "c" (str.++ "k" "")))(re.union (str.to_re (str.++ "c" (str.++ "l" "")))(re.union (str.to_re (str.++ "c" (str.++ "m" "")))(re.union (str.to_re (str.++ "c" (str.++ "n" "")))(re.union (str.to_re (str.++ "c" (str.++ "o" "")))(re.union (str.to_re (str.++ "c" (str.++ "r" "")))(re.union (str.to_re (str.++ "c" (str.++ "u" "")))(re.union (str.to_re (str.++ "c" (str.++ "v" "")))(re.union (str.to_re (str.++ "c" (str.++ "x" "")))(re.union (str.to_re (str.++ "c" (str.++ "y" "")))(re.union (str.to_re (str.++ "c" (str.++ "z" "")))(re.union (str.to_re (str.++ "d" (str.++ "e" "")))(re.union (str.to_re (str.++ "d" (str.++ "j" "")))(re.union (str.to_re (str.++ "d" (str.++ "k" "")))(re.union (str.to_re (str.++ "d" (str.++ "m" "")))(re.union (str.to_re (str.++ "d" (str.++ "o" "")))(re.union (str.to_re (str.++ "d" (str.++ "z" "")))(re.union (str.to_re (str.++ "e" (str.++ "c" "")))(re.union (str.to_re (str.++ "e" (str.++ "e" "")))(re.union (str.to_re (str.++ "e" (str.++ "g" "")))(re.union (str.to_re (str.++ "e" (str.++ "h" "")))(re.union (str.to_re (str.++ "e" (str.++ "r" "")))(re.union (str.to_re (str.++ "e" (str.++ "s" "")))(re.union (str.to_re (str.++ "e" (str.++ "t" "")))(re.union (str.to_re (str.++ "f" (str.++ "i" "")))(re.union (str.to_re (str.++ "f" (str.++ "j" "")))(re.union (str.to_re (str.++ "f" (str.++ "k" "")))(re.union (str.to_re (str.++ "f" (str.++ "m" "")))(re.union (str.to_re (str.++ "f" (str.++ "o" "")))(re.union (str.to_re (str.++ "f" (str.++ "r" "")))(re.union (str.to_re (str.++ "f" (str.++ "x" "")))(re.union (str.to_re (str.++ "g" (str.++ "a" "")))(re.union (str.to_re (str.++ "g" (str.++ "b" "")))(re.union (str.to_re (str.++ "g" (str.++ "d" "")))(re.union (str.to_re (str.++ "g" (str.++ "e" "")))(re.union (str.to_re (str.++ "g" (str.++ "f" "")))(re.union (str.to_re (str.++ "g" (str.++ "g" "")))(re.union (str.to_re (str.++ "g" (str.++ "h" "")))(re.union (str.to_re (str.++ "g" (str.++ "i" "")))(re.union (str.to_re (str.++ "g" (str.++ "l" "")))(re.union (str.to_re (str.++ "g" (str.++ "m" "")))(re.union (str.to_re (str.++ "g" (str.++ "n" "")))(re.union (str.to_re (str.++ "g" (str.++ "p" "")))(re.union (str.to_re (str.++ "g" (str.++ "q" "")))(re.union (str.to_re (str.++ "g" (str.++ "r" "")))(re.union (str.to_re (str.++ "g" (str.++ "s" "")))(re.union (str.to_re (str.++ "g" (str.++ "t" "")))(re.union (str.to_re (str.++ "g" (str.++ "u" "")))(re.union (str.to_re (str.++ "g" (str.++ "w" "")))(re.union (str.to_re (str.++ "g" (str.++ "y" "")))(re.union (str.to_re (str.++ "h" (str.++ "k" "")))(re.union (str.to_re (str.++ "h" (str.++ "m" "")))(re.union (str.to_re (str.++ "h" (str.++ "n" "")))(re.union (str.to_re (str.++ "h" (str.++ "r" "")))(re.union (str.to_re (str.++ "h" (str.++ "t" "")))(re.union (str.to_re (str.++ "h" (str.++ "u" "")))(re.union (str.to_re (str.++ "i" (str.++ "d" "")))(re.union (str.to_re (str.++ "i" (str.++ "e" "")))(re.union (str.to_re (str.++ "i" (str.++ "l" "")))(re.union (str.to_re (str.++ "i" (str.++ "m" "")))(re.union (str.to_re (str.++ "i" (str.++ "n" "")))(re.union (str.to_re (str.++ "i" (str.++ "o" "")))(re.union (str.to_re (str.++ "i" (str.++ "q" "")))(re.union (str.to_re (str.++ "i" (str.++ "r" "")))(re.union (str.to_re (str.++ "i" (str.++ "s" "")))(re.union (str.to_re (str.++ "i" (str.++ "t" "")))(re.union (str.to_re (str.++ "j" (str.++ "e" "")))(re.union (str.to_re (str.++ "j" (str.++ "m" "")))(re.union (str.to_re (str.++ "j" (str.++ "o" "")))(re.union (str.to_re (str.++ "j" (str.++ "p" "")))(re.union (str.to_re (str.++ "k" (str.++ "e" "")))(re.union (str.to_re (str.++ "k" (str.++ "g" "")))(re.union (str.to_re (str.++ "k" (str.++ "h" "")))(re.union (str.to_re (str.++ "k" (str.++ "i" "")))(re.union (str.to_re (str.++ "k" (str.++ "m" "")))(re.union (str.to_re (str.++ "k" (str.++ "n" "")))(re.union (str.to_re (str.++ "k" (str.++ "p" "")))(re.union (str.to_re (str.++ "k" (str.++ "r" "")))(re.union (str.to_re (str.++ "k" (str.++ "w" "")))(re.union (str.to_re (str.++ "k" (str.++ "y" "")))(re.union (str.to_re (str.++ "k" (str.++ "z" "")))(re.union (str.to_re (str.++ "l" (str.++ "a" "")))(re.union (str.to_re (str.++ "l" (str.++ "b" "")))(re.union (str.to_re (str.++ "l" (str.++ "c" "")))(re.union (str.to_re (str.++ "l" (str.++ "i" "")))(re.union (str.to_re (str.++ "l" (str.++ "k" "")))(re.union (str.to_re (str.++ "l" (str.++ "r" "")))(re.union (str.to_re (str.++ "l" (str.++ "s" "")))(re.union (str.to_re (str.++ "l" (str.++ "t" "")))(re.union (str.to_re (str.++ "l" (str.++ "u" "")))(re.union (str.to_re (str.++ "l" (str.++ "v" "")))(re.union (str.to_re (str.++ "l" (str.++ "y" "")))(re.union (str.to_re (str.++ "m" (str.++ "a" "")))(re.union (str.to_re (str.++ "m" (str.++ "c" "")))(re.union (str.to_re (str.++ "m" (str.++ "d" "")))(re.union (str.to_re (str.++ "m" (str.++ "g" "")))(re.union (str.to_re (str.++ "m" (str.++ "h" "")))(re.union (str.to_re (str.++ "m" (str.++ "k" "")))(re.union (str.to_re (str.++ "m" (str.++ "l" "")))(re.union (str.to_re (str.++ "m" (str.++ "m" "")))(re.union (str.to_re (str.++ "m" (str.++ "n" "")))(re.union (str.to_re (str.++ "m" (str.++ "o" "")))(re.union (str.to_re (str.++ "m" (str.++ "p" "")))(re.union (str.to_re (str.++ "m" (str.++ "q" "")))(re.union (str.to_re (str.++ "m" (str.++ "r" "")))(re.union (str.to_re (str.++ "m" (str.++ "s" "")))(re.union (str.to_re (str.++ "m" (str.++ "t" "")))(re.union (str.to_re (str.++ "m" (str.++ "u" "")))(re.union (str.to_re (str.++ "m" (str.++ "v" "")))(re.union (str.to_re (str.++ "m" (str.++ "w" "")))(re.union (str.to_re (str.++ "m" (str.++ "x" "")))(re.union (str.to_re (str.++ "m" (str.++ "y" "")))(re.union (str.to_re (str.++ "m" (str.++ "z" "")))(re.union (str.to_re (str.++ "n" (str.++ "a" "")))(re.union (str.to_re (str.++ "n" (str.++ "c" "")))(re.union (str.to_re (str.++ "n" (str.++ "e" "")))(re.union (str.to_re (str.++ "n" (str.++ "f" "")))(re.union (str.to_re (str.++ "n" (str.++ "g" "")))(re.union (str.to_re (str.++ "n" (str.++ "i" "")))(re.union (str.to_re (str.++ "n" (str.++ "l" "")))(re.union (str.to_re (str.++ "n" (str.++ "o" "")))(re.union (str.to_re (str.++ "n" (str.++ "p" "")))(re.union (str.to_re (str.++ "n" (str.++ "r" "")))(re.union (str.to_re (str.++ "n" (str.++ "t" "")))(re.union (str.to_re (str.++ "n" (str.++ "u" "")))(re.union (str.to_re (str.++ "n" (str.++ "z" "")))(re.union (str.to_re (str.++ "o" (str.++ "m" "")))(re.union (str.to_re (str.++ "p" (str.++ "a" "")))(re.union (str.to_re (str.++ "p" (str.++ "e" "")))(re.union (str.to_re (str.++ "p" (str.++ "f" "")))(re.union (str.to_re (str.++ "p" (str.++ "g" "")))(re.union (str.to_re (str.++ "p" (str.++ "h" "")))(re.union (str.to_re (str.++ "p" (str.++ "k" "")))(re.union (str.to_re (str.++ "p" (str.++ "l" "")))(re.union (str.to_re (str.++ "p" (str.++ "m" "")))(re.union (str.to_re (str.++ "p" (str.++ "n" "")))(re.union (str.to_re (str.++ "p" (str.++ "r" "")))(re.union (str.to_re (str.++ "p" (str.++ "t" "")))(re.union (str.to_re (str.++ "p" (str.++ "w" "")))(re.union (str.to_re (str.++ "p" (str.++ "y" "")))(re.union (str.to_re (str.++ "q" (str.++ "a" "")))(re.union (str.to_re (str.++ "r" (str.++ "e" "")))(re.union (str.to_re (str.++ "r" (str.++ "o" "")))(re.union (str.to_re (str.++ "r" (str.++ "u" "")))(re.union (str.to_re (str.++ "r" (str.++ "w" "")))(re.union (str.to_re (str.++ "s" (str.++ "a" "")))(re.union (str.to_re (str.++ "s" (str.++ "b" "")))(re.union (str.to_re (str.++ "s" (str.++ "c" "")))(re.union (str.to_re (str.++ "s" (str.++ "d" "")))(re.union (str.to_re (str.++ "s" (str.++ "e" "")))(re.union (str.to_re (str.++ "s" (str.++ "g" "")))(re.union (str.to_re (str.++ "s" (str.++ "h" "")))(re.union (str.to_re (str.++ "s" (str.++ "i" "")))(re.union (str.to_re (str.++ "s" (str.++ "j" "")))(re.union (str.to_re (str.++ "s" (str.++ "k" "")))(re.union (str.to_re (str.++ "s" (str.++ "l" "")))(re.union (str.to_re (str.++ "s" (str.++ "m" "")))(re.union (str.to_re (str.++ "s" (str.++ "n" "")))(re.union (str.to_re (str.++ "s" (str.++ "o" "")))(re.union (str.to_re (str.++ "s" (str.++ "r" "")))(re.union (str.to_re (str.++ "s" (str.++ "t" "")))(re.union (str.to_re (str.++ "s" (str.++ "u" "")))(re.union (str.to_re (str.++ "s" (str.++ "v" "")))(re.union (str.to_re (str.++ "s" (str.++ "y" "")))(re.union (str.to_re (str.++ "s" (str.++ "z" "")))(re.union (str.to_re (str.++ "t" (str.++ "c" "")))(re.union (str.to_re (str.++ "t" (str.++ "d" "")))(re.union (str.to_re (str.++ "t" (str.++ "f" "")))(re.union (str.to_re (str.++ "t" (str.++ "g" "")))(re.union (str.to_re (str.++ "t" (str.++ "h" "")))(re.union (str.to_re (str.++ "t" (str.++ "j" "")))(re.union (str.to_re (str.++ "t" (str.++ "k" "")))(re.union (str.to_re (str.++ "t" (str.++ "m" "")))(re.union (str.to_re (str.++ "t" (str.++ "n" "")))(re.union (str.to_re (str.++ "t" (str.++ "o" "")))(re.union (str.to_re (str.++ "t" (str.++ "p" "")))(re.union (str.to_re (str.++ "t" (str.++ "r" "")))(re.union (str.to_re (str.++ "t" (str.++ "t" "")))(re.union (str.to_re (str.++ "t" (str.++ "v" "")))(re.union (str.to_re (str.++ "t" (str.++ "w" "")))(re.union (str.to_re (str.++ "t" (str.++ "z" "")))(re.union (str.to_re (str.++ "u" (str.++ "a" "")))(re.union (str.to_re (str.++ "u" (str.++ "g" "")))(re.union (str.to_re (str.++ "u" (str.++ "k" "")))(re.union (str.to_re (str.++ "u" (str.++ "m" "")))(re.union (str.to_re (str.++ "u" (str.++ "s" "")))(re.union (str.to_re (str.++ "u" (str.++ "y" "")))(re.union (str.to_re (str.++ "u" (str.++ "z" "")))(re.union (str.to_re (str.++ "v" (str.++ "a" "")))(re.union (str.to_re (str.++ "v" (str.++ "c" "")))(re.union (str.to_re (str.++ "v" (str.++ "e" "")))(re.union (str.to_re (str.++ "v" (str.++ "g" "")))(re.union (str.to_re (str.++ "v" (str.++ "i" "")))(re.union (str.to_re (str.++ "v" (str.++ "n" "")))(re.union (str.to_re (str.++ "v" (str.++ "u" "")))(re.union (str.to_re (str.++ "w" (str.++ "f" "")))(re.union (str.to_re (str.++ "w" (str.++ "s" "")))(re.union (str.to_re (str.++ "y" (str.++ "e" "")))(re.union (str.to_re (str.++ "y" (str.++ "t" "")))(re.union (str.to_re (str.++ "y" (str.++ "u" "")))(re.union (str.to_re (str.++ "z" (str.++ "a" "")))(re.union (str.to_re (str.++ "z" (str.++ "m" "")))(re.union (str.to_re (str.++ "z" (str.++ "r" ""))) (str.to_re (str.++ "z" (str.++ "w" "")))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) (str.to_re "")))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "5" (str.++ "7" (str.++ "-" (str.++ "8" (str.++ "8" (str.++ "9" (str.++ "4" (str.++ "-" (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "-" (str.++ "9" (str.++ "6" ""))))))))))))))))

(define-fun Witness2 () String (str.++ "9" (str.++ "9" (str.++ "-" (str.++ "8" (str.++ "9" (str.++ "4" (str.++ "9" (str.++ "-" (str.++ "8" (str.++ "0" (str.++ "9" (str.++ "9" (str.++ "-" (str.++ "2" (str.++ "8" (str.++ "5" (str.++ "2" (str.++ "-" (str.++ "0" (str.++ "9" (str.++ "9" (str.++ "3" (str.++ "-" (str.++ "8" (str.++ "9" ""))))))))))))))))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.* (re.++ ((_ re.loop 2 2) (re.range "0" "9"))(re.++ (re.range "-" "-") ((_ re.loop 2 2) (re.range "0" "9"))))) (str.to_re "")))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "9" (str.++ "8" (str.++ "-" (str.++ "6" (str.++ "9" (str.++ "3" (str.++ "7" (str.++ "4" (str.++ "7" (str.++ "9" (str.++ "9" ""))))))))))))

(define-fun Witness2 () String (str.++ "9" (str.++ "8" (str.++ "\u{0c}" (str.++ "-" (str.++ "2" (str.++ "9" (str.++ "8" (str.++ "9" (str.++ "3" (str.++ "8" (str.++ "8" (str.++ "6" "")))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.opt (re.++ (re.opt (re.range "+" "+"))(re.++ (str.to_re (str.++ "9" (str.++ "1" "")))(re.++ (re.opt (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (re.opt (re.range "-" "-")) (re.opt (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))))))))(re.++ (str.to_re (str.++ "9" (str.++ "8" "")))(re.++ (re.opt (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (re.opt (re.range "-" "-"))(re.++ (re.opt (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (re.range "1" "9")(re.++ ((_ re.loop 7 7) (re.range "0" "9")) (str.to_re "")))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "8" (str.++ "9" (str.++ "." (str.++ "9" (str.++ "8" (str.++ "0" "")))))))

(define-fun Witness2 () String (str.++ "1" (str.++ "0" (str.++ "0" (str.++ "0" "")))))

(assert (= regexA (re.union (re.++ (str.to_re "")(re.++ (str.to_re (str.++ "1" (str.++ "0" (str.++ "0" (str.++ "0" "")))))(re.++ (re.opt (re.++ (re.range "." ".") ((_ re.loop 1 3) (re.range "0" "0")))) (str.to_re ""))))(re.union (re.++ (str.to_re "")(re.++ ((_ re.loop 1 3) (re.range "0" "9")) (str.to_re "")))(re.union (re.++ (str.to_re "")(re.++ ((_ re.loop 1 3) (re.range "0" "9"))(re.++ (re.++ (re.range "." ".") ((_ re.loop 1 3) (re.range "0" "9"))) (str.to_re "")))) (re.++ (str.to_re "")(re.++ (re.++ (re.range "." ".") ((_ re.loop 1 3) (re.range "0" "9"))) (str.to_re ""))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "D" (str.++ "E" "")))

(define-fun Witness2 () String (str.++ "A" (str.++ "K" "")))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.union (re.++ (re.range "A" "A") (re.union (re.range "K" "L")(re.union (re.range "R" "R") (re.range "Z" "Z"))))(re.union (re.++ (re.range "C" "C") (re.union (re.range "A" "A")(re.union (re.range "O" "O") (re.range "T" "T"))))(re.union (re.++ (re.range "D" "D") (re.union (re.range "C" "C") (re.range "E" "E")))(re.union (str.to_re (str.++ "F" (str.++ "L" "")))(re.union (str.to_re (str.++ "G" (str.++ "A" "")))(re.union (str.to_re (str.++ "H" (str.++ "I" "")))(re.union (re.++ (re.range "I" "I") (re.union (re.range "A" "A")(re.union (re.range "D" "D")(re.union (re.range "L" "L") (re.range "N" "N")))))(re.union (re.++ (re.range "K" "K") (re.union (re.range "S" "S") (re.range "Y" "Y")))(re.union (str.to_re (str.++ "L" (str.++ "A" "")))(re.union (re.++ (re.range "M" "M") (re.union (re.range "A" "A")(re.union (re.range "D" "E")(re.union (re.range "I" "I")(re.union (re.range "N" "O") (re.range "S" "T"))))))(re.union (re.++ (re.range "N" "N") (re.union (re.range "C" "E")(re.union (re.range "H" "H")(re.union (re.range "J" "J")(re.union (re.range "M" "M")(re.union (re.range "V" "V") (re.range "Y" "Y")))))))(re.union (re.++ (re.range "O" "O") (re.union (re.range "H" "H")(re.union (re.range "K" "K") (re.range "R" "R"))))(re.union (str.to_re (str.++ "P" (str.++ "A" "")))(re.union (str.to_re (str.++ "R" (str.++ "I" "")))(re.union (re.++ (re.range "S" "S") (re.range "C" "D"))(re.union (re.++ (re.range "T" "T") (re.union (re.range "N" "N") (re.range "X" "X")))(re.union (str.to_re (str.++ "U" (str.++ "T" "")))(re.union (re.++ (re.range "V" "V") (re.union (re.range "A" "A") (re.range "T" "T"))) (re.++ (re.range "W" "W") (re.union (re.range "A" "A")(re.union (re.range "I" "I")(re.union (re.range "V" "V") (re.range "Y" "Y"))))))))))))))))))))))) (str.to_re "")))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "-" (str.++ "/" (str.++ "8" ""))))

(define-fun Witness2 () String (str.++ "/" (str.++ "5" (str.++ "6" (str.++ "2" "")))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.++ (re.* (re.range "0" "9"))(re.++ (re.opt (re.range "-" "-"))(re.++ (re.opt (re.range " " " "))(re.++ (re.opt (re.range "/" "/")) (re.* (re.range "0" "9")))))) (str.to_re "")))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "<" (str.++ "a" (str.++ "h" (str.++ "t" (str.++ "t" (str.++ "p" (str.++ ":" (str.++ "/" (str.++ "/" (str.++ "\u{1a}" (str.++ "\u{ef}" (str.++ "C" (str.++ "\u{f1}" (str.++ ">" (str.++ " " (str.++ " " (str.++ "<" (str.++ "/" (str.++ "a" (str.++ ">" "")))))))))))))))))))))

(define-fun Witness2 () String (str.++ "<" (str.++ "a" (str.++ "'" (str.++ "h" (str.++ "t" (str.++ "t" (str.++ "p" (str.++ ":" (str.++ "/" (str.++ "/" (str.++ ";" (str.++ "\u{c4}" (str.++ "_" (str.++ "H" (str.++ ">" (str.++ "x" (str.++ "<" (str.++ "/" (str.++ "a" (str.++ ">" "")))))))))))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (str.to_re (str.++ "<" (str.++ "a" "")))(re.++ (re.* (re.union (re.range "\u{00}" "=") (re.range "?" "\u{ff}")))(re.++ (re.++ (str.to_re (str.++ "h" (str.++ "t" (str.++ "t" (str.++ "p" (str.++ ":" (str.++ "/" (str.++ "/" "")))))))) (re.* (re.union (re.range "\u{00}" "!") (re.range "#" "\u{ff}"))))(re.++ (re.* (re.union (re.range "\u{00}" "=") (re.range "?" "\u{ff}")))(re.++ (re.range ">" ">")(re.++ (re.+ (re.union (re.range " " " ")(re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))))(re.++ (str.to_re (str.++ "<" (str.++ "/" (str.++ "a" (str.++ ">" ""))))) (str.to_re "")))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "A" (str.++ "-" (str.++ "Z" (str.++ "0" (str.++ "-" (str.++ "9" "")))))))

(define-fun Witness2 () String (str.++ "0" (str.++ "-" (str.++ "9" (str.++ "a" (str.++ "-" (str.++ "z" (str.++ "a" (str.++ "-" (str.++ "z" (str.++ "A" (str.++ "-" (str.++ "Z" (str.++ "a" (str.++ "-" (str.++ "z" (str.++ "0" (str.++ "-" (str.++ "9" (str.++ "A" (str.++ "-" (str.++ "Z" (str.++ "A" (str.++ "-" (str.++ "Z" (str.++ "A" (str.++ "-" (str.++ "Z" (str.++ "0" (str.++ "-" (str.++ "9" (str.++ "a" (str.++ "-" (str.++ "z" (str.++ "A" (str.++ "-" (str.++ "Z" (str.++ "A" (str.++ "-" (str.++ "Z" (str.++ "a" (str.++ "-" (str.++ "z" (str.++ "a" (str.++ "-" (str.++ "z" ""))))))))))))))))))))))))))))))))))))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.* (re.union (str.to_re (str.++ "a" (str.++ "-" (str.++ "z" ""))))(re.union (str.to_re (str.++ "A" (str.++ "-" (str.++ "Z" "")))) (str.to_re (str.++ "0" (str.++ "-" (str.++ "9" "")))))))(re.++ (re.* (re.union (re.range "\u{00}" "\u{22}")(re.union (re.range "+" "]") (re.range "_" "\u{ff}")))) (str.to_re ""))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "n" (str.++ "7" (str.++ "(" (str.++ "@" (str.++ "e" (str.++ "r" (str.++ "." (str.++ "0" (str.++ "7" (str.++ "8" (str.++ "." (str.++ "6" (str.++ "0" (str.++ "." (str.++ "2" (str.++ "4" (str.++ "0" (str.++ "." (str.++ "2" (str.++ "0" (str.++ "3" ""))))))))))))))))))))))

(define-fun Witness2 () String (str.++ "p" (str.++ "@" (str.++ "q" ""))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.opt (str.to_re (str.++ "m" (str.++ "a" (str.++ "i" (str.++ "l" (str.++ "t" (str.++ "o" (str.++ ":" "")))))))))(re.++ (re.range "a" "z")(re.++ (re.* (re.union (re.range "!" "!")(re.union (re.range "$" ".")(re.union (re.range "0" "9")(re.union (re.range ";" ";")(re.union (re.range "=" "=")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "~" "~")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))))))))(re.++ (re.range "@" "@")(re.++ (re.* (re.++ (re.union (re.range "0" "9") (re.range "a" "z"))(re.++ (re.* (re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))))(re.++ (re.* (re.union (re.range "0" "9") (re.range "a" "z"))) (re.range "." ".")))))(re.++ (re.union (re.++ (re.union (re.range "0" "9") (re.range "a" "z"))(re.++ (re.* (re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))))(re.++ (re.* (re.union (re.range "0" "9") (re.range "a" "z"))) (re.opt (re.++ (re.range "." ".") (re.+ (re.union (re.range "0" "9") (re.range "a" "z")))))))) (re.++ ((_ re.loop 3 3) (re.++ (re.union (re.++ (str.to_re (str.++ "2" (str.++ "5" ""))) (re.range "0" "5"))(re.union (re.++ (re.range "2" "2")(re.++ (re.range "0" "4") (re.range "0" "9"))) (re.++ (re.opt (re.range "0" "1"))(re.++ (re.range "0" "9") (re.opt (re.range "0" "9")))))) (re.range "." "."))) (re.union (re.++ (str.to_re (str.++ "2" (str.++ "5" ""))) (re.range "0" "5"))(re.union (re.++ (re.range "2" "2")(re.++ (re.range "0" "4") (re.range "0" "9"))) (re.++ (re.opt (re.range "0" "1"))(re.++ (re.range "0" "9") (re.opt (re.range "0" "9")))))))) (str.to_re ""))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "$" (str.++ "9" (str.++ "8" (str.++ "." "")))))

(define-fun Witness2 () String (str.++ "8" (str.++ "," (str.++ "2" (str.++ "2" (str.++ "3" (str.++ "," (str.++ "7" (str.++ "8" (str.++ "7" (str.++ "," (str.++ "7" (str.++ "7" (str.++ "7" ""))))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.opt (re.range "$" "$"))(re.++ (re.union (re.++ ((_ re.loop 1 3) (re.range "0" "9")) (re.* (re.++ (re.range "," ",") ((_ re.loop 3 3) (re.range "0" "9"))))) (re.+ (re.range "0" "9")))(re.++ (re.opt (re.++ (re.range "." ".") ((_ re.loop 0 2) (re.range "0" "9")))) (str.to_re "")))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "(" (str.++ "0" (str.++ "8" (str.++ ")" (str.++ "9" (str.++ "2" (str.++ "8" (str.++ "3" (str.++ "2" (str.++ "9" (str.++ "9" (str.++ "0" "")))))))))))))

(define-fun Witness2 () String (str.++ "(" (str.++ "0" (str.++ "1" (str.++ ")" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "8" (str.++ "8" (str.++ "0" (str.++ "8" (str.++ "8" "")))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (str.to_re (str.++ "(" (str.++ "0" "")))(re.++ (re.range "1" "9")(re.++ (re.range ")" ")")(re.++ ((_ re.loop 8 8) (re.range "0" "9")) (str.to_re ""))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "s" (str.++ "i" (str.++ "p" (str.++ ":" (str.++ "B" ""))))))

(define-fun Witness2 () String (str.++ "s" (str.++ "i" (str.++ "p" (str.++ ":" (str.++ "+" (str.++ "3" "")))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.union (str.to_re (str.++ "s" (str.++ "i" (str.++ "p" "")))) (str.to_re (str.++ "s" (str.++ "i" (str.++ "p" (str.++ "s" ""))))))(re.++ (re.range ":" ":")(re.++ (re.opt (re.range "+" "+")) (re.+ (re.union (re.range "%" "&")(re.union (re.range "," ".")(re.union (re.range "0" ";")(re.union (re.range "=" "=")(re.union (re.range "?" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "|" "|")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "\u{91}" (str.++ "v" (str.++ "I" (str.++ "a" (str.++ "g" (str.++ "r" (str.++ "\u{1f}" (str.++ "\u{16}" (str.++ "\u{15}" (str.++ "\u{de}" "")))))))))))

(define-fun Witness2 () String (str.++ "v" (str.++ "1" (str.++ "a" (str.++ "g" (str.++ "r" (str.++ "\u{a5}" (str.++ "1" (str.++ "\u{1e}" (str.++ "G" (str.++ "\u{9b}" "")))))))))))

(assert (= regexA (re.++ (re.* (re.union (re.range "\u{00}" "\u{09}") (re.range "\u{0b}" "\u{ff}")))(re.++ (re.union (re.range "V" "V") (re.range "v" "v"))(re.++ (re.union (re.range "1" "1")(re.union (re.range "I" "I") (re.range "i" "i")))(re.++ (str.to_re (str.++ "a" (str.++ "g" (str.++ "r" "")))) (re.* (re.union (re.range "\u{00}" "\u{09}") (re.range "\u{0b}" "\u{ff}")))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "0" (str.++ "9" (str.++ "8" (str.++ "8" (str.++ "8" (str.++ "9" (str.++ "7" (str.++ "8" "")))))))))

(define-fun Witness2 () String (str.++ "8" (str.++ "2" (str.++ "9" (str.++ "4" (str.++ "0" (str.++ "0" (str.++ "7" (str.++ "7" "")))))))))

(assert (= regexA (re.union (re.++ (str.to_re "")(re.++ ((_ re.loop 8 8) (re.range "0" "9")) (str.to_re ""))) (re.++ (str.to_re "")(re.++ ((_ re.loop 2 2) (re.union (re.range "C" "C") (re.range "S" "S")))(re.++ ((_ re.loop 6 6) (re.range "0" "9")) (str.to_re "")))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "0" ""))

(define-fun Witness2 () String (str.++ "3" ""))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.+ (re.range "0" "9")) (str.to_re "")))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "2" (str.++ "5" (str.++ "8" (str.++ "9" (str.++ "3" (str.++ "-" (str.++ "0" (str.++ "0" (str.++ "2" ""))))))))))

(define-fun Witness2 () String (str.++ "7" (str.++ "8" (str.++ "6" (str.++ "9" (str.++ "3" (str.++ "-" (str.++ "9" (str.++ "9" (str.++ "9" ""))))))))))

(assert (= regexA (re.union (re.++ (str.to_re "")(re.++ ((_ re.loop 5 5) (re.range "0" "9"))(re.++ (re.range "-" "-")(re.++ ((_ re.loop 3 3) (re.range "0" "9")) (str.to_re ""))))) (re.++ (str.to_re "")(re.++ ((_ re.loop 8 8) (re.range "0" "9")) (str.to_re ""))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "2" (str.++ "0" (str.++ "8" (str.++ "8" (str.++ "-" (str.++ "0" (str.++ "8" (str.++ "-" (str.++ "4" ""))))))))))

(define-fun Witness2 () String (str.++ "2" (str.++ "0" (str.++ "8" (str.++ "2" (str.++ "-" (str.++ "0" (str.++ "4" (str.++ "-" (str.++ "9" ""))))))))))

(assert (= regexA (re.++ (re.++ (re.union (str.to_re (str.++ "1" (str.++ "9" ""))) (str.to_re (str.++ "2" (str.++ "0" "")))) ((_ re.loop 2 2) (re.range "0" "9")))(re.++ (re.range "-" "-")(re.++ (re.union (re.range "1" "9")(re.union (re.++ (re.range "0" "0") (re.range "1" "9")) (re.++ (re.range "1" "1") (re.range "0" "2"))))(re.++ (re.range "-" "-") (re.union (re.++ (re.range "3" "3") (re.range "0" "1"))(re.union (re.++ (re.range "0" "2") (re.range "0" "9")) (re.range "0" "9")))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "L" (str.++ "p" (str.++ "\u{0b}" (str.++ "W" (str.++ "-" (str.++ "k" "")))))))

(define-fun Witness2 () String (str.++ "M" (str.++ "f" (str.++ "\u{85}" (str.++ "Q" (str.++ "-" ""))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.++ (re.range "A" "Z") (re.+ (re.range "a" "z")))(re.++ (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))(re.++ (re.++ (re.range "A" "Z") (re.+ (re.union (re.range "-" "-")(re.union (re.range "A" "Z") (re.range "a" "z"))))) (str.to_re "")))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "s" (str.++ "1" (str.++ "O" (str.++ "-" (str.++ "C" (str.++ "." (str.++ "k" (str.++ "X" (str.++ "Z" ""))))))))))

(define-fun Witness2 () String (str.++ "2" (str.++ "8" (str.++ "-" (str.++ "4" (str.++ "6" (str.++ "7" (str.++ "t" (str.++ "z" (str.++ "n" (str.++ "9" (str.++ "z" (str.++ "Z" (str.++ "L" (str.++ "x" (str.++ "X" (str.++ "X" "")))))))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.+ (re.++ (re.+ (re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z"))))(re.++ (re.opt (re.range "-" "-")) (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z"))))))) (re.opt (re.range "." "."))))(re.++ ((_ re.loop 2 6) (re.union (re.range "A" "Z") (re.range "a" "z"))) (str.to_re ""))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "9" (str.++ "1" (str.++ "8" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "8" (str.++ "9" "")))))))))

(define-fun Witness2 () String (str.++ "4" (str.++ "4" (str.++ "1" (str.++ "8" (str.++ "9" (str.++ "6" (str.++ "8" (str.++ "9" "")))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ ((_ re.loop 8 8) (re.range "0" "9")) (str.to_re "")))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "8" (str.++ "@" (str.++ "-" (str.++ "p" (str.++ "." (str.++ "l" "")))))))

(define-fun Witness2 () String (str.++ "-" (str.++ "t" (str.++ "." (str.++ "." (str.++ "@" (str.++ "t" (str.++ "a" (str.++ "." (str.++ "o" ""))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.+ (re.union (re.range "-" ".")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_") (re.range "a" "z"))))))(re.++ (re.range "@" "@")(re.++ (re.+ (re.union (re.range "-" "-")(re.union (re.range "0" "9") (re.range "a" "z"))))(re.++ (re.+ (re.++ (re.range "." ".") (re.+ (re.range "a" "z")))) (str.to_re ""))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "8" (str.++ "1" (str.++ "0" ""))))

(define-fun Witness2 () String (str.++ "+" (str.++ "9" (str.++ "9" (str.++ "3" (str.++ "5" ""))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.opt (re.union (re.range "+" "+") (re.range "-" "-")))(re.++ (re.opt (re.++ (re.opt (re.range "0" "9"))(re.++ (re.opt (re.range "0" "9"))(re.++ (re.opt (re.range "0" "9")) (re.opt (re.range "," ","))))))(re.++ (re.* (re.++ ((_ re.loop 3 3) (re.range "0" "9")) (re.opt (re.range "," ",")))) (str.to_re "")))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "1" (str.++ "4" (str.++ "2" (str.++ "8" (str.++ "/" (str.++ "1" (str.++ "0" (str.++ "/" (str.++ "1" (str.++ "9" "")))))))))))

(define-fun Witness2 () String (str.++ "1" (str.++ "4" (str.++ "9" (str.++ "5" (str.++ "/" (str.++ "1" (str.++ "2" (str.++ "/" (str.++ "9" ""))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.range "1" "1")(re.++ (re.range "3" "4")(re.++ (re.range "0" "9")(re.++ (re.range "0" "9")(re.++ (re.range "/" "/")(re.++ (re.union (re.++ (re.range "1" "1") (re.range "0" "2")) (re.range "1" "9"))(re.++ (re.range "/" "/")(re.++ (re.union (re.++ (re.range "1" "2") (re.range "0" "9"))(re.union (re.++ (re.range "3" "3") (re.range "0" "1")) (re.range "1" "9"))) (str.to_re ""))))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "W" (str.++ "G" (str.++ "8" (str.++ "2" (str.++ "7" (str.++ "9" (str.++ "3" (str.++ "9" "")))))))))

(define-fun Witness2 () String (str.++ "H" (str.++ "Y" (str.++ "9" (str.++ "9" (str.++ "9" (str.++ "8" (str.++ "2" (str.++ "8" "")))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.union (re.range "A" "C")(re.union (re.range "E" "E")(re.union (re.range "G" "H")(re.union (re.range "J" "P")(re.union (re.range "R" "T") (re.range "W" "Z"))))))(re.++ (re.union (re.range "A" "C")(re.union (re.range "E" "E")(re.union (re.range "G" "H")(re.union (re.range "J" "N")(re.union (re.range "P" "P")(re.union (re.range "R" "T") (re.range "W" "Z")))))))(re.++ ((_ re.loop 6 6) (re.range "0" "9"))(re.++ (re.opt (re.union (re.range "A" "D")(re.union (re.range "F" "F") (re.range "M" "M")))) (str.to_re ""))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "9" ""))

(define-fun Witness2 () String (str.++ "8" ""))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.range "0" "9") (str.to_re "")))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "N" (str.++ "3" (str.++ "8" (str.++ "1" (str.++ "Z" (str.++ "V" "")))))))

(define-fun Witness2 () String (str.++ "N" (str.++ "9" (str.++ "9" (str.++ "8" (str.++ "9" ""))))))

(assert (= regexA (re.union (re.++ (str.to_re "")(re.++ (re.range "N" "N")(re.++ (re.range "1" "9")(re.++ ((_ re.loop 0 4) (re.range "0" "9")) (str.to_re "")))))(re.union (re.++ (str.to_re "")(re.++ (re.range "N" "N")(re.++ (re.range "1" "9")(re.++ ((_ re.loop 0 3) (re.range "0" "9"))(re.++ (re.range "A" "Z") (str.to_re "")))))) (re.++ (str.to_re "")(re.++ (re.range "N" "N")(re.++ (re.range "1" "9")(re.++ ((_ re.loop 0 2) (re.range "0" "9"))(re.++ ((_ re.loop 2 2) (re.range "A" "Z")) (str.to_re ""))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "I" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "A" (str.++ "B" "")))))))

(define-fun Witness2 () String (str.++ "X" (str.++ "9" (str.++ "1" (str.++ "Z" (str.++ "F" ""))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.union (re.++ ((_ re.loop 1 2) (re.range "A" "Z")) ((_ re.loop 1 2) (re.range "0" "9"))) (re.++ ((_ re.loop 1 2) (re.range "A" "Z"))(re.++ (re.range "0" "9") (re.range "A" "Z"))))(re.++ (re.opt (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (re.++ (re.range "0" "9") ((_ re.loop 2 2) (re.range "A" "Z"))) (str.to_re "")))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "\u{22}" (str.++ "\u{b6}" (str.++ "\u{22}" (str.++ "'" (str.++ "\u{9f}" (str.++ "\u{c7}" (str.++ "\u{13}" ""))))))))

(define-fun Witness2 () String (str.++ "\u{22}" (str.++ "\u{22}" (str.++ "\u{e3}" (str.++ "'" (str.++ "\u{c1}" ""))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.* (re.union (re.union (re.range "\u{00}" "!")(re.union (re.range "#" "&") (re.range "(" "\u{ff}"))) (re.++ (re.range "\u{22}" "\u{22}")(re.++ (re.* (re.union (re.range "\u{00}" "!") (re.range "#" "\u{ff}"))) (re.range "\u{22}" "\u{22}")))))(re.++ (re.range "'" "'")(re.++ (re.* (re.union (re.range "\u{00}" "\u{09}") (re.range "\u{0b}" "\u{ff}"))) (str.to_re "")))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "9" (str.++ "8" (str.++ "6" (str.++ "1" "")))))

(define-fun Witness2 () String (str.++ "1" (str.++ "9" (str.++ "6" (str.++ "8" "")))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.+ (re.range "1" "9"))(re.++ (re.* (re.range "0" "9")) (str.to_re ""))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "9" (str.++ "4" (str.++ "." (str.++ "2" (str.++ "4" (str.++ "8" (str.++ "." (str.++ "8" (str.++ "1" (str.++ "." (str.++ "8" ""))))))))))))

(define-fun Witness2 () String (str.++ "2" (str.++ "1" (str.++ "2" (str.++ "." (str.++ "2" (str.++ "1" (str.++ "8" (str.++ "." (str.++ "2" (str.++ "5" (str.++ "0" (str.++ "." (str.++ "2" (str.++ "3" (str.++ "9" ""))))))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.union (re.++ (str.to_re (str.++ "2" (str.++ "5" ""))) (re.range "0" "5"))(re.union (re.++ (re.range "2" "2")(re.++ (re.range "0" "4") (re.range "0" "9")))(re.union (re.++ (re.range "1" "1")(re.++ (re.range "0" "9") (re.range "0" "9"))) ((_ re.loop 1 2) (re.range "0" "9")))))(re.++ ((_ re.loop 3 3) (re.++ (re.range "." ".") (re.union (re.++ (str.to_re (str.++ "2" (str.++ "5" ""))) (re.range "0" "5"))(re.union (re.++ (re.range "2" "2")(re.++ (re.range "0" "4") (re.range "0" "9")))(re.union (re.++ (re.range "1" "1")(re.++ (re.range "0" "9") (re.range "0" "9"))) ((_ re.loop 1 2) (re.range "0" "9"))))))) (str.to_re ""))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "V" (str.++ "y" (str.++ "E" (str.++ "f" "")))))

(define-fun Witness2 () String (str.++ "D" (str.++ "'" (str.++ "W" (str.++ "z" "")))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.union (re.++ (re.range "A" "Z")(re.++ (re.opt (re.++ (re.union (re.range "'" "'") ((_ re.loop 1 3) (re.range "a" "z"))) (re.range "A" "Z"))) (re.+ (re.range "a" "z")))) (re.++ (re.range "A" "Z") (re.range "." ".")))(re.++ (re.opt (re.++ (re.union (re.range " " " ") (re.range "-" "-")) (re.union (re.++ (re.range "A" "Z")(re.++ (re.opt (re.++ (re.union (re.range "'" "'") ((_ re.loop 1 3) (re.range "a" "z"))) (re.range "A" "Z"))) (re.+ (re.range "a" "z")))) (re.++ (re.range "A" "Z") (re.range "." "."))))) (str.to_re ""))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "4" ""))

(define-fun Witness2 () String (str.++ "4" ""))

(assert (= regexA (re.union (re.++ (str.to_re "")(re.++ (re.+ (re.range "0" "9")) (str.to_re ""))) (re.++ (str.to_re "")(re.++ (re.union (re.++ ((_ re.loop 1 3) (re.range "0" "9"))(re.++ (re.union (re.range " " " ")(re.union (re.range "," ",") (re.range "." ".")))(re.++ (re.* (re.++ ((_ re.loop 3 3) (re.range "0" "9")) (re.union (re.range " " " ")(re.union (re.range "," ",") (re.range "." "."))))) ((_ re.loop 3 3) (re.range "0" "9"))))) ((_ re.loop 1 3) (re.range "0" "9"))) (str.to_re ""))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "0" (str.++ "9" (str.++ "5" (str.++ "9" (str.++ "\u{85}" (str.++ "8" (str.++ "7" (str.++ "8" "")))))))))

(define-fun Witness2 () String (str.++ "(" (str.++ "8" (str.++ "8" (str.++ "4" (str.++ ")" (str.++ "\u{a0}" "")))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.opt (re.++ (re.range "1" "1")(re.++ (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))) (re.opt (re.range "-" "/")))))(re.++ (re.union (re.++ (re.range "(" "(")(re.++ ((_ re.loop 3 3) (re.range "0" "9")) (re.range ")" ")"))) ((_ re.loop 3 3) (re.range "0" "9")))(re.++ (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (re.opt (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "-" "/")(re.union (re.range "\u{5c}" "\u{5c}")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))))(re.++ (re.* (re.range "0" "9"))(re.++ (re.opt (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "-" "/")(re.union (re.range "\u{5c}" "\u{5c}")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))))(re.++ (re.* (re.range "0" "9")) (str.to_re "")))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "\u{83}" (str.++ "\u{8e}" (str.++ "\u{d1}" (str.++ "0" (str.++ "E" (str.++ "m" (str.++ "<" ""))))))))

(define-fun Witness2 () String (str.++ "C" (str.++ "0" (str.++ "e" (str.++ "M" "")))))

(assert (= regexA (re.++ (re.* (re.union (re.range "\u{00}" "\u{09}") (re.range "\u{0b}" "\u{ff}")))(re.++ (re.union (re.range "0" "0")(re.union (re.range "O" "O") (re.range "o" "o")))(re.++ (re.union (re.range "E" "E") (re.range "e" "e"))(re.++ (re.union (re.range "M" "M") (re.range "m" "m")) (re.* (re.union (re.range "\u{00}" "\u{09}") (re.range "\u{0b}" "\u{ff}")))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "0" (str.++ "5" (str.++ "2" (str.++ "0" (str.++ "9" (str.++ "\u{0a}" (str.++ "9" (str.++ "1" (str.++ "5" (str.++ "\u{a0}" (str.++ "8" (str.++ "9" "")))))))))))))

(define-fun Witness2 () String (str.++ "0" (str.++ "9" (str.++ "9" (str.++ "7" (str.++ "8" (str.++ "8" (str.++ "\u{0d}" (str.++ "9" (str.++ "7" (str.++ "\u{85}" (str.++ "9" (str.++ "0" (str.++ "8" ""))))))))))))))

(assert (= regexA (re.union (re.++ (str.to_re "")(re.++ (re.range "0" "0")(re.++ (re.range "1" "9")(re.++ (re.range "0" "9")(re.++ (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))(re.++ ((_ re.loop 4 4) (re.range "0" "9"))(re.++ (re.opt (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ ((_ re.loop 4 4) (re.range "0" "9")) (str.to_re "")))))))))(re.union (re.++ (str.to_re "")(re.++ (re.range "0" "0")(re.++ (re.range "1" "9")(re.++ ((_ re.loop 2 2) (re.range "0" "9"))(re.++ (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))(re.++ ((_ re.loop 3 3) (re.range "0" "9"))(re.++ (re.opt (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ ((_ re.loop 4 4) (re.range "0" "9")) (str.to_re "")))))))))(re.union (re.++ (str.to_re "")(re.++ (re.range "0" "0")(re.++ (re.range "1" "9")(re.++ ((_ re.loop 2 2) (re.range "0" "9"))(re.++ (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))(re.++ ((_ re.loop 4 4) (re.range "0" "9"))(re.++ (re.opt (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ ((_ re.loop 3 3) (re.range "0" "9")) (str.to_re "")))))))))(re.union (re.++ (str.to_re "")(re.++ (re.range "0" "0")(re.++ (re.range "1" "9")(re.++ ((_ re.loop 3 3) (re.range "0" "9"))(re.++ (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))(re.++ ((_ re.loop 3 3) (re.range "0" "9"))(re.++ (re.opt (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ ((_ re.loop 2 2) (re.range "0" "9")) (str.to_re "")))))))))(re.union (re.++ (str.to_re "")(re.++ (re.range "0" "0")(re.++ (re.range "1" "9")(re.++ ((_ re.loop 3 3) (re.range "0" "9"))(re.++ (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))(re.++ ((_ re.loop 3 3) (re.range "0" "9"))(re.++ (re.opt (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ ((_ re.loop 3 3) (re.range "0" "9")) (str.to_re "")))))))))(re.union (re.++ (str.to_re "")(re.++ (re.range "0" "0")(re.++ (re.range "1" "9")(re.++ ((_ re.loop 4 4) (re.range "0" "9"))(re.++ (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))(re.++ ((_ re.loop 3 3) (re.range "0" "9"))(re.++ (re.opt (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ ((_ re.loop 2 2) (re.range "0" "9")) (str.to_re "")))))))))(re.union (re.++ (str.to_re "")(re.++ (re.range "0" "0")(re.++ (re.range "1" "9")(re.++ ((_ re.loop 4 4) (re.range "0" "9"))(re.++ (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))(re.++ ((_ re.loop 2 2) (re.range "0" "9"))(re.++ (re.opt (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ ((_ re.loop 3 3) (re.range "0" "9")) (str.to_re ""))))))))) (re.++ (str.to_re "")(re.++ (re.range "0" "0")(re.++ (re.range "1" "9")(re.++ ((_ re.loop 4 4) (re.range "0" "9"))(re.++ (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))(re.++ ((_ re.loop 2 2) (re.range "0" "9"))(re.++ (re.opt (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ ((_ re.loop 2 2) (re.range "0" "9")) (str.to_re ""))))))))))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "4" (str.++ "5" (str.++ "8" (str.++ "8" (str.++ "9" (str.++ "5" (str.++ "8" (str.++ "9" (str.++ "2" (str.++ "8" (str.++ "3" (str.++ "9" (str.++ "2" (str.++ "1" (str.++ "0" ""))))))))))))))))

(define-fun Witness2 () String (str.++ "8" (str.++ "8" (str.++ "0" (str.++ "6" (str.++ "7" (str.++ "5" (str.++ "9" (str.++ "9" (str.++ "0" (str.++ "7" (str.++ "6" (str.++ "9" (str.++ "4" (str.++ "7" (str.++ "8" ""))))))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.union (re.++ (re.range "0" "9")(re.++ (re.range " " " ")(re.++ ((_ re.loop 2 2) (re.range "0" "9"))(re.++ (re.range " " " ")(re.++ ((_ re.loop 2 2) (re.range "0" "9"))(re.++ (re.range " " " ")(re.++ ((_ re.loop 2 2) (re.range "0" "9"))(re.++ (re.range " " " ")(re.++ ((_ re.loop 3 3) (re.range "0" "9"))(re.++ (re.range " " " ")(re.++ ((_ re.loop 3 3) (re.range "0" "9")) (re.union (re.++ (re.range " " " ") ((_ re.loop 2 2) (re.range "0" "9"))) (str.to_re ""))))))))))))) (re.++ (re.range "0" "9")(re.++ ((_ re.loop 2 2) (re.range "0" "9"))(re.++ ((_ re.loop 2 2) (re.range "0" "9"))(re.++ ((_ re.loop 2 2) (re.range "0" "9"))(re.++ ((_ re.loop 3 3) (re.range "0" "9"))(re.++ ((_ re.loop 3 3) (re.range "0" "9")) (re.union ((_ re.loop 2 2) (re.range "0" "9")) (str.to_re ""))))))))) (str.to_re "")))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "1" (str.++ "(" (str.++ "6" (str.++ "1" (str.++ "1" (str.++ "\u{09}" (str.++ "9" (str.++ "7" (str.++ "5" (str.++ "6" (str.++ "8" (str.++ "9" (str.++ "8" (str.++ "x" (str.++ " " ""))))))))))))))))

(define-fun Witness2 () String (str.++ "\u{09}" (str.++ "9" (str.++ "8" (str.++ "9" (str.++ " " (str.++ "3" (str.++ "5" (str.++ "7" (str.++ "\u{85}" (str.++ "2" (str.++ "1" (str.++ "3" (str.++ "8" (str.++ "x" (str.++ "\u{a0}" ""))))))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.opt (re.range "1" "1"))(re.++ (re.opt (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (re.opt (re.range "(" "("))(re.++ (re.++ (re.range "2" "9") ((_ re.loop 2 2) (re.range "0" "9")))(re.++ (re.opt (re.range ")" ")"))(re.++ (re.opt (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ ((_ re.loop 3 3) (re.range "0" "9"))(re.++ (re.opt (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "-" "-")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))))(re.++ ((_ re.loop 4 4) (re.range "0" "9"))(re.++ (re.opt (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (re.union (str.to_re (str.++ "e" (str.++ "x" (str.++ "t" "")))) (re.++ (re.range "x" "x") (re.opt (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))))(re.++ (re.opt (re.++ (re.range "1" "9") (re.* (re.range "0" "9")))) (str.to_re ""))))))))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "t" (str.++ "z" (str.++ "x" (str.++ "." (str.++ "E" (str.++ "." (str.++ "M" ""))))))))

(define-fun Witness2 () String (str.++ "m" (str.++ "i" (str.++ "." (str.++ "G" (str.++ "." (str.++ "N" (str.++ "$" (str.++ "J" (str.++ "$" ""))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.++ ((_ re.loop 2 3) (re.range "a" "z")) (re.* (re.++ (re.range "." ".")(re.++ (re.union (re.range "A" "Z") (re.range "a" "z")) (re.* (re.union (re.range "$" "$")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_") (re.range "a" "z"))))))))))(re.++ (re.range "." ".")(re.++ (re.++ (re.range "A" "Z") (re.* (re.union (re.range "$" "$")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_") (re.range "a" "z"))))))) (str.to_re "")))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "[" (str.++ "a" (str.++ "s" (str.++ "s" (str.++ "e" (str.++ "m" (str.++ "b" (str.++ "l" (str.++ "y" (str.++ ":" (str.++ " " (str.++ "A" (str.++ "s" (str.++ "s" (str.++ "e" (str.++ "m" (str.++ "b" (str.++ "l" (str.++ "y" (str.++ "V" (str.++ "e" (str.++ "r" (str.++ "s" (str.++ "i" (str.++ "o" (str.++ "n" (str.++ "(" (str.++ "&" (str.++ "q" (str.++ "u" (str.++ "o" (str.++ "t" (str.++ ";" (str.++ "3" (str.++ "8" (str.++ "." (str.++ "7" (str.++ "9" (str.++ "." (str.++ "8" (str.++ "9" (str.++ "." (str.++ "2" (str.++ "8" (str.++ "8" ""))))))))))))))))))))))))))))))))))))))))))))))

(define-fun Witness2 () String (str.++ "[" (str.++ "a" (str.++ "s" (str.++ "s" (str.++ "e" (str.++ "m" (str.++ "b" (str.++ "l" (str.++ "y" (str.++ ":" (str.++ " " (str.++ "A" (str.++ "s" (str.++ "s" (str.++ "e" (str.++ "m" (str.++ "b" (str.++ "l" (str.++ "y" (str.++ "V" (str.++ "e" (str.++ "r" (str.++ "s" (str.++ "i" (str.++ "o" (str.++ "n" (str.++ "(" (str.++ "&" (str.++ "q" (str.++ "u" (str.++ "o" (str.++ "t" (str.++ ";" (str.++ "8" (str.++ "." (str.++ "8" (str.++ "." (str.++ "2" (str.++ "." (str.++ "8" (str.++ "0" ""))))))))))))))))))))))))))))))))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (str.to_re (str.++ "[" (str.++ "a" (str.++ "s" (str.++ "s" (str.++ "e" (str.++ "m" (str.++ "b" (str.++ "l" (str.++ "y" (str.++ ":" (str.++ " " (str.++ "A" (str.++ "s" (str.++ "s" (str.++ "e" (str.++ "m" (str.++ "b" (str.++ "l" (str.++ "y" (str.++ "V" (str.++ "e" (str.++ "r" (str.++ "s" (str.++ "i" (str.++ "o" (str.++ "n" (str.++ "(" (str.++ "&" (str.++ "q" (str.++ "u" (str.++ "o" (str.++ "t" (str.++ ";" ""))))))))))))))))))))))))))))))))))(re.++ (re.+ (re.range "0" "9"))(re.++ (re.range "." ".")(re.++ (re.+ (re.range "0" "9"))(re.++ (re.range "." ".")(re.++ (re.+ (re.range "0" "9"))(re.++ (re.range "." ".") (re.+ (re.range "0" "9"))))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "4" ""))

(define-fun Witness2 () String (str.++ "1" (str.++ "0" "")))

(assert (= regexA (re.union (re.++ (str.to_re "")(re.++ (re.range "1" "9") (str.to_re ""))) (re.++ (str.to_re "")(re.++ (str.to_re (str.++ "1" (str.++ "0" ""))) (str.to_re ""))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "@" (str.++ "-" (str.++ "c" (str.++ "h" (str.++ "\u{e4}" (str.++ "z" (str.++ "v" (str.++ "m" (str.++ "c" (str.++ "]" (str.++ "h" (str.++ "x" (str.++ "a" ""))))))))))))))

(define-fun Witness2 () String (str.++ "8" (str.++ "x" (str.++ "@" (str.++ "7" (str.++ "\u{95}" (str.++ "t" (str.++ "c" (str.++ "\u{c7}" (str.++ "w" (str.++ "z" (str.++ "v" (str.++ "a" (str.++ "\u{f1}" (str.++ "u" (str.++ "z" ""))))))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.* (re.union (re.range "-" ".")(re.union (re.range "0" "9")(re.union (re.range "_" "_") (re.range "a" "z")))))(re.++ (re.range "@" "@")(re.++ (re.+ (re.union (re.range "-" "-")(re.union (re.range "0" "9") (re.range "a" "z"))))(re.++ (re.+ (re.++ (re.union (re.range "\u{00}" "\u{09}") (re.range "\u{0b}" "\u{ff}")) ((_ re.loop 2 4) (re.range "a" "z")))) (str.to_re ""))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "." (str.++ "9" "")))

(define-fun Witness2 () String "")

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.union (re.* (re.range "0" "9")) (re.++ (re.* (re.range "0" "9"))(re.++ (re.range "." ".")(re.++ (re.range "0" "9") (re.* (re.range "0" "9")))))) (str.to_re "")))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "1" ""))

(define-fun Witness2 () String (str.++ "1" (str.++ "0" "")))

(assert (= regexA (re.union (re.++ (str.to_re "")(re.++ (re.range "1" "1") (str.to_re "")))(re.union (re.++ (str.to_re "")(re.++ (re.range "3" "3") (str.to_re "")))(re.union (re.++ (str.to_re "")(re.++ (re.range "4" "4") (str.to_re "")))(re.union (re.++ (str.to_re "")(re.++ (re.range "6" "6") (str.to_re ""))) (re.++ (str.to_re "")(re.++ (str.to_re (str.++ "1" (str.++ "0" ""))) (str.to_re "")))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String "")

(define-fun Witness2 () String "")

(assert (= regexA (re.union (re.++ (re.union (re.++ (re.range "0" "0") (re.range "1" "9"))(re.union (re.++ (re.range "1" "1") (re.range "0" "9")) (re.++ (re.range "2" "2") (re.range "0" "8"))))(re.++ (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))(re.++ (str.to_re (str.++ "F" (str.++ "e" (str.++ "b" (str.++ "r" (str.++ "u" (str.++ "a" (str.++ "r" (str.++ "y" "")))))))))(re.++ (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))(re.++ (re.range "1" "9") ((_ re.loop 3 3) (re.range "0" "9"))))))) (str.to_re ""))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "2" (str.++ "6" (str.++ "9" (str.++ "1" (str.++ "5" (str.++ "1" (str.++ "3" ""))))))))

(define-fun Witness2 () String (str.++ "2" (str.++ "8" (str.++ "6" (str.++ "8" (str.++ "9" (str.++ "4" (str.++ "3" ""))))))))

(assert (= regexA (re.union (re.++ (str.to_re "")(re.++ ((_ re.loop 3 4) (re.range "0" "9"))(re.++ (re.range "-" "-")(re.++ ((_ re.loop 4 4) (re.range "0" "9")) (str.to_re ""))))) (re.++ (str.to_re "")(re.++ ((_ re.loop 7 8) (re.range "0" "9")) (str.to_re ""))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "l" (str.++ "b" (str.++ "b" (str.++ "b" "")))))

(define-fun Witness2 () String (str.++ "b" (str.++ "b" "")))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.union (re.++ (re.range "l" "l") (re.union (str.to_re (str.++ "l" (str.++ "l" "")))(re.union (re.range "b" "b")(re.union (str.to_re (str.++ "b" (str.++ "b" ""))) (str.to_re (str.++ "b" (str.++ "b" (str.++ "b" "")))))))) (re.++ (re.range "b" "b") (re.* (re.range "b" "b")))) (str.to_re "")))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "4" (str.++ "\u{a0}" (str.++ "8" (str.++ "9" (str.++ "6" (str.++ "0" (str.++ "8" (str.++ " " (str.++ "1" (str.++ ":" (str.++ "5" (str.++ "7" (str.++ "\u{85}" (str.++ "M" (str.++ "a" ""))))))))))))))))

(define-fun Witness2 () String (str.++ "8" (str.++ "\u{a0}" (str.++ "1" (str.++ "\u{09}" (str.++ "4" (str.++ "1" (str.++ "8" (str.++ "5" (str.++ "\u{0c}" (str.++ "8" (str.++ ":" (str.++ "2" (str.++ "9" (str.++ ":" (str.++ "4" (str.++ "9" (str.++ "\u{a0}" (str.++ "a" (str.++ "A" ""))))))))))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.++ (re.union (re.++ (re.union (re.union (re.range "1" "1")(re.union (re.range "3" "3")(re.union (re.range "5" "5") (re.range "7" "8")))) (re.++ (re.range "1" "1") (re.range "0" "2")))(re.++ (re.opt (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "-" "-")(re.union (re.range "/" "/")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))))) (re.union (re.range "1" "9")(re.union (re.++ (re.range "1" "2") (re.range "0" "9")) (re.++ (re.range "3" "3") (re.range "0" "1"))))))(re.union (re.++ (re.union (re.union (re.range "4" "4")(re.union (re.range "6" "6") (re.range "9" "9"))) (str.to_re (str.++ "1" (str.++ "1" ""))))(re.++ (re.opt (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "-" "-")(re.union (re.range "/" "/")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))))) (re.union (re.range "1" "9")(re.union (re.++ (re.range "1" "2") (re.range "0" "9")) (str.to_re (str.++ "3" (str.++ "0" ""))))))) (re.++ (re.range "2" "2")(re.++ (re.opt (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "-" "-")(re.union (re.range "/" "/")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))))) (re.union (re.range "1" "9") (re.++ (re.range "1" "2") (re.range "0" "9")))))))(re.++ (re.opt (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "-" "-")(re.union (re.range "/" "/")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))))) ((_ re.loop 4 4) (re.range "0" "9"))))(re.++ (re.opt (re.++ (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))) (re.++ (re.union (re.range "1" "9") (re.++ (re.range "1" "1") (re.union (re.range "0" "0") (re.range "2" "2"))))(re.++ (re.range ":" ":")(re.++ (re.++ (re.range "0" "5") (re.range "0" "9"))(re.++ (re.union (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))) (re.++ (re.range ":" ":")(re.++ (re.++ (re.range "0" "5") (re.range "0" "9")) (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))))) ((_ re.loop 2 2) (re.union (re.range "A" "A")(re.union (re.range "M" "M")(re.union (re.range "P" "P")(re.union (re.range "a" "a")(re.union (re.range "m" "m")(re.union (re.range "p" "p") (re.range "|" "|")))))))))))))) (str.to_re ""))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "k" (str.++ ":" (str.++ "\u{5c}" (str.++ "1" (str.++ "\u{b5}" (str.++ "9" (str.++ "9" (str.++ "7" (str.++ "9" (str.++ "-" (str.++ "8" (str.++ "-" (str.++ "8" (str.++ "\u{c5}" (str.++ "c" (str.++ "s" (str.++ "v" ""))))))))))))))))))

(define-fun Witness2 () String (str.++ "\u{5c}" (str.++ "\u{5c}" (str.++ "1" (str.++ "$" (str.++ "\u{5c}" (str.++ "\u{f6}" (str.++ "\u{da}" (str.++ "4" (str.++ "7" (str.++ "5" (str.++ "6" (str.++ "-" (str.++ "9" (str.++ "0" (str.++ "-" (str.++ "9" (str.++ "\u{c8}" (str.++ "C" (str.++ "S" (str.++ "V" "")))))))))))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.union (re.++ (re.union (re.range "A" "Z") (re.range "a" "z")) (re.range ":" ":")) (re.++ (re.++ ((_ re.loop 2 2) (re.range "\u{5c}" "\u{5c}")) (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))) (re.opt (re.range "$" "$"))))(re.++ (re.++ (re.range "\u{5c}" "\u{5c}") (re.++ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))(re.++ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))) (re.* (re.union (re.range "\u{00}" "\u{09}") (re.range "\u{0b}" "\u{ff}"))))))(re.++ ((_ re.loop 4 4) (re.range "0" "9"))(re.++ (re.range "-" "-")(re.++ ((_ re.loop 1 2) (re.range "0" "9"))(re.++ (re.range "-" "-")(re.++ ((_ re.loop 1 2) (re.range "0" "9"))(re.++ (re.* (re.union (re.range "\u{00}" "\u{09}") (re.range "\u{0b}" "\u{ff}")))(re.++ (re.union (re.++ (re.union (re.range "\u{00}" "\u{09}") (re.range "\u{0b}" "\u{ff}")) (str.to_re (str.++ "c" (str.++ "s" (str.++ "v" ""))))) (re.++ (re.union (re.range "\u{00}" "\u{09}") (re.range "\u{0b}" "\u{ff}")) (str.to_re (str.++ "C" (str.++ "S" (str.++ "V" "")))))) (str.to_re "")))))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "9" (str.++ "9" (str.++ "7" (str.++ "4" (str.++ "4" (str.++ "5" (str.++ "9" (str.++ "0" (str.++ "9" (str.++ "2" "")))))))))))

(define-fun Witness2 () String (str.++ "9" (str.++ "8" (str.++ "9" (str.++ "9" (str.++ "6" (str.++ "3" (str.++ "9" (str.++ "9" (str.++ "8" (str.++ "9" "")))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.range "9" "9")(re.++ (re.union (re.range "2" "4") (re.range "7" "9"))(re.++ ((_ re.loop 8 8) (re.range "0" "9")) (str.to_re "")))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "8" (str.++ "8" (str.++ "8" (str.++ "-" (str.++ "8" (str.++ "3" (str.++ "8" (str.++ "1" "")))))))))

(define-fun Witness2 () String (str.++ "1" (str.++ "3" (str.++ "8" (str.++ "-" (str.++ "8" (str.++ "2" (str.++ "4" (str.++ "9" "")))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ ((_ re.loop 3 3) (re.range "0" "9"))(re.++ (re.range "-" "-")(re.++ ((_ re.loop 4 4) (re.range "0" "9")) (str.to_re "")))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "'" ""))

(define-fun Witness2 () String (str.++ "\u{82}" ""))

(assert (= regexA (re.union (re.range "\u{00}" " ")(re.union (re.range "\u{22}" "\u{22}")(re.union (re.range "$" "$")(re.union (re.range "'" "'")(re.union (re.range "*" ",")(re.union (re.range "." ".")(re.union (re.range "0" "9")(re.union (re.range "<" "^")(re.union (re.range "a" "f")(re.union (re.range "h" "k")(re.union (re.range "m" "s")(re.union (re.range "u" "z") (re.range "\u{7f}" "\u{ff}")))))))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "R" (str.++ "a" (str.++ "n" (str.++ "d" (str.++ "a" (str.++ "l" (str.++ " " (str.++ "L" (str.++ "." (str.++ " " (str.++ "S" (str.++ "c" (str.++ "h" (str.++ "w" (str.++ "a" (str.++ "r" (str.++ "t" (str.++ "z" "")))))))))))))))))))

(define-fun Witness2 () String (str.++ "R" (str.++ "a" (str.++ "n" (str.++ "d" (str.++ "a" (str.++ "l" (str.++ " " (str.++ " " (str.++ "S" (str.++ "c" (str.++ "h" (str.++ "w" (str.++ "a" (str.++ "r" (str.++ "t" (str.++ "z" "")))))))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.union (re.++ (str.to_re (str.++ "R" (str.++ "a" (str.++ "n" (str.++ "d" (str.++ "a" (str.++ "l" (str.++ " " ""))))))))(re.++ (re.opt (str.to_re (str.++ "L" (str.++ "." "")))) (str.to_re (str.++ " " (str.++ "S" (str.++ "c" (str.++ "h" (str.++ "w" (str.++ "a" (str.++ "r" (str.++ "t" (str.++ "z" "")))))))))))) (str.to_re (str.++ "m" (str.++ "e" (str.++ "r" (str.++ "l" (str.++ "y" (str.++ "n" "")))))))) (str.to_re "")))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "W" (str.++ "i" (str.++ "l" (str.++ "m" (str.++ "a" (str.++ "\u{85}" (str.++ "\u{85}" (str.++ "\u{a0}" (str.++ "F" (str.++ "l" (str.++ "i" (str.++ "n" (str.++ "t" (str.++ "s" (str.++ "t" (str.++ "o" (str.++ "n" (str.++ "e" "")))))))))))))))))))

(define-fun Witness2 () String (str.++ "F" (str.++ "r" (str.++ "e" (str.++ "d" (str.++ "\u{0b}" (str.++ "F" (str.++ "l" (str.++ "i" (str.++ "n" (str.++ "t" (str.++ "s" (str.++ "t" (str.++ "o" (str.++ "n" (str.++ "e" ""))))))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.union (re.++ (re.union (str.to_re (str.++ "F" (str.++ "r" (str.++ "e" (str.++ "d" ""))))) (str.to_re (str.++ "W" (str.++ "i" (str.++ "l" (str.++ "m" (str.++ "a" "")))))))(re.++ (re.+ (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))) (str.to_re (str.++ "F" (str.++ "l" (str.++ "i" (str.++ "n" (str.++ "t" (str.++ "s" (str.++ "t" (str.++ "o" (str.++ "n" (str.++ "e" ""))))))))))))) (re.++ (re.union (str.to_re (str.++ "B" (str.++ "a" (str.++ "r" (str.++ "n" (str.++ "e" (str.++ "y" ""))))))) (str.to_re (str.++ "B" (str.++ "e" (str.++ "t" (str.++ "t" (str.++ "y" "")))))))(re.++ (re.+ (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))) (str.to_re (str.++ "R" (str.++ "u" (str.++ "b" (str.++ "b" (str.++ "l" (str.++ "e" "")))))))))) (str.to_re "")))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "8" (str.++ "6" (str.++ "9" (str.++ "4" (str.++ "G" (str.++ "Y" "")))))))

(define-fun Witness2 () String (str.++ "5" (str.++ "7" (str.++ "4" (str.++ "7" (str.++ " " (str.++ "W" (str.++ "F" ""))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.range "1" "9")(re.++ ((_ re.loop 3 3) (re.range "0" "9"))(re.++ (re.opt (re.range " " " "))(re.++ ((_ re.loop 2 2) (re.range "A" "Z")) (str.to_re ""))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "\u{a0}" ""))

(define-fun Witness2 () String (str.++ "\u{a0}" (str.++ "Q" (str.++ "\u{85}" (str.++ "4" (str.++ "\u{a0}" ""))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ ((_ re.loop 1 255) (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "." ".")(re.union (re.range "0" "z")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))))) (str.to_re "")))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "3" (str.++ "0" (str.++ "3" (str.++ "3" (str.++ "-" (str.++ "8" (str.++ "9" (str.++ "5" (str.++ "9" (str.++ "-" (str.++ "9" (str.++ "8" (str.++ "2" (str.++ "8" (str.++ " " (str.++ "3" (str.++ "7" (str.++ "3" (str.++ "7" (str.++ "1" (str.++ "5" (str.++ "2" (str.++ "4" (str.++ "8" (str.++ "3" (str.++ "3" (str.++ "9" (str.++ "5" (str.++ "6" (str.++ "8" "")))))))))))))))))))))))))))))))

(define-fun Witness2 () String (str.++ "3" (str.++ "8" (str.++ "9" (str.++ "6" (str.++ " " (str.++ "8" (str.++ "9" (str.++ "1" (str.++ "3" (str.++ "-" (str.++ "5" (str.++ "9" (str.++ "8" (str.++ "8" (str.++ "8" (str.++ "7" (str.++ "9" (str.++ "3" "")))))))))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.union (re.++ (re.range "4" "4") ((_ re.loop 3 3) (re.range "0" "9")))(re.union (re.++ (re.range "5" "5")(re.++ (re.range "1" "5") ((_ re.loop 2 2) (re.range "0" "9"))))(re.union (str.to_re (str.++ "6" (str.++ "0" (str.++ "1" (str.++ "1" "")))))(re.union (re.++ (re.range "3" "3")(re.++ (re.union (re.range "6" "6") (re.range "8" "8")) ((_ re.loop 2 2) (re.range "0" "9")))) (re.++ (str.to_re (str.++ "3" (str.++ "0" "")))(re.++ (re.range "0" "5") (re.range "0" "9")))))))(re.++ (re.opt (re.union (re.range " " " ") (re.range "-" "-")))(re.++ ((_ re.loop 4 4) (re.range "0" "9"))(re.++ (re.opt (re.union (re.range " " " ") (re.range "-" "-")))(re.++ ((_ re.loop 4 4) (re.range "0" "9"))(re.++ (re.opt (re.union (re.range " " " ") (re.range "-" "-")))(re.++ (re.union ((_ re.loop 4 4) (re.range "0" "9")) (re.++ (re.range "3" "3")(re.++ (re.union (re.range "," ",")(re.union (re.range "4" "4") (re.range "7" "7"))) ((_ re.loop 13 13) (re.range "0" "9"))))) (str.to_re "")))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "5" (str.++ "8" (str.++ "9" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "8" (str.++ "8" (str.++ "-" (str.++ "Y" "")))))))))))

(define-fun Witness2 () String (str.++ "A" (str.++ "-" (str.++ "9" (str.++ "8" (str.++ "1" (str.++ "1" (str.++ "8" (str.++ "9" (str.++ "9" (str.++ "R" "")))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.union (re.++ (re.range "X" "X")(re.++ (re.opt (re.range "-" "."))(re.++ (re.opt (re.range "0" "0"))(re.++ ((_ re.loop 7 7) (re.range "0" "9"))(re.++ (re.opt (re.range "-" ".")) (re.range "A" "Z"))))))(re.union (re.++ (re.range "A" "Z")(re.++ (re.opt (re.range "-" "."))(re.++ ((_ re.loop 7 7) (re.range "0" "9"))(re.++ (re.opt (re.range "-" ".")) (re.union (re.range "0" "9") (re.range "A" "Z")))))) (re.++ ((_ re.loop 8 8) (re.range "0" "9"))(re.++ (re.opt (re.range "-" ".")) (re.range "A" "Z"))))) (str.to_re "")))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "&" (str.++ "\u{db}" (str.++ "\u{d2}" (str.++ "\u{fb}" "")))))

(define-fun Witness2 () String (str.++ "=" (str.++ "\u{8e}" "")))

(assert (= regexA (re.+ (re.union (re.range "\u{00}" "\u{1f}")(re.union (re.range "!" "+")(re.union (re.range "." "/")(re.union (re.range ":" "]") (re.range "_" "\u{ff}"))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "9" (str.++ "2" (str.++ "9" (str.++ "." "")))))

(define-fun Witness2 () String (str.++ "1" (str.++ "8" (str.++ "9" (str.++ "." (str.++ "9" (str.++ "4" "")))))))

(assert (= regexA (re.union (re.++ (str.to_re "")(re.++ ((_ re.loop 3 3) (re.range "0" "9"))(re.++ (re.range "." ".")(re.++ ((_ re.loop 0 2) (re.range "0" "9")) (str.to_re ""))))) (re.++ (str.to_re "")(re.++ (re.range "E" "E")(re.++ ((_ re.loop 3 3) (re.range "0" "9"))(re.++ (re.range "." ".")(re.++ ((_ re.loop 0 2) (re.range "0" "9")) (str.to_re "")))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "+" (str.++ "9" (str.++ "9" ""))))

(define-fun Witness2 () String (str.++ "6" (str.++ "9" (str.++ "8" (str.++ "4" "")))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.opt (re.union (re.range "+" "+") (re.range "-" "-")))(re.++ (re.* (re.range "0" "9"))(re.++ (re.opt (re.range "." "."))(re.++ (re.* (re.range "0" "9")) (str.to_re ""))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "0" (str.++ "8" (str.++ "3" ""))))

(define-fun Witness2 () String (str.++ "0" (str.++ "8" (str.++ "4" ""))))

(assert (= regexA (re.union (re.++ (str.to_re "")(re.++ (re.opt (re.range "(" "(")) (str.to_re (str.++ "0" (str.++ "8" (str.++ "2" ""))))))(re.union (str.to_re (str.++ "0" (str.++ "8" (str.++ "3" ""))))(re.union (str.to_re (str.++ "0" (str.++ "8" (str.++ "4" "")))) (re.++ (str.to_re (str.++ "0" (str.++ "7" (str.++ "2" ""))))(re.++ (re.opt (re.range ")" ")"))(re.++ (re.opt (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "-" "-")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))))(re.++ ((_ re.loop 3 3) (re.range "0" "9"))(re.++ (re.opt (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "-" "-")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))))(re.++ ((_ re.loop 4 4) (re.range "0" "9")) (str.to_re ""))))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "+" (str.++ "4" (str.++ "9" (str.++ "0" (str.++ "3" (str.++ "7" (str.++ "8" ""))))))))

(define-fun Witness2 () String (str.++ "0" (str.++ "6" (str.++ "9" (str.++ "5" "")))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.opt (re.++ (re.union (str.to_re (str.++ "0" (str.++ "0" ""))) (re.range "+" "+")) (str.to_re (str.++ "4" (str.++ "9" "")))))(re.++ (re.++ (re.opt (re.range "0" "0"))(re.++ (re.range "2" "9") (re.+ (re.range "0" "9")))) (str.to_re ""))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "[" (str.++ "]" (str.++ "]" (str.++ "\u{dd}" (str.++ "O" (str.++ "]" "")))))))

(define-fun Witness2 () String (str.++ "[" (str.++ "]" (str.++ "]" (str.++ "4" (str.++ "]" (str.++ "]" (str.++ "]" (str.++ "]" (str.++ "Q" (str.++ "]" "")))))))))))

(assert (= regexA (re.union (re.++ (re.range "[" "[")(re.++ (re.+ (re.union (re.union (re.range "\u{00}" "\u{5c}") (re.range "^" "\u{ff}")) (str.to_re (str.++ "]" (str.++ "]" ""))))) (re.range "]" "]")))(re.union (re.++ (re.range "\u{22}" "\u{22}")(re.++ (re.+ (re.union (re.union (re.range "\u{00}" "!") (re.range "#" "\u{ff}")) (str.to_re (str.++ "\u{22}" (str.++ "\u{22}" ""))))) (re.range "\u{22}" "\u{22}"))) (re.++ (re.union (re.range "A" "Z")(re.union (re.range "_" "_") (re.range "a" "z"))) (re.* (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_") (re.range "a" "z"))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "f" (str.++ "t" (str.++ "p" (str.++ ":" (str.++ "/" (str.++ "/" (str.++ "4" (str.++ "8" (str.++ "y" (str.++ "." (str.++ "y" (str.++ "." (str.++ "8" (str.++ "\u{c9}" (str.++ "n" (str.++ "." (str.++ "4" (str.++ "9" (str.++ "." (str.++ "2" (str.++ "4" (str.++ "9" (str.++ "." (str.++ "1" (str.++ "9" (str.++ "." (str.++ "2" (str.++ "5" (str.++ "1" (str.++ ":" (str.++ "8" (str.++ "8" (str.++ "/" (str.++ "b" (str.++ "/" (str.++ "?" (str.++ "q" (str.++ "#" (str.++ "8" ""))))))))))))))))))))))))))))))))))))))))

(define-fun Witness2 () String (str.++ "n" (str.++ "o" (str.++ "t" (str.++ "e" (str.++ "s" (str.++ ":" (str.++ "/" (str.++ "/" (str.++ "/" (str.++ "%" (str.++ "8" (str.++ "9" (str.++ "%" (str.++ "9" (str.++ "5" (str.++ "." (str.++ "%" (str.++ "8" (str.++ "2" (str.++ "?" (str.++ "\u{f6}" ""))))))))))))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.opt (re.++ (re.union (str.to_re (str.++ "h" (str.++ "t" (str.++ "t" (str.++ "p" "")))))(re.union (str.to_re (str.++ "h" (str.++ "t" (str.++ "t" (str.++ "p" (str.++ "s" ""))))))(re.union (str.to_re (str.++ "f" (str.++ "t" (str.++ "p" ""))))(re.union (str.to_re (str.++ "t" (str.++ "e" (str.++ "l" (str.++ "n" (str.++ "e" (str.++ "t" "")))))))(re.union (str.to_re (str.++ "g" (str.++ "o" (str.++ "p" (str.++ "h" (str.++ "e" (str.++ "r" "")))))))(re.union (str.to_re (str.++ "m" (str.++ "s" (str.++ "-" (str.++ "h" (str.++ "e" (str.++ "l" (str.++ "p" ""))))))))(re.union (str.to_re (str.++ "f" (str.++ "i" (str.++ "l" (str.++ "e" ""))))) (str.to_re (str.++ "n" (str.++ "o" (str.++ "t" (str.++ "e" (str.++ "s" ""))))))))))))) (str.to_re (str.++ ":" (str.++ "/" (str.++ "/" ""))))))(re.++ (re.opt (re.++ (re.++ (re.range "a" "z") (re.* (re.union (re.range "!" "!")(re.union (re.range "$" ".")(re.union (re.range "0" "9")(re.union (re.range ";" ";")(re.union (re.range "=" "=")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "~" "~")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))))))))(re.++ (re.range ":" ":")(re.++ (re.opt (re.* (re.union (re.range "\u{00}" "\u{09}") (re.range "\u{0b}" "\u{ff}")))) (re.range "@" "@")))))(re.++ (re.opt (re.++ (re.++ (re.* (re.++ (re.union (re.range "0" "9") (re.range "a" "z"))(re.++ (re.* (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))(re.++ (re.* (re.union (re.range "0" "9") (re.range "a" "z"))) (re.range "." "."))))) (re.union (re.++ (re.union (re.range "0" "9") (re.range "a" "z"))(re.++ (re.* (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))(re.++ (re.* (re.union (re.range "0" "9") (re.range "a" "z"))) (re.opt (re.++ (re.range "." ".") (re.+ (re.union (re.range "0" "9") (re.range "a" "z")))))))) (re.++ ((_ re.loop 3 3) (re.++ (re.union (re.++ (str.to_re (str.++ "2" (str.++ "5" ""))) (re.range "0" "5"))(re.union (re.++ (re.range "2" "2")(re.++ (re.range "0" "4") (re.range "0" "9"))) (re.++ (re.opt (re.range "0" "1"))(re.++ (re.range "0" "9") (re.opt (re.range "0" "9")))))) (re.range "." "."))) (re.union (re.++ (str.to_re (str.++ "2" (str.++ "5" ""))) (re.range "0" "5"))(re.union (re.++ (re.range "2" "2")(re.++ (re.range "0" "4") (re.range "0" "9"))) (re.++ (re.opt (re.range "0" "1"))(re.++ (re.range "0" "9") (re.opt (re.range "0" "9"))))))))) (re.opt (re.++ (re.range ":" ":") (re.+ (re.range "0" "9"))))))(re.++ (re.opt (re.++ (re.++ (re.* (re.++ (re.range "/" "/") (re.+ (re.union (re.union (re.range "!" "!")(re.union (re.range "$" "$")(re.union (re.range "(" ")")(re.union (re.range "+" "+")(re.union (re.range "-" ".")(re.union (re.range "0" "9")(re.union (re.range ";" ";")(re.union (re.range "=" "=")(re.union (re.range "A" "[")(re.union (re.range "]" "~")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))))))) (re.++ (re.range "%" "%")(re.++ (re.range "0" "9") (re.range "0" "9")))))))(re.++ (re.range "/" "/") (re.* (re.union (re.union (re.range "!" "!")(re.union (re.range "$" "$")(re.union (re.range "(" ")")(re.union (re.range "+" "+")(re.union (re.range "-" ".")(re.union (re.range "0" "9")(re.union (re.range ";" ";")(re.union (re.range "=" "=")(re.union (re.range "A" "[")(re.union (re.range "]" "~")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))))))) (re.++ (re.range "%" "%")(re.++ (re.range "0" "9") (re.range "0" "9")))))))(re.++ (re.opt (re.++ (re.range "?" "?") (re.+ (re.union (re.range "\u{00}" "\u{22}") (re.range "$" "\u{ff}"))))) (re.opt (re.++ (re.range "#" "#")(re.++ (re.union (re.range "0" "9") (re.range "a" "z")) (re.* (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))))))))) (str.to_re ""))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "8" (str.++ "8" "")))

(define-fun Witness2 () String (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "8" (str.++ "3" (str.++ "2" (str.++ "." (str.++ "6" (str.++ "3" ""))))))))))

(assert (= regexA (re.union (re.++ (str.to_re "")(re.++ (re.* (re.range "0" "9"))(re.++ (re.+ (re.range "1" "9"))(re.++ (re.* (re.range "0" "9"))(re.++ (re.range "." ".")(re.++ (re.* (re.range "0" "9")) (str.to_re "")))))))(re.union (re.++ (str.to_re "")(re.++ (re.* (re.range "0" "9"))(re.++ (re.range "." ".")(re.++ (re.* (re.range "0" "9"))(re.++ (re.+ (re.range "1" "9"))(re.++ (re.* (re.range "0" "9")) (str.to_re ""))))))) (re.++ (str.to_re "")(re.++ (re.* (re.range "0" "9"))(re.++ (re.+ (re.range "1" "9"))(re.++ (re.* (re.range "0" "9")) (str.to_re "")))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "1" (str.++ "6" (str.++ "9" (str.++ "." (str.++ "1" (str.++ "8" (str.++ "0" (str.++ "." (str.++ "1" (str.++ "1" (str.++ "1" (str.++ "." (str.++ "0" ""))))))))))))))

(define-fun Witness2 () String (str.++ "2" (str.++ "1" (str.++ "4" (str.++ "." (str.++ "2" (str.++ "3" (str.++ "." (str.++ "2" (str.++ "1" (str.++ "4" (str.++ "." (str.++ "9" "")))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ ((_ re.loop 3 3) (re.++ (re.union (re.++ (re.range "2" "2")(re.++ (re.range "0" "5") (re.range "0" "5")))(re.union (re.++ (re.range "1" "1")(re.++ (re.range "0" "9") (re.range "0" "9")))(re.union (re.++ (re.range "0" "9") (re.range "0" "9")) (re.range "0" "9")))) (re.range "." ".")))(re.++ (re.union (re.++ (re.range "2" "2")(re.++ (re.range "0" "5") (re.range "0" "5")))(re.union (re.++ (re.range "1" "1")(re.++ (re.range "0" "9") (re.range "0" "9")))(re.union (re.++ (re.range "0" "9") (re.range "0" "9")) (re.range "0" "9")))) (str.to_re ""))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "9" (str.++ "8" (str.++ "|" (str.++ "9" (str.++ "7" ""))))))

(define-fun Witness2 () String (str.++ "9" (str.++ "|" (str.++ "0" (str.++ "8" (str.++ "0" ""))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.range "9" "9")(re.++ (re.union (re.range "7" "8") (re.range "|" "|"))(re.++ (re.union (re.range "0" "1") (re.range "|" "|"))(re.++ ((_ re.loop 2 2) (re.range "0" "9")) (str.to_re ""))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String "")

(define-fun Witness2 () String (str.++ "9" ""))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.* (re.range "0" "9")) (str.to_re "")))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "+" (str.++ "x" (str.++ "y" (str.++ "@" (str.++ "8" (str.++ "1" (str.++ "-" (str.++ "e" (str.++ "y" (str.++ "y" "")))))))))))

(define-fun Witness2 () String (str.++ "3" (str.++ "a" (str.++ "0" (str.++ "@" (str.++ "8" (str.++ "f" (str.++ "-" (str.++ "m" (str.++ "." (str.++ "a" (str.++ "." (str.++ "q" (str.++ "6" (str.++ "-" (str.++ "m" (str.++ "s" "")))))))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.opt (re.range "+" "+"))(re.++ (re.union (re.range "0" "9") (re.range "a" "z"))(re.++ (re.* (re.++ (re.opt (re.union (re.union (re.range "+" "+") (re.range "-" ".")) (re.+ (re.range "_" "_")))) (re.+ (re.union (re.range "0" "9") (re.range "a" "z")))))(re.++ (re.range "@" "@")(re.++ (re.+ (re.++ (re.+ (re.union (re.range "0" "9") (re.range "a" "z"))) (re.range "-" ".")))(re.++ ((_ re.loop 2 6) (re.range "a" "z")) (str.to_re ""))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String "")

(define-fun Witness2 () String (str.++ "9" (str.++ "3" (str.++ "0" (str.++ "8" (str.++ "0" (str.++ "2" (str.++ "2" (str.++ "9" "")))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.opt (re.union (re.++ ((_ re.loop 4 4) (re.range "0" "9"))(re.++ (re.union (re.++ (re.range "0" "0") (re.union (re.range "1" "1")(re.union (re.range "3" "3")(re.union (re.range "5" "5") (re.range "7" "8")))))(re.union (str.to_re (str.++ "1" (str.++ "0" ""))) (str.to_re (str.++ "1" (str.++ "2" ""))))) (re.union (re.++ (re.range "0" "0") (re.range "1" "9"))(re.union (re.++ (re.range "1" "2") (re.range "0" "9")) (re.++ (re.range "3" "3") (re.range "0" "1"))))))(re.union (re.++ ((_ re.loop 4 4) (re.range "0" "9"))(re.++ (re.union (re.++ (re.range "0" "0") (re.union (re.range "4" "4")(re.union (re.range "6" "6") (re.range "9" "9")))) (str.to_re (str.++ "1" (str.++ "1" "")))) (re.union (re.++ (re.range "0" "0") (re.range "1" "9"))(re.union (re.++ (re.range "1" "2") (re.range "0" "9")) (str.to_re (str.++ "3" (str.++ "0" "")))))))(re.union (re.++ ((_ re.loop 4 4) (re.range "0" "9"))(re.++ (str.to_re (str.++ "0" (str.++ "2" ""))) (re.union (re.++ (re.range "0" "0") (re.range "1" "9"))(re.union (re.++ (re.range "1" "1") (re.range "0" "9")) (re.++ (re.range "2" "2") (re.range "0" "8"))))))(re.union (re.++ (re.++ (re.union (re.range "0" "0")(re.union (re.range "2" "2")(re.union (re.range "4" "4")(re.union (re.range "6" "6") (re.range "8" "8")))))(re.++ (re.union (re.range "0" "0")(re.union (re.range "4" "4") (re.range "8" "8"))) (str.to_re (str.++ "0" (str.++ "0" "")))))(re.++ (str.to_re (str.++ "0" (str.++ "2" ""))) (str.to_re (str.++ "2" (str.++ "9" "")))))(re.union (re.++ (re.++ (re.union (re.range "1" "1")(re.union (re.range "3" "3")(re.union (re.range "5" "5")(re.union (re.range "7" "7") (re.range "9" "9")))))(re.++ (re.union (re.range "2" "2") (re.range "6" "6")) (str.to_re (str.++ "0" (str.++ "0" "")))))(re.++ (re.range " " " ")(re.++ (str.to_re (str.++ "0" (str.++ "2" ""))) (str.to_re (str.++ "2" (str.++ "9" ""))))))(re.union (re.++ (re.++ (re.range "0" "9")(re.++ (re.range "0" "9")(re.++ (re.range "0" "0") (re.union (re.range "4" "4") (re.range "8" "8")))))(re.++ (str.to_re (str.++ "0" (str.++ "2" ""))) (str.to_re (str.++ "2" (str.++ "9" "")))))(re.union (re.++ (re.++ (re.range "0" "9")(re.++ (re.range "0" "9")(re.++ (re.union (re.range "2" "2")(re.union (re.range "4" "4")(re.union (re.range "6" "6") (re.range "8" "8")))) (re.union (re.range "0" "0")(re.union (re.range "4" "4") (re.range "8" "8"))))))(re.++ (str.to_re (str.++ "0" (str.++ "2" ""))) (str.to_re (str.++ "2" (str.++ "9" "")))))(re.union (re.++ (re.++ (re.range "0" "9")(re.++ (re.range "0" "9")(re.++ (re.union (re.range "1" "1")(re.union (re.range "3" "3")(re.union (re.range "5" "5")(re.union (re.range "7" "7") (re.range "9" "9"))))) (re.union (re.range "2" "2") (re.range "6" "6")))))(re.++ (str.to_re (str.++ "0" (str.++ "2" ""))) (str.to_re (str.++ "2" (str.++ "9" "")))))(re.union (str.to_re (str.++ "0" (str.++ "0" (str.++ "0" (str.++ "0" (str.++ "0" (str.++ "0" (str.++ "0" (str.++ "0" "")))))))))(re.union (str.to_re (str.++ "8" (str.++ "8" (str.++ "8" (str.++ "8" (str.++ "8" (str.++ "8" (str.++ "8" (str.++ "8" ""))))))))) (str.to_re (str.++ "9" (str.++ "9" (str.++ "9" (str.++ "9" (str.++ "9" (str.++ "9" (str.++ "9" (str.++ "9" "")))))))))))))))))))) (str.to_re "")))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "\u{5c}" (str.++ "}" (str.++ "\u{5c}" ""))))

(define-fun Witness2 () String (str.++ "\u{5c}" (str.++ "\u{e7}" (str.++ "3" (str.++ "\u{5c}" "")))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.range "\u{5c}" "\u{5c}")(re.++ (re.* (re.++ (re.+ (re.union (re.range "\u{00}" "[") (re.range "]" "\u{ff}"))) (re.range "\u{5c}" "\u{5c}")))(re.++ (re.opt (re.union (re.range "\u{00}" "%")(re.union (re.range "'" ")")(re.union (re.range "+" ".")(re.union (re.range "0" "9")(re.union (re.range "<" ">")(re.union (re.range "@" "f")(re.union (re.range "h" "k")(re.union (re.range "m" "n")(re.union (re.range "p" "p")(re.union (re.range "r" "s")(re.union (re.range "v" "{") (re.range "}" "\u{ff}"))))))))))))) (str.to_re "")))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "8" (str.++ "," (str.++ "9" (str.++ "8" (str.++ "3" ""))))))

(define-fun Witness2 () String (str.++ "4" ""))

(assert (= regexA (re.union (re.++ (str.to_re "")(re.++ ((_ re.loop 1 8) (re.range "0" "9")) (str.to_re "")))(re.union (re.++ (str.to_re "")(re.++ ((_ re.loop 1 3) (re.range "0" "9"))(re.++ (re.range "," ",")(re.++ ((_ re.loop 3 3) (re.range "0" "9")) (str.to_re ""))))) (re.++ (str.to_re "")(re.++ ((_ re.loop 1 2) (re.range "0" "9"))(re.++ (re.range "," ",")(re.++ ((_ re.loop 3 3) (re.range "0" "9"))(re.++ (re.range "," ",")(re.++ ((_ re.loop 3 3) (re.range "0" "9")) (str.to_re "")))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "0" (str.++ "/" (str.++ "9" (str.++ "/" (str.++ "1" (str.++ "9" (str.++ "9" (str.++ "5" "")))))))))

(define-fun Witness2 () String (str.++ "8" (str.++ "/" (str.++ "1" (str.++ "2" (str.++ "/" (str.++ "1" (str.++ "9" (str.++ "9" (str.++ "5" ""))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.opt (re.union (re.range "," ",") (re.range "0" "1")))(re.++ (re.range "0" "9")(re.++ (re.range "/" "/")(re.++ (re.union (re.++ (re.opt (re.range "0" "2")) (re.range "0" "9")) (re.++ (re.range "3" "3") (re.union (re.range "," ",") (re.range "0" "1"))))(re.++ (re.range "/" "/")(re.++ (re.union (re.++ (str.to_re (str.++ "1" (str.++ "9" (str.++ "9" "")))) (re.range "0" "9")) (re.++ (re.range "2" "9") ((_ re.loop 3 3) (re.range "0" "9")))) (str.to_re ""))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "a" (str.++ "\u{d8}" "")))

(define-fun Witness2 () String (str.++ "\u{e8}" (str.++ "E" (str.++ "." (str.++ "7" (str.++ "\u{ba}" (str.++ "y" (str.++ "Y" (str.++ "\u{fb}" (str.++ "\u{ba}" (str.++ "." (str.++ "5" ""))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.opt (re.++ (re.++ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))) (re.* (re.union (re.range "-" ".")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))))) (re.range "." ".")))(re.++ (re.++ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))) (re.+ (re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))))(re.++ (re.opt (re.++ (re.range "." ".") (re.++ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))) (re.* (re.union (re.range "." ".")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))))))) (str.to_re "")))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "1" (str.++ "0" (str.++ ":" (str.++ "1" (str.++ "5" ""))))))

(define-fun Witness2 () String (str.++ "0" (str.++ ":" (str.++ "5" (str.++ "0" "")))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.union (re.++ (re.opt (re.range "0" "1")) (re.range "0" "9")) (re.++ (re.range "2" "2") (re.range "0" "3")))(re.++ (re.range ":" ":")(re.++ (re.++ (re.range "0" "5") (re.range "0" "9")) (str.to_re "")))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "0" (str.++ "2" (str.++ ":" (str.++ "5" (str.++ "9" ""))))))

(define-fun Witness2 () String (str.++ "1" (str.++ "2" (str.++ ":" (str.++ "5" (str.++ "8" ""))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.++ (re.union (re.++ (re.opt (re.range "0" "0")) (re.range "1" "9")) (re.++ (re.range "1" "2") (re.range "0" "3")))(re.++ (re.range ":" ":") (re.++ (re.range "0" "5") (re.range "0" "9")))) (str.to_re "")))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "z" (str.++ ":" (str.++ "\u{c9}" (str.++ "-" "")))))

(define-fun Witness2 () String (str.++ "h" (str.++ ":" "")))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.++ (re.range "a" "z") (re.* (re.union (re.range "-" ".")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))))(re.++ (re.range ":" ":")(re.++ (re.* (re.union (re.range "-" ".")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))) (str.to_re "")))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "l" (str.++ "8" (str.++ "\u{aa}" (str.++ ":" (str.++ "/" (str.++ "/" (str.++ "\u{fb}" (str.++ "8" (str.++ "8" (str.++ "." (str.++ "9" ""))))))))))))

(define-fun Witness2 () String (str.++ "O" (str.++ "s" (str.++ ":" (str.++ "/" (str.++ "/" (str.++ "0" (str.++ "." (str.++ "P" (str.++ "g" (str.++ "4" (str.++ "5" (str.++ "8" (str.++ "\u{cb}" ""))))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))(re.++ (re.opt (re.range "s" "s"))(re.++ (str.to_re (str.++ ":" (str.++ "/" (str.++ "/" ""))))(re.++ (re.opt (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))))(re.++ (re.opt (re.range "." "."))(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))(re.++ (re.range "." ".")(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))) (str.to_re ""))))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "8" (str.++ "-" (str.++ "(" (str.++ "0" (str.++ "4" (str.++ "4" (str.++ ")" (str.++ "7" (str.++ "8" (str.++ "0" (str.++ "3" (str.++ "2" (str.++ "8" (str.++ "4" "")))))))))))))))

(define-fun Witness2 () String (str.++ "8" (str.++ "-" (str.++ "-" (str.++ "4" (str.++ "7" (str.++ "8" (str.++ "8" (str.++ "9" (str.++ "1" (str.++ "0" "")))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.opt (re.++ (re.union (re.range "8" "8") (str.to_re (str.++ "+" (str.++ "3" (str.++ "8" ""))))) (re.opt (re.range "-" "-"))))(re.++ (re.opt (re.++ (re.opt (re.range "(" "("))(re.++ (str.to_re (str.++ "0" (str.++ "4" (str.++ "4" "")))) (re.opt (re.range ")" ")")))))(re.++ (re.opt (re.range "-" "-"))(re.++ ((_ re.loop 3 3) (re.range "0" "9"))(re.++ (re.opt (re.range "-" "-"))(re.++ ((_ re.loop 2 2) (re.range "0" "9"))(re.++ (re.opt (re.range "-" "-"))(re.++ ((_ re.loop 2 2) (re.range "0" "9")) (str.to_re ""))))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "/" (str.++ "w" "")))

(define-fun Witness2 () String (str.++ "/" (str.++ "W" (str.++ "/" (str.++ "W" "")))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.+ (re.union (str.to_re (str.++ "/" (str.++ "w" "")))(re.union (str.to_re (str.++ "/" (str.++ "W" ""))) (re.union (re.range "\u{00}" "#")(re.union (re.range "'" "*")(re.union (re.range "," ";")(re.union (re.range "=" "=")(re.union (re.range "@" "z")(re.union (re.range "|" "|") (re.range "~" "\u{ff}")))))))))) (str.to_re "")))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "9" (str.++ "6" (str.++ "8" (str.++ "7" (str.++ "8" (str.++ "8" (str.++ "3" (str.++ "4" (str.++ "5" (str.++ "7" "")))))))))))

(define-fun Witness2 () String (str.++ "4" (str.++ "9" (str.++ "9" (str.++ "1" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "8" (str.++ "1" (str.++ "1" "")))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.opt (re.range "0" "0"))(re.++ (re.range "1" "9")(re.++ ((_ re.loop 2 2) (re.range "0" "9"))(re.++ (re.opt (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (re.opt (re.range "-" "-"))(re.++ (re.opt (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (re.range "1" "9")(re.++ ((_ re.loop 6 6) (re.range "0" "9")) (str.to_re ""))))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "8" (str.++ "5" (str.++ "9" (str.++ "9" (str.++ "9" (str.++ "-" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "3" "")))))))))))

(define-fun Witness2 () String (str.++ "8" (str.++ "2" (str.++ "8" (str.++ "9" (str.++ "8" (str.++ "\u{a0}" (str.++ "9" (str.++ "8" (str.++ "8" (str.++ "8" "")))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ ((_ re.loop 5 5) (re.range "0" "9"))(re.++ (re.opt (re.++ (re.opt (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "-" "-")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))) ((_ re.loop 4 4) (re.range "0" "9")))) (str.to_re ""))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "4" (str.++ "8" (str.++ "8" (str.++ "6" (str.++ "6" (str.++ "-" (str.++ "2" (str.++ "0" (str.++ "0" (str.++ "8" "")))))))))))

(define-fun Witness2 () String (str.++ "3" (str.++ "3" (str.++ "0" (str.++ "9" (str.++ "8" ""))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ ((_ re.loop 5 5) (re.range "0" "9"))(re.++ (re.opt (re.++ (re.range "-" "-") ((_ re.loop 4 4) (re.range "0" "9")))) (str.to_re ""))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "$" (str.++ "1" (str.++ "," (str.++ "9" (str.++ "8" (str.++ "9" "")))))))

(define-fun Witness2 () String (str.++ "$" (str.++ "8" (str.++ "." (str.++ "8" "")))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.opt (re.range "$" "$"))(re.++ (re.union ((_ re.loop 1 5) (re.range "0" "9")) (re.++ ((_ re.loop 1 3) (re.range "0" "9")) (re.* (re.++ (re.range "," ",") ((_ re.loop 3 3) (re.range "0" "9"))))))(re.++ (re.opt (re.++ (re.range "." ".") ((_ re.loop 1 2) (re.range "0" "9")))) (str.to_re "")))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "1" (str.++ "1" (str.++ "|" (str.++ "3" (str.++ "0" (str.++ "/" (str.++ "9" (str.++ "9" (str.++ "8" ""))))))))))

(define-fun Witness2 () String (str.++ "1" (str.++ "1" (str.++ "|" (str.++ "2" (str.++ "-" (str.++ "6" (str.++ "8" (str.++ "2" (str.++ "2" ""))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.union (re.++ (re.union (re.++ (re.opt (re.range "0" "0")) (re.union (re.range "1" "1")(re.union (re.range "3" "3")(re.union (re.range "5" "5") (re.range "7" "8"))))) (re.++ (re.range "1" "1") (re.union (re.range "0" "0") (re.range "2" "2"))))(re.++ (re.opt (re.union (re.range "-" "-")(re.union (re.range "/" "/") (re.range "|" "|")))) (re.union (re.union (re.++ (re.opt (re.range "0" "0")) (re.range "1" "9")) (re.++ (re.range "0" "2") (re.range "0" "9"))) (re.++ (re.range "3" "3") (re.range "0" "1")))))(re.union (re.++ (re.union (re.++ (re.opt (re.range "0" "0")) (re.union (re.range "4" "4")(re.union (re.range "6" "6") (re.range "9" "9")))) (str.to_re (str.++ "1" (str.++ "1" ""))))(re.++ (re.opt (re.union (re.range "-" "-")(re.union (re.range "/" "/") (re.range "|" "|")))) (re.union (re.union (re.++ (re.opt (re.range "0" "0")) (re.range "1" "9")) (re.++ (re.range "0" "2") (re.range "0" "9"))) (str.to_re (str.++ "3" (str.++ "0" "")))))) (re.++ (re.opt (re.range "0" "0"))(re.++ (re.range "2" "2")(re.++ (re.opt (re.union (re.range "-" "-") (re.range "/" "/"))) (re.union (re.++ (re.opt (re.range "0" "0")) (re.range "1" "9")) (re.++ (re.range "0" "2") (re.range "0" "9"))))))))(re.++ (re.opt (re.union (re.range "-" "-") (re.range "/" "/")))(re.++ ((_ re.loop 2 4) (re.range "0" "9")) (str.to_re "")))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "1" (str.++ "2" (str.++ "9" (str.++ "-" (str.++ "8" (str.++ "9" (str.++ "6" (str.++ "8" "")))))))))

(define-fun Witness2 () String (str.++ "7" (str.++ "8" (str.++ "6" (str.++ " " (str.++ "2" (str.++ "2" (str.++ "8" (str.++ "9" "")))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.opt (re.union (re.++ (re.range "(" "(")(re.++ ((_ re.loop 3 3) (re.range "0" "9"))(re.++ (re.range ")" ")") (re.opt (re.union (re.range " " " ") (re.range "-" "-")))))) (re.++ ((_ re.loop 3 3) (re.range "0" "9")) (re.union (re.range " " " ") (re.range "-" "-")))))(re.++ ((_ re.loop 3 3) (re.range "0" "9"))(re.++ (re.union (re.range " " " ") (re.range "-" "-"))(re.++ ((_ re.loop 4 4) (re.range "0" "9")) (str.to_re ""))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "+" (str.++ "9" (str.++ "0" (str.++ "(" (str.++ "5" (str.++ "9" (str.++ ")" (str.++ "9" (str.++ "1" (str.++ "4" (str.++ "1" (str.++ "8" (str.++ "6" (str.++ "#" (str.++ "0" (str.++ "8" (str.++ "9" ""))))))))))))))))))

(define-fun Witness2 () String (str.++ "+" (str.++ "9" (str.++ "6" (str.++ "(" (str.++ "8" (str.++ "8" (str.++ ")" (str.++ "0" (str.++ "9" (str.++ "8" (str.++ "9" (str.++ "8" (str.++ "6" ""))))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.range "+" "+")(re.++ ((_ re.loop 1 2) (re.range "0" "9"))(re.++ (re.range "(" "(")(re.++ ((_ re.loop 2 3) (re.range "0" "9"))(re.++ (re.range ")" ")")(re.++ ((_ re.loop 6 8) (re.range "0" "9"))(re.++ (re.opt (re.++ (re.range "#" "#") ((_ re.loop 1 10) (re.range "0" "9")))) (str.to_re "")))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "1" (str.++ "0" (str.++ " " (str.++ "O" (str.++ "c" (str.++ "t" (str.++ " " (str.++ "2" (str.++ "9" ""))))))))))

(define-fun Witness2 () String (str.++ "0" (str.++ "1" (str.++ " " (str.++ "J" (str.++ "u" (str.++ "n" (str.++ " " (str.++ "2" (str.++ "8" ""))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.range "0" "3")(re.++ (re.range "0" "9")(re.++ (re.range " " " ")(re.++ (re.union (str.to_re (str.++ "J" (str.++ "a" (str.++ "n" ""))))(re.union (str.to_re (str.++ "F" (str.++ "e" (str.++ "b" ""))))(re.union (str.to_re (str.++ "M" (str.++ "a" (str.++ "r" ""))))(re.union (str.to_re (str.++ "A" (str.++ "p" (str.++ "r" ""))))(re.union (str.to_re (str.++ "M" (str.++ "a" (str.++ "y" ""))))(re.union (str.to_re (str.++ "J" (str.++ "u" (str.++ "n" ""))))(re.union (str.to_re (str.++ "J" (str.++ "u" (str.++ "l" ""))))(re.union (str.to_re (str.++ "A" (str.++ "u" (str.++ "g" ""))))(re.union (str.to_re (str.++ "S" (str.++ "e" (str.++ "p" ""))))(re.union (str.to_re (str.++ "O" (str.++ "c" (str.++ "t" ""))))(re.union (str.to_re (str.++ "N" (str.++ "o" (str.++ "v" ""))))(re.union (str.to_re (str.++ "D" (str.++ "e" (str.++ "c" ""))))(re.union (str.to_re (str.++ "J" (str.++ "A" (str.++ "N" ""))))(re.union (str.to_re (str.++ "F" (str.++ "E" (str.++ "B" ""))))(re.union (str.to_re (str.++ "M" (str.++ "A" (str.++ "R" ""))))(re.union (str.to_re (str.++ "A" (str.++ "P" (str.++ "R" ""))))(re.union (str.to_re (str.++ "M" (str.++ "A" (str.++ "Y" ""))))(re.union (str.to_re (str.++ "J" (str.++ "U" (str.++ "N" ""))))(re.union (str.to_re (str.++ "J" (str.++ "U" (str.++ "L" ""))))(re.union (str.to_re (str.++ "A" (str.++ "U" (str.++ "G" ""))))(re.union (str.to_re (str.++ "S" (str.++ "E" (str.++ "P" ""))))(re.union (str.to_re (str.++ "O" (str.++ "C" (str.++ "T" ""))))(re.union (str.to_re (str.++ "N" (str.++ "O" (str.++ "V" ""))))(re.union (str.to_re (str.++ "D" (str.++ "E" (str.++ "C" ""))))(re.union (str.to_re (str.++ "j" (str.++ "a" (str.++ "n" ""))))(re.union (str.to_re (str.++ "f" (str.++ "e" (str.++ "b" ""))))(re.union (str.to_re (str.++ "m" (str.++ "a" (str.++ "r" ""))))(re.union (str.to_re (str.++ "a" (str.++ "p" (str.++ "r" ""))))(re.union (str.to_re (str.++ "m" (str.++ "a" (str.++ "y" ""))))(re.union (str.to_re (str.++ "j" (str.++ "u" (str.++ "n" ""))))(re.union (str.to_re (str.++ "j" (str.++ "u" (str.++ "l" ""))))(re.union (str.to_re (str.++ "a" (str.++ "u" (str.++ "g" ""))))(re.union (str.to_re (str.++ "s" (str.++ "e" (str.++ "p" ""))))(re.union (str.to_re (str.++ "o" (str.++ "c" (str.++ "t" ""))))(re.union (str.to_re (str.++ "n" (str.++ "o" (str.++ "v" "")))) (str.to_re (str.++ "d" (str.++ "e" (str.++ "c" "")))))))))))))))))))))))))))))))))))))))(re.++ (re.range " " " ")(re.++ ((_ re.loop 2 2) (re.range "0" "9")) (str.to_re ""))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "I" (str.++ "-" (str.++ "9" (str.++ "6" (str.++ "8" (str.++ "9" "")))))))

(define-fun Witness2 () String (str.++ "0" (str.++ "0" (str.++ "8" (str.++ "8" "")))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.opt (re.union (str.to_re (str.++ "V" (str.++ "-" ""))) (str.to_re (str.++ "I" (str.++ "-" "")))))(re.++ ((_ re.loop 4 4) (re.range "0" "9")) (str.to_re ""))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "\u{5c}" (str.++ "\u{5c}" (str.++ "x" (str.++ "\u{5c}" (str.++ "-" (str.++ "\u{b5}" (str.++ "\u{aa}" (str.++ "\u{cf}" "")))))))))

(define-fun Witness2 () String (str.++ "\u{5c}" (str.++ "\u{5c}" (str.++ "\u{aa}" (str.++ "\u{c3}" (str.++ "\u{5c}" (str.++ "h" (str.++ "\u{ee}" (str.++ "_" (str.++ "-" (str.++ "1" (str.++ "$" ""))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ ((_ re.loop 2 2) (re.range "\u{5c}" "\u{5c}"))(re.++ (re.+ (re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))))(re.++ (re.range "\u{5c}" "\u{5c}") (re.union (re.++ (re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))(re.++ (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{85}" "\u{85}")(re.union (re.range "\u{a0}" "\u{a0}")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))))))))(re.++ (re.+ (re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))))(re.++ (re.opt (re.range "$" "$")) (str.to_re ""))))) (re.++ (re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))(re.++ (re.opt (re.range "$" "$")) (str.to_re ""))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "," (str.++ "9" (str.++ "5" (str.++ "6" (str.++ "3" ""))))))

(define-fun Witness2 () String (str.++ "," (str.++ "8" "")))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.+ (re.* (re.range "0" "9")))(re.++ (re.+ (re.++ (re.range "," ",") (re.+ (re.range "0" "9")))) (str.to_re ""))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "i" (str.++ "9" (str.++ "9" (str.++ "9" (str.++ "." (str.++ "9" (str.++ "@" (str.++ "q" (str.++ "." (str.++ "9" (str.++ "." (str.++ "j" (str.++ "v" (str.++ "n" "")))))))))))))))

(define-fun Witness2 () String (str.++ "9" (str.++ "@" (str.++ "8" (str.++ "8" (str.++ "9" (str.++ "9" (str.++ "m" (str.++ "8" (str.++ "." (str.++ "a" (str.++ "N" (str.++ "w" (str.++ "r" ""))))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))(re.++ (re.* (re.++ (re.opt (re.union (re.range "-" ".") (re.range "_" "_"))) (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z"))))))(re.++ (re.range "@" "@")(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z"))))(re.++ (re.* (re.++ (re.opt (re.range "-" ".")) (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z"))))))(re.++ (re.range "." ".")(re.++ (re.++ ((_ re.loop 2 2) (re.union (re.range "A" "Z") (re.range "a" "z"))) (re.* (re.union (re.range "A" "Z") (re.range "a" "z")))) (str.to_re "")))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "y" (str.++ "z" (str.++ "y" (str.++ "-" (str.++ "9" (str.++ "H" (str.++ "V" (str.++ "y" "")))))))))

(define-fun Witness2 () String (str.++ "1" (str.++ "8" (str.++ "." (str.++ "(" (str.++ "3" (str.++ "5" (str.++ "5" (str.++ "V" (str.++ "W" (str.++ "8" (str.++ "N" (str.++ "o" (str.++ " " (str.++ "o" "")))))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.opt (re.++ (re.opt (re.++ (re.opt (re.range "+" "+")) (re.++ ((_ re.loop 1 3) (re.range "0" "9")) (re.union (re.+ (re.range " " " ")) (re.range "-" ".")))))(re.++ (re.opt (re.range "(" "("))(re.++ ((_ re.loop 3 3) (re.range "0" "9"))(re.++ (re.opt (re.union (re.range ")" ")")(re.union (re.range "-" "-") (re.range "/" "/")))) (re.* (re.range " " " ")))))))(re.++ (re.++ (re.union (re.range "2" "9")(re.union (re.range "A" "Z") (re.range "a" "z"))) (re.++ ((_ re.loop 6 6) (re.union (re.range " " " ")(re.union (re.range "-" ".")(re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))))) (re.* (re.union (re.range " " " ")(re.union (re.range "-" ".")(re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z"))))))))(re.++ (re.opt (re.++ ((_ re.loop 1 2) (re.union (re.+ (re.range " " " "))(re.union (re.union (re.range "X" "X") (re.range "x" "x")) (re.++ (str.to_re (str.++ "i" (str.++ ":" (str.++ "e" (str.++ "x" (str.++ "t" "")))))) (re.opt (re.range "." ".")))))) ((_ re.loop 1 5) (re.range "0" "9")))) (str.to_re "")))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "8" (str.++ "9" "")))

(define-fun Witness2 () String (str.++ "9" (str.++ "6" "")))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.+ (re.range "0" "9"))(re.++ (re.opt (re.++ (re.range "." ".") ((_ re.loop 2 2) (re.range "0" "9")))) (str.to_re ""))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "z" (str.++ "Y" (str.++ "@" (str.++ "9" (str.++ "_" (str.++ "t" (str.++ "7" (str.++ "_" (str.++ "P" (str.++ "." (str.++ "9" (str.++ "2" (str.++ "_" (str.++ "8" (str.++ "." (str.++ "8" (str.++ "X" (str.++ "Z" (str.++ "z" (str.++ "2" "")))))))))))))))))))))

(define-fun Witness2 () String (str.++ "v" (str.++ "@" (str.++ "4" (str.++ "8" (str.++ "." (str.++ "8" (str.++ "3" ""))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.+ (re.++ (re.* (re.++ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z"))) (re.opt (re.union (re.range "+" "+")(re.union (re.range "-" ".") (re.range "_" "_")))))) (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))))(re.++ (re.range "@" "@")(re.++ (re.+ (re.++ ((_ re.loop 0 62) (re.++ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z"))) (re.opt (re.union (re.range "-" ".") (re.range "_" "_"))))) (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))))(re.++ (re.range "." ".")(re.++ ((_ re.loop 2 6) (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))) (str.to_re "")))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "0" (str.++ "6" (str.++ "8" (str.++ "8" "")))))

(define-fun Witness2 () String (str.++ "0" (str.++ "9" (str.++ "0" (str.++ "3" "")))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.union (re.++ (re.range "1" "9") ((_ re.loop 3 3) (re.range "0" "9")))(re.union (re.++ (re.range "0" "0")(re.++ (re.range "1" "9") ((_ re.loop 2 2) (re.range "0" "9"))))(re.union (re.++ (str.to_re (str.++ "0" (str.++ "0" "")))(re.++ (re.range "1" "9") (re.range "0" "9"))) (re.++ (str.to_re (str.++ "0" (str.++ "0" (str.++ "0" "")))) (re.range "1" "9"))))) (str.to_re "")))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "h" (str.++ "t" (str.++ "t" (str.++ "p" (str.++ ":" (str.++ "/" (str.++ "/" (str.++ "-" (str.++ "." (str.++ "T" (str.++ "-" (str.++ "L" (str.++ "-" (str.++ "." (str.++ "U" (str.++ "/" (str.++ "." (str.++ "-" "")))))))))))))))))))

(define-fun Witness2 () String (str.++ "h" (str.++ "t" (str.++ "t" (str.++ "p" (str.++ ":" (str.++ "/" (str.++ "/" (str.++ "F" (str.++ "c" (str.++ "i" (str.++ "R" (str.++ "3" (str.++ "." (str.++ "z" (str.++ "." (str.++ "G" (str.++ "q" (str.++ "." (str.++ "N" (str.++ "/" (str.++ "(" (str.++ "/" (str.++ "." (str.++ "j" "")))))))))))))))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (str.to_re (str.++ "h" (str.++ "t" (str.++ "t" (str.++ "p" (str.++ ":" (str.++ "/" (str.++ "/" ""))))))))(re.++ (re.+ (re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_") (re.range "a" "z"))))))(re.++ (re.+ (re.++ (re.range "." ".") (re.+ (re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_") (re.range "a" "z"))))))))(re.++ (re.+ (re.++ (re.range "/" "/") (re.* (re.union (re.range "(" ")")(re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z") (re.range "~" "~"))))))))))(re.++ (re.* (re.++ (re.range "." ".") (re.+ (re.union (re.range "(" ")")(re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_") (re.range "a" "z"))))))))) (str.to_re "")))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String "")

(define-fun Witness2 () String "")

(assert (= regexA (re.union (re.++ (re.union (re.++ (re.range "0" "0") (re.range "1" "9"))(re.union (re.++ (re.range "1" "2") (re.range "0" "9")) (re.++ (re.range "3" "3") (re.range "0" "1"))))(re.++ (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))(re.++ (re.union (re.++ (re.range "J" "J") (re.union (str.to_re (str.++ "a" (str.++ "n" (str.++ "u" (str.++ "a" (str.++ "r" (str.++ "y" ""))))))) (str.to_re (str.++ "u" (str.++ "l" (str.++ "y" ""))))))(re.union (re.++ (str.to_re (str.++ "M" (str.++ "a" ""))) (re.union (str.to_re (str.++ "r" (str.++ "c" (str.++ "h" "")))) (re.range "y" "y")))(re.union (str.to_re (str.++ "A" (str.++ "u" (str.++ "g" (str.++ "u" (str.++ "s" (str.++ "t" ""))))))) (re.++ (re.union (str.to_re (str.++ "O" (str.++ "c" (str.++ "t" (str.++ "o" ""))))) (str.to_re (str.++ "D" (str.++ "e" (str.++ "c" (str.++ "e" (str.++ "m" ""))))))) (str.to_re (str.++ "b" (str.++ "e" (str.++ "r" ""))))))))(re.++ (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))(re.++ (re.range "1" "9") ((_ re.loop 3 3) (re.range "0" "9"))))))) (str.to_re ""))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "6" (str.++ "4" (str.++ "1" (str.++ "6" (str.++ "-" (str.++ "0" (str.++ "7" (str.++ "-" (str.++ "3" (str.++ "1" (str.++ " " (str.++ "2" (str.++ "3" (str.++ ":" (str.++ "3" (str.++ "8" (str.++ ":" (str.++ "4" (str.++ "5" ""))))))))))))))))))))

(define-fun Witness2 () String (str.++ "3" (str.++ "8" (str.++ "1" (str.++ "5" (str.++ "-" (str.++ "0" (str.++ "2" (str.++ "-" (str.++ "2" (str.++ "1" (str.++ " " (str.++ "2" (str.++ "2" (str.++ ":" (str.++ "4" (str.++ "5" (str.++ ":" (str.++ "5" (str.++ "9" ""))))))))))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.range "1" "9")(re.++ ((_ re.loop 3 3) (re.range "0" "9"))(re.++ (re.range "-" "-")(re.++ (re.union (re.++ (re.range "0" "0") (re.range "1" "9")) (re.++ (re.range "1" "1") (re.range "0" "2")))(re.++ (re.range "-" "-")(re.++ (re.union (re.++ (re.range "0" "2") (re.range "1" "9")) (re.++ (re.range "3" "3") (re.range "0" "1")))(re.++ (re.range " " " ")(re.++ (re.union (re.++ (re.range "0" "1") (re.range "0" "9")) (re.++ (re.range "2" "2") (re.range "0" "3")))(re.++ (re.range ":" ":")(re.++ (re.range "0" "5")(re.++ (re.range "0" "9")(re.++ (re.range ":" ":")(re.++ (re.range "0" "5")(re.++ (re.range "0" "9") (str.to_re ""))))))))))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "U" (str.++ "." (str.++ "\u{85}" ""))))

(define-fun Witness2 () String (str.++ "\u{dd}" (str.++ "H" (str.++ "-" (str.++ "\u{0b}" "")))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.+ (re.++ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))(re.++ (re.* (re.range "-" ".")) (re.opt (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))))) (str.to_re "")))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "u" (str.++ "8" (str.++ "F" (str.++ "." (str.++ "Z" (str.++ "8" (str.++ "Q" (str.++ "@" (str.++ "Z" (str.++ "H" (str.++ "3" (str.++ "9" (str.++ "." (str.++ "F" (str.++ "8" (str.++ "5" "")))))))))))))))))

(define-fun Witness2 () String (str.++ "6" (str.++ "F" (str.++ "_" (str.++ "9" (str.++ "0" (str.++ "@" (str.++ "x" (str.++ "0" (str.++ "4" (str.++ "_" (str.++ "I" (str.++ "." (str.++ "3" (str.++ "A" (str.++ "A" (str.++ "." (str.++ "a" (str.++ "9" "")))))))))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z"))))(re.++ (re.* (re.++ (re.opt (re.union (re.range "-" ".") (re.range "_" "_"))) (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z"))))))(re.++ (re.range "@" "@")(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z"))))(re.++ (re.* (re.++ (re.opt (re.union (re.range "-" ".") (re.range "_" "_"))) (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z"))))))(re.++ (re.+ (re.++ (re.range "." ".") (re.++ ((_ re.loop 2 2) (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))) (re.* (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z"))))))) (str.to_re ""))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String "")

(define-fun Witness2 () String "")

(assert (= regexA (re.union (re.++ (re.range "\u{22}" "\u{22}")(re.++ (re.* (re.union (re.+ (re.union (re.range "\u{00}" "!") (re.range "#" "\u{ff}"))) (str.to_re (str.++ "\u{22}" (str.++ "\u{22}" ""))))) (re.range "\u{22}" "\u{22}"))) (re.* (re.union (re.range "\u{00}" "+") (re.range "-" "\u{ff}"))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "\u{8b}" (str.++ "}" (str.++ "\u{a9}" (str.++ "\u{1e}" (str.++ "\u{ae}" (str.++ "j" (str.++ "\u{14}" (str.++ "^" (str.++ "@" (str.++ "[" (str.++ "]" ""))))))))))))

(define-fun Witness2 () String (str.++ "\u{f8}" (str.++ "\u{e1}" (str.++ "\u{08}" (str.++ "\u{89}" (str.++ "." (str.++ "\u{22}" (str.++ "\u{22}" (str.++ "@" (str.++ "\u{98}" (str.++ "\u{1d}" (str.++ "\u{d6}" (str.++ "." (str.++ "\u{9e}" ""))))))))))))))

(assert (= regexA (re.++ (re.++ (re.union (re.+ (re.union (re.range "\u{00}" "\u{08}")(re.union (re.range "\u{0b}" "\u{0c}")(re.union (re.range "\u{0e}" "\u{1f}")(re.union (re.range "!" "!")(re.union (re.range "#" "'")(re.union (re.range "*" "+")(re.union (re.range "-" "-")(re.union (re.range "/" "9")(re.union (re.range "=" "=")(re.union (re.range "?" "?")(re.union (re.range "A" "Z") (re.range "^" "\u{ff}"))))))))))))) (re.++ (re.range "\u{22}" "\u{22}")(re.++ (re.* (re.union (re.union (re.range "\u{00}" "\u{09}")(re.union (re.range "\u{0b}" "\u{0c}")(re.union (re.range "\u{0e}" "!")(re.union (re.range "#" "[") (re.range "]" "\u{ff}"))))) (re.++ (re.range "\u{5c}" "\u{5c}") (re.union (re.range "\u{00}" "\u{09}") (re.range "\u{0b}" "\u{ff}"))))) (re.range "\u{22}" "\u{22}")))) (re.* (re.++ (re.range "." ".") (re.union (re.+ (re.union (re.range "\u{00}" "\u{08}")(re.union (re.range "\u{0b}" "\u{0c}")(re.union (re.range "\u{0e}" "\u{1f}")(re.union (re.range "!" "!")(re.union (re.range "#" "'")(re.union (re.range "*" "+")(re.union (re.range "-" "-")(re.union (re.range "/" "9")(re.union (re.range "=" "=")(re.union (re.range "?" "?")(re.union (re.range "A" "Z") (re.range "^" "\u{ff}"))))))))))))) (re.++ (re.range "\u{22}" "\u{22}")(re.++ (re.* (re.union (re.union (re.range "\u{00}" "\u{09}")(re.union (re.range "\u{0b}" "\u{0c}")(re.union (re.range "\u{0e}" "!")(re.union (re.range "#" "[") (re.range "]" "\u{ff}"))))) (re.++ (re.range "\u{5c}" "\u{5c}") (re.union (re.range "\u{00}" "\u{09}") (re.range "\u{0b}" "\u{ff}"))))) (re.range "\u{22}" "\u{22}")))))))(re.++ (re.range "@" "@") (re.++ (re.union (re.+ (re.union (re.range "\u{00}" "\u{08}")(re.union (re.range "\u{0b}" "\u{0c}")(re.union (re.range "\u{0e}" "\u{1f}")(re.union (re.range "!" "!")(re.union (re.range "#" "'")(re.union (re.range "*" "+")(re.union (re.range "-" "-")(re.union (re.range "/" "9")(re.union (re.range "=" "=")(re.union (re.range "?" "?")(re.union (re.range "A" "Z") (re.range "^" "\u{ff}"))))))))))))) (re.++ (re.range "[" "[")(re.++ (re.* (re.union (re.union (re.range "\u{00}" "\u{09}")(re.union (re.range "\u{0b}" "\u{0c}")(re.union (re.range "\u{0e}" "Z") (re.range "^" "\u{ff}")))) (re.++ (re.range "\u{5c}" "\u{5c}") (re.union (re.range "\u{00}" "\u{09}") (re.range "\u{0b}" "\u{ff}"))))) (re.range "]" "]")))) (re.* (re.++ (re.range "." ".") (re.union (re.+ (re.union (re.range "\u{00}" "\u{08}")(re.union (re.range "\u{0b}" "\u{0c}")(re.union (re.range "\u{0e}" "\u{1f}")(re.union (re.range "!" "!")(re.union (re.range "#" "'")(re.union (re.range "*" "+")(re.union (re.range "-" "-")(re.union (re.range "/" "9")(re.union (re.range "=" "=")(re.union (re.range "?" "?")(re.union (re.range "A" "Z") (re.range "^" "\u{ff}"))))))))))))) (re.++ (re.range "[" "[")(re.++ (re.* (re.union (re.union (re.range "\u{00}" "\u{09}")(re.union (re.range "\u{0b}" "\u{0c}")(re.union (re.range "\u{0e}" "Z") (re.range "^" "\u{ff}")))) (re.++ (re.range "\u{5c}" "\u{5c}") (re.union (re.range "\u{00}" "\u{09}") (re.range "\u{0b}" "\u{ff}"))))) (re.range "]" "]")))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "0" (str.++ "2" (str.++ "8" (str.++ "4" (str.++ "8" ""))))))

(define-fun Witness2 () String (str.++ "4" (str.++ "8" (str.++ "8" (str.++ "8" (str.++ "9" ""))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.++ ((_ re.loop 5 5) (re.range "0" "9")) (re.opt (re.++ (re.range "-" "-") ((_ re.loop 4 4) (re.range "0" "9"))))) (str.to_re "")))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String "")

(define-fun Witness2 () String (str.++ "1" (str.++ "0" (str.++ "0" ""))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.union (str.to_re (str.++ "1" (str.++ "0" (str.++ "0" "")))) ((_ re.loop 0 2) (re.range "0" "9"))) (str.to_re "")))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "0" (str.++ "9" (str.++ "1" (str.++ "3" (str.++ "\u{5c}" (str.++ "d" (str.++ "d" (str.++ "d" (str.++ "d" (str.++ "d" (str.++ "d" (str.++ "d" "")))))))))))))

(define-fun Witness2 () String (str.++ "0" (str.++ "9" (str.++ "3" (str.++ "1" (str.++ "\u{5c}" (str.++ "d" (str.++ "d" (str.++ "d" (str.++ "d" (str.++ "d" (str.++ "d" (str.++ "d" "")))))))))))))

(assert (= regexA (re.union (re.++ (str.to_re "")(re.++ (re.union (str.to_re (str.++ "0" (str.++ "9" ""))) (re.range "9" "9"))(re.++ (re.range "1" "1")(re.++ (re.range "1" "9")(re.++ (re.range "\u{5c}" "\u{5c}")(re.++ ((_ re.loop 7 7) (re.range "d" "d")) (str.to_re ""))))))) (re.++ (str.to_re "")(re.++ (re.union (str.to_re (str.++ "0" (str.++ "9" ""))) (re.range "9" "9"))(re.++ (re.range "3" "3")(re.++ (re.union (re.range "1" "2") (re.range "4" "6"))(re.++ (re.range "\u{5c}" "\u{5c}")(re.++ ((_ re.loop 7 7) (re.range "d" "d")) (str.to_re ""))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "," ""))

(define-fun Witness2 () String (str.++ "." ""))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.* (re.union (re.range "," ",") (re.range "0" "9")))(re.++ (re.opt (re.range "." "."))(re.++ (re.* (re.range "0" "9")) (str.to_re "")))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "L" (str.++ "8" (str.++ "V" (str.++ "9" (str.++ "f" (str.++ "8" "")))))))

(define-fun Witness2 () String (str.++ "g" (str.++ "0" (str.++ "B" (str.++ "7" (str.++ "C" (str.++ "8" "")))))))

(assert (= regexA (re.++ (str.to_re "") (re.++ (re.union (re.range "A" "Z") (re.range "a" "z"))(re.++ (re.range "0" "9")(re.++ (re.union (re.range "A" "Z") (re.range "a" "z"))(re.++ (re.opt (re.range "-" "-"))(re.++ (re.range "0" "9")(re.++ (re.union (re.range "A" "Z") (re.range "a" "z")) (re.range "0" "9"))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "-" (str.++ "." (str.++ "8" (str.++ "9" "")))))

(define-fun Witness2 () String (str.++ "-" (str.++ "." (str.++ "9" (str.++ "8" (str.++ "7" ""))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.opt (re.range "-" "-"))(re.++ (re.* (re.range "0" "9"))(re.++ (re.opt (re.range "." "."))(re.++ (re.+ (re.range "0" "9")) (str.to_re ""))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "#" (str.++ "b" (str.++ "F" (str.++ "a" (str.++ "8" (str.++ "E" (str.++ "2" (str.++ "a" "")))))))))

(define-fun Witness2 () String (str.++ "#" (str.++ "9" (str.++ "c" (str.++ "E" (str.++ "9" (str.++ "f" (str.++ "f" ""))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.range "#" "#")(re.++ ((_ re.loop 3 3) (re.union (re.range "0" "9")(re.union (re.range "A" "F") (re.range "a" "f"))))(re.++ (re.opt (re.++ ((_ re.loop 3 3) (re.union (re.range "0" "9")(re.union (re.range "A" "F") (re.range "a" "f")))) ((_ re.loop 0 2) (re.union (re.range "0" "9")(re.union (re.range "A" "F") (re.range "a" "f")))))) (str.to_re "")))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "l" (str.++ " " (str.++ "z" (str.++ " " (str.++ "B" (str.++ "\u{e7}" (str.++ "\u{fb}" (str.++ "v" (str.++ "'" (str.++ "M" (str.++ "\u{e2}" (str.++ "t" "")))))))))))))

(define-fun Witness2 () String (str.++ "j" (str.++ "l" (str.++ "y" (str.++ "'" (str.++ "z" (str.++ " " (str.++ "\u{dc}" (str.++ "\u{ef}" (str.++ "e" (str.++ " " (str.++ "N" (str.++ "\u{ef}" (str.++ "c" (str.++ "z" (str.++ " " (str.++ "Y" (str.++ "\u{ee}" (str.++ "y" (str.++ "\u{fb}" (str.++ "\u{e7}" (str.++ "\u{e7}" (str.++ "\u{e7}" (str.++ "r" ""))))))))))))))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ ((_ re.loop 0 3) (re.++ ((_ re.loop 1 6) (re.range "a" "z")) (re.union (re.range " " " ") (re.range "'" "'"))))(re.++ ((_ re.loop 0 3) (re.++ (re.union (re.range "A" "Z")(re.union (re.range "\u{c4}" "\u{c5}")(re.union (re.range "\u{c7}" "\u{cb}")(re.union (re.range "\u{ce}" "\u{cf}")(re.union (re.range "\u{d4}" "\u{d4}")(re.union (re.range "\u{d6}" "\u{d6}") (re.range "\u{db}" "\u{dc}")))))))(re.++ (re.++ ((_ re.loop 2 2) (re.union (re.range "a" "z")(re.union (re.range "\u{e2}" "\u{e2}")(re.union (re.range "\u{e4}" "\u{e5}")(re.union (re.range "\u{e7}" "\u{eb}")(re.union (re.range "\u{ee}" "\u{ef}")(re.union (re.range "\u{f4}" "\u{f4}")(re.union (re.range "\u{f6}" "\u{f6}") (re.range "\u{fb}" "\u{fc}"))))))))) (re.* (re.union (re.range "a" "z")(re.union (re.range "\u{e2}" "\u{e2}")(re.union (re.range "\u{e4}" "\u{e5}")(re.union (re.range "\u{e7}" "\u{eb}")(re.union (re.range "\u{ee}" "\u{ef}")(re.union (re.range "\u{f4}" "\u{f4}")(re.union (re.range "\u{f6}" "\u{f6}") (re.range "\u{fb}" "\u{fc}")))))))))) (re.union (re.range " " " ")(re.union (re.range "'" "'") (re.range "-" "-"))))))(re.++ (re.range "A" "Z")(re.++ (re.++ ((_ re.loop 2 2) (re.union (re.range "a" "z")(re.union (re.range "\u{e2}" "\u{e2}")(re.union (re.range "\u{e4}" "\u{e5}")(re.union (re.range "\u{e7}" "\u{eb}")(re.union (re.range "\u{ee}" "\u{ef}")(re.union (re.range "\u{f4}" "\u{f4}")(re.union (re.range "\u{f6}" "\u{f6}") (re.range "\u{fb}" "\u{fc}"))))))))) (re.* (re.union (re.range "a" "z")(re.union (re.range "\u{e2}" "\u{e2}")(re.union (re.range "\u{e4}" "\u{e5}")(re.union (re.range "\u{e7}" "\u{eb}")(re.union (re.range "\u{ee}" "\u{ef}")(re.union (re.range "\u{f4}" "\u{f4}")(re.union (re.range "\u{f6}" "\u{f6}") (re.range "\u{fb}" "\u{fc}")))))))))) (str.to_re ""))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "w" (str.++ "Z" "")))

(define-fun Witness2 () String "")

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.* (re.union (re.range " " " ")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))) (str.to_re "")))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "1" (str.++ "8" (str.++ "7" (str.++ "9" (str.++ "4" (str.++ "4" (str.++ "9" ""))))))))

(define-fun Witness2 () String (str.++ "5" (str.++ "4" (str.++ "9" (str.++ "9" (str.++ "6" (str.++ "8" (str.++ "8" ""))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.* (str.to_re (str.++ "9" (str.++ "," ""))))(re.++ (re.* (re.++ (re.range "1" "9")(re.++ ((_ re.loop 2 2) (re.range "0" "9")) (re.opt (re.range "-" "-")))))(re.++ (re.range "1" "9")(re.++ ((_ re.loop 2 2) (re.range "0" "9"))(re.++ (re.opt (re.range "-" "-"))(re.++ ((_ re.loop 4 4) (re.range "0" "9")) (str.to_re ""))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "+" (str.++ "1" (str.++ "8" ""))))

(define-fun Witness2 () String (str.++ "+" (str.++ "2" (str.++ "7" ""))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.union (re.range "0" "0")(re.union (re.++ (re.range "-" "-") (re.union (re.++ (re.range "1" "9") ((_ re.loop 0 3) (re.range "0" "9")))(re.union (re.++ (re.range "1" "2") ((_ re.loop 1 4) (re.range "0" "9"))) (re.++ (re.range "3" "3") (re.union (re.++ (re.range "0" "1") ((_ re.loop 3 3) (re.range "0" "9"))) (re.++ (re.range "2" "2") (re.union (re.++ (re.range "0" "6") ((_ re.loop 2 2) (re.range "0" "9"))) (re.++ (re.range "7" "7") (re.union (re.++ (re.range "0" "5") (re.range "0" "9")) (re.++ (re.range "6" "6") (re.range "0" "8"))))))))))) (re.++ (re.opt (re.range "+" "+")) (re.union (re.++ (re.range "1" "9") ((_ re.loop 0 3) (re.range "0" "9")))(re.union (re.++ (re.range "1" "2") ((_ re.loop 1 4) (re.range "0" "9"))) (re.++ (re.range "3" "3") (re.union (re.++ (re.range "0" "1") ((_ re.loop 3 3) (re.range "0" "9"))) (re.++ (re.range "2" "2") (re.union (re.++ (re.range "0" "6") ((_ re.loop 2 2) (re.range "0" "9"))) (re.++ (re.range "7" "7") (re.union (re.++ (re.range "0" "5") (re.range "0" "9")) (re.++ (re.range "6" "6") (re.range "0" "7"))))))))))))) (str.to_re "")))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "6" (str.++ "0" (str.++ "1" (str.++ "1" (str.++ "3" (str.++ "1" (str.++ "4" (str.++ "1" (str.++ "9" (str.++ "9" (str.++ "0" (str.++ "7" (str.++ "\u{85}" (str.++ "5" (str.++ "8" (str.++ "8" (str.++ "4" ""))))))))))))))))))

(define-fun Witness2 () String (str.++ "6" (str.++ "0" (str.++ "1" (str.++ "1" (str.++ "8" (str.++ "9" (str.++ "7" (str.++ "9" (str.++ "8" (str.++ "3" (str.++ "7" (str.++ "6" (str.++ "\u{09}" (str.++ "3" (str.++ "9" (str.++ "2" (str.++ "9" ""))))))))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.++ (str.to_re (str.++ "6" (str.++ "0" (str.++ "1" (str.++ "1" ""))))) ((_ re.loop 3 3) (re.++ (re.opt (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "-" "-")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))) ((_ re.loop 4 4) (re.range "0" "9"))))) (str.to_re "")))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "0" (str.++ "0" (str.++ "8" (str.++ "-" (str.++ "3" (str.++ "9" (str.++ "9" (str.++ "8" (str.++ "1" (str.++ "8" (str.++ "8" (str.++ "3" "")))))))))))))

(define-fun Witness2 () String (str.++ "2" (str.++ "3" (str.++ "3" (str.++ "-" (str.++ "9" (str.++ "7" (str.++ "9" (str.++ "8" (str.++ "2" (str.++ "0" (str.++ "9" (str.++ "5" "")))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ ((_ re.loop 3 3) (re.range "0" "9"))(re.++ (re.range "-" "-")(re.++ ((_ re.loop 7 7) (re.range "0" "9"))(re.++ (re.range "0" "6") (str.to_re ""))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "0" ""))

(define-fun Witness2 () String (str.++ "." (str.++ "4" (str.++ "8" ""))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.opt (re.range "-" "-"))(re.++ (re.union (re.++ (re.range "1" "9")(re.++ (re.* (re.range "0" "9")) (re.opt (re.++ (re.range "." ".") ((_ re.loop 0 2) (re.range "0" "9"))))))(re.union (re.++ (re.range "0" "0") (re.opt (re.++ (re.range "." ".") ((_ re.loop 0 2) (re.range "0" "9"))))) (re.++ (re.range "." ".") ((_ re.loop 1 2) (re.range "0" "9"))))) (str.to_re ""))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "B" (str.++ "E" (str.++ "1" (str.++ "0" (str.++ "8" (str.++ "4" (str.++ "5" (str.++ "6" (str.++ "8" (str.++ "8" (str.++ "9" (str.++ "7" "")))))))))))))

(define-fun Witness2 () String (str.++ "B" (str.++ "E" (str.++ "1" (str.++ "9" (str.++ "8" (str.++ "6" (str.++ "9" (str.++ "8" (str.++ "8" (str.++ "2" (str.++ "2" (str.++ "4" "")))))))))))))

(assert (= regexA (re.union (re.++ (str.to_re "")(re.++ (str.to_re (str.++ "B" (str.++ "E" "")))(re.++ (re.range "0" "1")(re.++ ((_ re.loop 9 9) (re.range "0" "9")) (str.to_re ""))))) (re.++ (str.to_re "")(re.++ (re.union (str.to_re (str.++ "B" (str.++ "E" ""))) (str.to_re (str.++ "B" (str.++ "E" (str.++ " " "")))))(re.++ (re.range "0" "1")(re.++ ((_ re.loop 3 3) (re.range "0" "9"))(re.++ (re.range "." ".")(re.++ ((_ re.loop 3 3) (re.range "0" "9"))(re.++ (re.range "." ".") ((_ re.loop 3 3) (re.range "0" "9"))))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "4" (str.++ "Y" (str.++ "X" (str.++ "Q" (str.++ " " (str.++ "6" (str.++ "L" (str.++ "_" (str.++ "(" (str.++ ")" (str.++ "\u{d6}" ""))))))))))))

(define-fun Witness2 () String (str.++ "\u{c1}" (str.++ "a" (str.++ " " (str.++ "*" (str.++ "\u{09}" (str.++ "9" (str.++ "y" (str.++ "5" (str.++ " " (str.++ " " (str.++ "(" (str.++ " " (str.++ "6" (str.++ "z" (str.++ "I" (str.++ "S" (str.++ ")" ""))))))))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.* (re.union (re.range "\u{00}" "\u{09}") (re.range "\u{0b}" "\u{ff}")))(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_") (re.range "a" "z")))))(re.++ (re.+ (re.union (re.range "\u{09}" "\u{09}") (re.range " " " ")))(re.++ (re.opt (re.union (re.range "&" "&") (re.range "*" "*")))(re.++ (re.* (re.union (re.range "\u{09}" "\u{09}") (re.range " " " ")))(re.++ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_") (re.range "a" "z"))))(re.++ (re.opt (str.to_re (str.++ ":" (str.++ ":" ""))))(re.++ (re.+ (re.union (re.range "0" ":")(re.union (re.range "A" "Z")(re.union (re.range "_" "_") (re.range "a" "z")))))(re.++ (re.* (re.union (re.range "\u{09}" "\u{09}") (re.range " " " ")))(re.++ (re.range "(" "(")(re.++ (re.* (re.++ (re.* (re.range " " " "))(re.++ (re.+ (re.union (re.range " " " ")(re.union (re.range "&" "&")(re.union (re.range "*" "*")(re.union (re.range "0" "9")(re.union (re.range "A" "[")(re.union (re.range "]" "]")(re.union (re.range "_" "_") (re.range "a" "z")))))))))(re.++ (re.* (re.range " " " "))(re.++ (re.opt (re.range "," ",")) (re.* (re.range " " " ")))))))(re.++ (re.range ")" ")")(re.++ (re.* (re.union (re.range "\u{00}" "\u{09}") (re.range "\u{0b}" "\u{ff}"))) (str.to_re "")))))))))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "+" (str.++ "8" (str.++ "," (str.++ "8" "")))))

(define-fun Witness2 () String (str.++ "+" (str.++ "9" (str.++ "," (str.++ "1" (str.++ "9" (str.++ "." "")))))))

(assert (= regexA (re.union (re.++ (str.to_re "")(re.++ (re.opt (re.union (re.range "+" "+") (re.range "-" "-")))(re.++ (re.++ ((_ re.loop 1 3) (re.range "0" "9")) (re.* (re.++ (re.opt (re.range "," ",")) ((_ re.loop 2 3) (re.range "0" "9")))))(re.++ (re.range "." ".")(re.++ (re.opt (re.* (re.range "0" "9"))) (str.to_re ""))))))(re.union (re.++ (str.to_re "")(re.++ (re.opt (re.union (re.range "+" "+") (re.range "-" "-")))(re.++ (re.++ ((_ re.loop 1 3) (re.range "0" "9")) (re.* (re.++ (re.opt (re.range "." ".")) ((_ re.loop 2 3) (re.range "0" "9")))))(re.++ (re.range "," ",")(re.++ (re.opt (re.* (re.range "0" "9"))) (str.to_re ""))))))(re.union (re.++ (str.to_re "")(re.++ (re.opt (re.union (re.range "+" "+") (re.range "-" "-")))(re.++ (re.++ ((_ re.loop 1 3) (re.range "0" "9")) (re.* (re.++ (re.opt (re.range "'" "'")) ((_ re.loop 2 3) (re.range "0" "9")))))(re.++ (re.range "." ".")(re.++ (re.opt (re.* (re.range "0" "9"))) (str.to_re ""))))))(re.union (re.++ (str.to_re "")(re.++ (re.opt (re.union (re.range "+" "+") (re.range "-" "-")))(re.++ (re.++ ((_ re.loop 1 3) (re.range "0" "9")) (re.* (re.++ (re.range "," ",") ((_ re.loop 2 3) (re.range "0" "9")))))(re.++ (re.range "." ".")(re.++ (re.opt (re.* (re.range "0" "9"))) (str.to_re ""))))))(re.union (re.++ (str.to_re "")(re.++ (re.opt (re.union (re.range "+" "+") (re.range "-" "-")))(re.++ (re.++ ((_ re.loop 1 3) (re.range "0" "9")) (re.* (re.++ (re.range " " " ") ((_ re.loop 2 3) (re.range "0" "9")))))(re.++ (re.range "," ",")(re.++ (re.opt (re.* (re.range "0" "9"))) (str.to_re "")))))) (re.++ (str.to_re "")(re.++ (re.opt (re.union (re.range "+" "+") (re.range "-" "-")))(re.++ (re.++ ((_ re.loop 1 3) (re.range "0" "9")) (re.* (re.++ (re.opt (re.range "'" "'")) ((_ re.loop 2 3) (re.range "0" "9")))))(re.++ (re.range "," ",")(re.++ (re.opt (re.* (re.range "0" "9"))) (str.to_re "")))))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "1" (str.++ "1" (str.++ "\u{5c}" (str.++ "0" (str.++ "9" (str.++ "\u{a0}" (str.++ "1" (str.++ "9" (str.++ "0" (str.++ "\u{ca}" "")))))))))))

(define-fun Witness2 () String (str.++ "1" (str.++ "0" (str.++ "-" (str.++ "3" (str.++ "1" (str.++ "\u{85}" (str.++ "2" (str.++ "\u{09}" (str.++ "0" (str.++ "0" "")))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.union (re.++ (re.union (re.++ (re.union (re.++ (re.range "0" "0") (re.union (re.range "1" "1")(re.union (re.range "3" "3")(re.union (re.range "5" "5") (re.range "7" "8"))))) (re.++ (re.range "1" "1") (re.union (re.range "0" "0") (re.range "2" "2"))))(re.++ (re.opt (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "-" "/")(re.union (re.range "\u{5c}" "\u{5c}")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))))) (re.union (re.++ (re.range "0" "0") (re.range "1" "9"))(re.union (re.++ (re.range "1" "2") (re.range "0" "9")) (re.++ (re.range "3" "3") (re.range "0" "1"))))))(re.union (re.++ (re.union (re.++ (re.range "0" "0") (re.union (re.range "4" "4")(re.union (re.range "6" "6") (re.range "9" "9")))) (str.to_re (str.++ "1" (str.++ "1" ""))))(re.++ (re.opt (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "-" "/")(re.union (re.range "\u{5c}" "\u{5c}")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))))) (re.union (re.++ (re.range "0" "0") (re.range "1" "9"))(re.union (re.++ (re.range "1" "2") (re.range "0" "9")) (str.to_re (str.++ "3" (str.++ "0" ""))))))) (re.++ (str.to_re (str.++ "0" (str.++ "2" "")))(re.++ (re.opt (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "-" "/")(re.union (re.range "\u{5c}" "\u{5c}")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))))) (re.union (re.++ (re.range "0" "0") (re.range "1" "9"))(re.union (re.++ (re.range "1" "1") (re.range "0" "9")) (re.++ (re.range "2" "2") (re.range "0" "8"))))))))(re.++ (re.opt (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "-" "/")(re.union (re.range "\u{5c}" "\u{5c}")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))))) (re.union (re.++ (re.union (re.++ (re.union (re.range "2" "2")(re.union (re.range "4" "4")(re.union (re.range "6" "6") (re.range "8" "8")))) (re.union (re.range "\u{00}" "/")(re.union (re.range "1" "3")(re.union (re.range "5" "7") (re.range "9" "\u{ff}"))))) (re.++ (re.union (re.range "1" "1")(re.union (re.range "3" "3")(re.union (re.range "5" "5")(re.union (re.range "7" "7") (re.range "9" "9"))))) (re.union (re.range "\u{00}" "1")(re.union (re.range "3" "5") (re.range "7" "\u{ff}"))))) (str.to_re (str.++ "0" (str.++ "0" ""))))(re.union (re.++ (re.range "0" "9")(re.++ (re.range "0" "9")(re.++ (re.range "0" "9") (re.union (re.range "1" "1")(re.union (re.range "3" "3")(re.union (re.range "5" "5")(re.union (re.range "7" "7") (re.range "9" "9"))))))))(re.union (re.++ (re.range "0" "9")(re.++ (re.range "0" "9")(re.++ (re.union (re.range "0" "0")(re.union (re.range "2" "2")(re.union (re.range "4" "4")(re.union (re.range "6" "6") (re.range "8" "8"))))) (re.union (re.range "\u{00}" "/")(re.union (re.range "1" "3")(re.union (re.range "5" "7") (re.range "9" "\u{ff}"))))))) (re.++ (re.range "0" "9")(re.++ (re.range "0" "9")(re.++ (re.union (re.range "1" "1")(re.union (re.range "3" "3")(re.union (re.range "5" "5")(re.union (re.range "7" "7") (re.range "9" "9"))))) (re.union (re.range "\u{00}" "1")(re.union (re.range "3" "5") (re.range "7" "\u{ff}"))))))))))) (re.++ (re.union (re.++ (re.union (re.++ (re.range "0" "0") (re.union (re.range "1" "1")(re.union (re.range "3" "3")(re.union (re.range "5" "5") (re.range "7" "8"))))) (re.++ (re.range "1" "1") (re.union (re.range "0" "0") (re.range "2" "2"))))(re.++ (re.opt (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "-" "/")(re.union (re.range "\u{5c}" "\u{5c}")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))))) (re.union (re.++ (re.range "0" "0") (re.range "1" "9"))(re.union (re.++ (re.range "1" "2") (re.range "0" "9")) (re.++ (re.range "3" "3") (re.range "0" "1"))))))(re.union (re.++ (re.union (re.++ (re.range "0" "0") (re.union (re.range "4" "4")(re.union (re.range "6" "6") (re.range "9" "9")))) (str.to_re (str.++ "1" (str.++ "1" ""))))(re.++ (re.opt (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "-" "/")(re.union (re.range "\u{5c}" "\u{5c}")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))))) (re.union (re.++ (re.range "0" "0") (re.range "1" "9"))(re.union (re.++ (re.range "1" "2") (re.range "0" "9")) (str.to_re (str.++ "3" (str.++ "0" ""))))))) (re.++ (str.to_re (str.++ "0" (str.++ "2" "")))(re.++ (re.opt (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "-" "/")(re.union (re.range "\u{5c}" "\u{5c}")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))))) (re.union (re.++ (re.range "0" "0") (re.range "1" "9")) (re.++ (re.range "1" "2") (re.range "0" "9")))))))(re.++ (re.opt (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "-" "/")(re.union (re.range "\u{5c}" "\u{5c}")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))))) (re.union (re.++ (re.union (re.++ (re.union (re.range "2" "2")(re.union (re.range "4" "4")(re.union (re.range "6" "6") (re.range "8" "8")))) (re.union (re.range "0" "0")(re.union (re.range "4" "4") (re.range "8" "8")))) (re.++ (re.union (re.range "1" "1")(re.union (re.range "3" "3")(re.union (re.range "5" "5")(re.union (re.range "7" "7") (re.range "9" "9"))))) (re.union (re.range "2" "2") (re.range "6" "6")))) (str.to_re (str.++ "0" (str.++ "0" ""))))(re.union (re.++ (re.range "0" "9")(re.++ (re.range "0" "9")(re.++ (re.union (re.range "2" "2")(re.union (re.range "4" "4")(re.union (re.range "6" "6") (re.range "8" "8")))) (re.union (re.range "0" "0")(re.union (re.range "4" "4") (re.range "8" "8"))))))(re.union (re.++ (re.range "0" "9")(re.++ (re.range "0" "9")(re.++ (re.union (re.range "1" "1")(re.union (re.range "3" "3")(re.union (re.range "5" "5")(re.union (re.range "7" "7") (re.range "9" "9"))))) (re.union (re.range "2" "2") (re.range "6" "6"))))) (re.++ (re.range "0" "9")(re.++ (re.range "0" "9")(re.++ (re.range "0" "0") (re.union (re.range "4" "4") (re.range "8" "8"))))))))))) (str.to_re "")))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "0" (str.++ "4" (str.++ ":" (str.++ "5" (str.++ "8" ""))))))

(define-fun Witness2 () String (str.++ "0" (str.++ "9" (str.++ ":" (str.++ "4" (str.++ "0" ""))))))

(assert (= regexA (re.union (re.++ (str.to_re "")(re.++ (re.union (re.range "0" "9")(re.union (re.++ (re.range "0" "1") (re.range "0" "9")) (re.++ (re.range "2" "2") (re.range "0" "3"))))(re.++ (re.range ":" ":")(re.++ (re.++ (re.range "0" "5") (re.range "0" "9")) (str.to_re ""))))) (re.++ (str.to_re "")(re.++ (re.union (re.range "0" "9")(re.union (re.++ (re.range "1" "1") (re.range "0" "9")) (re.++ (re.range "2" "2") (re.range "0" "3")))) (str.to_re ""))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "0" (str.++ "2" (str.++ "2" (str.++ "2" (str.++ "9" (str.++ "9" "")))))))

(define-fun Witness2 () String (str.++ "2" (str.++ "0" (str.++ "6" (str.++ "-" (str.++ "3" (str.++ "8" "")))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.union (re.++ (re.union (re.++ (re.opt (re.range "0" "0")) (re.union (re.range "1" "1")(re.union (re.range "3" "3")(re.union (re.range "5" "5") (re.range "7" "8"))))) (re.++ (re.range "1" "1") (re.union (re.range "0" "0") (re.range "2" "2"))))(re.++ (re.opt (re.range "-" "-")) (re.union (re.union (re.++ (re.opt (re.range "0" "0")) (re.range "1" "9")) (re.++ (re.range "0" "2") (re.range "0" "9"))) (re.++ (re.range "3" "3") (re.range "0" "1")))))(re.union (re.++ (re.union (re.++ (re.opt (re.range "0" "0")) (re.union (re.range "4" "4")(re.union (re.range "6" "6") (re.range "9" "9")))) (str.to_re (str.++ "1" (str.++ "1" ""))))(re.++ (re.opt (re.range "-" "-")) (re.union (re.union (re.++ (re.opt (re.range "0" "0")) (re.range "1" "9")) (re.++ (re.range "0" "2") (re.range "0" "9"))) (str.to_re (str.++ "3" (str.++ "0" "")))))) (re.++ (re.opt (re.range "0" "0"))(re.++ (re.range "2" "2")(re.++ (re.opt (re.range "-" "-")) (re.union (re.++ (re.opt (re.range "0" "0")) (re.range "1" "9")) (re.++ (re.range "0" "2") (re.range "0" "9"))))))))(re.++ (re.opt (re.range "-" "-"))(re.++ ((_ re.loop 2 2) (re.range "0" "9")) (str.to_re "")))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "L" (str.++ "T" (str.++ "8" (str.++ "8" (str.++ "8" (str.++ "7" (str.++ "1" (str.++ "9" (str.++ "3" (str.++ "9" (str.++ "3" ""))))))))))))

(define-fun Witness2 () String (str.++ "L" (str.++ "T" (str.++ "9" (str.++ "6" (str.++ "4" (str.++ "8" (str.++ "5" (str.++ "9" (str.++ "8" (str.++ "9" (str.++ "8" ""))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.opt (str.to_re (str.++ "L" (str.++ "T" ""))))(re.++ (re.union ((_ re.loop 9 9) (re.range "0" "9")) ((_ re.loop 12 12) (re.range "0" "9"))) (str.to_re ""))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "\u{ac}" (str.++ "\u{f4}" (str.++ "\u{e5}" (str.++ "!" (str.++ "p" ""))))))

(define-fun Witness2 () String (str.++ "n" (str.++ "'" (str.++ "\u{8f}" (str.++ "^" (str.++ "\u{1b}" (str.++ "8" (str.++ "\u{fd}" ""))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ ((_ re.loop 5 12) (re.union (re.range "\u{00}" "\u{08}")(re.union (re.range "\u{0e}" "\u{1f}")(re.union (re.range "!" "\u{84}")(re.union (re.range "\u{86}" "\u{9f}") (re.range "\u{a1}" "\u{ff}")))))) (str.to_re "")))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "R" (str.++ "$" (str.++ "-" (str.++ "0" "")))))

(define-fun Witness2 () String "")

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.opt (re.union (re.range "$" "$")(re.union (str.to_re (str.++ "R" (str.++ "$" "")))(re.union (str.to_re (str.++ "-" (str.++ "$" "")))(re.union (str.to_re (str.++ "-" (str.++ "R" (str.++ "$" ""))))(re.union (str.to_re (str.++ "$" (str.++ "-" "")))(re.union (str.to_re (str.++ "R" (str.++ "$" (str.++ "-" "")))) (re.range "-" "-"))))))))(re.++ (re.union (re.++ (re.range "0" "9")(re.++ ((_ re.loop 0 2) (re.range "0" "9"))(re.++ (re.* (re.++ (re.range "." ".") ((_ re.loop 3 3) (re.range "0" "9")))) (re.opt (re.++ (re.range "," ",") ((_ re.loop 0 2) (re.range "0" "9")))))))(re.union (re.++ (re.range "1" "9")(re.++ (re.* (re.range "0" "9")) (re.opt (re.++ (re.range "," ",") ((_ re.loop 0 2) (re.range "0" "9"))))))(re.union (re.++ (re.range "0" "0") (re.opt (re.++ (re.range "," ",") ((_ re.loop 0 2) (re.range "0" "9"))))) (re.opt (re.++ (re.range "," ",") ((_ re.loop 1 2) (re.range "0" "9"))))))) (str.to_re ""))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "8" (str.++ "8" (str.++ "8" (str.++ "0" (str.++ "1" (str.++ "2" "")))))))

(define-fun Witness2 () String (str.++ "0" (str.++ "9" (str.++ "3" (str.++ "8" (str.++ "0" (str.++ "9" "")))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ ((_ re.loop 4 4) (re.range "0" "9"))(re.++ (re.union (re.++ (re.range "0" "0") (re.range "1" "9")) (re.++ (re.range "1" "1") (re.range "0" "2"))) (str.to_re ""))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "2" (str.++ "1" "")))

(define-fun Witness2 () String (str.++ "5" (str.++ "8" (str.++ "." ""))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.opt (re.union (re.range "+" "+") (re.range "-" "-")))(re.++ (re.+ (re.range "0" "9"))(re.++ (re.opt (re.range "." "."))(re.++ (re.* (re.range "0" "9"))(re.++ (re.opt (re.++ (re.union (re.range "E" "E") (re.range "e" "e"))(re.++ (re.opt (re.union (re.range "+" "+") (re.range "-" "-"))) (re.+ (re.range "0" "9"))))) (str.to_re "")))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "0" (str.++ "." (str.++ "3" ""))))

(define-fun Witness2 () String (str.++ "1" (str.++ "4" (str.++ "0" (str.++ "." (str.++ "7" (str.++ "5" "")))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.union (re.++ (re.range "1" "9")(re.++ ((_ re.loop 0 5) (re.range "0" "9")) (re.opt (re.++ (re.range "." ".") ((_ re.loop 0 2) (re.range "0" "9")))))) (re.++ (re.range "0" "0") (re.opt (re.++ (re.range "." ".") ((_ re.loop 0 2) (re.range "0" "9")))))) (str.to_re "")))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "9" (str.++ " " "")))

(define-fun Witness2 () String (str.++ "9" (str.++ "%" "")))

(assert (= regexA (re.++ (str.to_re "")(re.++ ((_ re.loop 0 2) (re.range "0" "9"))(re.++ (re.opt (re.++ (re.range "." ".") ((_ re.loop 1 4) (re.range "0" "9"))))(re.++ (re.* (re.range " " " "))(re.++ (re.opt (re.range "%" "%")) (str.to_re ""))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "0" (str.++ "2" (str.++ "0" (str.++ "8" (str.++ "-" (str.++ "2" (str.++ "0" (str.++ "0" (str.++ "9" ""))))))))))

(define-fun Witness2 () String (str.++ "5" (str.++ "0" (str.++ "5" (str.++ "2" (str.++ "0" (str.++ "8" (str.++ "1" ""))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.union (re.++ (re.union (re.++ (re.union (re.++ (re.opt (re.range "0" "0")) (re.union (re.range "1" "1")(re.union (re.range "3" "3")(re.union (re.range "5" "5") (re.range "7" "8"))))) (re.++ (re.range "1" "1") (re.union (re.range "0" "0") (re.range "2" "2"))))(re.++ (re.opt (re.range "-" "/")) (re.union (re.++ (re.opt (re.range "0" "0")) (re.range "1" "9"))(re.union (re.++ (re.range "1" "2") (re.range "0" "9")) (re.++ (re.range "3" "3") (re.range "0" "1"))))))(re.union (re.++ (re.union (re.++ (re.opt (re.range "0" "0")) (re.union (re.range "4" "4")(re.union (re.range "6" "6") (re.range "9" "9")))) (str.to_re (str.++ "1" (str.++ "1" ""))))(re.++ (re.opt (re.range "-" "/")) (re.union (re.++ (re.opt (re.range "0" "0")) (re.range "1" "9"))(re.union (re.++ (re.range "1" "2") (re.range "0" "9")) (str.to_re (str.++ "3" (str.++ "0" ""))))))) (re.++ (re.++ (re.opt (re.range "0" "0")) (re.range "2" "2"))(re.++ (re.opt (re.range "-" "/")) (re.union (re.++ (re.opt (re.range "0" "0")) (re.range "1" "9"))(re.union (re.++ (re.range "1" "1") (re.range "0" "9")) (re.++ (re.range "2" "2") (re.range "0" "8"))))))))(re.++ (re.opt (re.range "-" "/")) (re.++ (re.opt (re.union (str.to_re (str.++ "1" (str.++ "9" ""))) (str.to_re (str.++ "2" (str.++ "0" ""))))) (re.++ (re.range "0" "9") (re.range "0" "9"))))) (re.++ (re.++ (re.opt (re.range "0" "0")) (re.range "2" "2"))(re.++ (re.opt (re.range "-" "/"))(re.++ (str.to_re (str.++ "2" (str.++ "9" "")))(re.++ (re.opt (re.range "-" "/")) (re.++ (re.opt (re.union (str.to_re (str.++ "1" (str.++ "9" ""))) (str.to_re (str.++ "2" (str.++ "0" ""))))) (re.union (re.++ (re.union (re.range "0" "0")(re.union (re.range "2" "2")(re.union (re.range "4" "4")(re.union (re.range "6" "6") (re.range "8" "8"))))) (re.union (re.range "0" "0")(re.union (re.range "4" "4") (re.range "8" "8")))) (re.++ (re.union (re.range "1" "1")(re.union (re.range "3" "3")(re.union (re.range "5" "5")(re.union (re.range "7" "7") (re.range "9" "9"))))) (re.union (re.range "2" "2") (re.range "6" "6")))))))))) (str.to_re "")))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "4" (str.++ "-" (str.++ "3" (str.++ "0" (str.++ "|" (str.++ "2" (str.++ "0" (str.++ "2" (str.++ "8" (str.++ "\u{a0}" (str.++ "\u{0d}" (str.++ "\u{a0}" (str.++ " " (str.++ "1" (str.++ "2" (str.++ ":" (str.++ "3" (str.++ "5" "")))))))))))))))))))

(define-fun Witness2 () String (str.++ "1" (str.++ "0" (str.++ "-" (str.++ "2" (str.++ "3" (str.++ "-" (str.++ "2" (str.++ "0" (str.++ "9" (str.++ "9" (str.++ "\u{0c}" (str.++ "2" (str.++ "2" (str.++ "|" (str.++ "5" (str.++ "1" "")))))))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.++ (re.union (re.++ (re.opt (re.range "0" "0")) (re.range "1" "9")) (re.++ (re.range "1" "1") (re.range "0" "2")))(re.++ (re.union (re.range "-" "/") (re.range "|" "|"))(re.++ (re.union (re.++ (re.range "0" "2") (re.range "0" "9"))(re.union (re.++ (re.range "3" "3") (re.range "0" "1")) (re.range "1" "9")))(re.++ (re.union (re.range "-" "/") (re.range "|" "|"))(re.++ (re.opt (str.to_re (str.++ "2" (str.++ "0" ""))))(re.++ ((_ re.loop 2 2) (re.range "0" "9"))(re.++ (re.+ (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))) (re.union (re.++ (re.union (re.++ (re.range "0" "0") (re.range "0" "9"))(re.union (re.++ (re.range "1" "1") (re.range "0" "2")) (re.range "0" "9")))(re.++ (re.union (re.range "-" ".")(re.union (re.range ":" ":") (re.range "|" "|")))(re.++ (re.++ (re.range "0" "5") (re.range "0" "9"))(re.++ (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))) (re.opt (re.++ (re.union (re.range "A" "A")(re.union (re.range "P" "P")(re.union (re.range "a" "a") (re.range "p" "p")))) (re.union (re.range "M" "M") (re.range "m" "m")))))))) (re.++ (re.union (re.++ (re.range "0" "1") (re.range "0" "9"))(re.union (re.++ (re.range "2" "2") (re.range "0" "3")) (re.range "0" "9")))(re.++ (re.union (re.range "-" ".")(re.union (re.range ":" ":") (re.range "|" "|"))) (re.++ (re.range "0" "5") (re.range "0" "9")))))))))))) (str.to_re "")))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "\u{5c}" (str.++ "\u{5c}" (str.++ "-" (str.++ "\u{5c}" (str.++ "\u{e4}" (str.++ "g" (str.++ "\u{87}" (str.++ "\u{5c}" (str.++ "\u{b7}" (str.++ "\u{5c}" (str.++ "\u{e6}" (str.++ "\u{5c}" "")))))))))))))

(define-fun Witness2 () String (str.++ "\u{5c}" (str.++ "\u{5c}" (str.++ "F" (str.++ "\u{e9}" (str.++ "\u{5c}" (str.++ "\u{c8}" (str.++ "9" (str.++ "{" (str.++ "\u{5c}" ""))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ ((_ re.loop 2 2) (re.range "\u{5c}" "\u{5c}"))(re.++ (re.+ (re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))))(re.++ (re.range "\u{5c}" "\u{5c}")(re.++ (re.++ (re.union (re.union (re.range "!" "!")(re.union (re.range "#" ")")(re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "@" "Z")(re.union (re.range "^" "{") (re.range "}" "\u{ff}"))))))) (re.++ (re.range "." ".")(re.++ (re.* (re.union (re.range " " " ") (re.range "." "."))) (re.union (re.range "!" "!")(re.union (re.range "#" ")")(re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "@" "Z")(re.union (re.range "^" "{") (re.range "}" "\u{ff}")))))))))) (re.opt (re.++ (re.* (re.union (re.range " " "!")(re.union (re.range "#" ")")(re.union (re.range "-" ".")(re.union (re.range "0" "9")(re.union (re.range "@" "Z")(re.union (re.range "^" "{") (re.range "}" "\u{ff}")))))))) (re.union (re.range "!" "!")(re.union (re.range "#" ")")(re.union (re.range "-" ".")(re.union (re.range "0" "9")(re.union (re.range "@" "Z")(re.union (re.range "^" "{") (re.range "}" "\u{ff}"))))))))))(re.++ (re.range "\u{5c}" "\u{5c}")(re.++ (re.* (re.++ (re.union (re.range "!" "!")(re.union (re.range "#" ")")(re.union (re.range "+" "-")(re.union (re.range "0" "9")(re.union (re.range ";" ";")(re.union (re.range "=" "=")(re.union (re.range "@" "[")(re.union (re.range "]" "{") (re.range "}" "\u{ff}")))))))))(re.++ (re.opt (re.++ (re.* (re.union (re.range " " "!")(re.union (re.range "#" ")")(re.union (re.range "+" ".")(re.union (re.range "0" "9")(re.union (re.range ";" ";")(re.union (re.range "=" "=")(re.union (re.range "@" "[")(re.union (re.range "]" "{") (re.range "}" "\u{ff}")))))))))) (re.union (re.range "!" "!")(re.union (re.range "#" ")")(re.union (re.range "+" "-")(re.union (re.range "0" "9")(re.union (re.range ";" ";")(re.union (re.range "=" "=")(re.union (re.range "@" "[")(re.union (re.range "]" "{") (re.range "}" "\u{ff}"))))))))))) (re.range "\u{5c}" "\u{5c}")))) (str.to_re ""))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "6" (str.++ "5" (str.++ "4" (str.++ "0" (str.++ "5" ""))))))

(define-fun Witness2 () String (str.++ "4" (str.++ "3" (str.++ "3" ""))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.union (re.range "0" "0")(re.union (re.++ (re.opt (re.range "+" "+")) (re.++ (re.range "1" "9") ((_ re.loop 0 3) (re.range "0" "9")))) (re.union (re.++ (re.range "1" "5") ((_ re.loop 1 4) (re.range "0" "9"))) (re.++ (re.range "6" "6") (re.union (re.++ (re.range "0" "4") ((_ re.loop 3 3) (re.range "0" "9"))) (re.++ (re.range "5" "5") (re.union (re.++ (re.range "0" "4") ((_ re.loop 2 2) (re.range "0" "9"))) (re.++ (re.range "5" "5") (re.union (re.++ (re.range "0" "2") (re.range "0" "9")) (re.++ (re.range "3" "3") (re.range "0" "5"))))))))))) (str.to_re "")))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "7" (str.++ "9" (str.++ "1" (str.++ "8" (str.++ "-" (str.++ "1" (str.++ "2" (str.++ "-" (str.++ "3" (str.++ "0" (str.++ " " (str.++ "0" (str.++ "9" (str.++ ":" (str.++ "5" (str.++ "1" (str.++ ":" (str.++ "5" (str.++ "9" ""))))))))))))))))))))

(define-fun Witness2 () String (str.++ "5" (str.++ "9" (str.++ "9" (str.++ "5" (str.++ "-" (str.++ "1" (str.++ "2" (str.++ "-" (str.++ "3" (str.++ "0" (str.++ " " (str.++ "2" (str.++ "2" (str.++ ":" (str.++ "5" (str.++ "1" (str.++ ":" (str.++ "2" (str.++ "4" ""))))))))))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ ((_ re.loop 4 4) (re.range "0" "9"))(re.++ (re.range "-" "-")(re.++ (re.union (re.++ (re.range "0" "0") (re.range "1" "9")) (re.++ (re.range "1" "1") (re.range "0" "2")))(re.++ (re.range "-" "-")(re.++ (re.union (re.++ (re.range "0" "0") (re.range "1" "9"))(re.union (re.++ (re.range "1" "2") (re.range "0" "9")) (re.++ (re.range "3" "3") (re.range "0" "2"))))(re.++ (re.range " " " ")(re.++ (re.union (re.++ (re.range "0" "1") (re.range "0" "9")) (re.++ (re.range "2" "2") (re.range "0" "4")))(re.++ (re.range ":" ":")(re.++ (re.union (re.++ (re.range "0" "4") (re.range "0" "9")) (re.++ (re.range "5" "5") (re.range "0" "9")))(re.++ (re.range ":" ":")(re.++ (re.union (re.++ (re.range "0" "4") (re.range "0" "9")) (re.++ (re.range "5" "5") (re.range "0" "9"))) (str.to_re "")))))))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "7" (str.++ "8" (str.++ "3" (str.++ "6" (str.++ "6" ""))))))

(define-fun Witness2 () String (str.++ "2" (str.++ "5" (str.++ "0" (str.++ "9" (str.++ "6" ""))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ ((_ re.loop 2 2) (re.range "0" "9"))(re.++ (re.union (re.++ (str.to_re (str.++ "0" (str.++ "0" ""))) (re.range "1" "9"))(re.union (re.++ (re.range "0" "0")(re.++ (re.range "1" "9") (re.range "0" "9")))(re.union (re.++ (re.range "1" "2")(re.++ (re.range "0" "9") (re.range "0" "9")))(re.union (re.++ (re.range "3" "3")(re.++ (re.range "0" "5") (re.range "0" "9"))) (re.++ (str.to_re (str.++ "3" (str.++ "6" ""))) (re.range "0" "6")))))) (str.to_re ""))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "0" (str.++ "8" (str.++ "." (str.++ "0" (str.++ "9" ""))))))

(define-fun Witness2 () String (str.++ "0" (str.++ "2" (str.++ "." (str.++ "0" (str.++ "8" ""))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.union (re.++ (re.range "0" "0") (re.range "1" "9")) (re.++ (re.range "1" "1") (re.range "0" "2")))(re.++ (re.* (re.range "-" "/"))(re.++ (re.union (re.++ (re.range "0" "0") (re.range "8" "9")) (re.++ (re.range "1" "1") (re.range "1" "9"))) (str.to_re "")))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "s" (str.++ "d" (str.++ "s" (str.++ "d" "")))))

(define-fun Witness2 () String (str.++ "s" (str.++ "d" (str.++ "s" (str.++ "d" "")))))

(assert (= regexA (str.to_re (str.++ "s" (str.++ "d" (str.++ "s" (str.++ "d" "")))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "2" (str.++ "1" (str.++ "4" (str.++ "7" (str.++ "4" (str.++ "8" (str.++ "2" (str.++ "8" (str.++ "9" (str.++ "9" "")))))))))))

(define-fun Witness2 () String (str.++ "1" (str.++ "4" "")))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.union (re.range "0" "9")(re.union ((_ re.loop 1 9) (re.range "0" "9"))(re.union (re.++ (re.range "1" "1") ((_ re.loop 1 9) (re.range "0" "9")))(re.union (re.++ (str.to_re (str.++ "2" (str.++ "0" ""))) ((_ re.loop 8 8) (re.range "0" "9")))(re.union (re.++ (str.to_re (str.++ "2" (str.++ "1" (str.++ "3" "")))) ((_ re.loop 7 7) (re.range "0" "9")))(re.union (re.++ (str.to_re (str.++ "2" (str.++ "1" (str.++ "4" (str.++ "6" ""))))) ((_ re.loop 6 6) (re.range "0" "9")))(re.union (re.++ (str.to_re (str.++ "2" (str.++ "1" (str.++ "4" (str.++ "7" (str.++ "3" "")))))) ((_ re.loop 5 5) (re.range "0" "9")))(re.union (re.++ (str.to_re (str.++ "2" (str.++ "1" (str.++ "4" (str.++ "7" (str.++ "4" (str.++ "7" ""))))))) ((_ re.loop 4 4) (re.range "0" "9")))(re.union (re.++ (str.to_re (str.++ "2" (str.++ "1" (str.++ "4" (str.++ "7" (str.++ "4" (str.++ "8" (str.++ "2" "")))))))) ((_ re.loop 3 3) (re.range "0" "9")))(re.union (re.++ (str.to_re (str.++ "2" (str.++ "1" (str.++ "4" (str.++ "7" (str.++ "4" (str.++ "8" (str.++ "3" (str.++ "5" ""))))))))) ((_ re.loop 2 2) (re.range "0" "9"))) (re.++ (str.to_re (str.++ "2" (str.++ "1" (str.++ "4" (str.++ "7" (str.++ "4" (str.++ "8" (str.++ "3" (str.++ "6" (str.++ "4" "")))))))))) (re.range "0" "7")))))))))))) (str.to_re "")))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "9" (str.++ "9" "")))

(define-fun Witness2 () String (str.++ "1" (str.++ "'" (str.++ "9" (str.++ "9" (str.++ "9" (str.++ "." (str.++ "7" (str.++ "5" (str.++ "8" ""))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.union (re.++ ((_ re.loop 1 3) (re.range "0" "9"))(re.++ (re.range "'" "'")(re.++ (re.* (re.++ ((_ re.loop 3 3) (re.range "0" "9")) (re.range "'" "'")))(re.++ ((_ re.loop 3 3) (re.range "0" "9")) (re.opt (re.++ (re.range "." ".") ((_ re.loop 1 3) (re.range "0" "9")))))))) (re.++ ((_ re.loop 1 3) (re.range "0" "9")) (re.opt (re.++ (re.range "." ".") ((_ re.loop 3 3) (re.range "0" "9")))))) (str.to_re "")))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "6" (str.++ "/" (str.++ "2" (str.++ "0" (str.++ "/" (str.++ "2" (str.++ "0" (str.++ "9" (str.++ "1" ""))))))))))

(define-fun Witness2 () String (str.++ "1" (str.++ "2" (str.++ "/" (str.++ "3" (str.++ "0" (str.++ "/" (str.++ "2" (str.++ "0" (str.++ "6" (str.++ "6" (str.++ "\u{a0}" (str.++ "1" (str.++ "8" (str.++ ":" (str.++ "3" (str.++ "2" "")))))))))))))))))

(assert (= regexA (re.++ (re.union (re.++ (str.to_re "")(re.++ (re.opt (re.range "0" "0")) (re.range "1" "9"))) (re.++ (str.to_re "")(re.++ (re.range "1" "1") (re.range "0" "2"))))(re.++ (re.range "/" "/")(re.++ (re.union (re.++ (re.opt (re.range "0" "0")) (re.range "1" "9"))(re.union (re.++ (re.range "1" "2") (re.range "0" "9")) (re.++ (re.range "3" "3") (re.range "0" "1"))))(re.++ (re.range "/" "/")(re.++ (re.opt (re.union (str.to_re (str.++ "1" (str.++ "9" ""))) (str.to_re (str.++ "2" (str.++ "0" "")))))(re.++ (re.range "0" "9")(re.++ (re.range "0" "9")(re.++ (re.opt (re.++ (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))) (re.union (re.++ (re.union (re.++ (re.opt (re.range "0" "0")) (re.range "0" "9"))(re.union (re.++ (re.range "1" "1") (re.range "0" "9")) (re.++ (re.range "2" "2") (re.range "0" "3"))))(re.++ (re.range ":" ":")(re.++ (re.range "0" "5")(re.++ (re.range "0" "9") (re.opt (re.++ (re.range ":" ":")(re.++ (re.range "0" "5") (re.range "0" "9")))))))) (re.++ (re.union (re.++ (re.opt (re.range "0" "0")) (re.range "0" "9")) (re.++ (re.range "1" "1") (re.range "0" "2")))(re.++ (re.range ":" ":")(re.++ (re.range "0" "5")(re.++ (re.range "0" "9")(re.++ (re.opt (re.++ (re.range ":" ":")(re.++ (re.range "0" "5") (re.range "0" "9"))))(re.++ (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))) (re.union (str.to_re (str.++ "A" (str.++ "M" ""))) (str.to_re (str.++ "P" (str.++ "M" ""))))))))))))) (str.to_re "")))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "3" (str.++ "1" (str.++ "-" (str.++ "," (str.++ "A" (str.++ "," (str.++ "-" (str.++ "5" (str.++ "9" (str.++ "8" (str.++ "5" ""))))))))))))

(define-fun Witness2 () String (str.++ "0" (str.++ "8" (str.++ "-" (str.++ "," (str.++ "," (str.++ "b" (str.++ "-" (str.++ "2" (str.++ "8" (str.++ "8" (str.++ "8" ""))))))))))))

(assert (= regexA (re.union (re.++ (str.to_re "")(re.++ (re.union (re.++ (re.union (re.range "1" "9")(re.union (re.++ (re.range "0" "0") (re.range "1" "9"))(re.union (re.++ (re.range "1" "2") (re.range "0" "9")) (str.to_re (str.++ "3" (str.++ "0" ""))))))(re.++ (re.range "-" "-") (re.union (re.++ (re.union (re.range "," ",")(re.union (re.range "A" "A") (re.range "a" "a")))(re.++ (re.union (re.range "," ",")(re.union (re.range "P" "P") (re.range "p" "p"))) (re.union (re.range "," ",")(re.union (re.range "R" "R") (re.range "r" "r")))))(re.union (re.++ (re.union (re.range "," ",")(re.union (re.range "J" "J") (re.range "j" "j")))(re.++ (re.union (re.range "," ",")(re.union (re.range "U" "U") (re.range "u" "u"))) (re.union (re.range "," ",")(re.union (re.range "N" "N") (re.range "n" "n")))))(re.union (re.++ (re.union (re.range "," ",")(re.union (re.range "S" "S") (re.range "s" "s")))(re.++ (re.union (re.range "," ",")(re.union (re.range "E" "E") (re.range "e" "e"))) (re.union (re.range "," ",")(re.union (re.range "P" "P") (re.range "p" "p"))))) (re.++ (re.union (re.range "," ",")(re.union (re.range "N" "N") (re.range "n" "n")))(re.++ (re.union (re.range "," ",")(re.union (re.range "O" "O") (re.range "o" "o"))) (re.union (re.range "," ",")(re.union (re.range "V" "V") (re.range "v" "v")))))))))) (re.++ (re.union (re.range "1" "9")(re.union (re.++ (re.range "0" "0") (re.range "1" "9"))(re.union (re.++ (re.range "1" "2") (re.range "0" "9")) (re.++ (re.range "3" "3") (re.range "0" "1")))))(re.++ (re.range "-" "-") (re.union (re.++ (re.union (re.range "," ",")(re.union (re.range "J" "J") (re.range "j" "j")))(re.++ (re.union (re.range "," ",")(re.union (re.range "A" "A") (re.range "a" "a"))) (re.union (re.range "," ",")(re.union (re.range "N" "N") (re.range "n" "n")))))(re.union (re.++ (re.union (re.range "," ",")(re.union (re.range "M" "M") (re.range "m" "m")))(re.++ (re.union (re.range "," ",")(re.union (re.range "A" "A") (re.range "a" "a"))) (re.union (re.range "," ",")(re.union (re.range "R" "R") (re.range "r" "r")))))(re.union (re.++ (re.union (re.range "," ",")(re.union (re.range "M" "M") (re.range "m" "m")))(re.++ (re.union (re.range "," ",")(re.union (re.range "A" "A") (re.range "a" "a"))) (re.union (re.range "," ",")(re.union (re.range "Y" "Y") (re.range "y" "y")))))(re.union (re.++ (re.union (re.range "," ",")(re.union (re.range "J" "J") (re.range "j" "j")))(re.++ (re.union (re.range "," ",")(re.union (re.range "U" "U") (re.range "u" "u"))) (re.union (re.range "," ",")(re.union (re.range "L" "L") (re.range "l" "l")))))(re.union (re.++ (re.union (re.range "," ",")(re.union (re.range "A" "A") (re.range "a" "a")))(re.++ (re.union (re.range "," ",")(re.union (re.range "U" "U") (re.range "u" "u"))) (re.union (re.range "," ",")(re.union (re.range "G" "G") (re.range "g" "g")))))(re.union (re.++ (re.union (re.range "," ",")(re.union (re.range "O" "O") (re.range "o" "o")))(re.++ (re.union (re.range "," ",")(re.union (re.range "C" "C") (re.range "c" "c"))) (re.union (re.range "," ",")(re.union (re.range "T" "T") (re.range "t" "t"))))) (re.++ (re.union (re.range "," ",")(re.union (re.range "D" "D") (re.range "d" "d")))(re.++ (re.union (re.range "," ",")(re.union (re.range "E" "E") (re.range "e" "e"))) (re.union (re.range "," ",")(re.union (re.range "C" "C") (re.range "c" "c"))))))))))))))(re.++ (re.range "-" "-")(re.++ ((_ re.loop 4 4) (re.range "0" "9")) (str.to_re "")))))(re.union (re.++ (str.to_re "")(re.++ (re.union (re.range "1" "9")(re.union (re.++ (re.range "0" "0") (re.range "1" "9"))(re.union (re.++ (re.range "1" "1") (re.range "0" "9")) (re.++ (re.range "2" "2") (re.range "0" "8")))))(re.++ (re.range "-" "-")(re.++ (re.++ (re.union (re.range "," ",")(re.union (re.range "F" "F") (re.range "f" "f")))(re.++ (re.union (re.range "," ",")(re.union (re.range "E" "E") (re.range "e" "e"))) (re.union (re.range "," ",")(re.union (re.range "B" "B") (re.range "b" "b")))))(re.++ (re.range "-" "-")(re.++ ((_ re.loop 2 2) (re.range "0" "9"))(re.++ (re.union (re.++ (re.union (re.range "0" "0")(re.union (re.range "2" "2")(re.union (re.range "4" "4")(re.union (re.range "6" "6") (re.range "8" "8"))))) (re.union (re.range "1" "3")(re.union (re.range "5" "7") (re.range "9" "9")))) (re.++ (re.union (re.range "1" "1")(re.union (re.range "3" "3")(re.union (re.range "5" "5")(re.union (re.range "7" "7") (re.range "9" "9"))))) (re.union (re.range "0" "1")(re.union (re.range "3" "5") (re.range "7" "9"))))) (str.to_re "")))))))) (re.++ (str.to_re "")(re.++ (re.union (re.range "1" "9")(re.union (re.++ (re.range "0" "0") (re.range "1" "9"))(re.union (re.++ (re.range "1" "1") (re.range "0" "9")) (re.++ (re.range "2" "2") (re.range "0" "9")))))(re.++ (re.range "-" "-")(re.++ (re.++ (re.union (re.range "," ",")(re.union (re.range "F" "F") (re.range "f" "f")))(re.++ (re.union (re.range "," ",")(re.union (re.range "E" "E") (re.range "e" "e"))) (re.union (re.range "," ",")(re.union (re.range "B" "B") (re.range "b" "b")))))(re.++ (re.range "-" "-")(re.++ ((_ re.loop 2 2) (re.range "0" "9"))(re.++ (re.union (re.++ (re.union (re.range "0" "0")(re.union (re.range "2" "2")(re.union (re.range "4" "4")(re.union (re.range "6" "6") (re.range "8" "8"))))) (re.union (re.range "0" "0")(re.union (re.range "4" "4") (re.range "8" "8")))) (re.++ (re.union (re.range "1" "1")(re.union (re.range "3" "3")(re.union (re.range "5" "5")(re.union (re.range "7" "7") (re.range "9" "9"))))) (re.union (re.range "2" "2") (re.range "6" "6")))) (str.to_re ""))))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String "")

(define-fun Witness2 () String "")

(assert (= regexA (re.union (re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))(re.++ (re.* (re.union (re.range "-" ".")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))))(re.++ (re.range "@" "@")(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))(re.++ (re.union (re.++ (re.range "-" "-") (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))) (re.* (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))))(re.++ (re.range "." ".")(re.++ ((_ re.loop 2 3) (re.range "a" "z")) (str.to_re ""))))))))(re.union (re.++ (str.to_re "")(re.++ ((_ re.loop 3 40) (re.union (re.range "'" "'")(re.union (re.range "." ".")(re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))))) (re.range "*" "*")))(re.union (re.++ (re.+ (re.union (re.range "'" "'")(re.union (re.range "." ".")(re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z"))))))(re.++ (re.range "@" "@")(re.++ (re.+ (re.union (re.range "'" "'")(re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))))(re.++ (re.range "." ".")(re.++ (re.+ (re.union (re.range "'" "'")(re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z"))))) (str.to_re ""))))))(re.union (re.++ (re.+ (re.union (re.range "'" "'")(re.union (re.range "." ".")(re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z"))))))(re.++ (re.range "@" "@")(re.++ (re.+ (re.union (re.range "'" "'")(re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))))(re.++ (re.+ (re.range "*" "*")) (str.to_re ""))))) (re.++ (str.to_re "") (str.to_re ""))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "9" (str.++ "3" (str.++ "9" (str.++ ")" (str.++ "7" (str.++ "0" (str.++ "9" (str.++ "8" (str.++ "6" (str.++ "9" (str.++ "8" ""))))))))))))

(define-fun Witness2 () String (str.++ "9" (str.++ "3" (str.++ "9" (str.++ ")" (str.++ "6" (str.++ "5" (str.++ "3" (str.++ "-" (str.++ "8" (str.++ "7" (str.++ "7" (str.++ "3" "")))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.opt (re.range "(" "("))(re.++ (re.union (str.to_re (str.++ "7" (str.++ "8" (str.++ "7" "")))) (str.to_re (str.++ "9" (str.++ "3" (str.++ "9" "")))))(re.++ (re.opt (re.union (re.range ")" ")") (re.range "-" "-")))(re.++ ((_ re.loop 3 3) (re.range "0" "9"))(re.++ (re.opt (re.range "-" "-"))(re.++ (re.union ((_ re.loop 4 4) (re.range "0" "9")) ((_ re.loop 4 4) (re.range "0" "9"))) (str.to_re ""))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "3" ""))

(define-fun Witness2 () String "")

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.union ((_ re.loop 0 5) (re.range "0" "9")) (re.++ ((_ re.loop 0 5) (re.range "0" "9"))(re.++ (re.range "." ".") ((_ re.loop 0 3) (re.range "0" "9"))))) (str.to_re "")))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "9" (str.++ "1" (str.++ "3" (str.++ "8" (str.++ "-" (str.++ "8" (str.++ "9" (str.++ "9" (str.++ "7" ""))))))))))

(define-fun Witness2 () String (str.++ "9" (str.++ "8" (str.++ "1" (str.++ "0" (str.++ "7" (str.++ "8" (str.++ "6" (str.++ "8" "")))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.opt (re.++ (re.range "(" "(")(re.++ ((_ re.loop 2 2) (re.range "1" "9")) (str.to_re (str.++ ")" (str.++ " " ""))))))(re.++ ((_ re.loop 4 4) (re.range "0" "9"))(re.++ (re.opt (re.range "-" "-"))(re.++ ((_ re.loop 4 4) (re.range "0" "9")) (str.to_re ""))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "\u{a1}" (str.++ "." (str.++ "w" (str.++ "m" (str.++ "A" ""))))))

(define-fun Witness2 () String (str.++ "s" (str.++ "\u{d1}" (str.++ "." (str.++ "W" (str.++ "m" (str.++ "A" "")))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.* (re.union (re.range "\u{00}" "\u{09}") (re.range "\u{0b}" "\u{ff}")))(re.++ (re.union (re.++ (re.union (re.range "\u{00}" "-") (re.range "/" "\u{ff}"))(re.++ (re.range "." ".")(re.++ (re.union (re.range "W" "W") (re.range "w" "w"))(re.++ (re.union (re.range "M" "M") (re.range "m" "m")) (re.union (re.range "A" "A") (re.range "a" "a")))))) (re.++ (re.union (re.range "\u{00}" "-") (re.range "/" "\u{ff}"))(re.++ (re.range "." ".")(re.++ (re.union (re.range "M" "M") (re.range "m" "m"))(re.++ (re.union (re.range "P" "P") (re.range "p" "p")) (re.range "3" "3")))))) (str.to_re ""))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "&" (str.++ "l" (str.++ "t" (str.++ ";" (str.++ "i" (str.++ "m" (str.++ "g" (str.++ "%" (str.++ "\u{11}" ""))))))))))

(define-fun Witness2 () String (str.++ "&" (str.++ "l" (str.++ "t" (str.++ ";" (str.++ "I" (str.++ "m" (str.++ "G" (str.++ "\u{d4}" "")))))))))

(assert (= regexA (re.++ (str.to_re (str.++ "&" (str.++ "l" (str.++ "t" (str.++ ";" "")))))(re.++ (re.union (re.range "I" "I") (re.range "i" "i"))(re.++ (re.union (re.range "M" "M") (re.range "m" "m"))(re.++ (re.union (re.range "G" "G") (re.range "g" "g")) (re.++ (re.* (re.union (re.range "\u{00}" "%")(re.union (re.range "'" ":")(re.union (re.range "<" "f")(re.union (re.range "h" "s") (re.range "u" "\u{ff}")))))) (re.union (re.range "\u{00}" "%")(re.union (re.range "'" ".")(re.union (re.range "0" ":")(re.union (re.range "<" "f")(re.union (re.range "h" "s") (re.range "u" "\u{ff}")))))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "0" ""))

(define-fun Witness2 () String (str.++ "6" (str.++ "5" (str.++ "3" (str.++ "8" (str.++ "9" ""))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.union (re.++ (str.to_re (str.++ "6" (str.++ "5" (str.++ "5" (str.++ "3" ""))))) (re.range "0" "5"))(re.union (re.++ (str.to_re (str.++ "6" (str.++ "5" (str.++ "5" ""))))(re.++ (re.range "0" "2") (re.range "0" "9")))(re.union (re.++ (str.to_re (str.++ "6" (str.++ "5" "")))(re.++ (re.range "0" "4")(re.++ (re.range "0" "9") (re.range "0" "9"))))(re.union (re.++ (re.range "6" "6")(re.++ (re.range "0" "4") ((_ re.loop 3 3) (re.range "0" "9"))))(re.union (re.++ (re.range "1" "5") ((_ re.loop 4 4) (re.range "0" "9")))(re.union (re.++ (re.range "1" "9") ((_ re.loop 0 3) (re.range "0" "9"))) (re.range "0" "0"))))))) (str.to_re "")))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "1" (str.++ "1" (str.++ "0" ""))))

(define-fun Witness2 () String (str.++ "1" (str.++ "1" (str.++ "1" (str.++ "0" "")))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.+ (re.range "1" "1"))(re.++ (re.+ (re.range "0" "0")) (str.to_re ""))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "." (str.++ "4" "")))

(define-fun Witness2 () String (str.++ "." (str.++ "5" (str.++ "7" (str.++ "7" "")))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.* (re.range "0" "9"))(re.++ (re.opt (re.range "." "."))(re.++ (re.+ (re.range "0" "9")) (str.to_re "")))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "+" (str.++ "9" (str.++ ")" (str.++ "9" (str.++ "8" (str.++ "9" (str.++ "9" (str.++ "6" "")))))))))

(define-fun Witness2 () String (str.++ "3" (str.++ "8" (str.++ "3" (str.++ "9" (str.++ "3" (str.++ "3" (str.++ "9" (str.++ "6" "")))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.opt (re.range "+" "+"))(re.++ (re.opt (re.range "(" "("))(re.++ (re.+ (re.range "0" "9"))(re.++ (re.opt (re.range ")" ")"))(re.++ (re.opt (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "-" ".")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))))(re.++ ((_ re.loop 1 3) (re.range "0" "9"))(re.++ (re.opt (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "-" ".")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))))(re.++ ((_ re.loop 4 4) (re.range "0" "9")) (str.to_re ""))))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "8" ""))

(define-fun Witness2 () String (str.++ "8" (str.++ "0" "")))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.range "1" "9")(re.++ (re.opt (re.range "0" "0")) (str.to_re ""))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "Z" ""))

(define-fun Witness2 () String (str.++ "i" ""))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.+ (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "a" "z")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))))) (str.to_re "")))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "-" (str.++ "-" (str.++ "-" (str.++ "-" (str.++ "\u{5c}" (str.++ "O" (str.++ "\u{e6}" ""))))))))

(define-fun Witness2 () String (str.++ "r" (str.++ "9" (str.++ "\u{cb}" (str.++ "8" (str.++ "\u{5c}" (str.++ "7" (str.++ "c" ""))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.* (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))(re.++ (re.* (re.range "-" "-"))(re.++ (re.* (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))(re.++ (re.range "\u{5c}" "\u{5c}")(re.++ (re.* (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))) (str.to_re "")))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "\u{d4}" (str.++ "." (str.++ "\u{cd}" ""))))

(define-fun Witness2 () String (str.++ "\u{5c}" (str.++ "H" (str.++ "\u{02}" (str.++ "\u{dc}" (str.++ "." (str.++ "\u{7f}" "")))))))

(assert (= regexA (re.union (re.++ (str.to_re "")(re.++ (re.++ (re.* (re.union (re.range "\u{00}" "\u{09}") (re.range "\u{0b}" "\u{ff}"))) (re.union (re.range "/" "/") (re.range "\u{5c}" "\u{5c}")))(re.++ (re.+ (re.union (re.range "\u{00}" "\u{09}") (re.range "\u{0b}" "\u{ff}")))(re.++ (re.range "." ".")(re.++ (re.opt (re.+ (re.union (re.range "\u{00}" "\u{09}") (re.range "\u{0b}" "\u{ff}")))) (str.to_re ""))))))(re.union (re.++ (str.to_re "")(re.++ (re.++ (re.* (re.union (re.range "\u{00}" "\u{09}") (re.range "\u{0b}" "\u{ff}"))) (re.union (re.range "/" "/") (re.range "\u{5c}" "\u{5c}")))(re.++ (re.+ (re.union (re.range "\u{00}" "\u{09}") (re.range "\u{0b}" "\u{ff}"))) (str.to_re ""))))(re.union (re.++ (str.to_re "")(re.++ (re.+ (re.union (re.range "\u{00}" "\u{09}") (re.range "\u{0b}" "\u{ff}")))(re.++ (re.range "." ".")(re.++ (re.opt (re.+ (re.union (re.range "\u{00}" "\u{09}") (re.range "\u{0b}" "\u{ff}")))) (str.to_re ""))))) (re.++ (str.to_re "")(re.++ (re.+ (re.union (re.range "\u{00}" "\u{09}") (re.range "\u{0b}" "\u{ff}"))) (str.to_re ""))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "8" ""))

(define-fun Witness2 () String (str.++ "9" ""))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.* (re.range "0" "9"))(re.++ (re.range "0" "9")(re.++ (re.opt (re.union (str.to_re "")(re.union (re.++ (re.union (re.range "\u{00}" "\u{09}") (re.range "\u{0b}" "\u{ff}"))(re.++ (re.* (re.range "0" "9")) (re.range "0" "9"))) (re.++ (re.range "," ",")(re.++ (re.* (re.range "0" "9")) (re.range "0" "9")))))) (str.to_re "")))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "-" (str.++ "9" (str.++ "8" ""))))

(define-fun Witness2 () String (str.++ "9" ""))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.opt (re.union (re.range "+" "+") (re.range "-" "-")))(re.++ (re.+ (re.range "0" "9")) (str.to_re ""))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "n" (str.++ "." (str.++ "8" (str.++ "." "")))))

(define-fun Witness2 () String (str.++ "." (str.++ "." (str.++ "9" ""))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.+ (re.++ (re.opt (re.range "." "."))(re.++ (re.opt (re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_") (re.range "a" "z"))))))(re.++ (re.opt (re.range "." "."))(re.++ (re.opt (re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_") (re.range "a" "z")))))) (re.opt (re.range "." "."))))))) (str.to_re "")))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "2" (str.++ "," (str.++ "8" (str.++ "8" "")))))

(define-fun Witness2 () String (str.++ "1" (str.++ "." (str.++ "9" (str.++ "," (str.++ "8" (str.++ "1" "")))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.opt (re.++ (re.range "0" "9") (re.range "." ".")))(re.++ ((_ re.loop 1 3) (re.range "0" "9"))(re.++ (re.range "," ",")(re.++ ((_ re.loop 2 2) (re.range "0" "9")) (str.to_re ""))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "7" (str.++ "4" (str.++ "0" ""))))

(define-fun Witness2 () String (str.++ "6" (str.++ "7" (str.++ "9" ""))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.union (re.++ (str.to_re (str.++ "0" (str.++ "0" ""))) (re.range "1" "9"))(re.union (re.++ (re.range "0" "0")(re.++ (re.range "1" "9") (re.range "0" "9")))(re.union (re.++ (re.range "1" "6")(re.++ (re.range "0" "9") (re.range "0" "9")))(re.union (re.++ (re.range "7" "7")(re.++ (re.range "0" "6") (re.range "0" "9"))) (re.++ (str.to_re (str.++ "7" (str.++ "7" "")))(re.++ (re.range "0" "2")(re.++ (re.range "-" "-")(re.++ ((_ re.loop 2 2) (re.range "0" "9"))(re.++ (re.range "-" "-") ((_ re.loop 4 4) (re.range "0" "9"))))))))))) (str.to_re "")))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "a" (str.++ "-" (str.++ "/" (str.++ "%" "")))))

(define-fun Witness2 () String (str.++ "e" (str.++ "r" (str.++ ":" (str.++ "/" (str.++ "/" (str.++ "d" (str.++ "8" (str.++ "_" (str.++ ":" (str.++ "7" (str.++ "?" (str.++ "5" (str.++ "e" (str.++ "[" (str.++ "9" (str.++ "9" (str.++ "0" (str.++ "&" (str.++ "e" (str.++ "l" (str.++ "i" (str.++ "[" (str.++ "&" (str.++ "3" (str.++ "=" ""))))))))))))))))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.opt (re.++ (re.+ (re.range "a" "z")) (str.to_re (str.++ ":" (str.++ "/" (str.++ "/" ""))))))(re.++ (re.opt (re.++ (re.* (re.union (re.range "." ".")(re.union (re.range "0" "9")(re.union (re.range "_" "_") (re.range "a" "z")))))(re.++ (re.opt (re.++ (re.range ":" ":") (re.* (re.union (re.range "." ".")(re.union (re.range "0" "9")(re.union (re.range "_" "_") (re.range "a" "z"))))))) (re.range "@" "@"))))(re.++ (re.union (re.+ (re.++ (re.range "a" "z")(re.++ (re.+ (re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "_" "_") (re.range "a" "z"))))) (re.opt (re.range "." "."))))) (re.++ ((_ re.loop 1 3) (re.range "0" "9")) ((_ re.loop 3 3) (re.++ (re.range "." ".") ((_ re.loop 1 3) (re.range "0" "9"))))))(re.++ (re.opt (re.++ (re.range ":" ":") (re.+ (re.range "0" "9"))))(re.++ (re.opt (re.+ (re.++ (re.range "/" "/") (re.* (re.union (re.range "%" "%")(re.union (re.range "." ".")(re.union (re.range "0" "9")(re.union (re.range "_" "_") (re.range "a" "z")))))))))(re.++ (re.opt (re.++ (re.range "?" "?") (re.+ (re.++ (re.opt (re.range "&" "&"))(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "[" "[")(re.union (re.range "]" "]")(re.union (re.range "_" "_") (re.range "a" "z")))))) (re.opt (re.++ (re.opt (re.range "=" "=")) (re.* (re.union (re.range "0" "9")(re.union (re.range ";" ";")(re.union (re.range "_" "_") (re.range "a" "z"))))))))))))(re.++ (re.opt (re.++ (re.range "#" "#") (re.+ (re.union (re.range "0" "9")(re.union (re.range "_" "_") (re.range "a" "z")))))) (str.to_re "")))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "0" (str.++ "4" (str.++ "6" (str.++ "9" (str.++ "4" (str.++ "1" (str.++ "9" (str.++ "9" "")))))))))

(define-fun Witness2 () String (str.++ "9" (str.++ "6" (str.++ "8" (str.++ "8" (str.++ "8" (str.++ "0" (str.++ "9" (str.++ "5" "")))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ ((_ re.loop 8 8) (re.range "0" "9")) (str.to_re "")))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "4" (str.++ "9" (str.++ "8" (str.++ "8" (str.++ ":" (str.++ "b" (str.++ "0" (str.++ "7" (str.++ "C" (str.++ ":" (str.++ "0" (str.++ ":" (str.++ "0" (str.++ ":" (str.++ "0" (str.++ ":" (str.++ "5" (str.++ "D" (str.++ "9" (str.++ "F" (str.++ ":" (str.++ "0" (str.++ ":" (str.++ "0" "")))))))))))))))))))))))))

(define-fun Witness2 () String (str.++ "f" (str.++ "9" (str.++ "8" (str.++ "a" (str.++ ":" (str.++ "8" (str.++ "8" (str.++ "4" (str.++ "3" (str.++ ":" (str.++ "0" (str.++ ":" (str.++ "8" (str.++ "D" (str.++ "A" (str.++ "5" (str.++ ":" (str.++ "0" (str.++ ":" (str.++ "4" (str.++ "4" (str.++ "9" (str.++ "8" (str.++ ":" (str.++ "0" (str.++ ":" (str.++ "8" (str.++ "c" (str.++ "b" (str.++ "8" "")))))))))))))))))))))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.union ((_ re.loop 4 4) (re.union (re.range "0" "9")(re.union (re.range "A" "F") (re.range "a" "f")))) (re.range "0" "0"))(re.++ ((_ re.loop 7 7) (re.++ (re.range ":" ":") (re.union ((_ re.loop 4 4) (re.union (re.range "0" "9")(re.union (re.range "A" "F") (re.range "a" "f")))) (re.range "0" "0")))) (str.to_re ""))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "F" (str.++ "9" (str.++ ":" (str.++ "8" (str.++ "8" (str.++ ":" (str.++ "D" (str.++ "9" (str.++ ":" (str.++ "1" (str.++ "f" (str.++ ":" (str.++ "a" (str.++ "B" (str.++ ":" (str.++ "5" (str.++ "d" ""))))))))))))))))))

(define-fun Witness2 () String (str.++ "7" (str.++ "1" (str.++ ":" (str.++ "a" (str.++ "a" (str.++ ":" (str.++ "e" (str.++ "A" (str.++ ":" (str.++ "d" (str.++ "b" (str.++ ":" (str.++ "D" (str.++ "2" (str.++ ":" (str.++ "2" (str.++ "B" ""))))))))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ ((_ re.loop 5 5) (re.++ (re.union (re.range "0" "9")(re.union (re.range "A" "F") (re.range "a" "f")))(re.++ (re.union (re.range "0" "9")(re.union (re.range "A" "F") (re.range "a" "f"))) (re.range ":" ":"))))(re.++ (re.++ (re.union (re.range "0" "9")(re.union (re.range "A" "F") (re.range "a" "f"))) (re.union (re.range "0" "9")(re.union (re.range "A" "F") (re.range "a" "f")))) (str.to_re ""))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "+" (str.++ "9" (str.++ "5" (str.++ "3" (str.++ "r" ""))))))

(define-fun Witness2 () String (str.++ "+" (str.++ "9" (str.++ "." (str.++ "3" (str.++ "i" ""))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.union (re.++ (re.opt (re.union (re.range "+" "+") (re.range "-" "-")))(re.++ (re.union (re.++ (re.+ (re.range "0" "9"))(re.++ (re.opt (re.range "." ".")) (re.* (re.range "0" "9")))) (re.++ (re.* (re.range "0" "9"))(re.++ (re.opt (re.range "." ".")) (re.+ (re.range "0" "9")))))(re.++ (re.opt (re.++ (re.union (re.range "E" "E") (re.range "e" "e"))(re.++ (re.opt (re.union (re.range "+" "+") (re.range "-" "-")))(re.++ (re.opt (re.range "0" "2")) ((_ re.loop 1 2) (re.range "0" "9")))))) (re.opt (re.range "r" "r")))))(re.union (re.++ (re.opt (re.union (re.range "+" "+") (re.range "-" "-")))(re.++ (re.opt (re.++ (re.union (re.++ (re.+ (re.range "0" "9"))(re.++ (re.opt (re.range "." ".")) (re.* (re.range "0" "9")))) (re.++ (re.* (re.range "0" "9"))(re.++ (re.opt (re.range "." ".")) (re.+ (re.range "0" "9"))))) (re.opt (re.++ (re.union (re.range "E" "E") (re.range "e" "e"))(re.++ (re.opt (re.union (re.range "+" "+") (re.range "-" "-")))(re.++ (re.opt (re.range "0" "2")) ((_ re.loop 1 2) (re.range "0" "9")))))))) (re.range "i" "i"))) (re.++ (re.++ (re.opt (re.union (re.range "+" "+") (re.range "-" "-")))(re.++ (re.union (re.++ (re.+ (re.range "0" "9"))(re.++ (re.opt (re.range "." ".")) (re.* (re.range "0" "9")))) (re.++ (re.* (re.range "0" "9"))(re.++ (re.opt (re.range "." ".")) (re.+ (re.range "0" "9")))))(re.++ (re.opt (re.++ (re.union (re.range "E" "E") (re.range "e" "e"))(re.++ (re.opt (re.union (re.range "+" "+") (re.range "-" "-")))(re.++ (re.opt (re.range "0" "2")) ((_ re.loop 1 2) (re.range "0" "9")))))) (re.opt (re.range "r" "r"))))) (re.++ (re.union (re.range "+" "+") (re.range "-" "-"))(re.++ (re.opt (re.++ (re.union (re.++ (re.+ (re.range "0" "9"))(re.++ (re.opt (re.range "." ".")) (re.* (re.range "0" "9")))) (re.++ (re.* (re.range "0" "9"))(re.++ (re.opt (re.range "." ".")) (re.+ (re.range "0" "9"))))) (re.opt (re.++ (re.union (re.range "E" "E") (re.range "e" "e"))(re.++ (re.opt (re.union (re.range "+" "+") (re.range "-" "-")))(re.++ (re.opt (re.range "0" "2")) ((_ re.loop 1 2) (re.range "0" "9")))))))) (re.range "i" "i")))))) (str.to_re "")))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ " " (str.++ " " (str.++ " " (str.++ " " (str.++ " " (str.++ " " (str.++ " " ""))))))))

(define-fun Witness2 () String (str.++ " " (str.++ " " (str.++ " " (str.++ " " (str.++ " " (str.++ " " (str.++ " " ""))))))))

(assert (= regexA (re.union (str.to_re (str.++ " " (str.++ " " (str.++ " " (str.++ " " (str.++ " " (str.++ " " (str.++ " " "")))))))) (re.++ (str.to_re (str.++ "1" (str.++ "0" (str.++ "4" (str.++ "8" "")))))(re.++ (re.range "0" "4")(re.++ (re.range "0" "9") (re.range "0" "9")))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "0" (str.++ "1" (str.++ "1" (str.++ "-" (str.++ "9" (str.++ "6" (str.++ "8" (str.++ "-" (str.++ "4" (str.++ "5" (str.++ "9" (str.++ "-" (str.++ "0" (str.++ "2" (str.++ "3" (str.++ "8" "")))))))))))))))))

(define-fun Witness2 () String (str.++ "0" (str.++ "1" (str.++ "1" (str.++ "-" (str.++ "9" (str.++ "7" (str.++ "8" (str.++ "8" (str.++ "9" (str.++ "-" (str.++ "9" (str.++ "-" (str.++ "0" (str.++ "4" (str.++ "0" (str.++ "9" (str.++ "6" (str.++ "9" "")))))))))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (str.to_re (str.++ "0" (str.++ "1" (str.++ "1" (str.++ "-" "")))))(re.++ (re.++ (re.range "1" "9") ((_ re.loop 1 5) (re.range "0" "9")))(re.++ (re.range "-" "-")(re.++ (re.+ (re.range "0" "9"))(re.++ (re.range "-" "-")(re.++ (re.++ (re.opt (re.range "0" "0"))(re.++ (re.range "0" "9") (re.+ (re.range "0" "9"))))(re.++ (re.opt (re.++ (re.+ (re.union (re.range "\u{00}" ",")(re.union (re.range "." "/") (re.range ":" "\u{ff}")))) ((_ re.loop 1 4) (re.range "0" "9")))) (str.to_re "")))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "3" (str.++ "8" (str.++ "5" (str.++ "8" (str.++ "3" (str.++ "9" (str.++ "9" (str.++ "1" (str.++ "9" (str.++ "8" (str.++ "2" (str.++ "9" (str.++ "3" (str.++ "5" "")))))))))))))))

(define-fun Witness2 () String (str.++ "3" (str.++ "0" (str.++ "0" (str.++ "3" (str.++ "1" (str.++ "9" (str.++ "0" (str.++ "5" (str.++ "9" (str.++ "8" (str.++ "5" (str.++ "1" (str.++ "9" (str.++ "9" "")))))))))))))))

(assert (= regexA (re.union (re.++ (str.to_re "")(re.++ (str.to_re (str.++ "3" (str.++ "0" "")))(re.++ (re.range "0" "5")(re.++ ((_ re.loop 11 11) (re.range "0" "9")) (str.to_re "")))))(re.union (re.++ (str.to_re "")(re.++ (str.to_re (str.++ "3" (str.++ "6" "")))(re.++ ((_ re.loop 12 12) (re.range "0" "9")) (str.to_re "")))) (re.++ (str.to_re "")(re.++ (re.++ (str.to_re (str.++ "3" (str.++ "8" ""))) (re.range "0" "8"))(re.++ ((_ re.loop 11 11) (re.range "0" "9")) (str.to_re ""))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String "")

(define-fun Witness2 () String (str.++ "5" (str.++ "2" (str.++ "8" (str.++ "-" (str.++ "9" (str.++ "9" (str.++ "4" (str.++ "-" (str.++ "9" (str.++ "9" (str.++ "5" (str.++ "9" (str.++ "9" (str.++ "9" (str.++ "3" (str.++ "-" (str.++ "8" (str.++ "4" (str.++ "8" (str.++ "-" (str.++ "8" (str.++ "9" (str.++ "7" (str.++ "7" "")))))))))))))))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.* (re.++ ((_ re.loop 3 3) (re.range "0" "9"))(re.++ (re.range "-" "-")(re.++ ((_ re.loop 3 3) (re.range "0" "9"))(re.++ (re.range "-" "-") ((_ re.loop 4 4) (re.range "0" "9"))))))) (str.to_re "")))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "9" (str.++ "9" (str.++ "2" (str.++ "8" (str.++ "0" (str.++ "-" (str.++ "8" (str.++ "9" (str.++ "8" (str.++ "9" "")))))))))))

(define-fun Witness2 () String (str.++ "3" (str.++ "9" (str.++ "9" (str.++ "8" (str.++ "5" (str.++ "-" (str.++ "8" (str.++ "3" (str.++ "4" (str.++ "1" "")))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ ((_ re.loop 5 5) (re.range "0" "9"))(re.++ (re.range "-" "-")(re.++ ((_ re.loop 4 4) (re.range "0" "9")) (str.to_re "")))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "3" (str.++ "7" "")))

(define-fun Witness2 () String (str.++ "9" (str.++ "8" (str.++ "." (str.++ "2" (str.++ "5" ""))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.* (re.range "0" "9"))(re.++ (re.opt (re.range "." "."))(re.++ (re.opt (re.union (str.to_re (str.++ "2" (str.++ "5" "")))(re.union (str.to_re (str.++ "5" (str.++ "0" "")))(re.union (re.range "5" "5")(re.union (str.to_re (str.++ "7" (str.++ "5" "")))(re.union (re.range "0" "0") (str.to_re (str.++ "0" (str.++ "0" ""))))))))) (str.to_re "")))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "A" (str.++ "A" "")))

(define-fun Witness2 () String (str.++ "V" (str.++ "T" "")))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.union (re.++ (re.range "A" "A") (re.union (re.range "A" "A")(re.union (re.range "E" "E")(re.union (re.range "K" "L")(re.union (re.range "P" "P")(re.union (re.range "R" "S") (re.range "Z" "Z")))))))(re.union (re.++ (re.range "C" "C") (re.union (re.range "A" "A")(re.union (re.range "O" "O") (re.range "T" "T"))))(re.union (re.++ (re.range "D" "D") (re.union (re.range "C" "C") (re.range "E" "E")))(re.union (re.++ (re.range "F" "F") (re.range "L" "M"))(re.union (re.++ (re.range "G" "G") (re.union (re.range "A" "A") (re.range "U" "U")))(re.union (str.to_re (str.++ "H" (str.++ "I" "")))(re.union (re.++ (re.range "I" "I") (re.union (re.range "A" "A")(re.union (re.range "D" "D")(re.union (re.range "L" "L") (re.range "N" "N")))))(re.union (re.++ (re.range "K" "K") (re.union (re.range "S" "S") (re.range "Y" "Y")))(re.union (str.to_re (str.++ "L" (str.++ "A" "")))(re.union (re.++ (re.range "M" "M") (re.union (re.range "A" "A")(re.union (re.range "D" "E")(re.union (re.range "H" "I")(re.union (re.range "N" "P") (re.range "S" "T"))))))(re.union (re.++ (re.range "N" "N") (re.union (re.range "C" "E")(re.union (re.range "H" "H")(re.union (re.range "J" "J")(re.union (re.range "M" "M")(re.union (re.range "V" "V") (re.range "Y" "Y")))))))(re.union (re.++ (re.range "O" "O") (re.union (re.range "H" "H")(re.union (re.range "K" "K") (re.range "R" "R"))))(re.union (re.++ (re.range "P" "P") (re.union (re.range "A" "A")(re.union (re.range "R" "R") (re.range "W" "W"))))(re.union (str.to_re (str.++ "R" (str.++ "I" "")))(re.union (re.++ (re.range "S" "S") (re.range "C" "D"))(re.union (re.++ (re.range "T" "T") (re.union (re.range "N" "N") (re.range "X" "X")))(re.union (str.to_re (str.++ "U" (str.++ "T" "")))(re.union (re.++ (re.range "V" "V") (re.union (re.range "A" "A")(re.union (re.range "I" "I") (re.range "T" "T")))) (re.++ (re.range "W" "W") (re.union (re.range "A" "A")(re.union (re.range "I" "I")(re.union (re.range "V" "V") (re.range "Y" "Y"))))))))))))))))))))))) (str.to_re "")))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "0" (str.++ "8" (str.++ ":" (str.++ "1" (str.++ "\u{a0}" (str.++ "p" (str.++ "m" (str.++ "\u{0b}" (str.++ "\u{0d}" (str.++ "\u{a0}" "")))))))))))

(define-fun Witness2 () String (str.++ "0" (str.++ "8" (str.++ ":" (str.++ "5" (str.++ "6" (str.++ "\u{0c}" (str.++ "a" (str.++ "m" (str.++ "\u{85}" (str.++ "\u{0d}" (str.++ "\u{a0}" ""))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (re.union (re.++ (re.range "1" "1") (re.range "0" "2"))(re.union (re.++ (re.range "0" "0") (re.range "1" "9")) (re.range "1" "9")))(re.++ (re.range ":" ":")(re.++ (re.union (re.++ (re.range "0" "5") (re.range "0" "9")) (re.range "1" "9"))(re.++ (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))(re.++ (re.union (str.to_re (str.++ "a" (str.++ "m" ""))) (str.to_re (str.++ "p" (str.++ "m" ""))))(re.++ (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))) (str.to_re "")))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "5" (str.++ "." (str.++ "9" (str.++ "e" (str.++ "+" (str.++ "9" (str.++ "9" ""))))))))

(define-fun Witness2 () String (str.++ "2" (str.++ "9" (str.++ "E" (str.++ "0" "")))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.++ (re.opt (re.union (re.range "+" "+") (re.range "-" "-")))(re.++ (re.union (re.++ (re.+ (re.range "0" "9"))(re.++ (re.opt (re.range "." ".")) (re.* (re.range "0" "9")))) (re.++ (re.* (re.range "0" "9"))(re.++ (re.opt (re.range "." ".")) (re.+ (re.range "0" "9"))))) (re.opt (re.++ (re.union (re.range "E" "E") (re.range "e" "e"))(re.++ (re.opt (re.union (re.range "+" "+") (re.range "-" "-")))(re.++ (re.opt (re.range "0" "2")) ((_ re.loop 1 2) (re.range "0" "9")))))))) (str.to_re "")))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "8" (str.++ "8" (str.++ "8" (str.++ "8" (str.++ "8" ""))))))

(define-fun Witness2 () String (str.++ "j" (str.++ "6" (str.++ "Y" (str.++ "9" (str.++ "M" (str.++ "9" "")))))))

(assert (= regexA (re.union (re.++ (str.to_re "")(re.++ ((_ re.loop 5 5) (re.range "0" "9")) (str.to_re ""))) (re.++ (str.to_re "")(re.++ (re.++ (re.union (re.range "A" "Z") (re.range "a" "z"))(re.++ (re.range "0" "9")(re.++ (re.union (re.range "A" "Z") (re.range "a" "z"))(re.++ (re.opt (re.range " " " "))(re.++ (re.range "0" "9")(re.++ (re.union (re.range "A" "Z") (re.range "a" "z")) (re.range "0" "9"))))))) (str.to_re ""))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "F" (str.++ "D" (str.++ "4" ""))))

(define-fun Witness2 () String (str.++ "6" (str.++ "Z" (str.++ "9" (str.++ "8" (str.++ "9" ""))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.union ((_ re.loop 2 2) (re.range "A" "Z"))(re.union (re.++ (re.range "A" "Z") (re.range "0" "9")) (re.++ (re.range "0" "9") (re.range "A" "Z"))))(re.++ (re.range "1" "9")(re.++ (re.opt ((_ re.loop 1 3) (re.range "0" "9"))) (str.to_re "")))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "8" (str.++ "7" (str.++ "g" (str.++ "t" "")))))

(define-fun Witness2 () String (str.++ "0" (str.++ "8" (str.++ "8" (str.++ "k" "")))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_") (re.range "a" "z"))))) (str.to_re "")))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "6" (str.++ "8" (str.++ "9" (str.++ "9" (str.++ "." (str.++ "1" (str.++ "2" (str.++ "." (str.++ "5" (str.++ "." (str.++ "0" (str.++ "1" "")))))))))))))

(define-fun Witness2 () String (str.++ "9" (str.++ "9" (str.++ "5" (str.++ "9" (str.++ "." (str.++ "0" (str.++ "8" (str.++ "." (str.++ "2" (str.++ "9" (str.++ "." (str.++ "0" (str.++ "6" ""))))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ ((_ re.loop 4 4) (re.range "0" "9"))(re.++ (re.range "." ".")(re.++ (re.union (re.++ (re.opt (re.range "0" "0")) (re.range "1" "9")) (re.++ (re.range "1" "1") (re.range "0" "2")))(re.++ (re.range "." ".")(re.++ (re.union (re.++ (re.opt (re.range "0" "0")) (re.range "1" "9"))(re.union (re.++ (re.range "1" "2") (re.range "0" "9")) (re.++ (re.range "3" "3") (re.range "0" "1"))))(re.++ (re.range "." ".")(re.++ ((_ re.loop 2 2) (re.range "0" "9")) (str.to_re "")))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "\u{f6}" (str.++ "\u{c9}" (str.++ " " (str.++ "\u{d6}" (str.++ "O" ""))))))

(define-fun Witness2 () String (str.++ "\u{d6}" (str.++ "k" "")))

(assert (= regexA (re.++ (str.to_re "")(re.++ ((_ re.loop 1 22) (re.union (re.range " " " ")(re.union (re.range "'" "'")(re.union (re.range "-" ".")(re.union (re.range "A" "Z")(re.union (re.range "a" "z")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))) (str.to_re "")))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "8" (str.++ "@" (str.++ "_" (str.++ "." (str.++ "a" (str.++ "Z" "")))))))

(define-fun Witness2 () String (str.++ "t" (str.++ "@" (str.++ "_" (str.++ "k" (str.++ "o" (str.++ "." (str.++ "c" (str.++ "O" (str.++ "c" (str.++ "W" (str.++ "z" ""))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.+ (re.union (re.range "-" ".")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_") (re.range "a" "z"))))))(re.++ (re.range "@" "@")(re.++ (re.+ (re.union (re.range "-" ".")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_") (re.range "a" "z"))))))(re.++ (re.range "." ".")(re.++ ((_ re.loop 2 5) (re.union (re.range "A" "Z") (re.range "a" "z"))) (str.to_re "")))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "0" (str.++ "3" (str.++ "/" (str.++ "3" (str.++ "1" (str.++ "/" (str.++ "1" (str.++ "8" (str.++ "4" (str.++ "8" "")))))))))))

(define-fun Witness2 () String (str.++ "1" (str.++ "1" (str.++ "/" (str.++ "1" (str.++ "8" (str.++ "/" (str.++ "8" (str.++ "9" (str.++ "8" (str.++ "9" "")))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.union (re.++ (re.range "0" "0") (re.range "1" "9")) (re.++ (re.range "1" "1") (re.range "0" "2")))(re.++ (re.range "/" "/")(re.++ (re.union (re.++ (re.range "0" "0") (re.range "1" "9"))(re.union (re.++ (re.range "1" "1") (re.range "0" "9"))(re.union (re.++ (re.range "2" "2") (re.range "0" "9")) (re.++ (re.range "3" "3") (re.range "0" "1")))))(re.++ (re.range "/" "/")(re.++ ((_ re.loop 4 4) (re.range "0" "9")) (str.to_re "")))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "2" (str.++ "9" (str.++ "4" (str.++ "9" (str.++ "3" ""))))))

(define-fun Witness2 () String (str.++ "P" (str.++ "8" (str.++ "C" (str.++ "\u{a0}" (str.++ "3" (str.++ "X" (str.++ "7" ""))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.union (re.++ ((_ re.loop 5 5) (re.range "0" "9"))(re.++ (re.range "-" "-") ((_ re.loop 4 4) (re.range "0" "9"))))(re.union ((_ re.loop 5 5) (re.range "0" "9")) (re.++ (re.union (re.range "A" "C")(re.union (re.range "E" "E")(re.union (re.range "G" "H")(re.union (re.range "J" "N")(re.union (re.range "P" "P")(re.union (re.range "R" "T")(re.union (re.range "V" "V")(re.union (re.range "X" "Y")(re.union (re.range "a" "c")(re.union (re.range "e" "e")(re.union (re.range "g" "h")(re.union (re.range "j" "n")(re.union (re.range "p" "p")(re.union (re.range "r" "t")(re.union (re.range "v" "v") (re.range "x" "y"))))))))))))))))(re.++ (re.range "0" "9")(re.++ (re.union (re.range "A" "Z") (re.range "a" "z"))(re.++ (re.opt (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (re.range "0" "9")(re.++ (re.union (re.range "A" "Z") (re.range "a" "z")) (re.range "0" "9"))))))))) (str.to_re "")))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "7" (str.++ "5" (str.++ "1" (str.++ "0" (str.++ "3" (str.++ "1" (str.++ "-" (str.++ "9" (str.++ "4" (str.++ "3" (str.++ "0" ""))))))))))))

(define-fun Witness2 () String (str.++ "1" (str.++ "1" (str.++ "0" (str.++ "8" (str.++ "3" (str.++ "1" (str.++ "-" (str.++ "0" (str.++ "3" (str.++ "8" (str.++ "7" ""))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ ((_ re.loop 2 2) (re.range "0" "9"))(re.++ (re.union (re.++ (re.range "0" "0") (re.range "1" "9")) (re.++ (re.range "1" "1") (re.range "0" "2")))(re.++ (re.union (re.++ (re.range "0" "0") (re.range "1" "9"))(re.union (re.++ (re.range "1" "2") (re.range "0" "9")) (re.++ (re.range "3" "3") (re.range "0" "1"))))(re.++ (re.range "-" "-")(re.++ ((_ re.loop 4 4) (re.range "0" "9")) (str.to_re "")))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "0" (str.++ "." (str.++ "0" (str.++ "0" "")))))

(define-fun Witness2 () String (str.++ "2" (str.++ "5" (str.++ "0" (str.++ "0" "")))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.* (re.range "0" "9"))(re.++ (re.opt (re.range "0" "9"))(re.++ (re.union (re.range "5" "5") (re.range "0" "0"))(re.++ (re.opt (re.range "." "."))(re.++ (re.opt (re.union (re.range "0" "0") (str.to_re (str.++ "0" (str.++ "0" ""))))) (str.to_re "")))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ " " (str.++ " " (str.++ " " (str.++ "8" (str.++ ":" (str.++ "4" (str.++ "7" (str.++ " " (str.++ "P" (str.++ "M" (str.++ " " (str.++ " " "")))))))))))))

(define-fun Witness2 () String (str.++ "9" (str.++ ":" (str.++ "4" (str.++ "7" (str.++ "P" (str.++ "m" "")))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.* (re.range " " " "))(re.++ (re.union (re.++ (re.opt (re.range "0" "1")) (re.range "0" "9")) (re.++ (re.range "2" "2") (re.range "0" "3")))(re.++ (re.range ":" ":")(re.++ (re.range "0" "5")(re.++ (re.range "0" "9")(re.++ (re.* (re.range " " " "))(re.++ (re.union (re.range "A" "A")(re.union (re.range "P" "P")(re.union (re.range "a" "a") (re.range "p" "p"))))(re.++ (re.union (re.range "M" "M") (re.range "m" "m"))(re.++ (re.* (re.range " " " ")) (str.to_re "")))))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "S" (str.++ "K" (str.++ "8" (str.++ "0" (str.++ "6" (str.++ "1" (str.++ "9" (str.++ "8" (str.++ "8" (str.++ "1" (str.++ "9" (str.++ "9" "")))))))))))))

(define-fun Witness2 () String (str.++ "S" (str.++ "K" (str.++ "9" (str.++ "0" (str.++ "9" (str.++ "8" (str.++ "5" (str.++ "9" (str.++ "9" (str.++ "1" (str.++ "0" (str.++ "9" "")))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.opt (re.union (str.to_re (str.++ "P" (str.++ "L" ""))) (str.to_re (str.++ "S" (str.++ "K" "")))))(re.++ ((_ re.loop 10 10) (re.range "0" "9")) (str.to_re ""))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "K" (str.++ "t" (str.++ "e" (str.++ "m" (str.++ "a" ""))))))

(define-fun Witness2 () String (str.++ "M" (str.++ "q" (str.++ "e" (str.++ "n" (str.++ "g" (str.++ "a" "")))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.range "A" "Z")(re.++ (re.+ (re.range "a" "z"))(re.++ (re.++ (re.union (re.++ (re.range "e" "e") (re.union (re.range "m" "m") (str.to_re (str.++ "n" (str.++ "g" ""))))) (str.to_re (str.++ "s" (str.++ "t" (str.++ "r" ""))))) (re.range "a" "a")) (str.to_re "")))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "B" (str.++ "\u{a0}" (str.++ "\u{85}" (str.++ "C" (str.++ "\u{0d}" ""))))))

(define-fun Witness2 () String (str.++ "\u{a0}" (str.++ "\u{a0}" (str.++ "g" (str.++ "\u{a0}" "")))))

(assert (= regexA (re.++ (str.to_re "")(re.++ ((_ re.loop 4 32) (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "A" "z")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))) (str.to_re "")))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "3" (str.++ "6" (str.++ "8" (str.++ "2" (str.++ "0" (str.++ "7" (str.++ "3" (str.++ "1" (str.++ "9" (str.++ "2" "")))))))))))

(define-fun Witness2 () String (str.++ "0" (str.++ "0" (str.++ "3" (str.++ "9" (str.++ "3" (str.++ "4" (str.++ "8" (str.++ "3" (str.++ "2" (str.++ "9" (str.++ "8" (str.++ "4" (str.++ "8" (str.++ "7" "")))))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.opt (re.++ (re.union (re.range "+" "+") (str.to_re (str.++ "0" (str.++ "0" "")))) (str.to_re (str.++ "3" (str.++ "9" "")))))(re.++ (re.++ (re.range "3" "3")(re.++ (re.range "1" "6") (re.range "0" "9")))(re.++ ((_ re.loop 7 7) (re.range "0" "9")) (str.to_re "")))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "D" (str.++ "B" (str.++ "Y" (str.++ "Y" (str.++ "B" (str.++ "0" (str.++ "9" (str.++ "6" (str.++ "5" (str.++ "D" "")))))))))))

(define-fun Witness2 () String (str.++ "P" (str.++ "A" (str.++ "Z" (str.++ "U" (str.++ "K" (str.++ "9" (str.++ "3" (str.++ "8" (str.++ "9" (str.++ "I" "")))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ ((_ re.loop 5 5) (re.range "A" "Z"))(re.++ ((_ re.loop 4 4) (re.range "0" "9"))(re.++ (re.range "A" "Z") (str.to_re "")))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "5" (str.++ "2" (str.++ "7" (str.++ "6" (str.++ "9" (str.++ "8" (str.++ "0" (str.++ "9" "")))))))))

(define-fun Witness2 () String (str.++ "C" (str.++ "Z" (str.++ "8" (str.++ "6" (str.++ "8" (str.++ "0" (str.++ "8" (str.++ "7" (str.++ "0" (str.++ "8" (str.++ "9" ""))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.opt (str.to_re (str.++ "C" (str.++ "Z" ""))))(re.++ ((_ re.loop 8 10) (re.range "0" "9")) (str.to_re ""))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ " " (str.++ " " (str.++ "1" (str.++ "0" (str.++ "0" (str.++ "." "")))))))

(define-fun Witness2 () String (str.++ "1" (str.++ "0" (str.++ "0" ""))))

(assert (= regexA (re.union (re.++ (str.to_re "")(re.++ (re.opt (re.union (re.range "+" "+") (re.range "-" "-")))(re.++ (re.* (re.range " " " "))(re.++ (str.to_re (str.++ "1" (str.++ "0" (str.++ "0" ""))))(re.++ (re.opt (re.++ (re.range "." ".") ((_ re.loop 0 2) (re.range "0" "0"))))(re.++ (re.* (re.range " " " "))(re.++ (re.opt (re.range "%" "%")) (str.to_re "")))))))) (re.++ (str.to_re "")(re.++ (re.opt (re.union (re.range "+" "+") (re.range "-" "-")))(re.++ (re.* (re.range " " " "))(re.++ ((_ re.loop 1 2) (re.range "0" "9"))(re.++ (re.opt (re.++ (re.range "." ".") ((_ re.loop 1 2) (re.range "0" "9"))))(re.++ (re.* (re.range " " " "))(re.++ (re.opt (re.range "%" "%")) (str.to_re "")))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "8" (str.++ "5" (str.++ "9" (str.++ "5" (str.++ "9" ""))))))

(define-fun Witness2 () String (str.++ "9" (str.++ "9" (str.++ "7" (str.++ "6" (str.++ "2" ""))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ ((_ re.loop 5 5) (re.range "0" "9")) (str.to_re "")))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "1" (str.++ "9" (str.++ "5" (str.++ "\u{fe}" "")))))

(define-fun Witness2 () String (str.++ "-" (str.++ "9" (str.++ "0" (str.++ "\u{0c}" "")))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.opt (re.range "-" "-"))(re.++ (re.+ (re.range "0" "9"))(re.++ (re.opt (re.union (re.range "\u{00}" "+")(re.union (re.range "-" "-") (re.range "/" "\u{ff}")))) (str.to_re "")))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "Z" (str.++ "\u{fd}" (str.++ "\u{85}" (str.++ "\u{0c}" "")))))

(define-fun Witness2 () String (str.++ "G" (str.++ "Z" (str.++ "G" (str.++ "k" (str.++ "a" (str.++ "Z" (str.++ "\u{af}" ""))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.++ (re.+ (re.union (re.range "A" "Z") (re.range "a" "z")))(re.++ (re.opt (re.union (re.range "\u{00}" "\u{09}") (re.range "\u{0b}" "\u{ff}"))) (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))))) (str.to_re "")))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "z" (str.++ "." (str.++ "." (str.++ "q" (str.++ "w" (str.++ "t" (str.++ "y" (str.++ "." (str.++ "\u{0d}" (str.++ "\u{0a}" (str.++ "\u{0a}" (str.++ "6" (str.++ "z" (str.++ "6" (str.++ "k" (str.++ "\u{85}" (str.++ "\u{a0}" (str.++ "\u{0a}" (str.++ " " (str.++ "." (str.++ "\u{a0}" (str.++ "," (str.++ "\u{a0}" (str.++ "\u{a0}" (str.++ " " (str.++ "v" (str.++ "z" (str.++ "." (str.++ "\u{85}" (str.++ "(" (str.++ "0" (str.++ "4" (str.++ "7" (str.++ ")" (str.++ "/" (str.++ "\u{85}" (str.++ "\u{85}" (str.++ " " (str.++ " " (str.++ "\u{a0}" (str.++ "3" (str.++ "3" (str.++ "8" (str.++ "\u{85}" (str.++ " " (str.++ "-" (str.++ "\u{09}" (str.++ " " (str.++ "\u{85}" (str.++ "\u{85}" (str.++ "3" (str.++ "4" (str.++ "8" (str.++ "8" "")))))))))))))))))))))))))))))))))))))))))))))))))))))))

(define-fun Witness2 () String (str.++ "\u{85}" (str.++ " " (str.++ "z" (str.++ "." (str.++ " " (str.++ "." (str.++ "\u{0a}" (str.++ "9" (str.++ "\u{09}" (str.++ "\u{85}" (str.++ "\u{0a}" (str.++ "c" (str.++ " " (str.++ "\u{85}" (str.++ "," (str.++ "a" (str.++ "\u{a0}" (str.++ "\u{85}" (str.++ "\u{85}" (str.++ "+" (str.++ "1" (str.++ " " (str.++ "/" (str.++ "9" (str.++ "4" (str.++ "8" (str.++ "/" (str.++ " " (str.++ "\u{0b}" (str.++ " " (str.++ "8" (str.++ "7" (str.++ "3" (str.++ "9" (str.++ "2" (str.++ "2" (str.++ "5" (str.++ "e" (str.++ "X" (str.++ "t" (str.++ "1" (str.++ "9" (str.++ "e" (str.++ "X" (str.++ "t" (str.++ "." (str.++ "2" ""))))))))))))))))))))))))))))))))))))))))))))))))

(assert (= regexA (re.++ (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (re.+ (re.union (re.range " " " ")(re.union (re.range "." ".") (re.range "a" "z"))))(re.++ (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (re.range "\u{0a}" "\u{0a}")(re.++ (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (re.+ (re.union (re.range " " " ")(re.union (re.range "#" "#")(re.union (re.range "." ".")(re.union (re.range "0" "9") (re.range "a" "z"))))))(re.++ (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (re.range "\u{0a}" "\u{0a}")(re.++ (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (re.+ (re.union (re.range " " " ")(re.union (re.range "." ".") (re.range "a" "z"))))(re.++ (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (re.range "," ",")(re.++ (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (re.+ (re.union (re.range " " " ")(re.union (re.range "." ".") (re.range "a" "z"))))(re.++ (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (re.opt (re.range "\u{0a}" "\u{0a}"))(re.++ (re.opt (re.++ (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (re.++ ((_ re.loop 1 15) (re.range "0" "9")) (re.opt (re.++ (re.range "-" "-") ((_ re.loop 1 4) (re.range "0" "9")))))(re.++ (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))) (re.range "\u{0a}" "\u{0a}"))))) (re.opt (re.++ (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))) (re.++ (re.opt (re.range "+" "+"))(re.++ (re.opt (re.++ (re.range "1" "1")(re.++ (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))) (re.opt (re.range "-" "/")))))(re.++ (re.union (re.++ (re.range "(" "(")(re.++ ((_ re.loop 3 3) (re.range "0" "9")) (re.range ")" ")"))) ((_ re.loop 3 3) (re.range "0" "9")))(re.++ (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (re.opt (re.range "-" "/"))(re.++ (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ ((_ re.loop 3 3) (re.range "0" "9"))(re.++ (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (re.opt (re.range "-" "/"))(re.++ (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ ((_ re.loop 4 4) (re.range "0" "9")) (re.* (re.++ (re.union (re.++ (re.* (re.union (re.range "\u{09}" "\u{09}") (re.range " " " "))) (re.union (re.range "X" "X") (re.range "x" "x"))) (re.++ (re.union (re.range "E" "E") (re.range "e" "e"))(re.++ (re.union (re.range "X" "X") (re.range "x" "x")) (re.union (re.range "T" "T") (re.range "t" "t")))))(re.++ (re.opt (re.range "." "."))(re.++ (re.* (re.union (re.range "\u{09}" "\u{09}") (re.range " " " "))) (re.+ (re.range "0" "9"))))))))))))))))))))))))))))))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "2" (str.++ "\u{b5}" "")))

(define-fun Witness2 () String (str.++ "5" (str.++ "8" (str.++ "0" ""))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.+ (re.range "0" "9"))(re.++ (re.opt (re.union (re.range "\u{00}" "+")(re.union (re.range "-" "-") (re.range "/" "\u{ff}")))) (str.to_re ""))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String "")

(define-fun Witness2 () String "")

(assert (= regexA (re.union (re.++ (str.to_re "")(re.++ (re.++ ((_ re.loop 5 5) (re.++ ((_ re.loop 2 2) (re.union (re.range "0" "9") (re.union (re.range "A" "F") (re.range "a" "f")))) (re.range ":" ":"))) ((_ re.loop 2 2) (re.union (re.range "0" "9") (re.union (re.range "A" "F") (re.range "a" "f"))))) (str.to_re "")))(re.union (re.++ (str.to_re "")(re.++ (re.++ ((_ re.loop 5 5) (re.++ ((_ re.loop 2 2) (re.union (re.range "0" "9") (re.union (re.range "A" "F") (re.range "a" "f")))) (re.range "-" "-"))) ((_ re.loop 2 2) (re.union (re.range "0" "9") (re.union (re.range "A" "F") (re.range "a" "f"))))) (str.to_re ""))) (re.++ (str.to_re "") (str.to_re ""))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "2" (str.++ "2" (str.++ "5" (str.++ "3" (str.++ "3" (str.++ "6" "")))))))

(define-fun Witness2 () String (str.++ "0" (str.++ "8" (str.++ "1" (str.++ "9" (str.++ "2" (str.++ "5" "")))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.union (re.++ (re.range "0" "1") (re.range "0" "9")) (re.++ (re.range "2" "2") (re.range "0" "3")))(re.++ ((_ re.loop 2 2) (re.++ (re.range "0" "5") (re.range "0" "9"))) (str.to_re ""))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "8" (str.++ "1" (str.++ "9" (str.++ "8" (str.++ "." (str.++ "8" "")))))))

(define-fun Witness2 () String (str.++ "9" (str.++ "6" (str.++ "." (str.++ "1" "")))))

(assert (= regexA (re.union (re.++ (str.to_re "")(re.++ ((_ re.loop 1 5) (re.range "0" "9")) (str.to_re ""))) (re.++ (str.to_re "")(re.++ ((_ re.loop 1 5) (re.range "0" "9"))(re.++ (re.range "." ".")(re.++ ((_ re.loop 1 2) (re.range "0" "9")) (str.to_re ""))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "(" (str.++ "4" (str.++ "5" (str.++ "9" (str.++ "9" (str.++ "4" (str.++ "5" (str.++ "7" (str.++ "7" (str.++ "8" (str.++ "5" ""))))))))))))

(define-fun Witness2 () String (str.++ "(" (str.++ "9" (str.++ "8" (str.++ "0" (str.++ ")" (str.++ "3" (str.++ "8" (str.++ "2" (str.++ "5" (str.++ "0" (str.++ "8" (str.++ "1" "")))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.opt (re.range "(" "("))(re.++ (re.++ (re.range "2" "9") ((_ re.loop 2 2) (re.range "0" "9")))(re.++ (re.opt (re.range ")" ")"))(re.++ (re.opt (re.union (re.range "-" "-")(re.union (re.union (re.range "\u{00}" "\u{09}") (re.range "\u{0b}" "\u{ff}")) (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))))(re.++ (re.++ (re.range "1" "9") ((_ re.loop 2 2) (re.range "0" "9")))(re.++ (re.opt (re.union (re.range "-" "-")(re.union (re.union (re.range "\u{00}" "\u{09}") (re.range "\u{0b}" "\u{ff}")) (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))))(re.++ ((_ re.loop 4 4) (re.range "0" "9")) (str.to_re "")))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "_" (str.++ "3" (str.++ "." (str.++ "_" (str.++ "@" (str.++ "0" (str.++ "." (str.++ "t" (str.++ "z" ""))))))))))

(define-fun Witness2 () String (str.++ "t" (str.++ "_" (str.++ "r" (str.++ "." (str.++ "_" (str.++ "." (str.++ "8" (str.++ "@" (str.++ "8" (str.++ "-" (str.++ "." (str.++ "i" (str.++ "y" (str.++ "b" "")))))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.union (re.range "0" "9")(re.union (re.range "_" "_") (re.range "a" "z")))(re.++ (re.* (re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "_" "_") (re.range "a" "z")))))(re.++ (re.* (re.++ (re.range "." ".") (re.+ (re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "_" "_") (re.range "a" "z")))))))(re.++ (re.range "@" "@")(re.++ (re.union (re.range "0" "9") (re.range "a" "z"))(re.++ (re.* (re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "_" "_") (re.range "a" "z")))))(re.++ (re.* (re.++ (re.range "." ".") (re.+ (re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "_" "_") (re.range "a" "z")))))))(re.++ (re.range "." ".")(re.++ ((_ re.loop 2 4) (re.range "a" "z")) (str.to_re "")))))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "u" (str.++ "n" (str.++ "i" (str.++ "t" (str.++ "\u{a0}" (str.++ "\u{aa}" (str.++ "/" (str.++ "9" (str.++ "-" (str.++ "9" (str.++ "\u{0c}" (str.++ "\u{85}" (str.++ "\u{ba}" (str.++ "\u{0c}" (str.++ "\u{85}" (str.++ "\u{0a}" (str.++ "\u{a0}" (str.++ "\u{ba}" (str.++ "3" (str.++ "\u{a0}" (str.++ "\u{a0}" (str.++ "\u{85}" (str.++ "\u{a0}" (str.++ "\u{a0}" (str.++ "\u{85}" (str.++ "\u{a0}" (str.++ "\u{a0}" (str.++ "\u{85}" (str.++ "\u{0a}" (str.++ "1" (str.++ "\u{85}" (str.++ "8" (str.++ "L" (str.++ "\u{aa}" (str.++ "\u{0b}" (str.++ "8" (str.++ "6" (str.++ "6" (str.++ "9" (str.++ "K" (str.++ "8" (str.++ " " (str.++ "3" (str.++ "9" (str.++ "7" (str.++ "8" "")))))))))))))))))))))))))))))))))))))))))))))))

(define-fun Witness2 () String (str.++ "u" (str.++ "\u{a0}" (str.++ "\u{a0}" (str.++ "\u{85}" (str.++ "\u{85}" (str.++ " " (str.++ "\u{0c}" (str.++ "\u{0c}" (str.++ "0" (str.++ "8" (str.++ "4" (str.++ "8" (str.++ "4" (str.++ "2" (str.++ "-" (str.++ "2" (str.++ "\u{a0}" (str.++ "\u{85}" (str.++ " " (str.++ "\u{f6}" (str.++ "4" (str.++ "\u{f4}" (str.++ "\u{85}" (str.++ "5" (str.++ "5" (str.++ "5" (str.++ "\u{a0}" (str.++ " " (str.++ "\u{c5}" (str.++ "\u{a0}" (str.++ "L" (str.++ " " (str.++ " " (str.++ "8" (str.++ "8" (str.++ "0" (str.++ "8" ""))))))))))))))))))))))))))))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.opt (re.++ (re.union (str.to_re (str.++ "u" (str.++ "n" (str.++ "i" (str.++ "t" "")))))(re.union (re.range "u" "u") (str.to_re ""))) (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))))(re.++ (re.opt (re.++ (re.* (re.range "0" "9")) (re.opt (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))))(re.++ (re.opt (re.union (re.+ (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))) (re.range "/" "/")))(re.++ (re.++ (re.+ (re.range "0" "9")) (re.opt (re.++ (re.range "-" "-") (re.+ (re.range "0" "9")))))(re.++ (re.+ (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))(re.++ (re.+ (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))(re.++ (re.+ (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))) (re.opt (re.++ (re.+ (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))) (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))))))(re.++ (re.+ (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))(re.++ (re.+ (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ ((_ re.loop 4 4) (re.range "0" "9")) (str.to_re ""))))))))))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "1" (str.++ "9" (str.++ "(" (str.++ "2" (str.++ "8" (str.++ ")" (str.++ "1" (str.++ "8" (str.++ "8" (str.++ "-" (str.++ "8" (str.++ "9" (str.++ "3" (str.++ "8" "")))))))))))))))

(define-fun Witness2 () String (str.++ "(" (str.++ "9" (str.++ "8" (str.++ ")" (str.++ "0" (str.++ "9" (str.++ "9" (str.++ "-" (str.++ "5" (str.++ "6" (str.++ "3" (str.++ "8" "")))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.opt ((_ re.loop 2 2) (re.range "0" "9")))(re.++ (re.opt (re.union (re.++ (re.++ (re.range "(" "(") ((_ re.loop 2 2) (re.range "0" "9"))) (re.range ")" ")")) ((_ re.loop 2 2) (re.range "0" "9"))))(re.++ (re.union ((_ re.loop 3 3) (re.range "0" "9")) ((_ re.loop 4 4) (re.range "0" "9")))(re.++ (re.opt (re.range "-" "-"))(re.++ ((_ re.loop 4 4) (re.range "0" "9")) (str.to_re "")))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "0" (str.++ "9" (str.++ "-" (str.++ "9" (str.++ "/" (str.++ "2" (str.++ "0" (str.++ "9" (str.++ "2" ""))))))))))

(define-fun Witness2 () String (str.++ "0" (str.++ "5" (str.++ "/" (str.++ "0" (str.++ "2" (str.++ "/" (str.++ "9" ""))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.union (re.++ (re.union (re.++ (re.union (re.++ (re.opt (re.range "0" "0")) (re.range "1" "9"))(re.union (re.++ (re.range "1" "2") (re.range "0" "9")) (re.++ (re.range "3" "3") (re.range "0" "1"))))(re.++ (re.union (re.range "-" "-") (re.range "/" "/")) (re.union (re.++ (re.opt (re.range "0" "0")) (re.union (re.range "1" "1")(re.union (re.range "3" "3")(re.union (re.range "5" "5") (re.range "7" "8"))))) (re.++ (re.range "1" "1") (re.union (re.range "0" "0") (re.range "2" "2"))))))(re.union (re.++ (re.union (re.++ (re.opt (re.range "0" "0")) (re.range "1" "9"))(re.union (re.++ (re.range "1" "2") (re.range "0" "9")) (str.to_re (str.++ "3" (str.++ "0" "")))))(re.++ (re.union (re.range "-" "-") (re.range "/" "/")) (re.union (re.++ (re.opt (re.range "0" "0")) (re.union (re.range "4" "4")(re.union (re.range "6" "6") (re.range "9" "9")))) (str.to_re (str.++ "1" (str.++ "1" "")))))) (re.++ (re.union (re.++ (re.opt (re.range "0" "1")) (re.range "0" "9")) (re.++ (re.range "2" "2") (re.range "0" "8")))(re.++ (re.union (re.range "-" "-") (re.range "/" "/"))(re.++ (re.opt (re.range "0" "0")) (re.range "2" "2"))))))(re.++ (re.union (re.range "-" "-") (re.range "/" "/")) (re.union (re.++ (re.opt (re.union (str.to_re (str.++ "2" (str.++ "0" ""))) (str.to_re (str.++ "1" (str.++ "9" ""))))) ((_ re.loop 2 2) (re.range "0" "9"))) ((_ re.loop 1 2) (re.range "0" "9"))))) (re.++ (str.to_re (str.++ "2" (str.++ "9" "")))(re.++ (re.union (re.range "-" "-") (re.range "/" "/"))(re.++ (re.opt (re.range "0" "0"))(re.++ (re.range "2" "2")(re.++ (re.union (re.range "-" "-") (re.range "/" "/"))(re.++ (re.opt (re.union (str.to_re (str.++ "1" (str.++ "9" ""))) (str.to_re (str.++ "2" (str.++ "0" ""))))) (re.union (re.++ (re.union (re.range "1" "1")(re.union (re.range "3" "3")(re.union (re.range "5" "5")(re.union (re.range "7" "7") (re.range "9" "9"))))) (re.union (re.range "2" "2") (re.range "6" "6"))) (re.++ (re.union (re.range "0" "0")(re.union (re.range "2" "2")(re.union (re.range "4" "4")(re.union (re.range "6" "6") (re.range "8" "8"))))) (re.union (re.range "0" "0")(re.union (re.range "4" "4") (re.range "8" "8")))))))))))) (str.to_re "")))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "h" (str.++ "g" (str.++ "." (str.++ "2" (str.++ "@" (str.++ "z" (str.++ "a" (str.++ "g" (str.++ "." (str.++ "a" (str.++ "e" (str.++ "r" (str.++ "o" ""))))))))))))))

(define-fun Witness2 () String (str.++ "$" (str.++ "." (str.++ "4" (str.++ "@" (str.++ "a" (str.++ "9" (str.++ "-" (str.++ "-" (str.++ "s" (str.++ "-" (str.++ "-" (str.++ "9" (str.++ "." (str.++ "b" (str.++ "i" (str.++ "z" "")))))))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.+ (re.union (re.range "!" "!")(re.union (re.range "$" "$")(re.union (re.range "'" "'")(re.union (re.range "*" "+")(re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "_" "_") (re.range "a" "z")))))))))(re.++ (re.* (re.++ (re.range "." ".") (re.+ (re.union (re.range "!" "!")(re.union (re.range "$" "$")(re.union (re.range "'" "'")(re.union (re.range "*" "+")(re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "_" "_") (re.range "a" "z")))))))))))(re.++ (re.range "@" "@")(re.++ (re.+ (re.++ (re.+ (re.union (re.range "0" "9") (re.range "a" "z")))(re.++ (re.* (re.++ (re.+ (re.range "-" "-")) (re.+ (re.union (re.range "0" "9") (re.range "a" "z"))))) (re.range "." "."))))(re.++ (re.union ((_ re.loop 2 2) (re.range "a" "z"))(re.union (str.to_re (str.++ "a" (str.++ "e" (str.++ "r" (str.++ "o" "")))))(re.union (str.to_re (str.++ "a" (str.++ "r" (str.++ "p" (str.++ "a" "")))))(re.union (str.to_re (str.++ "b" (str.++ "i" (str.++ "z" ""))))(re.union (str.to_re (str.++ "c" (str.++ "a" (str.++ "t" ""))))(re.union (str.to_re (str.++ "c" (str.++ "o" (str.++ "m" ""))))(re.union (str.to_re (str.++ "c" (str.++ "o" (str.++ "o" (str.++ "p" "")))))(re.union (str.to_re (str.++ "e" (str.++ "d" (str.++ "u" ""))))(re.union (str.to_re (str.++ "g" (str.++ "o" (str.++ "v" ""))))(re.union (str.to_re (str.++ "i" (str.++ "n" (str.++ "f" (str.++ "o" "")))))(re.union (str.to_re (str.++ "i" (str.++ "n" (str.++ "t" ""))))(re.union (str.to_re (str.++ "j" (str.++ "o" (str.++ "b" (str.++ "s" "")))))(re.union (str.to_re (str.++ "m" (str.++ "i" (str.++ "l" ""))))(re.union (str.to_re (str.++ "m" (str.++ "o" (str.++ "b" (str.++ "i" "")))))(re.union (str.to_re (str.++ "m" (str.++ "u" (str.++ "s" (str.++ "e" (str.++ "u" (str.++ "m" "")))))))(re.union (str.to_re (str.++ "n" (str.++ "a" (str.++ "m" (str.++ "e" "")))))(re.union (str.to_re (str.++ "n" (str.++ "e" (str.++ "t" ""))))(re.union (str.to_re (str.++ "o" (str.++ "r" (str.++ "g" ""))))(re.union (str.to_re (str.++ "p" (str.++ "r" (str.++ "o" "")))) (str.to_re (str.++ "t" (str.++ "r" (str.++ "a" (str.++ "v" (str.++ "e" (str.++ "l" "")))))))))))))))))))))))))) (str.to_re "")))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "Q" (str.++ "-" (str.++ "B" (str.++ "." (str.++ "c" (str.++ "n" "")))))))

(define-fun Witness2 () String (str.++ "8" (str.++ "." (str.++ "c" (str.++ "n" "")))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.+ (re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))))(re.++ (str.to_re (str.++ "." (str.++ "c" (str.++ "n" "")))) (str.to_re ""))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "+" (str.++ "6" (str.++ "9" (str.++ "." (str.++ "8" ""))))))

(define-fun Witness2 () String (str.++ "9" (str.++ "3" "")))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.opt (re.union (re.range "+" "+") (re.range "-" "-")))(re.++ (re.opt (re.++ (re.opt (re.range "0" "9"))(re.++ (re.opt (re.range "0" "9"))(re.++ (re.opt (re.range "0" "9")) (re.opt (re.range "," ","))))))(re.++ (re.* (re.++ ((_ re.loop 3 3) (re.range "0" "9")) (re.opt (re.range "," ","))))(re.++ (re.opt (re.++ (re.range "." ".") ((_ re.loop 1 2) (re.range "0" "9")))) (str.to_re ""))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "+" (str.++ "1" (str.++ "(" (str.++ "4" (str.++ "8" (str.++ "8" (str.++ ")" (str.++ "." (str.++ "2" (str.++ "8" (str.++ "3" (str.++ " " (str.++ "1" (str.++ "9" (str.++ "9" (str.++ "7" "")))))))))))))))))

(define-fun Witness2 () String (str.++ "9" (str.++ "6" (str.++ "4" (str.++ "8" (str.++ "0" (str.++ "0" (str.++ "3" ""))))))))

(assert (= regexA (re.union (re.++ (re.opt (re.range "+" "+"))(re.++ (re.opt (re.range "1" "1"))(re.++ (re.opt (re.union (re.range " " " ") (re.range "-" ".")))(re.++ (re.union (re.++ (re.range "(" "(")(re.++ ((_ re.loop 3 3) (re.range "0" "9")) (re.range ")" ")"))) ((_ re.loop 3 3) (re.range "0" "9")))(re.++ (re.opt (re.union (str.to_re "") (re.union (re.range " " " ") (re.range "-" "."))))(re.++ ((_ re.loop 3 3) (re.range "0" "9"))(re.++ (re.union (str.to_re "") (re.union (re.range " " " ") (re.range "-" "."))) ((_ re.loop 4 4) (re.range "0" "9"))))))))) (re.++ ((_ re.loop 3 3) (re.range "0" "9"))(re.++ (re.union (str.to_re "") (re.union (re.range " " " ") (re.range "-" "."))) ((_ re.loop 4 4) (re.range "0" "9")))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "8" (str.++ "0" (str.++ "9" (str.++ ")" (str.++ "-" (str.++ "X" (str.++ "r" (str.++ "3" (str.++ "E" (str.++ "9" (str.++ "X" (str.++ "1" "")))))))))))))

(define-fun Witness2 () String (str.++ "8" (str.++ "(" (str.++ "6" (str.++ "8" (str.++ "9" (str.++ ")" (str.++ "A" (str.++ "1" (str.++ "3" (str.++ "t" (str.++ "z" (str.++ "9" (str.++ "5" ""))))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.opt (re.++ (re.range "0" "9") (re.opt (re.union (re.range " " " ") (re.range "-" "-")))))(re.++ (re.union (re.++ (re.opt (re.range "(" "("))(re.++ ((_ re.loop 3 3) (re.range "0" "9")) (re.opt (re.range ")" ")")))) ((_ re.loop 3 3) (re.range "0" "9")))(re.++ (re.opt (re.union (re.range " " " ") (re.range "-" "-")))(re.++ (re.union (re.++ ((_ re.loop 3 3) (re.range "0" "9"))(re.++ (re.opt (re.union (re.range " " " ") (re.range "-" "-"))) ((_ re.loop 4 4) (re.range "0" "9")))) ((_ re.loop 7 7) (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z"))))) (str.to_re ""))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "B" (str.++ "E" (str.++ "8" (str.++ "3" (str.++ "2" (str.++ "2" (str.++ "9" (str.++ "5" (str.++ "0" (str.++ "9" (str.++ "1" ""))))))))))))

(define-fun Witness2 () String (str.++ "2" (str.++ "8" (str.++ "6" (str.++ "1" (str.++ "9" (str.++ "3" (str.++ "0" (str.++ "6" (str.++ "0" ""))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.opt (str.to_re (str.++ "B" (str.++ "E" ""))))(re.++ (re.opt (re.range "0" "0"))(re.++ ((_ re.loop 9 9) (re.range "0" "9")) (str.to_re "")))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "2" (str.++ "0" (str.++ ":" (str.++ "5" (str.++ "2" ""))))))

(define-fun Witness2 () String (str.++ "1" (str.++ "3" (str.++ ":" (str.++ "4" (str.++ "9" (str.++ ":" (str.++ "3" (str.++ "8" "")))))))))

(assert (= regexA (re.union (re.++ (str.to_re "")(re.++ (re.++ (re.union (re.++ (re.opt (re.range "0" "0")) (re.range "1" "9")) (re.++ (re.range "1" "1") (re.range "0" "2")))(re.++ ((_ re.loop 0 2) (re.++ (re.range ":" ":")(re.++ (re.range "0" "5") (re.range "0" "9")))) (re.++ (re.range " " " ")(re.++ (re.union (re.range "A" "A") (re.range "P" "P")) (re.range "M" "M"))))) (str.to_re ""))) (re.++ (str.to_re "")(re.++ (re.union (re.++ (re.range "0" "1") (re.range "0" "9")) (re.++ (re.range "2" "2") (re.range "0" "3")))(re.++ ((_ re.loop 0 2) (re.++ (re.range ":" ":")(re.++ (re.range "0" "5") (re.range "0" "9")))) (str.to_re "")))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "3" (str.++ "," (str.++ "1" (str.++ "8" (str.++ " " (str.++ "8" (str.++ "0" (str.++ "9" (str.++ "7" (str.++ "9" (str.++ "5" (str.++ " " (str.++ "8" (str.++ "7" (str.++ "8" (str.++ "8" (str.++ "8" ""))))))))))))))))))

(define-fun Witness2 () String (str.++ "5" (str.++ "1" (str.++ "8" (str.++ "9" (str.++ "-" (str.++ "8" (str.++ "6" (str.++ "3" (str.++ "8" (str.++ "8" (str.++ "8" (str.++ "1" (str.++ "6" (str.++ "-" (str.++ "8" (str.++ "8" (str.++ "8" (str.++ "9" (str.++ "-" ""))))))))))))))))))))

(assert (= regexA (re.union (re.++ (str.to_re "")(re.++ (re.union (re.++ (re.range "4" "4") ((_ re.loop 3 3) (re.range "0" "9"))) (re.++ (re.range "5" "5")(re.++ (re.range "1" "5") ((_ re.loop 2 2) (re.range "0" "9")))))(re.++ (re.union (re.opt (re.range "-" "-")) (re.opt (re.range " " " "))) ((_ re.loop 3 3) (re.++ ((_ re.loop 4 4) (re.range "0" "9")) (re.union (re.opt (re.range "-" "-")) (re.opt (re.range " " " ")))))))) (re.++ (str.to_re "")(re.++ (re.++ (re.range "3" "3")(re.++ (re.union (re.range "," ",")(re.union (re.range "4" "4") (re.range "7" "7"))) ((_ re.loop 2 2) (re.range "0" "9"))))(re.++ (re.union (re.opt (re.range "-" "-")) (re.opt (re.range " " " ")))(re.++ ((_ re.loop 6 6) (re.range "0" "9"))(re.++ (re.union (re.opt (re.range "-" "-")) (re.opt (re.range " " " "))) ((_ re.loop 5 5) (re.range "0" "9"))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "J" (str.++ "Z" (str.++ "8" (str.++ "4" (str.++ "-" (str.++ "I" (str.++ "4" ""))))))))

(define-fun Witness2 () String (str.++ "C" (str.++ "Y" (str.++ "6" (str.++ "8" (str.++ "-" (str.++ "7" (str.++ "T" ""))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.++ ((_ re.loop 2 2) (re.range "A" "Z"))(re.++ (re.opt (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (re.opt ((_ re.loop 2 2) (re.range "0" "9")))(re.++ (re.opt (re.range "-" "-"))(re.++ (re.opt (re.union (re.range "0" "9") (re.range "A" "Z"))) (re.union (re.range "0" "9") (re.range "A" "Z"))))))) (str.to_re "")))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "\u{a0}" (str.++ "\u{85}" (str.++ "\u{a0}" (str.++ "\u{85}" (str.++ "\u{a0}" (str.++ " " (str.++ "\u{0b}" (str.++ "." (str.++ "I" (str.++ "O" (str.++ "U" (str.++ "\u{a0}" "")))))))))))))

(define-fun Witness2 () String (str.++ "\u{85}" (str.++ "\u{85}" (str.++ "\u{85}" ""))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (re.+ (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "'" "'")(re.union (re.range "," ".")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "a" "z")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))))))))(re.++ (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))) (str.to_re "")))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "0" (str.++ "9" (str.++ "7" (str.++ "\u{85}" (str.++ "0" (str.++ "1" "")))))))

(define-fun Witness2 () String (str.++ "s" (str.++ "-" (str.++ "0" (str.++ "1" (str.++ "7" (str.++ "8" (str.++ "9" ""))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.opt (re.union (str.to_re (str.++ "s" (str.++ "-" ""))) (str.to_re (str.++ "S" (str.++ "-" "")))))(re.++ ((_ re.loop 3 3) (re.range "0" "9"))(re.++ (re.opt (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ ((_ re.loop 2 2) (re.range "0" "9")) (str.to_re ""))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "-" (str.++ "," (str.++ "." (str.++ "1" (str.++ "6" (str.++ "6" "")))))))

(define-fun Witness2 () String (str.++ "+" (str.++ "9" (str.++ "9" (str.++ "6" (str.++ "9" (str.++ "8" (str.++ "," (str.++ "5" (str.++ "9" (str.++ "5" (str.++ "4" (str.++ "3" "")))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.opt (re.union (re.range "+" "+") (re.range "-" "-")))(re.++ (re.opt (re.++ (re.opt (re.range "0" "9"))(re.++ (re.opt (re.range "0" "9"))(re.++ (re.opt (re.range "0" "9")) (re.opt (re.range "," ","))))))(re.++ (re.* (re.++ ((_ re.loop 3 3) (re.range "0" "9")) (re.opt (re.range "," ","))))(re.++ (re.++ (re.opt (re.range "." ".")) (re.+ (re.range "0" "9"))) (str.to_re ""))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "+" (str.++ "6" (str.++ "." (str.++ "5" "")))))

(define-fun Witness2 () String (str.++ "1" (str.++ "6" (str.++ "8" (str.++ "." (str.++ "8" (str.++ "4" (str.++ "9" ""))))))))

(assert (= regexA (re.union (re.++ (str.to_re "")(re.++ (re.opt (re.range "+" "+"))(re.++ (re.range "1" "1")(re.++ (re.range "0" "7")(re.++ (re.range "0" "9")(re.++ (re.opt (re.++ (re.range "." ".") (re.+ (re.range "0" "9")))) (str.to_re "")))))))(re.union (re.++ (str.to_re "")(re.++ (re.opt (re.range "+" "+"))(re.++ (re.opt (re.range "1" "9"))(re.++ (re.range "0" "9")(re.++ (re.opt (re.++ (re.range "." ".") (re.+ (re.range "0" "9")))) (str.to_re ""))))))(re.union (re.++ (str.to_re "")(re.++ (str.to_re (str.++ "-" (str.++ "1" (str.++ "8" (str.++ "0" ""))))) (str.to_re "")))(re.union (re.++ (str.to_re "")(re.++ (str.to_re (str.++ "-" (str.++ "1" "")))(re.++ (re.range "1" "7")(re.++ (re.range "0" "9")(re.++ (re.opt (re.++ (re.range "." ".") (re.+ (re.range "0" "9")))) (str.to_re ""))))))(re.union (re.++ (str.to_re "")(re.++ (re.range "-" "-")(re.++ (re.range "1" "9")(re.++ (re.range "0" "9")(re.++ (re.opt (re.++ (re.range "." ".") (re.+ (re.range "0" "9")))) (str.to_re "")))))) (re.++ (str.to_re "")(re.++ (re.range "-" "-")(re.++ (re.range "0" "9")(re.++ (re.opt (re.++ (re.range "." ".") (re.+ (re.range "0" "9")))) (str.to_re ""))))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "9" ""))

(define-fun Witness2 () String (str.++ "8" ""))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.+ (re.range "0" "9"))(re.++ (re.* (re.++ (re.range "," ",") (re.+ (re.range "0" "9")))) (str.to_re ""))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "h" (str.++ "|" (str.++ "s" (str.++ ":" (str.++ "/" (str.++ "/" (str.++ "\u{ed}" (str.++ "w" (str.++ "w" (str.++ "." (str.++ "\u{c2}" (str.++ "4" (str.++ "9" (str.++ "\u{b5}" (str.++ "z" (str.++ "." (str.++ "|" (str.++ "|" (str.++ "n" ""))))))))))))))))))))

(define-fun Witness2 () String (str.++ "a" (str.++ "a" (str.++ "f" (str.++ ":" (str.++ "/" (str.++ "/" (str.++ "n" (str.++ "w" (str.++ "w" (str.++ "." (str.++ "\u{fe}" (str.++ "." (str.++ "o" (str.++ "o" (str.++ "t" ""))))))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ ((_ re.loop 3 5) (re.union (re.range "a" "a")(re.union (re.range "f" "f")(re.union (re.range "h" "h")(re.union (re.range "p" "p")(re.union (re.range "s" "t")(re.union (re.range "w" "w") (re.range "|" "|"))))))))(re.++ (str.to_re (str.++ ":" (str.++ "/" (str.++ "/" ""))))(re.++ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))(re.++ (str.to_re (str.++ "w" (str.++ "w" (str.++ "." ""))))(re.++ (re.* (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))(re.++ (re.range "." ".")(re.++ ((_ re.loop 2 3) (re.union (re.range "c" "c")(re.union (re.range "e" "e")(re.union (re.range "m" "o")(re.union (re.range "t" "t") (re.range "|" "|")))))) (str.to_re "")))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "1" (str.++ "2" (str.++ "/" (str.++ "9" (str.++ "/" (str.++ "2" (str.++ "2" (str.++ "9" (str.++ "9" (str.++ "6" (str.++ ":" (str.++ "0" (str.++ "8" (str.++ ":" (str.++ "3" (str.++ "2" (str.++ "p" (str.++ "m" "")))))))))))))))))))

(define-fun Witness2 () String (str.++ "1" (str.++ "0" (str.++ "/" (str.++ "2" (str.++ "2" (str.++ "/" (str.++ "2" (str.++ "8" (str.++ "8" (str.++ "5" (str.++ "2" (str.++ "0" (str.++ ":" (str.++ "2" (str.++ "9" (str.++ ":" (str.++ "4" (str.++ "5" "")))))))))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.opt (re.++ (re.union (re.++ (re.opt (re.range "0" "0")) (re.range "1" "9")) (re.++ (re.range "1" "1") (re.range "0" "2")))(re.++ (re.range "/" "/")(re.++ (re.union (re.++ (re.opt (re.range "0" "2")) (re.range "0" "9")) (re.++ (re.range "3" "3") (re.range "0" "1")))(re.++ (re.range "/" "/")(re.++ (re.range "1" "2") ((_ re.loop 3 3) (re.range "0" "9"))))))))(re.++ (re.opt (re.range " " " "))(re.++ (re.opt (re.++ (re.union (re.++ (re.opt (re.range "0" "1")) (re.range "0" "9")) (re.++ (re.range "2" "2") (re.range "0" "3")))(re.++ (re.range ":" ":")(re.++ (re.range "0" "5") (re.range "0" "9")))))(re.++ (re.opt (re.++ (re.range ":" ":")(re.++ (re.range "0" "5") (re.range "0" "9"))))(re.++ (re.opt (re.range " " " "))(re.++ (re.opt (re.union (str.to_re (str.++ "A" (str.++ "M" "")))(re.union (str.to_re (str.++ "a" (str.++ "m" "")))(re.union (str.to_re (str.++ "P" (str.++ "M" ""))) (str.to_re (str.++ "p" (str.++ "m" ""))))))) (str.to_re ""))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "3" (str.++ "8" (str.++ "8" (str.++ "9" "")))))

(define-fun Witness2 () String (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "9" "")))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.range "1" "9")(re.++ (re.range "0" "9")(re.++ (re.range "0" "9")(re.++ (re.range "0" "9") (str.to_re ""))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "1" (str.++ "1" (str.++ "2" (str.++ "0" (str.++ "2" (str.++ "2" (str.++ "9" (str.++ "8" (str.++ "3" (str.++ "3" (str.++ "9" (str.++ "6" "")))))))))))))

(define-fun Witness2 () String (str.++ "3" (str.++ "4" (str.++ "4" (str.++ "0" (str.++ "2" (str.++ "2" (str.++ "9" (str.++ "6" (str.++ "6" (str.++ "4" (str.++ "8" (str.++ "8" "")))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.range "1" "3")(re.++ (re.union (re.++ ((_ re.loop 2 2) (re.range "0" "9")) (re.union (re.++ (re.union (re.++ (re.range "0" "0") (re.union (re.range "1" "1")(re.union (re.range "3" "3")(re.union (re.range "5" "5") (re.range "7" "8"))))) (re.++ (re.range "1" "1") (re.union (re.range "0" "0") (re.range "2" "2")))) (re.union (re.++ (re.range "0" "0") (re.range "1" "9"))(re.union (re.++ (re.range "1" "2") (re.range "0" "9")) (re.++ (re.range "3" "3") (re.range "0" "1")))))(re.union (re.++ (re.union (re.++ (re.range "0" "0") (re.union (re.range "1" "1") (re.range "3" "9"))) (re.++ (re.range "1" "1") (re.range "0" "2"))) (re.union (re.++ (re.range "0" "0") (re.range "1" "9"))(re.union (re.++ (re.range "1" "2") (re.range "0" "9")) (str.to_re (str.++ "3" (str.++ "0" "")))))) (re.++ (str.to_re (str.++ "0" (str.++ "2" ""))) (re.union (re.++ (re.range "0" "0") (re.range "1" "9"))(re.union (re.++ (re.range "1" "1") (re.range "0" "9")) (re.++ (re.range "2" "2") (re.range "0" "8")))))))) (re.++ (re.union (re.++ (re.union (re.range "0" "0")(re.union (re.range "2" "2")(re.union (re.range "4" "4")(re.union (re.range "6" "6") (re.range "8" "8"))))) (re.union (re.range "0" "0")(re.union (re.range "4" "4") (re.range "8" "8")))) (re.++ (re.union (re.range "1" "1")(re.union (re.range "3" "3")(re.union (re.range "5" "5")(re.union (re.range "7" "7") (re.range "9" "9"))))) (re.union (re.range "2" "2") (re.range "6" "6")))) (str.to_re (str.++ "0" (str.++ "2" (str.++ "2" (str.++ "9" "")))))))(re.++ ((_ re.loop 5 5) (re.range "0" "9")) (str.to_re "")))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "0" (str.++ "." (str.++ "9" (str.++ "1" (str.++ "." (str.++ "4" (str.++ "." (str.++ "0" "")))))))))

(define-fun Witness2 () String (str.++ "0" (str.++ "." (str.++ "0" (str.++ "." (str.++ "0" (str.++ "." (str.++ "2" (str.++ "8" (str.++ "1" (str.++ "5" "")))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ ((_ re.loop 3 3) (re.union (str.to_re (str.++ "0" (str.++ "." ""))) (re.++ (re.++ (re.range "1" "9") (re.opt (re.+ (re.range "0" "9")))) (re.range "." "."))))(re.++ (re.union (re.range "0" "0") (re.++ (re.range "1" "9") (re.opt (re.+ (re.range "0" "9"))))) (str.to_re ""))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "0" (str.++ "9" (str.++ "/" (str.++ "9" (str.++ "9" (str.++ "3" (str.++ "1" ""))))))))

(define-fun Witness2 () String (str.++ "1" (str.++ "2" (str.++ "/" (str.++ "5" (str.++ "9" (str.++ "2" (str.++ "7" ""))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.union (re.++ (re.range "0" "0") (re.range "1" "9")) (re.++ (re.range "1" "1") (re.range "0" "2")))(re.++ (re.range "/" "/")(re.++ ((_ re.loop 4 4) (re.range "0" "9")) (str.to_re "")))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "3" (str.++ "9" (str.++ "8" (str.++ "9" (str.++ "3" (str.++ "9" (str.++ "8" (str.++ "0" (str.++ "8" ""))))))))))

(define-fun Witness2 () String (str.++ "8" ""))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.++ (re.* (re.range "0" "9"))(re.++ (re.+ (re.range "1" "9")) (re.* (re.range "0" "9")))) (str.to_re "")))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "$" (str.++ "a" (str.++ "v" (str.++ "e" (str.++ "Q" (str.++ "#" (str.++ "S" (str.++ "\u{e9}" (str.++ "+" ""))))))))))

(define-fun Witness2 () String (str.++ "$" (str.++ "a" (str.++ "v" (str.++ "e" "")))))

(assert (= regexA (re.union (re.++ (re.* (re.union (re.range "\u{00}" "\u{09}") (re.range "\u{0b}" "\u{ff}"))) (str.to_re (str.++ "$" (str.++ "A" (str.++ "V" (str.++ "E" "")))))) (re.++ (str.to_re (str.++ "$" (str.++ "a" (str.++ "v" (str.++ "e" ""))))) (re.* (re.union (re.range "\u{00}" "\u{09}") (re.range "\u{0b}" "\u{ff}")))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "9" (str.++ "8" (str.++ "2" (str.++ "6" (str.++ "6" (str.++ "7" (str.++ "7" (str.++ "2" "")))))))))

(define-fun Witness2 () String (str.++ "8" (str.++ "1" (str.++ "4" (str.++ "5" (str.++ " " (str.++ "9" (str.++ "9" (str.++ "8" (str.++ "8" ""))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.range "8" "9")(re.++ (re.range "1" "9")(re.++ ((_ re.loop 2 2) (re.range "0" "9"))(re.++ (re.union (re.opt (re.range "-" "-")) (re.opt (re.range " " " ")))(re.++ ((_ re.loop 4 4) (re.range "0" "9")) (str.to_re "")))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "T" (str.++ "X" "")))

(define-fun Witness2 () String (str.++ "O" (str.++ "H" "")))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.union (re.++ (re.range "A" "A") (re.union (re.range "K" "L")(re.union (re.range "R" "S") (re.range "Z" "Z"))))(re.union (re.++ (re.range "C" "C") (re.union (re.range "A" "A")(re.union (re.range "O" "O") (re.range "T" "T"))))(re.union (re.++ (re.range "D" "D") (re.union (re.range "C" "C") (re.range "E" "E")))(re.union (re.++ (re.range "F" "F") (re.range "L" "M"))(re.union (re.++ (re.range "G" "G") (re.union (re.range "A" "A") (re.range "U" "U")))(re.union (str.to_re (str.++ "H" (str.++ "I" "")))(re.union (re.++ (re.range "I" "I") (re.union (re.range "A" "A")(re.union (re.range "D" "D")(re.union (re.range "L" "L") (re.range "N" "N")))))(re.union (re.++ (re.range "K" "K") (re.union (re.range "S" "S") (re.range "Y" "Y")))(re.union (str.to_re (str.++ "L" (str.++ "A" "")))(re.union (re.++ (re.range "M" "M") (re.union (re.range "A" "A")(re.union (re.range "D" "E")(re.union (re.range "H" "I")(re.union (re.range "N" "O") (re.range "S" "T"))))))(re.union (re.++ (re.range "N" "N") (re.union (re.range "C" "E")(re.union (re.range "H" "H")(re.union (re.range "J" "J")(re.union (re.range "M" "M")(re.union (re.range "V" "V") (re.range "Y" "Y")))))))(re.union (str.to_re (str.++ "M" (str.++ "P" "")))(re.union (re.++ (re.range "O" "O") (re.union (re.range "H" "H")(re.union (re.range "K" "K") (re.range "R" "R"))))(re.union (re.++ (re.range "P" "P") (re.union (re.range "A" "A")(re.union (re.range "R" "R") (re.range "W" "W"))))(re.union (str.to_re (str.++ "R" (str.++ "I" "")))(re.union (re.++ (re.range "S" "S") (re.range "C" "D"))(re.union (re.++ (re.range "T" "T") (re.union (re.range "N" "N") (re.range "X" "X")))(re.union (str.to_re (str.++ "U" (str.++ "T" "")))(re.union (re.++ (re.range "V" "V") (re.union (re.range "A" "A")(re.union (re.range "I" "I") (re.range "T" "T")))) (re.++ (re.range "W" "W") (re.union (re.range "A" "A")(re.union (re.range "I" "I")(re.union (re.range "V" "V") (re.range "Y" "Y")))))))))))))))))))))))) (str.to_re "")))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "8" (str.++ "0" (str.++ "." (str.++ "9" (str.++ "8" (str.++ "3" (str.++ "." (str.++ "2" (str.++ "2" (str.++ "3" (str.++ "/" (str.++ "4" (str.++ "8" (str.++ "8" (str.++ "4" (str.++ "-" (str.++ "4" (str.++ "6" "")))))))))))))))))))

(define-fun Witness2 () String (str.++ "0" (str.++ "9" (str.++ "." (str.++ "4" (str.++ "8" (str.++ "8" (str.++ "." (str.++ "9" (str.++ "9" (str.++ "2" (str.++ "/" (str.++ "5" (str.++ "8" (str.++ "3" (str.++ "8" (str.++ "-" (str.++ "2" (str.++ "7" "")))))))))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ ((_ re.loop 2 2) (re.range "0" "9"))(re.++ (re.range "." ".")(re.++ ((_ re.loop 3 3) (re.range "0" "9"))(re.++ (re.range "." ".")(re.++ ((_ re.loop 3 3) (re.range "0" "9"))(re.++ (re.range "/" "/")(re.++ ((_ re.loop 4 4) (re.range "0" "9"))(re.++ (re.range "-" "-")(re.++ ((_ re.loop 2 2) (re.range "0" "9")) (str.to_re "")))))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "p" (str.++ "." (str.++ "E" ""))))

(define-fun Witness2 () String (str.++ "v" (str.++ "P" (str.++ "." (str.++ "t" (str.++ "o" ""))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.+ (re.union (re.range "A" "Z") (re.range "a" "z")))(re.++ (re.+ (re.++ (re.range "." ".") (re.+ (re.union (re.range "A" "Z") (re.range "a" "z"))))) (str.to_re ""))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "0" ""))

(define-fun Witness2 () String (str.++ "8" ""))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.union (re.range "0" "0") (re.++ (re.opt (re.range "-" "-")) (re.union (re.++ (re.union (re.range "0" "0") (re.++ (re.range "1" "9") (re.* (re.range "0" "9"))))(re.++ (re.range "." ".") (re.+ (re.range "0" "9")))) (re.++ (re.range "1" "9") (re.* (re.range "0" "9")))))) (str.to_re "")))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "4" (str.++ "/" (str.++ "3" (str.++ "," (str.++ "/" (str.++ "2" (str.++ "3" (str.++ "1" (str.++ "9" ""))))))))))

(define-fun Witness2 () String (str.++ "1" (str.++ "1" (str.++ "/" (str.++ "6" (str.++ "/" (str.++ "1" (str.++ "9" (str.++ "9" (str.++ "4" ""))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.union (re.++ (re.opt (re.range "0" "0")) (re.range "1" "9")) (re.++ (re.range "1" "1") (re.range "0" "2")))(re.++ (re.range "/" "/")(re.++ (re.union (re.++ (re.opt (re.range "0" "0")) (re.range "1" "9"))(re.union (re.++ (re.union (re.range "," ",") (re.range "1" "2")) (re.range "0" "9")) (re.++ (re.range "3" "3") (re.union (re.range "," ",") (re.range "0" "1")))))(re.++ (re.range "/" "/")(re.++ (re.range "1" "2")(re.++ ((_ re.loop 3 3) (re.range "0" "9")) (str.to_re ""))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "+" (str.++ "2" (str.++ "6" (str.++ "(" (str.++ "5" (str.++ "8" (str.++ "6" (str.++ ")" (str.++ "2" (str.++ "9" (str.++ "9" (str.++ "4" (str.++ "0" (str.++ "2" (str.++ "5" ""))))))))))))))))

(define-fun Witness2 () String (str.++ "+" (str.++ "8" (str.++ "(" (str.++ "0" (str.++ "6" (str.++ "8" (str.++ ")" (str.++ "9" (str.++ "8" (str.++ "9" (str.++ "8" (str.++ "0" (str.++ "8" (str.++ "5" "")))))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.range "+" "+")(re.++ ((_ re.loop 1 3) (re.range "0" "9"))(re.++ (re.range "(" "(")(re.++ ((_ re.loop 3 3) (re.range "0" "9"))(re.++ (re.range ")" ")")(re.++ ((_ re.loop 7 7) (re.range "0" "9")) (str.to_re ""))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "1" (str.++ "8" (str.++ "9" (str.++ "8" (str.++ "0" (str.++ "2" (str.++ "1" (str.++ "9" "")))))))))

(define-fun Witness2 () String (str.++ "9" (str.++ "2" (str.++ "0" (str.++ "0" (str.++ "0" (str.++ "2" (str.++ "2" (str.++ "9" "")))))))))

(assert (= regexA (re.union (re.++ (str.to_re "")(re.++ (re.union (re.++ (re.range "1" "1")(re.++ (re.range "8" "9") ((_ re.loop 2 2) (re.range "0" "9")))) (re.++ (re.range "2" "9") ((_ re.loop 3 3) (re.range "0" "9"))))(re.++ (re.union (str.to_re (str.++ "1" (str.++ "0" "")))(re.union (str.to_re (str.++ "1" (str.++ "2" ""))) (re.++ (re.opt (re.range "0" "0")) (re.union (re.range "1" "1")(re.union (re.range "3" "3")(re.union (re.range "5" "5") (re.range "7" "8")))))))(re.++ (re.union (re.++ (re.range "3" "3") (re.range "0" "1"))(re.union (re.++ (re.range "1" "2") (re.range "0" "9")) (re.++ (re.opt (re.range "0" "0")) (re.range "1" "9")))) (str.to_re "")))))(re.union (re.++ (str.to_re "")(re.++ (re.union (re.++ (re.range "1" "1")(re.++ (re.range "8" "9") ((_ re.loop 2 2) (re.range "0" "9")))) (re.++ (re.range "2" "9") ((_ re.loop 3 3) (re.range "0" "9"))))(re.++ (re.union (str.to_re (str.++ "1" (str.++ "1" ""))) (re.++ (re.opt (re.range "0" "0")) (re.union (re.range "4" "4")(re.union (re.range "6" "6") (re.range "9" "9")))))(re.++ (re.union (str.to_re (str.++ "3" (str.++ "0" "")))(re.union (re.++ (re.range "1" "2") (re.range "0" "9")) (re.++ (re.opt (re.range "0" "0")) (re.range "1" "9")))) (str.to_re "")))))(re.union (re.++ (str.to_re "")(re.++ (re.union (re.++ (re.range "1" "1")(re.++ (re.range "8" "9") ((_ re.loop 2 2) (re.range "0" "9")))) (re.++ (re.range "2" "9") ((_ re.loop 3 3) (re.range "0" "9"))))(re.++ (re.++ (re.opt (re.range "0" "0")) (re.range "2" "2"))(re.++ (re.union (re.++ (re.range "2" "2") (re.range "0" "8"))(re.union (re.++ (re.range "1" "1") (re.range "0" "9")) (re.++ (re.opt (re.range "0" "0")) (re.range "1" "9")))) (str.to_re "")))))(re.union (re.++ (str.to_re "")(re.++ (re.++ (re.union (re.range "2" "2")(re.union (re.range "4" "4")(re.union (re.range "6" "6") (re.range "8" "8"))))(re.++ (re.union (re.range "0" "0")(re.union (re.range "4" "4") (re.range "8" "8"))) (str.to_re (str.++ "0" (str.++ "0" "")))))(re.++ (re.++ (re.opt (re.range "0" "0")) (re.range "2" "2"))(re.++ (str.to_re (str.++ "2" (str.++ "9" ""))) (str.to_re "")))))(re.union (re.++ (str.to_re "")(re.++ (re.++ (re.union (re.range "3" "3")(re.union (re.range "5" "5")(re.union (re.range "7" "7") (re.range "9" "9"))))(re.++ (re.union (re.range "2" "2") (re.range "6" "6")) (str.to_re (str.++ "0" (str.++ "0" "")))))(re.++ (re.++ (re.opt (re.range "0" "0")) (re.range "2" "2"))(re.++ (str.to_re (str.++ "2" (str.++ "9" ""))) (str.to_re "")))))(re.union (re.++ (str.to_re "")(re.++ (re.++ (re.range "1" "1")(re.++ (re.range "8" "9")(re.++ (re.range "0" "0") (re.union (re.range "4" "4") (re.range "8" "8")))))(re.++ (re.++ (re.opt (re.range "0" "0")) (re.range "2" "2"))(re.++ (str.to_re (str.++ "2" (str.++ "9" ""))) (str.to_re "")))))(re.union (re.++ (str.to_re "")(re.++ (re.++ (re.range "2" "9")(re.++ (re.range "0" "9")(re.++ (re.range "0" "0") (re.union (re.range "4" "4") (re.range "8" "8")))))(re.++ (re.++ (re.opt (re.range "0" "0")) (re.range "2" "2"))(re.++ (str.to_re (str.++ "2" (str.++ "9" ""))) (str.to_re "")))))(re.union (re.++ (str.to_re "")(re.++ (re.++ (re.range "1" "1")(re.++ (re.range "8" "9")(re.++ (re.union (re.range "2" "2")(re.union (re.range "4" "4")(re.union (re.range "6" "6") (re.range "8" "8")))) (re.union (re.range "0" "0")(re.union (re.range "4" "4") (re.range "8" "8"))))))(re.++ (re.++ (re.opt (re.range "0" "0")) (re.range "2" "2"))(re.++ (str.to_re (str.++ "2" (str.++ "9" ""))) (str.to_re "")))))(re.union (re.++ (str.to_re "")(re.++ (re.++ (re.range "2" "9")(re.++ (re.range "0" "9")(re.++ (re.union (re.range "2" "2")(re.union (re.range "4" "4")(re.union (re.range "6" "6") (re.range "8" "8")))) (re.union (re.range "0" "0")(re.union (re.range "4" "4") (re.range "8" "8"))))))(re.++ (re.++ (re.opt (re.range "0" "0")) (re.range "2" "2"))(re.++ (str.to_re (str.++ "2" (str.++ "9" ""))) (str.to_re "")))))(re.union (re.++ (str.to_re "")(re.++ (re.++ (re.range "1" "1")(re.++ (re.range "8" "9")(re.++ (re.union (re.range "1" "1")(re.union (re.range "3" "3")(re.union (re.range "5" "5")(re.union (re.range "7" "7") (re.range "9" "9"))))) (re.union (re.range "2" "2") (re.range "6" "6")))))(re.++ (re.++ (re.opt (re.range "0" "0")) (re.range "2" "2"))(re.++ (str.to_re (str.++ "2" (str.++ "9" ""))) (str.to_re ""))))) (re.++ (str.to_re "")(re.++ (re.++ (re.range "2" "9")(re.++ (re.range "0" "9")(re.++ (re.union (re.range "1" "1")(re.union (re.range "3" "3")(re.union (re.range "5" "5")(re.union (re.range "7" "7") (re.range "9" "9"))))) (re.union (re.range "2" "2") (re.range "6" "6")))))(re.++ (re.++ (re.opt (re.range "0" "0")) (re.range "2" "2"))(re.++ (str.to_re (str.++ "2" (str.++ "9" ""))) (str.to_re "")))))))))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "7" (str.++ "5" (str.++ "6" (str.++ "0" (str.++ "9" (str.++ "1" (str.++ "8" (str.++ "8" (str.++ "8" (str.++ "|" "")))))))))))

(define-fun Witness2 () String (str.++ "1" (str.++ "9" (str.++ "9" (str.++ "8" (str.++ "9" (str.++ "8" (str.++ "9" (str.++ "9" (str.++ "8" (str.++ "|" "")))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ ((_ re.loop 9 9) (re.range "0" "9"))(re.++ (re.union (re.range "0" "9")(re.union (re.range "X" "X") (re.range "|" "|"))) (str.to_re ""))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "_" (str.++ "_" "")))

(define-fun Witness2 () String (str.++ "g" (str.++ "A" "")))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.union (re.range "A" "Z")(re.union (re.range "_" "_") (re.range "a" "z")))(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_") (re.range "a" "z"))))) (str.to_re ""))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "\u{f2}" (str.++ "@" (str.++ "@" ""))))

(define-fun Witness2 () String (str.++ "Q" (str.++ "@" (str.++ "\u{e8}" ""))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.+ (re.union (re.range "\u{00}" "\u{09}") (re.range "\u{0b}" "\u{ff}")))(re.++ (re.range "@" "@")(re.++ (re.+ (re.union (re.range "\u{00}" "\u{09}") (re.range "\u{0b}" "\u{ff}"))) (str.to_re "")))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "6" (str.++ "@" (str.++ "y" (str.++ "\u{d2}" (str.++ "\u{ba}" (str.++ "\u{b5}" (str.++ "X" (str.++ "g" (str.++ "\u{ba}" (str.++ "\u{d8}" (str.++ "-" (str.++ "4" (str.++ "." (str.++ "1" (str.++ "3" (str.++ "." (str.++ "9" (str.++ "2" (str.++ "." (str.++ "M" (str.++ "u" (str.++ "y" (str.++ "u" ""))))))))))))))))))))))))

(define-fun Witness2 () String (str.++ "1" (str.++ "9" (str.++ "A" (str.++ "\u{aa}" (str.++ "9" (str.++ "\u{b5}" (str.++ "\u{b5}" (str.++ "\u{aa}" (str.++ "\u{aa}" (str.++ "\u{e5}" (str.++ "4" (str.++ "1" (str.++ "2" (str.++ "z" (str.++ "@" (str.++ "z" (str.++ "8" (str.++ "Z" (str.++ "1" (str.++ "9" (str.++ "." (str.++ "N" (str.++ "C" ""))))))))))))))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.++ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))(re.++ (re.* (re.++ (re.* (re.union (re.range "-" ".")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))) (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))))(re.++ (re.range "@" "@")(re.++ (re.+ (re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z"))))(re.++ (re.* (re.++ (re.* (re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))) (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z"))))) (re.range "." ".")))) ((_ re.loop 2 9) (re.union (re.range "A" "Z") (re.range "a" "z"))))))) (str.to_re "")))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "C" (str.++ "Y" (str.++ "8" (str.++ "1" (str.++ "3" (str.++ "6" (str.++ "7" (str.++ "4" (str.++ "1" (str.++ "9" (str.++ "N" ""))))))))))))

(define-fun Witness2 () String (str.++ "1" (str.++ "9" (str.++ "4" (str.++ "8" (str.++ "5" (str.++ "9" (str.++ "9" (str.++ "6" (str.++ "Z" ""))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.opt (str.to_re (str.++ "C" (str.++ "Y" ""))))(re.++ ((_ re.loop 8 8) (re.range "0" "9"))(re.++ (re.range "A" "Z") (str.to_re "")))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "/" (str.++ "/" (str.++ "." (str.++ "K" (str.++ "V" (str.++ "w" (str.++ "/" (str.++ "V" (str.++ "/" (str.++ "." (str.++ " " (str.++ "Y" "")))))))))))))

(define-fun Witness2 () String (str.++ "/" (str.++ "t" (str.++ " " (str.++ "/" (str.++ "." (str.++ "5" (str.++ "u" (str.++ "t" "")))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.range "/" "/")(re.++ (re.++ (re.+ (re.++ (re.opt (str.to_re (str.++ "/" (str.++ "." ""))))(re.++ (re.+ (re.union (re.range " " " ")(re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z"))))) (re.opt (re.range "/" "/"))))) (re.opt (re.++ (re.range "." ".") ((_ re.loop 2 4) (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z"))))))) (str.to_re ""))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "8" (str.++ "1" (str.++ "1" (str.++ "5" "")))))

(define-fun Witness2 () String (str.++ "2" (str.++ "9" (str.++ "9" ""))))

(assert (= regexA (re.union (re.++ (str.to_re "")(re.++ (re.++ ((_ re.loop 4 4) (re.range "0" "9")) (re.* (re.range "0" "9"))) (str.to_re "")))(re.union (re.++ (str.to_re "")(re.++ (re.range "3" "9")(re.++ ((_ re.loop 2 2) (re.range "0" "9")) (str.to_re "")))) (re.++ (str.to_re "")(re.++ (re.range "2" "2")(re.++ (re.range "5" "9")(re.++ (re.range "0" "9") (str.to_re "")))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "0" (str.++ "6" (str.++ "6" (str.++ "0" (str.++ "0" (str.++ "6" (str.++ "1" (str.++ "0" (str.++ "8" (str.++ "9" (str.++ "9" (str.++ "9" (str.++ "3" (str.++ "2" "")))))))))))))))

(define-fun Witness2 () String (str.++ "|" (str.++ "6" (str.++ "9" (str.++ "9" (str.++ "8" (str.++ "9" (str.++ "9" (str.++ "9" (str.++ "9" (str.++ "8" (str.++ "0" (str.++ "9" (str.++ "8" (str.++ "7" "")))))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ ((_ re.loop 2 2) (re.union (re.range "0" "0")(re.union (re.range "3" "3")(re.union (re.range "6" "6")(re.union (re.range "8" "8") (re.range "|" "|"))))))(re.++ ((_ re.loop 12 12) (re.range "0" "9")) (str.to_re ""))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "0" (str.++ "7" (str.++ "6" (str.++ "8" (str.++ " " (str.++ "6" (str.++ "6" (str.++ "8" (str.++ " " (str.++ "8" (str.++ "4" (str.++ "0" "")))))))))))))

(define-fun Witness2 () String (str.++ "(" (str.++ "0" (str.++ "1" (str.++ ")" (str.++ "6" (str.++ "9" (str.++ "7" (str.++ "0" (str.++ "7" (str.++ "3" (str.++ "8" (str.++ "9" "")))))))))))))

(assert (= regexA (re.union (re.++ (str.to_re "")(re.++ ((_ re.loop 10 10) (re.range "0" "9")) (str.to_re "")))(re.union (re.++ (str.to_re "")(re.++ (str.to_re (str.++ "(" (str.++ "0" "")))(re.++ (re.range "1" "9")(re.++ (re.range ")" ")")(re.++ ((_ re.loop 8 8) (re.range "0" "9")) (str.to_re ""))))))(re.union (re.++ (str.to_re "")(re.++ ((_ re.loop 8 8) (re.range "0" "9")) (str.to_re "")))(re.union (re.++ (str.to_re "")(re.++ ((_ re.loop 4 4) (re.range "0" "9"))(re.++ (re.range " " " ")(re.++ ((_ re.loop 3 3) (re.range "0" "9"))(re.++ (re.range " " " ")(re.++ ((_ re.loop 3 3) (re.range "0" "9")) (str.to_re "")))))))(re.union (re.++ (str.to_re "")(re.++ (str.to_re (str.++ "(" (str.++ "0" "")))(re.++ (re.range "1" "9")(re.++ (str.to_re (str.++ ")" (str.++ " " "")))(re.++ ((_ re.loop 4 4) (re.range "0" "9"))(re.++ (re.range " " " ")(re.++ ((_ re.loop 4 4) (re.range "0" "9")) (str.to_re "")))))))) (re.++ (str.to_re "")(re.++ ((_ re.loop 4 4) (re.range "0" "9"))(re.++ (re.range " " " ")(re.++ ((_ re.loop 4 4) (re.range "0" "9")) (str.to_re ""))))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "0" (str.++ "9" (str.++ "/" (str.++ "2" (str.++ "8" (str.++ "/" (str.++ "9" (str.++ "7" (str.++ "6" (str.++ "5" "")))))))))))

(define-fun Witness2 () String (str.++ "1" (str.++ "0" (str.++ "/" (str.++ "3" (str.++ "1" (str.++ "/" (str.++ "8" (str.++ "2" (str.++ "1" (str.++ "4" "")))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.union (re.++ (re.union (re.++ (re.union (re.++ (re.range "0" "0") (re.range "1" "9")) (re.++ (re.range "1" "1") (re.range "0" "2")))(re.++ (re.range "/" "/") (re.union (re.++ (re.range "0" "0") (re.range "1" "9"))(re.union (re.++ (re.range "1" "1") (re.range "0" "9")) (re.++ (re.range "2" "2") (re.range "0" "8"))))))(re.union (re.++ (re.union (re.++ (re.range "0" "0") (re.union (re.range "1" "1") (re.range "3" "9"))) (re.++ (re.range "1" "1") (re.range "0" "2")))(re.++ (re.range "/" "/") (re.union (str.to_re (str.++ "2" (str.++ "9" ""))) (str.to_re (str.++ "3" (str.++ "0" "")))))) (re.++ (re.union (re.++ (re.range "0" "0") (re.union (re.range "1" "1")(re.union (re.range "3" "3")(re.union (re.range "5" "5") (re.range "7" "8"))))) (re.++ (re.range "1" "1") (re.union (re.range "0" "0") (re.range "2" "2")))) (str.to_re (str.++ "/" (str.++ "3" (str.++ "1" "")))))))(re.++ (re.range "/" "/")(re.++ (re.range "2" "9") ((_ re.loop 3 3) (re.range "0" "9"))))) (re.++ (str.to_re (str.++ "0" (str.++ "2" (str.++ "/" (str.++ "2" (str.++ "9" (str.++ "/" ""))))))) (re.union (re.++ (re.++ (re.range "2" "9") (re.range "0" "9")) (re.union (re.++ (re.range "0" "0") (re.union (re.range "4" "4") (re.range "8" "8")))(re.union (re.++ (re.union (re.range "2" "2")(re.union (re.range "4" "4")(re.union (re.range "6" "6") (re.range "8" "8")))) (re.union (re.range "0" "0")(re.union (re.range "4" "4") (re.range "8" "8")))) (re.++ (re.union (re.range "1" "1")(re.union (re.range "3" "3")(re.union (re.range "5" "5")(re.union (re.range "7" "7") (re.range "9" "9"))))) (re.union (re.range "2" "2") (re.range "6" "6")))))) (re.++ (re.union (re.++ (re.union (re.range "2" "2")(re.union (re.range "4" "4")(re.union (re.range "6" "6") (re.range "8" "8")))) (re.union (re.range "0" "0")(re.union (re.range "4" "4") (re.range "8" "8")))) (re.++ (re.union (re.range "3" "3")(re.union (re.range "5" "5")(re.union (re.range "7" "7") (re.range "9" "9")))) (re.union (re.range "2" "2") (re.range "6" "6")))) (str.to_re (str.++ "0" (str.++ "0" ""))))))) (str.to_re "")))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "N" (str.++ "B" (str.++ "N" (str.++ "S" (str.++ " " (str.++ "9" (str.++ "-" (str.++ "8" (str.++ "7" (str.++ "7" (str.++ "-" (str.++ "6" (str.++ "9" (str.++ "8" (str.++ "7" (str.++ "7" (str.++ "-" (str.++ "2" "")))))))))))))))))))

(define-fun Witness2 () String (str.++ "N" (str.++ "I" (str.++ "S" (str.++ "S" (str.++ " " (str.++ "2" (str.++ "-" (str.++ "9" (str.++ "8" (str.++ "6" (str.++ "-" (str.++ "3" (str.++ "8" (str.++ "5" (str.++ "2" (str.++ "4" (str.++ "-" (str.++ "8" "")))))))))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ ((_ re.loop 4 4) (re.union (re.range "B" "B")(re.union (re.range "I" "I")(re.union (re.range "N" "N") (re.range "S" "S")))))(re.++ (re.opt (re.range " " " "))(re.++ (re.range "0" "9")(re.++ (re.range "-" "-")(re.++ ((_ re.loop 3 3) (re.range "0" "9"))(re.++ (re.range "-" "-")(re.++ ((_ re.loop 5 5) (re.range "0" "9"))(re.++ (re.range "-" "-")(re.++ (re.opt (re.range "0" "9")) (str.to_re "")))))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "4" (str.++ "1" (str.++ "8" (str.++ "8" (str.++ "5" (str.++ "-" (str.++ "5" (str.++ "8" (str.++ "8" ""))))))))))

(define-fun Witness2 () String (str.++ "9" (str.++ "6" (str.++ "6" (str.++ "1" (str.++ "2" (str.++ "-" (str.++ "4" (str.++ "8" (str.++ "2" ""))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ ((_ re.loop 5 5) (re.range "0" "9"))(re.++ (re.range "-" "-")(re.++ ((_ re.loop 3 3) (re.range "0" "9")) (str.to_re "")))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ ":" (str.++ "6" (str.++ "5" (str.++ "5" (str.++ "0" (str.++ "9" (str.++ "1" ""))))))))

(define-fun Witness2 () String (str.++ ":" (str.++ "6" (str.++ "5" (str.++ "5" (str.++ "0" (str.++ "8" (str.++ "9" ""))))))))

(assert (= regexA (re.++ (re.range ":" ":") (re.union (re.++ (str.to_re (str.++ "6" (str.++ "5" (str.++ "5" (str.++ "3" ""))))) (re.range "0" "5"))(re.union (re.++ (str.to_re (str.++ "6" (str.++ "5" (str.++ "5" ""))))(re.++ (re.range "0" "2")(re.++ (re.range "0" "9") (re.range "0" "9"))))(re.union (re.++ (str.to_re (str.++ "6" (str.++ "5" "")))(re.++ (re.range "0" "4") ((_ re.loop 2 2) (re.range "0" "9"))))(re.union (re.++ (re.range "6" "6")(re.++ (re.range "0" "4") ((_ re.loop 3 3) (re.range "0" "9"))))(re.union (re.++ (re.range "1" "5") ((_ re.loop 4 4) (re.range "0" "9"))) (re.++ (re.range "1" "9") ((_ re.loop 0 3) (re.range "0" "9")))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "," ""))

(define-fun Witness2 () String (str.++ "," (str.++ "," (str.++ "8" ""))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.+ (re.union (re.range " " " ")(re.union (re.range "(" ")")(re.union (re.range "+" ",") (re.range "0" "9")))))(re.++ (re.* (re.++ (re.range "," ",") (re.+ (re.range "0" "9")))) (str.to_re ""))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "(" (str.++ "\u{8f}" (str.++ ")" (str.++ "\u{a5}" (str.++ "\u{9b}" (str.++ "\u{f3}" (str.++ "\u{db}" ""))))))))

(define-fun Witness2 () String (str.++ "{" (str.++ " " (str.++ ")" (str.++ "\u{93}" (str.++ "\u{17}" ""))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.union (re.range "(" "(")(re.union (re.range "[" "[") (re.range "{" "{")))(re.++ (re.+ (re.union (re.range "\u{00}" "\u{09}") (re.range "\u{0b}" "\u{ff}")))(re.++ (re.union (re.range ")" ")")(re.union (re.range "]" "]") (re.range "}" "}")))(re.++ (re.+ (re.union (re.range "\u{00}" "\u{09}") (re.range "\u{0b}" "\u{ff}"))) (str.to_re ""))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "-" (str.++ "8" (str.++ "8" (str.++ "9" (str.++ "." ""))))))

(define-fun Witness2 () String (str.++ "1" (str.++ "." (str.++ "8" (str.++ "3" "")))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.opt (re.range "-" "-"))(re.++ ((_ re.loop 1 10) (re.range "0" "9"))(re.++ (re.opt (re.range "." "."))(re.++ (re.opt (re.++ (re.range "0" "9") (re.range "0" "9"))) (str.to_re ""))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "Z" (str.++ "r" (str.++ ":" (str.++ "6" "")))))

(define-fun Witness2 () String (str.++ "A" (str.++ "E" (str.++ ":" (str.++ "5" (str.++ "4" (str.++ "0" (str.++ "4" (str.++ "8" "")))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.++ (re.range "A" "Z") (re.opt (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z"))))))(re.++ (re.range ":" ":")(re.++ (re.+ (re.range "0" "9")) (str.to_re "")))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "1" (str.++ "2" (str.++ "4" (str.++ "." (str.++ "1" (str.++ "5" (str.++ "4" (str.++ "." (str.++ "9" (str.++ "." (str.++ "2" (str.++ "4" (str.++ "0" (str.++ ":" (str.++ "8" (str.++ "8" "")))))))))))))))))

(define-fun Witness2 () String (str.++ "1" (str.++ "2" (str.++ "." (str.++ "9" (str.++ "0" (str.++ "." (str.++ "1" (str.++ "9" (str.++ "3" (str.++ "." (str.++ "2" (str.++ "5" (str.++ "5" (str.++ ":" (str.++ "6" (str.++ "5" (str.++ "4" (str.++ "3" (str.++ "9" ""))))))))))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.++ (re.union (re.++ (re.range "2" "2") ((_ re.loop 2 2) (re.range "0" "5")))(re.union (re.++ (re.range "1" "1") ((_ re.loop 2 2) (re.range "0" "9")))(re.union (re.++ (re.range "1" "9") (re.range "0" "9")) (re.range "1" "9"))))(re.++ (re.range "." ".")(re.++ ((_ re.loop 2 2) (re.++ (re.union (re.++ (re.range "2" "2") ((_ re.loop 2 2) (re.range "0" "5")))(re.union (re.++ (re.range "1" "1") ((_ re.loop 2 2) (re.range "0" "9")))(re.union (re.++ (re.range "1" "9") (re.range "0" "9")) (re.range "0" "9")))) (re.range "." "."))) (re.union (re.++ (re.range "2" "2") ((_ re.loop 2 2) (re.range "0" "5")))(re.union (re.++ (re.range "1" "1") ((_ re.loop 2 2) (re.range "0" "9")))(re.union (re.++ (re.range "1" "9") (re.range "0" "9")) (re.range "0" "9")))))))(re.++ (re.range ":" ":")(re.++ (re.union (re.range "0" "9")(re.union (re.++ (re.range "1" "9") (re.range "0" "9"))(re.union (re.++ (re.range "1" "9") ((_ re.loop 2 3) (re.range "0" "9")))(re.union (re.++ (re.range "1" "5") ((_ re.loop 4 4) (re.range "0" "9")))(re.union (re.++ (re.range "6" "6")(re.++ (re.range "0" "4") ((_ re.loop 3 3) (re.range "0" "9"))))(re.union (re.++ (str.to_re (str.++ "6" (str.++ "5" (str.++ "4" "")))) ((_ re.loop 2 2) (re.range "0" "9")))(re.union (re.++ (str.to_re (str.++ "6" (str.++ "5" (str.++ "5" ""))))(re.++ (re.range "0" "2") (re.range "0" "9"))) (re.++ (str.to_re (str.++ "6" (str.++ "5" (str.++ "5" (str.++ "3" ""))))) (re.range "0" "5"))))))))) (str.to_re "")))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "-" (str.++ "#" (str.++ "2" (str.++ "9" (str.++ "8" (str.++ "2" (str.++ "y" (str.++ "E" (str.++ "2" (str.++ "," (str.++ "p" (str.++ "1" (str.++ "1" (str.++ "." (str.++ "1" (str.++ "Q" (str.++ "9" (str.++ "2" "")))))))))))))))))))

(define-fun Witness2 () String (str.++ "-" (str.++ "5" (str.++ "Q" (str.++ "0" (str.++ "#" (str.++ "#" (str.++ "-" (str.++ " " (str.++ " " (str.++ "," (str.++ "8" (str.++ "9" (str.++ "9" (str.++ "1" (str.++ "8" (str.++ "#" (str.++ "8" (str.++ ")" (str.++ "+" (str.++ "3" (str.++ "1" (str.++ "c" (str.++ "/" (str.++ "9" "")))))))))))))))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.++ (re.* (re.union (re.range " " " ")(re.union (re.range "#" "#")(re.union (re.range "(" "/")(re.union (re.range "A" "Z") (re.range "a" "z")))))) (re.range "2" "9"))(re.++ ((_ re.loop 2 2) (re.++ (re.* (re.union (re.range " " " ")(re.union (re.range "#" "#")(re.union (re.range "(" "/")(re.union (re.range "A" "Z") (re.range "a" "z")))))) (re.range "0" "9")))(re.++ (re.++ (re.* (re.union (re.range " " " ")(re.union (re.range "#" "#")(re.union (re.range "(" "/")(re.union (re.range "A" "Z") (re.range "a" "z")))))) (re.range "2" "9"))(re.++ ((_ re.loop 6 6) (re.++ (re.* (re.union (re.range " " " ")(re.union (re.range "#" "#")(re.union (re.range "(" "/")(re.union (re.range "A" "Z") (re.range "a" "z")))))) (re.range "0" "9")))(re.++ (re.* (re.union (re.range " " " ")(re.union (re.range "#" "#")(re.union (re.range "(" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))))) (str.to_re "")))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "0" (str.++ "9" (str.++ "0" (str.++ "8" (str.++ "9" (str.++ "1" (str.++ "9" ""))))))))

(define-fun Witness2 () String (str.++ "0" (str.++ "5" (str.++ "8" (str.++ "9" (str.++ "2" (str.++ "8" "")))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ ((_ re.loop 2 2) (re.union (re.++ (re.range "0" "0") (re.range "1" "9")) (re.union (re.range "0" "9") (re.range "[" "["))))(re.++ ((_ re.loop 3 3) (re.range "0" "9")) (str.to_re ""))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "." (str.++ "." (str.++ "\u{5c}" (str.++ "[" (str.++ "\u{d2}" (str.++ "\u{5c}" (str.++ "\u{b6}" (str.++ "\u{cb}" (str.++ "=" (str.++ "\u{88}" "")))))))))))

(define-fun Witness2 () String (str.++ "+" (str.++ "\u{1b}" "")))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.opt (re.++ (re.union (re.++ (re.union (re.range "A" "Z") (re.range "a" "z")) (re.range ":" ":")) (re.range "\u{5c}" "\u{5c}")) (re.range "\u{5c}" "\u{5c}")))(re.++ (re.* (re.++ (re.union (re.range "." ".")(re.union (str.to_re (str.++ "." (str.++ "." ""))) (re.++ (re.union (re.range "\u{00}" "\u{1f}")(re.union (re.range "!" "!")(re.union (re.range "#" ")")(re.union (re.range "+" "-")(re.union (re.range "0" "9")(re.union (re.range ";" ";")(re.union (re.range "=" "=")(re.union (re.range "@" "[")(re.union (re.range "]" "{") (re.range "}" "\u{ff}")))))))))) (re.opt (re.union (re.union (re.range "\u{00}" "\u{1f}")(re.union (re.range "!" "!")(re.union (re.range "#" ")")(re.union (re.range "+" "-")(re.union (re.range "0" "9")(re.union (re.range ";" ";")(re.union (re.range "=" "=")(re.union (re.range "@" "[")(re.union (re.range "]" "{") (re.range "}" "\u{ff}")))))))))) (re.++ (re.* (re.union (re.range "\u{00}" "!")(re.union (re.range "#" ")")(re.union (re.range "+" ".")(re.union (re.range "0" "9")(re.union (re.range ";" ";")(re.union (re.range "=" "=")(re.union (re.range "@" "[")(re.union (re.range "]" "{") (re.range "}" "\u{ff}")))))))))) (re.union (re.range "\u{00}" "\u{1f}")(re.union (re.range "!" "!")(re.union (re.range "#" ")")(re.union (re.range "+" "-")(re.union (re.range "0" "9")(re.union (re.range ";" ";")(re.union (re.range "=" "=")(re.union (re.range "@" "[")(re.union (re.range "]" "{") (re.range "}" "\u{ff}")))))))))))))))) (re.range "\u{5c}" "\u{5c}")))(re.++ (re.union (re.range "\u{00}" "\u{1f}")(re.union (re.range "!" "!")(re.union (re.range "#" ")")(re.union (re.range "+" "-")(re.union (re.range "0" "9")(re.union (re.range ";" ";")(re.union (re.range "=" "=")(re.union (re.range "@" "[")(re.union (re.range "]" "{") (re.range "}" "\u{ff}"))))))))))(re.++ (re.opt (re.union (re.union (re.range "\u{00}" "\u{1f}")(re.union (re.range "!" "!")(re.union (re.range "#" ")")(re.union (re.range "+" "-")(re.union (re.range "0" "9")(re.union (re.range ";" ";")(re.union (re.range "=" "=")(re.union (re.range "@" "[")(re.union (re.range "]" "{") (re.range "}" "\u{ff}")))))))))) (re.++ (re.* (re.union (re.range "\u{00}" "!")(re.union (re.range "#" ")")(re.union (re.range "+" ".")(re.union (re.range "0" "9")(re.union (re.range ";" ";")(re.union (re.range "=" "=")(re.union (re.range "@" "[")(re.union (re.range "]" "{") (re.range "}" "\u{ff}")))))))))) (re.union (re.range "\u{00}" "\u{1f}")(re.union (re.range "!" "!")(re.union (re.range "#" ")")(re.union (re.range "+" "-")(re.union (re.range "0" "9")(re.union (re.range ";" ";")(re.union (re.range "=" "=")(re.union (re.range "@" "[")(re.union (re.range "]" "{") (re.range "}" "\u{ff}"))))))))))))) (str.to_re ""))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "1" (str.++ "k" (str.++ "6" (str.++ "5" (str.++ "6" (str.++ "w" (str.++ "z" (str.++ "4" (str.++ "6" (str.++ "i" (str.++ "f" (str.++ "g" (str.++ "4" (str.++ "x" (str.++ "j" (str.++ "8" (str.++ "4" (str.++ "7" (str.++ "9" (str.++ "2" (str.++ "i" (str.++ "h" (str.++ "8" (str.++ "a" (str.++ "4" (str.++ "z" (str.++ "e" (str.++ "9" (str.++ "8" (str.++ "6" (str.++ "z" (str.++ "8" "")))))))))))))))))))))))))))))))))

(define-fun Witness2 () String (str.++ "z" (str.++ "h" (str.++ "h" (str.++ "m" (str.++ "v" (str.++ "c" (str.++ "2" (str.++ "7" (str.++ "7" (str.++ "9" (str.++ "z" (str.++ "l" (str.++ "j" (str.++ "8" (str.++ "a" (str.++ "v" (str.++ "r" (str.++ "q" (str.++ "9" (str.++ "p" (str.++ "l" (str.++ "a" (str.++ "3" (str.++ "z" (str.++ "b" (str.++ "8" (str.++ "4" (str.++ "i" (str.++ "1" (str.++ "b" (str.++ "8" (str.++ "q" "")))))))))))))))))))))))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ ((_ re.loop 32 32) (re.union (re.range "0" "9") (re.range "a" "z"))) (str.to_re "")))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String "")

(define-fun Witness2 () String "")

(assert (= regexA (str.to_re "")))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "g" (str.++ "r" (str.++ "o" (str.++ "u" (str.++ "p" (str.++ "=" (str.++ "1" (str.++ "9" (str.++ "5" (str.++ ";" "")))))))))))

(define-fun Witness2 () String (str.++ "u" (str.++ "s" (str.++ "e" (str.++ "r" (str.++ "=" (str.++ "9" (str.++ "q" (str.++ "," (str.++ "1" (str.++ ";" "")))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.opt (re.++ (str.to_re (str.++ "u" (str.++ "s" (str.++ "e" (str.++ "r" (str.++ "=" ""))))))(re.++ (re.* (re.++ (re.+ (re.union (re.range "0" "9") (re.range "a" "z"))) (re.range "," ",")))(re.++ (re.+ (re.union (re.range "0" "9") (re.range "a" "z"))) (re.range ";" ";")))))(re.++ (re.opt (re.++ (str.to_re (str.++ "g" (str.++ "r" (str.++ "o" (str.++ "u" (str.++ "p" (str.++ "=" "")))))))(re.++ (re.* (re.++ (re.+ (re.union (re.range "0" "9") (re.range "a" "z"))) (re.range "," ",")))(re.++ (re.+ (re.union (re.range "0" "9") (re.range "a" "z"))) (re.range ";" ";")))))(re.++ (re.opt (re.++ (str.to_re (str.++ "l" (str.++ "e" (str.++ "v" (str.++ "e" (str.++ "l" (str.++ "=" "")))))))(re.++ (re.+ (re.range "0" "9")) (re.range ";" ";")))) (str.to_re "")))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "\u{e3}" (str.++ "=" (str.++ "\u{b5}" (str.++ "," (str.++ "9" (str.++ "2" (str.++ "\u{d6}" (str.++ "9" (str.++ "=" (str.++ "\u{fb}" (str.++ "\u{bb}" (str.++ "," (str.++ "W" (str.++ "=" (str.++ "K" (str.++ "," (str.++ "0" (str.++ "9" (str.++ "\u{ba}" (str.++ "=" (str.++ "d" (str.++ "\u{d6}" (str.++ "," ""))))))))))))))))))))))))

(define-fun Witness2 () String (str.++ "\u{aa}" (str.++ "\u{c2}" (str.++ "w" (str.++ "=" (str.++ "\u{fb}" (str.++ "\u{8a}" (str.++ "\u{18}" (str.++ "," (str.++ "z" (str.++ "=" (str.++ "\u{b2}" (str.++ "d" (str.++ "\u{0e}" (str.++ "\u{8e}" "")))))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.* (re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))(re.++ (re.range "=" "=")(re.++ (re.+ (re.union (re.range "\u{00}" "\u{08}")(re.union (re.range "\u{0e}" "\u{1f}")(re.union (re.range "!" "+")(re.union (re.range "-" "<")(re.union (re.range ">" "\u{84}")(re.union (re.range "\u{86}" "\u{9f}") (re.range "\u{a1}" "\u{ff}")))))))) (re.range "," ",")))))(re.++ (re.opt (re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))(re.++ (re.range "=" "=")(re.++ (re.+ (re.union (re.range "\u{00}" "\u{08}")(re.union (re.range "\u{0e}" "\u{1f}")(re.union (re.range "!" "+")(re.union (re.range "-" "<")(re.union (re.range ">" "\u{84}")(re.union (re.range "\u{86}" "\u{9f}") (re.range "\u{a1}" "\u{ff}")))))))) (re.opt (re.range "," ",")))))) (str.to_re ""))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ " " (str.++ "P" (str.++ "r" (str.++ "i" (str.++ "v" (str.++ "a" (str.++ "t" (str.++ "e" (str.++ " " (str.++ "\u{85}" (str.++ "\u{0d}" (str.++ "\u{0d}" (str.++ "\u{a0}" (str.++ "F" (str.++ "u" (str.++ "n" (str.++ "c" (str.++ "t" (str.++ "i" (str.++ "o" (str.++ "n" (str.++ " " (str.++ "\u{a0}" (str.++ "\u{0c}" (str.++ "\u{a0}" (str.++ "Y" (str.++ "\u{e4}" ""))))))))))))))))))))))))))))

(define-fun Witness2 () String (str.++ "P" (str.++ "r" (str.++ "i" (str.++ "v" (str.++ "a" (str.++ "t" (str.++ "e" (str.++ "\u{a0}" (str.++ "_" (str.++ "\u{0d}" (str.++ "F" (str.++ "u" (str.++ "n" (str.++ "c" (str.++ "t" (str.++ "i" (str.++ "o" (str.++ "n" (str.++ "\u{a0}" (str.++ "E" (str.++ "\u{f8}" (str.++ "\u{ec}" "")))))))))))))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (re.opt (re.++ (re.union (str.to_re (str.++ "P" (str.++ "u" (str.++ "b" (str.++ "l" (str.++ "i" (str.++ "c" ""))))))) (str.to_re (str.++ "P" (str.++ "r" (str.++ "i" (str.++ "v" (str.++ "a" (str.++ "t" (str.++ "e" "")))))))))(re.++ (re.+ (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))) (re.opt (re.++ (re.range "_" "_")(re.++ (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))) (re.+ (re.union (re.range "\u{0a}" "\u{0a}") (re.range "\u{0d}" "\u{0d}")))))))))(re.++ (re.union (str.to_re (str.++ "F" (str.++ "u" (str.++ "n" (str.++ "c" (str.++ "t" (str.++ "i" (str.++ "o" (str.++ "n" ""))))))))) (str.to_re (str.++ "S" (str.++ "u" (str.++ "b" "")))))(re.++ (re.+ (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (re.opt (re.++ (re.range "_" "_")(re.++ (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))) (re.+ (re.union (re.range "\u{0a}" "\u{0a}") (re.range "\u{0d}" "\u{0d}"))))))(re.++ (re.++ (re.union (re.range "A" "Z") (re.range "a" "z")) ((_ re.loop 0 254) (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))) (re.opt (re.++ (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "_" "_")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))))(re.++ (re.range "(" "(")(re.++ (re.* (re.++ (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "_" "_")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))))(re.++ (re.++ (re.union (re.range "A" "Z") (re.range "a" "z")) ((_ re.loop 0 254) (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))))(re.++ (re.opt (re.range "," ",")) (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))))))) (re.range ")" ")"))))))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "-" (str.++ "3" (str.++ "1" (str.++ "2" "")))))

(define-fun Witness2 () String (str.++ "-" (str.++ "8" (str.++ "," (str.++ "1" "")))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.opt (re.range "-" "-"))(re.++ (re.+ (re.range "0" "9"))(re.++ (re.opt (re.++ (re.opt (re.union (re.range "," ",") (re.range "." "."))) (re.+ (re.range "0" "9")))) (str.to_re "")))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "2" (str.++ "7" (str.++ "." (str.++ "1" (str.++ "9" ""))))))

(define-fun Witness2 () String (str.++ "9" ""))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.opt (re.range "1" "9"))(re.++ (re.range "0" "9")(re.++ (re.opt (re.union (re.++ (re.++ (re.range "." ".") (re.opt (re.range "0" "9"))) (re.range "0" "9")) (re.++ (re.++ (re.range "," ",") (re.opt (re.range "0" "9"))) (re.range "0" "9")))) (str.to_re "")))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "7" (str.++ "5" "")))

(define-fun Witness2 () String (str.++ "1" (str.++ "8" (str.++ "." (str.++ "," "")))))

(assert (= regexA (re.union (re.++ (str.to_re "")(re.++ ((_ re.loop 1 3) (re.range "0" "9")) (str.to_re ""))) (re.++ ((_ re.loop 1 3) (re.range "0" "9"))(re.++ (re.opt (re.range "." ".")) (re.union (re.range "," ",")(re.union (re.range "0" "0") (re.range "5" "5"))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "S" (str.++ "K" "")))

(define-fun Witness2 () String (str.++ "A" (str.++ "B" "")))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.union (re.++ (re.range "N" "N") (re.union (re.range "B" "B")(re.union (re.range "L" "L") (re.range "S" "U"))))(re.union (re.++ (re.union (re.range "A" "A") (re.range "M" "N")) (re.range "B" "B"))(re.union (re.++ (re.union (re.range "B" "B") (re.range "Q" "Q")) (re.range "C" "C"))(re.union (str.to_re (str.++ "O" (str.++ "N" "")))(re.union (str.to_re (str.++ "P" (str.++ "E" ""))) (str.to_re (str.++ "S" (str.++ "K" "")))))))) (str.to_re "")))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "0" (str.++ "2" (str.++ ":" (str.++ "5" (str.++ "9" ""))))))

(define-fun Witness2 () String (str.++ "0" (str.++ "4" (str.++ "9" (str.++ ":" (str.++ "5" (str.++ "0" "")))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.++ (re.union (re.++ (re.opt (re.range "0" "0"))(re.++ (re.range "0" "5") (re.range "0" "9"))) (re.range "0" "9"))(re.++ (re.range ":" ":") (re.++ (re.range "0" "5") (re.range "0" "9")))) (str.to_re "")))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "-" (str.++ "4" (str.++ "8" (str.++ "1" (str.++ "9" ""))))))

(define-fun Witness2 () String (str.++ "-" (str.++ "7" (str.++ "1" (str.++ "." "")))))

(assert (= regexA (re.union (re.++ (str.to_re "")(re.++ (re.range "-" "-")(re.++ (re.* (re.range "0" "9"))(re.++ (re.opt (re.range "." "."))(re.++ (re.* (re.range "0" "9"))(re.++ (re.+ (re.range "1" "9"))(re.++ (re.* (re.range "0" "9")) (str.to_re "")))))))) (re.++ (str.to_re "")(re.++ (re.range "-" "-")(re.++ (re.+ (re.range "1" "9"))(re.++ (re.* (re.range "0" "9"))(re.++ (re.range "." ".")(re.++ (re.* (re.range "0" "9")) (str.to_re ""))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "+" (str.++ "0" (str.++ "4" (str.++ "4" (str.++ "(" (str.++ "0" (str.++ ")" (str.++ "1" (str.++ "6" (str.++ "1" (str.++ "9" (str.++ ")" (str.++ "-" (str.++ "5" (str.++ "9" (str.++ "9" (str.++ " " (str.++ "0" (str.++ "8" (str.++ "7" "")))))))))))))))))))))

(define-fun Witness2 () String (str.++ "\u{85}" (str.++ " " (str.++ ")" (str.++ "(" (str.++ "0" (str.++ ")" (str.++ "8" (str.++ "0" (str.++ "8" (str.++ "9" (str.++ ")" (str.++ "2" (str.++ "8" (str.++ "6" (str.++ "0" (str.++ "8" (str.++ "6" (str.++ "\u{85}" "")))))))))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (re.opt (re.range "(" "("))(re.++ (re.union (re.++ (re.opt (re.++ (re.range "+" "+")(re.++ (re.opt (re.range "0" "0")) (str.to_re (str.++ "4" (str.++ "4" ""))))))(re.++ (re.opt (re.range ")" ")"))(re.++ (re.opt (re.union (re.range " " " ") (re.range "-" "-"))) (str.to_re (str.++ "(" (str.++ "0" (str.++ ")" ""))))))) (re.range "0" "0"))(re.++ (re.union (re.++ (str.to_re (str.++ "2" (str.++ "0" "")))(re.++ (re.union (re.range "," ",") (re.range "7" "8"))(re.++ (re.opt (re.range ")" ")"))(re.++ (re.opt (re.union (re.range " " " ") (re.range "-" "-")))(re.++ (re.range "1" "9")(re.++ ((_ re.loop 2 2) (re.range "0" "9"))(re.++ (re.opt (re.union (re.range " " " ") (re.range "-" "-"))) ((_ re.loop 4 4) (re.range "0" "9"))))))))) (re.++ (re.range "1" "8")(re.++ ((_ re.loop 3 3) (re.range "0" "9"))(re.++ (re.opt (re.range ")" ")"))(re.++ (re.opt (re.union (re.range " " " ") (re.range "-" "-")))(re.++ (re.range "1" "9")(re.++ ((_ re.loop 2 2) (re.range "0" "9"))(re.++ (re.opt (re.union (re.range " " " ") (re.range "-" "-"))) ((_ re.loop 3 3) (re.range "0" "9"))))))))))(re.++ (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))) (str.to_re "")))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "9" ""))

(define-fun Witness2 () String (str.++ "9" ""))

(assert (= regexA (re.union (re.++ (str.to_re "")(re.++ (re.opt (re.range "1" "1"))(re.++ (re.range "1" "9") (str.to_re "")))) (re.++ (str.to_re "")(re.++ (re.range "1" "2")(re.++ (re.range "0" "0") (str.to_re "")))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "$" (str.++ "8" (str.++ "." (str.++ "7" (str.++ "9" ""))))))

(define-fun Witness2 () String (str.++ "$" (str.++ "4" (str.++ "," (str.++ "9" (str.++ "8" (str.++ "9" (str.++ "." (str.++ "9" (str.++ "8" ""))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.range "$" "$")(re.++ (re.union (re.++ ((_ re.loop 1 3) (re.range "0" "9")) (re.* (re.++ (re.range "," ",") ((_ re.loop 3 3) (re.range "0" "9"))))) (re.+ (re.range "0" "9")))(re.++ (re.opt (re.++ (re.range "." ".") ((_ re.loop 2 2) (re.range "0" "9")))) (str.to_re "")))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "h" (str.++ "t" (str.++ "t" (str.++ "p" (str.++ ":" (str.++ "/" (str.++ "/" (str.++ "a" (str.++ "." (str.++ "F" (str.++ "Z" (str.++ "K" "")))))))))))))

(define-fun Witness2 () String (str.++ "h" (str.++ "t" (str.++ "t" (str.++ "p" (str.++ ":" (str.++ "/" (str.++ "/" (str.++ "H" (str.++ "." (str.++ "." (str.++ "Y" (str.++ "Z" "")))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (str.to_re (str.++ "h" (str.++ "t" (str.++ "t" (str.++ "p" (str.++ ":" (str.++ "/" (str.++ "/" ""))))))))(re.++ (re.+ (re.union (re.range "-" ".")(re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))))(re.++ (re.range "." ".")(re.++ ((_ re.loop 2 3) (re.union (re.range "A" "Z") (re.range "a" "z")))(re.++ (re.opt (re.++ (re.range "/" "/") (re.* (re.union (re.range "\u{00}" "\u{08}")(re.union (re.range "\u{0e}" "\u{1f}")(re.union (re.range "!" "\u{84}")(re.union (re.range "\u{86}" "\u{9f}") (re.range "\u{a1}" "\u{ff}")))))))) (str.to_re "")))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "-" (str.++ "9" (str.++ "9" (str.++ "4" (str.++ "8" ""))))))

(define-fun Witness2 () String (str.++ "-" (str.++ "1" "")))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.opt (re.range "-" "-"))(re.++ (re.union (re.++ ((_ re.loop 1 3) (re.range "0" "9")) (re.* (re.++ (re.range "," ",") ((_ re.loop 3 3) (re.range "0" "9"))))) (re.+ (re.range "0" "9")))(re.++ (re.opt (re.++ (re.range "." ".") ((_ re.loop 1 2) (re.range "0" "9")))) (str.to_re "")))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "9" (str.++ "3" (str.++ "2" (str.++ "9" (str.++ "O" (str.++ "X" "")))))))

(define-fun Witness2 () String (str.++ "3" (str.++ "8" (str.++ "2" (str.++ "8" (str.++ "\u{a0}" (str.++ "K" (str.++ "D" ""))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.range "1" "9")(re.++ ((_ re.loop 3 3) (re.range "0" "9"))(re.++ (re.opt (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ ((_ re.loop 2 2) (re.range "A" "Z")) (str.to_re ""))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String "")

(define-fun Witness2 () String (str.++ "]" (str.++ "6" (str.++ "\u{f7}" ""))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.* (re.union (re.range "\u{00}" "%")(re.union (re.range "(" ")")(re.union (re.range "+" ".")(re.union (re.range "0" "9")(re.union (re.range "<" ">")(re.union (re.range "@" "[")(re.union (re.range "]" "f")(re.union (re.range "h" "k")(re.union (re.range "m" "n")(re.union (re.range "p" "p")(re.union (re.range "r" "s")(re.union (re.range "v" "{") (re.range "}" "\u{ff}")))))))))))))) (str.to_re "")))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "8" ""))

(define-fun Witness2 () String (str.++ "#" (str.++ "#" "")))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.+ (re.union (re.range "#" "#")(re.union (re.range "*" "*")(re.union (re.range "0" "9")(re.union (re.range "A" "D") (re.range "a" "d")))))) (str.to_re "")))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "(" (str.++ "0" (str.++ "7" (str.++ "8" (str.++ "8" (str.++ "9" (str.++ "\u{85}" (str.++ "4" (str.++ "9" (str.++ "9" (str.++ "9" (str.++ "9" (str.++ "6" ""))))))))))))))

(define-fun Witness2 () String (str.++ "(" (str.++ "0" (str.++ "7" (str.++ "2" (str.++ "9" (str.++ "8" (str.++ ")" (str.++ "8" (str.++ "1" (str.++ "9" (str.++ "0" (str.++ "4" (str.++ "9" ""))))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.union (re.++ (str.to_re (str.++ "+" (str.++ "4" (str.++ "4" ""))))(re.++ (re.opt (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (re.range "7" "7") ((_ re.loop 3 3) (re.range "0" "9"))))) (re.++ (re.opt (re.range "(" "("))(re.++ (str.to_re (str.++ "0" (str.++ "7" "")))(re.++ ((_ re.loop 3 3) (re.range "0" "9")) (re.opt (re.range ")" ")"))))))(re.++ (re.opt (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ ((_ re.loop 3 3) (re.range "0" "9"))(re.++ (re.opt (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ ((_ re.loop 3 3) (re.range "0" "9")) (str.to_re "")))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "1" (str.++ "0" "")))

(define-fun Witness2 () String (str.++ "0" (str.++ "9" "")))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.union (re.++ (re.range "0" "0") (re.range "1" "9")) (re.++ (re.range "1" "1") (re.range "0" "2"))) (str.to_re "")))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "x" (str.++ "M" (str.++ "l" (str.++ "N" (str.++ "8" (str.++ "F" (str.++ "." (str.++ "e" (str.++ "\u{9a}" ""))))))))))

(define-fun Witness2 () String (str.++ "s" (str.++ "9" (str.++ "." (str.++ "." (str.++ "z" (str.++ "9" (str.++ "p" (str.++ "9" (str.++ "\u{8a}" ""))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ ((_ re.loop 8 64) (re.union (re.range " " " ")(re.union (re.range "'" "'")(re.union (re.range "." ".")(re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))))))(re.++ (re.union (re.range "\u{00}" "\u{08}")(re.union (re.range "\u{0e}" "\u{1f}")(re.union (re.range "!" "\u{84}")(re.union (re.range "\u{86}" "\u{9f}") (re.range "\u{a1}" "\u{ff}"))))) (str.to_re ""))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "+" (str.++ "4" (str.++ "9" (str.++ " " (str.++ "4" (str.++ "1" (str.++ "8" (str.++ "8" (str.++ "9" (str.++ " " (str.++ "5" (str.++ " " (str.++ "9" (str.++ "9" "")))))))))))))))

(define-fun Witness2 () String (str.++ "0" (str.++ "0" (str.++ "4" (str.++ "9" (str.++ "(" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ ")" (str.++ "6" (str.++ " " (str.++ "9" (str.++ "8" ""))))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.++ (re.union (re.++ (re.union (re.++ (re.union (str.to_re (str.++ "0" (str.++ "0" ""))) (re.range "+" "+"))(re.++ (str.to_re (str.++ "4" (str.++ "9" ""))) (re.opt (re.union (re.range " " " ")(re.union (re.range "-" "-") (re.range "/" "/")))))) (re.range "0" "0"))(re.++ (re.range "1" "9")(re.++ ((_ re.loop 1 4) (re.range "0" "9")) (re.opt (re.union (re.range " " " ")(re.union (re.range "-" "-") (re.range "/" "/"))))))) (re.++ (re.union (re.++ (re.union (str.to_re (str.++ "0" (str.++ "0" ""))) (re.range "+" "+")) (str.to_re (str.++ "4" (str.++ "9" (str.++ "(" ""))))) (str.to_re (str.++ "(" (str.++ "0" ""))))(re.++ (re.range "1" "9")(re.++ ((_ re.loop 1 4) (re.range "0" "9")) (re.range ")" ")")))))(re.++ ((_ re.loop 1 7) (re.range "0" "9"))(re.++ (re.opt (re.union (re.range " " " ")(re.union (re.range "-" "-") (re.range "/" "/")))) ((_ re.loop 1 5) (re.range "0" "9"))))) (str.to_re "")))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "h" (str.++ "t" (str.++ "t" (str.++ "p" (str.++ ":" (str.++ "/" (str.++ "/" (str.++ "5" (str.++ "4" (str.++ "u" (str.++ "." (str.++ "." (str.++ "h" ""))))))))))))))

(define-fun Witness2 () String (str.++ "h" (str.++ "t" (str.++ "t" (str.++ "p" (str.++ "s" (str.++ ":" (str.++ "/" (str.++ "/" (str.++ "0" (str.++ "." (str.++ "J" (str.++ "l" (str.++ "R" (str.++ "/" (str.++ "E" (str.++ "-" "")))))))))))))))))

(assert (= regexA (re.++ (re.union (str.to_re (str.++ "h" (str.++ "t" (str.++ "t" (str.++ "p" (str.++ ":" (str.++ "/" (str.++ "/" "")))))))) (str.to_re (str.++ "h" (str.++ "t" (str.++ "t" (str.++ "p" (str.++ "s" (str.++ ":" (str.++ "/" (str.++ "/" ""))))))))))(re.++ (re.union (re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z"))))(re.++ (re.range "." ".") (re.+ (re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z"))))))) (re.+ (re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z"))))))(re.++ (re.range "." ".")(re.++ ((_ re.loop 2 6) (re.union (re.range "." ".")(re.union (re.range "A" "Z") (re.range "a" "z")))) (re.union (re.++ (re.range "/" "/") (re.+ (re.union (re.range "#" "#")(re.union (re.range "%" "&")(re.union (re.range "+" "+")(re.union (re.range "-" "9")(re.union (re.range "=" "=")(re.union (re.range "?" "?")(re.union (re.range "A" "Z") (re.range "a" "z"))))))))))(re.union (re.range "/" "/") (str.to_re "")))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "v" (str.++ "=" (str.++ "s" (str.++ "p" (str.++ "f" (str.++ "1" (str.++ " " (str.++ "-" (str.++ "m" (str.++ "x" (str.++ ":" (str.++ "i" (str.++ "P" (str.++ "." (str.++ "A" ""))))))))))))))))

(define-fun Witness2 () String (str.++ "v" (str.++ "=" (str.++ "s" (str.++ "p" (str.++ "f" (str.++ "1" (str.++ "\u{09}" (str.++ " " (str.++ "a" (str.++ ":" (str.++ "M" (str.++ "." (str.++ "x" (str.++ "B" (str.++ "/" (str.++ "7" (str.++ "9" (str.++ " " (str.++ "~" (str.++ "m" (str.++ "x" (str.++ ":" (str.++ "L" (str.++ "." (str.++ "A" (str.++ "." (str.++ "7" (str.++ "3" "")))))))))))))))))))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (str.to_re (str.++ "v" (str.++ "=" (str.++ "s" (str.++ "p" (str.++ "f" (str.++ "1" "")))))))(re.++ (re.+ (re.union (re.range "\u{09}" "\u{09}") (re.range " " " ")))(re.++ (re.opt (re.union (re.range "+" "+")(re.union (re.range "-" "-")(re.union (re.range "?" "?") (re.range "~" "~")))))(re.++ (re.union (str.to_re (str.++ "a" (str.++ "l" (str.++ "l" ""))))(re.union (re.++ (str.to_re (str.++ "i" (str.++ "p" (str.++ "4" ""))))(re.++ (re.opt (re.++ (re.range ":" ":")(re.++ ((_ re.loop 1 3) (re.range "0" "9"))(re.++ (re.range "." ".")(re.++ ((_ re.loop 1 3) (re.range "0" "9"))(re.++ (re.range "." ".")(re.++ ((_ re.loop 1 3) (re.range "0" "9"))(re.++ (re.range "." ".") ((_ re.loop 1 3) (re.range "0" "9")))))))))) (re.opt (re.++ (re.range "/" "/") ((_ re.loop 1 2) (re.range "0" "9"))))))(re.union (re.++ (str.to_re (str.++ "i" (str.++ "p" (str.++ "6" ""))))(re.++ (re.opt (re.++ (re.range ":" ":")(re.++ ((_ re.loop 7 7) (re.++ ((_ re.loop 1 4) (re.union (re.range "0" "9")(re.union (re.range "A" "F") (re.range "a" "f")))) (re.range ":" ":"))) ((_ re.loop 1 4) (re.union (re.range "0" "9")(re.union (re.range "A" "F") (re.range "a" "f"))))))) (re.opt (re.++ (re.range "/" "/") ((_ re.loop 1 2) (re.range "0" "9"))))))(re.union (re.++ (re.range "a" "a")(re.++ (re.opt (re.++ (re.range ":" ":")(re.++ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))(re.++ (re.opt (re.++ (re.* (re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z"))))) (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z"))))) (re.+ (re.++ (re.range "." ".")(re.++ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z"))) (re.opt (re.++ (re.* (re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z"))))) (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))))))))))) (re.opt (re.++ (re.range "/" "/") ((_ re.loop 1 2) (re.range "0" "9"))))))(re.union (re.++ (str.to_re (str.++ "m" (str.++ "x" "")))(re.++ (re.opt (re.++ (re.range ":" ":")(re.++ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))(re.++ (re.opt (re.++ (re.* (re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z"))))) (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z"))))) (re.+ (re.++ (re.range "." ".")(re.++ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z"))) (re.opt (re.++ (re.* (re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z"))))) (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))))))))))) (re.opt (re.++ (re.range "/" "/") ((_ re.loop 1 2) (re.range "0" "9"))))))(re.union (re.++ (str.to_re (str.++ "p" (str.++ "t" (str.++ "r" (str.++ ":" "")))))(re.++ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))(re.++ (re.opt (re.++ (re.* (re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z"))))) (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z"))))) (re.+ (re.++ (re.range "." ".")(re.++ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z"))) (re.opt (re.++ (re.* (re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z"))))) (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))))))))))(re.union (re.++ (str.to_re (str.++ "e" (str.++ "x" (str.++ "i" (str.++ "s" (str.++ "t" (str.++ "s" (str.++ ":" ""))))))))(re.++ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))(re.++ (re.opt (re.++ (re.* (re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z"))))) (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z"))))) (re.+ (re.++ (re.range "." ".")(re.++ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z"))) (re.opt (re.++ (re.* (re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z"))))) (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))))))))))(re.union (re.++ (str.to_re (str.++ "i" (str.++ "n" (str.++ "c" (str.++ "l" (str.++ "u" (str.++ "d" (str.++ "e" (str.++ ":" "")))))))))(re.++ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))(re.++ (re.opt (re.++ (re.* (re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z"))))) (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z"))))) (re.+ (re.++ (re.range "." ".")(re.++ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z"))) (re.opt (re.++ (re.* (re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z"))))) (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))))))))))(re.union (re.++ (str.to_re (str.++ "r" (str.++ "e" (str.++ "d" (str.++ "i" (str.++ "r" (str.++ "e" (str.++ "c" (str.++ "t" (str.++ ":" ""))))))))))(re.++ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))(re.++ (re.opt (re.++ (re.* (re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z"))))) (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z"))))) (re.+ (re.++ (re.range "." ".")(re.++ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z"))) (re.opt (re.++ (re.* (re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z"))))) (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))))))))))(re.union (re.++ (str.to_re (str.++ "e" (str.++ "x" (str.++ "p" (str.++ ":" "")))))(re.++ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))(re.++ (re.opt (re.++ (re.* (re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z"))))) (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z"))))) (re.+ (re.++ (re.range "." ".")(re.++ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z"))) (re.opt (re.++ (re.* (re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z"))))) (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z"))))))))))) (str.to_re "")))))))))))(re.++ (re.* (re.++ (re.+ (re.union (re.range "\u{09}" "\u{09}") (re.range " " " ")))(re.++ (re.opt (re.union (re.range "+" "+")(re.union (re.range "-" "-")(re.union (re.range "?" "?") (re.range "~" "~"))))) (re.union (str.to_re (str.++ "a" (str.++ "l" (str.++ "l" ""))))(re.union (re.++ (str.to_re (str.++ "i" (str.++ "p" (str.++ "4" ""))))(re.++ (re.opt (re.++ (re.range ":" ":")(re.++ ((_ re.loop 1 3) (re.range "0" "9"))(re.++ (re.range "." ".")(re.++ ((_ re.loop 1 3) (re.range "0" "9"))(re.++ (re.range "." ".")(re.++ ((_ re.loop 1 3) (re.range "0" "9"))(re.++ (re.range "." ".") ((_ re.loop 1 3) (re.range "0" "9")))))))))) (re.opt (re.++ (re.range "/" "/") ((_ re.loop 1 2) (re.range "0" "9"))))))(re.union (re.++ (str.to_re (str.++ "i" (str.++ "p" (str.++ "6" ""))))(re.++ (re.opt (re.++ (re.range ":" ":")(re.++ ((_ re.loop 7 7) (re.++ ((_ re.loop 1 4) (re.union (re.range "0" "9")(re.union (re.range "A" "F") (re.range "a" "f")))) (re.range ":" ":"))) ((_ re.loop 1 4) (re.union (re.range "0" "9")(re.union (re.range "A" "F") (re.range "a" "f"))))))) (re.opt (re.++ (re.range "/" "/") ((_ re.loop 1 2) (re.range "0" "9"))))))(re.union (re.++ (re.range "a" "a")(re.++ (re.opt (re.++ (re.range ":" ":")(re.++ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))(re.++ (re.opt (re.++ (re.* (re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z"))))) (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z"))))) (re.+ (re.++ (re.range "." ".")(re.++ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z"))) (re.opt (re.++ (re.* (re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z"))))) (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))))))))))) (re.opt (re.++ (re.range "/" "/") ((_ re.loop 1 2) (re.range "0" "9"))))))(re.union (re.++ (str.to_re (str.++ "m" (str.++ "x" "")))(re.++ (re.opt (re.++ (re.range ":" ":")(re.++ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))(re.++ (re.opt (re.++ (re.* (re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z"))))) (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z"))))) (re.+ (re.++ (re.range "." ".")(re.++ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z"))) (re.opt (re.++ (re.* (re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z"))))) (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))))))))))) (re.opt (re.++ (re.range "/" "/") ((_ re.loop 1 2) (re.range "0" "9"))))))(re.union (re.++ (str.to_re (str.++ "p" (str.++ "t" (str.++ "r" (str.++ ":" "")))))(re.++ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))(re.++ (re.opt (re.++ (re.* (re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z"))))) (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z"))))) (re.+ (re.++ (re.range "." ".")(re.++ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z"))) (re.opt (re.++ (re.* (re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z"))))) (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))))))))))(re.union (re.++ (str.to_re (str.++ "e" (str.++ "x" (str.++ "i" (str.++ "s" (str.++ "t" (str.++ "s" (str.++ ":" ""))))))))(re.++ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))(re.++ (re.opt (re.++ (re.* (re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z"))))) (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z"))))) (re.+ (re.++ (re.range "." ".")(re.++ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z"))) (re.opt (re.++ (re.* (re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z"))))) (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))))))))))(re.union (re.++ (str.to_re (str.++ "i" (str.++ "n" (str.++ "c" (str.++ "l" (str.++ "u" (str.++ "d" (str.++ "e" (str.++ ":" "")))))))))(re.++ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))(re.++ (re.opt (re.++ (re.* (re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z"))))) (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z"))))) (re.+ (re.++ (re.range "." ".")(re.++ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z"))) (re.opt (re.++ (re.* (re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z"))))) (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))))))))))(re.union (re.++ (str.to_re (str.++ "r" (str.++ "e" (str.++ "d" (str.++ "i" (str.++ "r" (str.++ "e" (str.++ "c" (str.++ "t" (str.++ ":" ""))))))))))(re.++ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))(re.++ (re.opt (re.++ (re.* (re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z"))))) (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z"))))) (re.+ (re.++ (re.range "." ".")(re.++ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z"))) (re.opt (re.++ (re.* (re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z"))))) (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))))))))))(re.union (re.++ (str.to_re (str.++ "e" (str.++ "x" (str.++ "p" (str.++ ":" "")))))(re.++ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))(re.++ (re.opt (re.++ (re.* (re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z"))))) (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z"))))) (re.+ (re.++ (re.range "." ".")(re.++ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z"))) (re.opt (re.++ (re.* (re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z"))))) (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z"))))))))))) (str.to_re "")))))))))))))) (str.to_re "")))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "1" (str.++ "0" (str.++ "0" ""))))

(define-fun Witness2 () String (str.++ "1" (str.++ "0" (str.++ "0" ""))))

(assert (= regexA (re.union (re.++ (str.to_re "")(re.++ (str.to_re (str.++ "1" (str.++ "0" (str.++ "0" "")))) (str.to_re ""))) (re.++ (str.to_re "")(re.++ ((_ re.loop 0 2) (re.range "0" "9"))(re.++ (re.opt (re.++ (re.range "." ".") ((_ re.loop 1 2) (re.range "0" "9"))))(re.++ (re.* (re.range " " " "))(re.++ (re.opt (re.range "%" "%")) (str.to_re "")))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "S" (str.++ "P" "")))

(define-fun Witness2 () String (str.++ "R" (str.++ "O" "")))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.union (str.to_re (str.++ "a" (str.++ "c" "")))(re.union (str.to_re (str.++ "A" (str.++ "C" "")))(re.union (str.to_re (str.++ "a" (str.++ "l" "")))(re.union (str.to_re (str.++ "A" (str.++ "L" "")))(re.union (str.to_re (str.++ "a" (str.++ "m" "")))(re.union (str.to_re (str.++ "A" (str.++ "M" "")))(re.union (str.to_re (str.++ "a" (str.++ "p" "")))(re.union (str.to_re (str.++ "A" (str.++ "P" "")))(re.union (str.to_re (str.++ "b" (str.++ "a" "")))(re.union (str.to_re (str.++ "B" (str.++ "A" "")))(re.union (str.to_re (str.++ "c" (str.++ "e" "")))(re.union (str.to_re (str.++ "C" (str.++ "E" "")))(re.union (str.to_re (str.++ "d" (str.++ "f" "")))(re.union (str.to_re (str.++ "D" (str.++ "F" "")))(re.union (str.to_re (str.++ "e" (str.++ "s" "")))(re.union (str.to_re (str.++ "E" (str.++ "S" "")))(re.union (str.to_re (str.++ "g" (str.++ "o" "")))(re.union (str.to_re (str.++ "G" (str.++ "O" "")))(re.union (str.to_re (str.++ "m" (str.++ "a" "")))(re.union (str.to_re (str.++ "M" (str.++ "A" "")))(re.union (str.to_re (str.++ "m" (str.++ "g" "")))(re.union (str.to_re (str.++ "M" (str.++ "G" "")))(re.union (str.to_re (str.++ "m" (str.++ "s" "")))(re.union (str.to_re (str.++ "M" (str.++ "S" "")))(re.union (str.to_re (str.++ "m" (str.++ "t" "")))(re.union (str.to_re (str.++ "M" (str.++ "T" "")))(re.union (str.to_re (str.++ "p" (str.++ "a" "")))(re.union (str.to_re (str.++ "P" (str.++ "A" "")))(re.union (str.to_re (str.++ "p" (str.++ "b" "")))(re.union (str.to_re (str.++ "P" (str.++ "B" "")))(re.union (str.to_re (str.++ "p" (str.++ "e" "")))(re.union (str.to_re (str.++ "P" (str.++ "E" "")))(re.union (str.to_re (str.++ "p" (str.++ "i" "")))(re.union (str.to_re (str.++ "P" (str.++ "I" "")))(re.union (str.to_re (str.++ "p" (str.++ "r" "")))(re.union (str.to_re (str.++ "P" (str.++ "R" "")))(re.union (str.to_re (str.++ "r" (str.++ "j" "")))(re.union (str.to_re (str.++ "R" (str.++ "J" "")))(re.union (str.to_re (str.++ "r" (str.++ "n" "")))(re.union (str.to_re (str.++ "R" (str.++ "N" "")))(re.union (str.to_re (str.++ "r" (str.++ "o" "")))(re.union (str.to_re (str.++ "R" (str.++ "O" "")))(re.union (str.to_re (str.++ "r" (str.++ "r" "")))(re.union (str.to_re (str.++ "R" (str.++ "R" "")))(re.union (str.to_re (str.++ "r" (str.++ "s" "")))(re.union (str.to_re (str.++ "R" (str.++ "S" "")))(re.union (str.to_re (str.++ "s" (str.++ "c" "")))(re.union (str.to_re (str.++ "S" (str.++ "C" "")))(re.union (str.to_re (str.++ "s" (str.++ "e" "")))(re.union (str.to_re (str.++ "S" (str.++ "E" "")))(re.union (str.to_re (str.++ "s" (str.++ "p" "")))(re.union (str.to_re (str.++ "S" (str.++ "P" "")))(re.union (str.to_re (str.++ "t" (str.++ "o" ""))) (str.to_re (str.++ "T" (str.++ "O" "")))))))))))))))))))))))))))))))))))))))))))))))))))))))) (str.to_re "")))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "3" (str.++ "1" (str.++ "7" (str.++ ")" (str.++ "9" (str.++ "9" (str.++ "8" (str.++ "8" (str.++ "8" (str.++ "5" (str.++ "8" (str.++ " " (str.++ " " (str.++ " " (str.++ "x" (str.++ "9" "")))))))))))))))))

(define-fun Witness2 () String (str.++ "(" (str.++ "9" (str.++ "8" (str.++ "0" (str.++ "-" (str.++ " " (str.++ " " (str.++ " " (str.++ "7" (str.++ "6" (str.++ "8" (str.++ "-" (str.++ "9" (str.++ "2" (str.++ "9" (str.++ "8" (str.++ " " (str.++ " " (str.++ "x" ""))))))))))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.opt (re.range "0" "9"))(re.++ (re.* (re.range " " " "))(re.++ (re.opt (re.union (re.range "(" "(") (re.range "-" ".")))(re.++ ((_ re.loop 3 3) (re.range "0" "9"))(re.++ (re.opt (re.union (re.range ")" ")") (re.range "-" ".")))(re.++ (re.* (re.range " " " "))(re.++ ((_ re.loop 3 3) (re.range "0" "9"))(re.++ (re.opt (re.union (re.range " " " ") (re.range "-" ".")))(re.++ ((_ re.loop 4 4) (re.range "0" "9"))(re.++ (re.* (re.range " " " "))(re.++ (re.opt (re.union (re.range "x" "x") (re.++ (str.to_re (str.++ "e" (str.++ "x" (str.++ "t" "")))) (re.opt (re.range "." ".")))))(re.++ (re.* (re.range " " " "))(re.++ (re.opt ((_ re.loop 1 7) (re.range "0" "9"))) (str.to_re "")))))))))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "-" (str.++ "r" (str.++ "-" (str.++ "x" (str.++ "r" (str.++ "w" (str.++ "-" (str.++ "r" (str.++ "-" (str.++ "-" (str.++ "\u{0c}" (str.++ " " (str.++ "9" (str.++ "9" (str.++ "\u{a0}" (str.++ "\u{0d}" (str.++ " " (str.++ "9" (str.++ "\u{aa}" (str.++ "\u{85}" (str.++ "\u{e9}" (str.++ "9" (str.++ "6" (str.++ "\u{85}" (str.++ "8" (str.++ "\u{0a}" (str.++ "v" (str.++ "K" (str.++ "k" (str.++ " " (str.++ "1" (str.++ " " (str.++ "8" (str.++ ":" (str.++ "1" (str.++ "8" (str.++ "\u{09}" (str.++ " " (str.++ " " (str.++ "\u{d9}" (str.++ "\u{de}" (str.++ "[" "")))))))))))))))))))))))))))))))))))))))))))

(define-fun Witness2 () String (str.++ "-" (str.++ "r" (str.++ "-" (str.++ "x" (str.++ "-" (str.++ "-" (str.++ "x" (str.++ "r" (str.++ "w" (str.++ "-" (str.++ "\u{0c}" (str.++ "\u{85}" (str.++ "6" (str.++ "8" (str.++ " " (str.++ "\u{85}" (str.++ "8" (str.++ "4" (str.++ "\u{a0}" (str.++ "\u{85}" (str.++ "\u{85}" (str.++ "\u{e7}" (str.++ "9" (str.++ "\u{85}" (str.++ "5" (str.++ "4" (str.++ "\u{a0}" (str.++ "w" (str.++ "A" (str.++ "p" (str.++ "\u{85}" (str.++ "\u{a0}" (str.++ "1" (str.++ "\u{a0}" (str.++ "8" (str.++ ":" (str.++ "8" (str.++ "7" (str.++ "\u{a0}" (str.++ "\u{85}" (str.++ "H" (str.++ "u" (str.++ "5" ""))))))))))))))))))))))))))))))))))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.++ (re.union (re.range "-" "-")(re.union (re.range "d" "d") (re.range "l" "l")))(re.++ ((_ re.loop 3 3) (re.++ (re.union (re.range "-" "-") (re.range "r" "r"))(re.++ (re.union (re.range "-" "-") (re.range "w" "w")) (re.union (re.range "-" "-")(re.union (re.range "s" "s") (re.range "x" "x"))))))(re.++ (re.+ (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (re.+ (re.range "0" "9"))(re.++ (re.+ (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))(re.++ (re.+ (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))(re.++ (re.+ (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (re.+ (re.range "0" "9"))(re.++ (re.+ (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (re.++ ((_ re.loop 3 3) (re.union (re.range "A" "Z")(re.union (re.range "a" "z") (re.range "|" "|"))))(re.++ (re.+ (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (re.++ (re.opt (re.range "0" "9")) (re.range "0" "9"))(re.++ (re.+ (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (re.++ (re.opt (re.range "0" "9")) (re.range "0" "9"))(re.++ (re.range ":" ":") ((_ re.loop 2 2) (re.range "0" "9"))))))))(re.++ (re.+ (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))) (re.++ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))) (re.+ (re.union (re.range "\u{00}" "\u{09}") (re.range "\u{0b}" "\u{ff}"))))))))))))))))) (str.to_re "")))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "z" (str.++ "2" (str.++ "8" (str.++ "2" "")))))

(define-fun Witness2 () String (str.++ "y" (str.++ "H" "")))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.union (re.range "A" "Z") (re.range "a" "z"))(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_") (re.range "a" "z"))))) (str.to_re ""))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "<" (str.++ "@" (str.++ "x" (str.++ "j" (str.++ "." (str.++ "y" (str.++ "o" (str.++ "8" (str.++ "." (str.++ "4" (str.++ "q" (str.++ "6" (str.++ "." (str.++ "9" (str.++ "-" (str.++ "9" (str.++ ":" (str.++ "0" (str.++ "D" (str.++ "~" (str.++ "P" (str.++ "/" (str.++ "$" (str.++ "j" (str.++ "@" (str.++ "n" (str.++ "j" (str.++ "f" (str.++ "-" (str.++ "-" (str.++ "-" (str.++ "-" (str.++ "x" (str.++ "5" (str.++ "." (str.++ "8" (str.++ "5" (str.++ ">" "")))))))))))))))))))))))))))))))))))))))

(define-fun Witness2 () String (str.++ "<" (str.++ "@" (str.++ "g" (str.++ "s" (str.++ "0" (str.++ "." (str.++ "g" (str.++ "y" (str.++ ":" (str.++ "|" (str.++ "@" (str.++ "9" (str.++ "o" (str.++ "." (str.++ "9" (str.++ "n" (str.++ ">" ""))))))))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.range "<" "<")(re.++ (re.opt (re.++ (re.range "@" "@")(re.++ (re.union (re.range "0" "9") (re.range "a" "z"))(re.++ (re.* (re.union (re.range "-" "-")(re.union (re.range "0" "9") (re.range "a" "z"))))(re.++ (re.union (re.range "0" "9") (re.range "a" "z"))(re.++ (re.+ (re.++ (re.range "." ".")(re.++ (re.union (re.range "0" "9") (re.range "a" "z"))(re.++ (re.* (re.union (re.range "-" "-")(re.union (re.range "0" "9") (re.range "a" "z")))) (re.union (re.range "0" "9") (re.range "a" "z"))))))(re.++ (re.* (re.++ (str.to_re (str.++ "," (str.++ "@" "")))(re.++ (re.union (re.range "0" "9") (re.range "a" "z"))(re.++ (re.* (re.union (re.range "-" "-")(re.union (re.range "0" "9") (re.range "a" "z"))))(re.++ (re.union (re.range "0" "9") (re.range "a" "z")) (re.+ (re.++ (re.range "." ".")(re.++ (re.union (re.range "0" "9") (re.range "a" "z"))(re.++ (re.* (re.union (re.range "-" "-")(re.union (re.range "0" "9") (re.range "a" "z")))) (re.union (re.range "0" "9") (re.range "a" "z"))))))))))) (re.range ":" ":"))))))))(re.++ (re.++ (re.+ (re.union (re.range "!" "!")(re.union (re.range "#" "'")(re.union (re.range "*" "+")(re.union (re.range "-" "-")(re.union (re.range "/" "9")(re.union (re.range "=" "=")(re.union (re.range "?" "?")(re.union (re.range "A" "Z") (re.range "^" "~"))))))))))(re.++ (re.* (re.++ (re.range "." ".") (re.+ (re.union (re.range "!" "!")(re.union (re.range "#" "'")(re.union (re.range "*" "+")(re.union (re.range "-" "-")(re.union (re.range "/" "9")(re.union (re.range "=" "=")(re.union (re.range "?" "?")(re.union (re.range "A" "Z") (re.range "^" "~"))))))))))))(re.++ (re.range "@" "@")(re.++ (re.union (re.range "0" "9") (re.range "a" "z"))(re.++ (re.* (re.union (re.range "-" "-")(re.union (re.range "0" "9") (re.range "a" "z"))))(re.++ (re.union (re.range "0" "9") (re.range "a" "z")) (re.+ (re.++ (re.range "." ".")(re.++ (re.union (re.range "0" "9") (re.range "a" "z"))(re.++ (re.* (re.union (re.range "-" "-")(re.union (re.range "0" "9") (re.range "a" "z")))) (re.union (re.range "0" "9") (re.range "a" "z"))))))))))))(re.++ (re.range ">" ">") (str.to_re ""))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "8" (str.++ "8" (str.++ "8" (str.++ "9" (str.++ "8" (str.++ "-" (str.++ "3" (str.++ "3" (str.++ "9" ""))))))))))

(define-fun Witness2 () String (str.++ "1" (str.++ "5" (str.++ "8" (str.++ "1" (str.++ "8" (str.++ "-" "")))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ ((_ re.loop 5 5) (re.range "0" "9"))(re.++ (re.range "-" "-")(re.++ (re.opt ((_ re.loop 3 3) (re.range "0" "9"))) (str.to_re "")))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "(" (str.++ "0" (str.++ "3" (str.++ ")" (str.++ " " (str.++ "9" (str.++ "8" (str.++ "9" (str.++ "5" (str.++ "-" (str.++ "2" (str.++ "8" (str.++ "1" ""))))))))))))))

(define-fun Witness2 () String (str.++ "7" (str.++ "1" (str.++ "2" (str.++ "7" (str.++ "-" (str.++ "0" (str.++ "8" (str.++ "7" (str.++ "9" ""))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.opt (re.union ((_ re.loop 2 3) (re.range "0" "9")) (re.++ (re.range "(" "(")(re.++ ((_ re.loop 2 3) (re.range "0" "9")) (re.range ")" ")")))))(re.++ (re.opt (re.range " " " "))(re.++ ((_ re.loop 3 4) (re.range "0" "9"))(re.++ (re.opt (re.range "-" "-"))(re.++ ((_ re.loop 3 4) (re.range "0" "9")) (str.to_re "")))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "1" (str.++ "F" (str.++ "4" (str.++ "@" (str.++ "Q" (str.++ "0" (str.++ "-" (str.++ "L" (str.++ "8" (str.++ "8" (str.++ "." (str.++ "5" (str.++ "9" (str.++ "." (str.++ "S" (str.++ "Z" (str.++ "x" (str.++ "Z" "")))))))))))))))))))

(define-fun Witness2 () String (str.++ "t" (str.++ "8" (str.++ "_" (str.++ "9" (str.++ "s" (str.++ "9" (str.++ "A" (str.++ "A" (str.++ "@" (str.++ "c" (str.++ "7" (str.++ "8" (str.++ "Z" (str.++ "-" (str.++ "t" (str.++ "Z" (str.++ "-" (str.++ "8" (str.++ "9" (str.++ "." (str.++ "Q" (str.++ "b" "")))))))))))))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.* (re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))) (re.union (re.range "-" ".") (re.range "_" "_"))))(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z"))))(re.++ (re.range "@" "@")(re.++ (re.union (re.++ (re.union (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))) (re.+ (re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))) (re.range "-" "."))))(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z"))))(re.++ (re.range "." ".") ((_ re.loop 2 4) (re.union (re.range "A" "Z") (re.range "a" "z")))))) (re.++ (re.union (re.range "A" "Z") (re.range "a" "z")) (str.to_re (str.++ "." (str.++ "c" (str.++ "o" (str.++ "m" ""))))))) (str.to_re ""))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String "")

(define-fun Witness2 () String "")

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.* (re.++ (re.union (re.++ (re.range "0" "1") (re.range "0" "9")) (re.++ (re.range "0" "2") (re.range "0" "3")))(re.++ (re.range ":" ":") (re.++ (re.range "0" "5") (re.range "0" "9"))))) (str.to_re "")))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "3" (str.++ "3" (str.++ "3" ""))))

(define-fun Witness2 () String (str.++ "9" ""))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.range "1" "9")(re.++ ((_ re.loop 0 2) (re.range "0" "9")) (str.to_re ""))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "h" (str.++ "t" (str.++ "t" (str.++ "p" (str.++ ":" (str.++ "/" (str.++ "/" (str.++ "H" (str.++ "." (str.++ "E" (str.++ "W" (str.++ "9" (str.++ "." (str.++ "p" (str.++ "n" (str.++ "g" "")))))))))))))))))

(define-fun Witness2 () String (str.++ "h" (str.++ "t" (str.++ "t" (str.++ "p" (str.++ ":" (str.++ "/" (str.++ "/" (str.++ "5" (str.++ "." (str.++ "A" (str.++ "g" (str.++ "C" (str.++ "c" (str.++ "." (str.++ "j" (str.++ "p" (str.++ "g" ""))))))))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.++ (str.to_re (str.++ "h" (str.++ "t" (str.++ "t" (str.++ "p" (str.++ ":" (str.++ "/" (str.++ "/" ""))))))))(re.++ (re.+ (re.union (re.range "-" ".")(re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))))(re.++ (re.range "." ".")(re.++ ((_ re.loop 2 3) (re.union (re.range "A" "Z") (re.range "a" "z")))(re.++ (re.opt (re.++ (re.range "/" "/") (re.* (re.union (re.range "\u{00}" "\u{08}")(re.union (re.range "\u{0e}" "\u{1f}")(re.union (re.range "!" "\u{84}")(re.union (re.range "\u{86}" "\u{9f}") (re.range "\u{a1}" "\u{ff}"))))))))(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_") (re.range "a" "z")))))(re.++ (re.range "." ".") (re.union (str.to_re (str.++ "j" (str.++ "p" (str.++ "g" ""))))(re.union (str.to_re (str.++ "j" (str.++ "p" (str.++ "e" (str.++ "g" "")))))(re.union (str.to_re (str.++ "g" (str.++ "i" (str.++ "f" "")))) (str.to_re (str.++ "p" (str.++ "n" (str.++ "g" "")))))))))))))) (str.to_re "")))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "6" (str.++ "9" (str.++ "0" ""))))

(define-fun Witness2 () String (str.++ "9" (str.++ "8" (str.++ "3" (str.++ "8" (str.++ "9" ""))))))

(assert (= regexA (re.++ (re.union (re.++ (str.to_re "") ((_ re.loop 1 8) (re.range "0" "9"))) (re.++ (str.to_re "")(re.++ ((_ re.loop 1 8) (re.range "0" "9"))(re.++ (re.opt (re.range "." ".")) ((_ re.loop 1 2) (re.range "0" "9")))))) (str.to_re ""))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "0" (str.++ "6" (str.++ "5" (str.++ "." (str.++ "8" (str.++ "6" "")))))))

(define-fun Witness2 () String (str.++ "9" ""))

(assert (= regexA (re.++ (re.union (re.++ (str.to_re "")(re.++ ((_ re.loop 1 3) (re.range "0" "9")) (re.* (re.++ (re.range "," ",") ((_ re.loop 3 3) (re.range "0" "9")))))) (re.++ (str.to_re "") (re.* (re.range "0" "9")))) (re.++ (re.opt (re.++ (re.range "." ".") ((_ re.loop 2 2) (re.range "0" "9")))) (str.to_re "")))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "\u{5c}" (str.++ "\u{e7}" (str.++ "\u{11}" (str.++ "k" (str.++ "u" (str.++ "m" (str.++ "a" (str.++ "r" "")))))))))

(define-fun Witness2 () String (str.++ "\u{e3}" (str.++ "`" (str.++ "\u{b2}" (str.++ "\u{0c}" (str.++ "S" (str.++ "\u{0c}" (str.++ "k" (str.++ "u" (str.++ "m" (str.++ "a" (str.++ "r" (str.++ "\u{b9}" "")))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.* (re.union (re.range "\u{00}" "\u{09}") (re.range "\u{0b}" "\u{ff}")))(re.++ (str.to_re (str.++ "k" (str.++ "u" (str.++ "m" (str.++ "a" (str.++ "r" ""))))))(re.++ (re.* (re.union (re.range "\u{00}" "\u{09}") (re.range "\u{0b}" "\u{ff}"))) (str.to_re "")))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "*" (str.++ "\u{92}" (str.++ ">" (str.++ "\u{83}" (str.++ "\u{cd}" (str.++ "\u{03}" (str.++ "U" (str.++ "\u{12}" "")))))))))

(define-fun Witness2 () String (str.++ "h" (str.++ "\u{d2}" (str.++ "\u{d4}" (str.++ "\u{87}" (str.++ "2" ""))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ ((_ re.loop 4 8) (re.union (re.range "\u{00}" "\u{09}") (re.range "\u{0b}" "\u{ff}"))) (str.to_re "")))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "8" (str.++ "s" (str.++ " " (str.++ "8" (str.++ "W" ""))))))

(define-fun Witness2 () String (str.++ "9" (str.++ "1" (str.++ "6" (str.++ "n" (str.++ " " (str.++ "8" (str.++ "w" ""))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.+ (re.range "0" "9"))(re.++ (re.union (re.range "N" "N")(re.union (re.range "S" "S")(re.union (re.range "n" "n") (re.range "s" "s"))))(re.++ (re.range " " " ")(re.++ (re.+ (re.range "0" "9"))(re.++ (re.union (re.range "E" "E")(re.union (re.range "W" "W")(re.union (re.range "e" "e") (re.range "w" "w")))) (str.to_re "")))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "8" (str.++ "8" (str.++ "5" (str.++ "8" (str.++ "8" (str.++ "-" (str.++ "3" (str.++ "5" (str.++ "4" ""))))))))))

(define-fun Witness2 () String (str.++ "9" (str.++ "2" (str.++ "7" (str.++ "8" (str.++ "1" (str.++ "-" (str.++ "9" (str.++ "9" (str.++ "3" ""))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ ((_ re.loop 5 5) (re.range "0" "9"))(re.++ (re.range "-" "-")(re.++ ((_ re.loop 3 3) (re.range "0" "9")) (str.to_re "")))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "2" (str.++ "1" (str.++ "5" (str.++ "1" (str.++ "\u{a0}" (str.++ "p" (str.++ "m" ""))))))))

(define-fun Witness2 () String (str.++ "5" (str.++ ":" "")))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.union (re.++ (re.opt (re.range "0" "1")) (re.range "0" "9")) (re.++ (re.range "2" "2") (re.range "0" "3")))(re.++ (re.opt (re.++ (re.opt (re.range ":" ":"))(re.++ (re.range "0" "5") (re.range "0" "9"))))(re.++ (re.opt (re.union (re.opt (re.range ":" ":")) (re.++ (re.range "0" "5") (re.range "0" "9"))))(re.++ (re.opt (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (re.opt (re.union (re.range "A" "A")(re.union (str.to_re (str.++ "A" (str.++ "M" "")))(re.union (re.union (re.range "P" "P")(re.union (re.range "a" "a") (re.range "p" "p")))(re.union (str.to_re (str.++ "P" (str.++ "M" "")))(re.union (str.to_re (str.++ "a" (str.++ "m" "")))(re.union (str.to_re (str.++ "p" (str.++ "m" "")))(re.union (str.to_re (str.++ "p" (str.++ "M" "")))(re.union (str.to_re (str.++ "a" (str.++ "M" "")))(re.union (str.to_re (str.++ "A" (str.++ "m" ""))) (str.to_re (str.++ "P" (str.++ "m" ""))))))))))))) (str.to_re "")))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "9" (str.++ "0" (str.++ "8" (str.++ "7" (str.++ "8" ""))))))

(define-fun Witness2 () String (str.++ "m" (str.++ "Q" "")))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.union (re.+ (re.range "0" "9")) (re.+ (re.union (re.range "A" "Z") (re.range "a" "z")))) (str.to_re "")))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "\u{bc}" (str.++ "\u{91}" (str.++ "@" (str.++ "\u{f1}" (str.++ "." (str.++ "\u{9e}" "")))))))

(define-fun Witness2 () String (str.++ "\u{cc}" (str.++ "@" (str.++ "\u{01}" (str.++ "." (str.++ "\u{f6}" (str.++ "9" "")))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.+ (re.union (re.range "\u{00}" "\u{09}") (re.range "\u{0b}" "\u{ff}")))(re.++ (re.range "@" "@")(re.++ (re.+ (re.union (re.range "\u{00}" "\u{09}") (re.range "\u{0b}" "\u{ff}")))(re.++ (re.range "." ".")(re.++ (re.+ (re.union (re.range "\u{00}" "\u{09}") (re.range "\u{0b}" "\u{ff}"))) (str.to_re "")))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "6" (str.++ "2" (str.++ "8" (str.++ "5" (str.++ "C" (str.++ "3" (str.++ "9" (str.++ "A" (str.++ "5" (str.++ "C" (str.++ "6" (str.++ "8" (str.++ "A" (str.++ "8" (str.++ "2" (str.++ "d" (str.++ "-" (str.++ "b" (str.++ "a" (str.++ "a" (str.++ "e" (str.++ "0" (str.++ "5" (str.++ "8" (str.++ "8" (str.++ "f" (str.++ "C" (str.++ "8" (str.++ "f" (str.++ "4" (str.++ "a" (str.++ "B" (str.++ "d" (str.++ "|" "")))))))))))))))))))))))))))))))))))

(define-fun Witness2 () String (str.++ "9" (str.++ "9" (str.++ "7" (str.++ "F" (str.++ "F" (str.++ "c" (str.++ "8" (str.++ "8" (str.++ "-" (str.++ "3" (str.++ "A" (str.++ "8" (str.++ "D" (str.++ "-" (str.++ "9" (str.++ "a" (str.++ "0" (str.++ "9" (str.++ "-" (str.++ "2" (str.++ "0" (str.++ "9" (str.++ "1" (str.++ "-" (str.++ "A" (str.++ "1" (str.++ "7" (str.++ "0" (str.++ "7" (str.++ "8" (str.++ "F" (str.++ "6" (str.++ "E" (str.++ "8" (str.++ "3" (str.++ "8" "")))))))))))))))))))))))))))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.opt (re.union (re.range "(" "(") (re.range "{" "|")))(re.++ ((_ re.loop 8 8) (re.union (re.range "0" "9")(re.union (re.range "A" "F") (re.range "a" "f"))))(re.++ (re.opt (re.range "-" "-"))(re.++ ((_ re.loop 3 3) (re.++ ((_ re.loop 4 4) (re.union (re.range "0" "9")(re.union (re.range "A" "F") (re.range "a" "f")))) (re.opt (re.range "-" "-"))))(re.++ ((_ re.loop 12 12) (re.union (re.range "0" "9")(re.union (re.range "A" "F") (re.range "a" "f"))))(re.++ (re.opt (re.union (re.range ")" ")") (re.range "|" "}"))) (str.to_re ""))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "9" (str.++ "5" (str.++ "9" (str.++ "." (str.++ "8" ""))))))

(define-fun Witness2 () String (str.++ "3" (str.++ "." (str.++ "9" (str.++ "8" "")))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.+ (re.range "0" "9"))(re.++ (re.opt (re.++ (re.range "." ".") ((_ re.loop 0 2) (re.range "0" "9")))) (str.to_re ""))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "f" (str.++ "t" (str.++ "p" (str.++ ":" (str.++ "/" (str.++ "/" "")))))))

(define-fun Witness2 () String (str.++ "h" (str.++ "t" (str.++ "t" (str.++ "p" (str.++ "s" (str.++ ":" (str.++ "/" (str.++ "/" "")))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.++ (re.++ (re.union (str.to_re (str.++ "h" (str.++ "t" ""))) (re.range "f" "f"))(re.++ (str.to_re (str.++ "t" (str.++ "p" ""))) (re.opt (re.range "s" "s")))) (str.to_re (str.++ ":" (str.++ "/" (str.++ "/" "")))))(re.++ (re.* (re.union (re.range "\u{00}" "\u{09}") (re.range "\u{0b}" "\u{ff}"))) (str.to_re ""))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "1" (str.++ "7" (str.++ "3" (str.++ "4" "")))))

(define-fun Witness2 () String (str.++ "1" (str.++ "9" (str.++ "2" (str.++ "8" "")))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.union (re.++ (re.range "1" "1") (re.range "0" "9")) (re.range "0" "9"))(re.++ ((_ re.loop 2 2) (re.range "1" "9")) (str.to_re ""))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "S" (str.++ "d" (str.++ "q" (str.++ "u" (str.++ "9" (str.++ "9" (str.++ "4" (str.++ "3" (str.++ "8" (str.++ "8" (str.++ "8" ""))))))))))))

(define-fun Witness2 () String (str.++ "X" (str.++ "p" (str.++ "U" (str.++ "U" (str.++ "8" (str.++ "9" (str.++ "8" (str.++ "0" (str.++ "1" (str.++ "0" (str.++ "9" ""))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ ((_ re.loop 3 3) (re.union (re.range "A" "Z") (re.range "a" "z")))(re.++ (re.union (re.range "U" "U") (re.range "u" "u"))(re.++ ((_ re.loop 7 7) (re.range "0" "9")) (str.to_re "")))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "\u{e0}" (str.++ "\u{f2}" (str.++ "E" (str.++ "\u{cd}" (str.++ "\u{d4}" ""))))))

(define-fun Witness2 () String (str.++ "A" (str.++ "d" (str.++ "\u{ba}" (str.++ "9" (str.++ "\u{b5}" (str.++ "." (str.++ "\u{b5}" ""))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ ((_ re.loop 5 12) (re.union (re.range "." ".")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))) (str.to_re "")))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "P" (str.++ "t" (str.++ "K" (str.++ "f" (str.++ "c" (str.++ "u" (str.++ "0" (str.++ "1" (str.++ "j" (str.++ "5" (str.++ "5" (str.++ "n" (str.++ "9" (str.++ "9" (str.++ "8" (str.++ "V" "")))))))))))))))))

(define-fun Witness2 () String (str.++ "D" (str.++ "r" (str.++ "S" (str.++ "z" (str.++ "O" (str.++ "s" (str.++ "9" (str.++ "6" (str.++ "t" (str.++ "7" (str.++ "4" (str.++ "c" (str.++ "8" (str.++ "8" (str.++ "9" (str.++ "z" "")))))))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ ((_ re.loop 6 6) (re.union (re.range "A" "Z") (re.range "a" "z")))(re.++ ((_ re.loop 2 2) (re.range "0" "9"))(re.++ (re.union (re.range "A" "Z") (re.range "a" "z"))(re.++ ((_ re.loop 2 2) (re.range "0" "9"))(re.++ (re.union (re.range "A" "Z") (re.range "a" "z"))(re.++ ((_ re.loop 3 3) (re.range "0" "9"))(re.++ (re.union (re.range "A" "Z") (re.range "a" "z")) (str.to_re "")))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "8" (str.++ "0" (str.++ "0" ""))))

(define-fun Witness2 () String (str.++ "1" (str.++ "9" (str.++ "8" ""))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.union (re.range "0" "9")(re.union (re.++ (re.range "1" "9") (re.range "0" "9"))(re.union (re.++ (re.range "1" "7") ((_ re.loop 2 2) (re.range "0" "9"))) (str.to_re (str.++ "8" (str.++ "0" (str.++ "0" ""))))))) (str.to_re "")))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "1" (str.++ "3" "")))

(define-fun Witness2 () String (str.++ "2" ""))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.++ (re.opt (re.range "0" "2")) (re.range "0" "9")) (str.to_re "")))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "0" (str.++ "3" (str.++ ":" (str.++ "5" (str.++ "3" (str.++ ":" (str.++ "4" (str.++ "9" (str.++ "Z" ""))))))))))

(define-fun Witness2 () String (str.++ "2" (str.++ "3" (str.++ ":" (str.++ "3" (str.++ "9" (str.++ ":" (str.++ "1" (str.++ "9" "")))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.union (re.++ (re.range "0" "1") (re.range "0" "9")) (re.++ (re.range "2" "2") (re.range "0" "3")))(re.++ (re.range ":" ":")(re.++ (re.++ (re.range "0" "5") (re.range "0" "9"))(re.++ (re.range ":" ":")(re.++ (re.++ (re.range "0" "5") (re.range "0" "9"))(re.++ (re.opt (re.union (re.range "Z" "Z")(re.union (re.++ (re.range "." ".") ((_ re.loop 4 4) (re.range "0" "9"))) (re.++ (re.union (re.range "+" "+")(re.union (re.range "-" "-") (re.range "|" "|")))(re.++ (re.union (re.++ (re.range "0" "1") (re.range "0" "9")) (re.++ (re.range "2" "2") (re.range "0" "3")))(re.++ (re.range ":" ":") (re.++ (re.range "0" "5") (re.range "0" "9")))))))) (str.to_re ""))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "2" (str.++ "5" (str.++ "5" (str.++ "." (str.++ "8" (str.++ "." (str.++ "2" (str.++ "9" (str.++ "." (str.++ "1" (str.++ "9" (str.++ "0" "")))))))))))))

(define-fun Witness2 () String (str.++ "2" (str.++ "4" (str.++ "6" (str.++ "." (str.++ "2" (str.++ "4" (str.++ "8" (str.++ "." (str.++ "1" (str.++ "." (str.++ "1" (str.++ "9" (str.++ "8" ""))))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.union (re.++ (str.to_re (str.++ "2" (str.++ "5" ""))) (re.range "0" "5"))(re.union (re.++ (re.range "2" "2")(re.++ (re.range "0" "4") (re.range "0" "9")))(re.union (re.++ (re.range "0" "1") ((_ re.loop 2 2) (re.range "0" "9")))(re.union (re.++ (re.range "1" "9") (re.range "0" "9")) (re.range "1" "9")))))(re.++ (re.range "." ".")(re.++ (re.union (re.++ (str.to_re (str.++ "2" (str.++ "5" ""))) (re.range "0" "5"))(re.union (re.++ (re.range "2" "2")(re.++ (re.range "0" "4") (re.range "0" "9")))(re.union (re.++ (re.range "0" "1") ((_ re.loop 2 2) (re.range "0" "9")))(re.union (re.++ (re.range "1" "9") (re.range "0" "9")) (re.range "0" "9")))))(re.++ (re.range "." ".")(re.++ (re.union (re.++ (str.to_re (str.++ "2" (str.++ "5" ""))) (re.range "0" "5"))(re.union (re.++ (re.range "2" "2")(re.++ (re.range "0" "4") (re.range "0" "9")))(re.union (re.++ (re.range "0" "1") ((_ re.loop 2 2) (re.range "0" "9")))(re.union (re.++ (re.range "1" "9") (re.range "0" "9")) (re.range "0" "9")))))(re.++ (re.range "." ".")(re.++ (re.union (re.++ (str.to_re (str.++ "2" (str.++ "5" ""))) (re.range "0" "5"))(re.union (re.++ (re.range "2" "2")(re.++ (re.range "0" "4") (re.range "0" "9")))(re.union (re.++ (re.range "0" "1") ((_ re.loop 2 2) (re.range "0" "9")))(re.union (re.++ (re.range "1" "9") (re.range "0" "9")) (re.range "0" "9"))))) (str.to_re "")))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "C" (str.++ "\u{d1}" (str.++ "\u{d1}" (str.++ "@" (str.++ "<" (str.++ "\u{ae}" (str.++ "." (str.++ "v" (str.++ "u" ""))))))))))

(define-fun Witness2 () String (str.++ "a" (str.++ "/" (str.++ "\u{d4}" (str.++ "\u{0d}" (str.++ "@" (str.++ "\u{bc}" (str.++ "\u{e6}" (str.++ "." (str.++ "s" (str.++ "z" (str.++ "u" ""))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.+ (re.union (re.range "\u{00}" "\u{09}") (re.range "\u{0b}" "\u{ff}")))(re.++ (re.range "@" "@")(re.++ (re.union (re.range "\u{00}" "-") (re.range "/" "\u{ff}"))(re.++ (re.* (re.union (re.range "\u{00}" "\u{09}") (re.range "\u{0b}" "\u{ff}")))(re.++ (re.range "." ".")(re.++ (re.++ ((_ re.loop 2 2) (re.range "a" "z")) (re.* (re.range "a" "z"))) (str.to_re ""))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "8" (str.++ "5" "")))

(define-fun Witness2 () String (str.++ "9" ""))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.opt (re.range "1" "9"))(re.++ (re.range "0" "9")(re.++ (re.opt (re.++ (re.range "." ".") (re.range "0" "9"))) (str.to_re "")))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "L" (str.++ "D" (str.++ "A" (str.++ "P" (str.++ ":" (str.++ "/" (str.++ "/" (str.++ "C" (str.++ "N" (str.++ "=" (str.++ "_" (str.++ "_" (str.++ "," (str.++ "D" (str.++ "C" (str.++ "=" (str.++ "\u{85}" (str.++ "\u{85}" (str.++ "D" (str.++ "C" (str.++ "=" (str.++ "\u{ee}" (str.++ "\u{85}" ""))))))))))))))))))))))))

(define-fun Witness2 () String (str.++ "L" (str.++ "D" (str.++ "A" (str.++ "P" (str.++ ":" (str.++ "/" (str.++ "/" (str.++ "D" (str.++ "C" (str.++ "=" (str.++ "\u{b5}" (str.++ ";" (str.++ "D" (str.++ "C" (str.++ "=" (str.++ "v" (str.++ "," (str.++ "," "")))))))))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.++ (str.to_re (str.++ "L" (str.++ "D" (str.++ "A" (str.++ "P" (str.++ ":" (str.++ "/" (str.++ "/" ""))))))))(re.++ (re.opt (re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))) (re.range "/" "/")))(re.++ (re.* (re.++ (str.to_re (str.++ "C" (str.++ "N" (str.++ "=" ""))))(re.++ (re.+ (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "&" "'")(re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range ";" ";")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{85}" "\u{85}")(re.union (re.range "\u{a0}" "\u{a0}")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))))))))) (re.range "," ","))))(re.++ (re.* (re.++ (str.to_re (str.++ "O" (str.++ "U" (str.++ "=" ""))))(re.++ (re.+ (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "&" "'")(re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range ";" ";")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{85}" "\u{85}")(re.union (re.range "\u{a0}" "\u{a0}")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))))))))) (re.range "," ",")))) (re.+ (re.++ (str.to_re (str.++ "D" (str.++ "C" (str.++ "=" ""))))(re.++ (re.+ (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "&" "'")(re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range ";" ";")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{85}" "\u{85}")(re.union (re.range "\u{a0}" "\u{a0}")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))))))))) (re.* (re.range "," ","))))))))) (str.to_re "")))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "7" (str.++ "0" (str.++ "8" (str.++ "8" "")))))

(define-fun Witness2 () String (str.++ "9" (str.++ "7" (str.++ "8" (str.++ "9" "")))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.range "1" "9")(re.++ ((_ re.loop 3 3) (re.range "0" "9")) (str.to_re ""))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "c" (str.++ "k" (str.++ "-" (str.++ "8" (str.++ "8" (str.++ "9" (str.++ "7" ""))))))))

(define-fun Witness2 () String (str.++ "d" (str.++ "[" (str.++ " " (str.++ "9" (str.++ "8" (str.++ "1" (str.++ "8" ""))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.range "D" "d")(re.++ (re.range "K" "k")(re.++ (re.union (re.range " " " ") (re.range "-" "-"))(re.++ (re.range "1" "9")(re.++ ((_ re.loop 3 3) (re.range "0" "9")) (str.to_re "")))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "9" (str.++ "8" (str.++ "5" (str.++ "9" (str.++ "8" ""))))))

(define-fun Witness2 () String (str.++ "5" (str.++ "0" "")))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.+ (re.++ (re.range "1" "9") ((_ re.loop 2 2) (re.opt (re.range "0" "9")))))(re.++ (re.* (re.++ (re.range "," ",")(re.++ (re.range "0" "9") ((_ re.loop 2 2) (re.range "0" "9"))))) (str.to_re ""))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "0" (str.++ "8" (str.++ "0" (str.++ "0" (str.++ "9" (str.++ ")" (str.++ "8" (str.++ "7" (str.++ "4" (str.++ "9" (str.++ "7" (str.++ "9" "")))))))))))))

(define-fun Witness2 () String (str.++ "(" (str.++ "0" (str.++ "2" (str.++ "0" (str.++ "7" (str.++ ")" (str.++ " " (str.++ "1" (str.++ "3" (str.++ "9" (str.++ "9" (str.++ "1" (str.++ "8" ""))))))))))))))

(assert (= regexA (re.union (re.++ (str.to_re "")(re.++ (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (re.opt (re.range "(" "(")) (re.++ (str.to_re (str.++ "0" (str.++ "2" (str.++ "0" ""))))(re.++ (re.union (re.range "," ",") (re.range "7" "8"))(re.++ (re.opt (re.range ")" ")"))(re.++ (re.opt (re.range " " " "))(re.++ (re.range "1" "9")(re.++ (re.opt (re.union (re.range " " " ")(re.union (re.range "0" "9")(re.union (re.range "[" "[")(re.union (re.range "{" "{") (re.range "}" "}")))))) ((_ re.loop 4 4) (re.range "0" "9"))))))))))) (re.++ (re.++ (re.range "0" "0")(re.++ (re.range "1" "8")(re.++ ((_ re.loop 3 3) (re.range "0" "9"))(re.++ (re.opt (re.range ")" ")"))(re.++ (re.opt (re.range " " " "))(re.++ (re.range "1" "9")(re.++ ((_ re.loop 2 2) (re.range "0" "9"))(re.++ (re.opt (re.range " " " ")) ((_ re.loop 3 3) (re.range "0" "9"))))))))))(re.++ (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))) (str.to_re ""))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "2" (str.++ "7" (str.++ "-" (str.++ "1" (str.++ "2" (str.++ "." (str.++ "1" (str.++ "7" (str.++ "9" (str.++ "1" "")))))))))))

(define-fun Witness2 () String (str.++ "0" (str.++ "6" (str.++ "-" (str.++ "1" (str.++ "2" (str.++ "-" (str.++ "1" (str.++ "9" (str.++ "1" (str.++ "1" "")))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.union (re.++ (re.union (re.++ (re.opt (re.range "0" "0")) (re.range "1" "9"))(re.union (re.++ (re.range "1" "2") (re.range "0" "9")) (re.++ (re.range "3" "3") (re.range "0" "1"))))(re.++ (re.range "-" "/")(re.++ (re.union (re.++ (re.opt (re.range "0" "0")) (re.union (re.range "1" "1")(re.union (re.range "3" "3")(re.union (re.range "5" "5") (re.range "7" "8"))))) (re.++ (re.range "1" "1") (re.union (re.range "0" "0") (re.range "2" "2"))))(re.++ (re.range "-" "/") (re.++ (re.opt (re.union (re.++ (re.range "1" "1") (re.range "6" "9")) (re.++ (re.range "2" "9") (re.range "0" "9")))) ((_ re.loop 2 2) (re.range "0" "9")))))))(re.union (re.++ (re.union (re.++ (re.opt (re.range "0" "0")) (re.range "1" "9"))(re.union (re.++ (re.range "1" "2") (re.range "0" "9")) (str.to_re (str.++ "3" (str.++ "0" "")))))(re.++ (re.range "-" "/")(re.++ (re.union (re.++ (re.opt (re.range "0" "0")) (re.union (re.range "1" "1") (re.range "3" "9"))) (re.++ (re.range "1" "1") (re.range "0" "2")))(re.++ (re.range "-" "/") (re.++ (re.opt (re.union (re.++ (re.range "1" "1") (re.range "6" "9")) (re.++ (re.range "2" "9") (re.range "0" "9")))) ((_ re.loop 2 2) (re.range "0" "9")))))))(re.union (re.++ (re.union (re.++ (re.opt (re.range "0" "0")) (re.range "1" "9"))(re.union (re.++ (re.range "1" "1") (re.range "0" "9")) (re.++ (re.range "2" "2") (re.range "0" "8"))))(re.++ (re.range "-" "/")(re.++ (re.opt (re.range "0" "0"))(re.++ (re.range "2" "2")(re.++ (re.range "-" "/") (re.++ (re.opt (re.union (re.++ (re.range "1" "1") (re.range "6" "9")) (re.++ (re.range "2" "9") (re.range "0" "9")))) ((_ re.loop 2 2) (re.range "0" "9")))))))) (re.++ (str.to_re (str.++ "2" (str.++ "9" "")))(re.++ (re.range "-" "/")(re.++ (re.opt (re.range "0" "0"))(re.++ (re.range "2" "2")(re.++ (re.range "-" "/") (re.union (re.++ (re.opt (re.union (re.++ (re.range "1" "1") (re.range "6" "9")) (re.++ (re.range "2" "9") (re.range "0" "9")))) (re.union (re.++ (re.range "0" "0") (re.union (re.range "4" "4") (re.range "8" "8")))(re.union (re.++ (re.union (re.range "2" "2")(re.union (re.range "4" "4")(re.union (re.range "6" "6") (re.range "8" "8")))) (re.union (re.range "0" "0")(re.union (re.range "4" "4") (re.range "8" "8")))) (re.++ (re.union (re.range "1" "1")(re.union (re.range "3" "3")(re.union (re.range "5" "5")(re.union (re.range "7" "7") (re.range "9" "9"))))) (re.union (re.range "2" "2") (re.range "6" "6"))))))(re.union (re.++ (re.union (str.to_re (str.++ "1" (str.++ "6" "")))(re.union (re.++ (re.union (re.range "2" "2")(re.union (re.range "4" "4")(re.union (re.range "6" "6") (re.range "8" "8")))) (re.union (re.range "0" "0")(re.union (re.range "4" "4") (re.range "8" "8")))) (re.++ (re.union (re.range "3" "3")(re.union (re.range "5" "5")(re.union (re.range "7" "7") (re.range "9" "9")))) (re.union (re.range "2" "2") (re.range "6" "6"))))) (str.to_re (str.++ "0" (str.++ "0" "")))) (str.to_re (str.++ "0" (str.++ "0" ""))))))))))))) (str.to_re "")))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "2" (str.++ "7" (str.++ "8" (str.++ "8" (str.++ "4" (str.++ "8" (str.++ "3" (str.++ "3" (str.++ "6" (str.++ "1" (str.++ "5" ""))))))))))))

(define-fun Witness2 () String (str.++ "7" (str.++ "1" (str.++ "6" (str.++ "7" (str.++ "9" (str.++ "9" (str.++ "7" (str.++ "2" (str.++ "9" (str.++ "6" (str.++ "8" ""))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.opt (re.union (str.to_re (str.++ "I" (str.++ "T" ""))) (str.to_re (str.++ "L" (str.++ "V" "")))))(re.++ ((_ re.loop 11 11) (re.range "0" "9")) (str.to_re ""))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "$" (str.++ "Y" (str.++ "Y" (str.++ "Y" (str.++ "Y" (str.++ "$" (str.++ "$" (str.++ "M" (str.++ "M" (str.++ "$" (str.++ "$" (str.++ "D" (str.++ "D" (str.++ "$" "")))))))))))))))

(define-fun Witness2 () String (str.++ "$" (str.++ "Y" (str.++ "Y" (str.++ "Y" (str.++ "Y" (str.++ "$" (str.++ "$" (str.++ "M" (str.++ "M" (str.++ "$" (str.++ "$" (str.++ "D" (str.++ "D" (str.++ "$" "")))))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (str.to_re (str.++ "$" (str.++ "Y" (str.++ "Y" (str.++ "Y" (str.++ "Y" (str.++ "$" (str.++ "$" (str.++ "M" (str.++ "M" (str.++ "$" (str.++ "$" (str.++ "D" (str.++ "D" (str.++ "$" ""))))))))))))))) (str.to_re "")))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "1" (str.++ "/" (str.++ "1" (str.++ "0" (str.++ "/" (str.++ "7" (str.++ "3" ""))))))))

(define-fun Witness2 () String (str.++ "1" (str.++ "/" (str.++ "0" (str.++ "1" (str.++ "/" (str.++ "8" (str.++ "9" ""))))))))

(assert (= regexA (re.++ (re.union (re.++ (re.range "0" "3") (re.range "0" "9")) (re.range "1" "9"))(re.++ (re.range "/" "/")(re.++ (re.union (re.range "1" "9")(re.union (re.++ (re.range "1" "1") (re.range "0" "2")) (re.++ (re.range "0" "0") (re.range "1" "9"))))(re.++ (re.range "/" "/") (re.union (re.++ (re.range "1" "2") ((_ re.loop 3 3) (re.range "0" "9"))) ((_ re.loop 2 2) (re.range "0" "9")))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "4" (str.++ "7" (str.++ "\u{85}" (str.++ "M" (str.++ "a" (str.++ "r" (str.++ "\u{09}" (str.++ "9" (str.++ "2" (str.++ "1" (str.++ "0" ""))))))))))))

(define-fun Witness2 () String (str.++ "5" (str.++ "8" (str.++ "\u{85}" (str.++ "N" (str.++ "o" (str.++ "v" (str.++ " " (str.++ "2" (str.++ "9" (str.++ "0" (str.++ "8" ""))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ ((_ re.loop 2 2) (re.range "0" "9"))(re.++ (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))(re.++ (re.union (str.to_re (str.++ "J" (str.++ "a" (str.++ "n" ""))))(re.union (str.to_re (str.++ "F" (str.++ "e" (str.++ "b" ""))))(re.union (str.to_re (str.++ "M" (str.++ "a" (str.++ "r" ""))))(re.union (str.to_re (str.++ "A" (str.++ "p" (str.++ "r" ""))))(re.union (str.to_re (str.++ "M" (str.++ "a" (str.++ "y" ""))))(re.union (str.to_re (str.++ "J" (str.++ "u" (str.++ "n" ""))))(re.union (str.to_re (str.++ "J" (str.++ "u" (str.++ "l" ""))))(re.union (str.to_re (str.++ "A" (str.++ "p" (str.++ "r" ""))))(re.union (str.to_re (str.++ "S" (str.++ "e" (str.++ "p" ""))))(re.union (str.to_re (str.++ "O" (str.++ "c" (str.++ "t" ""))))(re.union (str.to_re (str.++ "N" (str.++ "o" (str.++ "v" "")))) (str.to_re (str.++ "D" (str.++ "e" (str.++ "c" "")))))))))))))))(re.++ (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))(re.++ ((_ re.loop 4 4) (re.range "0" "9")) (str.to_re "")))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "\u{b5}" (str.++ "8" (str.++ "R" (str.++ "@" (str.++ "\u{f1}" (str.++ "-" (str.++ "\u{d3}" (str.++ "-" (str.++ "-" (str.++ "." (str.++ "y" (str.++ "x" (str.++ "9" (str.++ "I" (str.++ "." (str.++ "9" (str.++ "v" ""))))))))))))))))))

(define-fun Witness2 () String (str.++ "\u{b5}" (str.++ "@" (str.++ "Z" (str.++ "2" (str.++ "." (str.++ "w" (str.++ "-" (str.++ "." (str.++ "Z" (str.++ "8" (str.++ "Q" (str.++ "7" (str.++ "." (str.++ "6" (str.++ "O" ""))))))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.+ (re.union (re.range "-" ".")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))))(re.++ (re.range "@" "@")(re.++ (re.union ((_ re.loop 1 67) (re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))) (re.++ (re.+ (re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))))(re.++ (re.range "." ".") ((_ re.loop 1 67) (re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))))))(re.++ (re.range "." ".")(re.++ (re.++ ((_ re.loop 2 4) (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))) (re.opt (re.++ (re.range "." ".") ((_ re.loop 2 2) (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z"))))))) (str.to_re "")))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String "")

(define-fun Witness2 () String "")

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.* (re.union (re.range "\u{00}" "\u{1f}")(re.union (re.range "!" "+")(re.union (re.range "-" "/") (re.range "1" "\u{ff}"))))) (str.to_re "")))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "2" (str.++ "4" (str.++ "-" (str.++ "0" (str.++ "1" (str.++ "-" (str.++ "0" (str.++ "0" (str.++ "0" (str.++ "*" (str.++ "&" (str.++ "a" (str.++ "m" (str.++ "p" (str.++ ";" (str.++ "5" (str.++ "9" (str.++ "9" (str.++ "7" ""))))))))))))))))))))

(define-fun Witness2 () String (str.++ "2" (str.++ "8" (str.++ "-" (str.++ "0" (str.++ "8" (str.++ "." (str.++ "0" (str.++ "0" (str.++ "0" (str.++ "q" (str.++ "&" (str.++ "a" (str.++ "m" (str.++ "p" (str.++ ";" (str.++ "8" (str.++ "3" (str.++ "9" (str.++ "3" ""))))))))))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.union (re.++ (re.union (re.++ (re.union (re.++ (re.range "0" "0") (re.range "1" "9"))(re.union (re.++ (re.range "1" "1") (re.range "0" "9")) (re.++ (re.range "2" "2") (re.range "0" "8"))))(re.++ (re.range "-" "/") (re.union (re.++ (re.range "0" "0") (re.range "1" "9")) (re.++ (re.range "1" "1") (re.range "0" "2"))))) (re.union (re.++ (str.to_re (str.++ "3" (str.++ "1" "")))(re.++ (re.range "-" "/") (re.union (re.++ (re.range "0" "0") (re.union (re.range "1" "1")(re.union (re.range "3" "3")(re.union (re.range "5" "5") (re.range "7" "8"))))) (re.++ (re.range "1" "1") (re.union (re.range "0" "0") (re.range "2" "2")))))) (re.++ (re.union (str.to_re (str.++ "2" (str.++ "9" ""))) (str.to_re (str.++ "3" (str.++ "0" ""))))(re.++ (re.range "-" "/") (re.union (re.++ (re.range "0" "0") (re.union (re.range "," ",")(re.union (re.range "1" "1") (re.range "3" "9")))) (re.++ (re.range "1" "1") (re.range "0" "2")))))))(re.++ (re.range "-" "/") (re.++ (re.++ (str.to_re (str.++ "0" (str.++ "0" (str.++ "0" "")))) (re.union (re.range "\u{00}" "/") (re.range "1" "\u{ff}")))(re.++ (str.to_re (str.++ "&" (str.++ "a" (str.++ "m" (str.++ "p" (str.++ ";" "")))))) (re.++ (re.range "0" "9")(re.++ (re.range "0" "9")(re.++ (re.range "0" "9") (re.range "0" "9")))))))) (re.++ (str.to_re (str.++ "2" (str.++ "9" "")))(re.++ (re.range "-" "/")(re.++ (str.to_re (str.++ "0" (str.++ "2" "")))(re.++ (re.range "-" "/") (re.union (re.++ (re.range "0" "9")(re.++ (re.range "0" "9") (re.union (re.++ (re.union (re.range "0" "0")(re.union (re.range "2" "2")(re.union (re.range "4" "4")(re.union (re.range "6" "6") (re.range "8" "8"))))) (re.union (re.range "4" "4") (re.range "8" "8")))(re.union (re.++ (re.union (re.range "2" "2")(re.union (re.range "4" "4")(re.union (re.range "6" "6") (re.range "8" "8")))) (re.union (re.range "0" "0")(re.union (re.range "4" "4") (re.range "8" "8")))) (re.++ (re.union (re.range "1" "1")(re.union (re.range "3" "3")(re.union (re.range "5" "5")(re.union (re.range "7" "7") (re.range "9" "9"))))) (re.union (re.range "2" "2") (re.range "6" "6"))))))) (re.++ (re.union (re.++ (re.union (re.range "0" "0")(re.union (re.range "2" "2")(re.union (re.range "4" "4")(re.union (re.range "6" "6") (re.range "8" "8"))))) (re.union (re.range "4" "4") (re.range "8" "8")))(re.union (re.++ (re.union (re.range "2" "2")(re.union (re.range "4" "4")(re.union (re.range "6" "6") (re.range "8" "8")))) (re.union (re.range "0" "0")(re.union (re.range "4" "4") (re.range "8" "8")))) (re.++ (re.union (re.range "1" "1")(re.union (re.range "3" "3")(re.union (re.range "5" "5")(re.union (re.range "7" "7") (re.range "9" "9"))))) (re.union (re.range "2" "2") (re.range "6" "6"))))) (str.to_re (str.++ "0" (str.++ "0" "")))))))))) (str.to_re "")))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "/" (str.++ "V" (str.++ "9" (str.++ "/" (str.++ "7" (str.++ "c" "")))))))

(define-fun Witness2 () String (str.++ "/" (str.++ "F" "")))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.+ (re.++ (re.range "/" "/")(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z"))))(re.++ (re.* (re.++ (re.range "_" "_") (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))))) (re.* (re.++ (re.range "-" "-") (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))))))))) (str.to_re "")))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "9" (str.++ "8" (str.++ "0" ""))))

(define-fun Witness2 () String (str.++ "6" (str.++ "2" (str.++ "9" (str.++ "6" (str.++ "5" (str.++ "," (str.++ "8" (str.++ "8" "")))))))))

(assert (= regexA (re.union (re.++ (str.to_re "")(re.++ ((_ re.loop 3 5) (re.range "0" "9"))(re.++ (re.range "," ",")(re.++ ((_ re.loop 2 2) (re.range "0" "9")) (str.to_re ""))))) (re.++ (str.to_re "")(re.++ ((_ re.loop 3 5) (re.range "0" "9")) (str.to_re ""))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "+" (str.++ "8" (str.++ "1" (str.++ "2" (str.++ "9" (str.++ "\u{a0}" (str.++ "-" (str.++ " " (str.++ "9" (str.++ "6" (str.++ "9" (str.++ "6" (str.++ "8" (str.++ "9" (str.++ "9" (str.++ "9" "")))))))))))))))))

(define-fun Witness2 () String (str.++ "+" (str.++ "5" (str.++ "9" (str.++ "3" (str.++ "\u{0c}" (str.++ "9" (str.++ "6" (str.++ "\u{a0}" (str.++ "8" (str.++ "9" (str.++ "6" (str.++ "8" (str.++ "5" (str.++ "7" (str.++ "3" ""))))))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.union (re.range "+" "+") (str.to_re (str.++ "0" (str.++ "0" ""))))(re.++ (re.opt (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (re.union ((_ re.loop 3 3) (re.range "0" "9")) ((_ re.loop 2 2) (re.range "0" "9")))(re.++ (re.opt (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (re.opt (re.range "-" "-"))(re.++ (re.opt (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (re.union ((_ re.loop 2 2) (re.range "0" "9")) (re.range "1" "9"))(re.++ (re.opt (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (re.opt (re.range "-" "-"))(re.++ (re.opt (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))) (re.union ((_ re.loop 8 8) (re.range "0" "9")) ((_ re.loop 7 7) (re.range "0" "9"))))))))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "8" (str.++ "9" (str.++ "9" (str.++ "8" (str.++ "2" (str.++ "9" (str.++ "8" (str.++ "9" (str.++ "7" ""))))))))))

(define-fun Witness2 () String (str.++ "1" (str.++ "8" (str.++ "4" (str.++ "\u{a0}" (str.++ "0" (str.++ "6" (str.++ "9" (str.++ " " (str.++ "8" (str.++ "3" (str.++ "6" ""))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ ((_ re.loop 3 3) (re.range "0" "9"))(re.++ (re.opt (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ ((_ re.loop 3 3) (re.range "0" "9"))(re.++ (re.opt (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ ((_ re.loop 3 3) (re.range "0" "9")) (str.to_re "")))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "9" (str.++ "," (str.++ "8" (str.++ "8" (str.++ "4" ""))))))

(define-fun Witness2 () String (str.++ "$" (str.++ "8" (str.++ "8" (str.++ "," (str.++ "8" (str.++ "8" (str.++ "9" (str.++ "," (str.++ "4" (str.++ "8" (str.++ "8" ""))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.opt (re.range "$" "$"))(re.++ (re.union (re.++ ((_ re.loop 1 3) (re.range "0" "9"))(re.++ (re.range "," ",")(re.++ (re.* (re.++ ((_ re.loop 3 3) (re.range "0" "9")) (re.range "," ","))) ((_ re.loop 3 3) (re.range "0" "9"))))) (re.+ (re.range "0" "9")))(re.++ (re.opt (re.++ (re.union (re.range "\u{00}" "\u{09}") (re.range "\u{0b}" "\u{ff}"))(re.++ (re.range "0" "9") (re.range "0" "9")))) (str.to_re "")))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "1" (str.++ "/" (str.++ "3" (str.++ "1" (str.++ "-" (str.++ "1" (str.++ "9" (str.++ "8" (str.++ "8" ""))))))))))

(define-fun Witness2 () String (str.++ "0" (str.++ "2" (str.++ "-" (str.++ "1" (str.++ "9" (str.++ "/" (str.++ "2" (str.++ "0" (str.++ "1" (str.++ "6" "")))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.union (re.++ (re.union (re.++ (re.opt (re.range "0" "0")) (re.union (re.range "1" "1")(re.union (re.range "3" "3")(re.union (re.range "5" "5") (re.range "7" "8")))))(re.union (str.to_re (str.++ "1" (str.++ "0" ""))) (str.to_re (str.++ "1" (str.++ "2" "")))))(re.++ (re.union (re.range "-" "-") (re.range "/" "/"))(re.++ (re.union (re.range "1" "9")(re.union (re.++ (re.range "0" "0") (re.range "1" "9"))(re.union (re.++ (re.range "1" "2") (re.opt (re.range "0" "9"))) (re.++ (re.range "3" "3") (re.opt (re.range "0" "1"))))))(re.++ (re.union (re.range "-" "-") (re.range "/" "/")) (re.union (re.++ (str.to_re (str.++ "1" (str.++ "9" "")))(re.++ (re.range "2" "9") (re.range "0" "9")))(re.union (re.++ (str.to_re (str.++ "2" (str.++ "0" "")))(re.++ (re.range "0" "1") (re.range "0" "9"))) (re.++ (re.union (re.range "0" "1") (re.range "8" "9")) (re.range "0" "9")))))))) (re.++ (re.union (re.++ (re.opt (re.range "0" "0")) (re.union (re.range "2" "2")(re.union (re.range "4" "4")(re.union (re.range "6" "6") (re.range "9" "9"))))) (str.to_re (str.++ "1" (str.++ "1" ""))))(re.++ (re.union (re.range "-" "-") (re.range "/" "/"))(re.++ (re.union (re.range "1" "9")(re.union (re.++ (re.range "0" "0") (re.range "1" "9"))(re.union (re.++ (re.range "1" "2") (re.opt (re.range "0" "9"))) (re.++ (re.range "3" "3") (re.opt (re.range "0" "0"))))))(re.++ (re.union (re.range "-" "-") (re.range "/" "/")) (re.union (re.++ (str.to_re (str.++ "1" (str.++ "9" "")))(re.++ (re.range "2" "9") (re.range "0" "9")))(re.union (re.++ (str.to_re (str.++ "2" (str.++ "0" "")))(re.++ (re.range "0" "1") (re.range "0" "9"))) (re.++ (re.union (re.range "0" "1") (re.range "8" "9")) (re.range "0" "9"))))))))) (str.to_re "")))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "2" (str.++ "8" (str.++ "A" (str.++ "A" "")))))

(define-fun Witness2 () String (str.++ "5" (str.++ "2" (str.++ "H" ""))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.range "2" "5")(re.++ (re.union (re.range "0" "0")(re.union (re.range "2" "2")(re.union (re.range "4" "4")(re.union (re.range "6" "6") (re.range "8" "8")))))(re.++ (re.union (re.++ (re.range "A" "A") (re.opt (re.range "A" "A")))(re.union (re.range "B" "C")(re.union (re.++ (re.range "D" "D") (re.opt (re.++ (re.range "D" "D") (re.opt (re.range "D" "D"))))) (re.range "E" "H")))) (str.to_re "")))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "a" (str.++ "f" (str.++ "Z" (str.++ "2" (str.++ "6" (str.++ "W" (str.++ "8" (str.++ "5" (str.++ "-" (str.++ "a" (str.++ "Z" (str.++ "7" (str.++ "u" (str.++ "-" (str.++ "a" (str.++ "z" (str.++ "S" (str.++ "g" (str.++ "-" (str.++ "4" (str.++ "d" (str.++ "g" (str.++ "V" (str.++ "-" (str.++ "i" (str.++ "Z" (str.++ "A" (str.++ "9" (str.++ "9" (str.++ "z" (str.++ "z" (str.++ "8" (str.++ "F" (str.++ "7" (str.++ "I" (str.++ "R" "")))))))))))))))))))))))))))))))))))))

(define-fun Witness2 () String (str.++ "3" (str.++ "8" (str.++ "d" (str.++ "H" (str.++ "8" (str.++ "4" (str.++ "x" (str.++ "2" (str.++ "-" (str.++ "9" (str.++ "8" (str.++ "S" (str.++ "2" (str.++ "-" (str.++ "4" (str.++ "z" (str.++ "u" (str.++ "9" (str.++ "-" (str.++ "2" (str.++ "9" (str.++ "3" (str.++ "9" (str.++ "-" (str.++ "8" (str.++ "W" (str.++ "y" (str.++ "9" (str.++ "8" (str.++ "z" (str.++ "H" (str.++ "K" (str.++ "2" (str.++ "8" (str.++ "8" (str.++ "o" "")))))))))))))))))))))))))))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ ((_ re.loop 8 8) (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z"))))(re.++ (re.range "-" "-")(re.++ ((_ re.loop 4 4) (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z"))))(re.++ (re.range "-" "-")(re.++ ((_ re.loop 4 4) (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z"))))(re.++ (re.range "-" "-")(re.++ ((_ re.loop 4 4) (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z"))))(re.++ (re.range "-" "-")(re.++ ((_ re.loop 12 12) (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))) (str.to_re "")))))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "L" (str.++ "1" (str.++ "u" (str.++ " " (str.++ "9" (str.++ "U" (str.++ "V" ""))))))))

(define-fun Witness2 () String (str.++ "A" (str.++ "1" (str.++ "4" (str.++ "F" (str.++ "Y" ""))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ ((_ re.loop 1 2) (re.union (re.range "A" "Z") (re.range "a" "z")))(re.++ (re.range "0" "9")(re.++ (re.opt (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z"))))(re.++ (re.opt (re.range " " " "))(re.++ (re.range "0" "9")(re.++ ((_ re.loop 2 2) (re.union (re.range "A" "Z") (re.range "a" "z"))) (str.to_re ""))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "9" (str.++ "8" (str.++ "8" (str.++ "\u{5c}" (str.++ "\u{8a}" (str.++ "5" (str.++ "9" (str.++ "-" (str.++ "5" (str.++ "9" (str.++ "9" (str.++ "9" (str.++ " " (str.++ "5" "")))))))))))))))

(define-fun Witness2 () String (str.++ "9" (str.++ "8" (str.++ "4" (str.++ "\u{5c}" (str.++ " " (str.++ "`" (str.++ "8" (str.++ "2" (str.++ " " (str.++ " " (str.++ "5" (str.++ "3" (str.++ "9" (str.++ "8" "")))))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.opt (re.union (re.range "(" "(") (re.range "\u{5c}" "\u{5c}")))(re.++ ((_ re.loop 3 3) (re.range "0" "9"))(re.++ (re.opt (re.union (re.range ")" ")") (re.range "\u{5c}" "\u{5c}")))(re.++ (re.opt (re.range " " " "))(re.++ (re.union (re.range "\u{00}" "/") (re.range "2" "\u{ff}"))(re.++ ((_ re.loop 2 2) (re.range "0" "9"))(re.++ (re.opt (re.range " " " "))(re.++ (re.opt (re.range "-" "-"))(re.++ (re.opt (re.range " " " "))(re.++ ((_ re.loop 4 4) (re.range "0" "9"))(re.++ (re.* (re.range " " " "))(re.++ (re.opt (re.++ (re.opt (re.range "x" "x")) ((_ re.loop 1 5) (re.range "0" "9")))) (str.to_re ""))))))))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "d" (str.++ "e" (str.++ "c" (str.++ "8" "")))))

(define-fun Witness2 () String (str.++ "a" (str.++ "s" (str.++ "c" (str.++ "i" (str.++ "i" ""))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.union (str.to_re (str.++ "b" (str.++ "i" (str.++ "g" (str.++ "5" "")))))(re.union (re.++ (str.to_re (str.++ "e" (str.++ "u" (str.++ "c" "")))) (re.union (str.to_re (str.++ "k" (str.++ "r" ""))) (str.to_re (str.++ "j" (str.++ "p" (str.++ "m" (str.++ "s" "")))))))(re.union (str.to_re (str.++ "b" (str.++ "i" (str.++ "n" (str.++ "a" (str.++ "r" (str.++ "y" "")))))))(re.union (str.to_re (str.++ "g" (str.++ "r" (str.++ "e" (str.++ "e" (str.++ "k" ""))))))(re.union (str.to_re (str.++ "t" (str.++ "i" (str.++ "s" (str.++ "6" (str.++ "2" (str.++ "0" "")))))))(re.union (str.to_re (str.++ "h" (str.++ "e" (str.++ "b" (str.++ "r" (str.++ "e" (str.++ "w" "")))))))(re.union (str.to_re (str.++ "a" (str.++ "s" (str.++ "c" (str.++ "i" (str.++ "i" ""))))))(re.union (str.to_re (str.++ "s" (str.++ "w" (str.++ "e" (str.++ "7" "")))))(re.union (re.++ (str.to_re (str.++ "k" (str.++ "o" (str.++ "i" (str.++ "8" ""))))) (re.union (re.range "r" "r") (re.range "u" "u")))(re.union (re.++ (re.union (re.range "u" "u") (str.to_re (str.++ "k" (str.++ "e" (str.++ "y" (str.++ "b" "")))))) (str.to_re (str.++ "c" (str.++ "s" (str.++ "2" "")))))(re.union (re.++ (re.union (str.to_re (str.++ "d" (str.++ "e" (str.++ "c" ""))))(re.union (str.to_re (str.++ "h" (str.++ "p" "")))(re.union (str.to_re (str.++ "u" (str.++ "t" (str.++ "f" ""))))(re.union (str.to_re (str.++ "g" (str.++ "e" (str.++ "o" (str.++ "s" (str.++ "t" (str.++ "d" ""))))))) (str.to_re (str.++ "a" (str.++ "r" (str.++ "m" (str.++ "s" (str.++ "c" (str.++ "i" (str.++ "i" "")))))))))))) (re.range "8" "8"))(re.union (re.++ (str.to_re (str.++ "g" (str.++ "b" ""))) (re.union (re.range "k" "k") (str.to_re (str.++ "2" (str.++ "3" (str.++ "1" (str.++ "2" "")))))))(re.union (re.++ (str.to_re (str.++ "c" (str.++ "p" ""))) (re.union (re.++ (re.range "8" "8") (re.union (re.++ (re.range "5" "5") (re.union (re.range "0" "0") (re.range "2" "2"))) (str.to_re (str.++ "6" (str.++ "6" "")))))(re.union (str.to_re (str.++ "9" (str.++ "3" (str.++ "2" "")))) (re.++ (str.to_re (str.++ "1" (str.++ "2" (str.++ "5" "")))) (re.union (re.range "0" "1") (re.range "6" "7"))))))(re.union (re.++ (str.to_re (str.++ "l" (str.++ "a" (str.++ "t" (str.++ "i" (str.++ "n" "")))))) (re.union (re.range "1" "2")(re.union (re.range "5" "5") (re.range "7" "7"))))(re.union (re.++ (re.union (re.range "s" "s") (re.range "u" "u")) (str.to_re (str.++ "j" (str.++ "i" (str.++ "s" ""))))) (re.++ (str.to_re (str.++ "m" (str.++ "a" (str.++ "c" "")))) (re.union (str.to_re (str.++ "c" (str.++ "e" ""))) (str.to_re (str.++ "r" (str.++ "o" (str.++ "m" (str.++ "a" (str.++ "n" ""))))))))))))))))))))))) (str.to_re "")))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "9" ""))

(define-fun Witness2 () String (str.++ "9" (str.++ "5" (str.++ "8" (str.++ "9" (str.++ "." (str.++ "8" "")))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ ((_ re.loop 1 5) (re.range "0" "9"))(re.++ (re.opt (re.++ (re.range "." ".") ((_ re.loop 1 2) (re.range "0" "9")))) (str.to_re ""))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "3" (str.++ "8" (str.++ "9" (str.++ "8" (str.++ "9" (str.++ "8" (str.++ "1" (str.++ "0" (str.++ "4" (str.++ "1" (str.++ "9" (str.++ "2" (str.++ "8" (str.++ "4" "")))))))))))))))

(define-fun Witness2 () String (str.++ "3" (str.++ "8" (str.++ "9" (str.++ "3" (str.++ "6" (str.++ "8" (str.++ "8" (str.++ "9" (str.++ "6" (str.++ "9" (str.++ "3" (str.++ "9" (str.++ "0" (str.++ "3" "")))))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (str.to_re (str.++ "3" (str.++ "8" (str.++ "9" ""))))(re.++ ((_ re.loop 11 11) (re.range "0" "9")) (str.to_re ""))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "$" (str.++ " " (str.++ "6" ""))))

(define-fun Witness2 () String (str.++ "$" ""))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.range "$" "$")(re.++ (re.* (re.range " " " "))(re.++ (re.* (re.range "0" "9"))(re.++ (re.opt (re.++ (re.union (re.range "\u{00}" "\u{09}") (re.range "\u{0b}" "\u{ff}")) ((_ re.loop 1 2) (re.range "0" "9")))) (str.to_re ""))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String "")

(define-fun Witness2 () String "")

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.* (re.union (re.range "\u{00}" "&") (re.range "(" "\u{ff}"))) (str.to_re "")))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "0" (str.++ "1" (str.++ ":" (str.++ "4" (str.++ "7" (str.++ "." (str.++ "3" (str.++ "8" (str.++ " " (str.++ "P" (str.++ "m" ""))))))))))))

(define-fun Witness2 () String (str.++ "2" (str.++ "0" (str.++ ":" (str.++ "2" (str.++ "5" (str.++ ":" (str.++ "0" (str.++ "1" "")))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.union (re.++ (re.union (re.++ (re.opt (re.range "0" "0")) (re.range "1" "9")) (re.++ (re.range "1" "1") (re.range "0" "2")))(re.++ (re.union (re.range "." ".") (re.range ":" ":"))(re.++ (re.range "0" "5")(re.++ (re.range "0" "9")(re.++ (re.opt (re.++ (re.union (re.range "." ".") (re.range ":" ":"))(re.++ (re.range "0" "5") (re.range "0" "9"))))(re.++ (re.opt (re.range " " " ")) (re.union (str.to_re (str.++ "A" (str.++ "M" "")))(re.union (str.to_re (str.++ "a" (str.++ "m" "")))(re.union (str.to_re (str.++ "a" (str.++ "M" "")))(re.union (str.to_re (str.++ "A" (str.++ "m" "")))(re.union (str.to_re (str.++ "P" (str.++ "M" "")))(re.union (str.to_re (str.++ "p" (str.++ "m" "")))(re.union (str.to_re (str.++ "p" (str.++ "M" ""))) (str.to_re (str.++ "P" (str.++ "m" "")))))))))))))))) (re.++ (re.union (re.++ (re.opt (re.range "0" "0")) (re.range "0" "9"))(re.union (re.++ (re.range "1" "1") (re.range "0" "9")) (re.++ (re.range "2" "2") (re.range "0" "3"))))(re.++ (re.union (re.range "." ".") (re.range ":" ":"))(re.++ (re.range "0" "5")(re.++ (re.range "0" "9") (re.opt (re.++ (re.union (re.range "." ".") (re.range ":" ":"))(re.++ (re.range "0" "5") (re.range "0" "9"))))))))) (str.to_re "")))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "0" (str.++ "4" (str.++ "4" (str.++ " " (str.++ "-" (str.++ "2" (str.++ "\u{09}" (str.++ "1" (str.++ "8" (str.++ "4" (str.++ "5" (str.++ "8" (str.++ "8" (str.++ "8" "")))))))))))))))

(define-fun Witness2 () String (str.++ "0" (str.++ "4" (str.++ "4" (str.++ "-" (str.++ "\u{0b}" (str.++ "2" (str.++ "\u{85}" (str.++ "5" (str.++ "0" (str.++ "1" (str.++ "8" (str.++ "4" (str.++ "5" (str.++ "8" "")))))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.range "0" "0")(re.++ (str.to_re (str.++ "4" (str.++ "4" "")))(re.++ (re.opt (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (re.opt (re.range "-" "-"))(re.++ (re.opt (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (re.range "2" "2")(re.++ (re.opt (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (re.range "1" "9")(re.++ ((_ re.loop 6 6) (re.range "0" "9")) (str.to_re "")))))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "h" (str.++ "t" (str.++ "t" (str.++ "p" (str.++ ":" (str.++ "/" (str.++ "/" (str.++ "\u{5c}" (str.++ "N" (str.++ "v" (str.++ "i" (str.++ "d" (str.++ "e" (str.++ "o" (str.++ "\u{5c}" (str.++ "\u{c4}" (str.++ "g" (str.++ "o" (str.++ "o" (str.++ "g" (str.++ "l" (str.++ "e" (str.++ "e" (str.++ "e" (str.++ "\u{5c}" (str.++ "\u{14}" (str.++ "\u{5c}" (str.++ "w" (str.++ "w" (str.++ "w" (str.++ "/" (str.++ "v" (str.++ "i" (str.++ "d" (str.++ "e" (str.++ "o" (str.++ "p" (str.++ "l" (str.++ "a" (str.++ "y" (str.++ "d" (str.++ "o" (str.++ "c" (str.++ "i" (str.++ "d" (str.++ "=" (str.++ "w" (str.++ "-" (str.++ "-" (str.++ "\u{5c}" (str.++ "-" (str.++ "\u{5c}" (str.++ "-" (str.++ "w" (str.++ "-" (str.++ "-" (str.++ "w" (str.++ "\u{5c}" (str.++ "w" (str.++ "-" (str.++ "-" (str.++ "\u{5c}" (str.++ "-" (str.++ "\u{5c}" (str.++ "w" ""))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(define-fun Witness2 () String (str.++ "h" (str.++ "t" (str.++ "t" (str.++ "p" (str.++ ":" (str.++ "/" (str.++ "/" (str.++ "\u{5c}" (str.++ "v" (str.++ "i" (str.++ "d" (str.++ "e" (str.++ "o" (str.++ "\u{5c}" (str.++ "^" (str.++ "g" (str.++ "o" (str.++ "o" (str.++ "g" (str.++ "l" (str.++ "e" (str.++ "\u{5c}" (str.++ "\u{1c}" (str.++ "\u{5c}" (str.++ "w" (str.++ "w" (str.++ "/" (str.++ "v" (str.++ "i" (str.++ "d" (str.++ "e" (str.++ "o" (str.++ "p" (str.++ "l" (str.++ "a" (str.++ "y" (str.++ "\u{5c}" (str.++ "d" (str.++ "o" (str.++ "c" (str.++ "i" (str.++ "d" (str.++ "=" (str.++ "-" (str.++ "w" (str.++ "-" (str.++ "-" (str.++ "\u{5c}" (str.++ "w" (str.++ "-" (str.++ "-" (str.++ "w" (str.++ "-" (str.++ "w" (str.++ "-" (str.++ "-" (str.++ "-" (str.++ "-" (str.++ "\u{5c}" (str.++ "-" (str.++ "w" (str.++ "\u{5c}" "")))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (str.to_re (str.++ "h" (str.++ "t" (str.++ "t" (str.++ "p" (str.++ ":" (str.++ "/" (str.++ "/" (str.++ "\u{5c}" "")))))))))(re.++ (re.opt (re.union (re.range "\u{00}" "\u{09}") (re.range "\u{0b}" "\u{ff}")))(re.++ (str.to_re (str.++ "v" (str.++ "i" (str.++ "d" (str.++ "e" (str.++ "o" (str.++ "\u{5c}" "")))))))(re.++ (re.union (re.range "\u{00}" "\u{09}") (re.range "\u{0b}" "\u{ff}"))(re.++ (str.to_re (str.++ "g" (str.++ "o" (str.++ "o" (str.++ "g" (str.++ "l" ""))))))(re.++ (re.+ (re.range "e" "e"))(re.++ (re.range "\u{5c}" "\u{5c}")(re.++ (re.union (re.range "\u{00}" "\u{09}") (re.range "\u{0b}" "\u{ff}"))(re.++ (re.range "\u{5c}" "\u{5c}")(re.++ ((_ re.loop 2 3) (re.range "w" "w"))(re.++ (str.to_re (str.++ "/" (str.++ "v" (str.++ "i" (str.++ "d" (str.++ "e" (str.++ "o" (str.++ "p" (str.++ "l" (str.++ "a" (str.++ "y" "")))))))))))(re.++ (re.opt (re.range "\u{5c}" "\u{5c}"))(re.++ (str.to_re (str.++ "d" (str.++ "o" (str.++ "c" (str.++ "i" (str.++ "d" (str.++ "=" ""))))))) ((_ re.loop 19 19) (re.union (re.range "-" "-")(re.union (re.range "\u{5c}" "\u{5c}") (re.range "w" "w"))))))))))))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "9" (str.++ "0" (str.++ "," (str.++ "-" (str.++ "1" (str.++ "5" (str.++ "8" (str.++ "." (str.++ "7" (str.++ "6" "")))))))))))

(define-fun Witness2 () String (str.++ "2" (str.++ "," (str.++ "9" (str.++ "4" (str.++ "." (str.++ "5" "")))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.++ (re.opt (re.range "-" "-")) (re.union (str.to_re (str.++ "9" (str.++ "0" ""))) (re.++ (re.union (re.range "0" "9") (re.++ (re.range "1" "8") (re.range "0" "9"))) (re.opt (re.++ (re.range "." ".") ((_ re.loop 1 6) (re.range "0" "9")))))))(re.++ (re.range "," ",")(re.++ (re.++ (re.opt (re.range "-" "-")) (re.union (str.to_re (str.++ "1" (str.++ "8" (str.++ "0" "")))) (re.++ (re.union (re.range "0" "9")(re.union (re.++ (re.range "0" "9") (re.range "0" "9")) (re.++ (re.range "1" "1")(re.++ (re.range "0" "7") (re.range "0" "9"))))) (re.opt (re.++ (re.range "." ".") ((_ re.loop 1 6) (re.range "0" "9"))))))) (str.to_re "")))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "\u{09}" (str.++ "7" (str.++ "8" (str.++ "7" (str.++ "9" (str.++ "9" (str.++ "9" (str.++ "9" (str.++ "." (str.++ "9" (str.++ "\u{0d}" (str.++ "h" (str.++ "o" (str.++ "u" (str.++ "r" (str.++ "\u{0a}" "")))))))))))))))))

(define-fun Witness2 () String (str.++ " " (str.++ "3" (str.++ "8" (str.++ "." (str.++ "5" (str.++ "8" (str.++ "8" (str.++ " " (str.++ "h" (str.++ "r" "")))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (re.++ (re.+ (re.range "0" "9")) (re.opt (re.++ (re.range "." ".") (re.+ (re.range "0" "9")))))(re.++ (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (re.++ (re.union (re.++ (re.range "w" "w") (re.opt (str.to_re (str.++ "e" (str.++ "e" (str.++ "k" ""))))))(re.union (str.to_re (str.++ "w" (str.++ "k" "")))(re.union (re.++ (re.range "d" "d") (re.opt (str.to_re (str.++ "a" (str.++ "y" "")))))(re.union (re.++ (re.range "h" "h") (re.opt (str.to_re (str.++ "o" (str.++ "u" (str.++ "r" "")))))) (str.to_re (str.++ "h" (str.++ "r" ""))))))) (re.opt (re.range "s" "s"))) (re.++ (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))) (str.to_re "")))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "2" (str.++ "6" "")))

(define-fun Witness2 () String (str.++ "." ""))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.* (re.range "0" "9"))(re.++ (re.opt (re.range "." "."))(re.++ (re.* (re.range "0" "9")) (str.to_re "")))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "2" (str.++ "-" (str.++ "\u{ad}" (str.++ "2" (str.++ "9" (str.++ "/" (str.++ "3" (str.++ "6" (str.++ "0" (str.++ "0" "")))))))))))

(define-fun Witness2 () String (str.++ "2" (str.++ "-" (str.++ "2" (str.++ "9" (str.++ "." (str.++ "7" (str.++ "4" (str.++ "9" (str.++ "6" ""))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.union (re.++ (re.union (re.++ (re.range "0" "0") (re.union (re.range "1" "1")(re.union (re.range "3" "3")(re.union (re.range "5" "5") (re.range "7" "8")))))(re.union (str.to_re (str.++ "1" (str.++ "0" ""))) (str.to_re (str.++ "1" (str.++ "2" "")))))(re.++ (re.range "-" "/")(re.++ (re.union (re.++ (re.range "0" "0") (re.range "1" "9"))(re.union (re.++ (re.range "1" "2") (re.range "0" "9")) (re.++ (re.range "3" "3") (re.range "0" "1"))))(re.++ (re.range "-" "/") ((_ re.loop 4 4) (re.range "0" "9"))))))(re.union (re.++ (re.union (re.++ (re.range "0" "0") (re.union (re.range "4" "4")(re.union (re.range "6" "6") (re.range "9" "9")))) (str.to_re (str.++ "1" (str.++ "\u{ad}" (str.++ "1" "")))))(re.++ (re.range "-" "/")(re.++ (re.union (re.++ (re.range "0" "0") (re.range "1" "9"))(re.union (re.++ (re.range "1" "2") (re.range "0" "9")) (str.to_re (str.++ "3" (str.++ "0" "")))))(re.++ (re.range "-" "/") ((_ re.loop 4 4) (re.range "0" "9"))))))(re.union (re.++ (re.range "2" "2")(re.++ (re.range "-" "/")(re.++ (re.union (re.++ (re.range "0" "0") (re.range "1" "9"))(re.union (re.++ (re.range "1" "1") (re.range "0" "9")) (re.++ (str.to_re (str.++ "2" (str.++ "\u{ad}" ""))) (re.range "0" "8"))))(re.++ (re.range "-" "/") ((_ re.loop 4 4) (re.range "0" "9"))))))(re.union (re.++ (re.range "2" "2")(re.++ (re.range "-" "/")(re.++ (str.to_re (str.++ "2" (str.++ "9" "")))(re.++ (re.range "-" "/") (re.++ (re.union (re.range "0" "0")(re.union (re.range "2" "2")(re.union (re.range "4" "4")(re.union (re.range "6" "6") (re.range "8" "8")))))(re.++ (re.union (re.range "0" "0")(re.union (re.range "4" "4") (re.range "8" "8"))) (str.to_re (str.++ "0" (str.++ "0" "")))))))))(re.union (re.++ (re.range "2" "2")(re.++ (re.range "-" "/")(re.++ (re.range "\u{ad}" "\u{ad}")(re.++ (str.to_re (str.++ "2" (str.++ "9" "")))(re.++ (re.range "-" "/") (re.++ (re.union (re.range "1" "1")(re.union (re.range "3" "3")(re.union (re.range "5" "5")(re.union (re.range "7" "7") (re.range "9" "9")))))(re.++ (re.union (re.range "2" "2") (re.range "6" "6")) (str.to_re (str.++ "0" (str.++ "0" ""))))))))))(re.union (re.++ (re.range "2" "2")(re.++ (re.range "-" "/")(re.++ (str.to_re (str.++ "2" (str.++ "9" "")))(re.++ (re.range "-" "/") (re.++ (re.range "0" "9")(re.++ (re.range "0" "9")(re.++ (re.range "0" "0") (re.union (re.range "4" "4") (re.range "8" "8")))))))))(re.union (re.++ (re.range "2" "2")(re.++ (re.range "\u{ad}" "\u{ad}")(re.++ (re.range "-" "/")(re.++ (str.to_re (str.++ "2" (str.++ "9" "")))(re.++ (re.range "-" "/") (re.++ (re.range "0" "9")(re.++ (re.range "0" "9")(re.++ (re.union (re.range "2" "2")(re.union (re.range "4" "4")(re.union (re.range "6" "6") (re.range "8" "8")))) (re.union (re.range "0" "0")(re.union (re.range "4" "4") (re.range "8" "8"))))))))))) (re.++ (re.range "2" "2")(re.++ (re.range "-" "/")(re.++ (str.to_re (str.++ "2" (str.++ "9" "")))(re.++ (re.range "-" "/") (re.++ (re.range "0" "9")(re.++ (re.union (re.range "0" "9") (re.range "\u{ad}" "\u{ad}"))(re.++ (re.union (re.range "1" "1")(re.union (re.range "3" "3")(re.union (re.range "5" "5")(re.union (re.range "7" "7") (re.range "9" "9"))))) (re.union (re.range "2" "2") (re.range "6" "6")))))))))))))))) (str.to_re "")))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "s" (str.++ "P" (str.++ "t" ""))))

(define-fun Witness2 () String (str.++ "w" (str.++ "0" "")))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.union (re.range "A" "Z")(re.union (re.range "_" "_") (re.range "a" "z")))(re.++ (re.* (re.union (re.range "#" "$")(re.union (re.range "0" "9")(re.union (re.range "@" "Z")(re.union (re.range "_" "_") (re.range "a" "z")))))) (str.to_re ""))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "0" (str.++ "2" (str.++ "9" ""))))

(define-fun Witness2 () String (str.++ "9" (str.++ "9" (str.++ "6" (str.++ "8" "")))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.+ (re.range "0" "9"))(re.++ (re.opt (re.++ (re.opt (re.union (re.range "," ",") (re.range "." "."))) (re.+ (re.range "0" "9")))) (str.to_re ""))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "|" (str.++ "2" (str.++ "5" (str.++ "9" (str.++ "9" (str.++ "7" (str.++ "8" (str.++ "0" (str.++ "8" (str.++ "8" (str.++ "9" (str.++ "9" (str.++ "1" (str.++ "7" (str.++ "4" (str.++ "9" "")))))))))))))))))

(define-fun Witness2 () String (str.++ "5" (str.++ "|" (str.++ "8" (str.++ "7" (str.++ "5" (str.++ "5" (str.++ "9" (str.++ "0" (str.++ "9" (str.++ "8" (str.++ "8" (str.++ "6" (str.++ "3" (str.++ "8" (str.++ "0" (str.++ "8" "")))))))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ ((_ re.loop 2 2) (re.union (re.range "1" "5") (re.range "|" "|")))(re.++ ((_ re.loop 14 14) (re.range "0" "9")) (str.to_re ""))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "_" ""))

(define-fun Witness2 () String (str.++ "z" ""))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.union (re.range "A" "Z")(re.union (re.range "_" "_") (re.range "a" "z")))(re.++ (re.* (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_") (re.range "a" "z"))))) (str.to_re ""))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "5" (str.++ "d" (str.++ "1" (str.++ "9" (str.++ "h" (str.++ "4" (str.++ "8" (str.++ "m" "")))))))))

(define-fun Witness2 () String (str.++ "3" (str.++ "d" (str.++ "1" (str.++ "2" (str.++ "h" (str.++ "1" (str.++ "9" (str.++ "m" "")))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.union (re.range "0" "9")(re.union (re.++ (re.range "0" "9") (re.range "0" "9")) (re.++ (re.range "1" "3")(re.++ (re.range "0" "6") (re.range "0" "5")))))(re.++ (re.range "d" "d")(re.++ (re.union (re.range "0" "9")(re.union (re.++ (re.range "1" "1") (re.range "0" "9")) (re.++ (re.range "1" "2") (re.range "0" "3"))))(re.++ (re.range "h" "h")(re.++ (re.union (re.range "0" "9") (re.++ (re.range "1" "5") (re.range "0" "9")))(re.++ (re.range "m" "m") (str.to_re ""))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "2" (str.++ "%" "")))

(define-fun Witness2 () String (str.++ "7" (str.++ "2" (str.++ "8" (str.++ "5" "")))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.opt (re.union (re.range "+" "+") (re.range "-" "-")))(re.++ (re.+ (re.range "0" "9"))(re.++ (re.opt (re.++ (re.range "." ".") ((_ re.loop 1 4) (re.range "0" "9"))))(re.++ (re.* (re.range " " " "))(re.++ (re.opt (re.range "%" "%")) (str.to_re "")))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "9" (str.++ "0" (str.++ "9" (str.++ "." (str.++ "9" ""))))))

(define-fun Witness2 () String (str.++ "8" (str.++ "." (str.++ "0" (str.++ "4" "")))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.opt (re.union (re.range "+" "+") (re.range "-" "-")))(re.++ (re.range "0" "9")(re.++ ((_ re.loop 0 2) (re.range "0" "9"))(re.++ (re.opt (re.++ (re.range "." ".") ((_ re.loop 1 2) (re.range "0" "9"))))(re.++ (re.opt (re.range "%" "%")) (str.to_re "")))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "x" ""))

(define-fun Witness2 () String (str.++ "6" (str.++ "9" (str.++ "4" (str.++ "9" "")))))

(assert (= regexA (re.++ (str.to_re "")(re.++ ((_ re.loop 1 15) (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))) (str.to_re "")))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "." (str.++ "8" (str.++ "%" ""))))

(define-fun Witness2 () String (str.++ "8" (str.++ "3" (str.++ "." (str.++ "9" (str.++ "8" (str.++ "%" "")))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.++ (re.opt ((_ re.loop 1 2) (re.range "0" "9"))) (re.opt (re.++ (re.range "." ".") ((_ re.loop 1 2) (re.range "0" "9")))))(re.++ (re.range "%" "%") (str.to_re ""))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "3" (str.++ "." (str.++ "7" (str.++ "2" "")))))

(define-fun Witness2 () String (str.++ "$" (str.++ "4" (str.++ "4" (str.++ "2" "")))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.opt (re.range "$" "$"))(re.++ (re.+ (re.range "0" "9"))(re.++ (re.opt (re.++ (re.range "." ".") ((_ re.loop 2 2) (re.range "0" "9")))) (str.to_re "")))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "L" ""))

(define-fun Witness2 () String (str.++ "M" (str.++ "." (str.++ "j" (str.++ " " (str.++ "." ""))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.+ (re.union (re.range " " " ")(re.union (re.range "'" "'")(re.union (re.range "." ".")(re.union (re.range "A" "Z") (re.range "a" "z")))))) (str.to_re "")))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "7" (str.++ "5" (str.++ "7" (str.++ "8" (str.++ "1" (str.++ "9" (str.++ "8" (str.++ "2" (str.++ "9" (str.++ "9" (str.++ "G" (str.++ "B" (str.++ "R" (str.++ "9" (str.++ "3" (str.++ "4" (str.++ "8" (str.++ "5" (str.++ "0" (str.++ "9" (str.++ "," (str.++ "2" (str.++ "8" (str.++ "6" (str.++ "0" (str.++ "9" (str.++ "8" (str.++ "8" (str.++ "8" (str.++ "9" "")))))))))))))))))))))))))))))))

(define-fun Witness2 () String (str.++ "9" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "2" (str.++ "8" (str.++ "8" (str.++ "9" (str.++ "7" (str.++ "9" (str.++ "G" (str.++ "B" (str.++ "R" (str.++ "8" (str.++ "8" (str.++ "9" (str.++ "9" (str.++ "5" (str.++ "5" (str.++ "7" (str.++ "," (str.++ "8" (str.++ "8" (str.++ "6" (str.++ "9" (str.++ "3" (str.++ "8" (str.++ "8" (str.++ "3" (str.++ "8" "")))))))))))))))))))))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ ((_ re.loop 10 10) (re.range "0" "9"))(re.++ (str.to_re (str.++ "G" (str.++ "B" (str.++ "R" ""))))(re.++ ((_ re.loop 7 7) (re.range "0" "9"))(re.++ (re.union (re.range "," ",")(re.union (re.range "F" "F")(re.union (re.range "M" "M") (re.range "U" "U"))))(re.++ ((_ re.loop 9 9) (re.range "0" "9")) (str.to_re "")))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "[" (str.++ "]" "")))

(define-fun Witness2 () String (str.++ "[" (str.++ "\u{c4}" (str.++ "]" (str.++ "\u{09}" (str.++ "\u{fa}" (str.++ "\u{df}" (str.++ "\u{f9}" ""))))))))

(assert (= regexA (re.++ (re.range "[" "[")(re.++ (re.* (re.union (re.range "\u{00}" "\u{5c}") (re.range "^" "\u{ff}")))(re.++ (re.range "]" "]") (re.* (re.union (re.range "\u{00}" "Z") (re.range "\u{5c}" "\u{ff}"))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "8" (str.++ ":" (str.++ "0" (str.++ "8" "")))))

(define-fun Witness2 () String (str.++ "9" (str.++ ":" (str.++ "9" ""))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.union (re.range "0" "9")(re.union (re.++ (re.range "0" "1") (re.range "0" "9")) (re.++ (re.range "2" "2") (re.range "0" "3"))))(re.++ (re.range ":" ":")(re.++ (re.union (re.range "0" "9") (re.++ (re.range "0" "5") (re.range "0" "9"))) (str.to_re "")))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "8" (str.++ "\u{c0}" (str.++ "7" (str.++ "-" (str.++ "2" (str.++ "8" (str.++ "4" (str.++ "9" (str.++ "3" (str.++ "7" (str.++ "9" ""))))))))))))

(define-fun Witness2 () String (str.++ "(" (str.++ "8" (str.++ "1" (str.++ "9" (str.++ ")" (str.++ "9" (str.++ "9" (str.++ "1" (str.++ "\u{09}" (str.++ "6" (str.++ "9" (str.++ "8" (str.++ "2" ""))))))))))))))

(assert (= regexA (re.union (re.++ (str.to_re "")(re.++ (re.range "(" "(")(re.++ (re.union (re.++ (re.range "2" "7") ((_ re.loop 2 2) (re.range "0" "9")))(re.union (re.++ (re.range "8" "8") (re.union (re.++ (re.range "0" "0") (re.union (re.range "\u{00}" "/") (re.range "1" "\u{ff}")))(re.union (re.++ (re.union (re.range "\u{00}" "/") (re.range "1" "\u{ff}")) (re.range "0" "0"))(re.union (re.++ (re.range "1" "1") (re.range "0" "9"))(re.union (re.++ (re.range "2" "2") (re.union (re.range "\u{00}" "1") (re.range "3" "\u{ff}")))(re.union (re.++ (re.union (re.range "\u{00}" "1") (re.range "3" "\u{ff}")) (re.range "2" "2"))(re.union (re.++ (re.range "3" "3") (re.union (re.range "\u{00}" "2") (re.range "4" "\u{ff}")))(re.union (re.++ (re.union (re.range "\u{00}" "2") (re.range "4" "\u{ff}")) (re.range "3" "3"))(re.union (re.++ (re.range "4" "4") (re.union (re.range "\u{00}" "3") (re.range "5" "\u{ff}")))(re.union (re.++ (re.union (re.range "\u{00}" "3") (re.range "5" "\u{ff}")) (re.range "4" "4"))(re.union (re.++ (re.range "5" "5") (re.union (re.range "\u{00}" "4") (re.range "6" "\u{ff}")))(re.union (re.++ (re.union (re.range "\u{00}" "4") (re.range "6" "\u{ff}")) (re.range "5" "5"))(re.union (re.++ (re.range "6" "6") (re.union (re.range "\u{00}" "5") (re.range "7" "\u{ff}")))(re.union (re.++ (re.union (re.range "\u{00}" "5") (re.range "7" "\u{ff}")) (re.range "6" "6"))(re.union (re.++ (re.range "7" "7") (re.union (re.range "\u{00}" "6") (re.range "8" "\u{ff}")))(re.union (re.++ (re.union (re.range "\u{00}" "6") (re.range "8" "\u{ff}")) (re.range "7" "7"))(re.union (re.++ (re.range "8" "8") (re.union (re.range "\u{00}" "7") (re.range "9" "\u{ff}")))(re.union (re.++ (re.union (re.range "\u{00}" "7") (re.range "9" "\u{ff}")) (re.range "8" "8")) (re.++ (re.range "9" "9") (re.range "0" "9")))))))))))))))))))) (re.++ (re.range "9" "9") (re.union (re.++ (re.range "0" "0") (re.union (re.range "\u{00}" "/") (re.range "1" "\u{ff}")))(re.union (re.++ (re.union (re.range "\u{00}" "/") (re.range "1" "\u{ff}")) (re.range "0" "0")) (re.++ (re.range "1" "9") (re.range "1" "9")))))))(re.++ (re.range ")" ")")(re.++ (re.opt (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ ((_ re.loop 3 3) (re.range "0" "9"))(re.++ (re.opt (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "-" "-")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))))(re.++ ((_ re.loop 4 4) (re.range "0" "9")) (str.to_re ""))))))))) (re.++ (str.to_re "")(re.++ (re.union (re.++ (re.range "2" "7") ((_ re.loop 2 2) (re.range "0" "9")))(re.union (re.++ (re.range "8" "8") (re.union (re.++ (re.range "0" "0") (re.union (re.range "\u{00}" "/") (re.range "1" "\u{ff}")))(re.union (re.++ (re.union (re.range "\u{00}" "/") (re.range "1" "\u{ff}")) (re.range "0" "0"))(re.union (re.++ (re.range "1" "1") (re.range "0" "9"))(re.union (re.++ (re.range "2" "2") (re.union (re.range "\u{00}" "1") (re.range "3" "\u{ff}")))(re.union (re.++ (re.union (re.range "\u{00}" "1") (re.range "3" "\u{ff}")) (re.range "2" "2"))(re.union (re.++ (re.range "3" "3") (re.union (re.range "\u{00}" "2") (re.range "4" "\u{ff}")))(re.union (re.++ (re.union (re.range "\u{00}" "2") (re.range "4" "\u{ff}")) (re.range "3" "3"))(re.union (re.++ (re.range "4" "4") (re.union (re.range "\u{00}" "3") (re.range "5" "\u{ff}")))(re.union (re.++ (re.union (re.range "\u{00}" "3") (re.range "5" "\u{ff}")) (re.range "4" "4"))(re.union (re.++ (re.range "5" "5") (re.union (re.range "\u{00}" "4") (re.range "6" "\u{ff}")))(re.union (re.++ (re.union (re.range "\u{00}" "4") (re.range "6" "\u{ff}")) (re.range "5" "5"))(re.union (re.++ (re.range "6" "6") (re.union (re.range "\u{00}" "5") (re.range "7" "\u{ff}")))(re.union (re.++ (re.union (re.range "\u{00}" "5") (re.range "7" "\u{ff}")) (re.range "6" "6"))(re.union (re.++ (re.range "7" "7") (re.union (re.range "\u{00}" "6") (re.range "8" "\u{ff}")))(re.union (re.++ (re.union (re.range "\u{00}" "6") (re.range "8" "\u{ff}")) (re.range "7" "7"))(re.union (re.++ (re.range "8" "8") (re.union (re.range "\u{00}" "7") (re.range "9" "\u{ff}")))(re.union (re.++ (re.union (re.range "\u{00}" "7") (re.range "9" "\u{ff}")) (re.range "8" "8")) (re.++ (re.range "9" "9") (re.range "0" "9")))))))))))))))))))) (re.++ (re.range "9" "9") (re.union (re.++ (re.range "0" "0") (re.union (re.range "\u{00}" "/") (re.range "1" "\u{ff}")))(re.union (re.++ (re.union (re.range "\u{00}" "/") (re.range "1" "\u{ff}")) (re.range "0" "0")) (re.++ (re.range "1" "9") (re.range "1" "9")))))))(re.++ (re.opt (re.range "-" "-"))(re.++ ((_ re.loop 3 3) (re.range "0" "9"))(re.++ (re.opt (re.range "-" "-"))(re.++ ((_ re.loop 4 4) (re.range "0" "9")) (str.to_re ""))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "2" (str.++ "7" (str.++ "4" (str.++ "2" (str.++ "6" (str.++ "2" (str.++ "0" (str.++ "2" (str.++ "5" (str.++ "6" (str.++ "7" ""))))))))))))

(define-fun Witness2 () String (str.++ "+" (str.++ "2" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "7" (str.++ "9" (str.++ "1" (str.++ "-" (str.++ "8" (str.++ "8" (str.++ "8" (str.++ "3" ""))))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.union (str.to_re (str.++ "+" (str.++ "2" (str.++ "7" ""))))(re.union (str.to_re (str.++ "2" (str.++ "7" ""))) (re.range "0" "0")))(re.++ ((_ re.loop 2 2) (re.range "0" "9"))(re.++ (re.opt (re.range "-" "-"))(re.++ ((_ re.loop 3 3) (re.range "0" "9"))(re.++ (re.opt (re.range "-" "-"))(re.++ ((_ re.loop 4 4) (re.range "0" "9")) (str.to_re ""))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "h" (str.++ "t" (str.++ "t" (str.++ "p" (str.++ ":" (str.++ "/" (str.++ "/" (str.++ "-" (str.++ "c" (str.++ "." (str.++ "-" (str.++ "." (str.++ "E" (str.++ "U" (str.++ "R" (str.++ "/" (str.++ "\u{f2}" ""))))))))))))))))))

(define-fun Witness2 () String (str.++ "h" (str.++ "t" (str.++ "t" (str.++ "p" (str.++ ":" (str.++ "/" (str.++ "/" (str.++ "h" (str.++ "." (str.++ "a" (str.++ "t" (str.++ "/" (str.++ "\u{ae}" (str.++ "\u{c5}" (str.++ ":" ""))))))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (str.to_re (str.++ "h" (str.++ "t" (str.++ "t" (str.++ "p" "")))))(re.++ (re.opt (re.range "s" "s"))(re.++ (str.to_re (str.++ ":" (str.++ "/" (str.++ "/" ""))))(re.++ (re.* (re.++ (re.+ (re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z"))))) (re.range "." ".")))(re.++ (re.union ((_ re.loop 3 61) (re.union (re.range "A" "Z") (re.range "a" "z"))) (re.++ (re.+ (re.union (re.range "A" "Z") (re.range "a" "z")))(re.++ (re.range "." ".") ((_ re.loop 2 2) (re.union (re.range "A" "Z") (re.range "a" "z"))))))(re.++ (re.range "/" "/")(re.++ (re.* (re.union (re.range "\u{00}" "\u{09}") (re.range "\u{0b}" "\u{ff}"))) (str.to_re "")))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "1" (str.++ "8" (str.++ "." (str.++ "8" (str.++ "2" ""))))))

(define-fun Witness2 () String (str.++ "2" (str.++ "." (str.++ "9" (str.++ "7" "")))))

(assert (= regexA (re.union (re.++ (str.to_re "")(re.++ (str.to_re (str.++ "N" (str.++ "/" (str.++ "A" "")))) (str.to_re "")))(re.union (re.++ (str.to_re "")(re.++ (re.opt (re.range "-" "-"))(re.++ (re.+ (re.range "0" "9"))(re.++ (re.opt (re.++ (re.range "." ".") ((_ re.loop 0 3) (re.range "0" "9")))) (str.to_re ""))))) (re.++ (str.to_re "")(re.++ (re.opt (re.range "-" "-"))(re.++ (re.union (re.++ ((_ re.loop 1 3) (re.range "0" "9"))(re.++ (re.range "," ",")(re.++ (re.* (re.++ ((_ re.loop 3 3) (re.range "0" "9")) (re.range "," ",")))(re.++ ((_ re.loop 3 3) (re.range "0" "9")) (re.opt (re.++ (re.range "." ".") ((_ re.loop 1 3) (re.range "0" "9")))))))) (re.++ ((_ re.loop 1 3) (re.range "0" "9")) (re.opt (re.++ (re.range "." ".") ((_ re.loop 1 3) (re.range "0" "9")))))) (str.to_re ""))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "8" (str.++ "9" (str.++ "0" ""))))

(define-fun Witness2 () String (str.++ "7" (str.++ "0" "")))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.range "0" "9")(re.++ (re.* (re.union (re.range "," ",") (re.range "0" "9")))(re.++ (re.range "0" "9") (str.to_re "")))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "+" (str.++ "9" (str.++ "0" (str.++ "9" (str.++ "1" ""))))))

(define-fun Witness2 () String (str.++ "+" (str.++ "5" (str.++ "." (str.++ "9" (str.++ "3" ""))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.opt (re.union (re.range "+" "+") (re.range "-" "-")))(re.++ (re.+ (re.range "0" "9"))(re.++ (re.opt (re.++ (re.range "." ".") ((_ re.loop 2 2) (re.range "0" "9")))) (str.to_re "")))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "9" (str.++ "1" (str.++ "," (str.++ "0" (str.++ "0" ""))))))

(define-fun Witness2 () String (str.++ "2" (str.++ "," (str.++ "0" ""))))

(assert (= regexA (re.++ (str.to_re "")(re.++ ((_ re.loop 1 2) (re.range "0" "9"))(re.++ (re.opt (re.union (re.range "," ",")(re.union (str.to_re (str.++ "," (str.++ "2" (str.++ "5" ""))))(re.union (str.to_re (str.++ "," (str.++ "5" (str.++ "0" ""))))(re.union (str.to_re (str.++ "," (str.++ "5" "")))(re.union (str.to_re (str.++ "," (str.++ "7" (str.++ "5" ""))))(re.union (str.to_re (str.++ "," (str.++ "0" ""))) (str.to_re (str.++ "," (str.++ "0" (str.++ "0" ""))))))))))) (str.to_re ""))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "+" (str.++ "8" (str.++ "." (str.++ "9" (str.++ "." (str.++ "5" "")))))))

(define-fun Witness2 () String (str.++ "+" (str.++ "9" (str.++ "9" (str.++ "8" (str.++ "." (str.++ "9" (str.++ "9" (str.++ "." (str.++ "9" (str.++ "2" (str.++ "5" ""))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.range "+" "+")(re.++ ((_ re.loop 1 3) (re.range "0" "9"))(re.++ (re.range "." ".")(re.++ (re.+ (re.range "0" "9"))(re.++ (re.range "." ".")(re.++ (re.+ (re.range "0" "9")) (str.to_re ""))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "N" (str.++ "1" (str.++ "9" (str.++ "." (str.++ "3" (str.++ "9" (str.++ "." (str.++ "5" (str.++ "8" (str.++ " " (str.++ "W" (str.++ "0" (str.++ "0" (str.++ "8" (str.++ "." (str.++ "0" (str.++ "4" (str.++ "." (str.++ "5" (str.++ "3" "")))))))))))))))))))))

(define-fun Witness2 () String (str.++ "N" (str.++ "9" (str.++ "0" (str.++ "." (str.++ "0" (str.++ "0" (str.++ "." (str.++ "0" (str.++ "0" (str.++ " " (str.++ "E" (str.++ "1" (str.++ "8" (str.++ "0" (str.++ "." (str.++ "0" (str.++ "0" (str.++ "." (str.++ "0" (str.++ "0" "")))))))))))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.union (re.range "N" "N") (re.range "S" "S"))(re.++ (re.union (re.++ (re.range "0" "8")(re.++ (re.range "0" "9") ((_ re.loop 2 2) (re.++ (re.range "." ".")(re.++ (re.range "0" "5") (re.range "0" "9")))))) (re.++ (str.to_re (str.++ "9" (str.++ "0" ""))) ((_ re.loop 2 2) (str.to_re (str.++ "." (str.++ "0" (str.++ "0" "")))))))(re.++ (re.range " " " ")(re.++ (re.union (re.range "E" "E") (re.range "W" "W"))(re.++ (re.union (re.++ (re.union (re.++ (re.range "0" "0")(re.++ (re.range "0" "9") (re.range "0" "9"))) (re.++ (re.range "1" "1")(re.++ (re.range "0" "7") (re.range "0" "9")))) ((_ re.loop 2 2) (re.++ (re.range "." ".")(re.++ (re.range "0" "5") (re.range "0" "9"))))) (re.++ (str.to_re (str.++ "1" (str.++ "8" (str.++ "0" "")))) ((_ re.loop 2 2) (str.to_re (str.++ "." (str.++ "0" (str.++ "0" ""))))))) (str.to_re "")))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "3" (str.++ "." "")))

(define-fun Witness2 () String (str.++ "1" (str.++ "3" (str.++ "3" (str.++ "." (str.++ "5" ""))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.union (re.++ (str.to_re (str.++ "1" (str.++ "7" (str.++ "2" (str.++ "." (str.++ "1" "")))))) (re.range "6" "9"))(re.union (re.++ (re.range "2" "2") (re.range "0" "9"))(re.union (re.++ (re.range "3" "3") (re.union (re.range "." ".")(re.union (re.range "0" "9")(re.union (re.range "[" "[") (re.range "|" "|")))))(re.union (re.++ (re.range "1" "9") (re.range "0" "9"))(re.union (re.++ (re.range "1" "2")(re.++ (re.range "0" "5")(re.++ (re.range "0" "5")(re.++ (re.range "." ".") (re.range "0" "9")))))(re.union (re.++ (re.range "1" "9") (re.range "0" "9")) (re.++ (re.range "1" "2")(re.++ (re.range "0" "5") (re.range "0" "5"))))))))) (str.to_re "")))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "$" (str.++ "8" (str.++ ":" (str.++ "y" (str.++ "$" ""))))))

(define-fun Witness2 () String (str.++ "$" (str.++ "M" (str.++ "H" (str.++ ":" (str.++ "$" ""))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.opt (re.range "$" "$"))(re.++ ((_ re.loop 0 2) (re.union (re.range "A" "Z") (re.range "a" "z")))(re.++ (re.opt (re.range "$" "$"))(re.++ ((_ re.loop 0 5) (re.range "0" "9"))(re.++ (re.opt (re.range ":" ":"))(re.++ (re.opt (re.range "$" "$"))(re.++ ((_ re.loop 0 2) (re.union (re.range "A" "Z") (re.range "a" "z")))(re.++ (re.opt (re.range "$" "$"))(re.++ ((_ re.loop 0 5) (re.range "0" "9")) (str.to_re "")))))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "R" (str.++ "e" (str.++ "m" (str.++ "o" (str.++ "v" (str.++ "e" (str.++ "d" ""))))))))

(define-fun Witness2 () String (str.++ "R" (str.++ "e" (str.++ "m" (str.++ "o" (str.++ "v" (str.++ "e" (str.++ "d" ""))))))))

(assert (= regexA (str.to_re (str.++ "R" (str.++ "e" (str.++ "m" (str.++ "o" (str.++ "v" (str.++ "e" (str.++ "d" ""))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "1" (str.++ "9" (str.++ "6" (str.++ "8" (str.++ "q" (str.++ "z" "")))))))

(define-fun Witness2 () String (str.++ "9" (str.++ "8" (str.++ "6" (str.++ "9" (str.++ "A" (str.++ "y" "")))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ ((_ re.loop 4 4) (re.range "0" "9"))(re.++ (re.opt (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ ((_ re.loop 2 2) (re.union (re.range "A" "Z") (re.range "a" "z"))) (str.to_re "")))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "+" (str.++ "9" (str.++ "7" (str.++ "2" (str.++ "0" (str.++ "2" (str.++ "3" (str.++ "8" (str.++ "2" (str.++ "9" (str.++ "1" (str.++ "5" (str.++ "4" ""))))))))))))))

(define-fun Witness2 () String (str.++ "9" (str.++ "7" (str.++ "2" (str.++ "8" (str.++ "-" (str.++ "8" (str.++ "9" (str.++ "8" (str.++ "9" (str.++ "8" (str.++ "3" (str.++ "4" "")))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.opt (re.range "+" "+"))(re.++ (str.to_re (str.++ "9" (str.++ "7" (str.++ "2" ""))))(re.++ (re.opt (re.range "-" "-"))(re.++ (re.opt (re.range "0" "0"))(re.++ (re.union (re.range "2" "4") (re.range "8" "9"))(re.++ (re.opt (re.range "-" "-"))(re.++ (re.range "1" "9")(re.++ ((_ re.loop 6 6) (re.range "0" "9")) (str.to_re ""))))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "6" (str.++ "3" "")))

(define-fun Witness2 () String (str.++ "-" (str.++ "7" "")))

(assert (= regexA (re.union (re.++ (str.to_re "")(re.++ (re.range "0" "0") (str.to_re ""))) (re.++ (str.to_re "")(re.++ (re.opt (re.range "-" "-"))(re.++ (re.range "1" "9")(re.++ (re.* (re.range "0" "9")) (str.to_re ""))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "c" (str.++ "\u{0b}" (str.++ " " (str.++ "\u{85}" "")))))

(define-fun Witness2 () String (str.++ "\u{a0}" ""))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (re.+ (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "&" "&")(re.union (re.range "," "9")(re.union (re.range ";" ";")(re.union (re.range "A" "Z")(re.union (re.range "a" "z")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))))))))(re.++ (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))) (str.to_re "")))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "-" (str.++ "(" (str.++ "2" (str.++ "6" (str.++ "9" (str.++ "8" (str.++ "5" (str.++ "9" (str.++ "0" (str.++ "2" (str.++ "8" (str.++ "8" "")))))))))))))

(define-fun Witness2 () String (str.++ "1" (str.++ "4" (str.++ "2" (str.++ "3" (str.++ "8" (str.++ "5" (str.++ "9" (str.++ "6" (str.++ "6" (str.++ "7" (str.++ "6" ""))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.opt (re.range "1" "1"))(re.++ (re.union (re.range "-" "-") (re.opt (re.range " " " ")))(re.++ (re.opt (re.range "(" "("))(re.++ ((_ re.loop 3 3) (re.range "0" "9"))(re.++ (re.opt (re.union (re.union (re.range " " " ")(re.union (re.range ")" ")") (re.range "-" "-")))(re.union (str.to_re (str.++ ")" (str.++ "-" ""))) (str.to_re (str.++ ")" (str.++ " " ""))))))(re.++ ((_ re.loop 3 3) (re.range "0" "9"))(re.++ (re.opt (re.union (re.range " " " ") (re.range "-" "-")))(re.++ (re.union ((_ re.loop 4 4) (re.range "0" "9")) ((_ re.loop 4 4) (re.range "0" "9"))) (str.to_re ""))))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "h" (str.++ "t" (str.++ "t" (str.++ "p" (str.++ "s" (str.++ ":" (str.++ "/" (str.++ "/" (str.++ "8" (str.++ "5" (str.++ "-" (str.++ "0" (str.++ "." (str.++ "P" (str.++ "g" ""))))))))))))))))

(define-fun Witness2 () String (str.++ "h" (str.++ "t" (str.++ "t" (str.++ "p" (str.++ "s" (str.++ ":" (str.++ "/" (str.++ "/" (str.++ "U" (str.++ "." (str.++ "z" (str.++ "o" (str.++ "z" (str.++ "U" (str.++ "a" (str.++ ":" (str.++ "4" (str.++ "1" "")))))))))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.++ (re.union (str.to_re (str.++ "h" (str.++ "t" ""))) (re.range "f" "f"))(re.++ (str.to_re (str.++ "t" (str.++ "p" ""))) (re.opt (re.range "s" "s"))))(re.++ (str.to_re (str.++ ":" (str.++ "/" (str.++ "/" ""))))(re.++ (re.+ (re.++ (re.+ (re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z"))))) (re.range "." ".")))(re.++ ((_ re.loop 2 6) (re.union (re.range "A" "Z") (re.range "a" "z")))(re.++ (re.opt (re.++ (re.range ":" ":") (re.+ (re.range "0" "9"))))(re.++ (re.opt (re.++ (re.range "/" "/") (re.* (re.union (re.range "\u{00}" "\u{08}")(re.union (re.range "\u{0e}" "\u{1f}")(re.union (re.range "!" "\u{84}")(re.union (re.range "\u{86}" "\u{9f}") (re.range "\u{a1}" "\u{ff}")))))))) (str.to_re ""))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "\u{bb}" (str.++ "D" (str.++ "z" (str.++ "N" (str.++ "k" (str.++ "z" (str.++ "t" (str.++ "K" (str.++ "s" (str.++ "H" (str.++ "s" (str.++ "\u{b1}" (str.++ "1" (str.++ "9" (str.++ "9" ""))))))))))))))))

(define-fun Witness2 () String (str.++ "6" (str.++ ":" (str.++ "\u{a8}" (str.++ "\u{a4}" (str.++ "W" (str.++ "\u{f7}" (str.++ "\u{a7}" ""))))))))

(assert (= regexA (re.union (re.++ (str.to_re "") (re.++ (re.++ (re.+ (re.union (re.range "A" "Z") (re.range "a" "z"))) (re.* (re.union (re.range "\u{00}" "/") (re.range ":" "\u{ff}"))))(re.++ (re.++ (re.+ (re.range "0" "9")) (re.* (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))) (re.++ (re.+ (re.union (re.range "\u{00}" "/")(re.union (re.range ":" "@")(re.union (re.range "[" "^")(re.union (re.range "`" "`")(re.union (re.range "{" "\u{a9}")(re.union (re.range "\u{ab}" "\u{b4}")(re.union (re.range "\u{b6}" "\u{b9}")(re.union (re.range "\u{bb}" "\u{bf}")(re.union (re.range "\u{d7}" "\u{d7}") (re.range "\u{f7}" "\u{f7}"))))))))))) (re.* (re.union (re.range "\u{00}" "^")(re.union (re.range "`" "\u{a9}")(re.union (re.range "\u{ab}" "\u{b4}")(re.union (re.range "\u{b6}" "\u{b9}")(re.union (re.range "\u{bb}" "\u{bf}")(re.union (re.range "\u{d7}" "\u{d7}") (re.range "\u{f7}" "\u{f7}"))))))))))))(re.union (re.++ (re.++ (re.+ (re.union (re.range "A" "Z") (re.range "a" "z"))) (re.* (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))))(re.++ (re.++ (re.+ (re.union (re.range "\u{00}" "/")(re.union (re.range ":" "@")(re.union (re.range "[" "^")(re.union (re.range "`" "`")(re.union (re.range "{" "\u{a9}")(re.union (re.range "\u{ab}" "\u{b4}")(re.union (re.range "\u{b6}" "\u{b9}")(re.union (re.range "\u{bb}" "\u{bf}")(re.union (re.range "\u{d7}" "\u{d7}") (re.range "\u{f7}" "\u{f7}"))))))))))) (re.* (re.union (re.range "\u{00}" "/") (re.range ":" "\u{ff}")))) (re.++ (re.+ (re.range "0" "9")) (re.* (re.union (re.range "\u{00}" "^")(re.union (re.range "`" "\u{a9}")(re.union (re.range "\u{ab}" "\u{b4}")(re.union (re.range "\u{b6}" "\u{b9}")(re.union (re.range "\u{bb}" "\u{bf}")(re.union (re.range "\u{d7}" "\u{d7}") (re.range "\u{f7}" "\u{f7}")))))))))))(re.union (re.++ (re.++ (re.+ (re.union (re.range "\u{00}" "/")(re.union (re.range ":" "@")(re.union (re.range "[" "^")(re.union (re.range "`" "`")(re.union (re.range "{" "\u{a9}")(re.union (re.range "\u{ab}" "\u{b4}")(re.union (re.range "\u{b6}" "\u{b9}")(re.union (re.range "\u{bb}" "\u{bf}")(re.union (re.range "\u{d7}" "\u{d7}") (re.range "\u{f7}" "\u{f7}"))))))))))) (re.* (re.union (re.range "\u{00}" "@")(re.union (re.range "[" "`") (re.range "{" "\u{ff}")))))(re.++ (re.++ (re.+ (re.union (re.range "A" "Z") (re.range "a" "z"))) (re.* (re.union (re.range "\u{00}" "/") (re.range ":" "\u{ff}")))) (re.++ (re.+ (re.range "0" "9")) (re.* (re.union (re.range "\u{00}" "^")(re.union (re.range "`" "\u{a9}")(re.union (re.range "\u{ab}" "\u{b4}")(re.union (re.range "\u{b6}" "\u{b9}")(re.union (re.range "\u{bb}" "\u{bf}")(re.union (re.range "\u{d7}" "\u{d7}") (re.range "\u{f7}" "\u{f7}")))))))))))(re.union (re.++ (re.++ (re.+ (re.union (re.range "\u{00}" "/")(re.union (re.range ":" "@")(re.union (re.range "[" "^")(re.union (re.range "`" "`")(re.union (re.range "{" "\u{a9}")(re.union (re.range "\u{ab}" "\u{b4}")(re.union (re.range "\u{b6}" "\u{b9}")(re.union (re.range "\u{bb}" "\u{bf}")(re.union (re.range "\u{d7}" "\u{d7}") (re.range "\u{f7}" "\u{f7}"))))))))))) (re.* (re.union (re.range "\u{00}" "/") (re.range ":" "\u{ff}"))))(re.++ (re.++ (re.+ (re.range "0" "9")) (re.* (re.union (re.range "\u{00}" "@")(re.union (re.range "[" "`") (re.range "{" "\u{ff}"))))) (re.++ (re.+ (re.union (re.range "A" "Z") (re.range "a" "z"))) (re.* (re.union (re.range "\u{00}" "^")(re.union (re.range "`" "\u{a9}")(re.union (re.range "\u{ab}" "\u{b4}")(re.union (re.range "\u{b6}" "\u{b9}")(re.union (re.range "\u{bb}" "\u{bf}")(re.union (re.range "\u{d7}" "\u{d7}") (re.range "\u{f7}" "\u{f7}")))))))))))(re.union (re.++ (re.++ (re.+ (re.range "0" "9")) (re.* (re.union (re.range "\u{00}" "@")(re.union (re.range "[" "`") (re.range "{" "\u{ff}")))))(re.++ (re.++ (re.+ (re.union (re.range "A" "Z") (re.range "a" "z"))) (re.* (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))) (re.++ (re.+ (re.union (re.range "\u{00}" "/")(re.union (re.range ":" "@")(re.union (re.range "[" "^")(re.union (re.range "`" "`")(re.union (re.range "{" "\u{a9}")(re.union (re.range "\u{ab}" "\u{b4}")(re.union (re.range "\u{b6}" "\u{b9}")(re.union (re.range "\u{bb}" "\u{bf}")(re.union (re.range "\u{d7}" "\u{d7}") (re.range "\u{f7}" "\u{f7}"))))))))))) (re.* (re.union (re.range "\u{00}" "^")(re.union (re.range "`" "\u{a9}")(re.union (re.range "\u{ab}" "\u{b4}")(re.union (re.range "\u{b6}" "\u{b9}")(re.union (re.range "\u{bb}" "\u{bf}")(re.union (re.range "\u{d7}" "\u{d7}") (re.range "\u{f7}" "\u{f7}"))))))))))) (re.++ (re.++ (re.++ (re.+ (re.range "0" "9")) (re.* (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))))(re.++ (re.++ (re.+ (re.union (re.range "\u{00}" "/")(re.union (re.range ":" "@")(re.union (re.range "[" "^")(re.union (re.range "`" "`")(re.union (re.range "{" "\u{a9}")(re.union (re.range "\u{ab}" "\u{b4}")(re.union (re.range "\u{b6}" "\u{b9}")(re.union (re.range "\u{bb}" "\u{bf}")(re.union (re.range "\u{d7}" "\u{d7}") (re.range "\u{f7}" "\u{f7}"))))))))))) (re.* (re.union (re.range "\u{00}" "@")(re.union (re.range "[" "`") (re.range "{" "\u{ff}"))))) (re.++ (re.+ (re.union (re.range "A" "Z") (re.range "a" "z"))) (re.* (re.union (re.range "\u{00}" "^")(re.union (re.range "`" "\u{a9}")(re.union (re.range "\u{ab}" "\u{b4}")(re.union (re.range "\u{b6}" "\u{b9}")(re.union (re.range "\u{bb}" "\u{bf}")(re.union (re.range "\u{d7}" "\u{d7}") (re.range "\u{f7}" "\u{f7}"))))))))))) (str.to_re "")))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "\u{d3}" (str.++ "\u{04}" (str.++ "}" (str.++ "\u{91}" (str.++ "|" (str.++ "|" (str.++ "|" (str.++ "|" (str.++ "|" (str.++ "|" (str.++ "|" ""))))))))))))

(define-fun Witness2 () String (str.++ "%" (str.++ "\u{1b}" (str.++ "\u{d3}" (str.++ "|" (str.++ "\u{98}" (str.++ "c" (str.++ "\u{04}" ""))))))))

(assert (= regexA (re.++ (re.+ (re.* (re.union (re.range "\u{00}" "\u{08}")(re.union (re.range "\u{0e}" "\u{1f}")(re.union (re.range "!" "\u{84}")(re.union (re.range "\u{86}" "\u{9f}") (re.range "\u{a1}" "\u{ff}")))))))(re.++ (re.+ (re.range "|" "|")) (re.* (re.union (re.range "\u{00}" "\u{08}")(re.union (re.range "\u{0e}" "\u{1f}")(re.union (re.range "!" "\u{84}")(re.union (re.range "\u{86}" "\u{9f}") (re.range "\u{a1}" "\u{ff}"))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "\u{85}" (str.++ "R" "")))

(define-fun Witness2 () String (str.++ "\u{a0}" (str.++ "\u{85}" (str.++ "\u{85}" (str.++ " " (str.++ "\u{a0}" ""))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.++ ((_ re.loop 2 2) (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "A" "z")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))) (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "A" "z")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))))) (str.to_re "")))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "H" (str.++ "C" (str.++ "9" (str.++ "6" (str.++ "2" (str.++ "8" (str.++ "4" (str.++ "9" (str.++ "A" ""))))))))))

(define-fun Witness2 () String (str.++ "F" (str.++ "E" (str.++ "9" (str.++ "8" (str.++ "0" (str.++ "7" (str.++ "8" (str.++ "3" (str.++ "M" ""))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ ((_ re.loop 2 2) (re.range "A" "Z"))(re.++ ((_ re.loop 6 6) (re.range "0" "9"))(re.++ (re.union (re.range "A" "D")(re.union (re.range "F" "F") (re.range "M" "M"))) (str.to_re "")))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "h" (str.++ "t" (str.++ "t" (str.++ "p" (str.++ "s" (str.++ ":" (str.++ "/" (str.++ "/" (str.++ "f" (str.++ "." (str.++ "K" ""))))))))))))

(define-fun Witness2 () String (str.++ "f" (str.++ "t" (str.++ "p" (str.++ ":" (str.++ "/" (str.++ "/" (str.++ "P" (str.++ "N" (str.++ "z" (str.++ "Z" (str.++ "-" (str.++ "s" (str.++ "-" (str.++ "Q" (str.++ "." (str.++ "D" (str.++ "." (str.++ "y" (str.++ "." (str.++ ";" (str.++ "f" (str.++ "\u{aa}" "")))))))))))))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.union (str.to_re (str.++ "h" (str.++ "t" ""))) (re.range "f" "f"))(re.++ (str.to_re (str.++ "t" (str.++ "p" "")))(re.++ (re.opt (re.range "s" "s"))(re.++ (str.to_re (str.++ ":" (str.++ "/" (str.++ "/" ""))))(re.++ (re.union (re.++ (re.+ (re.union (re.range "-" ".")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_") (re.range "a" "z")))))) (re.+ (re.++ (re.range "." ".") (re.+ (re.union (re.range "-" ".")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_") (re.range "a" "z"))))))))) (str.to_re (str.++ "l" (str.++ "o" (str.++ "c" (str.++ "a" (str.++ "l" (str.++ "h" (str.++ "o" (str.++ "s" (str.++ "t" "")))))))))))(re.++ (re.opt (re.range "/" "/"))(re.++ (re.opt (re.* (re.union (re.range "#" "'")(re.union (re.range "+" "9")(re.union (re.range ";" ";")(re.union (re.range "?" "?")(re.union (re.range "A" "Z")(re.union (re.range "\u{5c}" "\u{5c}")(re.union (re.range "_" "_") (re.range "a" "z"))))))))))(re.++ (re.* (re.union (re.range "%" "'")(re.union (re.range "+" ";")(re.union (re.range "=" "=")(re.union (re.range "?" "?")(re.union (re.range "A" "Z")(re.union (re.range "\u{5c}" "\u{5c}")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "|" "|")(re.union (re.range "~" "~")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))))))))) (str.to_re ""))))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "0" (str.++ "\u{0d}" (str.++ "\u{0a}" (str.++ "\u{09}" (str.++ "8" (str.++ "\u{0c}" (str.++ "\u{a0}" (str.++ "3" (str.++ "\u{09}" (str.++ "\u{a0}" (str.++ "\u{0c}" ""))))))))))))

(define-fun Witness2 () String (str.++ "0" (str.++ "0" (str.++ "7" (str.++ "4" (str.++ "8" (str.++ "9" (str.++ "4" (str.++ "9" (str.++ "6" (str.++ "0" (str.++ "4" (str.++ "9" (str.++ "7" ""))))))))))))))

(assert (= regexA (re.++ (re.union (re.++ (str.to_re "")(re.++ (re.range "+" "+") ((_ re.loop 2 2) (re.range "0" "9"))))(re.union (re.++ (str.to_re "")(re.++ (re.range "+" "+")(re.++ ((_ re.loop 2 2) (re.range "0" "9")) (str.to_re (str.++ "(" (str.++ "0" (str.++ ")" "")))))))(re.union (re.++ (str.to_re "")(re.++ (str.to_re (str.++ "(" (str.++ "+" "")))(re.++ ((_ re.loop 2 2) (re.range "0" "9")) (str.to_re (str.++ ")" (str.++ "(" (str.++ "0" (str.++ ")" ""))))))))(re.union (re.++ (str.to_re "")(re.++ (str.to_re (str.++ "0" (str.++ "0" ""))) ((_ re.loop 2 2) (re.range "0" "9")))) (re.++ (str.to_re "") (re.range "0" "0")))))) (re.union (re.++ ((_ re.loop 9 9) (re.range "0" "9")) (str.to_re "")) (re.++ ((_ re.loop 10 10) (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))))) (str.to_re ""))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "\u{85}" (str.++ "-" (str.++ "3" (str.++ "0" (str.++ "." (str.++ "2" (str.++ "2" (str.++ ":" (str.++ "0" (str.++ ":" (str.++ "2" (str.++ "6" (str.++ "." (str.++ "9" (str.++ "\u{85}" (str.++ "\u{85}" "")))))))))))))))))

(define-fun Witness2 () String (str.++ "4" (str.++ ":" (str.++ "5" (str.++ ":" (str.++ "4" (str.++ "0" (str.++ "." (str.++ "8" (str.++ " " ""))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (re.opt (re.range "-" "-"))(re.++ (re.opt (re.++ (re.* (re.range "0" "9")) (re.range "." ".")))(re.++ (re.opt (re.range "0" "2"))(re.++ (re.range "0" "9")(re.++ (re.range ":" ":")(re.++ (re.opt (re.range "0" "5"))(re.++ (re.range "0" "9")(re.++ (re.range ":" ":")(re.++ (re.opt (re.range "0" "5"))(re.++ (re.range "0" "9")(re.++ (re.opt (re.++ (re.range "." ".") ((_ re.loop 1 7) (re.range "0" "9"))))(re.++ (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))) (str.to_re "")))))))))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "A" (str.++ "Z" (str.++ "\u{90}" (str.++ "8" (str.++ "6" (str.++ "6" (str.++ "9" ""))))))))

(define-fun Witness2 () String (str.++ "A" (str.++ "Z" (str.++ "\u{03}" (str.++ "8" (str.++ "1" (str.++ "8" (str.++ "8" ""))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (str.to_re (str.++ "A" (str.++ "Z" "")))(re.++ (re.opt (re.union (re.range "\u{00}" "\u{09}") (re.range "\u{0b}" "\u{ff}")))(re.++ ((_ re.loop 4 4) (re.range "0" "9")) (str.to_re "")))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "0" (str.++ "5" (str.++ "1" (str.++ "2" (str.++ "9" (str.++ "8" (str.++ "-" (str.++ "7" (str.++ "9" (str.++ "9" (str.++ "8" ""))))))))))))

(define-fun Witness2 () String (str.++ "1" (str.++ "9" (str.++ "1" (str.++ "1" (str.++ "9" (str.++ "8" (str.++ "-" (str.++ "9" (str.++ "4" (str.++ "9" (str.++ "5" ""))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.++ (re.union (re.++ (re.union (re.++ (re.range "0" "0") (re.range "1" "9"))(re.union (re.++ (re.range "1" "2") (re.range "0" "9")) (re.++ (re.range "3" "3") (re.range "0" "1"))))(re.++ (re.union (re.++ (re.range "0" "0") (re.union (re.range "1" "1")(re.union (re.range "3" "3")(re.union (re.range "5" "5") (re.range "7" "8")))))(re.union (str.to_re (str.++ "1" (str.++ "0" ""))) (str.to_re (str.++ "1" (str.++ "2" ""))))) ((_ re.loop 2 2) (re.range "0" "9"))))(re.union (re.++ (re.union (re.++ (re.range "0" "0") (re.range "1" "9"))(re.union (re.++ (re.range "1" "2") (re.range "0" "9")) (str.to_re (str.++ "3" (str.++ "0" "")))))(re.++ (re.union (re.++ (re.range "0" "0") (re.union (re.range "4" "4")(re.union (re.range "6" "6") (re.range "9" "9")))) (str.to_re (str.++ "1" (str.++ "1" "")))) ((_ re.loop 2 2) (re.range "0" "9"))))(re.union (re.++ (re.union (re.++ (re.range "0" "0") (re.range "1" "9"))(re.union (re.++ (re.range "1" "1") (re.range "0" "9")) (re.++ (re.range "2" "2") (re.range "0" "8"))))(re.++ (str.to_re (str.++ "0" (str.++ "2" ""))) ((_ re.loop 2 2) (re.range "0" "9"))))(re.union (re.++ (str.to_re (str.++ "2" (str.++ "9" "")))(re.++ (str.to_re (str.++ "0" (str.++ "2" ""))) (str.to_re (str.++ "0" (str.++ "0" "")))))(re.union (re.++ (str.to_re (str.++ "2" (str.++ "9" "")))(re.++ (str.to_re (str.++ "0" (str.++ "2" ""))) (re.++ (re.union (re.range "2" "2")(re.union (re.range "4" "4")(re.union (re.range "6" "6") (re.range "8" "8")))) (re.union (re.range "0" "0")(re.union (re.range "4" "4") (re.range "8" "8")))))) (re.++ (str.to_re (str.++ "2" (str.++ "9" "")))(re.++ (str.to_re (str.++ "0" (str.++ "2" ""))) (re.++ (re.union (re.range "1" "1")(re.union (re.range "3" "3")(re.union (re.range "5" "5")(re.union (re.range "7" "7") (re.range "9" "9"))))) (re.union (re.range "2" "2") (re.range "6" "6"))))))))))(re.++ (re.range "-" "-") ((_ re.loop 4 4) (re.range "0" "9")))) (str.to_re "")))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "p" (str.++ "." "")))

(define-fun Witness2 () String (str.++ "/" (str.++ "j" "")))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.opt (re.union (re.* (re.++ (str.to_re (str.++ "." (str.++ "." ""))) (re.range "/" "/"))) (re.range "/" "/")))(re.++ (re.* (re.++ (re.* (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))) (re.range "/" "/")))(re.++ (re.+ (re.* (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))))(re.++ (re.+ (re.union (re.range "." ".")(re.union (re.range "f" "g")(re.union (re.range "i" "j") (re.range "p" "p"))))) (str.to_re ""))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "0" (str.++ "8" (str.++ "9" (str.++ "9" (str.++ " " (str.++ "8" (str.++ "7" (str.++ "8" (str.++ "0" (str.++ "9" (str.++ "0" ""))))))))))))

(define-fun Witness2 () String (str.++ "2" (str.++ "8" (str.++ "9" (str.++ " " (str.++ "0" (str.++ "8" (str.++ "9" (str.++ "5" (str.++ "8" (str.++ "9" "")))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.++ (re.opt (re.range "0" "0"))(re.++ (re.range "1" "9") ((_ re.loop 2 2) (re.range "0" "9"))))(re.++ (re.opt (re.range " " " "))(re.++ (re.union (re.++ ((_ re.loop 3 3) (re.range "0" "9"))(re.++ (re.opt (re.range " " " ")) ((_ re.loop 3 3) (re.range "0" "9")))) (re.++ ((_ re.loop 2 2) (re.range "0" "9"))(re.++ (re.opt (re.range " " " "))(re.++ ((_ re.loop 2 2) (re.range "0" "9"))(re.++ (re.opt (re.range " " " ")) ((_ re.loop 2 2) (re.range "0" "9"))))))) (str.to_re "")))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String "")

(define-fun Witness2 () String "")

(assert (= regexA (re.union (re.++ (str.to_re "")(re.++ (re.* (re.range "0" "9"))(re.++ (re.range " " " ")(re.++ (re.* (re.range "0" "9"))(re.++ (re.range "/" "/")(re.++ (re.* (re.range "0" "9")) (str.to_re ""))))))) (re.++ (str.to_re "")(re.++ (re.* (re.range "0" "9")) (str.to_re ""))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "8" (str.++ "s" (str.++ "." (str.++ "8" (str.++ "n" (str.++ "3" (str.++ "." (str.++ "2" (str.++ "." (str.++ "2" (str.++ "4" (str.++ "8" (str.++ "." (str.++ "2" (str.++ "5" (str.++ "3" (str.++ "." (str.++ "4" (str.++ "." (str.++ "2" (str.++ "5" (str.++ "4" "")))))))))))))))))))))))

(define-fun Witness2 () String (str.++ "8" (str.++ "z" (str.++ "2" (str.++ "." (str.++ "4" (str.++ "g" (str.++ "." (str.++ "w" (str.++ "m" (str.++ "8" (str.++ "2" (str.++ "8" "")))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.* (re.++ (re.union (re.range "0" "9") (re.range "a" "z"))(re.++ (re.* (re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))))(re.++ (re.* (re.union (re.range "0" "9") (re.range "a" "z"))) (re.range "." ".")))))(re.++ (re.union (re.++ (re.union (re.range "0" "9") (re.range "a" "z"))(re.++ (re.* (re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))))(re.++ (re.* (re.union (re.range "0" "9") (re.range "a" "z"))) (re.opt (re.++ (re.range "." ".") (re.+ (re.union (re.range "0" "9") (re.range "a" "z")))))))) (re.++ ((_ re.loop 3 3) (re.++ (re.union (re.++ (str.to_re (str.++ "2" (str.++ "5" ""))) (re.range "0" "5"))(re.union (re.++ (re.range "2" "2")(re.++ (re.range "0" "4") (re.range "0" "9"))) (re.++ (re.opt (re.range "0" "1"))(re.++ (re.range "0" "9") (re.opt (re.range "0" "9")))))) (re.range "." "."))) (re.union (re.++ (str.to_re (str.++ "2" (str.++ "5" ""))) (re.range "0" "5"))(re.union (re.++ (re.range "2" "2")(re.++ (re.range "0" "4") (re.range "0" "9"))) (re.++ (re.opt (re.range "0" "1"))(re.++ (re.range "0" "9") (re.opt (re.range "0" "9")))))))) (str.to_re ""))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "2" (str.++ "2" (str.++ ":" (str.++ "2" (str.++ "2" (str.++ ":" (str.++ "3" (str.++ "9" "")))))))))

(define-fun Witness2 () String (str.++ "1" (str.++ "9" (str.++ ":" (str.++ "5" (str.++ "9" ""))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.union (re.++ (re.range "0" "1") (re.range "0" "9"))(re.union (re.++ (re.range "2" "2") (re.range "0" "3")) (re.range "0" "9")))(re.++ (re.range ":" ":")(re.++ (re.++ (re.range "0" "5") (re.range "0" "9"))(re.++ (re.opt (re.++ (re.range ":" ":") (re.++ (re.range "0" "5") (re.range "0" "9")))) (str.to_re ""))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "w" (str.++ "y" (str.++ "8" (str.++ "Y" (str.++ " " (str.++ "8" (str.++ "U" (str.++ "e" "")))))))))

(define-fun Witness2 () String (str.++ " " (str.++ "Y" (str.++ "A" (str.++ "8" (str.++ "9" (str.++ "z" (str.++ "w" ""))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.opt (re.range " " " "))(re.++ (re.union (re.++ (re.union (re.range "B" "B")(re.union (re.range "E" "E")(re.union (re.range "G" "G")(re.union (re.range "L" "N")(re.union (re.range "S" "S")(re.union (re.range "W" "W")(re.union (re.range "b" "b")(re.union (re.range "e" "e")(re.union (re.range "g" "g")(re.union (re.range "l" "n")(re.union (re.range "s" "s") (re.range "w" "w"))))))))))))(re.++ (re.range "0" "9") (re.opt (re.range "0" "9")))) (re.union (re.++ (re.union (re.range "A" "P")(re.union (re.range "R" "U")(re.union (re.range "W" "W")(re.union (re.range "Y" "Z")(re.union (re.range "a" "p")(re.union (re.range "r" "u")(re.union (re.range "w" "w") (re.range "y" "z"))))))))(re.++ (re.union (re.range "A" "H")(re.union (re.range "K" "Y")(re.union (re.range "a" "h") (re.range "k" "y"))))(re.++ (re.range "0" "9") (re.opt (re.range "0" "9"))))) (re.union (re.++ (re.union (re.range "E" "E")(re.union (re.range "N" "N")(re.union (re.range "W" "W")(re.union (re.range "e" "e")(re.union (re.range "n" "n") (re.range "w" "w"))))))(re.++ (re.range "0" "9") (re.union (re.range "A" "H")(re.union (re.range "J" "K")(re.union (re.range "S" "U")(re.union (re.range "W" "W")(re.union (re.range "a" "h")(re.union (re.range "j" "k")(re.union (re.range "s" "u") (re.range "w" "w")))))))))) (re.++ (re.union (re.range "E" "E")(re.union (re.range "N" "N")(re.union (re.range "W" "W")(re.union (re.range "e" "e")(re.union (re.range "n" "n") (re.range "w" "w"))))))(re.++ (re.union (re.range "A" "H")(re.union (re.range "K" "Y")(re.union (re.range "a" "h") (re.range "k" "y"))))(re.++ (re.range "0" "9") (re.union (re.range "A" "B")(re.union (re.range "E" "E")(re.union (re.range "H" "H")(re.union (re.range "M" "N")(re.union (re.range "P" "P")(re.union (re.range "R" "R")(re.union (re.range "V" "Y")(re.union (re.range "a" "b")(re.union (re.range "e" "e")(re.union (re.range "h" "h")(re.union (re.range "m" "n")(re.union (re.range "p" "p")(re.union (re.range "r" "r") (re.range "v" "y"))))))))))))))))))))(re.++ (re.opt (re.range " " " "))(re.++ (re.range "0" "9")(re.++ ((_ re.loop 2 2) (re.union (re.range "A" "B")(re.union (re.range "D" "H")(re.union (re.range "J" "J")(re.union (re.range "L" "L")(re.union (re.range "N" "N")(re.union (re.range "P" "U")(re.union (re.range "W" "Z")(re.union (re.range "a" "b")(re.union (re.range "d" "h")(re.union (re.range "j" "j")(re.union (re.range "l" "l")(re.union (re.range "n" "n")(re.union (re.range "p" "u") (re.range "w" "z"))))))))))))))) (str.to_re "")))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "2" (str.++ "0" (str.++ "-" (str.++ "0" (str.++ "8" (str.++ "8" (str.++ "8" (str.++ "8" (str.++ "7" (str.++ "6" (str.++ "5" (str.++ "-" (str.++ "8" ""))))))))))))))

(define-fun Witness2 () String (str.++ "2" (str.++ "0" (str.++ "-" (str.++ "8" (str.++ "8" (str.++ "8" (str.++ "9" (str.++ "8" (str.++ "8" (str.++ "7" (str.++ "9" (str.++ "-" (str.++ "4" ""))))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.union (str.to_re (str.++ "2" (str.++ "0" "")))(re.union (str.to_re (str.++ "2" (str.++ "3" "")))(re.union (str.to_re (str.++ "2" (str.++ "7" "")))(re.union (str.to_re (str.++ "3" (str.++ "0" ""))) (str.to_re (str.++ "3" (str.++ "3" "")))))))(re.++ (re.range "-" "-")(re.++ ((_ re.loop 8 8) (re.range "0" "9"))(re.++ (re.range "-" "-")(re.++ (re.range "0" "9") (str.to_re "")))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "\u{f0}" (str.++ " " (str.++ "\u{d2}" (str.++ "I" "")))))

(define-fun Witness2 () String (str.++ "\u{fd}" (str.++ "\u{ca}" "")))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.+ (re.union (re.range " " " ")(re.union (re.range "'" "'")(re.union (re.range "A" "Z")(re.union (re.range "a" "z") (re.range "\u{c0}" "\u{ff}")))))) (str.to_re "")))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "6" (str.++ "9" (str.++ "6" (str.++ "8" (str.++ "8" (str.++ "0" (str.++ "\u{85}" (str.++ "8" (str.++ "8" (str.++ "4" (str.++ "9" ""))))))))))))

(define-fun Witness2 () String (str.++ "\u{85}" (str.++ "9" (str.++ "8" (str.++ "9" (str.++ "\u{85}" (str.++ "8" (str.++ "8" (str.++ "8" (str.++ "9" (str.++ "3" (str.++ "5" (str.++ "6" "")))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.opt (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{22}" "\u{22}")(re.union (re.range "'" "/")(re.union (re.range ":" "<")(re.union (re.range ">" ">")(re.union (re.range "[" "]")(re.union (re.range "{" "{")(re.union (re.range "}" "}")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))))))))))(re.++ ((_ re.loop 3 3) (re.range "0" "9"))(re.++ (re.opt (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{22}" "\u{22}")(re.union (re.range "'" "/")(re.union (re.range ":" "<")(re.union (re.range ">" ">")(re.union (re.range "[" "]")(re.union (re.range "{" "{")(re.union (re.range "}" "}")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))))))))))(re.++ ((_ re.loop 3 3) (re.range "0" "9"))(re.++ (re.opt (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{22}" "\u{22}")(re.union (re.range "'" "/")(re.union (re.range ":" "<")(re.union (re.range ">" ">")(re.union (re.range "[" "]")(re.union (re.range "{" "{")(re.union (re.range "}" "}")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))))))))))(re.++ ((_ re.loop 4 4) (re.range "0" "9")) (str.to_re ""))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "0" (str.++ "9" (str.++ "7" (str.++ " " (str.++ "B" (str.++ "P" (str.++ "\u{85}" (str.++ "8" (str.++ "5" (str.++ "9" "")))))))))))

(define-fun Witness2 () String (str.++ "0" (str.++ "1" (str.++ "8" (str.++ "\u{a0}" (str.++ "B" (str.++ "P" (str.++ " " (str.++ "8" (str.++ "9" (str.++ "9" "")))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.range "0" "4")(re.++ ((_ re.loop 2 2) (re.range "0" "9"))(re.++ (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))(re.++ (str.to_re (str.++ "B" (str.++ "P" "")))(re.++ (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))(re.++ ((_ re.loop 3 3) (re.range "0" "9")) (str.to_re ""))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "x" (str.++ "\u{07}" (str.++ "K" ""))))

(define-fun Witness2 () String (str.++ "\u{11}" (str.++ "7" "")))

(assert (= regexA (re.++ (str.to_re "")(re.++ ((_ re.loop 0 20) (re.union (re.range "\u{00}" "\u{09}") (re.range "\u{0b}" "\u{ff}"))) (str.to_re "")))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "#" (str.++ "a" (str.++ "2" (str.++ "8" (str.++ "0" (str.++ "8" (str.++ "8" ""))))))))

(define-fun Witness2 () String (str.++ "F" (str.++ "9" (str.++ "a" ""))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.union (re.++ (re.opt (re.range "#" "#")) (re.union ((_ re.loop 6 6) (re.union (re.range "0" "9")(re.union (re.range "A" "F") (re.range "a" "f")))) ((_ re.loop 3 3) (re.union (re.range "0" "9")(re.union (re.range "A" "F") (re.range "a" "f"))))))(re.union (re.++ (str.to_re (str.++ "r" (str.++ "g" (str.++ "b" (str.++ "(" "")))))(re.++ ((_ re.loop 2 2) (re.union (re.++ (re.range "0" "9") (re.range "," ","))(re.union (re.++ (re.range "1" "9")(re.++ (re.range "0" "9") (re.range "," ",")))(re.union (re.++ (re.range "1" "1")(re.++ ((_ re.loop 2 2) (re.range "0" "9")) (re.range "," ",")))(re.union (re.++ (re.range "2" "2")(re.++ (re.range "0" "4")(re.++ (re.range "0" "9") (re.range "," ",")))) (re.++ (str.to_re (str.++ "2" (str.++ "5" "")))(re.++ (re.range "0" "5") (re.range "," ","))))))))(re.++ (re.union (re.range "0" "9")(re.union (re.++ (re.range "1" "9") (re.range "0" "9"))(re.union (re.++ (re.range "1" "1") ((_ re.loop 2 2) (re.range "0" "9")))(re.union (re.++ (re.range "2" "2")(re.++ (re.range "0" "4") (re.range "0" "9"))) (re.++ (str.to_re (str.++ "2" (str.++ "5" ""))) (re.range "0" "5")))))) (re.range ")" ")")))) (re.++ (str.to_re (str.++ "r" (str.++ "g" (str.++ "b" (str.++ "(" "")))))(re.++ ((_ re.loop 2 2) (re.union (re.++ (re.range "0" "9") (str.to_re (str.++ "%" (str.++ "," ""))))(re.union (re.++ (re.range "1" "9")(re.++ (re.range "0" "9") (str.to_re (str.++ "%" (str.++ "," ""))))) (str.to_re (str.++ "1" (str.++ "0" (str.++ "0" (str.++ "%" (str.++ "," "")))))))))(re.++ (re.union (re.++ (re.range "0" "9") (re.range "%" "%"))(re.union (re.++ (re.range "1" "9")(re.++ (re.range "0" "9") (re.range "%" "%"))) (str.to_re (str.++ "1" (str.++ "0" (str.++ "0" (str.++ "%" ""))))))) (re.range ")" ")")))))) (str.to_re "")))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "a" (str.++ "D" (str.++ "8" (str.++ "X" "")))))

(define-fun Witness2 () String (str.++ "W" (str.++ "s" (str.++ "1" (str.++ "R" (str.++ "z" ""))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.union (re.range "A" "A")(re.union (re.range "K" "K")(re.union (re.range "N" "N")(re.union (re.range "W" "W")(re.union (re.range "a" "a")(re.union (re.range "k" "k") (re.range "n" "n")))))))(re.++ (re.opt (re.union (re.range "A" "Z") (re.range "a" "z")))(re.++ (re.range "0" "9")(re.++ ((_ re.loop 1 3) (re.union (re.range "A" "Z") (re.range "a" "z"))) (str.to_re ""))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "p" (str.++ "x" (str.++ "p" (str.++ "8" (str.++ "8" ""))))))

(define-fun Witness2 () String (str.++ "9" (str.++ "8" (str.++ "2" (str.++ "k" (str.++ "x" (str.++ "b" "")))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.union (re.++ (re.+ (re.union (re.range "A" "Z") (re.range "a" "z"))) (re.+ (re.range "0" "9"))) (re.++ (re.+ (re.range "0" "9")) (re.+ (re.union (re.range "A" "Z") (re.range "a" "z")))))(re.++ (re.* (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))) (str.to_re ""))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "\u{ca}" (str.++ "@" (str.++ "\u{f2}" (str.++ "\u{b5}" (str.++ "\u{ea}" (str.++ "Z" (str.++ "\u{fa}" (str.++ "." (str.++ "\u{f1}" (str.++ "5" "")))))))))))

(define-fun Witness2 () String (str.++ "\u{d9}" (str.++ "@" (str.++ "\u{ba}" (str.++ "." (str.++ "g" (str.++ "\u{ba}" (str.++ "\u{ba}" ""))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.+ (re.union (re.range "-" ".")(re.union (re.range "0" "9")(re.union (re.range "=" "=")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))))(re.++ (re.range "@" "@")(re.++ (re.+ (re.union (re.range "-" ".")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))))(re.++ (re.range "." ".")(re.++ ((_ re.loop 2 3) (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))) (str.to_re "")))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "1" (str.++ "5" (str.++ "9" (str.++ "9" (str.++ "8" ""))))))

(define-fun Witness2 () String (str.++ "9" (str.++ "4" (str.++ "7" (str.++ "7" (str.++ "9" ""))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ ((_ re.loop 5 5) (re.range "0" "9")) (str.to_re "")))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "a" (str.++ "x" (str.++ "D" ""))))

(define-fun Witness2 () String (str.++ "M" (str.++ "." (str.++ "l" (str.++ "Q" "")))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.opt (re.++ (re.++ (re.union (re.range "A" "Z") (re.range "a" "z"))(re.++ (re.* (re.union (re.range "$" "$")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_") (re.range "a" "z")))))) (re.* (re.++ (re.range "." ".")(re.++ (re.union (re.range "A" "Z") (re.range "a" "z")) (re.* (re.union (re.range "$" "$")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_") (re.range "a" "z"))))))))))) (re.range "." ".")))(re.++ (re.++ (re.union (re.range "A" "Z") (re.range "a" "z")) (re.* (re.union (re.range "$" "$")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_") (re.range "a" "z"))))))) (str.to_re ""))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "0" (str.++ "7" (str.++ ")" (str.++ "2" (str.++ "8" (str.++ "8" (str.++ "7" (str.++ "0" (str.++ "3" (str.++ "1" (str.++ "9" ""))))))))))))

(define-fun Witness2 () String (str.++ "(" (str.++ "0" (str.++ "3" (str.++ "7" (str.++ "9" (str.++ "8" (str.++ "3" (str.++ " " (str.++ "7" (str.++ "9" (str.++ "8" (str.++ "9" "")))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.opt (re.range "(" "("))(re.++ (re.range "0" "0")(re.++ (re.union (re.range "2" "3") (re.range "7" "8"))(re.++ (re.opt (re.range ")" ")"))(re.++ (re.opt (re.union (re.range " " " ") (re.range "-" "-")))(re.++ ((_ re.loop 4 4) (re.range "0" "9"))(re.++ (re.opt (re.union (re.range " " " ") (re.range "-" "-")))(re.++ ((_ re.loop 4 4) (re.range "0" "9")) (str.to_re ""))))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "3" (str.++ ":" (str.++ "4" (str.++ "8" (str.++ ":" (str.++ "2" (str.++ "2" ""))))))))

(define-fun Witness2 () String (str.++ "5" (str.++ ":" (str.++ "3" (str.++ "8" (str.++ ":" (str.++ "4" (str.++ "5" ""))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.union (re.++ (re.opt (re.range "0" "0")) (re.range "0" "9"))(re.union (re.++ (re.range "1" "1") (re.range "0" "9")) (re.++ (re.range "2" "2") (re.range "0" "3"))))(re.++ (re.range ":" ":")(re.++ (re.++ (re.range "0" "5") (re.range "0" "9"))(re.++ (re.range ":" ":")(re.++ (re.++ (re.range "0" "5") (re.range "0" "9")) (str.to_re "")))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "7" (str.++ "8" (str.++ "5" (str.++ "2" (str.++ "8" (str.++ "6" (str.++ "8" (str.++ "8" (str.++ "8" (str.++ "8" (str.++ "7" (str.++ "9" (str.++ "," (str.++ "2" (str.++ "9" (str.++ "3" (str.++ "8" (str.++ "5" (str.++ "7" (str.++ "9" (str.++ "4" (str.++ "2" (str.++ "9" (str.++ "9" (str.++ "9" ""))))))))))))))))))))))))))

(define-fun Witness2 () String (str.++ "6" (str.++ "9" (str.++ "7" (str.++ "9" (str.++ "1" (str.++ "9" (str.++ "7" (str.++ "3" (str.++ "8" (str.++ "8" (str.++ "8" (str.++ "9" (str.++ "," (str.++ "5" (str.++ "9" (str.++ "7" (str.++ "9" (str.++ "7" (str.++ "1" (str.++ "8" (str.++ "0" (str.++ "8" (str.++ "5" (str.++ "5" (str.++ "0" (str.++ "," (str.++ "9" (str.++ "9" (str.++ "6" (str.++ "8" (str.++ "8" (str.++ "8" (str.++ "1" (str.++ "9" (str.++ "8" (str.++ "8" (str.++ "7" (str.++ "8" (str.++ "," (str.++ "9" (str.++ "8" (str.++ "6" (str.++ "9" (str.++ "6" (str.++ "6" (str.++ "5" (str.++ "9" (str.++ "8" (str.++ "0" (str.++ "1" (str.++ "9" (str.++ "," (str.++ "9" (str.++ "9" (str.++ "9" (str.++ "8" (str.++ "9" (str.++ "8" (str.++ "8" (str.++ "9" (str.++ "9" (str.++ "9" (str.++ "0" (str.++ "3" (str.++ "," (str.++ "8" (str.++ "8" (str.++ "0" (str.++ "8" (str.++ "9" (str.++ "8" (str.++ "0" (str.++ "8" (str.++ "8" (str.++ "3" (str.++ "8" (str.++ "8" ""))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(assert (= regexA (re.union (re.++ (str.to_re "")(re.++ (re.+ (re.++ ((_ re.loop 12 12) (re.range "0" "9")) (re.range "," ",")))(re.++ ((_ re.loop 12 12) (re.range "0" "9")) (str.to_re "")))) (re.++ (str.to_re "")(re.++ ((_ re.loop 12 12) (re.range "0" "9")) (str.to_re ""))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "0" (str.++ "4" (str.++ "6" (str.++ "8" "")))))

(define-fun Witness2 () String (str.++ "9" (str.++ "8" (str.++ "8" (str.++ "8" "")))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.++ (re.opt ((_ re.loop 3 3) (re.union (re.range "A" "Z") (re.range "a" "z")))) ((_ re.loop 4 4) (re.range "0" "9"))) (str.to_re "")))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "9" ""))

(define-fun Witness2 () String (str.++ "-" (str.++ "8" (str.++ "0" (str.++ "8" (str.++ "8" (str.++ "8" (str.++ "." (str.++ "9" (str.++ "1" (str.++ "0" (str.++ "5" ""))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.opt (re.range "-" "-"))(re.++ (re.+ (re.range "0" "9"))(re.++ (re.opt (re.++ (re.range "." ".") (re.+ (re.range "0" "9")))) (str.to_re "")))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "\u{aa}" (str.++ "@" (str.++ "5" (str.++ "7" (str.++ "." (str.++ "\u{e2}" (str.++ "." (str.++ "d" (str.++ "." (str.++ "9" (str.++ "\u{0d}" (str.++ "5" (str.++ "l" (str.++ "q" (str.++ "u" (str.++ "8" (str.++ "\u{e7}" (str.++ "+" (str.++ "\u{b5}" (str.++ "@" (str.++ "\u{ba}" (str.++ "1" (str.++ "." (str.++ "\u{aa}" (str.++ "0" (str.++ "." (str.++ "\u{e4}" (str.++ "3" (str.++ "E" (str.++ "." (str.++ "\u{c2}" (str.++ "e" (str.++ "9" (str.++ "-" (str.++ "5" (str.++ "\u{a0}" (str.++ "\u{a0}" ""))))))))))))))))))))))))))))))))))))))

(define-fun Witness2 () String (str.++ "\u{d0}" (str.++ "@" (str.++ "\u{b5}" (str.++ "." (str.++ "0" (str.++ "3" (str.++ "z" (str.++ "\u{e3}" (str.++ "9" (str.++ "\u{f6}" (str.++ "9" (str.++ "\u{b5}" (str.++ "-" (str.++ "1" (str.++ "," (str.++ " " (str.++ "\u{f8}" (str.++ "\u{f9}" (str.++ "+" (str.++ "0" (str.++ "p" (str.++ "m" (str.++ "5" (str.++ "@" (str.++ "Q" (str.++ "-" (str.++ "\u{aa}" (str.++ "\u{cc}" (str.++ "." (str.++ "\u{b5}" (str.++ "\u{fb}" (str.++ "\u{fb}" (str.++ "8" (str.++ " " (str.++ "," (str.++ " " (str.++ "\u{a0}" ""))))))))))))))))))))))))))))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.+ (re.++ (re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))(re.++ (re.* (re.++ (re.union (re.range "+" "+") (re.range "-" ".")) (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))))(re.++ (re.range "@" "@")(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))(re.++ (re.* (re.++ (re.range "-" ".") (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))))(re.++ (re.range "." ".")(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))) (re.* (re.++ (re.range "-" ".") (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))))))))))))(re.++ (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (re.opt (re.range "," ",")) (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))))))) (str.to_re "")))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "8" (str.++ "M" "")))

(define-fun Witness2 () String (str.++ "." (str.++ "." "")))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.+ (re.union (re.range "-" ".")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_") (re.range "a" "z")))))) (str.to_re "")))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "8" (str.++ "@" (str.++ "[" (str.++ "8" (str.++ "." (str.++ "6" (str.++ "." (str.++ "8" (str.++ "6" (str.++ "8" (str.++ "." (str.++ "h" (str.++ "j" ""))))))))))))))

(define-fun Witness2 () String (str.++ "P" (str.++ "9" (str.++ "@" (str.++ "[" (str.++ "4" (str.++ "." (str.++ "8" (str.++ "9" (str.++ "5" (str.++ "." (str.++ "3" (str.++ "6" (str.++ "." (str.++ "E" (str.++ "h" ""))))))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.+ (re.union (re.range "-" ".")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_") (re.range "a" "z"))))))(re.++ (re.range "@" "@")(re.++ (re.union (re.++ (re.range "[" "[")(re.++ ((_ re.loop 1 3) (re.range "0" "9"))(re.++ (re.range "." ".")(re.++ ((_ re.loop 1 3) (re.range "0" "9"))(re.++ (re.range "." ".")(re.++ ((_ re.loop 1 3) (re.range "0" "9")) (re.range "." "."))))))) (re.+ (re.++ (re.+ (re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z"))))) (re.range "." "."))))(re.++ (re.union ((_ re.loop 2 4) (re.union (re.range "A" "Z") (re.range "a" "z"))) ((_ re.loop 1 3) (re.range "0" "9")))(re.++ (re.opt (re.range "]" "]")) (str.to_re "")))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "N" (str.++ "9" (str.++ "u" (str.++ "@" (str.++ "8" (str.++ "." (str.++ "D" (str.++ "P" "")))))))))

(define-fun Witness2 () String (str.++ "x" (str.++ "9" (str.++ "_" (str.++ "@" (str.++ "M" (str.++ "." (str.++ "-" (str.++ "4" (str.++ "-" (str.++ "." (str.++ "9" (str.++ "." (str.++ "n" (str.++ "Z" "")))))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z"))))(re.++ (re.* (re.union (re.range "%" "%")(re.union (re.range "-" ".")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_") (re.range "a" "z")))))))(re.++ (re.range "@" "@")(re.++ (re.+ (re.++ (re.+ (re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z"))))) (re.range "." "."))) ((_ re.loop 2 4) (re.union (re.range "A" "Z") (re.range "a" "z"))))))) (str.to_re "")))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String "")

(define-fun Witness2 () String "")

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.opt (re.++ ((_ re.loop 2 2) (re.union (re.range "A" "Z")(re.union (re.range "a" "z") (re.range "|" "|"))))(re.++ (re.range "-" "-")(re.++ ((_ re.loop 2 2) (re.range "0" "9"))(re.++ (re.range "-" "-")(re.++ ((_ re.loop 2 2) (re.union (re.range "A" "Z")(re.union (re.range "a" "z") (re.range "|" "|"))))(re.++ (re.range "-" "-") ((_ re.loop 1 4) (re.range "0" "9")))))))))(re.++ (re.opt (re.++ ((_ re.loop 3 3) (re.union (re.range "A" "Z")(re.union (re.range "a" "z") (re.range "|" "|"))))(re.++ (re.range "-" "-") ((_ re.loop 1 4) (re.range "0" "9"))))) (str.to_re ""))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "(" (str.++ "8" (str.++ "3" (str.++ "0" (str.++ "0" (str.++ "6" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "0" (str.++ "9" ""))))))))))))

(define-fun Witness2 () String (str.++ "2" (str.++ "8" (str.++ "1" (str.++ "9" (str.++ "9" (str.++ "9" (str.++ "G" (str.++ "8" (str.++ "5" (str.++ "9" (str.++ "9" ""))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.union (re.++ (re.range "(" "(") (re.range "2" "9")) (re.range "2" "9"))(re.++ (re.union ((_ re.loop 2 2) (re.range "0" "9")) (re.++ ((_ re.loop 2 2) (re.range "0" "9")) (re.range ")" ")")))(re.++ (re.opt (re.union (re.range "-" "-")(re.union (re.union (re.range "\u{00}" "\u{09}") (re.range "\u{0b}" "\u{ff}")) (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))))(re.++ ((_ re.loop 3 3) (re.range "0" "9"))(re.++ (re.opt (re.union (re.range "-" "-")(re.union (re.union (re.range "\u{00}" "\u{09}") (re.range "\u{0b}" "\u{ff}")) (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))))(re.++ ((_ re.loop 4 4) (re.range "0" "9")) (str.to_re ""))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "9" (str.++ "4" (str.++ "9" (str.++ "8" "")))))

(define-fun Witness2 () String (str.++ "9" (str.++ "8" (str.++ "2" (str.++ "1" "")))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.range "1" "9")(re.++ ((_ re.loop 3 3) (re.range "0" "9")) (str.to_re ""))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "1" (str.++ "2" (str.++ ":" (str.++ "5" (str.++ "9" (str.++ ":" (str.++ "2" (str.++ "1" (str.++ " " (str.++ "P" (str.++ "M" ""))))))))))))

(define-fun Witness2 () String (str.++ ":" (str.++ "2" (str.++ "8" (str.++ ":" (str.++ "5" (str.++ "2" (str.++ "\u{0c}" (str.++ "A" (str.++ "M" ""))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.union (str.to_re "")(re.union (re.++ (re.range "0" "0") (re.range "0" "9")) (re.++ (re.range "1" "1") (re.range "0" "2"))))(re.++ (re.range ":" ":")(re.++ (re.++ (re.range "0" "5") (re.range "0" "9"))(re.++ (re.range ":" ":")(re.++ (re.++ (re.range "0" "5") (re.range "0" "9"))(re.++ (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))(re.++ (re.++ (re.union (re.range "A" "A") (re.range "P" "P")) (re.range "M" "M")) (str.to_re "")))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "1" (str.++ "0" (str.++ "2" (str.++ "6" "")))))

(define-fun Witness2 () String (str.++ "1" (str.++ "3" (str.++ "9" (str.++ "4" (str.++ "9" ""))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.union (re.++ (str.to_re (str.++ "4" (str.++ "9" (str.++ "1" (str.++ "5" ""))))) (re.range "0" "1"))(re.union (re.++ (str.to_re (str.++ "4" (str.++ "9" (str.++ "1" ""))))(re.++ (re.range "0" "4") (re.range "0" "9")))(re.union (re.++ (str.to_re (str.++ "4" (str.++ "9" (str.++ "0" ""))))(re.++ (re.range "0" "9") (re.range "0" "9")))(re.union (re.++ (re.range "4" "4")(re.++ (re.range "0" "8") ((_ re.loop 3 3) (re.range "0" "9"))))(re.union (re.++ (re.range "1" "3") ((_ re.loop 4 4) (re.range "0" "9")))(re.union (re.++ (re.range "2" "9") ((_ re.loop 3 3) (re.range "0" "9")))(re.union (re.++ (re.range "1" "1")(re.++ (re.range "1" "9") ((_ re.loop 2 2) (re.range "0" "9"))))(re.union (re.++ (str.to_re (str.++ "1" (str.++ "0" "")))(re.++ (re.range "3" "9") (re.range "0" "9"))) (re.++ (str.to_re (str.++ "1" (str.++ "0" (str.++ "2" "")))) (re.range "4" "9")))))))))) (str.to_re "")))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "/" ""))

(define-fun Witness2 () String (str.++ "/" (str.++ "%" (str.++ "5" (str.++ "9" (str.++ ";" (str.++ "/" (str.++ ";" ""))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.++ (re.range "/" "/")(re.++ (re.* (re.union (re.+ (re.union (re.range "!" "!")(re.union (re.range "$" "$")(re.union (re.range "&" ",")(re.union (re.range "." ".")(re.union (re.range "0" ":")(re.union (re.range "=" "=")(re.union (re.range "@" "Z")(re.union (re.range "\u{5c}" "_")(re.union (re.range "a" "z") (re.range "~" "~"))))))))))) (re.++ (re.range "%" "%")(re.++ (re.union (re.range "0" "9")(re.union (re.range "A" "F") (re.range "a" "f"))) (re.union (re.range "0" "9")(re.union (re.range "A" "F") (re.range "a" "f")))))))(re.++ (re.* (re.++ (re.range ";" ";") (re.* (re.union (re.+ (re.union (re.range "!" "!")(re.union (re.range "$" "$")(re.union (re.range "&" ",")(re.union (re.range "." ".")(re.union (re.range "0" ":")(re.union (re.range "=" "=")(re.union (re.range "@" "Z")(re.union (re.range "\u{5c}" "_")(re.union (re.range "a" "z") (re.range "~" "~"))))))))))) (re.++ (re.range "%" "%")(re.++ (re.union (re.range "0" "9")(re.union (re.range "A" "F") (re.range "a" "f"))) (re.union (re.range "0" "9")(re.union (re.range "A" "F") (re.range "a" "f"))))))))) (re.* (re.++ (re.range "/" "/")(re.++ (re.* (re.union (re.+ (re.union (re.range "!" "!")(re.union (re.range "$" "$")(re.union (re.range "&" ",")(re.union (re.range "." ".")(re.union (re.range "0" ":")(re.union (re.range "=" "=")(re.union (re.range "@" "Z")(re.union (re.range "\u{5c}" "_")(re.union (re.range "a" "z") (re.range "~" "~"))))))))))) (re.++ (re.range "%" "%")(re.++ (re.union (re.range "0" "9")(re.union (re.range "A" "F") (re.range "a" "f"))) (re.union (re.range "0" "9")(re.union (re.range "A" "F") (re.range "a" "f"))))))) (re.* (re.++ (re.range ";" ";") (re.* (re.union (re.+ (re.union (re.range "!" "!")(re.union (re.range "$" "$")(re.union (re.range "&" ",")(re.union (re.range "." ".")(re.union (re.range "0" ":")(re.union (re.range "=" "=")(re.union (re.range "@" "Z")(re.union (re.range "\u{5c}" "_")(re.union (re.range "a" "z") (re.range "~" "~"))))))))))) (re.++ (re.range "%" "%")(re.++ (re.union (re.range "0" "9")(re.union (re.range "A" "F") (re.range "a" "f"))) (re.union (re.range "0" "9")(re.union (re.range "A" "F") (re.range "a" "f"))))))))))))))) (str.to_re "")))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "h" (str.++ "t" (str.++ "t" (str.++ "p" (str.++ ":" (str.++ "/" (str.++ "/" (str.++ "w" (str.++ "w" (str.++ "w" (str.++ "s" (str.++ "." (str.++ "." (str.++ "e" (str.++ "l" (str.++ "Z" (str.++ "/" ""))))))))))))))))))

(define-fun Witness2 () String (str.++ "h" (str.++ "t" (str.++ "t" (str.++ "p" (str.++ ":" (str.++ "/" (str.++ "/" (str.++ "w" (str.++ "w" (str.++ "w" (str.++ "*" (str.++ "I" (str.++ "." (str.++ "a" (str.++ "t" (str.++ "/" "")))))))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (str.to_re (str.++ "h" (str.++ "t" (str.++ "t" (str.++ "p" (str.++ ":" (str.++ "/" (str.++ "/" (str.++ "w" (str.++ "w" (str.++ "w" "")))))))))))(re.++ (re.union (re.range "\u{00}" "\u{09}") (re.range "\u{0b}" "\u{ff}"))(re.++ (re.+ (re.union (re.range "-" ".")(re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))))(re.++ (re.range "." ".")(re.++ ((_ re.loop 2 3) (re.union (re.range "A" "Z") (re.range "a" "z")))(re.++ (re.range "/" "/") (str.to_re ""))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ ")" ""))

(define-fun Witness2 () String (str.++ "-" (str.++ "(" (str.++ "0" (str.++ "," (str.++ "0" (str.++ "6" (str.++ "9" (str.++ "2" (str.++ "8" (str.++ "9" (str.++ "." (str.++ "8" (str.++ "2" (str.++ ")" "")))))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.opt (re.range "-" "-"))(re.++ (re.opt (re.range "(" "("))(re.++ (re.++ ((_ re.loop 0 3) (re.range "0" "9"))(re.++ (re.* (re.++ (re.opt (re.range "," ",")) ((_ re.loop 3 3) (re.range "0" "9")))) (re.++ (re.opt (re.range "." ".")) (re.* (re.range "0" "9")))))(re.++ (re.opt (re.range ")" ")")) (str.to_re ""))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "8" (str.++ "9" (str.++ "." (str.++ "6" "")))))

(define-fun Witness2 () String (str.++ "2" (str.++ "," (str.++ "2" (str.++ "9" (str.++ "9" (str.++ "," (str.++ "9" (str.++ "8" (str.++ "6" (str.++ "," (str.++ "9" (str.++ "9" (str.++ "8" ""))))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.opt (re.range "$" "$"))(re.++ ((_ re.loop 1 3) (re.range "0" "9"))(re.++ (re.* (re.++ (re.opt (re.range "," ",")) ((_ re.loop 3 3) (re.range "0" "9"))))(re.++ (re.opt (re.++ (re.range "." ".") ((_ re.loop 1 2) (re.range "0" "9")))) (str.to_re ""))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "8" (str.++ "f" (str.++ "." (str.++ "f" (str.++ "V" (str.++ "Y" "")))))))

(define-fun Witness2 () String (str.++ "R" (str.++ "n" (str.++ "." (str.++ "1" (str.++ "x" (str.++ "0" "")))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.+ (re.++ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))(re.++ (re.* (re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))))(re.++ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z"))) (re.range "." ".")))))(re.++ ((_ re.loop 3 5) (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))) (str.to_re ""))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "5" (str.++ "9" (str.++ "." ""))))

(define-fun Witness2 () String (str.++ "3" (str.++ "9" (str.++ "." (str.++ "6" "")))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.+ (re.range "0" "9"))(re.++ (re.opt (re.++ (re.range "." ".") ((_ re.loop 0 2) (re.range "0" "9")))) (str.to_re ""))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "1" (str.++ "6" (str.++ "5" (str.++ "9" (str.++ "6" ""))))))

(define-fun Witness2 () String (str.++ "8" (str.++ "9" (str.++ "8" (str.++ "6" (str.++ "3" ""))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ ((_ re.loop 5 5) (re.range "0" "9")) (str.to_re "")))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "-" (str.++ "9" (str.++ "9" (str.++ "," (str.++ "8" (str.++ "8" (str.++ "8" ""))))))))

(define-fun Witness2 () String (str.++ "8" (str.++ "." (str.++ "6" (str.++ "9" (str.++ "8" (str.++ "7" (str.++ "1" ""))))))))

(assert (= regexA (re.union (re.++ (str.to_re "")(re.++ (re.opt (re.range "-" "-"))(re.++ ((_ re.loop 1 3) (re.range "0" "9"))(re.++ (re.* (re.++ (re.range "," ",") ((_ re.loop 3 3) (re.range "0" "9"))))(re.++ (re.opt (re.++ (re.range "." ".") (re.+ (re.range "0" "9")))) (str.to_re "")))))) (re.++ (str.to_re "")(re.++ (re.+ (re.range "0" "9"))(re.++ (re.opt (re.++ (re.range "." ".") (re.+ (re.range "0" "9")))) (str.to_re "")))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "~" (str.++ "/" (str.++ "8" (str.++ "O" (str.++ "." (str.++ "-" "")))))))

(define-fun Witness2 () String (str.++ "~" (str.++ "/" (str.++ "4" (str.++ "." (str.++ "-" ""))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (str.to_re (str.++ "~" (str.++ "/" "")))(re.++ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_") (re.range "a" "z"))))(re.++ (re.* (re.union (re.range "-" "-")(re.union (re.range "/" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_") (re.range "a" "z"))))))(re.++ (re.range "." ".")(re.++ (re.+ (re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_") (re.range "a" "z")))))) (str.to_re "")))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "X" (str.++ "x" (str.++ "o" (str.++ "u" (str.++ "v" (str.++ "r" (str.++ "t" ""))))))))

(define-fun Witness2 () String (str.++ "U" (str.++ "f" (str.++ "k" (str.++ "o" (str.++ "i" (str.++ "r" (str.++ "e" ""))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.range "A" "Z")(re.++ (re.+ (re.range "a" "z"))(re.++ (re.++ (re.range "o" "o")(re.++ (re.union (re.range "i" "i") (re.range "u" "u"))(re.++ (re.union (re.range "n" "n")(re.union (re.++ (re.opt (re.range "v" "v"))(re.++ (re.range "r" "r") (re.opt (re.range "t" "t")))) (re.union (re.range "s" "t") (re.range "x" "x")))) (re.opt (re.++ (re.range "e" "e") (re.opt (re.range "s" "s"))))))) (str.to_re "")))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "1" (str.++ " " "")))

(define-fun Witness2 () String (str.++ "l" (str.++ "W" (str.++ "T" (str.++ "1" (str.++ "#" (str.++ "Q" "")))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.+ (re.union (re.range "#" "#")(re.union (re.range "&" "'")(re.union (re.range "," "9")(re.union (re.range ";" ";")(re.union (re.range "A" "Z") (re.range "a" "z")))))))(re.++ (re.+ (re.union (re.range " " " ")(re.union (re.range "#" "#")(re.union (re.range "&" "'")(re.union (re.range "," "9")(re.union (re.range ";" ";")(re.union (re.range "A" "Z") (re.range "a" "z")))))))) (str.to_re ""))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "+" ""))

(define-fun Witness2 () String (str.++ "(" (str.++ "+" (str.++ ")" ""))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.opt (re.++ (re.opt (re.range "(" "("))(re.++ (re.opt (re.range "+" "+"))(re.++ (re.* (re.range "0" "9")) (re.opt (re.range ")" ")"))))))(re.++ (re.* (re.union (re.range " " " ")(re.union (re.range "(" ")")(re.union (re.range "-" "-")(re.union (re.range "0" "9") (re.range "_" "_")))))) (str.to_re ""))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "-" (str.++ "-" "")))

(define-fun Witness2 () String "")

(assert (= regexA (re.union (re.union (re.range "\u{00}" "\u{1f}")(re.union (re.range "!" ",")(re.union (re.range "." "@")(re.union (re.range "[" "`") (re.range "{" "\u{ff}")))))(re.union (str.to_re (str.++ " " (str.++ " " "")))(re.union (str.to_re (str.++ "-" (str.++ "-" ""))) (re.++ (str.to_re "")(re.++ (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))) (str.to_re ""))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "0" ""))

(define-fun Witness2 () String (str.++ "0" ""))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.union (re.range "0" "0")(re.union (re.++ (re.opt (re.range "+" "+"))(re.++ (re.range "1" "9") ((_ re.loop 0 8) (re.range "0" "9"))))(re.union (re.++ (re.opt (re.range "+" "+"))(re.++ (re.range "1" "3") ((_ re.loop 1 9) (re.range "0" "9")))) (re.++ (re.opt (re.range "+" "+"))(re.++ (re.range "4" "4") (re.union (re.++ (re.range "0" "1") ((_ re.loop 8 8) (re.range "0" "9"))) (re.++ (re.range "2" "2") (re.union (re.++ (re.range "0" "8") ((_ re.loop 7 7) (re.range "0" "9"))) (re.++ (re.range "9" "9") (re.union (re.++ (re.range "0" "3") ((_ re.loop 6 6) (re.range "0" "9"))) (re.++ (re.range "4" "4") (re.union (re.++ (re.range "0" "8") ((_ re.loop 5 5) (re.range "0" "9"))) (re.++ (re.range "9" "9") (re.union (re.++ (re.range "0" "5") ((_ re.loop 4 4) (re.range "0" "9"))) (re.++ (re.range "6" "6") (re.union (re.++ (re.range "0" "6") ((_ re.loop 3 3) (re.range "0" "9"))) (re.++ (re.range "7" "7") (re.union (re.++ (re.range "0" "1") ((_ re.loop 2 2) (re.range "0" "9"))) (re.++ (re.range "2" "2") (re.union (re.++ (re.range "0" "8") (re.range "0" "9")) (re.++ (re.range "9" "9") (re.range "0" "5")))))))))))))))))))))) (str.to_re "")))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "1" (str.++ "." (str.++ "9" (str.++ "8" (str.++ "0" (str.++ "6" "")))))))

(define-fun Witness2 () String (str.++ "-" (str.++ "9" (str.++ "0" (str.++ "." (str.++ "0" ""))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.opt (re.union (re.range "+" "+") (re.range "-" "-")))(re.++ (re.union (re.++ (re.range "0" "9")(re.++ (re.range "." ".") ((_ re.loop 1 6) (re.range "0" "9"))))(re.union (re.++ (re.range "1" "8")(re.++ (re.range "0" "9")(re.++ (re.range "." ".") ((_ re.loop 1 6) (re.range "0" "9"))))) (re.++ (str.to_re (str.++ "9" (str.++ "0" (str.++ "." "")))) ((_ re.loop 1 6) (re.range "0" "0"))))) (str.to_re ""))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "5" (str.++ "7" (str.++ "4" (str.++ "9" (str.++ "8" (str.++ "9" (str.++ "2" (str.++ "4" (str.++ "0" (str.++ "9" (str.++ "8" (str.++ "2" (str.++ "1" (str.++ "9" (str.++ "0" (str.++ "4" "")))))))))))))))))

(define-fun Witness2 () String (str.++ "3" (str.++ "4" (str.++ "6" (str.++ "5" (str.++ "6" (str.++ "9" (str.++ "2" (str.++ "0" (str.++ "8" (str.++ "8" (str.++ "0" (str.++ "8" (str.++ "1" (str.++ "4" (str.++ "9" ""))))))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.union (re.++ (re.range "4" "4") (re.union ((_ re.loop 12 12) (re.range "0" "9")) ((_ re.loop 15 15) (re.range "0" "9"))))(re.union (re.++ (re.range "5" "5") ((_ re.loop 15 15) (re.range "0" "9")))(re.union (re.++ (str.to_re (str.++ "6" (str.++ "0" (str.++ "1" (str.++ "1" ""))))) ((_ re.loop 12 12) (re.range "0" "9"))) (re.++ (re.range "3" "3")(re.++ (re.union (re.range "4" "4") (re.range "7" "7")) ((_ re.loop 13 13) (re.range "0" "9"))))))) (str.to_re "")))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "9" (str.++ "." (str.++ "2" (str.++ "8" (str.++ "1" (str.++ "." (str.++ "8" (str.++ "2" (str.++ "8" (str.++ "." (str.++ "2" (str.++ "6" (str.++ "8" ""))))))))))))))

(define-fun Witness2 () String (str.++ "9" (str.++ "8" (str.++ "." (str.++ "9" (str.++ "5" (str.++ "8" (str.++ "." (str.++ "0" (str.++ "." (str.++ "0" (str.++ "7" ""))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ ((_ re.loop 1 3) (re.range "0" "9"))(re.++ (re.union ((_ re.loop 3 3) (re.++ (re.range "." ".") ((_ re.loop 1 3) (re.range "0" "9")))) ((_ re.loop 5 5) (re.++ (re.range "." ".") ((_ re.loop 1 3) (re.range "0" "9"))))) (str.to_re ""))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "E" (str.++ "-" (str.++ "9" (str.++ "2" (str.++ "8" (str.++ "9" (str.++ "-" (str.++ "8" (str.++ "4" (str.++ "8" (str.++ "8" ""))))))))))))

(define-fun Witness2 () String (str.++ "E" (str.++ "-" (str.++ "6" (str.++ "-" (str.++ "9" (str.++ "9" (str.++ "9" (str.++ "8" "")))))))))

(assert (= regexA (re.union (re.++ (str.to_re "")(re.++ (str.to_re (str.++ "1" (str.++ "0" "")))(re.++ (re.opt (str.to_re (str.++ "A" (str.++ "V" ""))))(re.++ (re.range "-" "-")(re.++ ((_ re.loop 1 4) (re.range "0" "9"))(re.++ (re.range "-" "-") ((_ re.loop 1 5) (re.range "0" "9"))))))))(re.union (re.++ (str.to_re "")(re.++ (re.range "1" "9")(re.++ (re.opt (str.to_re (str.++ "A" (str.++ "V" ""))))(re.++ (re.range "-" "-")(re.++ ((_ re.loop 1 4) (re.range "0" "9"))(re.++ (re.range "-" "-") ((_ re.loop 1 5) (re.range "0" "9")))))))) (re.++ (str.to_re "")(re.++ (re.union (re.union (re.range "E" "E") (re.range "N" "N")) (str.to_re (str.++ "P" (str.++ "E" ""))))(re.++ (re.range "-" "-")(re.++ ((_ re.loop 1 4) (re.range "0" "9"))(re.++ (re.range "-" "-") ((_ re.loop 1 5) (re.range "0" "9")))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "9" (str.++ "7" (str.++ "8" (str.++ "8" (str.++ "-" (str.++ "1" (str.++ "2" (str.++ "-" (str.++ "3" (str.++ "1" "")))))))))))

(define-fun Witness2 () String (str.++ "9" (str.++ "8" (str.++ "7" (str.++ "9" (str.++ "-" (str.++ "1" (str.++ "2" (str.++ "-" (str.++ "3" (str.++ "1" "")))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ ((_ re.loop 4 4) (re.range "0" "9"))(re.++ (re.union (re.range "-" "-") (re.range "/" "/"))(re.++ (re.union (re.++ (re.range "0" "0") (re.range "1" "9")) (re.++ (re.range "1" "1") (re.range "0" "2")))(re.++ (re.union (re.range "-" "-") (re.range "/" "/"))(re.++ (re.union (re.++ (re.range "0" "0") (re.range "1" "9"))(re.union (re.++ (re.range "1" "2") (re.range "0" "9")) (re.++ (re.range "3" "3") (re.range "0" "1")))) (str.to_re "")))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String "")

(define-fun Witness2 () String "")

(assert (= regexA (re.union (re.++ (re.union (re.++ (re.range "0" "0") (re.range "1" "9"))(re.union (re.++ (re.range "1" "2") (re.range "0" "9")) (str.to_re (str.++ "3" (str.++ "0" "")))))(re.++ (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))(re.++ (re.union (str.to_re (str.++ "A" (str.++ "p" (str.++ "r" (str.++ "i" (str.++ "l" ""))))))(re.union (str.to_re (str.++ "J" (str.++ "u" (str.++ "n" (str.++ "e" ""))))) (re.++ (re.union (str.to_re (str.++ "S" (str.++ "e" (str.++ "p" (str.++ "t" ""))))) (str.to_re (str.++ "N" (str.++ "o" (str.++ "v" ""))))) (str.to_re (str.++ "e" (str.++ "m" (str.++ "b" (str.++ "e" (str.++ "r" "")))))))))(re.++ (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))(re.++ (re.range "1" "9") ((_ re.loop 3 3) (re.range "0" "9"))))))) (str.to_re ""))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "1" (str.++ "4" (str.++ "/" (str.++ "J" (str.++ "a" (str.++ "n" (str.++ "/" (str.++ "5" (str.++ "8" (str.++ "4" (str.++ "2" ""))))))))))))

(define-fun Witness2 () String (str.++ "2" (str.++ "9" (str.++ "/" (str.++ "F" (str.++ "e" (str.++ "b" (str.++ "/" (str.++ "5" (str.++ "3" (str.++ "9" (str.++ "8" ""))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.union (re.++ (re.range "3" "3") (re.range "0" "1"))(re.union (re.++ (re.range "2" "2") (re.range "0" "9"))(re.union (re.++ (re.range "1" "1") (re.range "0" "9")) (re.++ (re.range "0" "0") (re.range "1" "9")))))(re.++ (re.range "/" "/")(re.++ (re.union (str.to_re (str.++ "J" (str.++ "a" (str.++ "n" ""))))(re.union (str.to_re (str.++ "J" (str.++ "A" (str.++ "N" ""))))(re.union (str.to_re (str.++ "F" (str.++ "e" (str.++ "b" ""))))(re.union (str.to_re (str.++ "F" (str.++ "E" (str.++ "B" ""))))(re.union (str.to_re (str.++ "M" (str.++ "a" (str.++ "r" ""))))(re.union (str.to_re (str.++ "M" (str.++ "A" (str.++ "R" ""))))(re.union (str.to_re (str.++ "A" (str.++ "p" (str.++ "r" ""))))(re.union (str.to_re (str.++ "A" (str.++ "P" (str.++ "R" ""))))(re.union (str.to_re (str.++ "M" (str.++ "a" (str.++ "y" ""))))(re.union (str.to_re (str.++ "M" (str.++ "A" (str.++ "Y" ""))))(re.union (str.to_re (str.++ "J" (str.++ "u" (str.++ "n" ""))))(re.union (str.to_re (str.++ "J" (str.++ "U" (str.++ "N" ""))))(re.union (str.to_re (str.++ "J" (str.++ "u" (str.++ "l" ""))))(re.union (str.to_re (str.++ "J" (str.++ "U" (str.++ "L" ""))))(re.union (str.to_re (str.++ "A" (str.++ "u" (str.++ "g" ""))))(re.union (str.to_re (str.++ "A" (str.++ "U" (str.++ "G" ""))))(re.union (str.to_re (str.++ "S" (str.++ "e" (str.++ "p" ""))))(re.union (str.to_re (str.++ "S" (str.++ "E" (str.++ "P" ""))))(re.union (str.to_re (str.++ "O" (str.++ "c" (str.++ "t" ""))))(re.union (str.to_re (str.++ "O" (str.++ "C" (str.++ "T" ""))))(re.union (str.to_re (str.++ "N" (str.++ "o" (str.++ "v" ""))))(re.union (str.to_re (str.++ "N" (str.++ "O" (str.++ "V" ""))))(re.union (str.to_re (str.++ "D" (str.++ "e" (str.++ "c" "")))) (str.to_re (str.++ "D" (str.++ "E" (str.++ "C" "")))))))))))))))))))))))))))(re.++ (re.range "/" "/")(re.++ ((_ re.loop 4 4) (re.range "0" "9")) (str.to_re "")))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "0" (str.++ "2" (str.++ "9" (str.++ "0" "")))))

(define-fun Witness2 () String (str.++ "0" (str.++ "2" (str.++ "0" (str.++ "8" "")))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.union (re.++ (re.union (re.range "2" "2") (re.range "8" "9")) ((_ re.loop 2 2) (re.range "0" "9")))(re.union (re.++ (re.union (str.to_re (str.++ "0" (str.++ "2" "")))(re.union (str.to_re (str.++ "0" (str.++ "8" ""))) (str.to_re (str.++ "0" (str.++ "9" ""))))) ((_ re.loop 2 2) (re.range "0" "9"))) (re.++ (re.range "1" "9") ((_ re.loop 3 3) (re.range "0" "9"))))) (str.to_re "")))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "Y" (str.++ "8" (str.++ "T" (str.++ " " (str.++ "9" (str.++ "P" (str.++ "0" (str.++ " " (str.++ " " (str.++ " " (str.++ " " (str.++ " " "")))))))))))))

(define-fun Witness2 () String (str.++ "2" (str.++ "2" (str.++ "1" (str.++ "2" (str.++ "8" (str.++ " " (str.++ " " ""))))))))

(assert (= regexA (re.union (re.++ (str.to_re "")(re.++ (re.* (re.range " " " "))(re.++ (re.++ (re.union (re.range "A" "C")(re.union (re.range "E" "E")(re.union (re.range "G" "H")(re.union (re.range "J" "N")(re.union (re.range "P" "P")(re.union (re.range "R" "T")(re.union (re.range "V" "V")(re.union (re.range "X" "Y")(re.union (re.range "a" "c")(re.union (re.range "e" "e")(re.union (re.range "g" "h")(re.union (re.range "j" "n")(re.union (re.range "p" "p")(re.union (re.range "r" "t")(re.union (re.range "v" "v") (re.range "x" "y"))))))))))))))))(re.++ (re.range "0" "9") (re.union (re.range "A" "Z") (re.range "a" "z"))))(re.++ (re.* (re.range " " " "))(re.++ (re.* (re.range "-" "-"))(re.++ (re.* (re.range " " " "))(re.++ (re.++ (re.range "0" "9")(re.++ (re.union (re.range "A" "Z") (re.range "a" "z")) (re.range "0" "9")))(re.++ (re.* (re.range " " " ")) (str.to_re "")))))))))(re.union (re.++ (str.to_re "")(re.++ (re.* (re.range " " " "))(re.++ ((_ re.loop 5 5) (re.range "0" "9"))(re.++ (re.* (re.range " " " ")) (str.to_re ""))))) (re.++ (str.to_re "")(re.++ (re.* (re.range " " " "))(re.++ ((_ re.loop 5 5) (re.range "0" "9"))(re.++ (re.* (re.range " " " "))(re.++ (re.* (re.range "-" "-"))(re.++ (re.* (re.range " " " "))(re.++ ((_ re.loop 4 4) (re.range "0" "9"))(re.++ (re.* (re.range " " " ")) (str.to_re "")))))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "6" ""))

(define-fun Witness2 () String (str.++ "5" ""))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.+ (re.range "0" "9")) (str.to_re "")))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "9" (str.++ "8" (str.++ "0" (str.++ "2" (str.++ "7" (str.++ "2" (str.++ "8" (str.++ "8" (str.++ "0" (str.++ "7" "")))))))))))

(define-fun Witness2 () String (str.++ "8" (str.++ "4" (str.++ "8" (str.++ "-" (str.++ "8" (str.++ "9" (str.++ "4" (str.++ "8" (str.++ "0" (str.++ "8" (str.++ "3" ""))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.union (re.++ (re.range "(" "(")(re.++ (re.range "2" "9")(re.++ ((_ re.loop 2 2) (re.range "0" "9"))(re.++ (re.range ")" ")") (re.opt (re.range " " " ")))))) (re.++ (re.range "2" "9")(re.++ ((_ re.loop 2 2) (re.range "0" "9")) (re.union (re.opt (re.range "-" "-")) (re.opt (re.range " " " "))))))(re.++ (re.range "2" "9")(re.++ ((_ re.loop 2 2) (re.range "0" "9"))(re.++ (re.opt (re.union (re.range " " " ") (re.range "-" "-")))(re.++ ((_ re.loop 4 4) (re.range "0" "9")) (str.to_re "")))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "," (str.++ "u" (str.++ " " (str.++ " " "")))))

(define-fun Witness2 () String (str.++ "\u{85}" (str.++ "\u{a0}" "")))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (re.+ (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "," ",")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "a" "z")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))))))(re.++ (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))) (str.to_re "")))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "8" (str.++ "." (str.++ "9" (str.++ "3" "")))))

(define-fun Witness2 () String (str.++ "." (str.++ "4" (str.++ "9" ""))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.* (re.range "0" "9"))(re.++ (re.range "." ".")(re.++ ((_ re.loop 2 2) (re.range "0" "9")) (str.to_re "")))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "f" ""))

(define-fun Witness2 () String (str.++ "V" (str.++ "8" "")))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.union (re.range "A" "Z") (re.range "a" "z"))(re.++ ((_ re.loop 0 30) (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))) (str.to_re ""))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "0" (str.++ "8" (str.++ "/" (str.++ "3" (str.++ "/" (str.++ "5" (str.++ "8" ""))))))))

(define-fun Witness2 () String (str.++ "1" (str.++ "2" (str.++ "/" (str.++ "3" (str.++ "/" (str.++ "9" (str.++ "9" (str.++ "8" (str.++ "6" ""))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.union (re.range "1" "9")(re.union (re.++ (re.range "0" "0") (re.range "1" "9")) (re.++ (re.range "1" "1") (re.range "0" "2"))))(re.++ (re.range "/" "/")(re.++ (re.union (re.++ (re.range "0" "0") (re.range "1" "9")) (re.range "1" "3"))(re.++ (re.range "/" "/")(re.++ (re.union ((_ re.loop 2 2) (re.range "0" "9")) ((_ re.loop 4 4) (re.range "0" "9"))) (str.to_re "")))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "7" (str.++ "1" "")))

(define-fun Witness2 () String (str.++ "8" (str.++ "9" (str.++ "." (str.++ "9" (str.++ "1" ""))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.opt (re.union (re.range "+" "+") (re.range "-" "-")))(re.++ (re.+ (re.range "0" "9"))(re.++ (re.opt (re.++ (re.union (re.range "," ",") (re.range "." ".")) (re.+ (re.range "0" "9")))) (str.to_re "")))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ " " (str.++ " " (str.++ "e" (str.++ "\u{bb}" (str.++ "j" (str.++ "P" (str.++ "g" ""))))))))

(define-fun Witness2 () String (str.++ "A" (str.++ "\u{07}" (str.++ "g" (str.++ "i" (str.++ "F" ""))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.+ (re.union (re.range " " " ")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_") (re.range "a" "z"))))))(re.++ (re.union (re.++ (re.union (re.range "\u{00}" "\u{09}") (re.range "\u{0b}" "\u{ff}"))(re.++ (re.union (re.range "J" "J") (re.range "j" "j"))(re.++ (re.union (re.range "P" "P") (re.range "p" "p")) (re.union (re.range "G" "G") (re.range "g" "g"))))) (re.++ (re.union (re.range "\u{00}" "\u{09}") (re.range "\u{0b}" "\u{ff}"))(re.++ (re.union (re.range "G" "G") (re.range "g" "g"))(re.++ (re.union (re.range "I" "I") (re.range "i" "i")) (re.union (re.range "F" "F") (re.range "f" "f")))))) (str.to_re ""))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "1" (str.++ "1" (str.++ "/" (str.++ "3" (str.++ "0" (str.++ "/" (str.++ "8" (str.++ "9" (str.++ "8" (str.++ "8" "")))))))))))

(define-fun Witness2 () String (str.++ "0" (str.++ "9" (str.++ "/" (str.++ "3" (str.++ "1" (str.++ "/" (str.++ "0" (str.++ "8" (str.++ "1" (str.++ "8" "")))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.union (re.++ (re.range "0" "1") (re.range "0" "2")) (re.++ (re.range "0" "0") (re.range "1" "9")))(re.++ (re.range "/" "/")(re.++ (re.union (re.++ (re.range "0" "2") (re.range "0" "9")) (re.++ (re.range "3" "3") (re.range "0" "1")))(re.++ (re.range "/" "/")(re.++ (re.++ (re.range "0" "9")(re.++ (re.range "0" "9")(re.++ (re.range "0" "9") (re.range "0" "9")))) (str.to_re "")))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String "")

(define-fun Witness2 () String (str.++ "Z" (str.++ "z" (str.++ "\u{a0}" (str.++ "8" (str.++ "5" (str.++ "\u{09}" (str.++ "O" (str.++ "O" (str.++ "\u{09}" (str.++ "8" (str.++ "h" (str.++ "u" (str.++ "z" (str.++ "\u{09}" (str.++ "3" (str.++ "8" (str.++ "8" (str.++ "2" "")))))))))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.opt (re.++ ((_ re.loop 2 2) (re.union (re.range "A" "Z")(re.union (re.range "a" "z") (re.range "|" "|"))))(re.++ (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))(re.++ ((_ re.loop 2 2) (re.range "0" "9"))(re.++ (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))(re.++ ((_ re.loop 1 2) (re.union (re.range "A" "Z")(re.union (re.range "a" "z") (re.range "|" "|"))))(re.++ (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))) ((_ re.loop 1 4) (re.range "0" "9")))))))))(re.++ (re.opt (re.++ ((_ re.loop 3 3) (re.union (re.range "A" "Z")(re.union (re.range "a" "z") (re.range "|" "|"))))(re.++ (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))) ((_ re.loop 1 4) (re.range "0" "9"))))) (str.to_re ""))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "Q" (str.++ "@" (str.++ "\u{c2}" (str.++ "-" (str.++ "\u{aa}" (str.++ "\u{fe}" (str.++ "." (str.++ "\u{f6}" (str.++ "x" ""))))))))))

(define-fun Witness2 () String (str.++ "\u{aa}" (str.++ "@" (str.++ "-" (str.++ "5" (str.++ "8" (str.++ "." (str.++ "U" (str.++ "4" (str.++ "\u{b5}" (str.++ "-" (str.++ "." (str.++ "a" (str.++ "A" (str.++ "0" "")))))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.+ (re.union (re.range "-" ".")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))))(re.++ (re.range "@" "@")(re.++ (re.+ (re.++ (re.+ (re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))) (re.range "." ".")))(re.++ ((_ re.loop 2 3) (re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))) (str.to_re ""))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "d" ""))

(define-fun Witness2 () String (str.++ "C" ""))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.+ (re.union (re.range " " " ")(re.union (re.range "'" "'")(re.union (re.range "-" "-")(re.union (re.range "A" "Z") (re.range "a" "z")))))) (str.to_re "")))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "$" (str.++ "C" (str.++ "0" (str.++ ":" (str.++ "$" (str.++ "g" (str.++ "8" ""))))))))

(define-fun Witness2 () String (str.++ "N" (str.++ "5" (str.++ "8" (str.++ ":" (str.++ "K" (str.++ "9" (str.++ "7" ""))))))))

(assert (= regexA (re.union (re.++ (str.to_re "")(re.++ ((_ re.loop 1 2) (re.range "A" "Z"))(re.++ (re.+ (re.range "0" "9"))(re.++ (re.range ":" ":")(re.++ ((_ re.loop 1 2) (re.range "A" "Z"))(re.++ (re.+ (re.range "0" "9")) (str.to_re "")))))))(re.union (re.++ (str.to_re "")(re.++ (re.range "$" "$")(re.++ ((_ re.loop 1 2) (re.union (re.range "A" "Z") (re.range "a" "z")))(re.++ (re.+ (re.range "0" "9"))(re.++ (str.to_re (str.++ ":" (str.++ "$" "")))(re.++ ((_ re.loop 1 2) (re.union (re.range "A" "Z") (re.range "a" "z")))(re.++ (re.+ (re.range "0" "9")) (str.to_re "")))))))) (re.++ (str.to_re "")(re.++ (re.range "$" "$")(re.++ ((_ re.loop 1 2) (re.union (re.range "A" "Z") (re.range "a" "z")))(re.++ (re.range "$" "$")(re.++ (re.+ (re.range "0" "9"))(re.++ (str.to_re (str.++ ":" (str.++ "$" "")))(re.++ ((_ re.loop 1 2) (re.union (re.range "A" "Z") (re.range "a" "z")))(re.++ (re.range "$" "$")(re.++ (re.+ (re.range "0" "9")) (str.to_re ""))))))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "+" (str.++ "9" (str.++ "9" (str.++ "3" (str.++ "8" (str.++ "8" (str.++ "4" (str.++ "2" (str.++ "8" (str.++ "9" (str.++ "9" ""))))))))))))

(define-fun Witness2 () String (str.++ "+" (str.++ "2" (str.++ "9" (str.++ "9" (str.++ "3" (str.++ "0" (str.++ "6" (str.++ "8" "")))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.++ (re.range "+" "+")(re.++ (re.++ ((_ re.loop 2 2) (re.range "0" "9")) (re.* (re.range "0" "9")))(re.++ (re.++ ((_ re.loop 4 4) (re.range "0" "9")) (re.* (re.range "0" "9"))) (re.* (re.range "0" "9")))))(re.++ (re.opt (re.++ (re.opt (re.range "x" "x")) (re.+ (re.range "0" "9")))) (str.to_re ""))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "\u{0b}" (str.++ "\u{a0}" (str.++ "b" ""))))

(define-fun Witness2 () String (str.++ " " (str.++ "\u{a0}" "")))

(assert (= regexA (re.++ (str.to_re "")(re.++ ((_ re.loop 1 50) (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "'" "'")(re.union (re.range "." ".")(re.union (re.range "A" "Z")(re.union (re.range "a" "z")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))))))) (str.to_re "")))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "A" (str.++ "A" (str.++ "R" (str.++ "K" (str.++ "8" (str.++ "Z" (str.++ "Y" (str.++ "4" (str.++ "4" (str.++ "H" (str.++ "Z" (str.++ "X" "")))))))))))))

(define-fun Witness2 () String (str.++ "T" (str.++ "C" (str.++ "X" (str.++ "U" (str.++ "9" (str.++ "8" (str.++ "4" (str.++ "1" (str.++ "X" (str.++ "Z" (str.++ "8" (str.++ "W" (str.++ "X" (str.++ "V" "")))))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ ((_ re.loop 3 3) (re.range "A" "Z"))(re.++ ((_ re.loop 8 12) (re.union (re.range "0" "9") (re.range "A" "Z"))) (str.to_re ""))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "\u{b5}" (str.++ "g" (str.++ "z" (str.++ "@" (str.++ "m" (str.++ "." (str.++ "u" (str.++ "w" "")))))))))

(define-fun Witness2 () String (str.++ "\u{b5}" (str.++ "8" (str.++ "\u{b5}" (str.++ "U" (str.++ "Z" (str.++ "-" (str.++ "@" (str.++ "\u{aa}" (str.++ "-" (str.++ "K" (str.++ "." (str.++ "w" (str.++ "y" ""))))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))(re.++ (re.* (re.union (re.range "-" ".")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))))(re.++ (re.range "@" "@")(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))(re.++ (re.union (re.++ (re.range "-" "-") (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))) (re.* (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))))(re.++ (re.range "." ".")(re.++ ((_ re.loop 2 3) (re.range "a" "z")) (str.to_re "")))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "+" (str.++ "8" (str.++ "0" (str.++ "-" (str.++ "0" (str.++ "9" (str.++ "9" (str.++ "8" (str.++ "0" (str.++ "9" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "8" "")))))))))))))))

(define-fun Witness2 () String (str.++ "8" (str.++ "3" (str.++ "9" (str.++ "9" (str.++ "9" (str.++ "4" (str.++ "8" (str.++ "2" (str.++ "1" (str.++ "8" "")))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.opt (re.++ (re.opt (re.range "+" "+")) (re.++ ((_ re.loop 2 2) (re.range "0" "9")) (re.range "-" "-"))))(re.++ ((_ re.loop 10 10) (re.range "0" "9")) (str.to_re ""))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "I" (str.++ "\u{d3}" (str.++ "-" (str.++ "\u{eb}" (str.++ "\u{17}" (str.++ "y" (str.++ "o" (str.++ "u" (str.++ "r" (str.++ "d" (str.++ "o" (str.++ "m" (str.++ "a" (str.++ "i" (str.++ "n" (str.++ "," (str.++ "c" (str.++ "o" (str.++ "m" ""))))))))))))))))))))

(define-fun Witness2 () String (str.++ "x" (str.++ "\u{e1}" (str.++ "\u{09}" (str.++ "y" (str.++ "o" (str.++ "u" (str.++ "r" (str.++ "d" (str.++ "o" (str.++ "m" (str.++ "a" (str.++ "i" (str.++ "n" (str.++ "\u{ec}" (str.++ "c" (str.++ "o" (str.++ "m" ""))))))))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.* (re.union (re.range "\u{00}" "\u{09}") (re.range "\u{0b}" "\u{ff}")))(re.++ (re.++ (str.to_re (str.++ "y" (str.++ "o" (str.++ "u" (str.++ "r" (str.++ "d" (str.++ "o" (str.++ "m" (str.++ "a" (str.++ "i" (str.++ "n" "")))))))))))(re.++ (re.union (re.range "\u{00}" "\u{09}") (re.range "\u{0b}" "\u{ff}")) (str.to_re (str.++ "c" (str.++ "o" (str.++ "m" ""))))))(re.++ (re.* (re.union (re.range "\u{00}" "\u{09}") (re.range "\u{0b}" "\u{ff}"))) (str.to_re "")))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "8" (str.++ "9" (str.++ "." (str.++ "2" (str.++ "9" (str.++ "%" "")))))))

(define-fun Witness2 () String (str.++ "1" (str.++ "0" (str.++ "0" (str.++ "." (str.++ "0" (str.++ " " (str.++ "%" ""))))))))

(assert (= regexA (re.union (re.++ (str.to_re "")(re.++ (str.to_re (str.++ "1" (str.++ "0" (str.++ "0" ""))))(re.++ (re.opt (re.++ (re.range "." ".") ((_ re.loop 0 2) (re.range "0" "0"))))(re.++ (re.* (re.range " " " "))(re.++ (re.opt (re.range "%" "%")) (str.to_re "")))))) (re.++ (str.to_re "")(re.++ ((_ re.loop 1 2) (re.range "0" "9"))(re.++ (re.opt (re.++ (re.range "." ".") ((_ re.loop 1 2) (re.range "0" "9"))))(re.++ (re.* (re.range " " " "))(re.++ (re.opt (re.range "%" "%")) (str.to_re "")))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "L" (str.++ "V" (str.++ "-" (str.++ "2" (str.++ "4" (str.++ "5" (str.++ "8" ""))))))))

(define-fun Witness2 () String (str.++ "L" (str.++ "V" (str.++ "-" (str.++ "6" (str.++ "4" (str.++ "8" (str.++ "8" ""))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (str.to_re (str.++ "L" (str.++ "V" (str.++ "-" ""))))(re.++ ((_ re.loop 4 4) (re.range "0" "9")) (str.to_re ""))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "3" (str.++ "0" "")))

(define-fun Witness2 () String (str.++ "3" (str.++ "1" "")))

(assert (= regexA (re.union (re.++ (str.to_re "")(re.++ (re.opt (re.range "0" "2"))(re.++ (re.range "1" "9") (str.to_re "")))) (re.++ (str.to_re "")(re.++ (re.range "3" "3")(re.++ (re.range "0" "1") (str.to_re "")))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "1" (str.++ "1" (str.++ "/" (str.++ "0" (str.++ "1" (str.++ "/" (str.++ "0" (str.++ "1" "")))))))))

(define-fun Witness2 () String (str.++ "5" (str.++ "/" (str.++ "1" (str.++ "/" (str.++ "1" (str.++ "7" (str.++ "6" (str.++ "5" "")))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.union (re.++ (re.opt (re.range "0" "0")) (re.range "1" "9")) (re.++ (re.range "1" "1") (re.range "0" "2")))(re.++ (re.range "/" "/")(re.++ (re.union (re.++ (re.opt (re.range "0" "0")) (re.range "1" "9"))(re.union (re.++ (re.range "1" "2") (re.range "0" "9")) (re.++ (re.range "3" "3") (re.range "0" "1"))))(re.++ (re.range "/" "/")(re.++ (re.union (re.++ (re.range "0" "0") (re.range "1" "9"))(re.union (re.++ (re.range "1" "9") (re.range "0" "9"))(re.union (re.++ (str.to_re (str.++ "1" (str.++ "7" (str.++ "5" "")))) (re.range "3" "9"))(re.union (re.++ (str.to_re (str.++ "1" (str.++ "7" "")))(re.++ (re.range "6" "9") (re.range "0" "9")))(re.union (re.++ (re.range "1" "1")(re.++ (re.range "8" "9") ((_ re.loop 2 2) (re.range "0" "9")))) (re.++ (re.range "2" "9") ((_ re.loop 3 3) (re.range "0" "9")))))))) (str.to_re "")))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "0" (str.++ "5" (str.++ "\u{85}" (str.++ "M" (str.++ "A" (str.++ "R" (str.++ "1" (str.++ "9" (str.++ "8" (str.++ "0" (str.++ "2" ""))))))))))))

(define-fun Witness2 () String (str.++ "3" (str.++ "1" (str.++ "\u{a0}" (str.++ "J" (str.++ "U" (str.++ "N" (str.++ "}" (str.++ "8" (str.++ "9" (str.++ "5" (str.++ "5" ""))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.union (re.++ (re.range "3" "3") (re.range "0" "1"))(re.union (re.++ (re.range "2" "2") (re.range "0" "9"))(re.union (re.++ (re.range "1" "1") (re.range "0" "9")) (re.++ (re.range "0" "0") (re.range "1" "9")))))(re.++ (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "-" "-")(re.union (re.range "/" "/")(re.union (re.range "1" "1")(re.union (re.range "{" "}")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))))))(re.++ (re.union (str.to_re (str.++ "J" (str.++ "a" (str.++ "n" ""))))(re.union (str.to_re (str.++ "J" (str.++ "A" (str.++ "N" ""))))(re.union (str.to_re (str.++ "F" (str.++ "e" (str.++ "b" ""))))(re.union (str.to_re (str.++ "F" (str.++ "E" (str.++ "B" ""))))(re.union (str.to_re (str.++ "M" (str.++ "a" (str.++ "r" ""))))(re.union (str.to_re (str.++ "M" (str.++ "A" (str.++ "R" ""))))(re.union (str.to_re (str.++ "A" (str.++ "p" (str.++ "r" ""))))(re.union (str.to_re (str.++ "A" (str.++ "P" (str.++ "R" ""))))(re.union (str.to_re (str.++ "M" (str.++ "a" (str.++ "y" ""))))(re.union (str.to_re (str.++ "M" (str.++ "A" (str.++ "Y" ""))))(re.union (str.to_re (str.++ "J" (str.++ "u" (str.++ "n" ""))))(re.union (str.to_re (str.++ "J" (str.++ "U" (str.++ "N" ""))))(re.union (str.to_re (str.++ "J" (str.++ "u" (str.++ "l" ""))))(re.union (str.to_re (str.++ "J" (str.++ "U" (str.++ "L" ""))))(re.union (str.to_re (str.++ "A" (str.++ "u" (str.++ "g" ""))))(re.union (str.to_re (str.++ "A" (str.++ "U" (str.++ "G" ""))))(re.union (str.to_re (str.++ "S" (str.++ "e" (str.++ "p" ""))))(re.union (str.to_re (str.++ "S" (str.++ "E" (str.++ "P" ""))))(re.union (str.to_re (str.++ "O" (str.++ "c" (str.++ "t" ""))))(re.union (str.to_re (str.++ "O" (str.++ "C" (str.++ "T" ""))))(re.union (str.to_re (str.++ "N" (str.++ "o" (str.++ "v" ""))))(re.union (str.to_re (str.++ "N" (str.++ "O" (str.++ "V" ""))))(re.union (str.to_re (str.++ "D" (str.++ "e" (str.++ "c" "")))) (str.to_re (str.++ "D" (str.++ "E" (str.++ "C" "")))))))))))))))))))))))))))(re.++ (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "-" "-")(re.union (re.range "/" "/")(re.union (re.range "1" "1")(re.union (re.range "{" "}")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))))))(re.++ ((_ re.loop 4 4) (re.range "0" "9")) (str.to_re "")))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "3" (str.++ "1" (str.++ "." (str.++ "0" (str.++ "8" (str.++ "." (str.++ "8" (str.++ "8" (str.++ "9" (str.++ "2" (str.++ "\u{85}" (str.++ "1" (str.++ "1" (str.++ ":" (str.++ "4" (str.++ "9" (str.++ ":" (str.++ "4" (str.++ "8" (str.++ "." (str.++ "2" (str.++ "8" (str.++ "9" (str.++ "9" (str.++ "2" (str.++ "8" (str.++ "8" ""))))))))))))))))))))))))))))

(define-fun Witness2 () String (str.++ "1" (str.++ "5" (str.++ "." (str.++ "0" (str.++ "8" (str.++ "." (str.++ "8" (str.++ "8" (str.++ "8" (str.++ "1" (str.++ " " (str.++ "0" (str.++ "2" (str.++ ":" (str.++ "5" (str.++ "3" (str.++ ":" (str.++ "4" (str.++ "9" (str.++ "." (str.++ "0" (str.++ "1" (str.++ "8" (str.++ "9" (str.++ "8" (str.++ "9" (str.++ "0" ""))))))))))))))))))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.union (re.++ (re.union (re.++ (re.union (re.++ (re.range "0" "0") (re.range "1" "9"))(re.union (re.++ (re.range "1" "1") (re.range "0" "9")) (re.++ (re.range "2" "2") (re.range "0" "8"))))(re.++ (re.range "." ".") (re.union (re.++ (re.range "0" "0") (re.range "1" "9")) (re.++ (re.range "1" "1") (re.range "0" "2")))))(re.union (re.++ (re.union (str.to_re (str.++ "2" (str.++ "9" ""))) (str.to_re (str.++ "3" (str.++ "0" ""))))(re.++ (re.range "." ".") (re.union (re.++ (re.range "0" "0") (re.union (re.range "1" "1") (re.range "3" "9"))) (re.++ (re.range "1" "1") (re.range "0" "2"))))) (re.++ (str.to_re (str.++ "3" (str.++ "1" "")))(re.++ (re.range "." ".") (re.union (re.++ (re.range "0" "0") (re.union (re.range "1" "1")(re.union (re.range "3" "3")(re.union (re.range "5" "5") (re.range "7" "8"))))) (re.++ (re.range "1" "1") (re.union (re.range "0" "0") (re.range "2" "2"))))))))(re.++ (re.range "." ".") ((_ re.loop 4 4) (re.range "0" "9")))) (re.++ (str.to_re (str.++ "2" (str.++ "9" "")))(re.++ (re.range "." ".")(re.++ (str.to_re (str.++ "0" (str.++ "2" "")))(re.++ (re.range "." ".")(re.++ ((_ re.loop 2 2) (re.range "0" "9")) (re.union (re.++ (re.union (re.range "0" "0")(re.union (re.range "2" "2")(re.union (re.range "4" "4")(re.union (re.range "6" "6") (re.range "8" "8"))))) (re.union (re.range "0" "0")(re.union (re.range "4" "4") (re.range "8" "8")))) (re.++ (re.union (re.range "1" "1")(re.union (re.range "3" "3")(re.union (re.range "5" "5")(re.union (re.range "7" "7") (re.range "9" "9"))))) (re.union (re.range "2" "2") (re.range "6" "6"))))))))))(re.++ (re.++ (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))(re.++ (re.union (re.++ (re.range "0" "0") (re.range "0" "9"))(re.union (re.++ (re.range "1" "1") (re.range "0" "9")) (re.++ (re.range "2" "2") (re.range "0" "3"))))(re.++ (re.range ":" ":")(re.++ (re.++ (re.range "0" "5") (re.range "0" "9"))(re.++ (re.range ":" ":")(re.++ (re.++ (re.range "0" "5") (re.range "0" "9"))(re.++ (re.range "." ".") ((_ re.loop 7 7) (re.range "0" "9"))))))))) (str.to_re ""))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "0" (str.++ "8" (str.++ "8" (str.++ "6" (str.++ "8" (str.++ "9" (str.++ "8" (str.++ "0" (str.++ "0" ""))))))))))

(define-fun Witness2 () String (str.++ "0" (str.++ "1" (str.++ "0" (str.++ "5" (str.++ "8" (str.++ "7" (str.++ "8" (str.++ "8" (str.++ "6" ""))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.range "0" "0")(re.++ (re.range "1" "9")(re.++ ((_ re.loop 7 8) (re.range "0" "9")) (str.to_re "")))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "D" (str.++ "C" (str.++ "=" (str.++ "\u{85}" (str.++ "\u{0d}" (str.++ "D" (str.++ "C" (str.++ "=" (str.++ "'" (str.++ "\u{c4}" (str.++ "," ""))))))))))))

(define-fun Witness2 () String (str.++ "D" (str.++ "C" (str.++ "=" (str.++ "\u{85}" (str.++ "," (str.++ "D" (str.++ "C" (str.++ "=" (str.++ "&" (str.++ "," "")))))))))))

(assert (= regexA (re.union (re.++ (str.to_re "") (re.++ (re.+ (re.++ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))(re.++ (re.opt (re.++ ((_ re.loop 0 61) (re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z"))))) (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z"))))) (re.range "." "."))))(re.++ ((_ re.loop 2 6) (re.union (re.range "A" "Z") (re.range "a" "z")))(re.++ (re.range "/" "/") (re.++ ((_ re.loop 2 2) (re.++ (str.to_re (str.++ "D" (str.++ "C" (str.++ "=" ""))))(re.++ (re.+ (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "&" "'")(re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range ";" ";")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{85}" "\u{85}")(re.union (re.range "\u{a0}" "\u{a0}")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))))))))) (re.* (re.range "," ","))))) (re.* (re.++ (str.to_re (str.++ "D" (str.++ "C" (str.++ "=" ""))))(re.++ (re.+ (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "&" "'")(re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range ";" ";")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{85}" "\u{85}")(re.union (re.range "\u{a0}" "\u{a0}")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))))))))) (re.* (re.range "," ","))))))))))(re.union (re.++ (re.union ((_ re.loop 1 2) (re.range "0" "9"))(re.union (re.++ (re.range "1" "1")(re.++ (re.range "0" "9") (re.range "0" "9")))(re.union (re.++ (re.range "2" "2")(re.++ (re.range "0" "4") (re.range "0" "9"))) (re.++ (str.to_re (str.++ "2" (str.++ "5" ""))) (re.range "0" "5")))))(re.++ (re.range "." ".")(re.++ (re.union ((_ re.loop 1 2) (re.range "0" "9"))(re.union (re.++ (re.range "1" "1")(re.++ (re.range "0" "9") (re.range "0" "9")))(re.union (re.++ (re.range "2" "2")(re.++ (re.range "0" "4") (re.range "0" "9"))) (re.++ (str.to_re (str.++ "2" (str.++ "5" ""))) (re.range "0" "5")))))(re.++ (re.range "." ".")(re.++ (re.union ((_ re.loop 1 2) (re.range "0" "9"))(re.union (re.++ (re.range "1" "1")(re.++ (re.range "0" "9") (re.range "0" "9")))(re.union (re.++ (re.range "2" "2")(re.++ (re.range "0" "4") (re.range "0" "9"))) (re.++ (str.to_re (str.++ "2" (str.++ "5" ""))) (re.range "0" "5")))))(re.++ (re.range "." ".")(re.++ (re.union ((_ re.loop 1 2) (re.range "0" "9"))(re.union (re.++ (re.range "1" "1")(re.++ (re.range "0" "9") (re.range "0" "9")))(re.union (re.++ (re.range "2" "2")(re.++ (re.range "0" "4") (re.range "0" "9"))) (re.++ (str.to_re (str.++ "2" (str.++ "5" ""))) (re.range "0" "5")))))(re.++ (re.range "/" "/") (re.++ ((_ re.loop 2 2) (re.++ (str.to_re (str.++ "D" (str.++ "C" (str.++ "=" ""))))(re.++ (re.+ (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "&" "'")(re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range ";" ";")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{85}" "\u{85}")(re.union (re.range "\u{a0}" "\u{a0}")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))))))))) (re.* (re.range "," ","))))) (re.* (re.++ (str.to_re (str.++ "D" (str.++ "C" (str.++ "=" ""))))(re.++ (re.+ (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "&" "'")(re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range ";" ";")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{85}" "\u{85}")(re.union (re.range "\u{a0}" "\u{a0}")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))))))))) (re.* (re.range "," ",")))))))))))))) (re.++ (re.++ ((_ re.loop 2 2) (re.++ (str.to_re (str.++ "D" (str.++ "C" (str.++ "=" ""))))(re.++ (re.+ (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "&" "'")(re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range ";" ";")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{85}" "\u{85}")(re.union (re.range "\u{a0}" "\u{a0}")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))))))))) (re.* (re.range "," ","))))) (re.* (re.++ (str.to_re (str.++ "D" (str.++ "C" (str.++ "=" ""))))(re.++ (re.+ (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "&" "'")(re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range ";" ";")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{85}" "\u{85}")(re.union (re.range "\u{a0}" "\u{a0}")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))))))))) (re.* (re.range "," ",")))))) (str.to_re ""))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "+" (str.++ "4" (str.++ "8" (str.++ "\u{0d}" (str.++ "9" (str.++ "1" (str.++ "5" (str.++ "-" (str.++ "2" (str.++ "9" (str.++ "5" (str.++ " " (str.++ "\u{85}" (str.++ "\u{09}" (str.++ "\u{85}" (str.++ "6" (str.++ "7" (str.++ "9" "")))))))))))))))))))

(define-fun Witness2 () String (str.++ "+" (str.++ "4" (str.++ "8" (str.++ "\u{a0}" (str.++ "\u{85}" (str.++ "\u{a0}" (str.++ " " (str.++ "9" (str.++ "2" (str.++ "9" (str.++ "9" (str.++ "0" (str.++ "4" (str.++ "8" (str.++ "8" (str.++ "2" "")))))))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.opt (re.++ (str.to_re (str.++ "+" (str.++ "4" (str.++ "8" "")))) (re.+ (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))))(re.++ ((_ re.loop 3 3) (re.range "0" "9"))(re.++ (re.union (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))) (re.range "-" "-"))(re.++ ((_ re.loop 3 3) (re.range "0" "9"))(re.++ (re.union (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))) (re.range "-" "-"))(re.++ ((_ re.loop 3 3) (re.range "0" "9")) (str.to_re ""))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "7" (str.++ "9" (str.++ "9" (str.++ "-" (str.++ "8" (str.++ "4" (str.++ "9" (str.++ "-" (str.++ "9" (str.++ "8" (str.++ "8" (str.++ "9" "")))))))))))))

(define-fun Witness2 () String (str.++ "8" (str.++ "8" (str.++ "9" (str.++ "-" (str.++ "3" (str.++ "6" (str.++ "6" (str.++ "-" (str.++ "2" (str.++ "9" (str.++ "4" (str.++ "6" "")))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.range "2" "9")(re.++ ((_ re.loop 2 2) (re.range "0" "9"))(re.++ (re.range "-" "-")(re.++ ((_ re.loop 3 3) (re.range "0" "9"))(re.++ (re.range "-" "-")(re.++ ((_ re.loop 4 4) (re.range "0" "9")) (str.to_re ""))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "-" (str.++ "0" "")))

(define-fun Witness2 () String (str.++ "-" (str.++ "." (str.++ "9" ""))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.opt (re.range "-" "-"))(re.++ (re.union (re.++ (re.range "1" "9")(re.++ (re.* (re.range "0" "9")) (re.opt (re.++ (re.range "." ".") ((_ re.loop 0 2) (re.range "0" "9"))))))(re.union (re.++ (re.range "0" "0") (re.opt (re.++ (re.range "." ".") ((_ re.loop 0 2) (re.range "0" "9"))))) (re.++ (re.range "." ".") ((_ re.loop 1 2) (re.range "0" "9"))))) (str.to_re ""))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "0" (str.++ "2" (str.++ "1" (str.++ "1" (str.++ "6" (str.++ "8" (str.++ "3" (str.++ "7" (str.++ "9" ""))))))))))

(define-fun Witness2 () String (str.++ "0" (str.++ "2" (str.++ "1" (str.++ "8" (str.++ "4" (str.++ "9" (str.++ "2" (str.++ "3" (str.++ "1" (str.++ "5" "")))))))))))

(assert (= regexA (re.++ (re.++ (str.to_re "")(re.++ (str.to_re (str.++ "0" (str.++ "2" ""))) (re.union (re.range "1" "1")(re.union (re.range "5" "5")(re.union (re.range "7" "7") (re.range "9" "9")))))) (re.++ ((_ re.loop 6 7) (re.range "0" "9")) (str.to_re "")))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "7" (str.++ "8" (str.++ "8" (str.++ "0" (str.++ "0" (str.++ "\u{a0}" (str.++ "9" (str.++ "8" (str.++ "8" (str.++ "2" (str.++ "\u{0a}" (str.++ "6" (str.++ "9" ""))))))))))))))

(define-fun Witness2 () String (str.++ "8" (str.++ "9" (str.++ "9" (str.++ "8" (str.++ "4" (str.++ " " (str.++ "9" (str.++ "3" (str.++ "9" (str.++ "9" (str.++ "\u{a0}" (str.++ "1" (str.++ "8" ""))))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ ((_ re.loop 5 5) (re.range "0" "9"))(re.++ (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "-" "-")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ ((_ re.loop 4 4) (re.range "0" "9"))(re.++ (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "-" "-")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ ((_ re.loop 2 2) (re.range "0" "9")) (str.to_re "")))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "8" (str.++ "E" (str.++ ":" ""))))

(define-fun Witness2 () String (str.++ ":" (str.++ "\u{bc}" (str.++ "c" ""))))

(assert (= regexA (re.++ (re.++ (str.to_re "")(re.++ (re.* (re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range ";" ";")(re.union (re.range "=" "=") (re.range "A" "Z")))))) (re.range ":" ":"))) (re.* (re.union (re.range "\u{00}" "\u{09}") (re.range "\u{0b}" "\u{ff}"))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "5" (str.++ "5" (str.++ "'" (str.++ "9" (str.++ "&" (str.++ "q" (str.++ "u" (str.++ "o" (str.++ "t" (str.++ ";" "")))))))))))

(define-fun Witness2 () String (str.++ "2" (str.++ "'" (str.++ "1" (str.++ "0" (str.++ "&" (str.++ "q" (str.++ "u" (str.++ "o" (str.++ "t" (str.++ ";" "")))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.opt (re.range "0" "9"))(re.++ (re.range "0" "9")(re.++ (re.range "'" "'")(re.++ (re.union (re.range "0" "9") (re.++ (re.range "1" "1") (re.range "0" "1")))(re.++ (str.to_re (str.++ "&" (str.++ "q" (str.++ "u" (str.++ "o" (str.++ "t" (str.++ ";" ""))))))) (str.to_re "")))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "Z" (str.++ ":" (str.++ "\u{5c}" ""))))

(define-fun Witness2 () String (str.++ "u" (str.++ ":" (str.++ "\u{5c}" (str.++ "\u{aa}" (str.++ "\u{ce}" (str.++ "b" "")))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.union (re.++ (str.to_re (str.++ "\u{5c}" (str.++ "\u{5c}" "")))(re.++ (re.+ (re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))))(re.++ (re.range "\u{5c}" "\u{5c}")(re.++ (re.+ (re.union (re.range "!" "!")(re.union (re.range "#" ")")(re.union (re.range "-" ".")(re.union (re.range "0" "9")(re.union (re.range "@" "Z")(re.union (re.range "^" "{") (re.range "}" "~")))))))) (re.* (re.++ (re.+ (re.range " " " ")) (re.+ (re.union (re.range "!" "!")(re.union (re.range "#" ")")(re.union (re.range "-" ".")(re.union (re.range "0" "9")(re.union (re.range "@" "Z")(re.union (re.range "^" "{") (re.range "}" "~")))))))))))))) (re.++ (re.union (re.range "A" "Z") (re.range "a" "z")) (re.range ":" ":")))(re.++ (re.* (re.++ (re.range "\u{5c}" "\u{5c}")(re.++ (re.+ (re.union (re.range "\u{00}" "\u{1f}")(re.union (re.range "!" "!")(re.union (re.range "#" ")")(re.union (re.range "+" ".")(re.union (re.range "0" "9")(re.union (re.range ";" ";")(re.union (re.range "=" "=")(re.union (re.range "@" "[")(re.union (re.range "]" "{") (re.range "}" "\u{ff}"))))))))))) (re.* (re.++ (re.+ (re.range " " " ")) (re.+ (re.union (re.range "\u{00}" "\u{1f}")(re.union (re.range "!" "!")(re.union (re.range "#" ")")(re.union (re.range "+" ".")(re.union (re.range "0" "9")(re.union (re.range ";" ";")(re.union (re.range "=" "=")(re.union (re.range "@" "[")(re.union (re.range "]" "{") (re.range "}" "\u{ff}"))))))))))))))))(re.++ (re.opt (re.range "\u{5c}" "\u{5c}")) (str.to_re "")))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "+" (str.++ "1" (str.++ "\u{a0}" (str.++ "9" (str.++ "6" (str.++ "9" (str.++ "\u{0c}" (str.++ "3" (str.++ "9" (str.++ "3" (str.++ "\u{0a}" (str.++ "8" (str.++ "3" (str.++ "9" (str.++ "1" ""))))))))))))))))

(define-fun Witness2 () String (str.++ "1" (str.++ " " (str.++ "3" (str.++ "8" (str.++ "7" (str.++ "\u{a0}" (str.++ "5" (str.++ "6" (str.++ "9" (str.++ "\u{0c}" (str.++ "6" (str.++ "5" (str.++ "9" (str.++ "4" "")))))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.opt (re.union (re.++ (re.opt (re.range "+" "+"))(re.++ (re.range "1" "1")(re.++ (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))(re.++ (re.++ (re.range "2" "9")(re.++ (re.range "0" "8") (re.range "0" "9"))) (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))))) (re.++ (re.++ (re.range "2" "9")(re.++ (re.range "0" "8") (re.range "0" "9"))) (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))))(re.++ (re.++ (re.range "2" "9")(re.++ (re.range "0" "9") (re.range "0" "9")))(re.++ (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))(re.++ (re.++ (re.range "0" "9")(re.++ (re.range "0" "9")(re.++ (re.range "0" "9") (re.range "0" "9")))) (str.to_re ""))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "0" (str.++ "5" (str.++ "0" (str.++ "8" (str.++ "1" (str.++ "8" (str.++ "8" (str.++ "5" (str.++ "8" (str.++ "6" "")))))))))))

(define-fun Witness2 () String (str.++ "+" (str.++ "9" (str.++ "7" (str.++ "-" (str.++ "1" (str.++ "5" (str.++ "0" (str.++ "\u{a0}" (str.++ "-" (str.++ "1" (str.++ "3" (str.++ "0" (str.++ "3" (str.++ "4" (str.++ "8" (str.++ "3" "")))))))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.union (re.++ (str.to_re (str.++ "+" (str.++ "9" (str.++ "7" ""))))(re.++ (re.opt (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (re.opt (re.range "-" "-"))(re.++ (re.opt (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))) (re.range "1" "1"))))) (re.range "0" "0"))(re.++ (str.to_re (str.++ "5" (str.++ "0" "")))(re.++ (re.opt (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (re.opt (re.range "-" "-"))(re.++ (re.opt (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (re.range "1" "9")(re.++ ((_ re.loop 6 6) (re.range "0" "9")) (str.to_re "")))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "0" (str.++ "1" (str.++ "/" (str.++ "3" (str.++ "1" (str.++ "/" (str.++ "5" (str.++ "1" (str.++ "2" (str.++ "5" "")))))))))))

(define-fun Witness2 () String (str.++ "9" (str.++ "/" (str.++ "4" (str.++ "/" (str.++ "9" (str.++ "9" (str.++ "9" (str.++ "8" "")))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.union (re.++ (re.union (re.++ (re.union (re.++ (re.opt (re.range "0" "0")) (re.range "1" "9")) (re.++ (re.range "1" "1") (re.range "0" "2")))(re.++ (re.range "/" "/") (re.union (re.++ (re.opt (re.range "0" "0")) (re.range "1" "9"))(re.union (re.++ (re.range "1" "1") (re.range "0" "9")) (re.++ (re.range "2" "2") (re.range "0" "8"))))))(re.union (re.++ (re.union (re.++ (re.opt (re.range "0" "0")) (re.union (re.range "1" "1") (re.range "3" "9"))) (re.++ (re.range "1" "1") (re.range "0" "2")))(re.++ (re.range "/" "/") (re.union (str.to_re (str.++ "2" (str.++ "9" ""))) (str.to_re (str.++ "3" (str.++ "0" "")))))) (re.++ (re.union (re.++ (re.opt (re.range "0" "0")) (re.union (re.range "1" "1")(re.union (re.range "3" "3")(re.union (re.range "5" "5") (re.range "7" "8"))))) (re.++ (re.range "1" "1") (re.union (re.range "0" "0") (re.range "2" "2")))) (str.to_re (str.++ "/" (str.++ "3" (str.++ "1" "")))))))(re.++ (re.range "/" "/")(re.++ (re.union (str.to_re (str.++ "1" (str.++ "9" ""))) (re.++ (re.range "2" "9") (re.range "0" "9"))) ((_ re.loop 2 2) (re.range "0" "9"))))) (re.++ (re.opt (re.range "0" "0"))(re.++ (str.to_re (str.++ "2" (str.++ "/" (str.++ "2" (str.++ "9" (str.++ "/" "")))))) (re.union (re.++ (re.union (str.to_re (str.++ "1" (str.++ "9" ""))) (re.++ (re.range "2" "9") (re.range "0" "9"))) (re.union (re.++ (re.range "0" "0") (re.union (re.range "4" "4") (re.range "8" "8")))(re.union (re.++ (re.union (re.range "2" "2")(re.union (re.range "4" "4")(re.union (re.range "6" "6") (re.range "8" "8")))) (re.union (re.range "0" "0")(re.union (re.range "4" "4") (re.range "8" "8")))) (re.++ (re.union (re.range "1" "1")(re.union (re.range "3" "3")(re.union (re.range "5" "5")(re.union (re.range "7" "7") (re.range "9" "9"))))) (re.union (re.range "2" "2") (re.range "6" "6")))))) (re.++ (re.union (re.++ (re.union (re.range "2" "2")(re.union (re.range "4" "4")(re.union (re.range "6" "6") (re.range "8" "8")))) (re.union (re.range "0" "0")(re.union (re.range "4" "4") (re.range "8" "8")))) (re.++ (re.union (re.range "3" "3")(re.union (re.range "5" "5")(re.union (re.range "7" "7") (re.range "9" "9")))) (re.union (re.range "2" "2") (re.range "6" "6")))) (str.to_re (str.++ "0" (str.++ "0" "")))))))) (str.to_re "")))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "\u{cb}" (str.++ "9" (str.++ "8" (str.++ "8" (str.++ "8" (str.++ "8" (str.++ "8" (str.++ "\u{c8}" (str.++ "9" (str.++ "0" (str.++ "3" (str.++ "8" "")))))))))))))

(define-fun Witness2 () String (str.++ "9" (str.++ "5" (str.++ "1" (str.++ "\u{a4}" (str.++ "9" (str.++ "3" (str.++ "7" (str.++ "r" (str.++ "8" (str.++ "5" (str.++ "3" (str.++ "9" "")))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.opt (re.union (re.range "\u{00}" "/") (re.range ":" "\u{ff}")))(re.++ ((_ re.loop 3 3) (re.range "0" "9"))(re.++ (re.opt (re.union (re.range "\u{00}" "/") (re.range ":" "\u{ff}")))(re.++ (re.opt (re.union (re.range "\u{00}" "/") (re.range ":" "\u{ff}")))(re.++ ((_ re.loop 3 3) (re.range "0" "9"))(re.++ (re.opt (re.union (re.range "\u{00}" "/") (re.range ":" "\u{ff}")))(re.++ ((_ re.loop 4 4) (re.range "0" "9")) (str.to_re "")))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "A" (str.++ "J" (str.++ "9" (str.++ "9" (str.++ "V" ""))))))

(define-fun Witness2 () String (str.++ "Z" (str.++ "3" (str.++ "9" (str.++ "V" (str.++ "8" ""))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ ((_ re.loop 5 5) (re.union (re.range "0" "9") (re.range "A" "Z"))) (str.to_re "")))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "7" (str.++ "8" "")))

(define-fun Witness2 () String (str.++ "2" (str.++ "8" "")))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.range "1" "9")(re.++ (re.range "0" "9") (str.to_re ""))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "." (str.++ "8" "")))

(define-fun Witness2 () String (str.++ "1" (str.++ "." (str.++ "0" ""))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.opt (re.union (str.to_re (str.++ "$" (str.++ " " ""))) (re.range "$" "$")))(re.++ (re.union (re.++ (re.union (re.range "0" "0")(re.union (str.to_re (str.++ "0" (str.++ "0" "")))(re.union (re.++ (re.range "1" "9") (re.* (re.range "0" "9"))) (re.++ (re.range "1" "9")(re.++ ((_ re.loop 0 2) (re.range "0" "9")) (re.* (re.++ (re.range "," ",") ((_ re.loop 3 3) (re.range "0" "9"))))))))) (re.opt (re.++ (re.range "." ".") ((_ re.loop 1 4) (re.range "0" "9"))))) (re.++ (re.range "." ".") ((_ re.loop 1 4) (re.range "0" "9")))) (str.to_re ""))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "9" ""))

(define-fun Witness2 () String (str.++ "0" (str.++ "3" (str.++ "9" ""))))

(assert (= regexA (re.union (re.++ (str.to_re "")(re.++ (re.opt (re.range "0" "0"))(re.++ (re.opt (re.range "0" "9"))(re.++ (re.range "0" "9") (str.to_re ""))))) (re.++ (str.to_re "")(re.++ (str.to_re (str.++ "1" (str.++ "0" (str.++ "0" "")))) (str.to_re ""))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "1" ""))

(define-fun Witness2 () String (str.++ "1" (str.++ "4" (str.++ "9" ""))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.opt (re.union (re.range "+" "+") (re.range "-" "-")))(re.++ (re.+ (re.range "0" "9")) (str.to_re ""))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "1" (str.++ "1" (str.++ "/" (str.++ "3" (str.++ "1" (str.++ "/" (str.++ "8" (str.++ "0" (str.++ "8" (str.++ "6" (str.++ "\u{85}" (str.++ "1" (str.++ "2" (str.++ ":" (str.++ "2" (str.++ "3" (str.++ ":" (str.++ "5" (str.++ "9" (str.++ "\u{0c}" (str.++ "P" (str.++ "P" "")))))))))))))))))))))))

(define-fun Witness2 () String (str.++ "1" (str.++ "2" (str.++ "/" (str.++ "2" (str.++ "8" (str.++ "/" (str.++ "8" (str.++ "4" (str.++ "1" (str.++ "8" "")))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.union (re.++ (re.range "0" "0") (re.range "1" "9")) (re.++ (re.range "1" "1") (re.range "0" "2")))(re.++ (re.range "/" "/")(re.++ (re.union (re.++ (re.range "0" "0") (re.range "1" "9"))(re.union (re.++ (re.range "1" "2") (re.range "0" "9")) (re.++ (re.range "3" "3") (re.range "0" "1"))))(re.++ (re.range "/" "/")(re.++ ((_ re.loop 4 4) (re.range "0" "9"))(re.++ (re.opt (re.++ (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))) (re.++ (re.union (re.++ (re.range "0" "0") (re.range "1" "9")) (re.++ (re.range "1" "1") (re.range "0" "2")))(re.++ (re.range ":" ":")(re.++ (re.++ (re.range "0" "5") (re.range "0" "9"))(re.++ (re.union (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))) (re.++ (re.range ":" ":")(re.++ (re.++ (re.range "0" "5") (re.range "0" "9")) (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))))) ((_ re.loop 2 2) (re.union (re.range "A" "A")(re.union (re.range "M" "M")(re.union (re.range "P" "P") (re.range "|" "|"))))))))))) (str.to_re ""))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "9" (str.++ "." (str.++ "1" (str.++ "1" (str.++ "." (str.++ "2" (str.++ "0" (str.++ "8" (str.++ "4" ""))))))))))

(define-fun Witness2 () String (str.++ "0" (str.++ "3" (str.++ "." (str.++ "1" (str.++ "0" (str.++ "." (str.++ "2" (str.++ "0" (str.++ "0" (str.++ "0" "")))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.union (re.++ (re.union (re.++ (re.opt (re.range "0" "0")) (re.range "1" "9"))(re.union (re.++ (re.range "1" "2") (re.range "1" "9")) (re.++ (re.range "3" "3") (re.range "0" "1"))))(re.++ (re.range "." ".")(re.++ (re.union (re.++ (re.opt (re.range "0" "0")) (re.union (re.range "1" "1")(re.union (re.range "3" "3")(re.union (re.range "5" "5") (re.range "7" "8"))))) (re.++ (re.range "1" "1") (re.union (re.range "0" "0") (re.range "2" "2"))))(re.++ (str.to_re (str.++ "." (str.++ "2" (str.++ "0" "")))) ((_ re.loop 2 2) (re.range "0" "9"))))))(re.union (re.++ (re.union (re.++ (re.opt (re.range "0" "0")) (re.range "1" "9"))(re.union (re.++ (re.range "1" "2") (re.range "1" "9")) (str.to_re (str.++ "3" (str.++ "0" "")))))(re.++ (re.range "." ".")(re.++ (re.union (re.++ (re.opt (re.range "0" "0")) (re.union (re.range "1" "1") (re.range "3" "9"))) (re.++ (re.range "1" "1") (re.range "0" "2")))(re.++ (str.to_re (str.++ "." (str.++ "2" (str.++ "0" "")))) ((_ re.loop 2 2) (re.range "0" "9"))))))(re.union (re.++ (re.union (re.++ (re.opt (re.range "0" "0")) (re.range "1" "9"))(re.union (re.++ (re.range "1" "1") (re.range "1" "9")) (re.++ (re.range "2" "2") (re.range "0" "8"))))(re.++ (re.range "." ".")(re.++ (re.union (re.++ (re.opt (re.range "0" "0")) (re.range "1" "9")) (re.++ (re.range "1" "1") (re.range "0" "2")))(re.++ (str.to_re (str.++ "." (str.++ "2" (str.++ "0" "")))) ((_ re.loop 2 2) (re.range "0" "9")))))) (re.++ (re.union (re.++ (re.opt (re.range "0" "0")) (re.range "1" "9")) (re.++ (re.range "1" "2") (re.range "1" "9")))(re.++ (re.range "." ".")(re.++ (re.union (re.++ (re.opt (re.range "0" "0")) (re.range "1" "9")) (re.++ (re.range "1" "1") (re.range "0" "2")))(re.++ (str.to_re (str.++ "." (str.++ "2" (str.++ "0" "")))) (re.union (str.to_re (str.++ "0" (str.++ "0" "")))(re.union (str.to_re (str.++ "0" (str.++ "4" "")))(re.union (str.to_re (str.++ "0" (str.++ "8" "")))(re.union (str.to_re (str.++ "1" (str.++ "2" "")))(re.union (str.to_re (str.++ "1" (str.++ "6" "")))(re.union (str.to_re (str.++ "2" (str.++ "0" "")))(re.union (str.to_re (str.++ "2" (str.++ "4" "")))(re.union (str.to_re (str.++ "2" (str.++ "8" "")))(re.union (str.to_re (str.++ "3" (str.++ "2" "")))(re.union (str.to_re (str.++ "3" (str.++ "6" "")))(re.union (str.to_re (str.++ "4" (str.++ "0" "")))(re.union (str.to_re (str.++ "4" (str.++ "4" "")))(re.union (str.to_re (str.++ "4" (str.++ "8" "")))(re.union (str.to_re (str.++ "5" (str.++ "2" "")))(re.union (str.to_re (str.++ "5" (str.++ "6" "")))(re.union (str.to_re (str.++ "6" (str.++ "0" "")))(re.union (str.to_re (str.++ "6" (str.++ "4" "")))(re.union (str.to_re (str.++ "6" (str.++ "8" "")))(re.union (str.to_re (str.++ "7" (str.++ "2" "")))(re.union (str.to_re (str.++ "7" (str.++ "6" "")))(re.union (str.to_re (str.++ "8" (str.++ "0" "")))(re.union (str.to_re (str.++ "8" (str.++ "4" "")))(re.union (str.to_re (str.++ "8" (str.++ "8" "")))(re.union (str.to_re (str.++ "9" (str.++ "2" ""))) (str.to_re (str.++ "9" (str.++ "6" "")))))))))))))))))))))))))))))))))) (str.to_re "")))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "9" (str.++ "4" (str.++ "2" ""))))

(define-fun Witness2 () String (str.++ "8" (str.++ "8" (str.++ "8" ""))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.range "0" "9")(re.++ (re.opt (re.range "0" "9"))(re.++ (re.opt (re.range "0" "9")) (str.to_re "")))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "M" (str.++ "T" (str.++ "T" (str.++ "H" (str.++ "F" (str.++ "S" (str.++ "S" (str.++ "U" "")))))))))

(define-fun Witness2 () String (str.++ "M" (str.++ "W" (str.++ "T" (str.++ "H" (str.++ "F" (str.++ "S" "")))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.opt (re.range "M" "M"))(re.++ (re.opt (re.range "T" "T"))(re.++ (re.opt (re.range "W" "W"))(re.++ (re.opt (str.to_re (str.++ "T" (str.++ "H" ""))))(re.++ (re.opt (re.range "F" "F"))(re.++ (re.opt (re.range "S" "S"))(re.++ (re.opt (str.to_re (str.++ "S" (str.++ "U" "")))) (str.to_re "")))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "2" ""))

(define-fun Witness2 () String (str.++ "P" ""))

(assert (= regexA (re.++ (str.to_re "")(re.++ ((_ re.loop 1 255) (re.union (re.range "." ".")(re.union (re.range "0" "9")(re.union (re.range "@" "Z") (re.range "a" "z"))))) (str.to_re "")))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "U" (str.++ "B" (str.++ "8" (str.++ "3" (str.++ "9" (str.++ "Q" (str.++ "B" ""))))))))

(define-fun Witness2 () String (str.++ "J" (str.++ "E" (str.++ "8" (str.++ "2" (str.++ "9" (str.++ "A" (str.++ "U" ""))))))))

(assert (= regexA (re.union (re.++ (re.++ (re.union (re.++ (str.to_re "")(re.++ (re.union (re.range "B" "B")(re.union (re.range "E" "E")(re.union (re.range "G" "G")(re.union (re.range "L" "N") (re.range "S" "S")))))(re.++ (re.range "1" "9") (re.opt (re.range "0" "9")))))(re.union (re.++ (str.to_re "")(re.++ (re.range "W" "W") (re.range "2" "9")))(re.union (re.++ (str.to_re "")(re.++ (re.union (re.++ (re.range "A" "A") (re.union (re.range "B" "B") (re.range "L" "L")))(re.union (re.++ (re.range "B" "B") (re.union (re.range "A" "B")(re.union (re.range "D" "D")(re.union (re.range "H" "H")(re.union (re.range "L" "L")(re.union (re.range "N" "N") (re.range "R" "T")))))))(re.union (re.++ (re.range "C" "C") (re.union (re.range "A" "B")(re.union (re.range "F" "F")(re.union (re.range "H" "H")(re.union (re.range "M" "M")(re.union (re.range "O" "O")(re.union (re.range "R" "R")(re.union (re.range "T" "T") (re.range "V" "W")))))))))(re.union (re.++ (re.range "D" "D") (re.union (re.range "A" "A")(re.union (re.range "D" "E")(re.union (re.range "G" "H")(re.union (re.range "L" "L")(re.union (re.range "N" "N")(re.union (re.range "T" "T") (re.range "Y" "Y"))))))))(re.union (re.++ (re.range "E" "E") (re.union (re.range "H" "H")(re.union (re.range "N" "N") (re.range "X" "X"))))(re.union (re.++ (re.range "F" "F") (re.union (re.range "K" "K") (re.range "Y" "Y")))(re.union (re.++ (re.range "G" "G") (re.union (re.range "L" "L")(re.union (re.range "U" "U") (re.range "Y" "Y"))))(re.union (re.++ (re.range "H" "H") (re.union (re.range "A" "A")(re.union (re.range "D" "D")(re.union (re.range "G" "G")(re.union (re.range "P" "P")(re.union (re.range "R" "S")(re.union (re.range "U" "U") (re.range "X" "X"))))))))(re.union (re.++ (re.range "I" "I") (re.union (re.range "G" "G")(re.union (re.range "M" "M")(re.union (re.range "P" "P") (re.range "V" "V")))))(re.union (str.to_re (str.++ "J" (str.++ "E" "")))(re.union (re.++ (re.range "K" "K") (re.union (re.range "A" "A")(re.union (re.range "T" "T")(re.union (re.range "W" "W") (re.range "Y" "Y")))))(re.union (re.++ (re.range "L" "L") (re.union (re.range "A" "A")(re.union (re.range "D" "E")(re.union (re.range "L" "L")(re.union (re.range "N" "N")(re.union (re.range "S" "S") (re.range "U" "U")))))))(re.union (re.++ (re.range "M" "M") (re.union (re.range "E" "E") (re.range "K" "L")))(re.union (re.++ (re.range "N" "N") (re.union (re.range "E" "E")(re.union (re.range "G" "G")(re.union (re.range "N" "N")(re.union (re.range "P" "P")(re.union (re.range "R" "R") (re.range "W" "W")))))))(re.union (re.++ (re.range "O" "O") (re.union (re.range "L" "L") (re.range "X" "X")))(re.union (re.++ (re.range "P" "P") (re.union (re.range "A" "A")(re.union (re.range "E" "E")(re.union (re.range "H" "H")(re.union (re.range "L" "L")(re.union (re.range "O" "O") (re.range "R" "R")))))))(re.union (re.++ (re.range "R" "R") (re.union (re.range "G" "H") (re.range "M" "M")))(re.union (re.++ (re.range "S" "S") (re.union (re.range "A" "A")(re.union (re.range "E" "E")(re.union (re.range "G" "G")(re.union (re.range "K" "P")(re.union (re.range "R" "T")(re.union (re.range "W" "W") (re.range "Y" "Y"))))))))(re.union (re.++ (re.range "T" "T") (re.union (re.range "A" "A")(re.union (re.range "D" "D")(re.union (re.range "F" "F")(re.union (re.range "N" "N")(re.union (re.range "Q" "S") (re.range "W" "W")))))))(re.union (str.to_re (str.++ "U" (str.++ "B" "")))(re.union (re.++ (re.range "W" "W") (re.union (re.range "A" "A")(re.union (re.range "D" "D")(re.union (re.range "F" "F")(re.union (re.range "N" "N")(re.union (re.range "R" "S") (re.range "V" "V")))))))(re.union (str.to_re (str.++ "Y" (str.++ "O" ""))) (str.to_re (str.++ "Z" (str.++ "E" "")))))))))))))))))))))))))(re.++ (re.range "0" "9") (re.opt (re.range "0" "9")))))(re.union (re.++ (str.to_re "")(re.++ (str.to_re (str.++ "W" (str.++ "1" ""))) (re.union (re.range "0" "9")(re.union (re.range "A" "H")(re.union (re.range "J" "K")(re.union (re.range "S" "U") (re.range "W" "W"))))))) (re.++ (re.union (re.++ (str.to_re "")(re.++ (str.to_re (str.++ "W" (str.++ "C" ""))) (re.range "1" "2")))(re.union (re.++ (str.to_re "")(re.++ (str.to_re (str.++ "E" (str.++ "C" ""))) (re.range "1" "4"))) (re.++ (str.to_re "") (str.to_re (str.++ "S" (str.++ "W" (str.++ "1" ""))))))) (re.union (re.range "A" "B")(re.union (re.range "E" "E")(re.union (re.range "H" "H")(re.union (re.range "M" "N")(re.union (re.range "P" "P")(re.union (re.range "R" "R") (re.range "V" "Y"))))))))))))(re.++ (re.opt (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))) (re.++ (re.range "0" "9") ((_ re.loop 2 2) (re.union (re.range "A" "B")(re.union (re.range "D" "H")(re.union (re.range "J" "J")(re.union (re.range "L" "L")(re.union (re.range "N" "N")(re.union (re.range "P" "U") (re.range "W" "Z"))))))))))) (str.to_re "")) (re.++ (str.to_re "")(re.++ (str.to_re (str.++ "G" (str.++ "I" (str.++ "R" ""))))(re.++ (re.opt (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (str.to_re (str.++ "0" (str.++ "A" (str.++ "A" "")))) (str.to_re ""))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "5" (str.++ "b" (str.++ "8" (str.++ "\u{aa}" (str.++ "&" (str.++ "l" (str.++ "t" (str.++ ";" (str.++ "\u{fa}" (str.++ "@" (str.++ "-" (str.++ "9" (str.++ "." (str.++ "\u{b5}" (str.++ "\u{c4}" (str.++ "-" (str.++ "\u{fe}" (str.++ "\u{ba}" (str.++ "\u{e4}" (str.++ "\u{ca}" (str.++ "5" (str.++ "." (str.++ "c" (str.++ "\u{aa}" (str.++ "." (str.++ "\u{e7}" (str.++ "\u{b5}" (str.++ "." (str.++ "E" (str.++ "H" (str.++ "&" (str.++ "g" (str.++ "t" (str.++ ";" "")))))))))))))))))))))))))))))))))))

(define-fun Witness2 () String (str.++ "&" (str.++ "l" (str.++ "t" (str.++ ";" (str.++ "C" (str.++ "4" (str.++ "@" (str.++ "9" (str.++ "." (str.++ "\u{ea}" (str.++ "." (str.++ "Z" (str.++ "k" (str.++ "S" (str.++ "&" (str.++ "g" (str.++ "t" (str.++ ";" "")))))))))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.opt (re.union (re.+ (re.union (re.range " " " ")(re.union (re.range "-" ".")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))))) (re.++ (re.++ (str.to_re (str.++ "&" (str.++ "q" (str.++ "u" (str.++ "o" (str.++ "t" (str.++ ";" (str.++ "&" (str.++ "q" (str.++ "u" (str.++ "o" (str.++ "t" (str.++ ";" "")))))))))))))(re.++ (re.+ (re.union (re.range " " " ")(re.union (re.range "-" ".")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))))) (str.to_re (str.++ "&" (str.++ "q" (str.++ "u" (str.++ "o" (str.++ "t" (str.++ ";" (str.++ "&" (str.++ "q" (str.++ "u" (str.++ "o" (str.++ "t" (str.++ ";" ""))))))))))))))) (re.range " " " "))))(re.++ (str.to_re (str.++ "&" (str.++ "l" (str.++ "t" (str.++ ";" "")))))(re.++ (re.+ (re.union (re.range "-" ".")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))))(re.++ (re.range "@" "@")(re.++ (re.union (re.++ (re.range "[" "[")(re.++ ((_ re.loop 3 3) (re.++ ((_ re.loop 1 3) (re.range "0" "9")) (re.range "." ".")))(re.++ ((_ re.loop 1 3) (re.range "0" "9")) (re.range "]" "]")))) (re.++ (re.+ (re.++ (re.+ (re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))) (re.range "." "."))) ((_ re.loop 2 4) (re.union (re.range "A" "Z") (re.range "a" "z")))))(re.++ (str.to_re (str.++ "&" (str.++ "g" (str.++ "t" (str.++ ";" ""))))) (str.to_re ""))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "T" (str.++ "h" (str.++ "u" ""))))

(define-fun Witness2 () String (str.++ "T" (str.++ "u" (str.++ "e" ""))))

(assert (= regexA (re.union (re.++ (str.to_re "")(re.++ (re.union (str.to_re (str.++ "S" (str.++ "u" (str.++ "n" ""))))(re.union (str.to_re (str.++ "M" (str.++ "o" (str.++ "n" ""))))(re.union (re.++ (re.range "T" "T") (re.union (str.to_re (str.++ "u" (str.++ "e" (str.++ "s" "")))) (str.to_re (str.++ "h" (str.++ "u" (str.++ "r" (str.++ "s" ""))))))) (str.to_re (str.++ "F" (str.++ "r" (str.++ "i" "")))))))(re.++ (re.opt (re.union (str.to_re (str.++ "d" (str.++ "a" (str.++ "y" "")))) (re.range "." "."))) (str.to_re ""))))(re.union (re.++ (str.to_re (str.++ "W" (str.++ "e" (str.++ "d" ""))))(re.++ (re.opt (re.union (re.range "." ".") (str.to_re (str.++ "n" (str.++ "e" (str.++ "s" (str.++ "d" (str.++ "a" (str.++ "y" ""))))))))) (str.to_re "")))(re.union (re.++ (str.to_re (str.++ "S" (str.++ "a" (str.++ "t" ""))))(re.++ (re.opt (re.union (re.range "." ".") (str.to_re (str.++ "u" (str.++ "r" (str.++ "d" (str.++ "a" (str.++ "y" "")))))))) (str.to_re ""))) (re.++ (re.range "T" "T")(re.++ (re.union (re.++ (re.range "u" "u") (re.opt (re.range "e" "e"))) (re.++ (re.range "h" "h")(re.++ (re.opt (re.range "u" "u")) (re.opt (re.range "r" "r")))))(re.++ (re.opt (re.range "." ".")) (str.to_re "")))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "1" (str.++ "9" (str.++ "2" (str.++ "." (str.++ "1" (str.++ "6" (str.++ "8" (str.++ "." (str.++ "3" ""))))))))))

(define-fun Witness2 () String (str.++ "9" (str.++ "2" "")))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.union (re.++ (str.to_re (str.++ "1" (str.++ "9" (str.++ "2" (str.++ "." (str.++ "1" (str.++ "6" (str.++ "8" (str.++ "." ""))))))))) (re.range "0" "9"))(re.union (re.++ (re.range "1" "9") (re.range "0" "9"))(re.union (re.++ (re.range "1" "2")(re.++ (re.range "0" "5")(re.++ (re.range "0" "5")(re.++ (re.range "." ".") (re.range "0" "9")))))(re.union (re.++ (re.range "1" "9") (re.range "0" "9")) (re.++ (re.range "1" "2")(re.++ (re.range "0" "5") (re.range "0" "5"))))))) (str.to_re "")))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "T" (str.++ "7" "")))

(define-fun Witness2 () String (str.++ "T" (str.++ "." (str.++ "Z" (str.++ "8" "")))))

(assert (= regexA (re.union (re.++ (str.to_re "")(re.++ (re.+ (re.union (re.range "A" "Z") (re.range "a" "z")))(re.++ (re.* (re.range "0" "9"))(re.++ (re.* (re.range "." "."))(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))) (str.to_re "")))))) (re.++ (str.to_re "")(re.++ (re.+ (re.union (re.range "A" "Z") (re.range "a" "z")))(re.++ (re.* (re.range "0" "9")) (str.to_re "")))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "6" (str.++ "8" (str.++ "8" (str.++ "8" (str.++ "\u{85}" (str.++ "k" (str.++ "Z" ""))))))))

(define-fun Witness2 () String (str.++ "3" (str.++ "8" (str.++ "9" (str.++ "5" (str.++ "p" (str.++ "P" "")))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.range "1" "9")(re.++ ((_ re.loop 3 3) (re.range "0" "9"))(re.++ (re.opt (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ ((_ re.loop 2 2) (re.union (re.range "A" "Z") (re.range "a" "z"))) (str.to_re ""))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "0" (str.++ "8" (str.++ ":" (str.++ "4" (str.++ "5" ""))))))

(define-fun Witness2 () String (str.++ "2" (str.++ ":" (str.++ "5" (str.++ "2" "")))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.union (re.++ (re.opt (re.range "0" "1")) (re.range "0" "9")) (re.++ (re.range "2" "2") (re.range "0" "3")))(re.++ (re.range ":" ":")(re.++ (re.++ (re.range "0" "5") (re.range "0" "9")) (str.to_re "")))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "9" (str.++ "8" (str.++ "8" (str.++ "2" (str.++ "-" (str.++ "1" (str.++ "1" (str.++ "0" (str.++ "9" ""))))))))))

(define-fun Witness2 () String (str.++ "2" (str.++ "0" (str.++ "6" (str.++ "9" (str.++ "-" (str.++ "1" (str.++ "2" (str.++ "-" (str.++ "4" ""))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.union (re.++ ((_ re.loop 2 2) (re.range "0" "9"))(re.++ (re.union (re.++ (re.union (re.range "0" "0")(re.union (re.range "2" "2")(re.union (re.range "4" "4")(re.union (re.range "6" "6") (re.range "8" "8"))))) (re.union (re.range "0" "0")(re.union (re.range "4" "4") (re.range "8" "8")))) (re.++ (re.union (re.range "1" "1")(re.union (re.range "3" "3")(re.union (re.range "5" "5")(re.union (re.range "7" "7") (re.range "9" "9"))))) (re.union (re.range "2" "2") (re.range "6" "6"))))(re.++ (re.opt (re.range "-" "-")) (re.union (re.++ (re.union (re.++ (re.opt (re.range "0" "0")) (re.union (re.range "1" "1")(re.union (re.range "3" "3")(re.union (re.range "5" "5") (re.range "7" "8"))))) (re.++ (re.range "1" "1") (re.union (re.range "0" "0") (re.range "2" "2"))))(re.++ (re.opt (re.range "-" "-")) (re.union (re.++ (re.opt (re.range "0" "0")) (re.range "1" "9"))(re.union (re.++ (re.range "1" "2") (re.range "0" "9")) (re.++ (re.range "3" "3") (re.range "0" "1"))))))(re.union (re.++ (re.union (re.++ (re.opt (re.range "0" "0")) (re.union (re.range "4" "4")(re.union (re.range "6" "6") (re.range "9" "9")))) (str.to_re (str.++ "1" (str.++ "1" ""))))(re.++ (re.opt (re.range "-" "-")) (re.union (re.++ (re.opt (re.range "0" "0")) (re.range "1" "9"))(re.union (re.++ (re.range "1" "2") (re.range "0" "9")) (str.to_re (str.++ "3" (str.++ "0" ""))))))) (re.++ (re.opt (re.range "0" "0"))(re.++ (re.range "2" "2")(re.++ (re.opt (re.range "-" "-")) (re.union (re.++ (re.opt (re.range "0" "0")) (re.range "1" "9")) (re.++ (re.range "1" "2") (re.range "0" "9"))))))))))) (re.++ ((_ re.loop 2 2) (re.range "0" "9"))(re.++ (re.union (re.++ (re.union (re.range "0" "0")(re.union (re.range "2" "2")(re.union (re.range "4" "4")(re.union (re.range "6" "6") (re.range "8" "8"))))) (re.union (re.range "1" "3")(re.union (re.range "5" "7") (re.range "9" "9")))) (re.++ (re.union (re.range "1" "1")(re.union (re.range "3" "3")(re.union (re.range "5" "5")(re.union (re.range "7" "7") (re.range "9" "9"))))) (re.union (re.range "0" "1")(re.union (re.range "3" "5") (re.range "7" "9")))))(re.++ (re.opt (re.range "-" "-")) (re.union (re.++ (re.union (re.++ (re.opt (re.range "0" "0")) (re.union (re.range "1" "1")(re.union (re.range "3" "3")(re.union (re.range "5" "5") (re.range "7" "8"))))) (re.++ (re.range "1" "1") (re.union (re.range "0" "0") (re.range "2" "2"))))(re.++ (re.opt (re.range "-" "-")) (re.union (re.++ (re.opt (re.range "0" "0")) (re.range "1" "9"))(re.union (re.++ (re.range "1" "2") (re.range "0" "9")) (re.++ (re.range "3" "3") (re.range "0" "1"))))))(re.union (re.++ (re.union (re.++ (re.opt (re.range "0" "0")) (re.union (re.range "4" "4")(re.union (re.range "6" "6") (re.range "9" "9")))) (str.to_re (str.++ "1" (str.++ "1" ""))))(re.++ (re.opt (re.range "-" "-")) (re.union (re.++ (re.opt (re.range "0" "0")) (re.range "1" "9"))(re.union (re.++ (re.range "1" "2") (re.range "0" "9")) (str.to_re (str.++ "3" (str.++ "0" ""))))))) (re.++ (re.opt (re.range "0" "0"))(re.++ (re.range "2" "2")(re.++ (re.opt (re.range "-" "-")) (re.union (re.++ (re.opt (re.range "0" "0")) (re.range "1" "9"))(re.union (re.++ (re.range "1" "1") (re.range "0" "9")) (re.++ (re.range "2" "2") (re.range "0" "8")))))))))))))(re.++ (re.opt (re.++ (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))) (re.++ (re.union (re.++ (re.opt (re.range "0" "1")) (re.range "0" "9")) (re.++ (re.range "2" "2") (re.range "0" "3")))(re.++ (re.range ":" ":") (re.++ (re.range "0" "5") (re.range "0" "9")))))) (str.to_re ""))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ ">" (str.++ ":" (str.++ "\u{5c}" (str.++ "\u{5c}" (str.++ "\u{5c}" (str.++ "\u{5c}" (str.++ "\u{5c}" ""))))))))

(define-fun Witness2 () String (str.++ " " (str.++ "+" (str.++ "," (str.++ "]" "")))))

(assert (= regexA (re.++ (re.union (str.to_re "") (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (re.union (re.++ (re.union (re.++ (re.range ">" ">") (re.union (re.range "+" "+")(re.union (re.range ":" ";") (re.range "=" "=")))) (re.union (re.range "+" "+")(re.union (re.range ":" ";") (re.range "=" ">"))))(re.++ (re.opt (re.union (re.range "*" "*") (re.range "," ",")))(re.++ (re.opt (re.union (re.range "+" "+")(re.union (re.range "-" "-")(re.union (re.range "o" "o") (re.range "~" "~"))))) (re.union (re.+ (re.range ")" ")"))(re.union (re.+ (re.range "(" "("))(re.union (re.+ (re.range "}" "}"))(re.union (re.+ (re.range "{" "{"))(re.union (re.+ (re.range "]" "]"))(re.union (re.+ (re.range "[" "["))(re.union (re.+ (re.range "|" "|"))(re.union (re.+ (re.range "\u{5c}" "\u{5c}"))(re.union (re.+ (re.range "/" "/"))(re.union (re.+ (re.range ">" ">"))(re.union (re.+ (re.range "<" "<"))(re.union (re.+ (re.range "D" "D")) (re.union (re.range "!" "!")(re.union (re.range "#" "$")(re.union (re.range "0" "0")(re.union (re.range "3" "3")(re.union (re.range "@" "@")(re.union (re.range "O" "P")(re.union (re.range "S" "S")(re.union (re.range "X" "X")(re.union (re.range "Z" "Z")(re.union (re.range "o" "p") (re.range "x" "x")))))))))))))))))))))))))) (re.++ (re.opt (re.range ">" ">"))(re.++ (re.union (re.range "8" "8")(re.union (re.range "X" "X") (re.range "x" "x")))(re.++ (re.opt (re.union (re.range "+" "+")(re.union (re.range "-" "-")(re.union (re.range "o" "o") (re.range "~" "~"))))) (re.union (re.+ (re.range ")" ")"))(re.union (re.+ (re.range "(" "("))(re.union (re.+ (re.range "}" "}"))(re.union (re.+ (re.range "{" "{"))(re.union (re.+ (re.range "]" "]"))(re.union (re.+ (re.range "[" "["))(re.union (re.+ (re.range "|" "|"))(re.union (re.+ (re.range "\u{5c}" "\u{5c}"))(re.union (re.+ (re.range "/" "/"))(re.union (re.+ (re.range ">" ">"))(re.union (re.+ (re.range "<" "<")) (re.+ (re.range "D" "D"))))))))))))))))) (re.union (str.to_re "") (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "h" (str.++ "t" (str.++ "t" (str.++ "p" (str.++ "s" (str.++ ":" (str.++ "/" (str.++ "/" (str.++ "." (str.++ "." (str.++ "t" (str.++ "P" (str.++ "/" (str.++ "F" (str.++ "/" (str.++ "q" (str.++ "X" (str.++ "/" (str.++ "b" (str.++ "/" (str.++ "9" (str.++ "2" (str.++ "8" (str.++ "\u{97}" (str.++ "/" (str.++ "\u{db}" (str.++ "/" (str.++ "-" (str.++ "{" (str.++ "/" (str.++ "," (str.++ "\u{8a}" "")))))))))))))))))))))))))))))))))

(define-fun Witness2 () String (str.++ "f" (str.++ "t" (str.++ "p" (str.++ ":" (str.++ "/" (str.++ "/" (str.++ "9" (str.++ "." (str.++ "A" (str.++ "c" (str.++ "t" ""))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.union (re.++ (re.union (str.to_re (str.++ "h" (str.++ "t" (str.++ "t" (str.++ "p" "")))))(re.union (str.to_re (str.++ "h" (str.++ "t" (str.++ "t" (str.++ "p" (str.++ "s" "")))))) (str.to_re (str.++ "f" (str.++ "t" (str.++ "p" "")))))) (str.to_re (str.++ ":" (str.++ "/" (str.++ "/" ""))))) (str.to_re (str.++ "w" (str.++ "w" (str.++ "w" (str.++ "." ""))))))(re.++ (re.+ (re.union (re.range "-" ".")(re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))))(re.++ (re.range "." ".")(re.++ ((_ re.loop 2 4) (re.union (re.range "A" "Z") (re.range "a" "z")))(re.++ (re.* (re.++ (re.range "/" "/")(re.++ (re.* (re.union (re.range "#" "%")(re.union (re.range "'" "'")(re.union (re.range "+" ".")(re.union (re.range "0" "9")(re.union (re.range "=" "=")(re.union (re.range "?" "?")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z") (re.range "~" "~"))))))))))) (re.union (re.range "\u{00}" "\u{08}")(re.union (re.range "\u{0e}" "\u{1f}")(re.union (re.range "!" "'")(re.union (re.range "*" "+")(re.union (re.range "-" "-")(re.union (re.range "/" "\u{84}")(re.union (re.range "\u{86}" "\u{9f}") (re.range "\u{a1}" "\u{ff}"))))))))))) (str.to_re "")))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "A" (str.++ "f" (str.++ ":" (str.++ "F" (str.++ "8" (str.++ "7" (str.++ "b" (str.++ ":" (str.++ "2" (str.++ ":" (str.++ "A" (str.++ ":" (str.++ "A" (str.++ "d" (str.++ ":" (str.++ "7" (str.++ "C" (str.++ "8" (str.++ "a" (str.++ ":" (str.++ "8" (str.++ ":" (str.++ "D" (str.++ "f" "")))))))))))))))))))))))))

(define-fun Witness2 () String (str.++ "9" (str.++ "." (str.++ "4" (str.++ "." (str.++ "8" (str.++ "." (str.++ "7" ""))))))))

(assert (= regexA (re.union (re.++ ((_ re.loop 7 7) (re.++ ((_ re.loop 1 4) (re.union (re.range "0" "9")(re.union (re.range "A" "F") (re.range "a" "f")))) (re.range ":" ":"))) ((_ re.loop 1 4) (re.union (re.range "0" "9")(re.union (re.range "A" "F") (re.range "a" "f"))))) (re.++ ((_ re.loop 3 3) (re.++ ((_ re.loop 1 3) (re.range "0" "9")) (re.range "." "."))) ((_ re.loop 1 3) (re.range "0" "9"))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "9" (str.++ "2" (str.++ "8" (str.++ "." "")))))

(define-fun Witness2 () String (str.++ "2" (str.++ "5" (str.++ "3" (str.++ "4" (str.++ "8" (str.++ "0" "")))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.+ (re.range "0" "9"))(re.++ (re.opt (re.range "." "."))(re.++ (re.opt (re.range "0" "9"))(re.++ (re.opt (re.range "0" "9"))(re.++ (re.opt (re.union (re.range "," ",")(re.union (re.range "0" "0") (re.range "5" "5")))) (str.to_re "")))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "4" (str.++ "." (str.++ "7" (str.++ "\u{0c}" (str.++ "x" (str.++ "\u{a0}" (str.++ "1" (str.++ "0" (str.++ "^" (str.++ "-" (str.++ "4" (str.++ "9" "")))))))))))))

(define-fun Witness2 () String (str.++ "8" (str.++ "." (str.++ "9" (str.++ "0" (str.++ "\u{0d}" (str.++ "x" (str.++ "\u{85}" (str.++ "1" (str.++ "0" (str.++ "e" (str.++ "-" (str.++ "3" (str.++ "8" (str.++ "1" "")))))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.range "0" "9")(re.++ (re.range "." ".")(re.++ (re.+ (re.range "0" "9"))(re.++ (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))(re.++ (re.range "x" "x")(re.++ (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))(re.++ (str.to_re (str.++ "1" (str.++ "0" "")))(re.++ (re.union (re.range "E" "E")(re.union (re.range "^" "^") (re.range "e" "e")))(re.++ (re.opt (re.range "-" "-"))(re.++ (re.+ (re.range "0" "9")) (str.to_re ""))))))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "8" (str.++ "." (str.++ "8" (str.++ "." (str.++ "2" (str.++ "0" (str.++ "8" (str.++ "7" "")))))))))

(define-fun Witness2 () String (str.++ "2" (str.++ "8" (str.++ "." (str.++ "0" (str.++ "9" (str.++ "." (str.++ "2" (str.++ "0" (str.++ "8" (str.++ "8" "")))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.union (re.++ (re.union (re.++ (re.union (re.++ (re.opt (re.range "0" "0")) (re.range "1" "9"))(re.union (re.++ (re.range "1" "1") (re.range "0" "9")) (re.++ (re.range "2" "2") (re.range "0" "8"))))(re.++ (re.range "." ".") (re.union (re.++ (re.opt (re.range "0" "0")) (re.range "1" "9")) (re.++ (re.range "1" "1") (re.range "0" "2"))))) (re.union (re.++ (str.to_re (str.++ "3" (str.++ "1" (str.++ "." "")))) (re.union (re.++ (re.range "0" "0") (re.union (re.range "1" "1")(re.union (re.range "3" "3")(re.union (re.range "5" "5") (re.range "7" "8"))))) (re.++ (re.range "1" "1") (re.union (re.range "0" "0") (re.range "2" "2"))))) (re.++ (re.union (str.to_re (str.++ "2" (str.++ "9" ""))) (str.to_re (str.++ "3" (str.++ "0" ""))))(re.++ (re.range "." ".") (re.union (re.++ (re.opt (re.range "0" "0")) (re.union (re.range "," ",")(re.union (re.range "1" "1") (re.range "3" "9")))) (re.++ (re.range "1" "1") (re.range "0" "2")))))))(re.++ (re.range "." ".") (re.++ (str.to_re (str.++ "2" (str.++ "0" "")))(re.++ (re.range "0" "9") (re.range "0" "9"))))) (re.++ (str.to_re (str.++ "2" (str.++ "9" (str.++ "." ""))))(re.++ (re.opt (re.range "0" "0"))(re.++ (str.to_re (str.++ "2" (str.++ "." (str.++ "2" (str.++ "0" ""))))) (re.union (re.++ (re.union (re.range "0" "0")(re.union (re.range "2" "2")(re.union (re.range "4" "4")(re.union (re.range "6" "6") (re.range "8" "8"))))) (re.union (re.range "0" "0")(re.union (re.range "4" "4") (re.range "8" "8")))) (re.++ (re.union (re.range "1" "1")(re.union (re.range "3" "3")(re.union (re.range "5" "5")(re.union (re.range "7" "7") (re.range "9" "9"))))) (re.union (re.range "2" "2") (re.range "6" "6")))))))) (str.to_re "")))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "\u{cf}" ""))

(define-fun Witness2 () String (str.++ "\u{ff}" (str.++ "\u{ee}" "")))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.+ (re.range "\u{81}" "\u{ff}")) (str.to_re "")))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "+" (str.++ "9" (str.++ "8" (str.++ " " (str.++ "1" (str.++ "3" (str.++ "0" (str.++ "0" (str.++ " " (str.++ "9" (str.++ "0" (str.++ "9" (str.++ "-" (str.++ "7" (str.++ "8" (str.++ "9" "")))))))))))))))))

(define-fun Witness2 () String (str.++ "+" (str.++ "1" (str.++ "8" (str.++ "(" (str.++ "4" (str.++ " " (str.++ "-" (str.++ "8" (str.++ " " (str.++ "-" (str.++ "9" (str.++ " " (str.++ " " ""))))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.opt (re.++ (re.range "+" "+")(re.++ ((_ re.loop 2 2) (re.range "0" "9")) (re.opt (re.union (re.range " " " ") (re.range "-" "-"))))))(re.++ (re.union (re.++ (re.++ (re.opt (re.range "(" "(")) (re.opt (re.union (re.range " " " ") (re.range "-" "-"))))(re.++ (re.opt (re.range "0" "0"))(re.++ (re.opt (re.range ")" ")"))(re.++ (re.union (re.range "2" "3")(re.union (re.range "7" "8") (re.range "|" "|")))(re.++ (re.opt (re.range ")" ")"))(re.++ (re.* (re.union (re.range " " " ") (re.range "-" "-"))) (re.++ ((_ re.loop 4 4) (re.range "0" "9"))(re.++ (re.opt (re.union (re.range " " " ") (re.range "-" "-"))) ((_ re.loop 4 4) (re.range "0" "9"))))))))))(re.union (re.++ (re.range "1" "1")(re.++ (re.opt (re.union (re.range " " " ") (re.range "-" "-")))(re.++ (re.union (str.to_re (str.++ "3" (str.++ "0" (str.++ "0" ""))))(re.union (str.to_re (str.++ "8" (str.++ "0" (str.++ "0" ""))))(re.union (str.to_re (str.++ "9" (str.++ "0" (str.++ "0" "")))) (str.to_re (str.++ "9" (str.++ "0" (str.++ "2" "")))))))(re.++ (re.opt (re.union (re.range " " " ") (re.range "-" "-"))) (re.union ((_ re.loop 6 6) (re.range "0" "9")) (re.++ ((_ re.loop 3 3) (re.range "0" "9"))(re.++ (re.opt (re.union (re.range " " " ") (re.range "-" "-"))) ((_ re.loop 3 3) (re.range "0" "9"))))))))) (re.union (re.++ (str.to_re (str.++ "1" (str.++ "3" "")))(re.++ (re.opt (re.union (re.range " " " ") (re.range "-" "-"))) ((_ re.loop 5 5) (re.union (re.range " " " ")(re.union (re.range "-" "-") (re.range "0" "9")))))) (re.++ (re.++ (re.opt (re.range "(" "(")) (re.opt (re.union (re.range " " " ") (re.range "-" "-"))))(re.++ (re.opt (re.range "0" "0"))(re.++ (re.opt (re.range ")" ")"))(re.++ (re.range "4" "4") ((_ re.loop 8 10) (re.union (re.range " " " ")(re.union (re.range "-" "-") (re.range "0" "9"))))))))))) (str.to_re ""))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "K" (str.++ "k" (str.++ "-" (str.++ "9" (str.++ "8" (str.++ "9" (str.++ "8" ""))))))))

(define-fun Witness2 () String (str.++ "P" (str.++ "M" (str.++ "-" (str.++ "3" (str.++ "6" (str.++ "1" (str.++ "8" ""))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.range "D" "d")(re.++ (re.range "K" "k")(re.++ (re.range "-" "-")(re.++ (re.range "1" "9")(re.++ ((_ re.loop 3 3) (re.range "0" "9")) (str.to_re "")))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "." (str.++ "2" (str.++ "9" ""))))

(define-fun Witness2 () String (str.++ "5" (str.++ "," (str.++ "2" (str.++ "4" (str.++ "9" (str.++ "," (str.++ "5" (str.++ "5" (str.++ "4" (str.++ "," (str.++ "6" (str.++ "2" (str.++ "7" (str.++ "," (str.++ "3" (str.++ "8" (str.++ "8" (str.++ "," (str.++ "4" (str.++ "9" (str.++ "9" (str.++ "." (str.++ "8" (str.++ "8" (str.++ "4" ""))))))))))))))))))))))))))

(assert (= regexA (re.union (re.++ (str.to_re "")(re.++ (re.opt (re.++ ((_ re.loop 1 3) (re.range "0" "9")) (re.range "," ",")))(re.++ (re.+ (re.++ ((_ re.loop 3 3) (re.range "0" "9")) (re.range "," ",")))(re.++ ((_ re.loop 3 3) (re.range "0" "9"))(re.++ (re.opt (re.++ (re.range "." ".") (re.* (re.range "0" "9")))) (str.to_re "")))))) (re.++ (str.to_re "")(re.++ (re.* (re.range "0" "9"))(re.++ (re.opt (re.++ (re.range "." ".") (re.* (re.range "0" "9")))) (str.to_re "")))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "0" (str.++ "9" (str.++ "7" (str.++ "1" (str.++ ")" (str.++ "3" (str.++ "9" (str.++ "9" (str.++ " " (str.++ "6" (str.++ "9" (str.++ "6" (str.++ "0" ""))))))))))))))

(define-fun Witness2 () String (str.++ "0" (str.++ "9" (str.++ "0" (str.++ "8" (str.++ ")" (str.++ " " (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "0" (str.++ "9" (str.++ "5" (str.++ "1" ""))))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.opt (re.range "0" "1"))(re.++ (re.opt (re.union (re.range " " " ") (re.range "-" ".")))(re.++ (re.opt (re.range "(" "("))(re.++ (re.range "2" "9")(re.++ ((_ re.loop 2 2) (re.range "0" "9"))(re.++ (re.opt (re.range ")" ")"))(re.++ (re.opt (re.union (re.range " " " ") (re.range "-" ".")))(re.++ ((_ re.loop 3 3) (re.range "0" "9"))(re.++ (re.opt (re.union (re.range " " " ") (re.range "-" ".")))(re.++ ((_ re.loop 4 4) (re.range "0" "9")) (str.to_re ""))))))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "0" (str.++ "." (str.++ "1" (str.++ "2" (str.++ "3" (str.++ "8" (str.++ "9" (str.++ "9" (str.++ "2" (str.++ "9" "")))))))))))

(define-fun Witness2 () String (str.++ "9" (str.++ "." (str.++ "7" ""))))

(assert (= regexA (re.union (re.++ (re.+ (re.range "0" "0")) (re.++ (re.range "." ".")(re.++ (re.range "1" "9") (re.opt (re.range "0" "9")))))(re.union (re.++ (re.+ (re.range "0" "0")) (re.++ (re.range "." ".")(re.++ (re.range "0" "9") (re.+ (re.range "1" "9")))))(re.union (re.++ (re.+ (re.++ (re.+ (re.range "1" "9")) (re.opt (re.range "0" "0")))) (re.opt (re.++ (re.range "." ".") (re.+ (re.range "0" "9"))))) (re.++ (re.+ (re.++ (re.+ (re.range "1" "9")) (re.opt (re.range "0" "0")))) (re.opt (re.++ (re.range "." ".") (re.+ (re.range "0" "9"))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "0" ""))

(define-fun Witness2 () String (str.++ "7" ""))

(assert (= regexA (re.union (re.++ (str.to_re "")(re.++ (re.range "0" "0") (str.to_re ""))) (re.++ (str.to_re "")(re.++ (re.++ (re.range "1" "9") (re.* (re.range "0" "9"))) (str.to_re ""))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "z" (str.++ "2" (str.++ "K" (str.++ "@" (str.++ "8" (str.++ "a" (str.++ "w" (str.++ "." (str.++ "z" (str.++ "9" (str.++ "-" (str.++ "h" (str.++ "3" (str.++ "." (str.++ "u" (str.++ "Z" (str.++ "w" (str.++ "d" (str.++ "z" (str.++ "8" (str.++ "@" (str.++ "9" (str.++ "." (str.++ "y" (str.++ "a" (str.++ "N" (str.++ "M" (str.++ "B" (str.++ "t" (str.++ "." (str.++ "t" (str.++ "-" (str.++ "." (str.++ "@" (str.++ "-" (str.++ "." (str.++ "X" (str.++ "a" (str.++ "q" (str.++ "U" (str.++ "w" (str.++ "g" (str.++ "8" (str.++ "Z" (str.++ "@" (str.++ "6" (str.++ "." (str.++ "x" (str.++ "U" (str.++ "b" "")))))))))))))))))))))))))))))))))))))))))))))))))))

(define-fun Witness2 () String (str.++ "-" (str.++ "G" (str.++ "a" (str.++ "f" (str.++ "_" (str.++ "@" (str.++ "_" (str.++ "." (str.++ "g" (str.++ "C" (str.++ "k" (str.++ "T" (str.++ "z" (str.++ "x" (str.++ ";" (str.++ "-" (str.++ "@" (str.++ "h" (str.++ "." (str.++ "Q" (str.++ "G" (str.++ "f" (str.++ "w" ""))))))))))))))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.+ (re.++ (re.+ (re.union (re.range "-" ".")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_") (re.range "a" "z"))))))(re.++ (re.range "@" "@")(re.++ (re.+ (re.union (re.range "-" ".")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_") (re.range "a" "z"))))))(re.++ (re.range "." ".") ((_ re.loop 1 25) ((_ re.loop 2 5) (re.union (re.range "A" "Z") (re.range "a" "z")))))))))(re.++ (re.* (re.++ (re.union (re.range "." ".") (re.range ";" ";")) (re.+ (re.++ (re.+ (re.union (re.range "-" ".")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_") (re.range "a" "z"))))))(re.++ (re.range "@" "@")(re.++ (re.+ (re.union (re.range "-" ".")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_") (re.range "a" "z"))))))(re.++ (re.range "." ".") ((_ re.loop 1 25) ((_ re.loop 2 5) (re.union (re.range "A" "Z") (re.range "a" "z"))))))))))) (str.to_re ""))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "Z" (str.++ "Q" (str.++ "9" (str.++ "\u{ba}" "")))))

(define-fun Witness2 () String (str.++ "P" (str.++ "G" (str.++ " " (str.++ "3" (str.++ "H" ""))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.union (re.++ ((_ re.loop 2 2) (re.range "A" "Z")) (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))) ((_ re.loop 2 2) (re.range "A" "Z")))(re.++ ((_ re.loop 2 2) (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))) (str.to_re ""))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "2" (str.++ "@" (str.++ "\u{d5}" (str.++ "-" (str.++ "\u{ba}" (str.++ "+" (str.++ "\u{fd}" (str.++ "." (str.++ "\u{aa}" (str.++ "9" "")))))))))))

(define-fun Witness2 () String (str.++ "k" (str.++ "\u{aa}" (str.++ "9" (str.++ "3" (str.++ "8" (str.++ "@" (str.++ "\u{aa}" (str.++ "+" (str.++ "8" (str.++ "X" (str.++ "+" (str.++ "8" (str.++ "." (str.++ "\u{ba}" (str.++ "1" (str.++ "\u{df}" "")))))))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.+ (re.++ (re.* (re.++ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))) (re.opt (re.union (re.range "+" "+") (re.range "-" "."))))) (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))))(re.++ (re.range "@" "@")(re.++ (re.+ (re.++ ((_ re.loop 0 62) (re.++ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))) (re.opt (re.union (re.range "+" "+") (re.range "-" "."))))) (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))))(re.++ (re.range "." ".")(re.++ ((_ re.loop 2 6) (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))) (str.to_re "")))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "(" (str.++ "+" (str.++ "6" (str.++ "1" (str.++ "8" (str.++ " " (str.++ "5" (str.++ "8" (str.++ " " (str.++ "9" (str.++ "4" (str.++ "9" (str.++ "8" (str.++ "6" (str.++ "6" ""))))))))))))))))

(define-fun Witness2 () String (str.++ "0" (str.++ "4" (str.++ "2" (str.++ "4" (str.++ "9" (str.++ "9" (str.++ "-" (str.++ "1" (str.++ " " (str.++ "8" (str.++ "9" (str.++ "5" "")))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.opt (re.range "(" "("))(re.++ (re.opt (re.++ (re.union (re.range "0" "0") (str.to_re (str.++ "+" (str.++ "6" (str.++ "1" ""))))) (re.union (re.range "2" "4") (re.range "7" "8"))))(re.++ (re.opt (re.range ")" ")"))(re.++ (re.opt (re.union (re.range " " " ") (re.range "-" "-")))(re.++ ((_ re.loop 2 2) (re.range "0" "9"))(re.++ (re.opt (re.union (re.range " " " ") (re.range "-" "-")))(re.++ ((_ re.loop 2 2) (re.range "0" "9"))(re.++ (re.opt (re.union (re.range " " " ") (re.range "-" "-")))(re.++ (re.range "0" "9")(re.++ (re.opt (re.union (re.range " " " ") (re.range "-" "-")))(re.++ ((_ re.loop 3 3) (re.range "0" "9")) (str.to_re "")))))))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "c" (str.++ "8" (str.++ "7" (str.++ "1" (str.++ "9" (str.++ "w" (str.++ "b" (str.++ "x" "")))))))))

(define-fun Witness2 () String (str.++ "W" (str.++ "9" (str.++ "8" (str.++ "3" (str.++ "9" (str.++ "X" (str.++ "E" (str.++ "J" "")))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.union (re.++ (re.union (re.range "A" "H") (re.range "J" "Z"))(re.++ ((_ re.loop 4 4) (re.range "0" "9")) ((_ re.loop 3 3) (re.range "A" "Z")))) (re.++ (re.range "a" "z")(re.++ ((_ re.loop 4 4) (re.range "0" "9")) ((_ re.loop 3 3) (re.union (re.range "a" "h") (re.range "j" "z")))))) (str.to_re "")))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "w" (str.++ "H" "")))

(define-fun Witness2 () String (str.++ ":" ""))

(assert (= regexA (re.++ (str.to_re "")(re.++ ((_ re.loop 1 150) (re.union (re.range " " " ")(re.union (re.range "-" ".")(re.union (re.range "0" ":")(re.union (re.range "A" "Z") (re.range "a" "z")))))) (str.to_re "")))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "6" (str.++ "9" (str.++ "9" (str.++ "." "")))))

(define-fun Witness2 () String (str.++ "7" (str.++ "4" (str.++ "8" (str.++ "8" (str.++ "." ""))))))

(assert (= regexA (re.union (re.++ (str.to_re "")(re.++ (re.* (re.range "0" "9"))(re.++ (re.opt (re.range "." "."))(re.++ (re.* (re.range "0" "9"))(re.++ (re.+ (re.range "1" "9"))(re.++ (re.* (re.range "0" "9")) (str.to_re ""))))))) (re.++ (str.to_re "")(re.++ (re.+ (re.range "1" "9"))(re.++ (re.* (re.range "0" "9"))(re.++ (re.range "." ".")(re.++ (re.* (re.range "0" "9")) (str.to_re "")))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ " " (str.++ "." (str.++ "\u{a0}" (str.++ " " "")))))

(define-fun Witness2 () String "")

(assert (= regexA (re.union (re.++ (str.to_re "")(re.++ (re.opt (re.++ (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "0" "0")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (re.range "." ".") (re.++ ((_ re.loop 0 2) (re.range "0" "9")) ((_ re.loop 0 2) (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))))))) (str.to_re "")))(re.union (re.++ (str.to_re "")(re.++ (re.opt (re.++ (re.range "." ".") ((_ re.loop 0 2) (re.++ (re.range "0" "9") (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))))) (str.to_re "")))(re.union (re.++ (str.to_re "")(re.++ (re.opt (re.++ ((_ re.loop 0 4) (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (re.opt (re.range "1" "1"))(re.++ (re.range "." ".")(re.++ ((_ re.loop 0 2) (re.range "0" "0")) ((_ re.loop 0 4) (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))))))) (str.to_re "")))(re.union (re.++ (str.to_re "")(re.++ (re.opt (re.++ ((_ re.loop 0 4) (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (re.opt (re.range "1" "1")) ((_ re.loop 0 4) (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))))) (str.to_re "")))(re.union (re.++ (str.to_re "")(re.++ (re.opt (re.++ ((_ re.loop 0 4) (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ ((_ re.loop 0 4) (re.range "0" "0"))(re.++ (re.opt (re.range "1" "1")) ((_ re.loop 0 4) (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))))))) (str.to_re "")))(re.union (re.++ (str.to_re "")(re.++ (re.opt (re.++ ((_ re.loop 0 4) (re.range "0" "0")) ((_ re.loop 0 4) (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))))) (str.to_re ""))) (re.++ (str.to_re "")(re.++ (re.opt (re.++ ((_ re.loop 0 3) (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ ((_ re.loop 0 3) (re.range "0" "0"))(re.++ (re.range "." ".")(re.++ ((_ re.loop 0 2) (re.range "0" "9")) ((_ re.loop 0 2) (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))))))) (str.to_re "")))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "7" (str.++ "," (str.++ "C" (str.++ "u" (str.++ "l" (str.++ "t" (str.++ "u" (str.++ "r" (str.++ "e" (str.++ "=" (str.++ "_" (str.++ "\u{f2}" (str.++ "\u{c8}" (str.++ "," (str.++ "\u{a0}" (str.++ "P" (str.++ "u" (str.++ "b" (str.++ "l" (str.++ "i" (str.++ "c" (str.++ "K" (str.++ "e" (str.++ "y" (str.++ "T" (str.++ "o" (str.++ "k" (str.++ "e" (str.++ "n" (str.++ "=" (str.++ "m" ""))))))))))))))))))))))))))))))))

(define-fun Witness2 () String (str.++ "." (str.++ "," (str.++ "V" (str.++ "e" (str.++ "r" (str.++ "s" (str.++ "i" (str.++ "o" (str.++ "n" (str.++ "=" (str.++ "1" (str.++ "." (str.++ "2" (str.++ "4" (str.++ "8" (str.++ "9" (str.++ "4" (str.++ "8" (str.++ "." (str.++ "8" (str.++ "." (str.++ "2" "")))))))))))))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.+ (re.union (re.range "." ".")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))))(re.++ (re.opt (re.++ (re.range "," ",")(re.++ (re.opt (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (str.to_re (str.++ "V" (str.++ "e" (str.++ "r" (str.++ "s" (str.++ "i" (str.++ "o" (str.++ "n" (str.++ "=" ""))))))))) (re.++ (re.+ (re.range "0" "9"))(re.++ (re.range "." ".")(re.++ (re.+ (re.range "0" "9"))(re.++ (re.range "." ".")(re.++ (re.+ (re.range "0" "9"))(re.++ (re.range "." ".") (re.+ (re.range "0" "9"))))))))))))(re.++ (re.opt (re.++ (re.range "," ",")(re.++ (re.opt (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (str.to_re (str.++ "C" (str.++ "u" (str.++ "l" (str.++ "t" (str.++ "u" (str.++ "r" (str.++ "e" (str.++ "=" ""))))))))) (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))))))(re.++ (re.opt (re.++ (re.range "," ",")(re.++ (re.opt (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (str.to_re (str.++ "P" (str.++ "u" (str.++ "b" (str.++ "l" (str.++ "i" (str.++ "c" (str.++ "K" (str.++ "e" (str.++ "y" (str.++ "T" (str.++ "o" (str.++ "k" (str.++ "e" (str.++ "n" (str.++ "=" "")))))))))))))))) (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))))))) (str.to_re ""))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "0" (str.++ "4" (str.++ "-" (str.++ "8" (str.++ "6" (str.++ "0" (str.++ "1" (str.++ "4" (str.++ "6" (str.++ "8" "")))))))))))

(define-fun Witness2 () String (str.++ "0" (str.++ "8" (str.++ "-" (str.++ "8" (str.++ "4" (str.++ "1" (str.++ "5" (str.++ "8" (str.++ "5" (str.++ "0" "")))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.range "0" "0")(re.++ (re.union (re.range "2" "4") (re.range "8" "9"))(re.++ (re.opt (re.range "-" "-"))(re.++ (re.range "1" "9")(re.++ ((_ re.loop 6 6) (re.range "0" "9")) (str.to_re "")))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "9" (str.++ "1" (str.++ "9" (str.++ "9" (str.++ " " (str.++ " " (str.++ "8" (str.++ "0" (str.++ "8" (str.++ "1" (str.++ "4" (str.++ "9" (str.++ "8" (str.++ "9" "")))))))))))))))

(define-fun Witness2 () String (str.++ "9" (str.++ "1" (str.++ "-" (str.++ " " (str.++ "9" (str.++ "4" (str.++ "2" (str.++ "4" (str.++ "0" (str.++ "9" (str.++ "4" (str.++ "6" (str.++ "9" (str.++ "2" "")))))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.opt (re.++ (re.opt (re.range "+" "+"))(re.++ (str.to_re (str.++ "9" (str.++ "1" "")))(re.++ (re.opt (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (re.opt (re.range "-" "-")) (re.opt (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))))))))(re.++ (re.range "9" "9")(re.++ (re.range "0" "9")(re.++ (re.opt (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (re.opt (re.range "-" "-"))(re.++ (re.opt (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (re.range "1" "9")(re.++ ((_ re.loop 7 7) (re.range "0" "9")) (str.to_re ""))))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "7" (str.++ "5" (str.++ "9" ""))))

(define-fun Witness2 () String (str.++ "9" (str.++ "4" (str.++ "5" ""))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.union (re.++ (re.range " " " ") (re.range "1" "9"))(re.union (re.range "1" "9")(re.union (re.++ (re.range "0" "0") (re.range "1" "9"))(re.union (str.to_re (str.++ "1" (str.++ "0" "")))(re.union (str.to_re (str.++ "1" (str.++ "1" ""))) (str.to_re (str.++ "1" (str.++ "2" ""))))))))(re.++ (re.range "0" "5")(re.++ (re.range "0" "9") (str.to_re "")))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "q" ""))

(define-fun Witness2 () String (str.++ "y" ""))

(assert (= regexA (re.union (re.range "'" "'")(re.union (re.range "-" "-")(re.union (re.range "A" "Z") (re.range "a" "z"))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "0" (str.++ "0" (str.++ " " (str.++ "8" (str.++ "8" (str.++ "8" (str.++ "8" (str.++ "\u{0b}" (str.++ "0" (str.++ "3" (str.++ "6" (str.++ "\u{85}" (str.++ "9" (str.++ "4" (str.++ "1" (str.++ "2" (str.++ "\u{a0}" (str.++ "8" "")))))))))))))))))))

(define-fun Witness2 () String (str.++ "0" (str.++ "8" (str.++ "9" (str.++ "9" (str.++ "8" (str.++ "\u{85}" (str.++ "0" (str.++ "1" (str.++ "3" (str.++ "4" (str.++ "\u{85}" ""))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.union (re.++ (re.union (re.++ (re.range "+" "+") (re.opt (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))) (re.++ ((_ re.loop 2 2) (re.range "0" "0")) (re.opt (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "-" "-")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))))))(re.++ ((_ re.loop 3 3) (re.union (re.range "3" "3")(re.union (re.range "5" "5") (re.range "8" "8")))) (re.opt (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "-" "-")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))))) (re.range "0" "0"))(re.++ (re.++ (re.++ (re.range "1" "9") (re.opt (re.range "0" "9")))(re.++ (re.opt (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "-" "-")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))))(re.++ ((_ re.loop 2 4) (re.range "0" "9"))(re.++ (re.opt (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "-" "-")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))))(re.++ ((_ re.loop 2 4) (re.range "0" "9")) (re.opt (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "-" "-")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))))))))(re.++ ((_ re.loop 0 3) (re.range "0" "9")) (str.to_re "")))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "R" (str.++ "z" (str.++ "W" (str.++ "K" (str.++ ":" (str.++ "/" (str.++ "/" (str.++ "f" (str.++ "h" (str.++ "9" (str.++ "8" (str.++ "0" (str.++ "." (str.++ "-" (str.++ "s" (str.++ "." (str.++ "1" (str.++ "8" "")))))))))))))))))))

(define-fun Witness2 () String (str.++ "s" (str.++ ":" (str.++ "/" (str.++ "/" (str.++ "-" (str.++ "8" (str.++ "." (str.++ "8" (str.++ "4" (str.++ "0" (str.++ ":" (str.++ "8" (str.++ "8" (str.++ "3" (str.++ "8" (str.++ "9" (str.++ "?" (str.++ "2" "")))))))))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.+ (re.union (re.range "A" "Z") (re.range "a" "z")))(re.++ (str.to_re (str.++ ":" (str.++ "/" (str.++ "/" ""))))(re.++ (re.+ (re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_") (re.range "a" "z"))))))(re.++ (re.+ (re.union (re.++ (re.range "." ".") (re.+ (re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_") (re.range "a" "z"))))))) ((_ re.loop 1 3) (re.range "0" "9"))))(re.++ (re.range "." ".")(re.++ (re.union ((_ re.loop 2 6) (re.union (re.range "A" "Z") (re.range "a" "z"))) ((_ re.loop 1 3) (re.range "0" "9")))(re.++ (re.opt (re.++ (re.range ":" ":") (re.+ (re.range "0" "9"))))(re.++ (re.* (re.++ (re.range "/" "/") (re.* (re.union (re.range "%" "%")(re.union (re.range "," ".")(re.union (re.range "0" "9")(re.union (re.range ";" ";")(re.union (re.range "=" "=")(re.union (re.range "A" "Z")(re.union (re.range "_" "_") (re.range "a" "z")))))))))))(re.++ (re.opt (re.++ (re.range "?" "?") (re.* (re.union (re.range "%" "&")(re.union (re.range "," ".")(re.union (re.range "0" "9")(re.union (re.range ";" ";")(re.union (re.range "=" "=")(re.union (re.range "A" "Z")(re.union (re.range "_" "_") (re.range "a" "z"))))))))))) (str.to_re "")))))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "h" (str.++ "t" (str.++ "t" (str.++ "p" (str.++ "s" (str.++ ":" (str.++ "/" (str.++ "/" (str.++ "-" (str.++ "." (str.++ "n" (str.++ "e" (str.++ "t" (str.++ ":" (str.++ "/" ""))))))))))))))))

(define-fun Witness2 () String (str.++ "f" (str.++ "t" (str.++ "p" (str.++ ":" (str.++ "/" (str.++ "/" (str.++ "2" (str.++ "4" (str.++ "5" (str.++ "." (str.++ "8" (str.++ "8" (str.++ "." (str.++ "8" (str.++ "." (str.++ "8" (str.++ ":" (str.++ "H" (str.++ "9" (str.++ "J" "")))))))))))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.union (str.to_re (str.++ "h" (str.++ "t" (str.++ "t" (str.++ "p" "")))))(re.union (str.to_re (str.++ "h" (str.++ "t" (str.++ "t" (str.++ "p" (str.++ "s" "")))))) (str.to_re (str.++ "f" (str.++ "t" (str.++ "p" ""))))))(re.++ (str.to_re (str.++ ":" (str.++ "/" (str.++ "/" ""))))(re.++ (re.union (re.++ ((_ re.loop 3 3) (re.++ (re.union (re.++ (str.to_re (str.++ "2" (str.++ "5" ""))) (re.range "0" "5"))(re.union (re.++ (re.range "2" "2")(re.++ (re.range "0" "4") (re.range "0" "9")))(re.union (re.++ (re.range "1" "1")(re.++ (re.range "0" "9") (re.range "0" "9")))(re.union (re.++ (re.range "1" "9") (re.range "0" "9")) (re.range "0" "9"))))) (re.range "." "."))) (re.union (re.++ (str.to_re (str.++ "2" (str.++ "5" ""))) (re.range "0" "5"))(re.union (re.++ (re.range "2" "2")(re.++ (re.range "0" "4") (re.range "0" "9")))(re.union (re.++ (re.range "1" "1")(re.++ (re.range "0" "9") (re.range "0" "9")))(re.union (re.++ (re.range "1" "9") (re.range "0" "9")) (re.range "0" "9")))))) (re.++ (re.+ (re.union (re.range "-" ".")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_") (re.range "a" "z"))))))(re.++ (re.range "." ".") (re.union (str.to_re (str.++ "c" (str.++ "o" (str.++ "m" ""))))(re.union (str.to_re (str.++ "n" (str.++ "e" (str.++ "t" ""))))(re.union (str.to_re (str.++ "o" (str.++ "r" (str.++ "g" ""))))(re.union (str.to_re (str.++ "e" (str.++ "d" (str.++ "u" ""))))(re.union (str.to_re (str.++ "i" (str.++ "n" (str.++ "t" ""))))(re.union (str.to_re (str.++ "m" (str.++ "i" (str.++ "l" ""))))(re.union (str.to_re (str.++ "g" (str.++ "o" (str.++ "v" ""))))(re.union (str.to_re (str.++ "a" (str.++ "r" (str.++ "p" (str.++ "a" "")))))(re.union (str.to_re (str.++ "b" (str.++ "i" (str.++ "z" ""))))(re.union (str.to_re (str.++ "a" (str.++ "e" (str.++ "r" (str.++ "o" "")))))(re.union (str.to_re (str.++ "n" (str.++ "a" (str.++ "m" (str.++ "e" "")))))(re.union (str.to_re (str.++ "c" (str.++ "o" (str.++ "o" (str.++ "p" "")))))(re.union (str.to_re (str.++ "i" (str.++ "n" (str.++ "f" (str.++ "o" "")))))(re.union (str.to_re (str.++ "p" (str.++ "r" (str.++ "o" ""))))(re.union (str.to_re (str.++ "m" (str.++ "u" (str.++ "s" (str.++ "e" (str.++ "u" (str.++ "m" "")))))))(re.union (str.to_re (str.++ "u" (str.++ "k" ""))) (str.to_re (str.++ "m" (str.++ "e" ""))))))))))))))))))))))(re.++ (re.++ (re.opt (re.++ (re.range ":" ":") (re.* (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z"))))))(re.++ (re.opt (re.range "/" "/")) (re.* (re.union (re.range "#" "'")(re.union (re.range "+" "9")(re.union (re.range ";" ";")(re.union (re.range "=" "=")(re.union (re.range "?" "?")(re.union (re.range "A" "Z")(re.union (re.range "\u{5c}" "\u{5c}")(re.union (re.range "_" "_")(re.union (re.range "a" "z") (re.range "~" "~"))))))))))))) (str.to_re ""))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "\u{85}" (str.++ "W" (str.++ "E" (str.++ "D" (str.++ " " (str.++ "J" (str.++ "U" (str.++ "L" (str.++ "\u{85}" (str.++ "\u{0d}" (str.++ "\u{a0}" (str.++ "\u{a0}" (str.++ " " (str.++ "\u{85}" (str.++ "0" (str.++ "6" (str.++ "\u{0d}" (str.++ " " (str.++ "2" (str.++ "1" (str.++ ":" (str.++ "5" (str.++ "9" (str.++ ":" (str.++ "5" (str.++ "8" (str.++ "\u{0c}" (str.++ "\u{85}" (str.++ "\u{a0}" (str.++ " " (str.++ "8" (str.++ "9" "")))))))))))))))))))))))))))))))))

(define-fun Witness2 () String (str.++ "\u{85}" (str.++ "S" (str.++ "U" (str.++ "N" (str.++ "\u{85}" (str.++ "A" (str.++ "U" (str.++ "G" (str.++ " " (str.++ "2" (str.++ "8" (str.++ "\u{0c}" (str.++ "2" (str.++ "3" (str.++ ":" (str.++ "5" (str.++ "9" (str.++ ":" (str.++ "6" (str.++ "0" (str.++ "\u{85}" (str.++ "1" (str.++ "9" (str.++ "7" (str.++ "0" ""))))))))))))))))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.++ (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))(re.++ (re.union (str.to_re (str.++ "S" (str.++ "U" (str.++ "N" ""))))(re.union (str.to_re (str.++ "M" (str.++ "O" (str.++ "N" ""))))(re.union (str.to_re (str.++ "T" (str.++ "U" (str.++ "E" ""))))(re.union (str.to_re (str.++ "W" (str.++ "E" (str.++ "D" ""))))(re.union (str.to_re (str.++ "T" (str.++ "H" (str.++ "U" ""))))(re.union (str.to_re (str.++ "F" (str.++ "R" (str.++ "I" "")))) (str.to_re (str.++ "S" (str.++ "A" (str.++ "T" ""))))))))))(re.++ (re.+ (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (re.union (str.to_re (str.++ "J" (str.++ "A" (str.++ "N" ""))))(re.union (str.to_re (str.++ "F" (str.++ "E" (str.++ "B" ""))))(re.union (str.to_re (str.++ "M" (str.++ "A" (str.++ "R" ""))))(re.union (str.to_re (str.++ "A" (str.++ "P" (str.++ "R" ""))))(re.union (str.to_re (str.++ "M" (str.++ "A" (str.++ "Y" ""))))(re.union (str.to_re (str.++ "J" (str.++ "U" (str.++ "N" ""))))(re.union (str.to_re (str.++ "J" (str.++ "U" (str.++ "L" ""))))(re.union (str.to_re (str.++ "A" (str.++ "U" (str.++ "G" ""))))(re.union (str.to_re (str.++ "S" (str.++ "E" (str.++ "P" ""))))(re.union (str.to_re (str.++ "O" (str.++ "C" (str.++ "T" ""))))(re.union (str.to_re (str.++ "N" (str.++ "O" (str.++ "V" "")))) (str.to_re (str.++ "D" (str.++ "E" (str.++ "C" "")))))))))))))))(re.++ (re.+ (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (re.union (re.++ (re.opt (re.range "0" "0")) (re.range "1" "9"))(re.union (re.++ (re.range "1" "2") (re.range "0" "9")) (re.++ (re.range "3" "3") (re.range "0" "1"))))(re.++ (re.+ (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (re.union (re.++ (re.range "2" "2") (re.range "0" "3")) (re.++ (re.range "0" "1") (re.range "0" "9")))(re.++ (re.range ":" ":")(re.++ (re.++ (re.range "0" "5") (re.range "0" "9"))(re.++ (re.range ":" ":")(re.++ (re.union (str.to_re (str.++ "6" (str.++ "0" ""))) (re.++ (re.range "0" "5") (re.range "0" "9")))(re.++ (re.+ (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))) (re.union (re.++ (str.to_re (str.++ "1" (str.++ "9" ""))) ((_ re.loop 2 2) (re.range "0" "9")))(re.union (re.++ (re.range "2" "9") ((_ re.loop 3 3) (re.range "0" "9"))) ((_ re.loop 2 2) (re.range "0" "9"))))))))))))))))) (str.to_re "")))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "8" (str.++ "A" (str.++ "8" (str.++ "@" (str.++ "8" (str.++ "q" (str.++ "R" (str.++ "8" (str.++ "P" (str.++ "." (str.++ "5" (str.++ "x" (str.++ "9" (str.++ "." (str.++ "b" (str.++ "A" "")))))))))))))))))

(define-fun Witness2 () String (str.++ "5" (str.++ "u" (str.++ "@" (str.++ "q" (str.++ "x" (str.++ "8" (str.++ "9" (str.++ "\u{b5}" (str.++ "-" (str.++ "\u{cd}" (str.++ "\u{aa}" (str.++ "f" (str.++ "w" (str.++ "\u{f9}" (str.++ "B" (str.++ "." (str.++ "n" (str.++ "I" (str.++ "M" ""))))))))))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.++ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))(re.++ (re.* (re.++ (re.* (re.union (re.range "-" ".")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))) (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))))(re.++ (re.range "@" "@")(re.++ (re.+ (re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z"))))(re.++ (re.* (re.++ (re.* (re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))) (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z"))))) (re.range "." ".")))) ((_ re.loop 2 9) (re.union (re.range "A" "Z") (re.range "a" "z"))))))) (str.to_re "")))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "(" (str.++ "0" (str.++ "7" (str.++ "8" (str.++ ")" (str.++ "7" (str.++ "2" (str.++ "2" (str.++ "9" (str.++ "8" (str.++ "9" (str.++ "9" (str.++ "8" ""))))))))))))))

(define-fun Witness2 () String (str.++ "(" (str.++ "0" (str.++ "7" (str.++ "9" (str.++ ")" (str.++ "-" (str.++ "9" (str.++ "6" (str.++ "9" (str.++ "8" (str.++ "9" (str.++ "9" (str.++ "1" (str.++ "8" "")))))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.union (re.++ (re.range "(" "(")(re.++ (re.opt (re.range "0" "0"))(re.++ (re.range "1" "9")(re.++ (re.range "0" "9") (re.range ")" ")"))))) (re.++ (re.opt (re.range "0" "0"))(re.++ (re.range "1" "9") (re.range "0" "9"))))(re.++ (re.opt (re.range " " "."))(re.++ (re.++ (re.range "1" "9") ((_ re.loop 3 3) (re.range "0" "9")))(re.++ (re.opt (re.range " " "."))(re.++ ((_ re.loop 4 4) (re.range "0" "9")) (str.to_re "")))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "Y" (str.++ "-" (str.++ "1" (str.++ "8" (str.++ "0" (str.++ "2" "")))))))

(define-fun Witness2 () String (str.++ "P" (str.++ "4" (str.++ "7" (str.++ "9" (str.++ "8" ""))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.range "A" "Z")(re.++ (re.opt (re.union (re.range " " " ") (re.range "-" "-")))(re.++ (re.range "1" "9")(re.++ ((_ re.loop 3 3) (re.range "0" "9")) (str.to_re ""))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "1" (str.++ "5" (str.++ "," (str.++ "4" (str.++ "8" ""))))))

(define-fun Witness2 () String (str.++ "-" (str.++ "," (str.++ "9" ""))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.opt (re.range "-" "-"))(re.++ (re.opt (re.range "," ","))(re.++ (re.union (re.++ ((_ re.loop 1 3) (re.range "0" "9")) (re.* (re.++ (re.range "." ".") ((_ re.loop 3 3) (re.range "0" "9"))))) (re.+ (re.range "0" "9")))(re.++ (re.opt (re.++ (re.range "," ",") ((_ re.loop 2 2) (re.range "0" "9")))) (str.to_re ""))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String "")

(define-fun Witness2 () String (str.++ "Y" (str.++ "c" (str.++ "e" (str.++ "k" (str.++ "m" (str.++ "e" (str.++ "h" (str.++ "p" (str.++ " " (str.++ "V" (str.++ "a" (str.++ "c" (str.++ " " (str.++ "J" (str.++ "h" ""))))))))))))))))

(assert (= regexA (re.union (re.++ (str.to_re "")(re.++ (re.++ (re.range "A" "Z") (re.+ (re.range "a" "z"))) (str.to_re "")))(re.union (re.++ (str.to_re "")(re.++ (re.++ (re.range "A" "Z")(re.++ (re.+ (re.range "a" "z"))(re.++ (re.range " " " ")(re.++ (re.range "A" "Z") (re.+ (re.range "a" "z")))))) (str.to_re "")))(re.union (re.++ (str.to_re "")(re.++ (re.++ (re.range "A" "Z")(re.++ (re.+ (re.range "a" "z"))(re.++ (re.range " " " ")(re.++ (re.range "A" "Z")(re.++ (re.+ (re.range "a" "z"))(re.++ (re.range " " " ")(re.++ (re.range "A" "Z") (re.+ (re.range "a" "z"))))))))) (str.to_re ""))) (re.++ (str.to_re "") (str.to_re "")))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "6" (str.++ "." (str.++ "9" (str.++ "8" (str.++ "0" ""))))))

(define-fun Witness2 () String (str.++ "2" (str.++ "." (str.++ "9" (str.++ "8" (str.++ "9" (str.++ "0" "")))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ ((_ re.loop 1 3) (re.range "0" "9"))(re.++ (re.range "." ".")(re.++ ((_ re.loop 1 4) (re.range "0" "9")) (str.to_re "")))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "\u{85}" (str.++ "\u{85}" (str.++ "\u{85}" ""))))

(define-fun Witness2 () String (str.++ "-" ""))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.+ (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))))))) (str.to_re "")))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "Z" (str.++ "Z" (str.++ "&" (str.++ "8" (str.++ "0" (str.++ "0" (str.++ "2" (str.++ "1" (str.++ "9" (str.++ "\u{da}" (str.++ "\u{cf}" (str.++ "a" "")))))))))))))

(define-fun Witness2 () String (str.++ "|" (str.++ "I" (str.++ "c" (str.++ "a" (str.++ "8" (str.++ "8" (str.++ "0" (str.++ "2" (str.++ "2" (str.++ "8" (str.++ "8" (str.++ "J" (str.++ "7" (str.++ "u" (str.++ "u" (str.++ "|" "")))))))))))))))))

(assert (= regexA (re.union (re.++ (str.to_re "")(re.++ ((_ re.loop 3 3) (re.union (re.range "&" "&")(re.union (re.range ";" ";")(re.union (re.range "A" "Z")(re.union (re.range "a" "z") (re.range "|" "|"))))))(re.++ (re.union (re.++ ((_ re.loop 2 2) (re.range "0" "9"))(re.++ (re.union (re.++ (re.range "0" "0") (re.union (re.range "1" "1") (re.range "3" "9"))) (re.++ (re.range "1" "1") (re.range "0" "2"))) (re.union (re.++ (re.range "0" "0") (re.range "1" "9"))(re.union (re.++ (re.range "1" "2") (re.range "0" "9")) (str.to_re (str.++ "3" (str.++ "0" "")))))))(re.union (re.++ ((_ re.loop 2 2) (re.range "0" "9"))(re.++ (re.union (re.++ (re.range "0" "0") (re.union (re.range "1" "1")(re.union (re.range "3" "3")(re.union (re.range "5" "5") (re.range "7" "8"))))) (re.++ (re.range "1" "1") (re.union (re.range "0" "0") (re.range "2" "2")))) (re.union (re.++ (re.range "0" "0") (re.range "1" "9"))(re.union (re.++ (re.range "1" "2") (re.range "0" "9")) (re.++ (re.range "3" "3") (re.range "0" "1"))))))(re.union (re.++ (re.union (re.++ (re.union (re.range "0" "0")(re.union (re.range "2" "2")(re.union (re.range "4" "4")(re.union (re.range "6" "6") (re.range "8" "8"))))) (re.union (re.range "0" "0")(re.union (re.range "4" "4") (re.range "8" "8")))) (re.++ (re.union (re.range "1" "1")(re.union (re.range "3" "3")(re.union (re.range "5" "5")(re.union (re.range "7" "7") (re.range "9" "9"))))) (re.union (re.range "2" "2") (re.range "6" "6"))))(re.++ (str.to_re (str.++ "0" (str.++ "2" ""))) (re.union (re.++ (re.range "0" "0") (re.range "1" "9")) (re.++ (re.range "1" "2") (re.range "0" "9"))))) (re.++ ((_ re.loop 2 2) (re.range "1" "9"))(re.++ (str.to_re (str.++ "0" (str.++ "2" ""))) (re.union (re.++ (re.range "0" "0") (re.range "1" "9")) (re.++ (re.range "1" "2") (re.range "0" "8"))))))))(re.++ (re.++ ((_ re.loop 2 2) (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))) (re.union (re.range "0" "9")(re.union (re.range "A" "A")(re.union (re.range "a" "a") (re.range "|" "|"))))) (str.to_re ""))))) (re.++ (str.to_re "")(re.++ ((_ re.loop 4 4) (re.union (re.range "A" "Z")(re.union (re.range "a" "z") (re.range "|" "|"))))(re.++ (re.union (re.++ ((_ re.loop 2 2) (re.range "0" "9"))(re.++ (re.union (re.++ (re.range "0" "0") (re.union (re.range "1" "1") (re.range "3" "9"))) (re.++ (re.range "1" "1") (re.range "0" "2"))) (re.union (re.++ (re.range "0" "0") (re.range "1" "9"))(re.union (re.++ (re.range "1" "2") (re.range "0" "9")) (str.to_re (str.++ "3" (str.++ "0" "")))))))(re.union (re.++ ((_ re.loop 2 2) (re.range "0" "9"))(re.++ (re.union (re.++ (re.range "0" "0") (re.union (re.range "1" "1")(re.union (re.range "3" "3")(re.union (re.range "5" "5") (re.range "7" "8"))))) (re.++ (re.range "1" "1") (re.union (re.range "0" "0") (re.range "2" "2")))) (re.union (re.++ (re.range "0" "0") (re.range "1" "9"))(re.union (re.++ (re.range "1" "2") (re.range "0" "9")) (re.++ (re.range "3" "3") (re.range "0" "1"))))))(re.union (re.++ (re.union (re.++ (re.union (re.range "0" "0")(re.union (re.range "2" "2")(re.union (re.range "4" "4")(re.union (re.range "6" "6") (re.range "8" "8"))))) (re.union (re.range "0" "0")(re.union (re.range "4" "4") (re.range "8" "8")))) (re.++ (re.union (re.range "1" "1")(re.union (re.range "3" "3")(re.union (re.range "5" "5")(re.union (re.range "7" "7") (re.range "9" "9"))))) (re.union (re.range "2" "2") (re.range "6" "6"))))(re.++ (str.to_re (str.++ "0" (str.++ "2" ""))) (re.union (re.++ (re.range "0" "0") (re.range "1" "9")) (re.++ (re.range "1" "2") (re.range "0" "9"))))) (re.++ ((_ re.loop 2 2) (re.range "1" "9"))(re.++ (str.to_re (str.++ "0" (str.++ "2" ""))) (re.union (re.++ (re.range "0" "0") (re.range "1" "9")) (re.++ (re.range "1" "2") (re.range "0" "8"))))))))(re.++ ((_ re.loop 0 3) (re.++ ((_ re.loop 2 2) (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))) (re.union (re.range "0" "9")(re.union (re.range "A" "A")(re.union (re.range "a" "a") (re.range "|" "|")))))) (str.to_re ""))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "." (str.++ "@" (str.++ "[" (str.++ "8" (str.++ "9" (str.++ "7" (str.++ "." (str.++ "2" (str.++ "2" (str.++ "9" (str.++ "." (str.++ "7" (str.++ "4" (str.++ "9" (str.++ "." (str.++ "\u{a0}" (str.++ "\u{a0}" (str.++ "\u{a0}" (str.++ "\u{85}" ""))))))))))))))))))))

(define-fun Witness2 () String (str.++ "3" (str.++ "9" (str.++ "-" (str.++ "y" (str.++ "R" (str.++ "8" (str.++ "F" (str.++ "8" (str.++ "A" (str.++ "8" (str.++ "_" (str.++ "." (str.++ "-" (str.++ "@" (str.++ "[" (str.++ "4" (str.++ "." (str.++ "8" (str.++ "3" (str.++ "4" (str.++ "." (str.++ "9" (str.++ "." ""))))))))))))))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.* (re.++ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))(re.++ (re.* (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_") (re.range "a" "z")))))(re.++ (re.opt (re.opt (re.range "." "."))) (re.+ (re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_") (re.range "a" "z"))))))))))(re.++ (re.opt (re.range "." "."))(re.++ (re.range "@" "@")(re.++ (re.union (re.++ (re.range "[" "[")(re.++ ((_ re.loop 1 3) (re.range "0" "9"))(re.++ (re.range "." ".")(re.++ ((_ re.loop 1 3) (re.range "0" "9"))(re.++ (re.range "." ".")(re.++ ((_ re.loop 1 3) (re.range "0" "9")) (re.range "." "."))))))) (re.++ (re.+ (re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))))(re.++ (re.++ (re.range "." ".") ((_ re.loop 2 10) (re.union (re.range "A" "Z") (re.range "a" "z"))))(re.++ (re.opt (re.++ (re.range "." ".") ((_ re.loop 2 10) (re.union (re.range "A" "Z") (re.range "a" "z"))))) (re.opt (re.++ (re.range "." ".") ((_ re.loop 2 10) (re.union (re.range "A" "Z") (re.range "a" "z")))))))))(re.++ (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))) (str.to_re "")))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "\u{07}" (str.++ "\u{02}" (str.++ "\u{99}" (str.++ "9" (str.++ "5" (str.++ "6" (str.++ "\u{ab}" (str.++ "1" (str.++ "\u{9c}" (str.++ "\u{86}" (str.++ "8" (str.++ "1" (str.++ "\u{a5}" (str.++ "8" (str.++ "1" (str.++ "\u{d6}" (str.++ "\u{00}" (str.++ "\u{90}" (str.++ "_" (str.++ "8" (str.++ "8" ""))))))))))))))))))))))

(define-fun Witness2 () String (str.++ "0" (str.++ "\u{83}" (str.++ "X" (str.++ "2" (str.++ "9" (str.++ "\u{da}" (str.++ "\u{90}" (str.++ "[" (str.++ "5" (str.++ "8" (str.++ "6" (str.++ "0" (str.++ "4" (str.++ "\u{f2}" (str.++ "9" (str.++ "F" (str.++ " " (str.++ "3" (str.++ "\u{bd}" (str.++ "'" (str.++ "\u{5c}" ""))))))))))))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.* (re.union (re.range "\u{00}" "/") (re.range ":" "\u{ff}")))(re.++ ((_ re.loop 10 10) (re.++ (re.range "0" "9") (re.* (re.union (re.range "\u{00}" "/") (re.range ":" "\u{ff}"))))) (str.to_re ""))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "\u{0c}" (str.++ "d" "")))

(define-fun Witness2 () String (str.++ "O" (str.++ "\u{0a}" (str.++ "\u{09}" (str.++ "z" (str.++ "Y" ""))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ ((_ re.loop 2 64) (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "," "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "a" "z")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))))))) (str.to_re "")))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String "")

(define-fun Witness2 () String (str.++ "?" (str.++ "[" (str.++ "%" (str.++ "-" (str.++ "]" (str.++ "=" (str.++ "." (str.++ "%" (str.++ "-" ""))))))))))

(assert (= regexA (re.* (re.++ (re.union (re.range "&" "&")(re.union (re.range "?" "?") (re.range "\u{5c}" "\u{5c}")))(re.++ (re.union (re.range "." ".")(re.union (re.range "0" "9")(re.union (re.range "[" "\u{5c}") (re.range "a" "z"))))(re.++ (str.to_re (str.++ "%" (str.++ "-" "")))(re.++ (re.+ (re.range "]" "]")) (re.opt (re.++ (re.range "=" "=")(re.++ (re.union (re.range "." ".")(re.union (re.range "[" "\u{5c}") (re.range "a" "z")))(re.++ (str.to_re (str.++ "%" (str.++ "-" ""))) (re.* (re.range "]" "]")))))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "6" (str.++ "8" (str.++ "0" (str.++ "2" (str.++ "2" (str.++ "9" "")))))))

(define-fun Witness2 () String (str.++ "2" (str.++ "8" (str.++ "0" (str.++ "2" (str.++ "1" (str.++ "9" "")))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.union (re.++ ((_ re.loop 2 2) (re.range "0" "9")) (re.union (re.++ (re.union (re.++ (re.range "0" "0") (re.union (re.range "1" "1")(re.union (re.range "3" "3")(re.union (re.range "5" "5") (re.range "7" "8"))))) (re.++ (re.range "1" "1") (re.union (re.range "0" "0") (re.range "2" "2")))) (re.union (re.++ (re.range "0" "0") (re.range "1" "9"))(re.union (re.++ (re.range "1" "2") (re.range "0" "9")) (re.++ (re.range "3" "3") (re.range "0" "1")))))(re.union (re.++ (re.union (re.++ (re.range "0" "0") (re.union (re.range "1" "1") (re.range "3" "9"))) (re.++ (re.range "1" "1") (re.range "0" "2"))) (re.union (re.++ (re.range "0" "0") (re.range "1" "9"))(re.union (re.++ (re.range "1" "2") (re.range "0" "9")) (str.to_re (str.++ "3" (str.++ "0" "")))))) (re.++ (str.to_re (str.++ "0" (str.++ "2" ""))) (re.union (re.++ (re.range "0" "0") (re.range "1" "9"))(re.union (re.++ (re.range "1" "1") (re.range "0" "9")) (re.++ (re.range "2" "2") (re.range "0" "8")))))))) (re.++ (re.union (re.++ (re.union (re.range "0" "0")(re.union (re.range "2" "2")(re.union (re.range "4" "4")(re.union (re.range "6" "6") (re.range "8" "8"))))) (re.union (re.range "0" "0")(re.union (re.range "4" "4") (re.range "8" "8")))) (re.++ (re.union (re.range "1" "1")(re.union (re.range "3" "3")(re.union (re.range "5" "5")(re.union (re.range "7" "7") (re.range "9" "9"))))) (re.union (re.range "2" "2") (re.range "6" "6")))) (str.to_re (str.++ "0" (str.++ "2" (str.++ "2" (str.++ "9" ""))))))) (str.to_re "")))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "8" (str.++ "," (str.++ "9" ""))))

(define-fun Witness2 () String (str.++ "3" (str.++ "2" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "6" "")))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.opt (re.union (re.range "+" "+") (re.range "-" "-")))(re.++ (re.+ (re.range "0" "9"))(re.++ (re.opt (re.++ (re.range "," ",") (re.+ (re.range "0" "9")))) (str.to_re "")))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "0" (str.++ "," (str.++ "3" ""))))

(define-fun Witness2 () String "")

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.union (re.++ (re.range "1" "9")(re.++ ((_ re.loop 0 2) (re.range "0" "9"))(re.++ (re.* (re.++ (re.range "." ".") ((_ re.loop 3 3) (re.range "0" "9")))) (re.opt (re.++ (re.range "," ",") ((_ re.loop 0 2) (re.range "0" "9")))))))(re.union (re.++ (re.range "1" "9")(re.++ (re.* (re.range "0" "9")) (re.opt (re.++ (re.range "," ",") ((_ re.loop 0 2) (re.range "0" "9"))))))(re.union (re.++ (re.range "0" "0") (re.opt (re.++ (re.range "," ",") ((_ re.loop 0 2) (re.range "0" "9"))))) (re.opt (re.++ (re.range "," ",") ((_ re.loop 1 2) (re.range "0" "9"))))))) (str.to_re "")))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "\u{5c}" (str.++ "\u{5c}" (str.++ "\u{f6}" (str.++ "$" (str.++ "\u{5c}" (str.++ "j" (str.++ "." (str.++ "t" (str.++ "x" (str.++ "t" "")))))))))))

(define-fun Witness2 () String (str.++ "\u{5c}" (str.++ "\u{5c}" (str.++ "1" (str.++ "A" (str.++ "\u{5c}" (str.++ "7" (str.++ "\u{fb}" (str.++ "." (str.++ "T" (str.++ "X" (str.++ "T" ""))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.union (re.++ (re.union (re.range "A" "Z") (re.range "a" "z")) (re.range ":" ":")) (re.++ (re.++ ((_ re.loop 2 2) (re.range "\u{5c}" "\u{5c}")) (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))) (re.opt (re.range "$" "$"))))(re.++ (re.+ (re.++ (re.range "\u{5c}" "\u{5c}") (re.++ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))) (re.* (re.union (re.range " " " ")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))))))(re.++ (re.range "." ".")(re.++ (re.union (str.to_re (str.++ "t" (str.++ "x" (str.++ "t" "")))) (str.to_re (str.++ "T" (str.++ "X" (str.++ "T" ""))))) (str.to_re ""))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "9" (str.++ "3" (str.++ "9" (str.++ "9" (str.++ "\u{85}" (str.++ "1" (str.++ "2" (str.++ "0" (str.++ "9" (str.++ "\u{0d}" (str.++ "1" (str.++ "1" (str.++ ":" (str.++ "1" (str.++ "8" (str.++ ":" (str.++ "0" (str.++ "7" (str.++ "\u{a0}" (str.++ "|" (str.++ "P" ""))))))))))))))))))))))

(define-fun Witness2 () String (str.++ "8" (str.++ "8" (str.++ "2" (str.++ "4" (str.++ "1" (str.++ "1" (str.++ "2" (str.++ "9" "")))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.union (re.++ ((_ re.loop 2 2) (re.range "0" "9"))(re.++ (re.union (re.++ (re.union (re.range "0" "0")(re.union (re.range "2" "2")(re.union (re.range "4" "4")(re.union (re.range "6" "6") (re.range "8" "8"))))) (re.union (re.range "0" "0")(re.union (re.range "4" "4") (re.range "8" "8")))) (re.++ (re.union (re.range "1" "1")(re.union (re.range "3" "3")(re.union (re.range "5" "5")(re.union (re.range "7" "7") (re.range "9" "9"))))) (re.union (re.range "2" "2") (re.range "6" "6"))))(re.++ (re.opt (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "-" "-")(re.union (re.range "/" "/")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))))) (re.union (re.++ (re.union (re.++ (re.opt (re.range "0" "0")) (re.union (re.range "1" "1")(re.union (re.range "3" "3")(re.union (re.range "5" "5") (re.range "7" "8"))))) (re.++ (re.range "1" "1") (re.union (re.range "0" "0") (re.range "2" "2"))))(re.++ (re.opt (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "-" "-")(re.union (re.range "/" "/")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))))) (re.union (re.++ (re.opt (re.range "0" "0")) (re.range "1" "9"))(re.union (re.++ (re.range "1" "2") (re.range "0" "9")) (re.++ (re.range "3" "3") (re.range "0" "1"))))))(re.union (re.++ (re.union (re.++ (re.opt (re.range "0" "0")) (re.union (re.range "4" "4")(re.union (re.range "6" "6") (re.range "9" "9")))) (str.to_re (str.++ "1" (str.++ "1" ""))))(re.++ (re.opt (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "-" "-")(re.union (re.range "/" "/")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))))) (re.union (re.++ (re.opt (re.range "0" "0")) (re.range "1" "9"))(re.union (re.++ (re.range "1" "2") (re.range "0" "9")) (str.to_re (str.++ "3" (str.++ "0" ""))))))) (re.++ (re.opt (re.range "0" "0"))(re.++ (re.range "2" "2")(re.++ (re.opt (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "-" "-")(re.union (re.range "/" "/")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))))) (re.union (re.++ (re.opt (re.range "0" "0")) (re.range "1" "9")) (re.++ (re.range "1" "2") (re.range "0" "9"))))))))))) (re.++ ((_ re.loop 2 2) (re.range "0" "9"))(re.++ (re.union (re.++ (re.union (re.range "0" "0")(re.union (re.range "2" "2")(re.union (re.range "4" "4")(re.union (re.range "6" "6") (re.range "8" "8"))))) (re.union (re.range "1" "3")(re.union (re.range "5" "7") (re.range "9" "9")))) (re.++ (re.union (re.range "1" "1")(re.union (re.range "3" "3")(re.union (re.range "5" "5")(re.union (re.range "7" "7") (re.range "9" "9"))))) (re.union (re.range "0" "1")(re.union (re.range "3" "5") (re.range "7" "9")))))(re.++ (re.opt (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "-" "-")(re.union (re.range "/" "/")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))))) (re.union (re.++ (re.union (re.++ (re.opt (re.range "0" "0")) (re.union (re.range "1" "1")(re.union (re.range "3" "3")(re.union (re.range "5" "5") (re.range "7" "8"))))) (re.++ (re.range "1" "1") (re.union (re.range "0" "0") (re.range "2" "2"))))(re.++ (re.opt (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "-" "-")(re.union (re.range "/" "/")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))))) (re.union (re.++ (re.opt (re.range "0" "0")) (re.range "1" "9"))(re.union (re.++ (re.range "1" "2") (re.range "0" "9")) (re.++ (re.range "3" "3") (re.range "0" "1"))))))(re.union (re.++ (re.union (re.++ (re.opt (re.range "0" "0")) (re.union (re.range "4" "4")(re.union (re.range "6" "6") (re.range "9" "9")))) (str.to_re (str.++ "1" (str.++ "1" ""))))(re.++ (re.opt (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "-" "-")(re.union (re.range "/" "/")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))))) (re.union (re.++ (re.opt (re.range "0" "0")) (re.range "1" "9"))(re.union (re.++ (re.range "1" "2") (re.range "0" "9")) (str.to_re (str.++ "3" (str.++ "0" ""))))))) (re.++ (re.opt (re.range "0" "0"))(re.++ (re.range "2" "2")(re.++ (re.opt (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "-" "-")(re.union (re.range "/" "/")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))))) (re.union (re.++ (re.opt (re.range "0" "0")) (re.range "1" "9"))(re.union (re.++ (re.range "1" "1") (re.range "0" "9")) (re.++ (re.range "2" "2") (re.range "0" "8")))))))))))))(re.++ (re.opt (re.++ (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))) (re.++ (re.union (re.++ (re.opt (re.range "0" "0")) (re.range "1" "9")) (re.++ (re.range "1" "1") (re.range "0" "2")))(re.++ (re.range ":" ":")(re.++ (re.++ (re.range "0" "5") (re.range "0" "9"))(re.++ (re.union (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))) (re.++ (re.range ":" ":")(re.++ (re.++ (re.range "0" "5") (re.range "0" "9")) (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))))) ((_ re.loop 2 2) (re.union (re.range "A" "A")(re.union (re.range "M" "M")(re.union (re.range "P" "P")(re.union (re.range "a" "a")(re.union (re.range "m" "m")(re.union (re.range "p" "p") (re.range "|" "|")))))))))))))) (str.to_re ""))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "K" (str.++ "N" (str.++ "O" (str.++ "L" (str.++ "L" ""))))))

(define-fun Witness2 () String (str.++ "H" (str.++ "E" (str.++ "A" (str.++ "T" (str.++ "H" ""))))))

(assert (= regexA (re.union (re.++ (re.range "A" "A") (re.union (str.to_re (str.++ "C" (str.++ "C" (str.++ "E" (str.++ "S" (str.++ "S" ""))))))(re.union (str.to_re (str.++ "L" (str.++ "L" (str.++ "E" (str.++ "Y" "")))))(re.union (str.to_re (str.++ "P" (str.++ "P" (str.++ "R" (str.++ "O" (str.++ "A" (str.++ "C" (str.++ "H" ""))))))))(re.union (re.++ (re.range "R" "R") (re.union (str.to_re (str.++ "C" (str.++ "A" (str.++ "D" (str.++ "E" ""))))) (str.to_re (str.++ "T" (str.++ "E" (str.++ "R" (str.++ "Y" ""))))))) (re.++ (str.to_re (str.++ "V" (str.++ "E" ""))) (re.opt (str.to_re (str.++ "N" (str.++ "U" (str.++ "E" "")))))))))))(re.union (re.++ (re.range "B" "B") (re.union (re.++ (re.range "A" "A") (re.union (str.to_re (str.++ "N" (str.++ "K" "")))(re.union (str.to_re (str.++ "S" (str.++ "I" (str.++ "N" "")))) (re.range "Y" "Y"))))(re.union (re.++ (re.range "E" "E") (re.union (str.to_re (str.++ "A" (str.++ "C" (str.++ "H" "")))) (str.to_re (str.++ "N" (str.++ "D" "")))))(re.union (re.++ (re.range "L" "L") (re.union (str.to_re (str.++ "D" (str.++ "G" ""))) (str.to_re (str.++ "V" (str.++ "D" "")))))(re.union (re.++ (re.range "O" "O") (re.union (str.to_re (str.++ "U" (str.++ "L" (str.++ "E" (str.++ "V" (str.++ "A" (str.++ "R" (str.++ "D" ""))))))))(re.union (str.to_re (str.++ "A" (str.++ "R" (str.++ "D" (str.++ "W" (str.++ "A" (str.++ "L" (str.++ "K" "")))))))) (str.to_re (str.++ "W" (str.++ "L" ""))))))(re.union (re.++ (re.range "R" "R") (re.union (str.to_re (str.++ "A" (str.++ "C" (str.++ "E" ""))))(re.union (str.to_re (str.++ "A" (str.++ "E" "")))(re.union (str.to_re (str.++ "E" (str.++ "A" (str.++ "K" ""))))(re.union (str.to_re (str.++ "I" (str.++ "D" (str.++ "G" (str.++ "E" ""))))) (re.++ (re.range "O" "O") (re.union (str.to_re (str.++ "A" (str.++ "D" (str.++ "W" (str.++ "A" (str.++ "Y" ""))))))(re.union (str.to_re (str.++ "O" (str.++ "K" ""))) (re.range "W" "W")))))))))(re.union (str.to_re (str.++ "U" (str.++ "I" (str.++ "L" (str.++ "D" (str.++ "I" (str.++ "N" (str.++ "G" "")))))))) (str.to_re (str.++ "Y" (str.++ "P" (str.++ "A" (str.++ "S" (str.++ "S" "")))))))))))))(re.union (re.++ (re.range "C" "C") (re.union (re.++ (re.range "A" "A") (re.union (str.to_re (str.++ "N" (str.++ "A" (str.++ "L" "")))) (str.to_re (str.++ "U" (str.++ "S" (str.++ "E" (str.++ "W" (str.++ "A" (str.++ "Y" "")))))))))(re.union (re.++ (str.to_re (str.++ "E" (str.++ "N" (str.++ "T" (str.++ "R" (str.++ "E" "")))))) (re.opt (str.to_re (str.++ "W" (str.++ "A" (str.++ "Y" ""))))))(re.union (str.to_re (str.++ "H" (str.++ "A" (str.++ "S" (str.++ "E" "")))))(re.union (re.++ (str.to_re (str.++ "I" (str.++ "R" (str.++ "C" "")))) (re.union (re.++ (str.to_re (str.++ "L" (str.++ "E" ""))) (re.opt (re.range "T" "T"))) (re.++ (re.range "U" "U") (re.union (str.to_re (str.++ "I" (str.++ "T" ""))) (re.range "S" "S")))))(re.union (re.++ (re.range "L" "L") (re.opt (str.to_re (str.++ "O" (str.++ "S" (str.++ "E" ""))))))(re.union (re.++ (re.range "O" "O") (re.union (str.to_re (str.++ "M" (str.++ "M" (str.++ "O" (str.++ "N" "")))))(re.union (str.to_re (str.++ "N" (str.++ "C" (str.++ "O" (str.++ "U" (str.++ "R" (str.++ "S" (str.++ "E" ""))))))))(re.union (str.to_re (str.++ "P" (str.++ "S" (str.++ "E" ""))))(re.union (re.++ (re.range "R" "R") (re.union (str.to_re (str.++ "N" (str.++ "E" (str.++ "R" "")))) (str.to_re (str.++ "S" (str.++ "O" "")))))(re.union (re.++ (str.to_re (str.++ "U" (str.++ "R" ""))) (re.union (str.to_re (str.++ "S" (str.++ "E" ""))) (re.++ (re.range "T" "T") (re.opt (str.to_re (str.++ "Y" (str.++ "A" (str.++ "R" (str.++ "D" ""))))))))) (str.to_re (str.++ "V" (str.++ "E" "")))))))))(re.union (re.++ (re.range "R" "R") (re.union (re.++ (str.to_re (str.++ "E" (str.++ "S" ""))) (re.opt (re.union (str.to_re (str.++ "C" (str.++ "E" (str.++ "N" (str.++ "T" ""))))) (re.range "T" "T"))))(re.union (str.to_re (str.++ "I" (str.++ "E" (str.++ "F" "")))) (re.++ (str.to_re (str.++ "O" (str.++ "S" (str.++ "S" "")))) (re.opt (str.to_re (str.++ "I" (str.++ "N" (str.++ "G" ""))))))))) (re.++ (re.range "U" "U") (re.union (str.to_re (str.++ "L" (str.++ "D" (str.++ "E" (str.++ "S" (str.++ "A" (str.++ "C" ""))))))) (str.to_re (str.++ "R" (str.++ "V" (str.++ "E" ""))))))))))))))(re.union (re.++ (re.range "D" "D") (re.union (str.to_re (str.++ "A" (str.++ "L" (str.++ "E" ""))))(re.union (str.to_re (str.++ "E" (str.++ "V" (str.++ "I" (str.++ "A" (str.++ "T" (str.++ "I" (str.++ "O" (str.++ "N" "")))))))))(re.union (str.to_re (str.++ "I" (str.++ "P" "")))(re.union (str.to_re (str.++ "O" (str.++ "W" (str.++ "N" (str.++ "S" ""))))) (re.++ (re.range "R" "R") (re.opt (re.++ (str.to_re (str.++ "I" (str.++ "V" (str.++ "E" "")))) (re.opt (str.to_re (str.++ "W" (str.++ "A" (str.++ "Y" "")))))))))))))(re.union (re.++ (re.range "E" "E") (re.union (str.to_re (str.++ "A" (str.++ "S" (str.++ "E" (str.++ "M" (str.++ "E" (str.++ "N" (str.++ "T" ""))))))))(re.union (str.to_re (str.++ "D" (str.++ "G" (str.++ "E" ""))))(re.union (str.to_re (str.++ "L" (str.++ "B" (str.++ "O" (str.++ "W" "")))))(re.union (re.++ (re.range "N" "N") (re.union (re.range "D" "D") (str.to_re (str.++ "T" (str.++ "R" (str.++ "A" (str.++ "N" (str.++ "C" (str.++ "E" "")))))))))(re.union (re.++ (re.range "S" "S") (re.union (str.to_re (str.++ "P" (str.++ "L" (str.++ "A" (str.++ "N" (str.++ "A" (str.++ "D" (str.++ "E" "")))))))) (str.to_re (str.++ "T" (str.++ "A" (str.++ "T" (str.++ "E" ""))))))) (re.++ (re.range "X" "X") (re.union (re.++ (re.range "P" "P")(re.++ (re.opt (str.to_re (str.++ "R" (str.++ "E" (str.++ "S" (str.++ "S" "")))))) (str.to_re (str.++ "W" (str.++ "A" (str.++ "Y" "")))))) (str.to_re (str.++ "T" (str.++ "E" (str.++ "N" (str.++ "S" (str.++ "I" (str.++ "O" (str.++ "N" ""))))))))))))))))(re.union (re.++ (re.range "F" "F") (re.union (str.to_re (str.++ "A" (str.++ "I" (str.++ "R" (str.++ "W" (str.++ "A" (str.++ "Y" "")))))))(re.union (str.to_re (str.++ "I" (str.++ "R" (str.++ "E" (str.++ "T" (str.++ "R" (str.++ "A" (str.++ "I" (str.++ "L" "")))))))))(re.union (re.++ (re.range "O" "O") (re.union (str.to_re (str.++ "L" (str.++ "L" (str.++ "O" (str.++ "W" ""))))) (re.++ (re.range "R" "R") (re.union (re.range "D" "D") (str.to_re (str.++ "M" (str.++ "A" (str.++ "T" (str.++ "I" (str.++ "O" (str.++ "N" ""))))))))))) (re.++ (re.range "R" "R") (re.union (str.to_re (str.++ "E" (str.++ "E" (str.++ "W" (str.++ "A" (str.++ "Y" "")))))) (re.++ (str.to_re (str.++ "O" (str.++ "N" (str.++ "T" "")))) (re.opt (str.to_re (str.++ "A" (str.++ "G" (str.++ "E" ""))))))))))))(re.union (re.++ (re.range "G" "G") (re.union (re.++ (re.range "A" "A") (re.union (re.range "P" "P")(re.union (re.++ (str.to_re (str.++ "R" (str.++ "D" (str.++ "E" (str.++ "N" ""))))) (re.opt (re.range "S" "S"))) (re.++ (str.to_re (str.++ "T" (str.++ "E" ""))) (re.opt (re.union (re.range "S" "S") (str.to_re (str.++ "W" (str.++ "A" (str.++ "Y" ""))))))))))(re.union (re.++ (re.range "L" "L") (re.union (str.to_re (str.++ "A" (str.++ "D" (str.++ "E" "")))) (str.to_re (str.++ "E" (str.++ "N" ""))))) (re.++ (re.range "R" "R") (re.union (str.to_re (str.++ "A" (str.++ "N" (str.++ "G" (str.++ "E" "")))))(re.union (str.to_re (str.++ "E" (str.++ "E" (str.++ "N" "")))) (re.++ (re.range "O" "O") (re.union (str.to_re (str.++ "U" (str.++ "N" (str.++ "D" "")))) (re.++ (str.to_re (str.++ "V" (str.++ "E" ""))) (re.opt (re.range "T" "T")))))))))))(re.union (re.++ (re.range "H" "H") (re.union (str.to_re (str.++ "A" (str.++ "V" (str.++ "E" (str.++ "N" "")))))(re.union (re.++ (re.range "E" "E") (re.union (str.to_re (str.++ "A" (str.++ "T" (str.++ "H" "")))) (str.to_re (str.++ "I" (str.++ "G" (str.++ "H" (str.++ "T" (str.++ "S" ""))))))))(re.union (re.++ (re.range "I" "I") (re.union (str.to_re (str.++ "G" (str.++ "H" (str.++ "W" (str.++ "A" (str.++ "Y" "")))))) (str.to_re (str.++ "L" (str.++ "L" "")))))(re.union (str.to_re (str.++ "U" (str.++ "B" ""))) (str.to_re (str.++ "W" (str.++ "Y" ""))))))))(re.union (re.++ (re.range "I" "I") (re.union (re.++ (str.to_re (str.++ "N" (str.++ "T" (str.++ "E" (str.++ "R" ""))))) (re.opt (str.to_re (str.++ "C" (str.++ "H" (str.++ "A" (str.++ "N" (str.++ "G" (str.++ "E" ""))))))))) (str.to_re (str.++ "S" (str.++ "L" (str.++ "A" (str.++ "N" (str.++ "D" ""))))))))(re.union (str.to_re (str.++ "J" (str.++ "U" (str.++ "N" (str.++ "C" (str.++ "T" (str.++ "I" (str.++ "O" (str.++ "N" "")))))))))(re.union (re.++ (re.range "K" "K") (re.union (str.to_re (str.++ "E" (str.++ "Y" ""))) (str.to_re (str.++ "N" (str.++ "O" (str.++ "L" (str.++ "L" "")))))))(re.union (re.++ (re.range "L" "L") (re.union (re.++ (re.range "A" "A") (re.opt (re.++ (str.to_re (str.++ "N" (str.++ "E" ""))) (re.opt (str.to_re (str.++ "W" (str.++ "A" (str.++ "Y" ""))))))))(re.union (re.++ (str.to_re (str.++ "I" (str.++ "N" ""))) (re.union (re.range "E" "E") (re.range "K" "K"))) (re.++ (re.range "O" "O") (re.union (re.++ (re.range "O" "O") (re.union (str.to_re (str.++ "K" (str.++ "O" (str.++ "U" (str.++ "T" ""))))) (re.range "P" "P"))) (str.to_re (str.++ "W" (str.++ "E" (str.++ "R" "")))))))))(re.union (re.++ (re.range "M" "M") (re.union (str.to_re (str.++ "A" (str.++ "L" (str.++ "L" ""))))(re.union (re.++ (re.range "E" "E") (re.union (re.++ (re.range "A" "A") (re.union (re.range "D" "D") (str.to_re (str.++ "N" (str.++ "D" (str.++ "E" (str.++ "R" ""))))))) (str.to_re (str.++ "W" (str.++ "S" ""))))) (str.to_re (str.++ "O" (str.++ "T" (str.++ "O" (str.++ "R" (str.++ "W" (str.++ "A" (str.++ "Y" "")))))))))))(re.union (str.to_re (str.++ "N" (str.++ "O" (str.++ "O" (str.++ "K" "")))))(re.union (re.++ (re.range "O" "O") (re.union (str.to_re (str.++ "U" (str.++ "T" (str.++ "L" (str.++ "O" (str.++ "O" (str.++ "K" ""))))))) (str.to_re (str.++ "V" (str.++ "E" (str.++ "R" (str.++ "P" (str.++ "A" (str.++ "S" (str.++ "S" ""))))))))))(re.union (re.++ (re.range "P" "P") (re.opt (re.union (re.++ (re.range "A" "A") (re.union (re.++ (re.range "R" "R") (re.union (str.to_re (str.++ "A" (str.++ "D" (str.++ "E" "")))) (re.++ (re.range "K" "K") (re.opt (re.union (str.to_re (str.++ "L" (str.++ "A" (str.++ "N" (str.++ "D" (str.++ "S" "")))))) (str.to_re (str.++ "W" (str.++ "A" (str.++ "Y" "")))))))))(re.union (str.to_re (str.++ "S" (str.++ "S" ""))) (re.++ (str.to_re (str.++ "T" (str.++ "H" ""))) (re.opt (str.to_re (str.++ "W" (str.++ "A" (str.++ "Y" "")))))))))(re.union (str.to_re (str.++ "D" (str.++ "E" "")))(re.union (str.to_re (str.++ "I" (str.++ "E" (str.++ "R" ""))))(re.union (re.++ (re.range "L" "L") (re.opt (re.++ (re.range "A" "A") (re.union (str.to_re (str.++ "C" (str.++ "E" ""))) (str.to_re (str.++ "Z" (str.++ "A" "")))))))(re.union (re.++ (re.range "O" "O") (re.union (str.to_re (str.++ "C" (str.++ "K" (str.++ "E" (str.++ "T" "")))))(re.union (str.to_re (str.++ "I" (str.++ "N" (str.++ "T" "")))) (str.to_re (str.++ "R" (str.++ "T" ""))))))(re.union (re.++ (str.to_re (str.++ "R" (str.++ "O" ""))) (re.union (str.to_re (str.++ "M" (str.++ "E" (str.++ "N" (str.++ "A" (str.++ "D" (str.++ "E" ""))))))) (str.to_re (str.++ "P" (str.++ "E" (str.++ "R" (str.++ "T" (str.++ "Y" "")))))))) (str.to_re (str.++ "U" (str.++ "R" (str.++ "S" (str.++ "U" (str.++ "I" (str.++ "T" "")))))))))))))))(re.union (re.++ (str.to_re (str.++ "Q" (str.++ "U" (str.++ "A" "")))) (re.union (re.++ (re.range "D" "D") (re.opt (str.to_re (str.++ "R" (str.++ "A" (str.++ "N" (str.++ "T" ""))))))) (re.++ (re.range "Y" "Y") (re.opt (re.range "S" "S")))))(re.union (re.++ (re.range "R" "R") (re.union (str.to_re (str.++ "A" (str.++ "M" (str.++ "B" (str.++ "L" (str.++ "E" ""))))))(re.union (re.range "D" "D")(re.union (re.++ (re.range "E" "E") (re.union (str.to_re (str.++ "A" (str.++ "C" (str.++ "H" ""))))(re.union (re.++ (re.range "S" "S") (re.union (str.to_re (str.++ "E" (str.++ "R" (str.++ "V" (str.++ "E" ""))))) (re.range "T" "T"))) (re.++ (re.range "T" "T") (re.union (str.to_re (str.++ "R" (str.++ "E" (str.++ "A" (str.++ "T" ""))))) (str.to_re (str.++ "U" (str.++ "R" (str.++ "N" "")))))))))(re.union (re.++ (re.range "I" "I") (re.union (re.++ (re.range "D" "D") (re.union (re.range "E" "E") (str.to_re (str.++ "G" (str.++ "E" "")))))(re.union (str.to_re (str.++ "N" (str.++ "G" ""))) (re.++ (re.range "S" "S") (re.union (re.range "E" "E") (str.to_re (str.++ "I" (str.++ "N" (str.++ "G" "")))))))))(re.union (re.++ (re.range "O" "O") (re.union (re.++ (str.to_re (str.++ "A" (str.++ "D" ""))) (re.opt (str.to_re (str.++ "W" (str.++ "A" (str.++ "Y" ""))))))(re.union (str.to_re (str.++ "T" (str.++ "A" (str.++ "R" (str.++ "Y" "")))))(re.union (re.++ (re.range "U" "U") (re.union (str.to_re (str.++ "N" (str.++ "D" ""))) (str.to_re (str.++ "T" (str.++ "E" ""))))) (re.range "W" "W"))))) (str.to_re (str.++ "U" (str.++ "N" "")))))))))(re.union (re.++ (re.range "S" "S") (re.union (re.++ (str.to_re (str.++ "E" (str.++ "R" "")))(re.++ (re.opt (str.to_re (str.++ "V" (str.++ "I" (str.++ "C" (str.++ "E" "")))))) (str.to_re (str.++ "W" (str.++ "A" (str.++ "Y" ""))))))(re.union (str.to_re (str.++ "I" (str.++ "D" (str.++ "I" (str.++ "N" (str.++ "G" ""))))))(re.union (str.to_re (str.++ "L" (str.++ "O" (str.++ "P" (str.++ "E" "")))))(re.union (str.to_re (str.++ "P" (str.++ "U" (str.++ "R" ""))))(re.union (str.to_re (str.++ "Q" (str.++ "U" (str.++ "A" (str.++ "R" (str.++ "E" ""))))))(re.union (re.++ (re.range "T" "T") (re.opt (re.union (str.to_re (str.++ "E" (str.++ "P" (str.++ "S" ""))))(re.union (str.to_re (str.++ "R" (str.++ "A" (str.++ "N" (str.++ "D" ""))))) (re.++ (re.range "R" "R") (re.union (str.to_re (str.++ "E" (str.++ "E" (str.++ "T" "")))) (str.to_re (str.++ "I" (str.++ "P" ""))))))))) (str.to_re (str.++ "U" (str.++ "B" (str.++ "W" (str.++ "A" (str.++ "Y" "")))))))))))))(re.union (re.++ (re.range "T" "T") (re.union (str.to_re (str.++ "A" (str.++ "R" (str.++ "N" ""))))(re.union (str.to_re (str.++ "C" (str.++ "E" "")))(re.union (str.to_re (str.++ "E" (str.++ "R" (str.++ "R" (str.++ "A" (str.++ "C" (str.++ "E" "")))))))(re.union (re.++ (str.to_re (str.++ "H" (str.++ "R" (str.++ "O" "")))) (re.union (str.to_re (str.++ "U" (str.++ "G" (str.++ "H" (str.++ "W" (str.++ "A" (str.++ "Y" ""))))))) (str.to_re (str.++ "W" (str.++ "A" (str.++ "Y" ""))))))(re.union (re.++ (re.range "O" "O") (re.union (str.to_re (str.++ "L" (str.++ "L" (str.++ "W" (str.++ "A" (str.++ "Y" "")))))) (re.union (re.range "P" "P") (re.range "R" "R"))))(re.union (re.++ (str.to_re (str.++ "R" (str.++ "A" ""))) (re.union (str.to_re (str.++ "C" (str.++ "K" ""))) (str.to_re (str.++ "I" (str.++ "L" ""))))) (str.to_re (str.++ "U" (str.++ "R" (str.++ "N" "")))))))))))(re.union (str.to_re (str.++ "U" (str.++ "N" (str.++ "D" (str.++ "E" (str.++ "R" (str.++ "P" (str.++ "A" (str.++ "S" (str.++ "S" ""))))))))))(re.union (re.++ (re.range "V" "V") (re.union (re.++ (str.to_re (str.++ "A" (str.++ "L" ""))) (re.union (re.range "E" "E") (str.to_re (str.++ "L" (str.++ "E" (str.++ "Y" "")))))) (re.++ (re.range "I" "I") (re.union (str.to_re (str.++ "E" (str.++ "W" ""))) (str.to_re (str.++ "S" (str.++ "T" (str.++ "A" "")))))))) (re.++ (re.range "W" "W") (re.union (re.++ (re.range "A" "A") (re.union (re.++ (str.to_re (str.++ "L" (str.++ "K" ""))) (re.opt (str.to_re (str.++ "W" (str.++ "A" (str.++ "Y" "")))))) (re.range "Y" "Y")))(re.union (str.to_re (str.++ "H" (str.++ "A" (str.++ "R" (str.++ "F" ""))))) (str.to_re (str.++ "Y" (str.++ "N" (str.++ "D" "")))))))))))))))))))))))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "Y" (str.++ "Z" (str.++ "P" (str.++ "N" (str.++ "8" (str.++ "7" (str.++ "8" ""))))))))

(define-fun Witness2 () String (str.++ "U" (str.++ "O" (str.++ "Q" (str.++ "J" (str.++ "8" (str.++ "2" (str.++ "2" ""))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ ((_ re.loop 4 4) (re.range "A" "Z"))(re.++ (re.range "1" "8")(re.++ ((_ re.loop 2 2) (re.range "0" "9")) (str.to_re "")))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "0" (str.++ "\u{d1}" (str.++ "9" (str.++ "3" (str.++ "9" (str.++ "5" (str.++ "9" (str.++ "8" (str.++ "3" (str.++ "8" (str.++ "0" (str.++ "5" (str.++ "o" (str.++ "\u{86}" "")))))))))))))))

(define-fun Witness2 () String (str.++ "b" (str.++ "\u{06}" (str.++ "8" (str.++ "4" (str.++ "9" (str.++ "K" (str.++ "=" (str.++ "8" (str.++ "8" (str.++ "8" (str.++ "\u{f9}" (str.++ "7" (str.++ "4" (str.++ "9" (str.++ "^" (str.++ "0" "")))))))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ ((_ re.loop 0 2) (re.union (re.range "\u{00}" "/") (re.range ":" "\u{ff}")))(re.++ ((_ re.loop 0 3) (re.range "0" "0"))(re.++ (re.opt (re.range "1" "1"))(re.++ ((_ re.loop 0 2) (re.union (re.range "\u{00}" "/") (re.range ":" "\u{ff}")))(re.++ (re.range "2" "9")(re.++ ((_ re.loop 2 2) (re.range "0" "9"))(re.++ ((_ re.loop 0 2) (re.union (re.range "\u{00}" "/") (re.range ":" "\u{ff}")))(re.++ ((_ re.loop 3 3) (re.range "0" "9"))(re.++ ((_ re.loop 0 2) (re.union (re.range "\u{00}" "/") (re.range ":" "\u{ff}")))(re.++ ((_ re.loop 3 3) (re.range "0" "9"))(re.++ ((_ re.loop 0 2) (re.union (re.range "\u{00}" "/") (re.range ":" "\u{ff}")))(re.++ (re.range "0" "9")(re.++ ((_ re.loop 0 2) (re.union (re.range "\u{00}" "/") (re.range ":" "\u{ff}"))) (str.to_re "")))))))))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "8" (str.++ "9" (str.++ "8" (str.++ "6" (str.++ "3" (str.++ "." (str.++ "1" ""))))))))

(define-fun Witness2 () String (str.++ "8" (str.++ "9" "")))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.union ((_ re.loop 1 8) (re.range "0" "9")) (re.++ ((_ re.loop 0 8) (re.range "0" "9"))(re.++ (re.range "." ".") ((_ re.loop 1 2) (re.range "0" "9"))))) (str.to_re "")))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "(" (str.++ "0" (str.++ "9" (str.++ "4" (str.++ "9" (str.++ "3" (str.++ " " (str.++ "6" (str.++ "7" (str.++ "3" (str.++ "9" (str.++ "3" (str.++ "5" (str.++ "\u{85}" (str.++ "#" (str.++ "0" (str.++ "8" (str.++ "9" "")))))))))))))))))))

(define-fun Witness2 () String (str.++ "0" (str.++ "1" (str.++ "5" (str.++ "1" (str.++ " " (str.++ "1" (str.++ "6" (str.++ "8" (str.++ "9" (str.++ "2" (str.++ "9" (str.++ "8" "")))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.union (re.++ (re.opt (re.range "(" "("))(re.++ (re.range "0" "0")(re.++ ((_ re.loop 4 4) (re.range "0" "9"))(re.++ (re.opt (re.range ")" ")"))(re.++ (re.opt (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ ((_ re.loop 3 3) (re.range "0" "9"))(re.++ (re.opt (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))) ((_ re.loop 3 3) (re.range "0" "9")))))))))(re.union (re.++ (re.opt (re.range "(" "("))(re.++ (re.range "0" "0")(re.++ ((_ re.loop 3 3) (re.range "0" "9"))(re.++ (re.opt (re.range ")" ")"))(re.++ (re.opt (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ ((_ re.loop 3 3) (re.range "0" "9"))(re.++ (re.opt (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))) ((_ re.loop 4 4) (re.range "0" "9"))))))))) (re.++ (re.opt (re.range "(" "("))(re.++ (re.range "0" "0")(re.++ ((_ re.loop 2 2) (re.range "0" "9"))(re.++ (re.opt (re.range ")" ")"))(re.++ (re.opt (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ ((_ re.loop 4 4) (re.range "0" "9"))(re.++ (re.opt (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))) ((_ re.loop 4 4) (re.range "0" "9")))))))))))(re.++ (re.opt (re.++ (re.opt (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (re.range "#" "#") (re.union ((_ re.loop 4 4) (re.range "0" "9")) ((_ re.loop 3 3) (re.range "0" "9")))))) (str.to_re ""))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "'" (str.++ "\u{df}" "")))

(define-fun Witness2 () String (str.++ "'" ""))

(assert (= regexA (re.union (re.++ (re.range "\u{22}" "\u{22}")(re.++ (re.* (re.union (re.range "\u{00}" "!") (re.range "#" "\u{ff}"))) (re.range "\u{22}" "\u{22}"))) (re.++ (re.++ (re.range "'" "'") (re.* (re.union (re.range "\u{00}" "\u{0c}") (re.range "\u{0e}" "\u{ff}")))) (re.opt (str.to_re (str.++ "\u{0d}" (str.++ "\u{0a}" ""))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "7" ""))

(define-fun Witness2 () String (str.++ "." (str.++ "9" (str.++ "8" ""))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.opt (re.range "0" "9"))(re.++ (re.* (re.union (re.range "," ",") (re.range "0" "9")))(re.++ (re.opt (re.range "." "."))(re.++ ((_ re.loop 1 2) (re.range "0" "9")) (str.to_re ""))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "8" (str.++ "9" (str.++ "7" (str.++ " " (str.++ "9" (str.++ "9" (str.++ "6" (str.++ "8" (str.++ "9" (str.++ "8" (str.++ "7" ""))))))))))))

(define-fun Witness2 () String (str.++ "9" (str.++ "6" (str.++ " " (str.++ "1" (str.++ "0" (str.++ "8" (str.++ "3" (str.++ "5" (str.++ "2" (str.++ "5" "")))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.union ((_ re.loop 2 3) (re.range "0" "9")) (re.++ (re.range "(" "(")(re.++ ((_ re.loop 2 3) (re.range "0" "9")) (re.range ")" ")"))))(re.++ (re.opt (re.range " " " "))(re.++ ((_ re.loop 3 4) (re.range "0" "9"))(re.++ (re.opt (re.range "-" "-"))(re.++ ((_ re.loop 3 4) (re.range "0" "9")) (str.to_re "")))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "Z" (str.++ "W" (str.++ "B" (str.++ "-" (str.++ "n" ""))))))

(define-fun Witness2 () String (str.++ "x" ""))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.+ (re.union (re.range "A" "Z") (re.range "a" "z")))(re.++ (re.opt (re.++ (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "-" "-")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))) (re.+ (re.union (re.range "A" "Z") (re.range "a" "z"))))) (str.to_re ""))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "4" (str.++ "9" (str.++ "1" (str.++ "1" (str.++ "8" ""))))))

(define-fun Witness2 () String (str.++ "1" ""))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.union (re.++ (str.to_re (str.++ "4" (str.++ "9" (str.++ "1" (str.++ "5" ""))))) (re.range "0" "1"))(re.union (re.++ (str.to_re (str.++ "4" (str.++ "9" (str.++ "1" ""))))(re.++ (re.range "0" "4") (re.range "0" "9")))(re.union (re.++ (str.to_re (str.++ "4" (str.++ "9" (str.++ "0" ""))))(re.++ (re.range "0" "9") (re.range "0" "9")))(re.union (re.++ (re.range "4" "4")(re.++ (re.range "0" "8") ((_ re.loop 3 3) (re.range "0" "9"))))(re.union (re.++ (re.range "1" "3") ((_ re.loop 4 4) (re.range "0" "9")))(re.union (re.++ (re.range "1" "9") ((_ re.loop 0 3) (re.range "0" "9"))) (re.range "0" "0"))))))) (str.to_re "")))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "E" (str.++ "E" (str.++ "6" (str.++ "0" (str.++ "7" (str.++ "3" (str.++ "6" (str.++ "6" (str.++ "2" (str.++ "9" (str.++ "9" ""))))))))))))

(define-fun Witness2 () String (str.++ "E" (str.++ "L" (str.++ "9" (str.++ "0" (str.++ "6" (str.++ "9" (str.++ "8" (str.++ "3" (str.++ "8" (str.++ "8" (str.++ "4" ""))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.opt (re.union (str.to_re (str.++ "E" (str.++ "E" "")))(re.union (str.to_re (str.++ "E" (str.++ "L" "")))(re.union (str.to_re (str.++ "D" (str.++ "E" ""))) (str.to_re (str.++ "P" (str.++ "T" "")))))))(re.++ ((_ re.loop 9 9) (re.range "0" "9")) (str.to_re ""))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "q" (str.++ "8" (str.++ "s" (str.++ "." (str.++ "H" (str.++ "." (str.++ "C" (str.++ "Z" "")))))))))

(define-fun Witness2 () String (str.++ "X" ""))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.union (re.range "A" "Z") (re.range "a" "z"))(re.++ (re.* (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z"))))(re.++ (re.* (re.++ (re.range "." ".")(re.++ (re.union (re.range "A" "Z") (re.range "a" "z")) (re.* (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z"))))))) (str.to_re "")))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "\u{ac}" (str.++ "," (str.++ "\u{bd}" (str.++ "," (str.++ "x" (str.++ "F" (str.++ "@" (str.++ ";" (str.++ "!" (str.++ "." (str.++ "\u{02}" (str.++ "\u{0a}" (str.++ "\u{8e}" (str.++ "," (str.++ "\u{1d}" (str.++ "," (str.++ "?" (str.++ "\u{00}" (str.++ "\u{d0}" (str.++ "@" (str.++ "T" (str.++ "." (str.++ "^" (str.++ "\u{0a}" (str.++ "F" (str.++ "," (str.++ "\u{17}" (str.++ "," (str.++ "(" (str.++ "\u{1c}" (str.++ "R" (str.++ "\u{d7}" (str.++ "@" (str.++ "\u{03}" (str.++ "\u{9d}" (str.++ "." (str.++ "8" ""))))))))))))))))))))))))))))))))))))))

(define-fun Witness2 () String (str.++ "\u{ce}" (str.++ "T" (str.++ "," (str.++ "\u{e9}" (str.++ "\u{c0}" (str.++ "\u{aa}" (str.++ "(" (str.++ "\u{c2}" (str.++ "\u{d3}" (str.++ "\u{bc}" (str.++ "," (str.++ "w" (str.++ "@" (str.++ "e" (str.++ "." (str.++ "\u{e6}" (str.++ "\u{ec}" (str.++ "\u{0a}" (str.++ "N" (str.++ "\u{e5}" (str.++ "," (str.++ "\u{ca}" (str.++ "," (str.++ "\u{12}" (str.++ "@" (str.++ "\u{f7}" (str.++ "." (str.++ "\u{8a}" (str.++ "\u{b3}" (str.++ "\u{0a}" (str.++ "=" (str.++ "," (str.++ "U" (str.++ "," (str.++ "\u{f9}" (str.++ "@" (str.++ "q" (str.++ "." (str.++ "\u{12}" (str.++ "\u{82}" (str.++ "O" (str.++ "\u{0a}" "")))))))))))))))))))))))))))))))))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.+ (re.++ (re.+ (re.union (re.range "\u{00}" "\u{09}")(re.union (re.range "\u{0b}" "+") (re.range "-" "\u{ff}"))))(re.++ (re.range "," ",")(re.++ (re.+ (re.union (re.range "\u{00}" "\u{09}")(re.union (re.range "\u{0b}" "+") (re.range "-" "\u{ff}"))))(re.++ (re.range "," ",")(re.++ (re.+ (re.union (re.range "\u{00}" "?") (re.range "A" "\u{ff}")))(re.++ (re.range "@" "@")(re.++ (re.+ (re.union (re.range "\u{00}" "-") (re.range "/" "\u{ff}")))(re.++ (re.range "." ".")(re.++ (re.+ (re.union (re.range "\u{00}" "\u{09}")(re.union (re.range "\u{0b}" "+") (re.range "-" "\u{ff}")))) (re.range "\u{0a}" "\u{0a}")))))))))))(re.++ (re.+ (re.union (re.range "\u{00}" "\u{09}")(re.union (re.range "\u{0b}" "+") (re.range "-" "\u{ff}"))))(re.++ (re.range "," ",")(re.++ (re.+ (re.union (re.range "\u{00}" "\u{09}")(re.union (re.range "\u{0b}" "+") (re.range "-" "\u{ff}"))))(re.++ (re.range "," ",")(re.++ (re.+ (re.union (re.range "\u{00}" "?") (re.range "A" "\u{ff}")))(re.++ (re.range "@" "@")(re.++ (re.+ (re.union (re.range "\u{00}" "-") (re.range "/" "\u{ff}")))(re.++ (re.range "." ".")(re.++ (re.+ (re.union (re.range "\u{00}" "\u{09}")(re.union (re.range "\u{0b}" "+") (re.range "-" "\u{ff}"))))(re.++ (re.opt (re.range "\u{0a}" "\u{0a}")) (str.to_re "")))))))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "2" (str.++ "5" (str.++ "7" (str.++ "." "")))))

(define-fun Witness2 () String (str.++ "4" (str.++ "8" (str.++ "1" (str.++ "." "")))))

(assert (= regexA (re.union (re.++ (str.to_re "")(re.++ (str.to_re (str.++ "0" (str.++ "." "")))(re.++ (re.* (re.range "0" "9"))(re.++ (re.+ (re.range "1" "9"))(re.++ (re.* (re.range "0" "9")) (str.to_re "")))))) (re.++ (str.to_re "")(re.++ (re.+ (re.range "1" "9"))(re.++ (re.* (re.range "0" "9"))(re.++ (re.opt (re.range "." "."))(re.++ (re.* (re.range "0" "9")) (str.to_re "")))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "+" (str.++ "6" (str.++ "9" (str.++ " " (str.++ "1" (str.++ " " (str.++ "0" (str.++ "9" (str.++ "8" (str.++ " " (str.++ "9" (str.++ "9" (str.++ "0" (str.++ " " (str.++ "2" (str.++ "3" "")))))))))))))))))

(define-fun Witness2 () String (str.++ "0" (str.++ "0" (str.++ "4" (str.++ "9" (str.++ "-" (str.++ "5" (str.++ "8" (str.++ "8" (str.++ " " (str.++ "9" (str.++ "9" (str.++ "7" (str.++ " " (str.++ "8" (str.++ "3" ""))))))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.union (re.++ (re.range "+" "+")(re.++ ((_ re.loop 2 2) (re.range "0" "9"))(re.++ (re.range " " " ")(re.++ (re.range "1" "9")(re.++ ((_ re.loop 0 2) (re.range "0" "9")) (re.range " " " ")))))) (re.++ (re.range "0" "0")(re.++ ((_ re.loop 1 3) (re.range "0" "9")) (re.range "-" "-"))))(re.++ (re.union (re.++ ((_ re.loop 2 2) (re.range "0" "9")) ((_ re.loop 2 2) (re.++ (re.range " " " ") ((_ re.loop 2 2) (re.range "0" "9"))))) (re.++ ((_ re.loop 3 3) (re.range "0" "9"))(re.++ (re.* (re.++ (re.range " " " ") ((_ re.loop 3 3) (re.range "0" "9")))) (re.+ (re.++ (re.range " " " ") ((_ re.loop 2 2) (re.range "0" "9"))))))) (str.to_re ""))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "1" (str.++ "5" (str.++ "5" (str.++ "8" (str.++ "9" (str.++ "9" (str.++ "7" (str.++ "-" (str.++ "9" (str.++ "9" (str.++ "8" (str.++ "7" "")))))))))))))

(define-fun Witness2 () String (str.++ "1" (str.++ "(" (str.++ "8" (str.++ "9" (str.++ "6" (str.++ ")" (str.++ "9" (str.++ "8" (str.++ "9" (str.++ "9" (str.++ "9" (str.++ "9" (str.++ "8" ""))))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.++ (re.opt (re.range "1" "1"))(re.++ (re.opt (re.union (re.range " " " ") (re.range "-" ".")))(re.++ (re.union (re.++ (re.range "(" "(")(re.++ ((_ re.loop 3 3) (re.range "0" "9")) (re.range ")" ")"))) ((_ re.loop 3 3) (re.range "0" "9")))(re.++ (re.opt (re.union (re.range " " " ") (re.range "-" ".")))(re.++ ((_ re.loop 3 3) (re.range "0" "9"))(re.++ (re.opt (re.union (re.range " " " ") (re.range "-" "."))) ((_ re.loop 4 4) (re.range "0" "9")))))))) (str.to_re "")))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "\u{db}" (str.++ "\u{dd}" (str.++ "-" (str.++ "." (str.++ "@" (str.++ "[" (str.++ "4" (str.++ "5" (str.++ "." (str.++ "9" (str.++ "." (str.++ "8" (str.++ "." (str.++ "8" (str.++ "9" (str.++ "2" (str.++ "]" ""))))))))))))))))))

(define-fun Witness2 () String (str.++ "\u{ba}" (str.++ "@" (str.++ "\u{aa}" (str.++ "." (str.++ "E" (str.++ "u" (str.++ "-" (str.++ "7" (str.++ "\u{f5}" (str.++ "\u{b5}" (str.++ "." (str.++ "D" (str.++ "x" (str.++ "w" (str.++ "Q" ""))))))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.+ (re.union (re.range "-" ".")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))))(re.++ (re.range "@" "@")(re.++ (re.union (re.++ (re.range "[" "[")(re.++ ((_ re.loop 3 3) (re.++ ((_ re.loop 1 3) (re.range "0" "9")) (re.range "." ".")))(re.++ ((_ re.loop 1 3) (re.range "0" "9")) (re.range "]" "]")))) (re.++ (re.+ (re.++ (re.+ (re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))) (re.range "." "."))) ((_ re.loop 2 4) (re.union (re.range "A" "Z") (re.range "a" "z"))))) (str.to_re "")))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "/" (str.++ "/" (str.++ "\u{d0}" (str.++ "%" (str.++ "4" (str.++ "6" (str.++ "\u{c0}" (str.++ "\u{aa}" (str.++ "%" (str.++ "7" (str.++ "8" (str.++ "d" (str.++ "\u{d6}" (str.++ "/" (str.++ "5" (str.++ "\u{aa}" (str.++ "%" (str.++ "8" (str.++ "9" (str.++ "{" (str.++ "V" (str.++ "c" (str.++ "%" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "?" (str.++ "\u{0d}" (str.++ "\u{a4}" (str.++ "#" (str.++ "a" (str.++ "\u{b5}" "")))))))))))))))))))))))))))))))))

(define-fun Witness2 () String (str.++ "\u{ca}" (str.++ "/" (str.++ "5" (str.++ "%" (str.++ "2" (str.++ "2" (str.++ "\u{d4}" (str.++ "\u{de}" (str.++ "?" (str.++ "\u{c5}" (str.++ "#" (str.++ "z" "")))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.opt (re.union (str.to_re (str.++ "." (str.++ "." (str.++ "/" "")))) (re.range "/" "/")))(re.++ (re.opt (re.++ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))(re.++ (re.* (re.union (re.union (re.range "!" "!")(re.union (re.range "$" "$")(re.union (re.range "(" ")")(re.union (re.range "+" "+")(re.union (re.range "-" ".")(re.union (re.range "0" "9")(re.union (re.range ";" ";")(re.union (re.range "=" "=")(re.union (re.range "A" "[")(re.union (re.range "]" "~")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))))))) (re.++ (re.range "%" "%")(re.++ (re.range "0" "9") (re.range "0" "9"))))) (re.opt (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))))))(re.++ (re.* (re.++ (re.range "/" "/")(re.++ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))(re.++ (re.* (re.union (re.union (re.range "!" "!")(re.union (re.range "$" "$")(re.union (re.range "(" ")")(re.union (re.range "+" "+")(re.union (re.range "-" ".")(re.union (re.range "0" "9")(re.union (re.range ";" ";")(re.union (re.range "=" "=")(re.union (re.range "A" "[")(re.union (re.range "]" "~")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))))))) (re.++ (re.range "%" "%")(re.++ (re.range "0" "9") (re.range "0" "9"))))) (re.opt (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))))))(re.++ (re.opt (re.++ (re.range "?" "?") (re.+ (re.union (re.range "\u{00}" "\u{22}") (re.range "$" "\u{ff}")))))(re.++ (re.opt (re.++ (re.range "#" "#")(re.++ (re.union (re.range "0" "9") (re.range "a" "z")) (re.* (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))))) (str.to_re "")))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "*" (str.++ "," (str.++ "g" (str.++ "d" (str.++ "Q" (str.++ "9" (str.++ "N" (str.++ ")" (str.++ "W" (str.++ ":" (str.++ ">" (str.++ "4" "")))))))))))))

(define-fun Witness2 () String (str.++ "#" (str.++ "2" (str.++ "P" (str.++ " " (str.++ "B" (str.++ "/" (str.++ "8" (str.++ "'" (str.++ "a" (str.++ "g" "")))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ ((_ re.loop 10 25) (re.range " " "~")) (re.union (str.to_re "") (re.++ (re.union (re.range "!" "!")(re.union (re.range "." ".")(re.union (re.range "0" "9")(re.union (re.range "?" "?")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))))) (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "F" (str.++ "O" (str.++ " " (str.++ "8" (str.++ "0" (str.++ "5" "")))))))

(define-fun Witness2 () String (str.++ "F" (str.++ "O" (str.++ "\u{85}" (str.++ "1" (str.++ "8" (str.++ "8" "")))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (str.to_re (str.++ "F" (str.++ "O" "")))(re.++ (re.opt (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ ((_ re.loop 3 3) (re.range "0" "9")) (str.to_re "")))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "6" (str.++ "0" (str.++ "4" (str.++ "3" (str.++ "7" (str.++ "\u{85}" (str.++ "0" (str.++ "0" (str.++ "-" (str.++ "8" (str.++ "3" (str.++ " " (str.++ "8" (str.++ "0" "")))))))))))))))

(define-fun Witness2 () String (str.++ "0" (str.++ "8" (str.++ "9" (str.++ "8" (str.++ "4" (str.++ "\u{0a}" (str.++ "7" (str.++ "8" (str.++ "\u{0d}" (str.++ "9" (str.++ "8" (str.++ "\u{0d}" (str.++ "9" (str.++ "9" "")))))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ ((_ re.loop 5 5) (re.range "0" "9"))(re.++ (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "-" "-")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ ((_ re.loop 2 2) (re.range "0" "9"))(re.++ (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "-" "-")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ ((_ re.loop 2 2) (re.range "0" "9"))(re.++ (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "-" "-")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ ((_ re.loop 2 2) (re.range "0" "9")) (str.to_re "")))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "8" (str.++ "5" (str.++ "9" (str.++ "\u{b9}" (str.++ "9" (str.++ "7" (str.++ "3" (str.++ "0" (str.++ "7" (str.++ "9" (str.++ "-" (str.++ "3" (str.++ "5" ""))))))))))))))

(define-fun Witness2 () String (str.++ "8" (str.++ "4" (str.++ "8" (str.++ "9" (str.++ "9" (str.++ "8" (str.++ "8" (str.++ "4" (str.++ "8" (str.++ "1" (str.++ "6" ""))))))))))))

(assert (= regexA (re.++ ((_ re.loop 3 3) (re.range "0" "9"))(re.++ (re.opt (re.union (re.range "\u{00}" "\u{09}") (re.range "\u{0b}" "\u{ff}")))(re.++ ((_ re.loop 3 3) (re.range "0" "9"))(re.++ (re.opt (re.union (re.range "\u{00}" "\u{09}") (re.range "\u{0b}" "\u{ff}")))(re.++ ((_ re.loop 3 3) (re.range "0" "9"))(re.++ (re.opt (re.range "-" "-")) ((_ re.loop 2 2) (re.range "0" "9"))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "\u{5c}" (str.++ "\u{5c}" (str.++ "_" (str.++ "\u{5c}" (str.++ "D" (str.++ "-" (str.++ "\u{5c}" ""))))))))

(define-fun Witness2 () String (str.++ "\u{5c}" (str.++ "\u{5c}" (str.++ "9" (str.++ "\u{e3}" (str.++ "\u{5c}" (str.++ "\u{e6}" (str.++ "$" (str.++ "\u{5c}" "")))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (str.to_re (str.++ "\u{5c}" (str.++ "\u{5c}" "")))(re.++ (re.+ (re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))))(re.++ (re.range "\u{5c}" "\u{5c}")(re.++ (re.union (re.++ (re.union (re.range "(" ")")(re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))))(re.++ (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "(" ")")(re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{85}" "\u{85}")(re.union (re.range "\u{a0}" "\u{a0}")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))))))))) (re.+ (re.union (re.range "(" ")")(re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))))))) (re.+ (re.union (re.range "(" ")")(re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))))))(re.++ (re.opt (re.range "$" "$"))(re.++ (re.* (re.++ (re.range "\u{5c}" "\u{5c}") (re.union (re.++ (re.union (re.range "(" ")")(re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))))(re.++ (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "(" ")")(re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{85}" "\u{85}")(re.union (re.range "\u{a0}" "\u{a0}")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))))))))) (re.+ (re.union (re.range "(" ")")(re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))))))) (re.+ (re.union (re.range "(" ")")(re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))))))))(re.++ (re.opt (re.range "\u{5c}" "\u{5c}")) (str.to_re "")))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "w" ""))

(define-fun Witness2 () String (str.++ "v" (str.++ "f" (str.++ "i" (str.++ "n" (str.++ "8" (str.++ "9" "")))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.+ (re.range "a" "z"))(re.++ (re.opt (re.++ (re.* (re.union (re.range "-" "-")(re.union (re.range "0" "9") (re.range "a" "z")))) (re.+ (re.union (re.range "0" "9") (re.range "a" "z")))))(re.++ (re.* (re.++ (re.range "." ".") (re.+ (re.++ (re.+ (re.range "a" "z")) (re.opt (re.++ (re.* (re.union (re.range "-" "-")(re.union (re.range "0" "9") (re.range "a" "z")))) (re.+ (re.union (re.range "0" "9") (re.range "a" "z"))))))))) (str.to_re "")))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "2" (str.++ "3" (str.++ "4" (str.++ "9" "")))))

(define-fun Witness2 () String (str.++ "0" (str.++ "8" (str.++ ":" (str.++ "4" (str.++ "9" ""))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.union (re.range "0" "9")(re.union (re.++ (re.range "0" "1") (re.range "0" "9")) (re.++ (re.range "2" "2") (re.range "0" "3"))))(re.++ (re.opt (re.range ":" ":"))(re.++ (re.++ (re.range "0" "5") (re.range "0" "9")) (str.to_re "")))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "R" (str.++ "T" (str.++ "\u{85}" (str.++ "8" (str.++ "4" (str.++ "E" (str.++ "1" (str.++ "8" (str.++ "8" (str.++ "9" "")))))))))))

(define-fun Witness2 () String (str.++ "F" (str.++ "E" (str.++ "\u{85}" (str.++ "9" (str.++ "3" (str.++ "9" (str.++ " " (str.++ "8" (str.++ "9" (str.++ "8" (str.++ "8" ""))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.++ ((_ re.loop 2 2) (re.range "A" "Z"))(re.++ (re.opt (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (re.opt ((_ re.loop 2 2) (re.range "0" "9")))(re.++ (re.opt (re.range "-" "-"))(re.++ (re.opt (re.union (re.range "0" "9") (re.range "A" "Z")))(re.++ (re.opt (re.union (re.range "0" "9") (re.range "A" "Z")))(re.++ (re.opt (re.range " " " ")) ((_ re.loop 4 4) (re.range "0" "9"))))))))) (str.to_re "")))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "v" (str.++ ":" (str.++ "\u{5c}" (str.++ "\u{9a}" (str.++ "\u{03}" (str.++ "\u{e0}" (str.++ "." (str.++ "\u{d6}" (str.++ "\u{c9}" ""))))))))))

(define-fun Witness2 () String (str.++ "v" (str.++ ":" (str.++ "\u{5c}" (str.++ "E" (str.++ "\u{9e}" (str.++ "_" (str.++ "\u{5c}" (str.++ "\u{e1}" (str.++ "\u{8c}" (str.++ "\u{ae}" (str.++ "." (str.++ "k" "")))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.union (re.++ (re.union (re.range "A" "Z") (re.range "a" "z")) (re.range ":" ":")) (re.++ (str.to_re (str.++ "\u{5c}" (str.++ "\u{5c}" "")))(re.++ (re.+ (re.union (re.range "\u{00}" "!")(re.union (re.range "#" ")")(re.union (re.range "+" ".")(re.union (re.range "0" "9")(re.union (re.range ";" ";")(re.union (re.range "=" "=")(re.union (re.range "@" "[")(re.union (re.range "]" "{") (re.range "}" "\u{ff}"))))))))))(re.++ (re.range "\u{5c}" "\u{5c}") (re.+ (re.union (re.range "\u{00}" "!")(re.union (re.range "#" ")")(re.union (re.range "+" ".")(re.union (re.range "0" "9")(re.union (re.range ";" ";")(re.union (re.range "=" "=")(re.union (re.range "@" "[")(re.union (re.range "]" "{") (re.range "}" "\u{ff}"))))))))))))))(re.++ (re.+ (re.++ (re.range "\u{5c}" "\u{5c}") (re.+ (re.union (re.range "\u{00}" "!")(re.union (re.range "#" ")")(re.union (re.range "+" ".")(re.union (re.range "0" "9")(re.union (re.range ";" ";")(re.union (re.range "=" "=")(re.union (re.range "@" "[")(re.union (re.range "]" "{") (re.range "}" "\u{ff}"))))))))))))(re.++ (re.++ (re.range "." ".") (re.+ (re.union (re.range "\u{00}" "!")(re.union (re.range "#" ")")(re.union (re.range "+" ".")(re.union (re.range "0" "9")(re.union (re.range ";" ";")(re.union (re.range "=" "=")(re.union (re.range "@" "[")(re.union (re.range "]" "{") (re.range "}" "\u{ff}"))))))))))) (str.to_re "")))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "8" (str.++ "8" "")))

(define-fun Witness2 () String (str.++ "8" (str.++ "1" "")))

(assert (= regexA (re.++ (str.to_re "")(re.++ ((_ re.loop 1 2) (re.range "1" "9"))(re.++ (re.opt (re.++ (re.union (re.range "\u{00}" "\u{09}") (re.range "\u{0b}" "\u{ff}")) (re.range "5" "5"))) (str.to_re ""))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "3" (str.++ "9" (str.++ "6" (str.++ "9" (str.++ "8" (str.++ "4" (str.++ "9" (str.++ "9" (str.++ "9" (str.++ "9" (str.++ "3" (str.++ "2" (str.++ "1" (str.++ "8" "")))))))))))))))

(define-fun Witness2 () String (str.++ "|" (str.++ "9" (str.++ "9" (str.++ "8" (str.++ "6" (str.++ "9" (str.++ "6" (str.++ "9" (str.++ "9" (str.++ "8" (str.++ "9" (str.++ "9" (str.++ "8" (str.++ "6" (str.++ "0" (str.++ "1" "")))))))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.union (re.range "3" "6") (re.range "|" "|")) (re.union (re.++ ((_ re.loop 15 15) (re.range "0" "9")) (str.to_re ""))(re.union (re.++ ((_ re.loop 12 12) (re.range "0" "9")) (str.to_re ""))(re.union (re.++ ((_ re.loop 13 13) (re.range "0" "9")) (str.to_re "")) (re.++ ((_ re.loop 14 14) (re.range "0" "9")) (str.to_re "")))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "P" (str.++ "W" (str.++ "9" (str.++ "7" (str.++ "8" (str.++ "8" (str.++ "3" (str.++ "2" (str.++ "\u{85}" ""))))))))))

(define-fun Witness2 () String (str.++ "B" (str.++ "T" (str.++ "1" (str.++ "9" (str.++ "0" (str.++ "8" (str.++ "3" (str.++ "4" (str.++ "D" ""))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.union (re.++ (re.range "A" "A") (re.union (re.range "A" "B")(re.union (re.range "E" "E")(re.union (re.range "H" "H")(re.union (re.range "K" "M")(re.union (re.range "P" "P")(re.union (re.range "R" "T") (re.range "W" "Z"))))))))(re.union (re.++ (re.range "B" "B") (re.union (re.range "A" "B")(re.union (re.range "E" "E")(re.union (re.range "H" "H")(re.union (re.range "K" "M") (re.range "T" "T"))))))(re.union (re.++ (re.range "C" "C") (re.union (re.range "A" "B")(re.union (re.range "E" "E")(re.union (re.range "H" "H")(re.union (re.range "K" "L") (re.range "R" "R"))))))(re.union (re.++ (re.range "E" "E") (re.union (re.range "A" "B")(re.union (re.range "E" "E")(re.union (re.range "H" "H")(re.union (re.range "K" "M")(re.union (re.range "P" "P")(re.union (re.range "R" "T") (re.range "W" "Z"))))))))(re.union (str.to_re (str.++ "G" (str.++ "Y" "")))(re.union (re.++ (re.range "H" "H") (re.union (re.range "A" "B")(re.union (re.range "E" "E")(re.union (re.range "H" "H")(re.union (re.range "K" "M")(re.union (re.range "P" "P")(re.union (re.range "R" "T") (re.range "W" "Z"))))))))(re.union (re.++ (re.range "J" "J") (re.union (re.range "A" "C")(re.union (re.range "E" "E")(re.union (re.range "G" "H")(re.union (re.range "J" "N")(re.union (re.range "P" "P")(re.union (re.range "R" "T") (re.range "W" "Z"))))))))(re.union (re.++ (re.range "K" "K") (re.union (re.range "A" "B")(re.union (re.range "E" "E")(re.union (re.range "H" "H")(re.union (re.range "K" "M")(re.union (re.range "P" "P")(re.union (re.range "R" "T") (re.range "W" "Z"))))))))(re.union (re.++ (re.range "L" "L") (re.union (re.range "A" "B")(re.union (re.range "E" "E")(re.union (re.range "H" "H")(re.union (re.range "K" "M")(re.union (re.range "P" "P")(re.union (re.range "R" "T") (re.range "W" "Z"))))))))(re.union (re.++ (re.range "M" "M") (re.union (re.range "A" "A") (re.range "W" "X")))(re.union (re.++ (re.range "N" "N") (re.union (re.range "A" "B")(re.union (re.range "E" "E")(re.union (re.range "H" "H")(re.union (re.range "L" "M")(re.union (re.range "P" "P")(re.union (re.range "R" "S") (re.range "W" "Z"))))))))(re.union (re.++ (re.range "O" "O") (re.union (re.range "A" "B")(re.union (re.range "E" "E")(re.union (re.range "H" "H")(re.union (re.range "K" "M")(re.union (re.range "P" "P")(re.union (re.range "R" "S") (re.range "X" "X"))))))))(re.union (re.++ (re.range "P" "P") (re.union (re.range "A" "C")(re.union (re.range "E" "E")(re.union (re.range "G" "H")(re.union (re.range "J" "J")(re.union (re.range "L" "N")(re.union (re.range "P" "P")(re.union (re.range "R" "T") (re.range "W" "Y")))))))))(re.union (re.++ (re.range "R" "R") (re.union (re.range "A" "B")(re.union (re.range "E" "E")(re.union (re.range "H" "H")(re.union (re.range "K" "K")(re.union (re.range "M" "M")(re.union (re.range "P" "P")(re.union (re.range "R" "T") (re.range "W" "Z")))))))))(re.union (re.++ (re.range "S" "S") (re.union (re.range "A" "C")(re.union (re.range "G" "H")(re.union (re.range "J" "N")(re.union (re.range "P" "P")(re.union (re.range "R" "T") (re.range "W" "Z")))))))(re.union (re.++ (re.range "T" "T") (re.union (re.range "A" "B")(re.union (re.range "E" "E")(re.union (re.range "H" "H")(re.union (re.range "K" "M")(re.union (re.range "P" "P")(re.union (re.range "R" "T") (re.range "W" "Z"))))))))(re.union (re.++ (re.range "W" "W") (re.union (re.range "A" "B")(re.union (re.range "E" "E")(re.union (re.range "K" "M") (re.range "P" "P")))))(re.union (re.++ (re.range "Y" "Y") (re.union (re.range "A" "B")(re.union (re.range "E" "E")(re.union (re.range "H" "H")(re.union (re.range "K" "M")(re.union (re.range "P" "P")(re.union (re.range "R" "T") (re.range "W" "Z")))))))) (re.++ (re.range "Z" "Z") (re.union (re.range "A" "B")(re.union (re.range "E" "E")(re.union (re.range "H" "H")(re.union (re.range "K" "M")(re.union (re.range "P" "P")(re.union (re.range "R" "T") (re.range "W" "Y"))))))))))))))))))))))))))(re.++ ((_ re.loop 6 6) (re.range "0" "9"))(re.++ (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "A" "D")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))) (str.to_re "")))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "$" (str.++ "8" (str.++ "8" (str.++ "9" (str.++ "5" (str.++ "6" (str.++ "5" (str.++ "," (str.++ "2" (str.++ "9" (str.++ "9" ""))))))))))))

(define-fun Witness2 () String (str.++ "$" (str.++ "3" (str.++ "2" (str.++ "8" (str.++ "6" (str.++ "9" (str.++ "8" (str.++ "9" (str.++ "," (str.++ "8" (str.++ "4" (str.++ "8" (str.++ "," (str.++ "9" (str.++ "9" (str.++ "8" (str.++ "." (str.++ "9" (str.++ "8" ""))))))))))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.range "$" "$")(re.++ ((_ re.loop 1 3) (re.range "0" "9"))(re.++ (re.* (re.++ (re.opt (re.range "," ",")) ((_ re.loop 3 3) (re.range "0" "9"))))(re.++ (re.opt (re.++ (re.range "." ".") ((_ re.loop 2 2) (re.range "0" "9")))) (str.to_re ""))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "C" (str.++ "R" (str.++ "0" (str.++ "5" (str.++ " " (str.++ "P" (str.++ "Z" (str.++ "G" "")))))))))

(define-fun Witness2 () String (str.++ "X" (str.++ "K" (str.++ "0" (str.++ "5" (str.++ " " (str.++ "X" (str.++ "Y" (str.++ "J" "")))))))))

(assert (= regexA (re.++ (re.union (re.++ ((_ re.loop 2 2) (re.union (re.range "A" "H")(re.union (re.range "J" "P") (re.range "R" "Y")))) (re.union (re.++ (re.range "0" "0") (re.range "1" "9")) (re.++ (re.range "1" "9") (re.range "0" "9")))) (re.++ (re.union (re.range "A" "H")(re.union (re.range "J" "P") (re.range "R" "Y"))) (re.union (re.range "1" "9")(re.union (re.++ (re.range "1" "2") (re.range "0" "9"))(re.union (str.to_re (str.++ "3" (str.++ "0" "")))(re.union (str.to_re (str.++ "3" (str.++ "1" "")))(re.union (str.to_re (str.++ "3" (str.++ "3" "")))(re.union (str.to_re (str.++ "4" (str.++ "0" "")))(re.union (str.to_re (str.++ "4" (str.++ "4" "")))(re.union (str.to_re (str.++ "5" (str.++ "5" "")))(re.union (str.to_re (str.++ "5" (str.++ "0" "")))(re.union (str.to_re (str.++ "6" (str.++ "0" "")))(re.union (str.to_re (str.++ "6" (str.++ "6" "")))(re.union (str.to_re (str.++ "7" (str.++ "0" "")))(re.union (str.to_re (str.++ "7" (str.++ "7" "")))(re.union (str.to_re (str.++ "8" (str.++ "0" "")))(re.union (str.to_re (str.++ "8" (str.++ "8" "")))(re.union (str.to_re (str.++ "9" (str.++ "0" "")))(re.union (str.to_re (str.++ "9" (str.++ "9" "")))(re.union (str.to_re (str.++ "1" (str.++ "1" (str.++ "1" ""))))(re.union (str.to_re (str.++ "1" (str.++ "2" (str.++ "1" ""))))(re.union (str.to_re (str.++ "1" (str.++ "2" (str.++ "3" ""))))(re.union (str.to_re (str.++ "2" (str.++ "2" (str.++ "2" ""))))(re.union (str.to_re (str.++ "3" (str.++ "2" (str.++ "1" ""))))(re.union (str.to_re (str.++ "3" (str.++ "3" (str.++ "3" ""))))(re.union (str.to_re (str.++ "4" (str.++ "4" (str.++ "4" ""))))(re.union (str.to_re (str.++ "5" (str.++ "5" (str.++ "5" ""))))(re.union (str.to_re (str.++ "6" (str.++ "6" (str.++ "6" ""))))(re.union (str.to_re (str.++ "7" (str.++ "7" (str.++ "7" ""))))(re.union (str.to_re (str.++ "8" (str.++ "8" (str.++ "8" ""))))(re.union (str.to_re (str.++ "9" (str.++ "9" (str.++ "9" ""))))(re.union (str.to_re (str.++ "1" (str.++ "0" (str.++ "0" ""))))(re.union (str.to_re (str.++ "2" (str.++ "0" (str.++ "0" ""))))(re.union (str.to_re (str.++ "3" (str.++ "0" (str.++ "0" ""))))(re.union (str.to_re (str.++ "4" (str.++ "0" (str.++ "0" ""))))(re.union (str.to_re (str.++ "5" (str.++ "0" (str.++ "0" ""))))(re.union (str.to_re (str.++ "6" (str.++ "0" (str.++ "0" ""))))(re.union (str.to_re (str.++ "7" (str.++ "0" (str.++ "0" ""))))(re.union (str.to_re (str.++ "8" (str.++ "0" (str.++ "0" "")))) (str.to_re (str.++ "9" (str.++ "0" (str.++ "0" "")))))))))))))))))))))))))))))))))))))))))))(re.++ (re.range " " " ")(re.++ ((_ re.loop 3 3) (re.union (re.range "A" "H")(re.union (re.range "J" "P") (re.range "R" "Z")))) (str.to_re ""))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "F" (str.++ "I" (str.++ "H" (str.++ "_" "")))))

(define-fun Witness2 () String (str.++ "S" ""))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.+ (re.range "A" "Z"))(re.++ (re.* (re.union (re.range "," ",")(re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "_" "_"))))) (str.to_re ""))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "4" (str.++ "9" (str.++ "7" (str.++ "7" (str.++ "0" ""))))))

(define-fun Witness2 () String (str.++ "2" (str.++ "2" (str.++ "7" (str.++ "9" (str.++ "9" (str.++ "-" (str.++ "9" (str.++ "5" (str.++ "4" (str.++ "8" "")))))))))))

(assert (= regexA (re.union (re.++ (str.to_re "")(re.++ ((_ re.loop 5 5) (re.range "0" "9")) (str.to_re ""))) (re.++ (str.to_re "")(re.++ ((_ re.loop 5 5) (re.range "0" "9"))(re.++ (re.range "-" "-")(re.++ ((_ re.loop 4 4) (re.range "0" "9")) (str.to_re ""))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "1" (str.++ "7" (str.++ "9" (str.++ "4" (str.++ "9" ""))))))

(define-fun Witness2 () String (str.++ "8" (str.++ "9" (str.++ "8" (str.++ "1" (str.++ "4" ""))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.++ (re.union (re.range "0" "4") (re.range "6" "9")) ((_ re.loop 4 4) (re.range "0" "9"))) (str.to_re "")))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "0" ""))

(define-fun Witness2 () String (str.++ "1" (str.++ "0" (str.++ "2" (str.++ "2" "")))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.union (re.++ (str.to_re (str.++ "1" (str.++ "0" (str.++ "2" "")))) (re.range "0" "3"))(re.union (re.++ (str.to_re (str.++ "1" (str.++ "0" "")))(re.++ (re.range "0" "1") (re.range "0" "9")))(re.union (re.++ (re.range "1" "9") ((_ re.loop 0 2) (re.range "0" "9"))) (re.range "0" "0")))) (str.to_re "")))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String "")

(define-fun Witness2 () String (str.++ "." (str.++ "0" (str.++ "5" ""))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.opt (re.range "$" "$"))(re.++ (re.union (re.++ (re.range "1" "9")(re.++ ((_ re.loop 0 2) (re.range "0" "9"))(re.++ (re.* (re.++ (re.range "," ",") ((_ re.loop 3 3) (re.range "0" "9")))) (re.opt (re.++ (re.range "." ".") ((_ re.loop 0 2) (re.range "0" "9")))))))(re.union (re.++ (re.range "1" "9")(re.++ (re.* (re.range "0" "9")) (re.opt (re.++ (re.range "." ".") ((_ re.loop 0 2) (re.range "0" "9"))))))(re.union (re.++ (re.range "0" "0") (re.opt (re.++ (re.range "." ".") ((_ re.loop 0 2) (re.range "0" "9"))))) (re.opt (re.++ (re.range "." ".") ((_ re.loop 1 2) (re.range "0" "9"))))))) (str.to_re ""))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "R" (str.++ "e" (str.++ ":" (str.++ "{" (str.++ "6" (str.++ "," (str.++ "\u{a0}" (str.++ "c" (str.++ "^" (str.++ "h" (str.++ "u" (str.++ "y" (str.++ "j" (str.++ "`" (str.++ "e" (str.++ "j" "")))))))))))))))))

(define-fun Witness2 () String (str.++ "r" (str.++ "e" (str.++ ":" (str.++ "*" (str.++ "9" (str.++ "G" (str.++ "R" (str.++ "," (str.++ ">" (str.++ "z" (str.++ "z" (str.++ "@" (str.++ "b" (str.++ "\u{b4}" (str.++ "c" ""))))))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ ((_ re.loop 0 5) (re.union (re.range "\u{00}" "/")(re.union (re.range ":" "@")(re.union (re.range "[" "^")(re.union (re.range "`" "`")(re.union (re.range "{" "\u{a9}")(re.union (re.range "\u{ab}" "\u{b4}")(re.union (re.range "\u{b6}" "\u{b9}")(re.union (re.range "\u{bb}" "\u{bf}")(re.union (re.range "\u{d7}" "\u{d7}") (re.range "\u{f7}" "\u{f7}")))))))))))(re.++ (re.union (re.range "R" "R") (re.range "r" "r"))(re.++ (str.to_re (str.++ "e" (str.++ ":" "")))(re.++ (re.union (re.range "\u{00}" "/")(re.union (re.range ":" "@")(re.union (re.range "[" "^")(re.union (re.range "`" "`")(re.union (re.range "{" "\u{a9}")(re.union (re.range "\u{ab}" "\u{b4}")(re.union (re.range "\u{b6}" "\u{b9}")(re.union (re.range "\u{bb}" "\u{bf}")(re.union (re.range "\u{d7}" "\u{d7}") (re.range "\u{f7}" "\u{f7}"))))))))))(re.++ ((_ re.loop 1 10) (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z"))))(re.++ (re.range "," ",")(re.++ (re.union (re.range "\u{00}" "/")(re.union (re.range ":" "@")(re.union (re.range "[" "^")(re.union (re.range "`" "`")(re.union (re.range "{" "\u{a9}")(re.union (re.range "\u{ab}" "\u{b4}")(re.union (re.range "\u{b6}" "\u{b9}")(re.union (re.range "\u{bb}" "\u{bf}")(re.union (re.range "\u{d7}" "\u{d7}") (re.range "\u{f7}" "\u{f7}"))))))))))(re.++ ((_ re.loop 1 10) (re.range "a" "z"))(re.++ (re.union (re.range "\u{00}" "/")(re.union (re.range ":" "@")(re.union (re.range "[" "^")(re.union (re.range "`" "`")(re.union (re.range "{" "\u{a9}")(re.union (re.range "\u{ab}" "\u{b4}")(re.union (re.range "\u{b6}" "\u{b9}")(re.union (re.range "\u{bb}" "\u{bf}")(re.union (re.range "\u{d7}" "\u{d7}") (re.range "\u{f7}" "\u{f7}"))))))))))(re.++ ((_ re.loop 1 10) (re.range "a" "z"))(re.++ (re.union (re.range "\u{00}" "/")(re.union (re.range ":" "@")(re.union (re.range "[" "^")(re.union (re.range "`" "`")(re.union (re.range "{" "\u{a9}")(re.union (re.range "\u{ab}" "\u{b4}")(re.union (re.range "\u{b6}" "\u{b9}")(re.union (re.range "\u{bb}" "\u{bf}")(re.union (re.range "\u{d7}" "\u{d7}") (re.range "\u{f7}" "\u{f7}")))))))))) ((_ re.loop 1 10) (re.range "a" "z"))))))))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "p" ""))

(define-fun Witness2 () String (str.++ "\u{ba}" (str.++ "4" "")))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))) (str.to_re "")))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "2" (str.++ "1" (str.++ ":" (str.++ "4" (str.++ "8" ""))))))

(define-fun Witness2 () String (str.++ "2" (str.++ "3" (str.++ ":" (str.++ "5" (str.++ "1" ""))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.union (re.++ (re.opt (re.range "0" "1")) (re.range "0" "9")) (re.++ (re.range "2" "2") (re.range "0" "3")))(re.++ (re.range ":" ":")(re.++ (re.++ (re.range "0" "5") (re.range "0" "9")) (str.to_re "")))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "+" (str.++ "9" (str.++ "1" (str.++ "8" (str.++ "4" (str.++ "8" (str.++ "4" (str.++ "9" (str.++ "7" (str.++ "9" (str.++ "3" (str.++ "2" (str.++ "8" ""))))))))))))))

(define-fun Witness2 () String (str.++ "+" (str.++ "9" (str.++ "1" (str.++ "4" (str.++ "1" (str.++ "8" (str.++ "9" (str.++ "4" (str.++ "1" (str.++ "2" (str.++ "5" (str.++ "8" (str.++ "8" ""))))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.++ (re.range "+" "+") (str.to_re (str.++ "9" (str.++ "1" ""))))(re.++ (re.range "1" "9")(re.++ ((_ re.loop 9 9) (re.range "0" "9")) (str.to_re "")))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "\u{0b}" (str.++ "\u{0b}" "")))

(define-fun Witness2 () String (str.++ "\u{85}" ""))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " ";")(re.union (re.range "=" "=")(re.union (re.range "?" "~")(re.union (re.range "\u{85}" "\u{85}")(re.union (re.range "\u{a0}" "\u{a0}")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))))) (str.to_re "")))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "y" (str.++ "-" (str.++ "o" (str.++ "@" (str.++ "8" (str.++ "w" (str.++ "." (str.++ "Z" (str.++ "T" (str.++ "Z" "")))))))))))

(define-fun Witness2 () String (str.++ "J" (str.++ "9" (str.++ "@" (str.++ "k" (str.++ "7" (str.++ "." (str.++ "t" (str.++ "." (str.++ "P" ""))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.union (re.range "A" "Z") (re.range "a" "z"))(re.++ (re.* (re.union (re.range "-" ".")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))))(re.++ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))(re.++ (re.range "@" "@")(re.++ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))(re.++ (re.* (re.union (re.range "-" ".")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))))(re.++ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))(re.++ (re.range "." ".")(re.++ (re.union (re.range "A" "Z") (re.range "a" "z"))(re.++ (re.* (re.union (re.range "." ".")(re.union (re.range "A" "Z") (re.range "a" "z"))))(re.++ (re.union (re.range "A" "Z") (re.range "a" "z")) (str.to_re "")))))))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "X" (str.++ "8" (str.++ ":" (str.++ "I" (str.++ "X" (str.++ "7" (str.++ "8" (str.++ "8" (str.++ "9" ""))))))))))

(define-fun Witness2 () String (str.++ "$" (str.++ "Z" (str.++ "9" (str.++ "4" (str.++ "8" (str.++ "9" (str.++ "7" (str.++ "8" (str.++ "2" (str.++ "2" (str.++ "7" (str.++ ":" (str.++ "$" (str.++ "r" (str.++ "8" (str.++ "4" "")))))))))))))))))

(assert (= regexA (re.union (re.++ (str.to_re "")(re.++ ((_ re.loop 1 2) (re.range "A" "Z"))(re.++ (re.+ (re.range "0" "9"))(re.++ (re.range ":" ":")(re.++ ((_ re.loop 1 2) (re.range "A" "Z"))(re.++ (re.+ (re.range "0" "9")) (str.to_re "")))))))(re.union (re.++ (str.to_re "")(re.++ (re.range "$" "$")(re.++ ((_ re.loop 1 2) (re.union (re.range "A" "Z") (re.range "a" "z")))(re.++ (re.+ (re.range "0" "9"))(re.++ (str.to_re (str.++ ":" (str.++ "$" "")))(re.++ ((_ re.loop 1 2) (re.union (re.range "A" "Z") (re.range "a" "z")))(re.++ (re.+ (re.range "0" "9")) (str.to_re "")))))))) (re.++ (str.to_re "")(re.++ (re.range "$" "$")(re.++ ((_ re.loop 1 2) (re.union (re.range "A" "Z") (re.range "a" "z")))(re.++ (re.range "$" "$")(re.++ (re.+ (re.range "0" "9"))(re.++ (str.to_re (str.++ ":" (str.++ "$" "")))(re.++ ((_ re.loop 1 2) (re.union (re.range "A" "Z") (re.range "a" "z")))(re.++ (re.range "$" "$")(re.++ (re.+ (re.range "0" "9")) (str.to_re ""))))))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "\u{0d}" (str.++ "\u{a0}" (str.++ "\u{85}" (str.++ "(" (str.++ "9" (str.++ "8" (str.++ "9" (str.++ "]" (str.++ "." (str.++ " " (str.++ "8" (str.++ "6" (str.++ "8" (str.++ "\u{0a}" (str.++ " " (str.++ " " (str.++ "-" (str.++ "9" (str.++ "2" (str.++ "1" (str.++ "3" ""))))))))))))))))))))))

(define-fun Witness2 () String (str.++ "(" (str.++ "[" (str.++ " " (str.++ "\u{a0}" (str.++ "\u{0b}" (str.++ "\u{85}" (str.++ " " (str.++ "6" (str.++ "9" (str.++ "4" (str.++ "]" (str.++ "\u{a0}" (str.++ " " (str.++ " " (str.++ "." (str.++ "4" (str.++ "8" (str.++ "1" (str.++ "2" (str.++ "9" (str.++ "9" (str.++ "7" "")))))))))))))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (re.opt (re.range "(" "("))(re.++ (re.opt (re.range "[" "["))(re.++ (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ ((_ re.loop 3 3) (re.range "0" "9"))(re.++ (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (re.opt (re.range "]" "]"))(re.++ (re.opt (re.range ")" ")"))(re.++ (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (re.opt (re.range "-" "-"))(re.++ (re.opt (re.range "." "."))(re.++ (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ ((_ re.loop 3 3) (re.range "0" "9"))(re.++ (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (re.opt (re.range "-" "-"))(re.++ (re.opt (re.range "." "."))(re.++ (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ ((_ re.loop 4 4) (re.range "0" "9")) (str.to_re ""))))))))))))))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "5" (str.++ "." (str.++ "G" (str.++ "X" "")))))

(define-fun Witness2 () String (str.++ "9" (str.++ "." (str.++ "O" (str.++ "D" (str.++ "f" ""))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.+ (re.union (re.range "-" ".")(re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))))(re.++ (re.range "." ".")(re.++ ((_ re.loop 2 3) (re.union (re.range "A" "Z") (re.range "a" "z"))) (str.to_re "")))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "0" (str.++ " " (str.++ "2" (str.++ "8" (str.++ "0" (str.++ "8" (str.++ "3" (str.++ "7" (str.++ "5" (str.++ "7" (str.++ "5" (str.++ "1" "")))))))))))))

(define-fun Witness2 () String (str.++ "(" (str.++ "+" (str.++ "4" (str.++ "4" (str.++ ")" (str.++ "0" (str.++ " " (str.++ "2" (str.++ "0" (str.++ "9" (str.++ "2" (str.++ "9" (str.++ "9" (str.++ " " (str.++ "9" (str.++ "4" (str.++ "8" (str.++ "4" "")))))))))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.opt (re.union (re.++ (str.to_re (str.++ "(" (str.++ "4" (str.++ "4" (str.++ ")" ""))))) (re.opt (re.range " " " ")))(re.union (re.++ (str.to_re (str.++ "(" (str.++ "+" (str.++ "4" (str.++ "4" (str.++ ")" "")))))) (re.opt (re.range " " " ")))(re.union (re.++ (str.to_re (str.++ "+" (str.++ "4" (str.++ "4" "")))) (re.opt (re.range " " " "))) (re.++ (str.to_re (str.++ "4" (str.++ "4" ""))) (re.opt (re.range " " " ")))))))(re.++ (re.opt (re.union (re.range "0" "0") (str.to_re (str.++ "(" (str.++ "0" (str.++ ")" ""))))))(re.++ (re.opt (re.range " " " "))(re.++ (re.union (re.++ (re.union (re.++ (re.range "1" "1") ((_ re.loop 3 3) (re.range "0" "9"))) (re.++ (re.range "7" "7")(re.++ (re.union (re.range "1" "5") (re.range "7" "9")) ((_ re.loop 2 2) (re.range "0" "9")))))(re.++ (re.opt (re.range " " " ")) (re.++ ((_ re.loop 3 3) (re.range "0" "9"))(re.++ (re.opt (re.union (re.range " " " ") (re.range "-" "-"))) ((_ re.loop 3 3) (re.range "0" "9")))))) (re.++ (re.range "2" "2")(re.++ ((_ re.loop 2 2) (re.range "0" "9"))(re.++ (re.opt (re.range " " " "))(re.++ ((_ re.loop 3 3) (re.range "0" "9"))(re.++ (re.opt (re.union (re.range " " " ") (re.range "-" "-"))) ((_ re.loop 4 4) (re.range "0" "9")))))))) (str.to_re ""))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "1" (str.++ "0" (str.++ "/" (str.++ "7" (str.++ "-" (str.++ "6" (str.++ "7" (str.++ "1" (str.++ "3" ""))))))))))

(define-fun Witness2 () String (str.++ "8" (str.++ "/" (str.++ "3" (str.++ "1" (str.++ "-" (str.++ "8" (str.++ "0" (str.++ "8" (str.++ "9" ""))))))))))

(assert (= regexA (re.union (re.++ (str.to_re "")(re.++ (re.union (re.++ (re.union (re.++ (re.opt (re.range "0" "0")) (re.union (re.range "1" "1")(re.union (re.range "3" "3")(re.union (re.range "5" "5") (re.range "7" "8"))))) (re.++ (re.range "1" "1") (re.union (re.range "0" "0") (re.range "2" "2"))))(re.++ (re.union (re.range "-" "-") (re.range "/" "/")) (str.to_re (str.++ "3" (str.++ "1" ""))))) (re.++ (re.union (re.++ (re.opt (re.range "0" "0")) (re.union (re.range "," ",")(re.union (re.range "1" "1") (re.range "3" "9")))) (re.++ (re.range "1" "1") (re.range "0" "2")))(re.++ (re.union (re.range "-" "-") (re.range "/" "/")) (re.union (str.to_re (str.++ "2" (str.++ "9" ""))) (str.to_re (str.++ "3" (str.++ "0" "")))))))(re.++ (re.union (re.range "-" "-") (re.range "/" "/"))(re.++ (re.union (re.++ (re.range "1" "9")(re.++ (re.range "0" "9")(re.++ (re.range "0" "9") (re.range "0" "9"))))(re.union (re.++ (re.range "0" "9")(re.++ (re.range "1" "9")(re.++ (re.range "0" "9") (re.range "0" "9"))))(re.union (re.++ (re.range "0" "9")(re.++ (re.range "0" "9")(re.++ (re.range "1" "9") (re.range "0" "9")))) (re.++ (re.range "0" "9")(re.++ (re.range "0" "9")(re.++ (re.range "0" "9") (re.range "1" "9"))))))) (str.to_re "")))))(re.union (re.++ (str.to_re "")(re.++ (re.union (re.++ (re.opt (re.range "0" "0")) (re.range "1" "9")) (re.++ (re.range "1" "1") (re.range "0" "2")))(re.++ (re.union (re.range "-" "-") (re.range "/" "/"))(re.++ (re.union (re.++ (re.opt (re.range "0" "0")) (re.range "1" "9"))(re.union (re.++ (re.range "1" "1") (re.range "0" "9")) (re.++ (re.range "2" "2") (re.range "0" "8"))))(re.++ (re.union (re.range "-" "-") (re.range "/" "/"))(re.++ (re.union (re.++ (re.range "1" "9")(re.++ (re.range "0" "9")(re.++ (re.range "0" "9") (re.range "0" "9"))))(re.union (re.++ (re.range "0" "9")(re.++ (re.range "1" "9")(re.++ (re.range "0" "9") (re.range "0" "9"))))(re.union (re.++ (re.range "0" "9")(re.++ (re.range "0" "9")(re.++ (re.range "1" "9") (re.range "0" "9")))) (re.++ (re.range "0" "9")(re.++ (re.range "0" "9")(re.++ (re.range "0" "9") (re.range "1" "9"))))))) (str.to_re ""))))))) (re.++ (str.to_re "")(re.++ (re.++ (re.opt (re.range "0" "0"))(re.++ (re.range "2" "2")(re.++ (re.union (re.range "-" "-") (re.range "/" "/")) (str.to_re (str.++ "2" (str.++ "9" ""))))))(re.++ (re.union (re.range "-" "-") (re.range "/" "/"))(re.++ (re.union (re.++ (re.range "0" "0")(re.++ (re.union (re.range "4" "4") (re.range "8" "8")) (str.to_re (str.++ "0" (str.++ "0" "")))))(re.union (re.++ (re.union (re.range "1" "1")(re.union (re.range "3" "3")(re.union (re.range "5" "5")(re.union (re.range "7" "7") (re.range "9" "9")))))(re.++ (re.union (re.range "2" "2") (re.range "6" "6")) (str.to_re (str.++ "0" (str.++ "0" "")))))(re.union (re.++ (re.union (re.range "2" "2")(re.union (re.range "4" "4")(re.union (re.range "6" "6") (re.range "8" "8"))))(re.++ (re.union (re.range "0" "0")(re.union (re.range "4" "4") (re.range "8" "8"))) (str.to_re (str.++ "0" (str.++ "0" ""))))) (re.++ (re.opt (re.++ (re.range "0" "9") (re.range "0" "9"))) (re.union (re.++ (re.range "0" "0") (re.union (re.range "4" "4") (re.range "8" "8")))(re.union (re.++ (re.union (re.range "2" "2")(re.union (re.range "4" "4")(re.union (re.range "6" "6") (re.range "8" "8")))) (re.union (re.range "0" "0")(re.union (re.range "4" "4") (re.range "8" "8")))) (re.++ (re.union (re.range "1" "1")(re.union (re.range "3" "3")(re.union (re.range "5" "5")(re.union (re.range "7" "7") (re.range "9" "9"))))) (re.union (re.range "2" "2") (re.range "6" "6"))))))))) (str.to_re "")))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "1" (str.++ ":" (str.++ "3" (str.++ "8" (str.++ "p" (str.++ "m" "")))))))

(define-fun Witness2 () String (str.++ "3" (str.++ ":" (str.++ "5" (str.++ "4" (str.++ "P" (str.++ "M" "")))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.union (re.range "1" "9")(re.union (re.++ (re.range "0" "1") (re.range "1" "2"))(re.union (re.++ (re.range "0" "0") (re.range "1" "9")) (re.++ (re.range "1" "1") (re.range "0" "2")))))(re.++ (re.range ":" ":")(re.++ (re.++ (re.range "0" "5") (re.range "0" "9"))(re.++ (re.union (re.union (re.range "A" "A") (re.range "a" "a")) (re.union (re.range "P" "P") (re.range "p" "p")))(re.++ (re.union (re.range "M" "M") (re.range "m" "m")) (str.to_re "")))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "s" (str.++ "a" (str.++ "9" (str.++ "8" (str.++ " " (str.++ "0" (str.++ "o" (str.++ "Q" "")))))))))

(define-fun Witness2 () String (str.++ "Y" (str.++ "3" (str.++ "8" (str.++ "B" (str.++ " " (str.++ "9" (str.++ "k" (str.++ "z" "")))))))))

(assert (= regexA (re.union (re.++ (str.to_re "") (re.++ ((_ re.loop 5 5) (re.range "0" "9")) (re.opt (re.++ (re.union (str.to_re "") (re.range "-" "-"))(re.++ (re.range "-" "-") ((_ re.loop 4 4) (re.range "0" "9")))))))(re.union (re.++ (re.union (re.range "A" "Z") (re.range "a" "z"))(re.++ (re.range "0" "9")(re.++ (re.union (re.range "A" "Z") (re.range "a" "z"))(re.++ (re.opt (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "-" ".")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))))(re.++ (re.union (str.to_re "") (re.range "-" "-"))(re.++ (re.range "0" "9")(re.++ (re.union (re.range "A" "Z") (re.range "a" "z")) (re.range "0" "9")))))))) (re.++ ((_ re.loop 1 2) (re.union (re.range "A" "Z") (re.range "a" "z")))(re.++ ((_ re.loop 1 2) (re.range "0" "9"))(re.++ (re.opt (re.union (re.range "A" "Z") (re.range "a" "z")))(re.++ (re.range " " " ")(re.++ (re.range "0" "9")(re.++ ((_ re.loop 2 2) (re.union (re.range "A" "Z") (re.range "a" "z"))) (str.to_re "")))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "5" (str.++ "1" (str.++ "," (str.++ "," "")))))

(define-fun Witness2 () String "")

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.* (re.union (re.range "," ",") (re.range "0" "9")))(re.++ (re.* (re.range "0" "9")) (str.to_re ""))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "|" (str.++ "6" (str.++ "9" (str.++ "2" (str.++ "8" (str.++ "9" (str.++ "5" (str.++ "9" (str.++ "8" (str.++ "]" (str.++ "]" ""))))))))))))

(define-fun Witness2 () String (str.++ "|" (str.++ "8" (str.++ "8" (str.++ "5" (str.++ "6" (str.++ "3" (str.++ "8" (str.++ "8" (str.++ "4" (str.++ "]" (str.++ "]" ""))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.union (re.range "E" "E")(re.union (re.range "G" "G")(re.union (re.range "J" "J")(re.union (re.range "V" "V")(re.union (re.range "[" "[") (re.range "|" "|"))))))(re.++ (re.range "0" "9")(re.++ (re.range "0" "9")(re.++ (re.range "0" "9")(re.++ (re.range "0" "9")(re.++ (re.range "0" "9")(re.++ (re.range "0" "9")(re.++ (re.range "0" "9")(re.++ (re.range "0" "9")(re.++ ((_ re.loop 0 9) (re.range "]" "]")) (str.to_re ""))))))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "m" (str.++ "6" (str.++ "H" (str.++ "0" (str.++ "h" (str.++ "2" "")))))))

(define-fun Witness2 () String (str.++ "X" (str.++ "8" (str.++ "x" (str.++ "\u{a0}" (str.++ "1" (str.++ "x" (str.++ "8" ""))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.union (re.union (re.range "a" "c")(re.union (re.range "e" "e")(re.union (re.range "g" "h")(re.union (re.range "j" "n")(re.union (re.range "p" "p")(re.union (re.range "r" "t")(re.union (re.range "v" "v") (re.range "x" "y")))))))) (re.union (re.range "A" "C")(re.union (re.range "E" "E")(re.union (re.range "G" "H")(re.union (re.range "J" "N")(re.union (re.range "P" "P")(re.union (re.range "R" "T")(re.union (re.range "V" "V") (re.range "X" "Y")))))))))(re.++ (re.range "0" "9")(re.++ (re.union (re.union (re.range "a" "c")(re.union (re.range "e" "e")(re.union (re.range "g" "h")(re.union (re.range "j" "n")(re.union (re.range "p" "p")(re.union (re.range "r" "t") (re.range "v" "z"))))))) (re.union (re.range "A" "C")(re.union (re.range "E" "E")(re.union (re.range "G" "H")(re.union (re.range "J" "N")(re.union (re.range "P" "P")(re.union (re.range "R" "T") (re.range "V" "Z"))))))))(re.++ (re.opt (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (re.range "0" "9")(re.++ (re.union (re.union (re.range "a" "c")(re.union (re.range "e" "e")(re.union (re.range "g" "h")(re.union (re.range "j" "n")(re.union (re.range "p" "p")(re.union (re.range "r" "t") (re.range "v" "z"))))))) (re.union (re.range "A" "C")(re.union (re.range "E" "E")(re.union (re.range "G" "H")(re.union (re.range "J" "N")(re.union (re.range "P" "P")(re.union (re.range "R" "T") (re.range "V" "Z"))))))))(re.++ (re.range "0" "9") (str.to_re "")))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "9" (str.++ "8" (str.++ "9" ""))))

(define-fun Witness2 () String (str.++ "9" (str.++ "7" (str.++ "," (str.++ "8" "")))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.+ (re.++ (re.range "1" "9") ((_ re.loop 0 7) (re.range "0" "9"))))(re.++ (re.+ (re.opt (re.++ (re.range "," ",")(re.++ (re.range "1" "9") ((_ re.loop 0 7) (re.range "0" "9")))))) (str.to_re ""))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "1" (str.++ "0" (str.++ ":" (str.++ "5" (str.++ "8" (str.++ "P" "")))))))

(define-fun Witness2 () String (str.++ "0" (str.++ "6" (str.++ ":" (str.++ "2" (str.++ "2" (str.++ "A" "")))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.union (re.union (re.++ (re.range "0" "0") (re.range "0" "9")) (re.++ (re.range "1" "1") (re.range "0" "2"))) (re.range "0" "9"))(re.++ (re.range ":" ":")(re.++ (re.++ (re.range "0" "5") (re.range "0" "9"))(re.++ (re.* (re.range " " " "))(re.++ (re.union (re.union (str.to_re (str.++ "A" (str.++ "M" ""))) (str.to_re (str.++ "P" (str.++ "M" "")))) (re.union (re.range "A" "A") (re.range "P" "P"))) (str.to_re "")))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String "")

(define-fun Witness2 () String "")

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.* (re.union (re.range "0" "9")(re.union (re.range "A" "F") (re.range "a" "f")))) (str.to_re "")))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ ")" (str.++ "." (str.++ "9" (str.++ "8" (str.++ "Q" (str.++ "9" (str.++ "\u{90}" (str.++ "." (str.++ "y" (str.++ "\u{e8}" (str.++ "@" (str.++ "c" (str.++ "." (str.++ "x" (str.++ "j" (str.++ "p" (str.++ "." (str.++ "b" (str.++ "s" (str.++ "z" "")))))))))))))))))))))

(define-fun Witness2 () String (str.++ "\u{a5}" (str.++ "L" (str.++ "\u{fa}" (str.++ "0" (str.++ "3" (str.++ "\u{c3}" (str.++ "@" (str.++ "c" (str.++ "4" (str.++ "c" (str.++ "o" (str.++ "9" (str.++ "." (str.++ "y" (str.++ "y" (str.++ "x" "")))))))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.union (re.range "\u{00}" "-")(re.union (re.range "/" "^") (re.range "`" "\u{ff}")))(re.++ ((_ re.loop 2 2) (re.++ (re.* (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_") (re.range "a" "z")))))(re.++ (re.opt (re.range "." "."))(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_") (re.range "a" "z"))))) (re.union (re.range "\u{00}" "^") (re.range "`" "\u{ff}"))))))(re.++ (re.range "@" "@")(re.++ (re.+ (re.union (re.range "0" "9") (re.range "a" "z")))(re.++ (re.range "." ".")(re.++ (re.union ((_ re.loop 2 3) (re.range "a" "z")) (re.++ ((_ re.loop 2 3) (re.range "a" "z"))(re.++ (re.range "." ".") ((_ re.loop 2 3) (re.range "a" "z"))))) (str.to_re ""))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "Q" (str.++ "\u{e4}" (str.++ "z" (str.++ " " (str.++ "5" ""))))))

(define-fun Witness2 () String (str.++ "J" (str.++ "q" (str.++ "-" (str.++ "\u{dc}" (str.++ "\u{df}" (str.++ "." (str.++ " " (str.++ "6" "")))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.+ (re.++ (re.union (re.range "A" "Z")(re.union (re.range "\u{c4}" "\u{c4}")(re.union (re.range "\u{d6}" "\u{d6}") (re.range "\u{dc}" "\u{dc}"))))(re.++ (re.+ (re.union (re.range "a" "z")(re.union (re.range "\u{df}" "\u{df}")(re.union (re.range "\u{e4}" "\u{e4}")(re.union (re.range "\u{f6}" "\u{f6}") (re.range "\u{fc}" "\u{fc}")))))) (re.union (str.to_re (str.++ "." (str.++ " " "")))(re.union (re.range " " " ") (re.range "-" "-"))))))(re.++ (re.range "1" "9")(re.++ ((_ re.loop 0 3) (re.range "0" "9"))(re.++ (re.opt (re.range "a" "z")) (str.to_re ""))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "C" (str.++ "4" (str.++ "g" (str.++ " " (str.++ "4" (str.++ "c" (str.++ "9" ""))))))))

(define-fun Witness2 () String (str.++ "7" (str.++ "7" (str.++ "8" (str.++ "8" (str.++ "6" (str.++ "9" (str.++ "4" (str.++ "9" (str.++ "4" ""))))))))))

(assert (= regexA (re.union (re.++ (str.to_re "")(re.++ (re.union (re.++ ((_ re.loop 5 5) (re.range "0" "9"))(re.++ (re.range "-" "-") ((_ re.loop 4 4) (re.range "0" "9"))))(re.union ((_ re.loop 5 5) (re.range "0" "9")) ((_ re.loop 9 9) (re.range "0" "9")))) (str.to_re ""))) (re.++ (str.to_re "")(re.++ (re.++ (re.union (re.range "A" "Z") (re.range "a" "z"))(re.++ (re.range "0" "9")(re.++ (re.union (re.range "A" "Z") (re.range "a" "z"))(re.++ (re.opt (re.range " " " "))(re.++ (re.range "0" "9")(re.++ (re.union (re.range "A" "Z") (re.range "a" "z")) (re.range "0" "9"))))))) (str.to_re ""))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "g" (str.++ "\u{a2}" (str.++ "\u{c5}" (str.++ "\u{c6}" (str.++ "\u{ef}" (str.++ "*" (str.++ "}" (str.++ "0" "")))))))))

(define-fun Witness2 () String (str.++ "\u{f4}" (str.++ "\u{84}" (str.++ "\u{ae}" (str.++ "\u{9a}" (str.++ "\u{df}" ""))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.* (re.union (re.range "\u{00}" ")") (re.range "+" "\u{ff}")))(re.++ (re.opt (re.range "*" "*"))(re.++ (re.* (re.union (re.range "\u{00}" ")") (re.range "+" "\u{ff}"))) (str.to_re "")))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "D" (str.++ "C" "")))

(define-fun Witness2 () String (str.++ "U" (str.++ "T" "")))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.union (re.++ (re.range "A" "A") (re.union (re.range "A" "A")(re.union (re.range "E" "E")(re.union (re.range "K" "L")(re.union (re.range "P" "P")(re.union (re.range "R" "S") (re.range "Z" "Z")))))))(re.union (re.++ (re.range "C" "C") (re.union (re.range "A" "A")(re.union (re.range "O" "O") (re.range "T" "T"))))(re.union (re.++ (re.range "D" "D") (re.union (re.range "C" "C") (re.range "E" "E")))(re.union (re.++ (re.range "F" "F") (re.range "L" "M"))(re.union (re.++ (re.range "G" "G") (re.union (re.range "A" "A") (re.range "U" "U")))(re.union (str.to_re (str.++ "H" (str.++ "I" "")))(re.union (re.++ (re.range "I" "I") (re.union (re.range "A" "A")(re.union (re.range "D" "D")(re.union (re.range "L" "L") (re.range "N" "N")))))(re.union (re.++ (re.range "K" "K") (re.union (re.range "S" "S") (re.range "Y" "Y")))(re.union (str.to_re (str.++ "L" (str.++ "A" "")))(re.union (re.++ (re.range "M" "M") (re.union (re.range "A" "A")(re.union (re.range "D" "E")(re.union (re.range "H" "I")(re.union (re.range "N" "P") (re.range "S" "T"))))))(re.union (re.++ (re.range "N" "N") (re.union (re.range "C" "E")(re.union (re.range "H" "H")(re.union (re.range "J" "J")(re.union (re.range "M" "M")(re.union (re.range "V" "V") (re.range "Y" "Y")))))))(re.union (re.++ (re.range "O" "O") (re.union (re.range "H" "H")(re.union (re.range "K" "K") (re.range "R" "R"))))(re.union (re.++ (re.range "P" "P") (re.union (re.range "A" "A")(re.union (re.range "R" "R") (re.range "W" "W"))))(re.union (str.to_re (str.++ "R" (str.++ "I" "")))(re.union (re.++ (re.range "S" "S") (re.range "C" "D"))(re.union (re.++ (re.range "T" "T") (re.union (re.range "N" "N") (re.range "X" "X")))(re.union (str.to_re (str.++ "U" (str.++ "T" "")))(re.union (re.++ (re.range "V" "V") (re.union (re.range "A" "A")(re.union (re.range "I" "I") (re.range "T" "T")))) (re.++ (re.range "W" "W") (re.union (re.range "A" "A")(re.union (re.range "I" "I")(re.union (re.range "V" "V") (re.range "Y" "Y"))))))))))))))))))))))) (str.to_re "")))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "D" (str.++ "C" "")))

(define-fun Witness2 () String (str.++ "V" (str.++ "T" "")))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.union (re.++ (re.range "A" "A") (re.union (re.range "K" "L")(re.union (re.range "R" "R") (re.range "Z" "Z"))))(re.union (re.++ (re.range "C" "C") (re.union (re.range "A" "A")(re.union (re.range "O" "O") (re.range "T" "T"))))(re.union (re.++ (re.range "D" "D") (re.union (re.range "C" "C") (re.range "E" "E")))(re.union (str.to_re (str.++ "F" (str.++ "L" "")))(re.union (str.to_re (str.++ "G" (str.++ "A" "")))(re.union (str.to_re (str.++ "H" (str.++ "I" "")))(re.union (re.++ (re.range "I" "I") (re.union (re.range "A" "A")(re.union (re.range "D" "D")(re.union (re.range "L" "L") (re.range "N" "N")))))(re.union (re.++ (re.range "K" "K") (re.union (re.range "S" "S") (re.range "Y" "Y")))(re.union (str.to_re (str.++ "L" (str.++ "A" "")))(re.union (re.++ (re.range "M" "M") (re.union (re.range "A" "A")(re.union (re.range "D" "E")(re.union (re.range "I" "I")(re.union (re.range "N" "O") (re.range "S" "T"))))))(re.union (re.++ (re.range "N" "N") (re.union (re.range "C" "E")(re.union (re.range "H" "H")(re.union (re.range "J" "J")(re.union (re.range "M" "M")(re.union (re.range "V" "V") (re.range "Y" "Y")))))))(re.union (re.++ (re.range "O" "O") (re.union (re.range "H" "H")(re.union (re.range "K" "K") (re.range "R" "R"))))(re.union (re.++ (re.range "P" "P") (re.union (re.range "A" "A") (re.range "R" "R")))(re.union (str.to_re (str.++ "R" (str.++ "I" "")))(re.union (re.++ (re.range "S" "S") (re.range "C" "D"))(re.union (re.++ (re.range "T" "T") (re.union (re.range "N" "N") (re.range "X" "X")))(re.union (str.to_re (str.++ "U" (str.++ "T" "")))(re.union (re.++ (re.range "V" "V") (re.union (re.range "A" "A")(re.union (re.range "I" "I") (re.range "T" "T")))) (re.++ (re.range "W" "W") (re.union (re.range "A" "A")(re.union (re.range "I" "I")(re.union (re.range "V" "V") (re.range "Y" "Y"))))))))))))))))))))))) (str.to_re "")))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "T" (str.++ "Z" (str.++ "#" (str.++ " " (str.++ "C" (str.++ "x" (str.++ " " (str.++ "E" (str.++ "9" (str.++ "9" (str.++ "Y" (str.++ "8" (str.++ "k" (str.++ "1" (str.++ "#" (str.++ "/" (str.++ "-" (str.++ "7" (str.++ "2" (str.++ " " (str.++ "t" (str.++ "0" (str.++ "z" (str.++ "." "")))))))))))))))))))))))))

(define-fun Witness2 () String (str.++ "9" (str.++ "d" (str.++ "9" (str.++ "9" (str.++ "j" (str.++ "Y" (str.++ "2" (str.++ "8" (str.++ "7" (str.++ " " (str.++ "k" (str.++ "8" (str.++ "s" ""))))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ ((_ re.loop 7 7) (re.++ (re.* (re.union (re.range " " " ")(re.union (re.range "#" "#")(re.union (re.range "(" "/")(re.union (re.range "A" "Z") (re.range "a" "z")))))) (re.range "0" "9")))(re.++ (re.* (re.union (re.range " " " ")(re.union (re.range "#" "#")(re.union (re.range "(" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))))) (str.to_re ""))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "Y" (str.++ "l" (str.++ "e" (str.++ " " (str.++ "r" (str.++ " " (str.++ "\u{17}" (str.++ "\u{cc}" (str.++ " " (str.++ "\u{96}" (str.++ "\u{7f}" (str.++ " " (str.++ "d" (str.++ "," (str.++ "\u{1b}" (str.++ "\u{13}" (str.++ " " (str.++ "\u{cf}" (str.++ "\u{06}" (str.++ "\u{c2}" (str.++ " " (str.++ "\u{b4}" (str.++ "\u{d3}" ""))))))))))))))))))))))))

(define-fun Witness2 () String (str.++ "\u{d9}" (str.++ "\u{96}" (str.++ " " (str.++ "\u{cd}" (str.++ " " (str.++ "\u{ae}" (str.++ "\u{ee}" (str.++ " " (str.++ "\u{7f}" (str.++ " " (str.++ "\u{b7}" (str.++ "7" (str.++ "n" (str.++ " " (str.++ "\u{9f}" (str.++ " " (str.++ "\u{09}" ""))))))))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.union (re.range "\u{00}" "\u{22}") (re.range "$" "\u{ff}"))(re.++ ((_ re.loop 6 6) (re.++ (re.+ (re.union (re.range "\u{00}" "\u{1f}") (re.range "!" "\u{ff}"))) (re.range " " " ")))(re.++ (re.+ (re.union (re.range "\u{00}" "\u{1f}") (re.range "!" "\u{ff}"))) (str.to_re "")))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "8" (str.++ "8" (str.++ "1" (str.++ "." (str.++ "9" (str.++ " " (str.++ "x" (str.++ "\u{85}" (str.++ "\u{0c}" (str.++ "3" (str.++ "8" (str.++ "5" (str.++ "3" (str.++ "." (str.++ " " (str.++ "x" (str.++ "9" (str.++ " " (str.++ "\u{0a}" ""))))))))))))))))))))

(define-fun Witness2 () String (str.++ "6" (str.++ "7" (str.++ "9" (str.++ "8" (str.++ "8" (str.++ "X" (str.++ "\u{a0}" (str.++ "\u{a0}" (str.++ "7" (str.++ "." (str.++ " " (str.++ "x" (str.++ "0" (str.++ "0" (str.++ "0" (str.++ "9" (str.++ "8" ""))))))))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ ((_ re.loop 2 2) (re.++ (re.union (re.++ (re.* (re.range "0" "9"))(re.++ (re.opt (re.range "." "."))(re.++ (re.* (re.range "0" "9"))(re.++ (re.+ (re.range "0" "9")) (re.* (re.range "0" "9")))))) (re.++ (re.++ (re.+ (re.range "0" "9"))(re.++ (re.* (re.range "0" "9"))(re.++ (re.range "." ".") (re.* (re.range "0" "9"))))) (re.range " " " ")))(re.++ (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (re.union (re.range "X" "X") (re.range "x" "x")) (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))))))(re.++ (re.union (re.++ (re.* (re.range "0" "9"))(re.++ (re.opt (re.range "." "."))(re.++ (re.* (re.range "0" "9"))(re.++ (re.+ (re.range "0" "9")) (re.* (re.range "0" "9")))))) (re.++ (re.+ (re.range "0" "9"))(re.++ (re.* (re.range "0" "9"))(re.++ (re.range "." ".") (re.* (re.range "0" "9"))))))(re.++ (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))) (str.to_re ""))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "5" (str.++ "0" (str.++ "6" (str.++ "8" (str.++ "7" ""))))))

(define-fun Witness2 () String (str.++ "6" (str.++ "2" (str.++ "7" (str.++ "9" (str.++ "9" ""))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ ((_ re.loop 5 5) (re.range "0" "9")) (str.to_re "")))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "2" (str.++ "|" (str.++ "8" (str.++ "8" (str.++ "7" ""))))))

(define-fun Witness2 () String (str.++ "F" (str.++ "-" (str.++ "1" (str.++ "8" (str.++ "7" (str.++ "6" (str.++ "9" ""))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.opt (str.to_re (str.++ "F" (str.++ "-" ""))))(re.++ (re.union (re.++ (re.range "2" "2") (re.union (re.range "A" "B") (re.range "|" "|"))) ((_ re.loop 2 2) (re.range "0" "9")))(re.++ ((_ re.loop 3 3) (re.range "0" "9")) (str.to_re "")))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "2" (str.++ "7" (str.++ "8" (str.++ "2" (str.++ "9" (str.++ "8" (str.++ "9" ""))))))))

(define-fun Witness2 () String (str.++ "8" (str.++ "8" (str.++ "8" (str.++ "9" (str.++ "7" (str.++ "4" (str.++ "8" (str.++ "2" "")))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ ((_ re.loop 7 8) (re.range "0" "9")) (str.to_re "")))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "5" (str.++ "8" "")))

(define-fun Witness2 () String (str.++ "2" ""))

(assert (= regexA (re.union (re.++ (str.to_re "")(re.++ (re.range "1" "9") (str.to_re "")))(re.union (re.++ (str.to_re "")(re.++ (re.range "1" "9")(re.++ (re.range "0" "9") (str.to_re ""))))(re.union (re.++ (str.to_re "")(re.++ (re.range "1" "3")(re.++ (re.range "0" "6")(re.++ (re.range "0" "5") (str.to_re ""))))) (re.++ (str.to_re "")(re.++ (str.to_re (str.++ "3" (str.++ "6" (str.++ "5" "")))) (str.to_re ""))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "B" (str.++ "D" (str.++ "A" (str.++ "2" (str.++ "7" (str.++ "c" (str.++ "E" (str.++ "f" "")))))))))

(define-fun Witness2 () String (str.++ "5" (str.++ "f" (str.++ "E" (str.++ "8" (str.++ "F" (str.++ "c" (str.++ "f" (str.++ "d" "")))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ ((_ re.loop 8 8) (re.union (re.range "0" "9")(re.union (re.range "A" "F") (re.range "a" "f")))) (str.to_re "")))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "9" (str.++ "4" (str.++ "f" ""))))

(define-fun Witness2 () String (str.++ "#" (str.++ "9" (str.++ "F" (str.++ "6" (str.++ "9" (str.++ "d" (str.++ "9" ""))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.opt (re.range "#" "#"))(re.++ ((_ re.loop 3 3) (re.union (re.range "0" "9")(re.union (re.range "A" "F") (re.range "a" "f"))))(re.++ (re.opt ((_ re.loop 3 3) (re.union (re.range "0" "9")(re.union (re.range "A" "F") (re.range "a" "f"))))) (str.to_re "")))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "3" (str.++ "1" (str.++ "-" (str.++ "0" (str.++ "7" ""))))))

(define-fun Witness2 () String (str.++ "2" (str.++ "9" (str.++ "-" (str.++ "0" (str.++ "8" ""))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.union (re.++ (str.to_re (str.++ "2" (str.++ "9" (str.++ "-" (str.++ "0" (str.++ "2" (str.++ "-" "")))))))(re.++ (re.union (str.to_re (str.++ "1" (str.++ "9" ""))) (str.to_re (str.++ "2" (str.++ "0" "")))) (re.union (re.++ (re.union (re.range "0" "0")(re.union (re.range "2" "2")(re.union (re.range "4" "4")(re.union (re.range "6" "6") (re.range "8" "8"))))) (re.union (re.range "0" "0")(re.union (re.range "4" "4") (re.range "8" "8")))) (re.++ (re.union (re.range "1" "1")(re.union (re.range "3" "3")(re.union (re.range "5" "5")(re.union (re.range "7" "7") (re.range "9" "9"))))) (re.union (re.range "2" "2") (re.range "6" "6")))))) (re.union (re.++ (str.to_re (str.++ "3" (str.++ "1" (str.++ "-" "")))) (re.union (re.++ (re.range "0" "0") (re.union (re.range "1" "1")(re.union (re.range "3" "3")(re.union (re.range "5" "5") (re.range "7" "8"))))) (re.++ (re.range "1" "1") (re.union (re.range "0" "0") (re.range "2" "2")))))(re.union (re.++ (str.to_re (str.++ "3" (str.++ "0" (str.++ "-" "")))) (re.union (re.++ (re.range "0" "0") (re.union (re.range "1" "1") (re.range "3" "9"))) (re.++ (re.range "1" "1") (re.range "0" "2"))))(re.union (re.++ (str.to_re (str.++ "2" (str.++ "9" (str.++ "-" "")))) (re.union (re.++ (re.range "0" "0") (re.union (re.range "1" "1") (re.range "3" "9"))) (re.++ (re.range "1" "1") (re.range "0" "2")))) (re.++ (re.++ (re.union (re.union (re.++ (re.range "0" "0") (re.range "1" "9")) (str.to_re ""))(re.union (re.++ (re.range "1" "1") (re.range "0" "9")) (re.++ (re.range "2" "2") (re.range "0" "8"))))(re.++ (re.range "-" "-") (re.union (re.++ (re.range "0" "0") (re.range "1" "9")) (re.++ (re.range "1" "1") (re.range "0" "2")))))(re.++ (re.range "-" "-") (re.++ (re.union (str.to_re (str.++ "1" (str.++ "9" ""))) (str.to_re (str.++ "2" (str.++ "0" ""))))(re.++ (re.range "0" "9") (re.range "0" "9"))))))))) (str.to_re "")))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "h" (str.++ "t" (str.++ "t" (str.++ "p" (str.++ "s" (str.++ ":" (str.++ "/" (str.++ "/" (str.++ "2" (str.++ "." (str.++ "q" (str.++ "j" "")))))))))))))

(define-fun Witness2 () String (str.++ "h" (str.++ "t" (str.++ "t" (str.++ "p" (str.++ ":" (str.++ "/" (str.++ "/" (str.++ "." (str.++ "." (str.++ "N" (str.++ "M" (str.++ "a" (str.++ "#" ""))))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.union (str.to_re (str.++ "h" (str.++ "t" (str.++ "t" (str.++ "p" "")))))(re.union (str.to_re (str.++ "h" (str.++ "t" (str.++ "t" (str.++ "p" (str.++ "s" "")))))) (str.to_re (str.++ "f" (str.++ "t" (str.++ "p" ""))))))(re.++ (str.to_re (str.++ ":" (str.++ "/" (str.++ "/" ""))))(re.++ (re.+ (re.union (re.range "-" ".")(re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))))(re.++ (re.range "." ".")(re.++ ((_ re.loop 2 3) (re.union (re.range "A" "Z") (re.range "a" "z")))(re.++ (re.opt (re.++ (re.range ":" ":") (re.* (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z"))))))(re.++ (re.opt (re.range "/" "/"))(re.++ (re.* (re.union (re.range "#" "'")(re.union (re.range "+" "9")(re.union (re.range ";" ";")(re.union (re.range "=" "=")(re.union (re.range "?" "?")(re.union (re.range "A" "Z")(re.union (re.range "\u{5c}" "\u{5c}")(re.union (re.range "_" "_")(re.union (re.range "a" "z") (re.range "~" "~"))))))))))) (str.to_re ""))))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "5" ""))

(define-fun Witness2 () String (str.++ "5" (str.++ "8" (str.++ "8" (str.++ "5" "")))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.* (re.range "0" "9"))(re.++ (re.opt (re.range "." "."))(re.++ (re.opt (re.union (re.range "5" "5")(re.union (re.range "0" "0") (str.to_re "")))) (str.to_re "")))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "3" ""))

(define-fun Witness2 () String (str.++ "2" (str.++ "3" "")))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.+ (re.range "0" "9")) (str.to_re "")))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "9" (str.++ "." (str.++ "8" ""))))

(define-fun Witness2 () String (str.++ "-" (str.++ "8" "")))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.opt (re.union (re.range "+" "+") (re.range "-" "-")))(re.++ (re.+ (re.range "0" "9"))(re.++ (re.opt (re.++ (re.range "." ".") (re.range "0" "9")))(re.++ (re.* (re.range "0" "9")) (str.to_re ""))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "D" (str.++ "H" (str.++ "L" (str.++ "8" (str.++ "8" (str.++ "8" (str.++ "9" (str.++ "D" (str.++ "Y" (str.++ "R" (str.++ "4" (str.++ "D" "")))))))))))))

(define-fun Witness2 () String (str.++ "D" (str.++ "8" (str.++ "8" (str.++ "8" (str.++ "8" (str.++ "B" (str.++ "X" (str.++ "R" (str.++ "1" (str.++ "E" "")))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.union (re.++ (re.range "A" "A") (re.opt (re.union (re.++ (re.range "H" "H") (re.union (re.range "M" "M") (re.range "X" "X")))(re.union (re.++ (re.range "M" "M") (re.union (re.range "P" "P") (str.to_re (str.++ "S" (str.++ "N" ""))))) (re.++ (re.range "X" "X") (re.opt (re.union (re.++ (re.range "D" "D") (re.union (re.range "A" "A")(re.union (re.range "C" "C") (re.range "H" "H")))) (re.++ (re.range "M" "M") (re.union (re.range "D" "D") (re.range "S" "S"))))))))))(re.union (re.++ (str.to_re (str.++ "K" (str.++ "7" ""))) (re.opt (re.range "A" "A"))) (re.++ (re.range "D" "D") (re.opt (re.++ (re.range "H" "H") (re.union (re.range "D" "D") (re.range "L" "M")))))))(re.++ ((_ re.loop 3 4) (re.range "0" "9"))(re.++ (re.union (re.range "A" "B") (re.range "D" "G"))(re.++ (re.union (re.range "C" "C")(re.union (re.range "H" "H")(re.union (re.range "J" "N")(re.union (re.range "P" "Q") (re.range "T" "Y")))))(re.++ (re.union (re.range "Q" "T") (re.range "V" "V"))(re.++ (re.range "1" "4")(re.++ (re.range "B" "E") (str.to_re "")))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "1" (str.++ "8" (str.++ ":" (str.++ "9" (str.++ ":" (str.++ "9" "")))))))

(define-fun Witness2 () String (str.++ "2" (str.++ "1" (str.++ ":" (str.++ "5" "")))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.union (re.++ (re.opt (re.range "0" "1")) (re.range "0" "9")) (re.++ (re.range "2" "2") (re.range "0" "3")))(re.++ (re.range ":" ":")(re.++ (re.++ (re.opt (re.range "0" "5")) (re.range "0" "9"))(re.++ (re.opt (re.++ (re.range ":" ":") (re.++ (re.opt (re.range "0" "5")) (re.range "0" "9")))) (str.to_re ""))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "-" (str.++ "2" (str.++ "\u{18}" (str.++ "\u{cc}" (str.++ "\u{ad}" (str.++ "\u{ec}" (str.++ "\u{a9}" ""))))))))

(define-fun Witness2 () String (str.++ "-" (str.++ "1" (str.++ "2" (str.++ "\u{82}" (str.++ "@" ""))))))

(assert (= regexA (re.++ (re.* (re.union (re.range "\u{00}" "\u{09}") (re.range "\u{0b}" "\u{ff}")))(re.++ (re.range "-" "-")(re.++ ((_ re.loop 1 10) (re.range "0" "9")) (re.* (re.union (re.range "\u{00}" "\u{09}") (re.range "\u{0b}" "\u{ff}"))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "0" ""))

(define-fun Witness2 () String (str.++ "4" (str.++ "\u{85}" (str.++ "F" ""))))

(assert (= regexA (re.++ (str.to_re "")(re.++ ((_ re.loop 1 2) (re.union (re.range "0" "9")(re.union (re.range "A" "F") (re.range "a" "f"))))(re.++ (re.* (re.++ (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))) ((_ re.loop 1 2) (re.union (re.range "0" "9")(re.union (re.range "A" "F") (re.range "a" "f")))))) (str.to_re ""))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String "")

(define-fun Witness2 () String (str.++ "3" ""))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.opt (re.union (re.++ (re.* (re.range "0" "9"))(re.++ (re.opt (re.range "," ",")) (re.+ (re.range "0" "9")))) (re.++ (re.+ (re.range "0" "9"))(re.++ (re.opt (re.range "," ",")) (re.* (re.range "0" "9")))))) (str.to_re "")))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "w" (str.++ "w" (str.++ "w" (str.++ "\u{1f}" (str.++ "q" (str.++ "\u{cc}" (str.++ "\u{a6}" (str.++ "\u{b4}" "")))))))))

(define-fun Witness2 () String (str.++ "w" (str.++ "w" (str.++ "w" (str.++ "\u{1e}" (str.++ "D" (str.++ "\u{a6}" "")))))))

(assert (= regexA (re.union (re.++ (re.union (re.++ (re.* (re.range "s" "s"))(re.++ (str.to_re (str.++ "f" (str.++ "t" (str.++ "p" "")))) (re.* (re.range "s" "s"))))(re.union (re.++ (str.to_re (str.++ "h" (str.++ "t" (str.++ "t" (str.++ "p" ""))))) (re.* (re.range "s" "s")))(re.union (str.to_re (str.++ "m" (str.++ "a" (str.++ "i" (str.++ "l" (str.++ "t" (str.++ "o" "")))))))(re.union (str.to_re (str.++ "n" (str.++ "e" (str.++ "w" (str.++ "s" "")))))(re.union (str.to_re (str.++ "f" (str.++ "i" (str.++ "l" (str.++ "e" ""))))) (str.to_re (str.++ "w" (str.++ "e" (str.++ "b" (str.++ "c" (str.++ "a" (str.++ "l" ""))))))))))))(re.++ (re.range ":" ":") (re.* (re.union (re.range "\u{00}" "\u{08}")(re.union (re.range "\u{0e}" "\u{1f}")(re.union (re.range "!" "\u{84}")(re.union (re.range "\u{86}" "\u{9f}") (re.range "\u{a1}" "\u{ff}")))))))) (re.++ (re.++ (str.to_re (str.++ "w" (str.++ "w" (str.++ "w" "")))) (re.union (re.range "\u{00}" "\u{09}") (re.range "\u{0b}" "\u{ff}"))) (re.* (re.union (re.range "\u{00}" "\u{08}")(re.union (re.range "\u{0e}" "\u{1f}")(re.union (re.range "!" "\u{84}")(re.union (re.range "\u{86}" "\u{9f}") (re.range "\u{a1}" "\u{ff}"))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "\u{5c}" (str.++ "\u{5c}" (str.++ "\u{b5}" (str.++ "\u{aa}" (str.++ "K" (str.++ "\u{5c}" (str.++ "\u{dc}" (str.++ "1" (str.++ "\u{ba}" (str.++ "\u{5c}" (str.++ "F" (str.++ "." (str.++ "j" (str.++ "p" (str.++ "g" ""))))))))))))))))

(define-fun Witness2 () String (str.++ "K" (str.++ ":" (str.++ "\u{5c}" (str.++ "H" (str.++ "\u{aa}" (str.++ "\u{8c}" (str.++ "\u{1f}" (str.++ "~" (str.++ "\u{12}" (str.++ "." (str.++ "J" (str.++ "P" (str.++ "G" ""))))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.union (re.++ (re.union (re.range "A" "Z") (re.range "a" "z")) (re.range ":" ":")) (re.++ (re.++ ((_ re.loop 2 2) (re.range "\u{5c}" "\u{5c}")) (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))) (re.opt (re.range "$" "$"))))(re.++ (re.+ (re.++ (re.range "\u{5c}" "\u{5c}") (re.++ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))(re.++ (re.* (re.union (re.range " " " ")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))) (re.* (re.union (re.range "\u{00}" "\u{09}") (re.range "\u{0b}" "\u{ff}")))))))(re.++ (re.range "." ".")(re.++ (re.union (str.to_re (str.++ "j" (str.++ "p" (str.++ "g" "")))) (str.to_re (str.++ "J" (str.++ "P" (str.++ "G" ""))))) (str.to_re ""))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "8" ""))

(define-fun Witness2 () String (str.++ "9" (str.++ " " (str.++ "L" ""))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z"))))(re.++ (re.* (re.++ (re.opt (re.++ (re.union (re.range " " " ")(re.union (re.range "#" "#")(re.union (re.range "'" "'") (re.range "," ".")))) (re.union (re.range " " " ")(re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z"))))))(re.++ (re.* (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))) (re.* (re.range "." "."))))) (str.to_re ""))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "z" ""))

(define-fun Witness2 () String (str.++ "8" (str.++ " " (str.++ "d" (str.++ "8" "")))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))) (re.* (re.++ (re.range " " " ") (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z"))))))) (str.to_re "")))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String "")

(define-fun Witness2 () String (str.++ "7" (str.++ "9" (str.++ "8" (str.++ "9" "")))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.* (re.range "0" "9")) (str.to_re "")))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "h" (str.++ "t" (str.++ "t" (str.++ "p" (str.++ "s" (str.++ ":" (str.++ "/" (str.++ "/" (str.++ "2" (str.++ "5" (str.++ "3" (str.++ "." (str.++ "1" (str.++ "0" (str.++ "." (str.++ "0" (str.++ "9" (str.++ "9" (str.++ "." (str.++ "4" (str.++ ":" (str.++ "8" (str.++ "7" ""))))))))))))))))))))))))

(define-fun Witness2 () String (str.++ "f" (str.++ "t" (str.++ "p" (str.++ ":" (str.++ "/" (str.++ "/" (str.++ "8" (str.++ "9" (str.++ "e" (str.++ "-" (str.++ "Y" (str.++ "z" (str.++ "A" (str.++ "E" (str.++ "@" (str.++ "9" (str.++ "." (str.++ "2" (str.++ "5" (str.++ "1" (str.++ "." (str.++ "8" (str.++ "." (str.++ "8" (str.++ ":" (str.++ "9" (str.++ "/" (str.++ "i" "")))))))))))))))))))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.union (str.to_re (str.++ "h" (str.++ "t" (str.++ "t" (str.++ "p" "")))))(re.union (str.to_re (str.++ "h" (str.++ "t" (str.++ "t" (str.++ "p" (str.++ "s" "")))))) (str.to_re (str.++ "f" (str.++ "t" (str.++ "p" ""))))))(re.++ (str.to_re (str.++ ":" (str.++ "/" (str.++ "/" ""))))(re.++ (re.opt (re.++ (re.+ (re.union (re.range "-" ".")(re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))))(re.++ (re.* (re.++ (re.range ":" ":") (re.+ (re.union (re.range "$" "&")(re.union (re.range "-" ".")(re.union (re.range "0" "9")(re.union (re.range ";" ";")(re.union (re.range "A" "Z") (re.range "a" "z"))))))))) (re.range "@" "@"))))(re.++ (re.union (re.++ (re.union (re.++ (str.to_re (str.++ "2" (str.++ "5" ""))) (re.range "0" "5"))(re.union (re.++ (re.range "2" "2")(re.++ (re.range "0" "4") (re.range "0" "9")))(re.union (re.++ (re.range "0" "1") ((_ re.loop 2 2) (re.range "0" "9")))(re.union (re.++ (re.range "1" "9") (re.range "0" "9")) (re.range "1" "9")))))(re.++ (re.range "." ".")(re.++ (re.union (re.++ (str.to_re (str.++ "2" (str.++ "5" ""))) (re.range "0" "5"))(re.union (re.++ (re.range "2" "2")(re.++ (re.range "0" "4") (re.range "0" "9")))(re.union (re.++ (re.range "0" "1") ((_ re.loop 2 2) (re.range "0" "9")))(re.union (re.++ (re.range "1" "9") (re.range "0" "9")) (re.range "0" "9")))))(re.++ (re.range "." ".")(re.++ (re.union (re.++ (str.to_re (str.++ "2" (str.++ "5" ""))) (re.range "0" "5"))(re.union (re.++ (re.range "2" "2")(re.++ (re.range "0" "4") (re.range "0" "9")))(re.union (re.++ (re.range "0" "1") ((_ re.loop 2 2) (re.range "0" "9")))(re.union (re.++ (re.range "1" "9") (re.range "0" "9")) (re.range "0" "9")))))(re.++ (re.range "." ".") (re.union (re.++ (str.to_re (str.++ "2" (str.++ "5" ""))) (re.range "0" "5"))(re.union (re.++ (re.range "2" "2")(re.++ (re.range "0" "4") (re.range "0" "9")))(re.union (re.++ (re.range "0" "1") ((_ re.loop 2 2) (re.range "0" "9")))(re.union (re.++ (re.range "1" "9") (re.range "0" "9")) (re.range "0" "9"))))))))))) (re.++ (re.* (re.++ (re.+ (re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z"))))) (re.range "." ".")))(re.++ (re.+ (re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))))(re.++ (re.range "." ".") ((_ re.loop 2 4) (re.union (re.range "A" "Z") (re.range "a" "z")))))))(re.++ (re.opt (re.++ (re.range ":" ":") (re.+ (re.range "0" "9"))))(re.++ (re.* (re.++ (re.range "/" "/")(re.++ (re.union (re.range "\u{00}" ".") (re.range "0" "\u{ff}")) (re.* (re.union (re.range "#" "'")(re.union (re.range "+" "9")(re.union (re.range ";" ";")(re.union (re.range "=" "=")(re.union (re.range "?" "Z")(re.union (re.range "\u{5c}" "\u{5c}")(re.union (re.range "_" "_")(re.union (re.range "a" "z") (re.range "~" "~"))))))))))))) (str.to_re ""))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "Z" (str.++ "9" (str.++ "2" (str.++ "9" (str.++ "U" (str.++ "Z" (str.++ "8" (str.++ "8" (str.++ "-" (str.++ "Q" (str.++ "0" (str.++ "2" (str.++ "G" (str.++ "-" (str.++ "8" (str.++ "2" (str.++ "Z" (str.++ "9" (str.++ "-" (str.++ "9" (str.++ "5" (str.++ "I" (str.++ "N" (str.++ "-" (str.++ "9" (str.++ "B" (str.++ "X" (str.++ "A" (str.++ "E" (str.++ "R" (str.++ "5" (str.++ "8" (str.++ "9" (str.++ "D" (str.++ "7" (str.++ "S" "")))))))))))))))))))))))))))))))))))))

(define-fun Witness2 () String (str.++ "2" (str.++ "8" (str.++ "9" (str.++ "J" (str.++ "Z" (str.++ "9" (str.++ "N" (str.++ "8" (str.++ "-" (str.++ "0" (str.++ "Q" (str.++ "4" (str.++ "X" (str.++ "-" (str.++ "B" (str.++ "9" (str.++ "3" (str.++ "Q" (str.++ "-" (str.++ "P" (str.++ "9" (str.++ "O" (str.++ "J" (str.++ "-" (str.++ "M" (str.++ "V" (str.++ "2" (str.++ "8" (str.++ "8" (str.++ "0" (str.++ "9" (str.++ "Z" (str.++ "0" (str.++ "V" (str.++ "4" (str.++ "8" "")))))))))))))))))))))))))))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ ((_ re.loop 8 8) (re.union (re.range "0" "9") (re.range "A" "Z")))(re.++ (re.range "-" "-")(re.++ ((_ re.loop 4 4) (re.union (re.range "0" "9") (re.range "A" "Z")))(re.++ (re.range "-" "-")(re.++ ((_ re.loop 4 4) (re.union (re.range "0" "9") (re.range "A" "Z")))(re.++ (re.range "-" "-")(re.++ ((_ re.loop 4 4) (re.union (re.range "0" "9") (re.range "A" "Z")))(re.++ (re.range "-" "-")(re.++ ((_ re.loop 12 12) (re.union (re.range "0" "9") (re.range "A" "Z"))) (str.to_re "")))))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "3" (str.++ "1" (str.++ "9" (str.++ "." (str.++ "5" (str.++ "9" (str.++ "2" (str.++ "." (str.++ "8" (str.++ "1" (str.++ "4" (str.++ "-" (str.++ "5" (str.++ "8" "")))))))))))))))

(define-fun Witness2 () String (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "." (str.++ "3" (str.++ "6" (str.++ "9" (str.++ "." (str.++ "9" (str.++ "0" (str.++ "5" (str.++ "-" (str.++ "1" (str.++ "8" "")))))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ ((_ re.loop 3 3) (re.range "0" "9"))(re.++ (re.range "." ".")(re.++ ((_ re.loop 3 3) (re.range "0" "9"))(re.++ (re.range "." ".")(re.++ ((_ re.loop 3 3) (re.range "0" "9"))(re.++ (re.range "-" "-")(re.++ ((_ re.loop 2 2) (re.range "0" "9")) (str.to_re "")))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "8" (str.++ "1" (str.++ "8" (str.++ "9" (str.++ "9" (str.++ "." (str.++ "0" (str.++ "6" "")))))))))

(define-fun Witness2 () String (str.++ "2" ""))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.union (re.range "$" "$") (str.to_re ""))(re.++ (re.union (re.++ (re.range "1" "9")(re.++ ((_ re.loop 0 2) (re.range "0" "9")) (re.* (re.++ (re.range "," ",") ((_ re.loop 3 3) (re.range "0" "9")))))) (re.++ (re.range "1" "9") (re.* (re.range "0" "9"))))(re.++ (re.opt (re.++ (re.range "." ".") ((_ re.loop 2 2) (re.range "0" "9")))) (str.to_re "")))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "4" (str.++ "4" (str.++ "5" (str.++ "8" "")))))

(define-fun Witness2 () String (str.++ "1" (str.++ "8" (str.++ "8" (str.++ "6" "")))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.++ ((_ re.loop 4 4) (re.range "0" "9")) (re.opt (re.union (re.opt (re.++ (re.opt (re.range "-" "-")) (re.union (re.++ (str.to_re (str.++ "0" (str.++ "0" ""))) (re.range "1" "9"))(re.union (re.++ (re.range "0" "0")(re.++ (re.range "1" "9") (re.range "0" "9")))(re.union (re.++ (re.range "1" "2")(re.++ (re.range "0" "9") (re.range "0" "9")))(re.union (re.++ (re.range "3" "3")(re.++ (re.range "0" "5") (re.range "0" "9"))) (re.++ (str.to_re (str.++ "3" (str.++ "6" ""))) (re.range "0" "6"))))))))(re.union (re.opt (re.++ (re.opt (re.range "-" "-")) (re.union (re.++ (re.range "1" "1") (re.range "0" "2")) (re.++ (re.range "0" "0") (re.range "1" "9")))))(re.union (re.opt (re.++ (re.opt (re.range "-" "-"))(re.++ (re.union (re.++ (re.range "1" "1") (re.range "0" "2")) (re.++ (re.range "0" "0") (re.range "1" "9")))(re.++ (re.opt (re.range "-" "-")) (re.union (re.++ (re.range "0" "0") (re.range "1" "9"))(re.union (re.++ (re.range "1" "2") (re.range "0" "9")) (re.++ (re.range "3" "3") (re.range "0" "1"))))))))(re.union (re.opt (re.++ (re.opt (re.range "-" "-"))(re.++ (re.range "W" "W") (re.union (re.++ (re.range "0" "0") (re.range "1" "9")) (re.++ (re.range "1" "4")(re.++ (re.range "0" "9")(re.++ (re.range "5" "5") (re.range "0" "3")))))))) (re.opt (re.++ (re.opt (re.range "-" "-"))(re.++ (re.range "W" "W")(re.++ (re.union (re.++ (re.range "0" "0") (re.range "1" "9")) (re.++ (re.range "1" "4")(re.++ (re.range "0" "9")(re.++ (re.range "5" "5") (re.range "0" "3")))))(re.++ (re.opt (re.range "-" "-")) (re.range "1" "7")))))))))))) (str.to_re "")))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "}" ""))

(define-fun Witness2 () String (str.++ "e" (str.++ "\u{8b}" "")))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.+ (re.union (re.range "\u{00}" "\u{08}")(re.union (re.range "\u{0e}" "\u{1f}")(re.union (re.range "!" "\u{84}")(re.union (re.range "\u{86}" "\u{9f}") (re.range "\u{a1}" "\u{ff}")))))) (str.to_re "")))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "\u{c5}" (str.++ "@" (str.++ "#" (str.++ "&" (str.++ "." (str.++ "l" (str.++ "t" ""))))))))

(define-fun Witness2 () String (str.++ "T" (str.++ "\u{b5}" (str.++ "@" (str.++ "y" (str.++ "1" (str.++ "." (str.++ "e" (str.++ "h" (str.++ "k" ""))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.+ (re.union (re.range "#" "#")(re.union (re.range "&" "&")(re.union (re.range "-" ".")(re.union (re.range "0" "9")(re.union (re.range ";" ";")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))))))(re.++ (re.range "@" "@")(re.++ (re.+ (re.++ (re.+ (re.union (re.range "#" "#")(re.union (re.range "&" "&")(re.union (re.range "0" "9")(re.union (re.range ";" ";") (re.range "a" "z")))))) (re.union (re.++ (re.opt (re.range "-" ".")) (re.+ (re.union (re.range "#" "#")(re.union (re.range "&" "&")(re.union (re.range "0" "9")(re.union (re.range ";" ";") (re.range "a" "z"))))))) (re.opt (re.union (re.range "#" "#")(re.union (re.range "&" "&")(re.union (re.range "0" "9")(re.union (re.range ";" ";") (re.range "a" "z")))))))))(re.++ (re.range "." ".")(re.++ ((_ re.loop 2 6) (re.range "a" "z")) (str.to_re "")))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "C" (str.++ "0" (str.++ "j" (str.++ "l" (str.++ "8" (str.++ "M" (str.++ "," (str.++ "1" (str.++ "8" (str.++ "w" (str.++ "z" (str.++ "6" (str.++ "8" (str.++ "8" (str.++ "3" (str.++ "9" (str.++ "9" ""))))))))))))))))))

(define-fun Witness2 () String (str.++ "1" (str.++ "," (str.++ "," (str.++ "6" (str.++ "8" (str.++ "," (str.++ "s" (str.++ "h" (str.++ "6" (str.++ "8" (str.++ "," (str.++ "9" (str.++ "6" (str.++ "9" (str.++ "8" (str.++ "1" (str.++ "9" ""))))))))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.++ ((_ re.loop 9 9) (re.union (re.range "," ",")(re.union (re.range "0" "9")(re.union (re.range "A" "H")(re.union (re.range "J" "N")(re.union (re.range "P" "Z")(re.union (re.range "a" "h")(re.union (re.range "j" "n") (re.range "p" "z")))))))))(re.++ (re.union (re.range "," ",")(re.union (re.range "0" "9")(re.union (re.range "A" "H")(re.union (re.range "J" "N")(re.union (re.range "P" "P")(re.union (re.range "R" "T")(re.union (re.range "V" "Z")(re.union (re.range "a" "h")(re.union (re.range "j" "n")(re.union (re.range "p" "p")(re.union (re.range "r" "t") (re.range "v" "z"))))))))))))(re.++ (re.union (re.range "," ",")(re.union (re.range "0" "9")(re.union (re.range "A" "H")(re.union (re.range "J" "N")(re.union (re.range "P" "Z")(re.union (re.range "a" "h")(re.union (re.range "j" "n") (re.range "p" "z")))))))) ((_ re.loop 6 6) (re.range "0" "9"))))) (str.to_re "")))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "4" (str.++ "." "")))

(define-fun Witness2 () String (str.++ "8" (str.++ "." (str.++ "8" ""))))

(assert (= regexA (re.union (re.++ (str.to_re "")(re.++ (re.* (re.range "0" "9"))(re.++ (re.opt (re.range "." "."))(re.++ (re.* (re.range "0" "9"))(re.++ (re.+ (re.range "0" "9"))(re.++ (re.* (re.range "0" "9")) (str.to_re ""))))))) (re.++ (str.to_re "")(re.++ (re.+ (re.range "0" "9"))(re.++ (re.* (re.range "0" "9"))(re.++ (re.range "." ".")(re.++ (re.* (re.range "0" "9")) (str.to_re "")))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "b" (str.++ "F" (str.++ "p" (str.++ "o" (str.++ "C" (str.++ "/" (str.++ "O" (str.++ "1" (str.++ "0" (str.++ "8" "")))))))))))

(define-fun Witness2 () String (str.++ "b" (str.++ "F" (str.++ "P" (str.++ "o" (str.++ "6" (str.++ "0" "")))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.union (re.range "B" "B") (re.range "b" "b"))(re.++ (re.union (re.range "F" "F") (re.range "f" "f"))(re.++ (re.union (re.range "P" "P") (re.range "p" "p"))(re.++ (re.union (re.range "O" "O") (re.range "o" "o"))(re.++ (re.union (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.union (str.to_re "") (re.++ (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (re.range "C" "C")(re.++ (re.union (re.range "/" "/") (str.to_re ""))(re.++ (re.range "O" "O") (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))))))))) ((_ re.loop 1 4) (re.range "0" "9"))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "Z" (str.++ ":" (str.++ "\u{5c}" ""))))

(define-fun Witness2 () String (str.++ "E" (str.++ ":" (str.++ "\u{5c}" ""))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.union (re.range "A" "Z") (re.range "a" "z"))(re.++ (str.to_re (str.++ ":" (str.++ "\u{5c}" "")))(re.++ (re.* (re.++ (re.union (re.range "!" "!")(re.union (re.range "#" ")")(re.union (re.range "+" "-")(re.union (re.range "0" "9")(re.union (re.range ";" ";")(re.union (re.range "=" "=")(re.union (re.range "@" "[")(re.union (re.range "]" "{") (re.range "}" "\u{ff}")))))))))(re.++ (re.opt (re.++ (re.* (re.union (re.range " " "!")(re.union (re.range "#" ")")(re.union (re.range "+" ".")(re.union (re.range "0" "9")(re.union (re.range ";" ";")(re.union (re.range "=" "=")(re.union (re.range "@" "[")(re.union (re.range "]" "{") (re.range "}" "\u{ff}")))))))))) (re.union (re.range "!" "!")(re.union (re.range "#" ")")(re.union (re.range "+" "-")(re.union (re.range "0" "9")(re.union (re.range ";" ";")(re.union (re.range "=" "=")(re.union (re.range "@" "[")(re.union (re.range "]" "{") (re.range "}" "\u{ff}"))))))))))) (re.range "\u{5c}" "\u{5c}")))) (str.to_re "")))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "(" (str.++ "1" (str.++ "8" (str.++ "9" (str.++ ")" (str.++ " " (str.++ "8" (str.++ "6" (str.++ "8" (str.++ "-" (str.++ "9" (str.++ "8" (str.++ "9" (str.++ "8" "")))))))))))))))

(define-fun Witness2 () String (str.++ "(" (str.++ "4" (str.++ "7" (str.++ "4" (str.++ ")" (str.++ " " (str.++ "4" (str.++ "4" (str.++ "1" (str.++ "-" (str.++ "2" (str.++ "8" (str.++ "9" (str.++ "5" "")))))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.++ (re.range "(" "(")(re.++ ((_ re.loop 3 3) (re.range "0" "9"))(re.++ (str.to_re (str.++ ")" (str.++ " " "")))(re.++ ((_ re.loop 3 3) (re.range "0" "9"))(re.++ (re.range "-" "-") ((_ re.loop 4 4) (re.range "0" "9"))))))) (str.to_re "")))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "'" (str.++ ";" (str.++ "." (str.++ "," (str.++ "\u{a0}" (str.++ "w" "")))))))

(define-fun Witness2 () String (str.++ "," (str.++ "k" (str.++ "P" ""))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.union (re.++ (re.opt (re.+ (re.union (re.range "'" "'")(re.union (re.range "-" ".")(re.union (re.range "A" "Z") (re.range "a" "z")))))) (re.opt (re.++ (re.range "," ",")(re.++ (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))) (re.+ (re.union (re.range "A" "Z") (re.range "a" "z"))))))) (re.++ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))(re.++ (re.* (re.++ (re.opt (re.union (re.range "-" ".") (re.range "_" "_"))) (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z"))))))(re.++ (re.range "@" "@")(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z"))))(re.++ (re.* (re.++ (re.opt (re.range "-" ".")) (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z"))))))(re.++ (re.range "." ".") (re.++ ((_ re.loop 2 2) (re.union (re.range "A" "Z") (re.range "a" "z"))) (re.* (re.union (re.range "A" "Z") (re.range "a" "z")))))))))))(re.++ (re.* (re.++ (re.range ";" ";") (re.union (re.++ (re.+ (re.union (re.range "'" "'")(re.union (re.range "-" ".")(re.union (re.range "A" "Z") (re.range "a" "z"))))) (re.opt (re.++ (re.range "," ",")(re.++ (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))) (re.+ (re.union (re.range "A" "Z") (re.range "a" "z"))))))) (re.++ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))(re.++ (re.* (re.++ (re.opt (re.union (re.range "-" ".") (re.range "_" "_"))) (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z"))))))(re.++ (re.range "@" "@")(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z"))))(re.++ (re.* (re.++ (re.opt (re.range "-" ".")) (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z"))))))(re.++ (re.range "." ".") (re.++ ((_ re.loop 2 2) (re.union (re.range "A" "Z") (re.range "a" "z"))) (re.* (re.union (re.range "A" "Z") (re.range "a" "z"))))))))))))) (str.to_re ""))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "\u{5c}" (str.++ "d" (str.++ "-" (str.++ "\u{5c}" (str.++ "d" (str.++ "d" (str.++ "\u{5c}" (str.++ "o" (str.++ "f" (str.++ " " (str.++ " " (str.++ "\u{5c}" (str.++ "\u{5c}" (str.++ "d" "")))))))))))))))

(define-fun Witness2 () String (str.++ "\u{5c}" (str.++ "d" (str.++ "-" (str.++ "\u{5c}" (str.++ "d" (str.++ "d" (str.++ "\u{5c}" (str.++ "o" (str.++ "f" (str.++ " " (str.++ " " (str.++ " " (str.++ "\u{5c}" (str.++ "s" (str.++ "\u{5c}" (str.++ "d" "")))))))))))))))))

(assert (= regexA (re.union (re.++ (re.++ (str.to_re (str.++ "\u{5c}" (str.++ "d" (str.++ "-" (str.++ "\u{5c}" "")))))(re.++ ((_ re.loop 2 2) (re.range "d" "d"))(re.++ (re.range "\u{5c}" "\u{5c}") (re.* (re.range "s" "s")))))(re.++ (re.++ (str.to_re (str.++ "o" (str.++ "f" ""))) (re.+ (re.range " " " "))) (re.++ (re.range "\u{5c}" "\u{5c}")(re.++ (re.opt (re.range "s" "s"))(re.++ (re.range "\u{5c}" "\u{5c}") ((_ re.loop 5 5) (re.range "d" "d")))))))(re.union (re.++ (re.++ (str.to_re (str.++ "\u{5c}" (str.++ "d" (str.++ "-" (str.++ "\u{5c}" "")))))(re.++ ((_ re.loop 2 2) (re.range "d" "d"))(re.++ (re.range "\u{5c}" "\u{5c}") (re.* (re.range "s" "s")))))(re.++ (re.++ (str.to_re (str.++ "o" (str.++ "f" ""))) (re.+ (re.range " " " "))) (re.++ (re.range "\u{5c}" "\u{5c}")(re.++ (re.opt (re.range "s" "s"))(re.++ (re.range "\u{5c}" "\u{5c}") ((_ re.loop 4 4) (re.range "d" "d")))))))(re.union (re.++ (re.++ (str.to_re (str.++ "\u{5c}" (str.++ "d" (str.++ "-" (str.++ "\u{5c}" "")))))(re.++ ((_ re.loop 2 2) (re.range "d" "d"))(re.++ (re.range "\u{5c}" "\u{5c}") (re.* (re.range "s" "s")))))(re.++ (re.++ (str.to_re (str.++ "o" (str.++ "f" ""))) (re.+ (re.range " " " "))) (re.++ (re.range "\u{5c}" "\u{5c}")(re.++ (re.opt (re.range "s" "s"))(re.++ (re.range "\u{5c}" "\u{5c}") ((_ re.loop 3 3) (re.range "d" "d")))))))(re.union (re.++ (re.++ (str.to_re (str.++ "\u{5c}" (str.++ "d" (str.++ "-" (str.++ "\u{5c}" "")))))(re.++ ((_ re.loop 2 2) (re.range "d" "d"))(re.++ (re.range "\u{5c}" "\u{5c}") (re.* (re.range "s" "s")))))(re.++ (re.++ (str.to_re (str.++ "o" (str.++ "f" ""))) (re.+ (re.range " " " "))) (re.++ (re.range "\u{5c}" "\u{5c}")(re.++ (re.opt (re.range "s" "s"))(re.++ (re.range "\u{5c}" "\u{5c}") ((_ re.loop 2 2) (re.range "d" "d"))))))) (re.++ (re.++ (str.to_re (str.++ "\u{5c}" (str.++ "d" (str.++ "-" (str.++ "\u{5c}" "")))))(re.++ ((_ re.loop 2 2) (re.range "d" "d"))(re.++ (re.range "\u{5c}" "\u{5c}") (re.* (re.range "s" "s")))))(re.++ (re.++ (str.to_re (str.++ "o" (str.++ "f" ""))) (re.+ (re.range " " " "))) (re.++ (re.range "\u{5c}" "\u{5c}")(re.++ (re.opt (re.range "s" "s")) (str.to_re (str.++ "\u{5c}" (str.++ "d" "")))))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "D" (str.++ "-" (str.++ "-" (str.++ "-" (str.++ "-" (str.++ "-" (str.++ "E" (str.++ "N" (str.++ "D" (str.++ "-" (str.++ "-" (str.++ "-" (str.++ "-" (str.++ "-" (str.++ "\u{e9}" (str.++ "\u{ce}" (str.++ "q" (str.++ "\u{c9}" "")))))))))))))))))))

(define-fun Witness2 () String (str.++ "-" (str.++ "-" (str.++ "-" (str.++ "-" (str.++ "-" (str.++ "B" (str.++ "E" (str.++ "G" (str.++ "I" (str.++ "N" (str.++ "-" (str.++ "-" (str.++ "-" (str.++ "-" (str.++ "-" ""))))))))))))))))

(assert (= regexA (re.++ (re.* (re.union (re.range "\u{00}" "\u{09}") (re.range "\u{0b}" "\u{ff}")))(re.++ (str.to_re (str.++ "-" (str.++ "-" (str.++ "-" (str.++ "-" (str.++ "-" ""))))))(re.++ (re.union (str.to_re (str.++ "B" (str.++ "E" (str.++ "G" (str.++ "I" (str.++ "N" "")))))) (str.to_re (str.++ "E" (str.++ "N" (str.++ "D" "")))))(re.++ (re.* (re.union (re.range "\u{00}" ",") (re.range "." "\u{ff}")))(re.++ (str.to_re (str.++ "-" (str.++ "-" (str.++ "-" (str.++ "-" (str.++ "-" "")))))) (re.* (re.union (re.range "\u{00}" "\u{09}") (re.range "\u{0b}" "\u{ff}"))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "$" (str.++ "-" (str.++ "5" (str.++ "5" (str.++ "." (str.++ "9" "")))))))

(define-fun Witness2 () String (str.++ "." (str.++ "1" "")))

(assert (= regexA (re.union (re.++ (str.to_re "")(re.++ (re.opt (re.range "$" "$"))(re.++ (re.opt (re.range "-" "-"))(re.++ (re.union (re.++ (re.range "1" "9")(re.++ ((_ re.loop 0 2) (re.range "0" "9"))(re.++ (re.* (re.++ (re.range "," ",") ((_ re.loop 3 3) (re.range "0" "9")))) (re.opt (re.++ (re.range "." ".") ((_ re.loop 0 2) (re.range "0" "9")))))))(re.union (re.++ (re.range "1" "9")(re.++ (re.* (re.range "0" "9")) (re.opt (re.++ (re.range "." ".") ((_ re.loop 0 2) (re.range "0" "9"))))))(re.union (re.++ (re.range "0" "0") (re.opt (re.++ (re.range "." ".") ((_ re.loop 0 2) (re.range "0" "9"))))) (re.++ (re.range "." ".") ((_ re.loop 1 2) (re.range "0" "9")))))) (str.to_re "")))))(re.union (re.++ (str.to_re "")(re.++ (re.opt (re.range "-" "-"))(re.++ (re.opt (re.range "$" "$"))(re.++ (re.union (re.++ (re.range "1" "9")(re.++ ((_ re.loop 0 2) (re.range "0" "9"))(re.++ (re.* (re.++ (re.range "," ",") ((_ re.loop 3 3) (re.range "0" "9")))) (re.opt (re.++ (re.range "." ".") ((_ re.loop 0 2) (re.range "0" "9")))))))(re.union (re.++ (re.range "1" "9")(re.++ (re.* (re.range "0" "9")) (re.opt (re.++ (re.range "." ".") ((_ re.loop 0 2) (re.range "0" "9"))))))(re.union (re.++ (re.range "0" "0") (re.opt (re.++ (re.range "." ".") ((_ re.loop 0 2) (re.range "0" "9"))))) (re.++ (re.range "." ".") ((_ re.loop 1 2) (re.range "0" "9")))))) (str.to_re ""))))) (re.++ (str.to_re "")(re.++ (re.range "(" "(")(re.++ (re.opt (re.range "$" "$"))(re.++ (re.union (re.++ (re.range "1" "9")(re.++ ((_ re.loop 0 2) (re.range "0" "9"))(re.++ (re.* (re.++ (re.range "," ",") ((_ re.loop 3 3) (re.range "0" "9")))) (re.opt (re.++ (re.range "." ".") ((_ re.loop 0 2) (re.range "0" "9")))))))(re.union (re.++ (re.range "1" "9")(re.++ (re.* (re.range "0" "9")) (re.opt (re.++ (re.range "." ".") ((_ re.loop 0 2) (re.range "0" "9"))))))(re.union (re.++ (re.range "0" "0") (re.opt (re.++ (re.range "." ".") ((_ re.loop 0 2) (re.range "0" "9"))))) (re.++ (re.range "." ".") ((_ re.loop 1 2) (re.range "0" "9"))))))(re.++ (re.range ")" ")") (str.to_re ""))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "h" (str.++ "6" (str.++ "e" (str.++ " " (str.++ "4" (str.++ "R" (str.++ "k" ""))))))))

(define-fun Witness2 () String (str.++ "Y" (str.++ "N" (str.++ "8" (str.++ "8" (str.++ "Z" (str.++ "B" "")))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ ((_ re.loop 1 2) (re.union (re.range "A" "Z") (re.range "a" "z")))(re.++ ((_ re.loop 1 2) (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z"))))(re.++ (re.opt (re.range " " " "))(re.++ (re.opt (re.range "0" "9"))(re.++ ((_ re.loop 2 2) (re.union (re.range "A" "Z") (re.range "a" "z"))) (str.to_re "")))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "9" (str.++ "9" (str.++ "9" (str.++ "8" (str.++ "\u{0d}" (str.++ "8" (str.++ "8" (str.++ "7" (str.++ "\u{09}" (str.++ "9" (str.++ "3" (str.++ "9" (str.++ "4" ""))))))))))))))

(define-fun Witness2 () String (str.++ "8" (str.++ "9" (str.++ "8" (str.++ "4" (str.++ "\u{0a}" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "\u{0d}" (str.++ "8" (str.++ "9" (str.++ "6" (str.++ "9" ""))))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ ((_ re.loop 4 4) (re.range "0" "9"))(re.++ (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "-" "-")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ ((_ re.loop 3 3) (re.range "0" "9"))(re.++ (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "-" "-")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ ((_ re.loop 4 4) (re.range "0" "9")) (str.to_re "")))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "0" (str.++ "0" (str.++ ":" (str.++ "4" (str.++ "9" ""))))))

(define-fun Witness2 () String (str.++ "2" (str.++ "2" (str.++ ":" (str.++ "1" (str.++ "9" ""))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.union (re.range "1" "9")(re.union (re.++ (re.range "0" "1") (re.range "0" "9")) (re.++ (re.range "1" "2") (re.range "0" "3"))))(re.++ (re.range ":" ":")(re.++ (re.++ (re.range "0" "5") (re.range "0" "9")) (str.to_re "")))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "P" (str.++ "." (str.++ " " (str.++ "O" (str.++ "." (str.++ "B" (str.++ "o" (str.++ "x" (str.++ " " (str.++ " " (str.++ "4" (str.++ "," (str.++ "O" (str.++ "F" (str.++ "C" (str.++ "," (str.++ "\u{0a}" (str.++ "\u{a0}" (str.++ "P" (str.++ "." (str.++ " " (str.++ "O" (str.++ "." (str.++ " " (str.++ " " (str.++ "B" (str.++ "o" (str.++ "x" (str.++ " " (str.++ "3" (str.++ "," (str.++ "O" (str.++ "F" (str.++ "C" (str.++ "\u{85}" (str.++ "R" (str.++ " " (str.++ "," (str.++ "\u{85}" (str.++ "O" (str.++ "K" (str.++ "\u{85}" (str.++ "0" (str.++ "8" (str.++ "-" (str.++ "9" (str.++ "9" (str.++ "8" "")))))))))))))))))))))))))))))))))))))))))))))))))

(define-fun Witness2 () String (str.++ "C" (str.++ "/" (str.++ "O" (str.++ " " (str.++ "\u{ce}" (str.++ " " (str.++ "\u{e9}" (str.++ "9" (str.++ " " (str.++ " " (str.++ "H" (str.++ "N" (str.++ "G" (str.++ "R" (str.++ "B" (str.++ " " (str.++ "\u{a0}" (str.++ "\u{0d}" (str.++ "\u{09}" (str.++ "G" (str.++ "e" (str.++ "n" (str.++ "e" (str.++ "r" (str.++ "a" (str.++ "l" (str.++ " " (str.++ " " (str.++ "D" (str.++ "e" (str.++ "l" (str.++ "i" (str.++ "v" (str.++ "e" (str.++ "r" (str.++ "y" (str.++ "L" (str.++ "O" (str.++ "W" (str.++ "R" (str.++ "," (str.++ "\u{85}" (str.++ "\u{85}" (str.++ "\u{85}" (str.++ "\u{0b}" (str.++ "\u{0c}" (str.++ " " (str.++ "\u{a0}" (str.++ "r" (str.++ "j" (str.++ "," (str.++ "\u{85}" (str.++ "D" (str.++ "C" (str.++ "\u{85}" (str.++ "0" (str.++ "0" (str.++ "-" (str.++ "4" (str.++ "7" (str.++ "\u{a0}" ""))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (re.++ (re.union (re.++ (re.+ (re.range "0" "9"))(re.++ (re.+ (re.++ (re.+ (re.range " " " "))(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))) (re.opt (re.range "." "."))))) (re.opt (re.++ (re.union (re.++ (re.+ (re.range " " " ")) (str.to_re (str.++ "S" (str.++ "T" (str.++ "R" (str.++ "E" (str.++ "E" (str.++ "T" ""))))))))(re.union (str.to_re (str.++ "S" (str.++ "T" "")))(re.union (str.to_re (str.++ "D" (str.++ "R" (str.++ "I" (str.++ "V" (str.++ "E" ""))))))(re.union (str.to_re (str.++ "D" (str.++ "R" "")))(re.union (str.to_re (str.++ "A" (str.++ "V" (str.++ "E" (str.++ "N" (str.++ "U" (str.++ "E" "")))))))(re.union (str.to_re (str.++ "A" (str.++ "V" (str.++ "E" ""))))(re.union (str.to_re (str.++ "R" (str.++ "O" (str.++ "A" (str.++ "D" "")))))(re.union (str.to_re (str.++ "R" (str.++ "D" "")))(re.union (str.to_re (str.++ "L" (str.++ "O" (str.++ "O" (str.++ "P" "")))))(re.union (str.to_re (str.++ "C" (str.++ "O" (str.++ "U" (str.++ "R" (str.++ "T" ""))))))(re.union (str.to_re (str.++ "C" (str.++ "T" "")))(re.union (str.to_re (str.++ "C" (str.++ "I" (str.++ "R" (str.++ "C" (str.++ "L" (str.++ "E" "")))))))(re.union (str.to_re (str.++ "L" (str.++ "A" (str.++ "N" (str.++ "E" "")))))(re.union (str.to_re (str.++ "L" (str.++ "N" "")))(re.union (str.to_re (str.++ "B" (str.++ "O" (str.++ "U" (str.++ "L" (str.++ "E" (str.++ "V" (str.++ "A" (str.++ "R" (str.++ "D" "")))))))))) (str.to_re (str.++ "B" (str.++ "L" (str.++ "V" (str.++ "D" "")))))))))))))))))))) (re.opt (re.range "." "."))))))(re.union (re.++ (re.union (re.++ (str.to_re (str.++ "P" (str.++ "." "")))(re.++ (re.opt (re.range " " " ")) (str.to_re (str.++ "O" (str.++ "." ""))))) (re.++ (re.range "P" "P")(re.++ (re.opt (re.range " " " ")) (re.range "O" "O"))))(re.++ (re.* (re.range " " " "))(re.++ (str.to_re (str.++ "B" (str.++ "o" (str.++ "x" ""))))(re.++ (re.+ (re.range " " " ")) (re.+ (re.range "0" "9"))))))(re.union (re.++ (str.to_re (str.++ "G" (str.++ "e" (str.++ "n" (str.++ "e" (str.++ "r" (str.++ "a" (str.++ "l" ""))))))))(re.++ (re.+ (re.range " " " ")) (str.to_re (str.++ "D" (str.++ "e" (str.++ "l" (str.++ "i" (str.++ "v" (str.++ "e" (str.++ "r" (str.++ "y" ""))))))))))) (re.++ (re.range "C" "C")(re.++ (re.union (re.range "/" "/") (re.range "\u{5c}" "\u{5c}"))(re.++ (re.range "O" "O")(re.++ (re.+ (re.range " " " ")) (re.+ (re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))) (re.* (re.range " " " ")))))))))))(re.++ (re.opt (re.range "," ","))(re.++ (re.* (re.range " " " ")) (re.opt (re.union (re.++ (re.union (str.to_re (str.++ "A" (str.++ "P" (str.++ "T" ""))))(re.union (str.to_re (str.++ "B" (str.++ "L" (str.++ "D" (str.++ "G" "")))))(re.union (str.to_re (str.++ "D" (str.++ "E" (str.++ "P" (str.++ "T" "")))))(re.union (str.to_re (str.++ "F" (str.++ "L" "")))(re.union (str.to_re (str.++ "H" (str.++ "N" (str.++ "G" (str.++ "R" "")))))(re.union (str.to_re (str.++ "L" (str.++ "O" (str.++ "T" ""))))(re.union (str.to_re (str.++ "P" (str.++ "I" (str.++ "E" (str.++ "R" "")))))(re.union (str.to_re (str.++ "R" (str.++ "M" "")))(re.union (re.++ (re.range "S" "S") (re.union (str.to_re (str.++ "L" (str.++ "I" (str.++ "P" ""))))(re.union (str.to_re (str.++ "P" (str.++ "C" ""))) (re.++ (re.range "T" "T") (re.union (re.range "E" "E") (str.to_re (str.++ "O" (str.++ "P" ""))))))))(re.union (str.to_re (str.++ "T" (str.++ "R" (str.++ "L" (str.++ "R" "")))))(re.union (str.to_re (str.++ "U" (str.++ "N" (str.++ "I" (str.++ "T" ""))))) (re.range "#" "#"))))))))))))(re.++ (re.opt (re.range "." "."))(re.++ (re.* (re.range " " " ")) (re.+ (re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z"))))))))(re.union (str.to_re (str.++ "B" (str.++ "S" (str.++ "M" (str.++ "T" "")))))(re.union (str.to_re (str.++ "F" (str.++ "R" (str.++ "N" (str.++ "T" "")))))(re.union (str.to_re (str.++ "L" (str.++ "B" (str.++ "B" (str.++ "Y" "")))))(re.union (str.to_re (str.++ "L" (str.++ "O" (str.++ "W" (str.++ "R" "")))))(re.union (str.to_re (str.++ "O" (str.++ "F" (str.++ "C" ""))))(re.union (str.to_re (str.++ "P" (str.++ "H" "")))(re.union (str.to_re (str.++ "R" (str.++ "E" (str.++ "A" (str.++ "R" "")))))(re.union (str.to_re (str.++ "S" (str.++ "I" (str.++ "D" (str.++ "E" ""))))) (str.to_re (str.++ "U" (str.++ "P" (str.++ "P" (str.++ "R" ""))))))))))))))))))(re.++ (re.opt (re.range "," ","))(re.++ (re.+ (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (re.opt (re.++ (re.union (re.++ (re.+ (re.range "0" "9"))(re.++ (re.+ (re.++ (re.+ (re.range " " " "))(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))) (re.opt (re.range "." "."))))) (re.opt (re.++ (re.union (re.++ (re.+ (re.range " " " ")) (str.to_re (str.++ "S" (str.++ "T" (str.++ "R" (str.++ "E" (str.++ "E" (str.++ "T" ""))))))))(re.union (str.to_re (str.++ "S" (str.++ "T" "")))(re.union (str.to_re (str.++ "D" (str.++ "R" (str.++ "I" (str.++ "V" (str.++ "E" ""))))))(re.union (str.to_re (str.++ "D" (str.++ "R" "")))(re.union (str.to_re (str.++ "A" (str.++ "V" (str.++ "E" (str.++ "N" (str.++ "U" (str.++ "E" "")))))))(re.union (str.to_re (str.++ "A" (str.++ "V" (str.++ "E" ""))))(re.union (str.to_re (str.++ "R" (str.++ "O" (str.++ "A" (str.++ "D" "")))))(re.union (str.to_re (str.++ "R" (str.++ "D" "")))(re.union (str.to_re (str.++ "L" (str.++ "O" (str.++ "O" (str.++ "P" "")))))(re.union (str.to_re (str.++ "C" (str.++ "O" (str.++ "U" (str.++ "R" (str.++ "T" ""))))))(re.union (str.to_re (str.++ "C" (str.++ "T" "")))(re.union (str.to_re (str.++ "C" (str.++ "I" (str.++ "R" (str.++ "C" (str.++ "L" (str.++ "E" "")))))))(re.union (str.to_re (str.++ "L" (str.++ "A" (str.++ "N" (str.++ "E" "")))))(re.union (str.to_re (str.++ "L" (str.++ "N" "")))(re.union (str.to_re (str.++ "B" (str.++ "O" (str.++ "U" (str.++ "L" (str.++ "E" (str.++ "V" (str.++ "A" (str.++ "R" (str.++ "D" "")))))))))) (str.to_re (str.++ "B" (str.++ "L" (str.++ "V" (str.++ "D" "")))))))))))))))))))) (re.opt (re.range "." "."))))))(re.union (re.++ (re.union (re.++ (str.to_re (str.++ "P" (str.++ "." "")))(re.++ (re.opt (re.range " " " ")) (str.to_re (str.++ "O" (str.++ "." ""))))) (re.++ (re.range "P" "P")(re.++ (re.opt (re.range " " " ")) (re.range "O" "O"))))(re.++ (re.* (re.range " " " "))(re.++ (str.to_re (str.++ "B" (str.++ "o" (str.++ "x" ""))))(re.++ (re.+ (re.range " " " ")) (re.+ (re.range "0" "9"))))))(re.union (re.++ (str.to_re (str.++ "G" (str.++ "e" (str.++ "n" (str.++ "e" (str.++ "r" (str.++ "a" (str.++ "l" ""))))))))(re.++ (re.+ (re.range " " " ")) (str.to_re (str.++ "D" (str.++ "e" (str.++ "l" (str.++ "i" (str.++ "v" (str.++ "e" (str.++ "r" (str.++ "y" ""))))))))))) (re.++ (re.range "C" "C")(re.++ (re.union (re.range "/" "/") (re.range "\u{5c}" "\u{5c}"))(re.++ (re.range "O" "O")(re.++ (re.+ (re.range " " " ")) (re.+ (re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))) (re.* (re.range " " " ")))))))))))(re.++ (re.opt (re.range "," ","))(re.++ (re.* (re.range " " " ")) (re.opt (re.union (re.++ (re.union (str.to_re (str.++ "A" (str.++ "P" (str.++ "T" ""))))(re.union (str.to_re (str.++ "B" (str.++ "L" (str.++ "D" (str.++ "G" "")))))(re.union (str.to_re (str.++ "D" (str.++ "E" (str.++ "P" (str.++ "T" "")))))(re.union (str.to_re (str.++ "F" (str.++ "L" "")))(re.union (str.to_re (str.++ "H" (str.++ "N" (str.++ "G" (str.++ "R" "")))))(re.union (str.to_re (str.++ "L" (str.++ "O" (str.++ "T" ""))))(re.union (str.to_re (str.++ "P" (str.++ "I" (str.++ "E" (str.++ "R" "")))))(re.union (str.to_re (str.++ "R" (str.++ "M" "")))(re.union (re.++ (re.range "S" "S") (re.union (str.to_re (str.++ "L" (str.++ "I" (str.++ "P" ""))))(re.union (str.to_re (str.++ "P" (str.++ "C" ""))) (re.++ (re.range "T" "T") (re.union (re.range "E" "E") (str.to_re (str.++ "O" (str.++ "P" ""))))))))(re.union (str.to_re (str.++ "T" (str.++ "R" (str.++ "L" (str.++ "R" "")))))(re.union (str.to_re (str.++ "U" (str.++ "N" (str.++ "I" (str.++ "T" ""))))) (re.range "#" "#"))))))))))))(re.++ (re.opt (re.range "." "."))(re.++ (re.* (re.range " " " ")) (re.+ (re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z"))))))))(re.union (str.to_re (str.++ "B" (str.++ "S" (str.++ "M" (str.++ "T" "")))))(re.union (str.to_re (str.++ "F" (str.++ "R" (str.++ "N" (str.++ "T" "")))))(re.union (str.to_re (str.++ "L" (str.++ "B" (str.++ "B" (str.++ "Y" "")))))(re.union (str.to_re (str.++ "L" (str.++ "O" (str.++ "W" (str.++ "R" "")))))(re.union (str.to_re (str.++ "O" (str.++ "F" (str.++ "C" ""))))(re.union (str.to_re (str.++ "P" (str.++ "H" "")))(re.union (str.to_re (str.++ "R" (str.++ "E" (str.++ "A" (str.++ "R" "")))))(re.union (str.to_re (str.++ "S" (str.++ "I" (str.++ "D" (str.++ "E" ""))))) (str.to_re (str.++ "U" (str.++ "P" (str.++ "P" (str.++ "R" "")))))))))))))))))))(re.++ (re.opt (re.range "," ","))(re.++ (re.+ (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (re.+ (re.++ (re.+ (re.union (re.range "A" "Z") (re.range "a" "z"))) (re.* (re.range " " " "))))(re.++ (re.range "," ",")(re.++ (re.+ (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (re.union (re.++ (re.range "A" "A") (re.union (re.range "A" "A")(re.union (re.range "K" "L")(re.union (re.range "P" "P")(re.union (re.range "R" "S") (re.range "Z" "Z"))))))(re.union (re.++ (re.range "C" "C") (re.union (re.range "A" "A")(re.union (re.range "O" "O") (re.range "T" "T"))))(re.union (re.++ (re.range "D" "D") (re.union (re.range "C" "C") (re.range "E" "E")))(re.union (re.++ (re.range "F" "F") (re.range "L" "M"))(re.union (re.++ (re.range "G" "G") (re.union (re.range "A" "A") (re.range "U" "U")))(re.union (str.to_re (str.++ "H" (str.++ "I" "")))(re.union (re.++ (re.range "I" "I") (re.union (re.range "A" "A")(re.union (re.range "D" "D")(re.union (re.range "L" "L") (re.range "N" "N")))))(re.union (re.++ (re.range "K" "K") (re.union (re.range "S" "S") (re.range "Y" "Y")))(re.union (str.to_re (str.++ "L" (str.++ "A" "")))(re.union (re.++ (re.range "M" "M") (re.union (re.range "A" "A")(re.union (re.range "D" "E")(re.union (re.range "H" "I")(re.union (re.range "N" "P") (re.range "S" "T"))))))(re.union (re.++ (re.range "N" "N") (re.union (re.range "C" "E")(re.union (re.range "H" "H")(re.union (re.range "J" "J")(re.union (re.range "M" "M")(re.union (re.range "V" "V") (re.range "Y" "Y")))))))(re.union (re.++ (re.range "O" "O") (re.union (re.range "H" "H")(re.union (re.range "K" "K") (re.range "R" "R"))))(re.union (re.++ (re.range "P" "P") (re.union (re.range "A" "A")(re.union (re.range "R" "R") (re.range "W" "W"))))(re.union (str.to_re (str.++ "R" (str.++ "I" "")))(re.union (re.++ (re.range "S" "S") (re.range "C" "D"))(re.union (re.++ (re.range "T" "T") (re.union (re.range "N" "N") (re.range "X" "X")))(re.union (str.to_re (str.++ "U" (str.++ "T" "")))(re.union (re.++ (re.range "V" "V") (re.union (re.range "A" "A")(re.union (re.range "I" "I") (re.range "T" "T")))) (re.++ (re.range "W" "W") (re.union (re.range "A" "A")(re.union (re.range "I" "I")(re.union (re.range "V" "V") (re.range "Y" "Y")))))))))))))))))))))))(re.++ (re.+ (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (re.++ (re.+ (re.range "0" "9")) (re.opt (re.++ (re.range "-" "-") (re.+ (re.range "0" "9")))))(re.++ (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))) (str.to_re ""))))))))))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "J" (str.++ "8" (str.++ "." (str.++ "A" (str.++ "s" (str.++ "P" (str.++ "X" ""))))))))

(define-fun Witness2 () String (str.++ "8" (str.++ "." (str.++ "A" (str.++ "s" (str.++ "p" (str.++ "x" "")))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.* (re.union (re.range "1" "9")(re.union (re.range "A" "Z") (re.range "a" "z"))))(re.++ (re.range "." ".") (re.union (re.++ (re.union (re.range "A" "A") (re.range "a" "a"))(re.++ (re.union (re.range "S" "S") (re.range "s" "s"))(re.++ (re.union (re.range "P" "P") (re.range "p" "p")) (re.union (re.range "X" "X") (re.range "x" "x")))))(re.union (re.++ (re.union (re.range "H" "H") (re.range "h" "h"))(re.++ (re.union (re.range "T" "T") (re.range "t" "t"))(re.++ (re.union (re.range "M" "M") (re.range "m" "m")) (re.union (re.range "L" "L") (re.range "l" "l")))))(re.union (re.++ (re.union (re.range "H" "H") (re.range "h" "h"))(re.++ (re.union (re.range "T" "T") (re.range "t" "t")) (re.union (re.range "M" "M") (re.range "m" "m")))) (re.++ (re.union (re.range "A" "A") (re.range "a" "a"))(re.++ (re.union (re.range "S" "S") (re.range "s" "s")) (re.union (re.range "P" "P") (re.range "p" "p"))))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "\u{ba}" (str.++ "." (str.++ "-" (str.++ "-" (str.++ "." (str.++ "\u{aa}" (str.++ "." (str.++ "T" (str.++ "." (str.++ "p" (str.++ "j" ""))))))))))))

(define-fun Witness2 () String (str.++ "V" (str.++ "-" (str.++ "\u{aa}" (str.++ "." (str.++ "\u{b5}" (str.++ "q" "")))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.+ (re.++ (re.+ (re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))) (re.range "." ".")))(re.++ (re.+ (re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))))(re.++ (re.opt (re.++ (re.range "/" "/") (re.* (re.union (re.range "%" "&")(re.union (re.range "-" "9")(re.union (re.range "=" "=")(re.union (re.range "?" "?")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))))))) (str.to_re "")))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "\u{a0}" (str.++ "\u{fc}" (str.++ ":" (str.++ "/" (str.++ "/" (str.++ "\u{ee}" (str.++ "\u{d4}" (str.++ "\u{ad}" "")))))))))

(define-fun Witness2 () String (str.++ "\u{85}" (str.++ "\u{ba}" (str.++ ":" (str.++ "/" (str.++ "/" (str.++ "H" (str.++ "\u{9b}" (str.++ "g" (str.++ "\u{d9}" (str.++ "\u{f1}" (str.++ "\u{a5}" ""))))))))))))

(assert (= regexA (re.++ (re.union (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))) (str.to_re "")) (re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))(re.++ (str.to_re (str.++ ":" (str.++ "/" (str.++ "/" "")))) (re.+ (re.union (re.range "\u{00}" "\u{08}")(re.union (re.range "\u{0e}" "\u{1f}")(re.union (re.range "!" "\u{84}")(re.union (re.range "\u{86}" "\u{9f}") (re.range "\u{a1}" "\u{ff}")))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "1" (str.++ "1" (str.++ "-" (str.++ "1" (str.++ "8" (str.++ "." (str.++ "1" (str.++ "8" (str.++ "9" (str.++ "7" "")))))))))))

(define-fun Witness2 () String (str.++ "1" (str.++ "1" (str.++ "-" (str.++ "3" (str.++ "0" (str.++ "-" (str.++ "9" (str.++ "8" (str.++ "8" (str.++ "1" "")))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.union (re.++ (re.union (re.++ (re.range "0" "0") (re.union (re.range "1" "1")(re.union (re.range "3" "3")(re.union (re.range "5" "5") (re.range "7" "8")))))(re.union (str.to_re (str.++ "1" (str.++ "0" ""))) (str.to_re (str.++ "1" (str.++ "2" "")))))(re.++ (re.range "-" "/")(re.++ (re.union (re.++ (re.range "0" "0") (re.range "1" "9"))(re.union (re.++ (re.range "1" "2") (re.range "0" "9")) (re.++ (re.range "3" "3") (re.range "0" "1"))))(re.++ (re.range "-" "/") ((_ re.loop 4 4) (re.range "0" "9"))))))(re.union (re.++ (re.union (re.++ (re.range "0" "0") (re.union (re.range "4" "4")(re.union (re.range "6" "6") (re.range "9" "9")))) (str.to_re (str.++ "1" (str.++ "1" ""))))(re.++ (re.range "-" "/")(re.++ (re.union (re.++ (re.range "0" "0") (re.range "1" "9"))(re.union (re.++ (re.range "1" "2") (re.range "0" "9")) (str.to_re (str.++ "3" (str.++ "0" "")))))(re.++ (re.range "-" "/") ((_ re.loop 4 4) (re.range "0" "9"))))))(re.union (re.++ (str.to_re (str.++ "0" (str.++ "2" "")))(re.++ (re.range "-" "/")(re.++ (re.union (re.++ (re.range "0" "0") (re.range "1" "9"))(re.union (re.++ (re.range "1" "1") (re.range "0" "9")) (re.++ (re.range "2" "2") (re.range "0" "8"))))(re.++ (re.range "-" "/") ((_ re.loop 4 4) (re.range "0" "9"))))))(re.union (re.++ (str.to_re (str.++ "0" (str.++ "2" "")))(re.++ (re.range "-" "/")(re.++ (str.to_re (str.++ "2" (str.++ "9" "")))(re.++ (re.range "-" "/") (re.++ (re.union (re.range "0" "0")(re.union (re.range "2" "2")(re.union (re.range "4" "4")(re.union (re.range "6" "6") (re.range "8" "8")))))(re.++ (re.union (re.range "0" "0")(re.union (re.range "4" "4") (re.range "8" "8"))) (str.to_re (str.++ "0" (str.++ "0" "")))))))))(re.union (re.++ (str.to_re (str.++ "0" (str.++ "2" "")))(re.++ (re.range "-" "/")(re.++ (str.to_re (str.++ "2" (str.++ "9" "")))(re.++ (re.range "-" "/") (re.++ (re.union (re.range "1" "1")(re.union (re.range "3" "3")(re.union (re.range "5" "5")(re.union (re.range "7" "7") (re.range "9" "9")))))(re.++ (re.union (re.range "2" "2") (re.range "6" "6")) (str.to_re (str.++ "0" (str.++ "0" "")))))))))(re.union (re.++ (str.to_re (str.++ "0" (str.++ "2" "")))(re.++ (re.range "-" "/")(re.++ (str.to_re (str.++ "2" (str.++ "9" "")))(re.++ (re.range "-" "/") (re.++ (re.range "0" "9")(re.++ (re.range "0" "9")(re.++ (re.range "0" "0") (re.union (re.range "4" "4") (re.range "8" "8")))))))))(re.union (re.++ (str.to_re (str.++ "0" (str.++ "2" "")))(re.++ (re.range "-" "/")(re.++ (str.to_re (str.++ "2" (str.++ "9" "")))(re.++ (re.range "-" "/") (re.++ (re.range "0" "9")(re.++ (re.range "0" "9")(re.++ (re.union (re.range "2" "2")(re.union (re.range "4" "4")(re.union (re.range "6" "6") (re.range "8" "8")))) (re.union (re.range "0" "0")(re.union (re.range "4" "4") (re.range "8" "8")))))))))) (re.++ (str.to_re (str.++ "0" (str.++ "2" "")))(re.++ (re.range "-" "/")(re.++ (str.to_re (str.++ "2" (str.++ "9" "")))(re.++ (re.range "-" "/") (re.++ (re.range "0" "9")(re.++ (re.range "0" "9")(re.++ (re.union (re.range "1" "1")(re.union (re.range "3" "3")(re.union (re.range "5" "5")(re.union (re.range "7" "7") (re.range "9" "9"))))) (re.union (re.range "2" "2") (re.range "6" "6")))))))))))))))) (str.to_re "")))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "0" (str.++ "1" (str.++ "." (str.++ "0" (str.++ "9" (str.++ "." (str.++ "2" (str.++ "0" (str.++ "8" (str.++ "8" (str.++ " " (str.++ "7" (str.++ ":" (str.++ "4" (str.++ "9" ""))))))))))))))))

(define-fun Witness2 () String (str.++ "3" (str.++ "0" (str.++ "." (str.++ "7" (str.++ "." (str.++ "2" (str.++ "0" (str.++ "3" (str.++ "0" ""))))))))))

(assert (= regexA (re.union (re.++ (str.to_re "")(re.++ (re.++ (re.union (re.range "1" "9")(re.union (re.++ (re.range "0" "2") (re.range "0" "9")) (re.++ (re.range "3" "3") (re.range "0" "1"))))(re.++ (re.range "." ".")(re.++ (re.union (re.range "1" "9")(re.union (re.++ (re.range "0" "0") (re.range "0" "9")) (re.++ (re.range "1" "1") (re.range "0" "2"))))(re.++ (str.to_re (str.++ "." (str.++ "2" (str.++ "0" "")))) ((_ re.loop 2 2) (re.range "0" "9")))))) (str.to_re ""))) (re.++ (str.to_re "")(re.++ (re.++ (re.union (re.range "1" "9")(re.union (re.++ (re.range "0" "2") (re.range "0" "9")) (re.++ (re.range "3" "3") (re.range "0" "1"))))(re.++ (re.range "." ".")(re.++ (re.union (re.range "1" "9")(re.union (re.++ (re.range "0" "0") (re.range "0" "9")) (re.++ (re.range "1" "1") (re.range "0" "2"))))(re.++ (str.to_re (str.++ "." (str.++ "2" (str.++ "0" ""))))(re.++ ((_ re.loop 2 2) (re.range "0" "9"))(re.++ (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))(re.++ (re.union (re.range "1" "9")(re.union (re.++ (re.range "0" "1") (re.range "0" "9")) (re.++ (re.range "2" "2") (re.range "0" "3"))))(re.++ (re.range ":" ":")(re.++ (re.range "0" "5") (re.range "0" "9")))))))))) (str.to_re ""))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "1" (str.++ "9" (str.++ "2" (str.++ "." (str.++ "1" (str.++ "6" (str.++ "8" (str.++ "." (str.++ "0" (str.++ "." (str.++ "3" (str.++ "2" "")))))))))))))

(define-fun Witness2 () String (str.++ "1" (str.++ "9" (str.++ "2" (str.++ "." (str.++ "1" (str.++ "6" (str.++ "8" (str.++ "." (str.++ "0" (str.++ "." (str.++ "2" (str.++ "9" "")))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.++ (str.to_re (str.++ "1" (str.++ "9" (str.++ "2" (str.++ "." (str.++ "1" (str.++ "6" (str.++ "8" (str.++ "." (str.++ "0" (str.++ "." ""))))))))))) (re.union (re.++ (re.range "1" "1") (re.range "7" "9"))(re.union (re.++ (re.range "2" "2") (re.range "0" "9")) (re.++ (re.range "3" "3") (re.range "0" "2"))))) (str.to_re "")))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "9" (str.++ "7" (str.++ "8" (str.++ "8" (str.++ "0" (str.++ "2" (str.++ "2" (str.++ "9" (str.++ "8" (str.++ "8" (str.++ "8" (str.++ "8" (str.++ "0" (str.++ "2" (str.++ "2" (str.++ "9" (str.++ "5" (str.++ "8" (str.++ "8" (str.++ "4" (str.++ "0" (str.++ "1" (str.++ "0" (str.++ "6" (str.++ "8" (str.++ "7" (str.++ "0" (str.++ "8" (str.++ "0" (str.++ "2" (str.++ "2" (str.++ "9" "")))))))))))))))))))))))))))))))))

(define-fun Witness2 () String (str.++ "9" (str.++ "9" (str.++ "5" (str.++ "8" (str.++ "0" (str.++ "2" (str.++ "1" (str.++ "6" (str.++ "9" (str.++ "8" (str.++ "4" (str.++ "4" (str.++ "0" (str.++ "2" (str.++ "2" (str.++ "9" "")))))))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ ((_ re.loop 0 8) (re.union (re.++ ((_ re.loop 4 4) (re.range "0" "9")) (re.union (re.++ (re.union (re.++ (re.range "0" "0") (re.union (re.range "1" "1")(re.union (re.range "3" "3")(re.union (re.range "5" "5") (re.range "7" "8"))))) (re.++ (re.range "1" "1") (re.union (re.range "0" "0") (re.range "2" "2")))) (re.union (re.++ (re.range "0" "0") (re.range "1" "9"))(re.union (re.++ (re.range "1" "2") (re.range "0" "9")) (re.++ (re.range "3" "3") (re.range "0" "1")))))(re.union (re.++ (re.union (re.++ (re.range "0" "0") (re.union (re.range "1" "1") (re.range "3" "9"))) (re.++ (re.range "1" "1") (re.range "0" "2"))) (re.union (re.++ (re.range "0" "0") (re.range "1" "9"))(re.union (re.++ (re.range "1" "2") (re.range "0" "9")) (str.to_re (str.++ "3" (str.++ "0" "")))))) (re.++ (str.to_re (str.++ "0" (str.++ "2" ""))) (re.union (re.++ (re.range "0" "0") (re.range "1" "9"))(re.union (re.++ (re.range "1" "1") (re.range "0" "9")) (re.++ (re.range "2" "2") (re.range "0" "8")))))))) (re.++ (re.union (re.++ ((_ re.loop 2 2) (re.range "0" "9"))(re.++ (re.union (re.range "0" "0")(re.union (re.range "2" "2")(re.union (re.range "4" "4")(re.union (re.range "6" "6") (re.range "8" "8"))))) (re.union (re.range "0" "0")(re.union (re.range "4" "4") (re.range "8" "8"))))) (re.++ ((_ re.loop 2 2) (re.range "0" "9"))(re.++ (re.union (re.range "1" "1")(re.union (re.range "3" "3")(re.union (re.range "5" "5")(re.union (re.range "7" "7") (re.range "9" "9"))))) (re.union (re.range "2" "2") (re.range "6" "6"))))) (str.to_re (str.++ "0" (str.++ "2" (str.++ "2" (str.++ "9" "")))))))) (str.to_re "")))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "&" (str.++ "q" (str.++ "u" (str.++ "o" (str.++ "t" (str.++ ";" (str.++ "#" (str.++ "." (str.++ "\u{c4}" (str.++ "\u{f3}" (str.++ "?" (str.++ "&" (str.++ "q" (str.++ "u" (str.++ "o" (str.++ "t" (str.++ ";" (str.++ "@" (str.++ "9" (str.++ "-" (str.++ "\u{5c}" (str.++ "\u{d6}" (str.++ "8" (str.++ "-" (str.++ "\u{5c}" (str.++ "\u{90}" (str.++ "J" (str.++ "\u{aa}" (str.++ "\u{5c}" (str.++ ")" (str.++ "4" (str.++ "\u{5c}" (str.++ "\u{ef}" (str.++ "\u{aa}" (str.++ "2" (str.++ "." (str.++ "_" (str.++ "a" (str.++ "-" (str.++ "-" (str.++ "\u{aa}" (str.++ "-" "")))))))))))))))))))))))))))))))))))))))))))

(define-fun Witness2 () String (str.++ "&" (str.++ "q" (str.++ "u" (str.++ "o" (str.++ "t" (str.++ ";" (str.++ "&" (str.++ "\u{f2}" (str.++ "\u{e5}" (str.++ "&" (str.++ "q" (str.++ "u" (str.++ "o" (str.++ "t" (str.++ ";" (str.++ "@" (str.++ "-" (str.++ "\u{5c}" (str.++ "7" (str.++ "2" (str.++ "\u{ef}" (str.++ "." (str.++ "\u{c2}" (str.++ "\u{ee}" (str.++ "n" (str.++ "P" "")))))))))))))))))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.union (re.++ (re.+ (re.union (re.range "!" "!")(re.union (re.range "#" "'")(re.union (re.range "*" "+")(re.union (re.range "-" "-")(re.union (re.range "/" "9")(re.union (re.range ";" ";")(re.union (re.range "=" "=")(re.union (re.range "?" "?")(re.union (re.range "A" "Z")(re.union (re.range "^" "~")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))))))))) (re.* (re.++ (re.range "." ".") (re.+ (re.union (re.range "!" "!")(re.union (re.range "#" "'")(re.union (re.range "*" "+")(re.union (re.range "-" "-")(re.union (re.range "/" "9")(re.union (re.range ";" ";")(re.union (re.range "=" "=")(re.union (re.range "?" "?")(re.union (re.range "A" "Z")(re.union (re.range "^" "~")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))))))))))) (re.++ (str.to_re (str.++ "&" (str.++ "q" (str.++ "u" (str.++ "o" (str.++ "t" (str.++ ";" "")))))))(re.++ (re.++ (re.+ (re.union (re.range " " "!")(re.union (re.range "#" "'")(re.union (re.range "*" "+")(re.union (re.range "-" "-")(re.union (re.range "/" "9")(re.union (re.range ";" ";")(re.union (re.range "=" "=")(re.union (re.range "?" "?")(re.union (re.range "A" "Z")(re.union (re.range "^" "~")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))))))))) (re.* (re.++ (re.range "." ".") (re.+ (re.union (re.range " " "!")(re.union (re.range "#" "'")(re.union (re.range "*" "+")(re.union (re.range "-" "-")(re.union (re.range "/" "9")(re.union (re.range ";" ";")(re.union (re.range "=" "=")(re.union (re.range "?" "?")(re.union (re.range "A" "Z")(re.union (re.range "^" "~")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))))))))))) (str.to_re (str.++ "&" (str.++ "q" (str.++ "u" (str.++ "o" (str.++ "t" (str.++ ";" ""))))))))))(re.++ (re.range "@" "@")(re.++ ((_ re.loop 1 63) (re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))))(re.++ (re.* (re.++ (re.range "\u{5c}" "\u{5c}")(re.++ (re.union (re.range "\u{00}" "\u{09}") (re.range "\u{0b}" "\u{ff}")) ((_ re.loop 1 63) (re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))))))(re.++ (re.++ (re.range "." ".") ((_ re.loop 2 6) (re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))))) (str.to_re "")))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "0" (str.++ "8" (str.++ "1" (str.++ "7" (str.++ "\u{a0}" (str.++ "2" (str.++ "\u{85}" (str.++ "0" (str.++ "2" ""))))))))))

(define-fun Witness2 () String (str.++ "7" (str.++ "9" (str.++ "1" (str.++ "9" (str.++ "\u{a0}" (str.++ "2" (str.++ "\u{85}" (str.++ "0" (str.++ "2" (str.++ "\u{85}" (str.++ "9" (str.++ ":" (str.++ "0" (str.++ "8" "")))))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.union (re.++ ((_ re.loop 2 2) (re.range "0" "9"))(re.++ (re.union (re.++ (re.union (re.range "0" "0")(re.union (re.range "2" "2")(re.union (re.range "4" "4")(re.union (re.range "6" "6") (re.range "8" "8"))))) (re.union (re.range "0" "0")(re.union (re.range "4" "4") (re.range "8" "8")))) (re.++ (re.union (re.range "1" "1")(re.union (re.range "3" "3")(re.union (re.range "5" "5")(re.union (re.range "7" "7") (re.range "9" "9"))))) (re.union (re.range "2" "2") (re.range "6" "6"))))(re.++ (re.opt (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "-" "-")(re.union (re.range "/" "/")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))))) (re.union (re.++ (re.union (re.++ (re.opt (re.range "0" "0")) (re.union (re.range "1" "1")(re.union (re.range "3" "3")(re.union (re.range "5" "5") (re.range "7" "8"))))) (re.++ (re.range "1" "1") (re.union (re.range "0" "0") (re.range "2" "2"))))(re.++ (re.opt (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "-" "-")(re.union (re.range "/" "/")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))))) (re.union (re.++ (re.opt (re.range "0" "0")) (re.range "1" "9"))(re.union (re.++ (re.range "1" "2") (re.range "0" "9")) (re.++ (re.range "3" "3") (re.range "0" "1"))))))(re.union (re.++ (re.union (re.++ (re.opt (re.range "0" "0")) (re.union (re.range "4" "4")(re.union (re.range "6" "6") (re.range "9" "9")))) (str.to_re (str.++ "1" (str.++ "1" ""))))(re.++ (re.opt (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "-" "-")(re.union (re.range "/" "/")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))))) (re.union (re.++ (re.opt (re.range "0" "0")) (re.range "1" "9"))(re.union (re.++ (re.range "1" "2") (re.range "0" "9")) (str.to_re (str.++ "3" (str.++ "0" ""))))))) (re.++ (re.opt (re.range "0" "0"))(re.++ (re.range "2" "2")(re.++ (re.opt (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "-" "-")(re.union (re.range "/" "/")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))))) (re.union (re.++ (re.opt (re.range "0" "0")) (re.range "1" "9")) (re.++ (re.range "1" "2") (re.range "0" "9"))))))))))) (re.++ ((_ re.loop 2 2) (re.range "0" "9"))(re.++ (re.union (re.++ (re.union (re.range "0" "0")(re.union (re.range "2" "2")(re.union (re.range "4" "4")(re.union (re.range "6" "6") (re.range "8" "8"))))) (re.union (re.range "1" "3")(re.union (re.range "5" "7") (re.range "9" "9")))) (re.++ (re.union (re.range "1" "1")(re.union (re.range "3" "3")(re.union (re.range "5" "5")(re.union (re.range "7" "7") (re.range "9" "9"))))) (re.union (re.range "0" "1")(re.union (re.range "3" "5") (re.range "7" "9")))))(re.++ (re.opt (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "-" "-")(re.union (re.range "/" "/")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))))) (re.union (re.++ (re.union (re.++ (re.opt (re.range "0" "0")) (re.union (re.range "1" "1")(re.union (re.range "3" "3")(re.union (re.range "5" "5") (re.range "7" "8"))))) (re.++ (re.range "1" "1") (re.union (re.range "0" "0") (re.range "2" "2"))))(re.++ (re.opt (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "-" "-")(re.union (re.range "/" "/")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))))) (re.union (re.++ (re.opt (re.range "0" "0")) (re.range "1" "9"))(re.union (re.++ (re.range "1" "2") (re.range "0" "9")) (re.++ (re.range "3" "3") (re.range "0" "1"))))))(re.union (re.++ (re.union (re.++ (re.opt (re.range "0" "0")) (re.union (re.range "4" "4")(re.union (re.range "6" "6") (re.range "9" "9")))) (str.to_re (str.++ "1" (str.++ "1" ""))))(re.++ (re.opt (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "-" "-")(re.union (re.range "/" "/")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))))) (re.union (re.++ (re.opt (re.range "0" "0")) (re.range "1" "9"))(re.union (re.++ (re.range "1" "2") (re.range "0" "9")) (str.to_re (str.++ "3" (str.++ "0" ""))))))) (re.++ (re.opt (re.range "0" "0"))(re.++ (re.range "2" "2")(re.++ (re.opt (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "-" "-")(re.union (re.range "/" "/")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))))) (re.union (re.++ (re.opt (re.range "0" "0")) (re.range "1" "9"))(re.union (re.++ (re.range "1" "1") (re.range "0" "9")) (re.++ (re.range "2" "2") (re.range "0" "8")))))))))))))(re.++ (re.opt (re.++ (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))) (re.++ (re.union (re.++ (re.opt (re.range "0" "0")) (re.range "1" "9"))(re.union (re.++ (re.range "1" "1") (re.range "0" "9")) (re.++ (re.range "2" "2") (re.range "0" "3"))))(re.++ (re.range ":" ":")(re.++ (re.++ (re.range "0" "5") (re.range "0" "9")) (re.opt (re.union (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))) (re.++ (re.range ":" ":") (re.++ (re.range "0" "5") (re.range "0" "9")))))))))) (str.to_re ""))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "(" (str.++ "0" (str.++ "1" (str.++ "\u{85}" (str.++ "9" (str.++ "9" (str.++ ")" (str.++ "\u{85}" (str.++ "2" (str.++ "9" (str.++ "\u{85}" (str.++ "9" (str.++ "\u{85}" (str.++ "8" (str.++ "-" (str.++ "8" "")))))))))))))))))

(define-fun Witness2 () String (str.++ "(" (str.++ "9" (str.++ "7" (str.++ "\u{85}" (str.++ "1" (str.++ "\u{85}" (str.++ "3" (str.++ ")" (str.++ "\u{a0}" (str.++ "0" (str.++ "\u{a0}" (str.++ "9" (str.++ " " (str.++ "9" (str.++ "-" (str.++ "0" (str.++ "9" (str.++ "9" "")))))))))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.range "(" "(")(re.++ ((_ re.loop 1 2) (re.range "0" "9"))(re.++ ((_ re.loop 1 2) (re.++ (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))) ((_ re.loop 1 2) (re.range "0" "9"))))(re.++ (re.range ")" ")")(re.++ (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))(re.++ (re.++ ((_ re.loop 1 2) (re.range "0" "9")) ((_ re.loop 1 2) (re.++ (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))) ((_ re.loop 1 2) (re.range "0" "9")))))(re.++ (re.opt (re.++ (re.range "-" "-") ((_ re.loop 1 4) (re.range "0" "9")))) (str.to_re "")))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "0" (str.++ "8" (str.++ "-" (str.++ "1" (str.++ "-" (str.++ "8" (str.++ "8" ""))))))))

(define-fun Witness2 () String (str.++ "4" (str.++ "." (str.++ "1" (str.++ "1" (str.++ "-" (str.++ "3" (str.++ "9" (str.++ "8" (str.++ "0" ""))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.union (re.++ (re.opt (re.range "0" "0")) (re.range "1" "9"))(re.union (re.++ (re.union (re.range "1" "2") (re.range "|" "|")) (re.range "0" "9")) (re.++ (re.range "3" "3") (re.union (re.range "0" "1") (re.range "|" "|")))))(re.++ (re.range "-" "/")(re.++ (re.union (re.++ (re.opt (re.range "0" "0")) (re.range "1" "9")) (re.++ (re.range "1" "1") (re.range "0" "2")))(re.++ (re.range "-" "/")(re.++ (re.union ((_ re.loop 4 4) (re.range "0" "9")) ((_ re.loop 2 2) (re.range "0" "9"))) (str.to_re "")))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "0" (str.++ "." (str.++ "0" (str.++ "9" "")))))

(define-fun Witness2 () String (str.++ "9" (str.++ "." (str.++ "5" ""))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.++ (re.opt (re.range "0" "9"))(re.++ (re.range "0" "9")(re.++ (re.range "." ".")(re.++ (re.opt (re.range "0" "9")) (re.range "0" "9"))))) (str.to_re "")))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "9" (str.++ "9" (str.++ "1" (str.++ "1" (str.++ "8" (str.++ "3" (str.++ "0" (str.++ "3" (str.++ "9" (str.++ "9" (str.++ "5" ""))))))))))))

(define-fun Witness2 () String (str.++ "9" (str.++ "9" (str.++ "9" (str.++ "2" (str.++ "9" (str.++ "3" (str.++ "8" (str.++ "9" (str.++ "8" (str.++ "4" (str.++ "8" ""))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.+ (re.range "9" "9"))(re.++ (re.+ (re.union (re.range "1" "3") (re.range "6" "6")))(re.++ ((_ re.loop 7 7) (re.range "0" "9")) (str.to_re "")))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "3" (str.++ "2" (str.++ "7" (str.++ "6" (str.++ "6" ""))))))

(define-fun Witness2 () String (str.++ "3" (str.++ "0" (str.++ "8" (str.++ "7" (str.++ "0" ""))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.union (re.++ (str.to_re (str.++ "3" (str.++ "2" (str.++ "7" (str.++ "6" ""))))) (re.range "0" "7"))(re.union (re.++ (str.to_re (str.++ "3" (str.++ "2" (str.++ "7" ""))))(re.++ (re.range "0" "5") (re.range "0" "9")))(re.union (re.++ (str.to_re (str.++ "3" (str.++ "2" "")))(re.++ (re.range "0" "6") ((_ re.loop 2 2) (re.range "0" "9"))))(re.union (re.++ (re.range "3" "3")(re.++ (re.range "0" "1") ((_ re.loop 3 3) (re.range "0" "9"))))(re.union (re.++ (re.range "1" "2") ((_ re.loop 4 4) (re.range "0" "9")))(re.union (re.++ (re.range "1" "9") ((_ re.loop 3 3) (re.range "0" "9")))(re.union (re.++ (re.range "1" "9") ((_ re.loop 2 2) (re.range "0" "9")))(re.union (re.++ (re.range "1" "9") (re.range "0" "9")) (re.range "0" "9"))))))))) (str.to_re "")))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "n" (str.++ "q" (str.++ " " (str.++ "5" (str.++ "1" (str.++ " " (str.++ "C" (str.++ "Z" (str.++ "Z" ""))))))))))

(define-fun Witness2 () String (str.++ "q" (str.++ "F" (str.++ " " (str.++ "2" (str.++ "8" (str.++ "B" (str.++ "z" (str.++ "T" "")))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ ((_ re.loop 2 2) (re.union (re.range "A" "Z") (re.range "a" "z")))(re.++ (re.opt (re.range " " " "))(re.++ ((_ re.loop 2 2) (re.range "0" "9"))(re.++ (re.opt (re.range " " " "))(re.++ ((_ re.loop 3 3) (re.union (re.range "A" "Z") (re.range "a" "z"))) (str.to_re "")))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "3" (str.++ "6" (str.++ "0" (str.++ "0" (str.++ "0" (str.++ "2" (str.++ "2" (str.++ "9" "")))))))))

(define-fun Witness2 () String (str.++ "8" (str.++ "4" (str.++ "0" (str.++ "0" (str.++ "0" (str.++ "2" (str.++ "2" (str.++ "9" "")))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.union (re.++ (re.range "2" "9")(re.++ ((_ re.loop 3 3) (re.range "0" "9")) (re.union (re.++ (re.union (re.++ (re.range "0" "0") (re.range "1" "9")) (re.++ (re.range "1" "1") (re.range "0" "2"))) (re.union (re.++ (re.range "0" "0") (re.range "1" "9"))(re.union (re.++ (re.range "1" "1") (re.range "0" "9")) (re.++ (re.range "2" "2") (re.range "0" "8")))))(re.union (re.++ (re.union (re.++ (re.range "0" "0") (re.union (re.range "1" "1") (re.range "3" "9"))) (re.++ (re.range "1" "1") (re.range "0" "2"))) (re.union (str.to_re (str.++ "2" (str.++ "9" ""))) (str.to_re (str.++ "3" (str.++ "0" ""))))) (re.++ (re.union (re.++ (re.range "0" "0") (re.union (re.range "1" "1")(re.union (re.range "3" "3")(re.union (re.range "5" "5") (re.range "7" "8"))))) (re.++ (re.range "1" "1") (re.union (re.range "0" "0") (re.range "2" "2")))) (str.to_re (str.++ "3" (str.++ "1" "")))))))) (re.++ (re.union (re.++ (re.++ (re.range "2" "9") (re.range "0" "9")) (re.union (re.++ (re.range "0" "0") (re.union (re.range "4" "4") (re.range "8" "8")))(re.union (re.++ (re.union (re.range "2" "2")(re.union (re.range "4" "4")(re.union (re.range "6" "6") (re.range "8" "8")))) (re.union (re.range "0" "0")(re.union (re.range "4" "4") (re.range "8" "8")))) (re.++ (re.union (re.range "1" "1")(re.union (re.range "3" "3")(re.union (re.range "5" "5")(re.union (re.range "7" "7") (re.range "9" "9"))))) (re.union (re.range "2" "2") (re.range "6" "6")))))) (re.++ (re.union (re.++ (re.union (re.range "2" "2")(re.union (re.range "4" "4")(re.union (re.range "6" "6") (re.range "8" "8")))) (re.union (re.range "0" "0")(re.union (re.range "4" "4") (re.range "8" "8")))) (re.++ (re.union (re.range "3" "3")(re.union (re.range "5" "5")(re.union (re.range "7" "7") (re.range "9" "9")))) (re.union (re.range "2" "2") (re.range "6" "6")))) (str.to_re (str.++ "0" (str.++ "0" ""))))) (str.to_re (str.++ "0" (str.++ "2" (str.++ "2" (str.++ "9" ""))))))) (str.to_re "")))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "9" (str.++ "1" (str.++ "9" (str.++ "2" "")))))

(define-fun Witness2 () String (str.++ "4" (str.++ "8" (str.++ "0" (str.++ "8" "")))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.range "1" "9")(re.++ ((_ re.loop 3 3) (re.range "0" "9")) (str.to_re ""))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "<" (str.++ "T" (str.++ "D" (str.++ "\u{a0}" (str.++ "i" (str.++ "\u{b5}" (str.++ ">" (str.++ "<" (str.++ "/" (str.++ "T" (str.++ "D" (str.++ ">" "")))))))))))))

(define-fun Witness2 () String (str.++ "<" (str.++ "T" (str.++ "D" (str.++ " " (str.++ "\u{85}" (str.++ ">" (str.++ "\u{8a}" (str.++ "<" (str.++ "/" (str.++ "t" (str.++ "d" (str.++ ">" "")))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.range "<" "<")(re.++ (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (re.union (str.to_re (str.++ "t" (str.++ "d" ""))) (str.to_re (str.++ "T" (str.++ "D" ""))))(re.++ (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (re.* (re.union (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))) (re.union (re.range "\u{00}" "/")(re.union (re.range ":" "@")(re.union (re.range "[" "^")(re.union (re.range "`" "`")(re.union (re.range "{" "\u{a9}")(re.union (re.range "\u{ab}" "\u{b4}")(re.union (re.range "\u{b6}" "\u{b9}")(re.union (re.range "\u{bb}" "\u{bf}")(re.union (re.range "\u{d7}" "\u{d7}") (re.range "\u{f7}" "\u{f7}"))))))))))))(re.++ (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (re.range ">" ">")(re.++ (re.* (re.union (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))) (re.union (re.range "\u{00}" "/")(re.union (re.range ":" "@")(re.union (re.range "[" "^")(re.union (re.range "`" "`")(re.union (re.range "{" "\u{a9}")(re.union (re.range "\u{ab}" "\u{b4}")(re.union (re.range "\u{b6}" "\u{b9}")(re.union (re.range "\u{bb}" "\u{bf}")(re.union (re.range "\u{d7}" "\u{d7}") (re.range "\u{f7}" "\u{f7}"))))))))))))(re.++ (str.to_re (str.++ "<" (str.++ "/" "")))(re.++ (re.union (str.to_re (str.++ "t" (str.++ "d" ""))) (str.to_re (str.++ "T" (str.++ "D" ""))))(re.++ (re.range ">" ">") (str.to_re "")))))))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "\u{85}" (str.++ "\u{a0}" (str.++ "\u{0d}" (str.++ "\u{a0}" (str.++ "U" ""))))))

(define-fun Witness2 () String (str.++ "\u{85}" (str.++ "\u{85}" (str.++ "Z" (str.++ " " (str.++ "\u{a0}" ""))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (re.+ (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "," ",")(re.union (re.range "A" "Z")(re.union (re.range "a" "z")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))))))(re.++ (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))) (str.to_re "")))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "f" (str.++ "t" (str.++ "p" (str.++ "s" (str.++ ":" (str.++ "/" (str.++ "/" (str.++ "]" (str.++ "\u{16}" (str.++ "\u{e4}" (str.++ "\u{c3}" (str.++ "\u{a8}" (str.++ "8" (str.++ "\u{c0}" (str.++ "\u{d6}" (str.++ "\u{82}" "")))))))))))))))))

(define-fun Witness2 () String (str.++ "f" (str.++ "t" (str.++ "p" (str.++ "s" (str.++ ":" (str.++ "/" (str.++ "/" (str.++ "}" (str.++ "\u{a3}" (str.++ "\u{d0}" (str.++ ";" (str.++ "5" (str.++ "\u{d0}" ""))))))))))))))

(assert (= regexA (re.++ (re.union (str.to_re (str.++ "m" (str.++ "a" (str.++ "i" (str.++ "l" (str.++ "t" (str.++ "o" (str.++ ":" "")))))))) (re.++ (re.union (str.to_re (str.++ "n" (str.++ "e" (str.++ "w" (str.++ "s" ""))))) (re.++ (re.union (str.to_re (str.++ "h" (str.++ "t" ""))) (re.range "f" "f"))(re.++ (str.to_re (str.++ "t" (str.++ "p" ""))) (re.opt (re.range "s" "s"))))) (str.to_re (str.++ ":" (str.++ "/" (str.++ "/" "")))))) (re.+ (re.union (re.range "\u{00}" "\u{08}")(re.union (re.range "\u{0e}" "\u{1f}")(re.union (re.range "!" "\u{84}")(re.union (re.range "\u{86}" "\u{9f}") (re.range "\u{a1}" "\u{ff}")))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ ":" (str.++ "R" "")))

(define-fun Witness2 () String (str.++ ":" (str.++ "\u{ca}" (str.++ "\u{c4}" ""))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.union (re.range "." "/")(re.union (re.range ":" ":")(re.union (re.range "h" "h")(re.union (re.range "p" "p")(re.union (re.range "t" "t")(re.union (re.range "w" "w") (re.range "|" "|")))))))(re.++ (re.+ (re.union (re.range "\u{00}" "\u{08}")(re.union (re.range "\u{0e}" "\u{1f}")(re.union (re.range "!" "\u{84}")(re.union (re.range "\u{86}" "\u{9f}") (re.range "\u{a1}" "\u{ff}")))))) (str.to_re ""))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "9" (str.++ "0" (str.++ "9" (str.++ "8" (str.++ " " (str.++ "W" (str.++ "n" ""))))))))

(define-fun Witness2 () String (str.++ "1" (str.++ "1" (str.++ "1" (str.++ "9" (str.++ "m" (str.++ "h" "")))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.range "1" "9")(re.++ ((_ re.loop 3 3) (re.range "0" "9"))(re.++ (re.opt (re.range " " " "))(re.++ (re.union ((_ re.loop 2 2) (re.union (re.range "A" "R")(re.union (re.range "T" "Z")(re.union (re.range "a" "r") (re.range "t" "z"))))) (re.++ (re.union (re.range "S" "S") (re.range "s" "s")) (re.union (re.range "\u{00}" "@")(re.union (re.range "B" "C")(re.union (re.range "E" "R")(re.union (re.range "T" "`")(re.union (re.range "b" "c")(re.union (re.range "e" "r") (re.range "t" "\u{ff}"))))))))) (str.to_re ""))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "2" (str.++ "9" (str.++ "5" (str.++ "4" (str.++ "9" (str.++ "9" (str.++ "9" (str.++ "7" (str.++ "8" ""))))))))))

(define-fun Witness2 () String (str.++ "3" (str.++ "2" (str.++ "4" (str.++ "8" (str.++ "7" (str.++ "8" (str.++ "2" (str.++ "8" (str.++ "3" ""))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.union (re.++ (re.range "0" "0") (re.range "0" "9"))(re.union (re.++ (re.range "1" "1") (re.range "0" "2"))(re.union (re.++ (re.range "2" "2") (re.range "1" "9"))(re.union (re.++ (re.range "3" "3") (re.range "0" "2"))(re.union (re.++ (re.range "6" "6") (re.range "1" "9"))(re.union (re.++ (re.range "7" "7") (re.range "0" "2")) (str.to_re (str.++ "8" (str.++ "0" "")))))))))(re.++ ((_ re.loop 7 7) (re.range "0" "9")) (str.to_re ""))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "6" (str.++ "9" (str.++ "9" (str.++ "6" (str.++ "-" (str.++ "0" (str.++ "4" (str.++ "-" (str.++ "2" (str.++ "5" "")))))))))))

(define-fun Witness2 () String (str.++ "8" (str.++ "4" (str.++ "9" (str.++ "8" (str.++ "1" (str.++ "1" (str.++ "0" (str.++ "8" (str.++ "T" (str.++ "2" (str.++ "0" (str.++ ":" (str.++ "5" (str.++ "4" (str.++ ":" (str.++ "4" (str.++ "9" (str.++ "-" (str.++ "1" (str.++ "1" (str.++ ":" (str.++ "4" (str.++ "5" ""))))))))))))))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.++ ((_ re.loop 4 4) (re.range "0" "9")) (re.opt (re.++ (re.opt (re.range "-" "-"))(re.++ (re.union (re.++ (re.range "0" "0") (re.range "1" "9")) (re.++ (re.range "1" "1") (re.range "0" "2"))) (re.opt (re.++ (re.opt (re.range "-" "-"))(re.++ (re.union (re.++ (re.range "0" "0") (re.range "1" "9"))(re.union (re.++ (re.range "1" "2") (re.range "0" "9")) (re.++ (re.range "3" "3") (re.range "0" "1")))) (re.opt (re.++ (re.range "T" "T")(re.++ (re.union (re.++ (str.to_re (str.++ "2" (str.++ "4" (str.++ ":" (str.++ "0" (str.++ "0" "")))))) (re.opt (re.++ (str.to_re (str.++ ":" (str.++ "0" (str.++ "0" "")))) (re.opt (re.++ (re.range "." ".") (re.+ (re.range "0" "0"))))))) (re.++ (re.++ (re.union (re.++ (re.range "0" "1") (re.range "0" "9")) (re.++ (re.range "2" "2") (re.range "0" "3")))(re.++ (re.range ":" ":")(re.++ (re.range "0" "5") (re.range "0" "9")))) (re.opt (re.++ (re.range ":" ":")(re.++ (re.range "0" "5")(re.++ (re.range "0" "9") (re.opt (re.++ (re.range "." ".") (re.+ (re.range "0" "9")))))))))) (re.union (re.++ (re.union (re.range "+" "+") (re.range "-" "-")) (re.union (str.to_re (str.++ "1" (str.++ "4" (str.++ ":" (str.++ "0" (str.++ "0" "")))))) (re.++ (re.union (re.++ (re.range "0" "0") (re.range "0" "9")) (re.++ (re.range "1" "1") (re.range "0" "3")))(re.++ (re.range ":" ":")(re.++ (re.range "0" "5") (re.range "0" "9")))))) (re.range "Z" "Z")))))))))))) (str.to_re "")))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "\u{ba}" (str.++ "\u{ba}" (str.++ "\u{ee}" (str.++ "@" (str.++ "7" (str.++ "\u{fd}" (str.++ "-" (str.++ "." (str.++ "4" (str.++ "Y" (str.++ "\u{ee}" ""))))))))))))

(define-fun Witness2 () String (str.++ "\u{aa}" (str.++ "\u{b5}" (str.++ "." (str.++ "@" (str.++ "\u{ba}" (str.++ "\u{f9}" (str.++ "8" (str.++ "." (str.++ "A" (str.++ "0" "")))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.++ ((_ re.loop 3 3) (re.union (re.range "-" ".")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))) (re.* (re.union (re.range "-" ".")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))))(re.++ (re.range "@" "@")(re.++ (re.++ ((_ re.loop 3 3) (re.union (re.range "-" ".")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))) (re.* (re.union (re.range "-" ".")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))))(re.++ (re.range "." ".")(re.++ ((_ re.loop 2 4) (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))) (str.to_re "")))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "." ""))

(define-fun Witness2 () String (str.++ "." ""))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.range "." ".")(re.++ (re.union (re.++ (re.union (re.range "R" "R") (re.range "r" "r")) (re.union (re.++ (re.union (re.range "A" "A") (re.range "a" "a")) (re.union (re.range "R" "R") (re.range "r" "r"))) ((_ re.loop 2 2) (re.range "0" "9")))) (re.opt ((_ re.loop 3 3) (re.range "0" "9")))) (str.to_re ""))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "A" (str.++ "-" (str.++ "8" ""))))

(define-fun Witness2 () String (str.++ "\u{f9}" (str.++ "5" (str.++ "8" (str.++ "9" (str.++ "8" ""))))))

(assert (= regexA (re.++ (re.union (re.++ ((_ re.loop 1 6) (re.range "0" "9"))(re.++ (re.range "-" "-") ((_ re.loop 1 6) (re.range "0" "9"))))(re.union (re.++ ((_ re.loop 1 6) (re.range "0" "9"))(re.++ (re.range "\u{5c}" "\u{5c}") ((_ re.loop 1 6) (re.range "0" "9"))))(re.union (re.++ ((_ re.loop 1 6) (re.range "0" "9"))(re.++ (re.range "/" "/") ((_ re.loop 1 6) (re.range "0" "9"))))(re.union (re.++ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))(re.++ (re.opt (re.range "-" "-")) ((_ re.loop 1 6) (re.range "0" "9"))))(re.union (re.++ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))(re.++ (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))) ((_ re.loop 1 6) (re.range "0" "9"))))(re.union (re.++ (re.++ (re.range "P" "P")(re.++ (re.opt (re.range "." "."))(re.++ (re.range "O" "O")(re.++ (re.opt (re.range "." ".")) (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))))))(re.++ (re.union (str.to_re (str.++ "B" (str.++ "O" (str.++ "X" "")))) (str.to_re (str.++ "B" (str.++ "o" (str.++ "x" ""))))) (re.++ (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))) ((_ re.loop 1 6) (re.range "0" "9"))))) (re.opt (re.++ (re.union ((_ re.loop 2 2) (re.range "R" "R")) (str.to_re (str.++ "H" (str.++ "C" ""))))(re.++ (re.++ (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))(re.++ ((_ re.loop 1 6) (re.range "0" "9")) (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))))(re.++ (re.union (str.to_re (str.++ "B" (str.++ "O" (str.++ "X" "")))) (str.to_re (str.++ "B" (str.++ "o" (str.++ "x" ""))))) (re.++ (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))) ((_ re.loop 1 6) (re.range "0" "9"))))))))))))) (str.to_re ""))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "4" (str.++ "9" (str.++ "1" (str.++ "9" (str.++ "-" (str.++ "9" (str.++ "9" (str.++ "9" (str.++ "8" (str.++ "8" (str.++ "8" (str.++ "8" (str.++ "3" (str.++ "2" (str.++ "2" (str.++ "2" (str.++ "8" ""))))))))))))))))))

(define-fun Witness2 () String (str.++ "4" (str.++ "8" (str.++ "4" (str.++ "4" (str.++ "1" (str.++ "9" (str.++ "9" (str.++ "9" (str.++ "1" (str.++ "8" (str.++ "8" (str.++ "0" (str.++ "-" (str.++ "9" (str.++ "4" (str.++ "9" (str.++ "9" ""))))))))))))))))))

(assert (= regexA (re.union (re.++ (str.to_re "")(re.++ (re.union (re.++ (re.range "4" "4") ((_ re.loop 3 3) (re.range "0" "9")))(re.union (re.++ (re.range "5" "5")(re.++ (re.range "1" "5") ((_ re.loop 2 2) (re.range "0" "9")))) (str.to_re (str.++ "6" (str.++ "0" (str.++ "1" (str.++ "1" "")))))))(re.++ (re.opt (re.range "-" "-"))(re.++ ((_ re.loop 4 4) (re.range "0" "9"))(re.++ (re.opt (re.range "-" "-"))(re.++ ((_ re.loop 4 4) (re.range "0" "9"))(re.++ (re.opt (re.range "-" "-")) ((_ re.loop 4 4) (re.range "0" "9"))))))))) (re.++ (re.range "3" "3")(re.++ (re.union (re.range "," ",")(re.union (re.range "4" "4") (re.range "7" "7")))(re.++ ((_ re.loop 13 13) (re.range "0" "9")) (str.to_re "")))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "0" (str.++ "1" (str.++ "/" (str.++ "1" (str.++ "2" (str.++ "/" (str.++ "2" (str.++ "0" (str.++ "9" (str.++ "1" "")))))))))))

(define-fun Witness2 () String (str.++ "0" (str.++ "8" (str.++ "/" (str.++ "1" (str.++ "2" (str.++ "/" (str.++ "1" (str.++ "9" (str.++ "8" (str.++ "9" "")))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.++ (re.union (re.union (re.++ (re.range "0" "0") (re.range "1" "9"))(re.union (re.++ (re.range "1" "2") (re.range "0" "9")) (re.++ (re.range "3" "3") (re.range "0" "1")))) (re.range "1" "9"))(re.++ (re.range "/" "/")(re.++ (re.union (re.union (re.++ (re.range "0" "0") (re.range "1" "9")) (re.++ (re.range "1" "1") (re.range "0" "2"))) (re.range "1" "9"))(re.++ (re.range "/" "/") (re.union ((_ re.loop 2 2) (re.range "0" "9")) (re.++ (re.union (str.to_re (str.++ "1" (str.++ "9" ""))) (re.++ (re.range "2" "2") (re.range "0" "0"))) ((_ re.loop 2 2) (re.range "0" "9")))))))) (str.to_re "")))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "5" (str.++ "8" (str.++ "\u{5c}" (str.++ "4" (str.++ "9" (str.++ "3" (str.++ "9" (str.++ "I" "")))))))))

(define-fun Witness2 () String (str.++ "Q" (str.++ "\u{5c}" (str.++ "8" (str.++ "8" "")))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z"))))(re.++ (re.range "\u{5c}" "\u{5c}")(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))) (str.to_re "")))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "R" (str.++ "m" (str.++ "8" (str.++ "4" (str.++ "0" (str.++ "0" (str.++ "8" (str.++ "8" "")))))))))

(define-fun Witness2 () String (str.++ "J" (str.++ "z" (str.++ "9" (str.++ "7" (str.++ "9" (str.++ "9" (str.++ "8" (str.++ "5" "")))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.++ ((_ re.loop 2 2) (re.union (re.range "A" "Z") (re.range "a" "z"))) ((_ re.loop 6 6) (re.range "0" "9"))) (str.to_re "")))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "1" (str.++ "8" (str.++ "8" (str.++ "." (str.++ "1" (str.++ "0" (str.++ "8" (str.++ "." (str.++ "1" (str.++ "9" (str.++ "9" (str.++ "." (str.++ "2" (str.++ "2" (str.++ "9" ""))))))))))))))))

(define-fun Witness2 () String (str.++ "0" (str.++ "3" (str.++ "." (str.++ "2" (str.++ "2" (str.++ "2" (str.++ "." (str.++ "4" (str.++ "." (str.++ "1" (str.++ "1" (str.++ "3" "")))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ ((_ re.loop 3 3) (re.++ (re.union (re.++ (re.opt (re.range "0" "1")) ((_ re.loop 1 2) (re.range "0" "9")))(re.union (re.++ (re.range "2" "2")(re.++ (re.range "0" "4") (re.range "0" "9"))) (re.++ (str.to_re (str.++ "2" (str.++ "5" ""))) (re.range "0" "5")))) (re.range "." ".")))(re.++ (re.union (re.++ (re.opt (re.range "0" "1")) ((_ re.loop 1 2) (re.range "0" "9")))(re.union (re.++ (re.range "2" "2")(re.++ (re.range "0" "4") (re.range "0" "9"))) (re.++ (str.to_re (str.++ "2" (str.++ "5" ""))) (re.range "0" "5")))) (str.to_re ""))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "z" ""))

(define-fun Witness2 () String (str.++ "2" (str.++ "5" (str.++ "K" (str.++ "I" "")))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.+ (re.union (re.union (re.range "A" "Z") (re.range "a" "z"))(re.union (re.++ (re.union (re.range "A" "Z") (re.range "a" "z")) (re.* (re.range "0" "9"))) (re.++ (re.* (re.range "0" "9")) (re.union (re.range "A" "Z") (re.range "a" "z")))))) (str.to_re "")))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "9" (str.++ "8" (str.++ "1" (str.++ "4" "")))))

(define-fun Witness2 () String (str.++ "7" (str.++ "9" (str.++ "1" (str.++ "7" "")))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.range "1" "9")(re.++ ((_ re.loop 3 3) (re.range "0" "9")) (str.to_re ""))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "1" (str.++ "0" (str.++ "." ""))))

(define-fun Witness2 () String (str.++ "-" (str.++ "1" (str.++ "1" (str.++ "." (str.++ "0" ""))))))

(assert (= regexA (re.union (re.++ (str.to_re "")(re.++ (re.++ (re.opt (re.range "-" "-"))(re.++ (re.opt (re.range "0" "9")) (re.opt (re.++ (re.range "." ".") ((_ re.loop 0 2) (re.range "0" "9")))))) (str.to_re "")))(re.union (re.++ (str.to_re "")(re.++ (re.++ (re.opt (re.range "-" "-"))(re.++ (re.++ (re.range "1" "1") (re.range "0" "1")) (re.opt (re.++ (re.range "." ".") ((_ re.loop 0 2) (re.range "0" "9")))))) (str.to_re ""))) (re.++ (str.to_re "")(re.++ (re.++ (re.opt (re.range "-" "-")) (re.++ (re.range "1" "1")(re.++ (re.range "0" "3") (re.++ (re.range "." ".") ((_ re.loop 0 2) (re.range "0" "0")))))) (str.to_re "")))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "w" (str.++ "w" (str.++ "w" (str.++ "W" (str.++ "W" (str.++ "W" (str.++ "w" (str.++ "w" (str.++ "w" (str.++ "w" (str.++ "w" (str.++ "w" (str.++ "W" (str.++ "W" (str.++ "W" (str.++ "W" (str.++ "W" (str.++ "W" (str.++ "W" (str.++ "W" (str.++ "W" (str.++ "w" (str.++ "w" (str.++ "w" (str.++ "." (str.++ "7" (str.++ "8" (str.++ "5" (str.++ "5" (str.++ "9" (str.++ "8" (str.++ "9" (str.++ "." (str.++ "/" (str.++ "\u{ff}" (str.++ "#" (str.++ "\u{ba}" (str.++ "/" (str.++ "/" (str.++ "/" (str.++ "/" ""))))))))))))))))))))))))))))))))))))))))))

(define-fun Witness2 () String (str.++ "W" (str.++ "W" (str.++ "W" (str.++ "w" (str.++ "w" (str.++ "w" (str.++ "w" (str.++ "w" (str.++ "w" (str.++ "W" (str.++ "W" (str.++ "W" (str.++ "w" (str.++ "w" (str.++ "w" (str.++ "w" (str.++ "w" (str.++ "w" (str.++ "w" (str.++ "w" (str.++ "w" (str.++ "w" (str.++ "w" (str.++ "w" (str.++ "w" (str.++ "w" (str.++ "w" (str.++ "w" (str.++ "w" (str.++ "w" (str.++ "w" (str.++ "w" (str.++ "w" (str.++ "." (str.++ "W" (str.++ "W" (str.++ "W" (str.++ "." (str.++ "w" (str.++ "w" (str.++ "w" (str.++ "W" (str.++ "W" (str.++ "W" (str.++ "." (str.++ "z" (str.++ "." (str.++ "8" (str.++ "." (str.++ "o" (str.++ "q" (str.++ "/" (str.++ "6" (str.++ "/" (str.++ "D" ""))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.opt (re.++ (re.++ (re.union (re.range "H" "H") (re.range "h" "h")) (re.union (re.range "T" "T") (re.range "t" "t")))(re.++ (re.union (re.range "T" "T") (re.range "t" "t"))(re.++ (re.union (re.range "P" "P") (re.range "p" "p"))(re.++ (re.opt (re.union (re.range "S" "S") (re.range "s" "s"))) (str.to_re (str.++ ":" (str.++ "/" (str.++ "/" "")))))))))(re.++ (re.+ (re.++ (re.+ (re.union (str.to_re (str.++ "w" (str.++ "w" (str.++ "w" "")))) (str.to_re (str.++ "W" (str.++ "W" (str.++ "W" "")))))) (re.range "." ".")))(re.++ (re.union (re.++ ((_ re.loop 3 3) ((_ re.loop 1 3) (re.range "0" "9")))(re.++ ((_ re.loop 1 3) (re.range "0" "9")) (re.range "." "."))) (re.++ (re.* (re.++ (re.+ (re.union (re.range "!" "!")(re.union (re.range "'" "*")(re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "~" "~")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))))))) (re.range "." ".")))(re.++ (re.opt (re.++ (re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "^" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))) ((_ re.loop 0 61) (re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))))))(re.++ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))(re.++ (re.range "." ".") ((_ re.loop 2 6) (re.range "a" "z")))))))(re.++ (re.opt (re.++ (re.range ":" ":") ((_ re.loop 1 4) (re.range "0" "9"))))(re.++ (re.union (re.* (re.range "/" "/")) (re.++ (re.+ (re.++ (re.+ (re.range "/" "/")) (re.+ (re.union (re.range "!" "!")(re.union (re.range "#" ".")(re.union (re.range "0" ";")(re.union (re.range "=" "=")(re.union (re.range "?" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "~" "~")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))))))))) (re.* (re.range "/" "/")))) (str.to_re "")))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "R" (str.++ "4" (str.++ "o" (str.++ "9" (str.++ "j" (str.++ "9" "")))))))

(define-fun Witness2 () String (str.++ "c" (str.++ "5" (str.++ "E" (str.++ "8" (str.++ "C" (str.++ "1" "")))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.union (re.range "A" "C")(re.union (re.range "E" "E")(re.union (re.range "G" "H")(re.union (re.range "J" "N")(re.union (re.range "P" "P")(re.union (re.range "R" "T")(re.union (re.range "V" "V")(re.union (re.range "X" "Y")(re.union (re.range "a" "c")(re.union (re.range "e" "e")(re.union (re.range "g" "h")(re.union (re.range "j" "n")(re.union (re.range "p" "p")(re.union (re.range "r" "t")(re.union (re.range "v" "v") (re.range "x" "y"))))))))))))))))(re.++ (re.range "0" "9")(re.++ (re.union (re.range "A" "Z") (re.range "a" "z"))(re.++ (re.range "0" "9")(re.++ (re.union (re.range "A" "Z") (re.range "a" "z"))(re.++ (re.range "0" "9") (str.to_re ""))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "6" (str.++ "8" (str.++ " " (str.++ "7" (str.++ "8" (str.++ " " (str.++ "5" (str.++ "4" (str.++ " " (str.++ "0" (str.++ "5" ""))))))))))))

(define-fun Witness2 () String (str.++ "D" (str.++ "K" (str.++ "9" (str.++ "8" (str.++ " " (str.++ "6" (str.++ "7" (str.++ " " (str.++ "8" (str.++ "9" (str.++ " " (str.++ "3" (str.++ "3" ""))))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.opt (str.to_re (str.++ "D" (str.++ "K" ""))))(re.++ ((_ re.loop 3 3) (re.++ ((_ re.loop 2 2) (re.range "0" "9")) (re.range " " " ")))(re.++ ((_ re.loop 2 2) (re.range "0" "9")) (str.to_re "")))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "8" (str.++ "9" "")))

(define-fun Witness2 () String (str.++ "8" ""))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.union (re.++ (re.opt (re.range "0" "9"))(re.++ (re.range "0" "9") (re.opt (re.++ (re.range "." ".")(re.++ (re.opt (re.range "0" "9")) (re.range "0" "9")))))) (str.to_re (str.++ "1" (str.++ "0" (str.++ "0" ""))))) (str.to_re "")))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "0" (str.++ "9" (str.++ "1" (str.++ "7" (str.++ "3" (str.++ "9" (str.++ "8" (str.++ "8" "")))))))))

(define-fun Witness2 () String (str.++ "0" (str.++ "3" (str.++ "4" (str.++ "8" (str.++ "0" (str.++ "5" (str.++ "8" (str.++ "3" "")))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.union (re.++ (re.range "0" "1") (re.range "0" "9")) (re.++ (re.range "2" "2") (re.range "0" "3")))(re.++ ((_ re.loop 2 2) (re.++ (re.range "0" "5") (re.range "0" "9")))(re.++ (re.++ (re.range "0" "9") (re.range "0" "9")) (str.to_re "")))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "0" (str.++ "4" (str.++ "8" (str.++ "9" (str.++ "9" (str.++ "8" (str.++ "8" ""))))))))

(define-fun Witness2 () String (str.++ "0" (str.++ "0" (str.++ "5" (str.++ "7" (str.++ "2" (str.++ "9" (str.++ "8" ""))))))))

(assert (= regexA (re.union (re.++ (str.to_re "")(re.++ (re.++ (str.to_re (str.++ "0" (str.++ "0" (str.++ "0" (str.++ "0" (str.++ "0" (str.++ "0" ""))))))) (re.range "1" "9")) (str.to_re "")))(re.union (re.++ (str.to_re "")(re.++ (re.++ (str.to_re (str.++ "0" (str.++ "0" (str.++ "0" (str.++ "0" (str.++ "0" ""))))))(re.++ (re.range "1" "9") (re.range "0" "9"))) (str.to_re "")))(re.union (re.++ (str.to_re "")(re.++ (re.++ (str.to_re (str.++ "0" (str.++ "0" (str.++ "0" (str.++ "0" "")))))(re.++ (re.range "1" "9")(re.++ (re.range "0" "9") (re.range "0" "9")))) (str.to_re "")))(re.union (re.++ (str.to_re "")(re.++ (re.++ (str.to_re (str.++ "0" (str.++ "0" (str.++ "0" ""))))(re.++ (re.range "1" "9")(re.++ (re.range "0" "9")(re.++ (re.range "0" "9") (re.range "0" "9"))))) (str.to_re "")))(re.union (re.++ (str.to_re "")(re.++ (re.++ (str.to_re (str.++ "0" (str.++ "0" "")))(re.++ (re.range "1" "9")(re.++ (re.range "0" "9")(re.++ (re.range "0" "9")(re.++ (re.range "0" "9") (re.range "0" "9")))))) (str.to_re "")))(re.union (re.++ (str.to_re "")(re.++ (re.++ (re.range "0" "0")(re.++ (re.range "1" "9")(re.++ (re.range "0" "9")(re.++ (re.range "0" "9")(re.++ (re.range "0" "9")(re.++ (re.range "0" "9") (re.range "0" "9"))))))) (str.to_re ""))) (re.++ (str.to_re "")(re.++ (re.++ (re.range "1" "9")(re.++ (re.range "0" "9")(re.++ (re.range "0" "9")(re.++ (re.range "0" "9")(re.++ (re.range "0" "9")(re.++ (re.range "0" "9") (re.range "0" "9"))))))) (str.to_re "")))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "0" (str.++ "v" (str.++ "3" (str.++ "1" (str.++ "9" ""))))))

(define-fun Witness2 () String (str.++ "0" (str.++ "6" (str.++ "0" (str.++ "}" (str.++ "6" ""))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.union (re.++ ((_ re.loop 1 3) (re.range "0" "9")) (re.* (re.++ (re.range "," ",") ((_ re.loop 3 3) (re.range "0" "9"))))) (re.+ (re.range "0" "9")))(re.++ (re.opt (re.++ (re.union (re.range "\u{00}" "\u{09}") (re.range "\u{0b}" "\u{ff}")) (re.+ (re.range "0" "9")))) (str.to_re ""))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "G" (str.++ "8" (str.++ "8" (str.++ "0" (str.++ "8" (str.++ "8" (str.++ "7" (str.++ "8" (str.++ "Y" ""))))))))))

(define-fun Witness2 () String (str.++ "G" (str.++ "4" (str.++ "0" (str.++ "6" (str.++ "9" (str.++ "6" (str.++ "3" (str.++ "3" (str.++ "E" ""))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.union (re.range "F" "G") (re.range "S" "T"))(re.++ ((_ re.loop 7 7) (re.range "0" "9"))(re.++ (re.range "A" "Z") (str.to_re "")))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "8" (str.++ ":" (str.++ "1" (str.++ "9" "")))))

(define-fun Witness2 () String (str.++ "6" (str.++ ":" (str.++ "3" (str.++ "8" (str.++ ":" (str.++ "4" (str.++ "6" (str.++ " " (str.++ "A" (str.++ "m" "")))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.union (re.++ (re.range "1" "1") (re.range "0" "1")) (re.range "0" "9"))(re.++ (re.range ":" ":")(re.++ (re.range "0" "5")(re.++ (re.range "0" "9")(re.++ (re.opt (re.++ (re.range ":" ":")(re.++ (re.range "0" "5") (re.range "0" "9"))))(re.++ (re.opt (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (re.opt (re.++ (re.union (re.range "A" "A")(re.union (re.range "P" "P")(re.union (re.range "a" "a") (re.range "p" "p")))) (re.union (re.range "M" "M") (re.range "m" "m")))) (str.to_re "")))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "9" (str.++ ";" (str.++ "9" (str.++ "@" (str.++ "-" (str.++ "x" (str.++ "." (str.++ "x" (str.++ "J" ""))))))))))

(define-fun Witness2 () String (str.++ "D" (str.++ "9" (str.++ "3" (str.++ "9" (str.++ "Z" (str.++ "-" (str.++ "9" (str.++ "." (str.++ "p" (str.++ "@" (str.++ "2" (str.++ "." (str.++ "8" (str.++ "." (str.++ "G" (str.++ "o" "")))))))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.* (re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))) (re.union (re.range "&" "&")(re.union (re.range "+" "+")(re.union (re.range "-" ".")(re.union (re.range ";" ";")(re.union (re.range "_" "_")(re.union (re.range "a" "a")(re.union (re.range "m" "m") (re.range "p" "p"))))))))))(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z"))))(re.++ (re.range "@" "@")(re.++ (re.+ (re.++ (re.+ (re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z"))))) (re.range "." ".")))(re.++ ((_ re.loop 2 6) (re.union (re.range "A" "Z") (re.range "a" "z"))) (str.to_re "")))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "{" (str.++ "F" (str.++ "8" (str.++ "E" (str.++ "E" (str.++ "4" (str.++ "B" (str.++ "F" (str.++ "5" (str.++ "-" (str.++ "A" (str.++ "9" (str.++ "6" (str.++ "f" (str.++ "-" (str.++ "2" (str.++ "5" (str.++ "c" (str.++ "D" (str.++ "-" (str.++ "f" (str.++ "d" (str.++ "a" (str.++ "0" (str.++ "-" (str.++ "8" (str.++ "A" (str.++ "9" (str.++ "e" (str.++ "5" (str.++ "A" (str.++ "d" (str.++ "A" (str.++ "8" (str.++ "b" (str.++ "7" (str.++ "e" (str.++ "}" "")))))))))))))))))))))))))))))))))))))))

(define-fun Witness2 () String (str.++ "4" (str.++ "C" (str.++ "2" (str.++ "3" (str.++ "d" (str.++ "A" (str.++ "8" (str.++ "E" (str.++ "-" (str.++ "9" (str.++ "8" (str.++ "E" (str.++ "b" (str.++ "-" (str.++ "9" (str.++ "6" (str.++ "B" (str.++ "7" (str.++ "-" (str.++ "D" (str.++ "e" (str.++ "A" (str.++ "8" (str.++ "-" (str.++ "3" (str.++ "F" (str.++ "9" (str.++ "8" (str.++ "f" (str.++ "9" (str.++ "8" (str.++ "8" (str.++ "9" (str.++ "9" (str.++ "e" (str.++ "4" "")))))))))))))))))))))))))))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.opt (re.range "{" "{"))(re.++ ((_ re.loop 8 8) (re.union (re.range "0" "9")(re.union (re.range "A" "F") (re.range "a" "f"))))(re.++ (re.range "-" "-")(re.++ ((_ re.loop 3 3) (re.++ ((_ re.loop 4 4) (re.union (re.range "0" "9")(re.union (re.range "A" "F") (re.range "a" "f")))) (re.range "-" "-")))(re.++ ((_ re.loop 12 12) (re.union (re.range "0" "9")(re.union (re.range "A" "F") (re.range "a" "f"))))(re.++ (re.opt (re.range "}" "}")) (str.to_re ""))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "\u{04}" (str.++ "\u{c4}" (str.++ "'" (str.++ "B" (str.++ " " (str.++ "\u{aa}" (str.++ "'" (str.++ "c" (str.++ "," (str.++ "?" (str.++ "?" (str.++ "\u{d2}" "")))))))))))))

(define-fun Witness2 () String (str.++ "\u{ba}" (str.++ "\u{c9}" (str.++ "Z" (str.++ "s" (str.++ "'" (str.++ "," (str.++ " " (str.++ "7" (str.++ "\u{ba}" (str.++ "\u{ba}" (str.++ "s" (str.++ "'" (str.++ "," (str.++ " " (str.++ "\u{aa}" (str.++ "-" (str.++ "\u{dc}" (str.++ "'" (str.++ "i" (str.++ "x" (str.++ "," (str.++ "?" (str.++ "\u{7f}" ""))))))))))))))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.++ (re.union (re.range "\u{00}" "^") (re.range "`" "\u{ff}"))(re.++ (re.+ (re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "@" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))))(re.++ (re.opt (re.union (str.to_re (str.++ "s" (str.++ "'" ""))) (re.++ (re.range "'" "'") ((_ re.loop 1 2) (re.union (re.range "A" "Z") (re.range "a" "z"))))))(re.++ (re.opt (re.range "," ","))(re.++ (re.* (re.++ (re.range " " " ")(re.++ (re.+ (re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "@" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))))(re.++ (re.opt (re.union (str.to_re (str.++ "s" (str.++ "'" ""))) (re.++ (re.range "'" "'") ((_ re.loop 1 2) (re.union (re.range "A" "Z") (re.range "a" "z")))))) (re.opt (re.range "," ","))))))(re.++ ((_ re.loop 0 3) (re.union (re.range "!" "!")(re.union (re.range "." ".") (re.range "?" "?")))) (re.union (re.range "\u{00}" "\u{08}")(re.union (re.range "\u{0e}" "\u{1f}")(re.union (re.range "!" "^")(re.union (re.range "`" "\u{84}")(re.union (re.range "\u{86}" "\u{9f}") (re.range "\u{a1}" "\u{ff}")))))))))))) (str.to_re "")))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "5" (str.++ "1" (str.++ "6" (str.++ "5" (str.++ " " (str.++ "9" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "3" (str.++ "5" (str.++ "4" (str.++ "9" (str.++ "\u{a0}" (str.++ "2" (str.++ "5" (str.++ "8" (str.++ "3" "")))))))))))))))))))

(define-fun Witness2 () String (str.++ "5" (str.++ "4" (str.++ "9" (str.++ "8" (str.++ "6" (str.++ "8" (str.++ "9" (str.++ "8" (str.++ "\u{09}" (str.++ "9" (str.++ "9" (str.++ "5" (str.++ "5" (str.++ "\u{a0}" (str.++ "8" (str.++ "8" (str.++ "9" (str.++ "9" "")))))))))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.++ (re.++ (re.range "5" "5") (re.range "1" "5"))(re.++ ((_ re.loop 2 2) (re.range "0" "9")) ((_ re.loop 3 3) (re.++ (re.opt (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "-" "-")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))) ((_ re.loop 4 4) (re.range "0" "9")))))) (str.to_re "")))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "5" (str.++ "9" (str.++ "1" (str.++ "9" (str.++ "2" (str.++ " " (str.++ "3" (str.++ "4" (str.++ "7" (str.++ "0" "")))))))))))

(define-fun Witness2 () String (str.++ "1" (str.++ "9" (str.++ "8" (str.++ "6" (str.++ "4" (str.++ "9" (str.++ "0" (str.++ "5" (str.++ "8" ""))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ ((_ re.loop 5 5) (re.range "0" "9"))(re.++ (re.opt (re.++ (re.opt (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "-" "-")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))) ((_ re.loop 4 4) (re.range "0" "9")))) (str.to_re ""))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "9" (str.++ "9" (str.++ "8" (str.++ "0" (str.++ "3" (str.++ "1" (str.++ "9" (str.++ "O" "")))))))))

(define-fun Witness2 () String (str.++ "I" (str.++ "E" (str.++ "6" (str.++ "+" (str.++ "9" (str.++ "9" (str.++ "9" (str.++ "7" (str.++ "4" (str.++ "J" "")))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.opt (str.to_re (str.++ "I" (str.++ "E" ""))))(re.++ (re.range "0" "9")(re.++ (re.union (re.range "*" "+")(re.union (re.range "0" "9") (re.range "A" "Z")))(re.++ ((_ re.loop 5 5) (re.range "0" "9"))(re.++ (re.range "A" "Z") (str.to_re "")))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "$" (str.++ "4" (str.++ "8" (str.++ "," (str.++ "4" (str.++ "9" (str.++ "3" (str.++ "," (str.++ "8" (str.++ "5" (str.++ "1" (str.++ "," (str.++ "8" (str.++ "2" (str.++ "7" (str.++ "%" "")))))))))))))))))

(define-fun Witness2 () String (str.++ "+" (str.++ "9" (str.++ "8" (str.++ "%" "")))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.++ (re.opt (re.union (re.range "$" "$")(re.union (re.range "+" "+") (re.range "-" "-"))))(re.++ (re.union (re.+ (re.range "0" "9")) (re.++ ((_ re.loop 1 3) (re.range "0" "9")) (re.* (re.++ (re.range "," ",") ((_ re.loop 3 3) (re.range "0" "9"))))))(re.++ (re.opt (re.++ (re.range "." ".") (re.+ (re.range "0" "9")))) (re.opt (re.union ((_ re.loop 2 2) (re.union (re.range "A" "Z") (re.range "a" "z"))) (re.range "%" "%")))))) (str.to_re "")))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "3" (str.++ ":" (str.++ "4" (str.++ "8" (str.++ ":" (str.++ "4" (str.++ "9" (str.++ " " (str.++ "a" (str.++ "m" "")))))))))))

(define-fun Witness2 () String (str.++ "0" (str.++ "7" (str.++ ":" (str.++ "4" (str.++ "1" (str.++ ":" (str.++ "0" (str.++ "7" (str.++ " " (str.++ "A" (str.++ "m" ""))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.++ (re.union (re.++ (re.opt (re.range "0" "0")) (re.range "1" "9")) (re.++ (re.range "1" "1") (re.range "0" "2")))(re.++ ((_ re.loop 1 2) (re.++ (re.range ":" ":")(re.++ (re.range "0" "5") (re.range "0" "9")))) (re.++ (re.range " " " ")(re.++ (re.union (re.range "A" "A")(re.union (re.range "P" "P")(re.union (re.range "a" "a") (re.range "p" "p")))) (re.union (re.range "M" "M") (re.range "m" "m")))))) (str.to_re "")))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "8" (str.++ "1" (str.++ "F" (str.++ "3" (str.++ ":" (str.++ "b" (str.++ "a" (str.++ ":" (str.++ "f" (str.++ "B" (str.++ "8" (str.++ ":" (str.++ "0" (str.++ ":" (str.++ "b" (str.++ "C" (str.++ "f" (str.++ "e" (str.++ ":" (str.++ "c" (str.++ ":" (str.++ "1" (str.++ "c" (str.++ "9" (str.++ ":" (str.++ "4" "")))))))))))))))))))))))))))

(define-fun Witness2 () String (str.++ "a" (str.++ ":" (str.++ "D" (str.++ ":" (str.++ "C" (str.++ "2" (str.++ "8" (str.++ ":" (str.++ "f" (str.++ "4" (str.++ ":" (str.++ "9" (str.++ ":" (str.++ "E" (str.++ "F" (str.++ "0" (str.++ ":" (str.++ "8" (str.++ "2" (str.++ "a" (str.++ ":" (str.++ "A" "")))))))))))))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ ((_ re.loop 7 7) (re.++ ((_ re.loop 1 4) (re.union (re.range "0" "9")(re.union (re.range "A" "F") (re.range "a" "f")))) (re.range ":" ":")))(re.++ ((_ re.loop 1 4) (re.union (re.range "0" "9")(re.union (re.range "A" "F") (re.range "a" "f")))) (str.to_re ""))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "x" (str.++ ":" (str.++ "\u{5c}" (str.++ "," (str.++ "\u{5c}" ""))))))

(define-fun Witness2 () String (str.++ "a" (str.++ ":" (str.++ "\u{5c}" (str.++ ")" (str.++ "\u{5c}" (str.++ "\u{f2}" (str.++ "\u{f4}" (str.++ "\u{5c}" "")))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.union (re.++ (re.union (re.range "A" "Z") (re.range "a" "z")) (re.range ":" ":")) (re.++ ((_ re.loop 2 2) (re.range "\u{5c}" "\u{5c}"))(re.++ (re.union (re.+ (re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))) (re.++ ((_ re.loop 3 3) (re.++ (re.union (re.++ (str.to_re (str.++ "2" (str.++ "5" ""))) (re.range "0" "5"))(re.union (re.++ (re.range "2" "2")(re.++ (re.range "0" "4") (re.range "0" "9"))) (re.++ (re.opt (re.range "0" "1"))(re.++ (re.range "0" "9") (re.opt (re.range "0" "9")))))) (re.range "." "."))) (re.union (re.++ (str.to_re (str.++ "2" (str.++ "5" ""))) (re.range "0" "5"))(re.union (re.++ (re.range "2" "2")(re.++ (re.range "0" "4") (re.range "0" "9"))) (re.++ (re.opt (re.range "0" "1"))(re.++ (re.range "0" "9") (re.opt (re.range "0" "9"))))))))(re.++ (re.range "\u{5c}" "\u{5c}") (re.++ (re.union (re.union (re.range "!" "!")(re.union (re.range "#" ")")(re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "@" "Z")(re.union (re.range "^" "{") (re.range "}" "\u{ff}"))))))) (re.++ (re.range "." ".")(re.++ (re.* (re.union (re.range " " " ") (re.range "." "."))) (re.union (re.range "!" "!")(re.union (re.range "#" ")")(re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "@" "Z")(re.union (re.range "^" "{") (re.range "}" "\u{ff}")))))))))) (re.opt (re.++ (re.* (re.union (re.range " " "!")(re.union (re.range "#" ")")(re.union (re.range "-" ".")(re.union (re.range "0" "9")(re.union (re.range "@" "Z")(re.union (re.range "^" "{") (re.range "}" "\u{ff}")))))))) (re.union (re.range "!" "!")(re.union (re.range "#" ")")(re.union (re.range "-" ".")(re.union (re.range "0" "9")(re.union (re.range "@" "Z")(re.union (re.range "^" "{") (re.range "}" "\u{ff}"))))))))))))))(re.++ (re.range "\u{5c}" "\u{5c}")(re.++ (re.* (re.++ (re.union (re.range "!" "!")(re.union (re.range "#" ")")(re.union (re.range "+" "-")(re.union (re.range "0" "9")(re.union (re.range ";" ";")(re.union (re.range "=" "=")(re.union (re.range "@" "[")(re.union (re.range "]" "{") (re.range "}" "\u{ff}")))))))))(re.++ (re.opt (re.++ (re.* (re.union (re.range " " "!")(re.union (re.range "#" ")")(re.union (re.range "+" ".")(re.union (re.range "0" "9")(re.union (re.range ";" ";")(re.union (re.range "=" "=")(re.union (re.range "@" "[")(re.union (re.range "]" "{") (re.range "}" "\u{ff}")))))))))) (re.union (re.range "!" "!")(re.union (re.range "#" ")")(re.union (re.range "+" "-")(re.union (re.range "0" "9")(re.union (re.range ";" ";")(re.union (re.range "=" "=")(re.union (re.range "@" "[")(re.union (re.range "]" "{") (re.range "}" "\u{ff}"))))))))))) (re.range "\u{5c}" "\u{5c}")))) (str.to_re "")))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "(" (str.++ "+" (str.++ "4" (str.++ "5" (str.++ ")" (str.++ "0" (str.++ "8" (str.++ "2" (str.++ "4" (str.++ " " (str.++ "8" (str.++ "0" (str.++ "1" (str.++ "9" "")))))))))))))))

(define-fun Witness2 () String (str.++ "+" (str.++ "4" (str.++ "5" (str.++ "\u{85}" (str.++ "4" (str.++ "7" (str.++ "8" (str.++ "4" (str.++ "4" (str.++ "1" (str.++ "\u{85}" (str.++ "9" (str.++ "4" ""))))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.opt (re.++ (re.opt (re.range "(" "("))(re.++ (str.to_re (str.++ "+" (str.++ "4" (str.++ "5" "")))) (re.opt (re.range ")" ")")))))(re.++ (re.++ (re.opt (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ ((_ re.loop 2 2) (re.range "0" "9"))(re.++ (re.opt (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ ((_ re.loop 2 2) (re.range "0" "9"))(re.++ (re.opt (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ ((_ re.loop 2 2) (re.range "0" "9"))(re.++ (re.opt (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))) ((_ re.loop 2 2) (re.range "0" "9"))))))))) (str.to_re ""))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "m" (str.++ "a" (str.++ "r" (str.++ "," (str.++ "," (str.++ "," (str.++ "," (str.++ "\u{0c}" (str.++ "8" (str.++ "8" (str.++ "2" (str.++ "0" "")))))))))))))

(define-fun Witness2 () String (str.++ "D" (str.++ "e" (str.++ "c" (str.++ "e" (str.++ "m" (str.++ "b" (str.++ "e" (str.++ "r" (str.++ "," (str.++ "," (str.++ "," (str.++ "," (str.++ "\u{85}" (str.++ "2" (str.++ "9" (str.++ "6" (str.++ "2" ""))))))))))))))))))

(assert (= regexA (re.union (re.++ (str.to_re "")(re.++ (re.union (str.to_re (str.++ "J" (str.++ "a" (str.++ "n" ""))))(re.union (str.to_re (str.++ "F" (str.++ "e" (str.++ "b" ""))))(re.union (str.to_re (str.++ "M" (str.++ "a" (str.++ "r" ""))))(re.union (str.to_re (str.++ "A" (str.++ "p" (str.++ "r" ""))))(re.union (str.to_re (str.++ "M" (str.++ "a" (str.++ "y" ""))))(re.union (str.to_re (str.++ "J" (str.++ "u" (str.++ "n" ""))))(re.union (str.to_re (str.++ "J" (str.++ "u" (str.++ "l" ""))))(re.union (str.to_re (str.++ "A" (str.++ "u" (str.++ "g" ""))))(re.union (str.to_re (str.++ "S" (str.++ "e" (str.++ "p" ""))))(re.union (str.to_re (str.++ "O" (str.++ "c" (str.++ "t" ""))))(re.union (str.to_re (str.++ "N" (str.++ "o" (str.++ "v" "")))) (str.to_re (str.++ "D" (str.++ "e" (str.++ "c" "")))))))))))))))(re.++ (re.* (re.range "," ","))(re.++ (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))(re.++ (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ ((_ re.loop 4 4) (re.range "0" "9")) (str.to_re "")))))))(re.union (re.++ (str.to_re "")(re.++ (re.union (str.to_re (str.++ "j" (str.++ "a" (str.++ "n" ""))))(re.union (str.to_re (str.++ "f" (str.++ "e" (str.++ "b" ""))))(re.union (str.to_re (str.++ "m" (str.++ "a" (str.++ "r" ""))))(re.union (str.to_re (str.++ "a" (str.++ "p" (str.++ "r" ""))))(re.union (str.to_re (str.++ "m" (str.++ "a" (str.++ "y" ""))))(re.union (str.to_re (str.++ "j" (str.++ "u" (str.++ "n" ""))))(re.union (str.to_re (str.++ "j" (str.++ "u" (str.++ "l" ""))))(re.union (str.to_re (str.++ "a" (str.++ "u" (str.++ "g" ""))))(re.union (str.to_re (str.++ "s" (str.++ "e" (str.++ "p" ""))))(re.union (str.to_re (str.++ "o" (str.++ "c" (str.++ "t" ""))))(re.union (str.to_re (str.++ "n" (str.++ "o" (str.++ "v" "")))) (str.to_re (str.++ "d" (str.++ "e" (str.++ "c" "")))))))))))))))(re.++ (re.* (re.range "," ","))(re.++ (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))(re.++ ((_ re.loop 4 4) (re.range "0" "9")) (str.to_re ""))))))(re.union (re.++ (str.to_re "")(re.++ (re.union (str.to_re (str.++ "J" (str.++ "a" (str.++ "n" (str.++ "u" (str.++ "a" (str.++ "r" (str.++ "y" ""))))))))(re.union (str.to_re (str.++ "F" (str.++ "e" (str.++ "b" (str.++ "r" (str.++ "u" (str.++ "a" (str.++ "r" (str.++ "y" "")))))))))(re.union (str.to_re (str.++ "M" (str.++ "a" (str.++ "r" (str.++ "c" (str.++ "h" ""))))))(re.union (str.to_re (str.++ "A" (str.++ "p" (str.++ "r" (str.++ "i" (str.++ "l" ""))))))(re.union (str.to_re (str.++ "M" (str.++ "a" (str.++ "y" ""))))(re.union (str.to_re (str.++ "J" (str.++ "u" (str.++ "n" (str.++ "e" "")))))(re.union (str.to_re (str.++ "J" (str.++ "u" (str.++ "l" (str.++ "y" "")))))(re.union (str.to_re (str.++ "A" (str.++ "u" (str.++ "g" (str.++ "u" (str.++ "s" (str.++ "t" "")))))))(re.union (str.to_re (str.++ "S" (str.++ "e" (str.++ "p" (str.++ "t" (str.++ "e" (str.++ "m" (str.++ "b" (str.++ "e" (str.++ "r" ""))))))))))(re.union (str.to_re (str.++ "O" (str.++ "c" (str.++ "t" (str.++ "o" (str.++ "b" (str.++ "e" (str.++ "r" ""))))))))(re.union (str.to_re (str.++ "N" (str.++ "o" (str.++ "v" (str.++ "e" (str.++ "m" (str.++ "b" (str.++ "e" (str.++ "r" ""))))))))) (str.to_re (str.++ "D" (str.++ "e" (str.++ "c" (str.++ "e" (str.++ "m" (str.++ "b" (str.++ "e" (str.++ "r" ""))))))))))))))))))))(re.++ (re.* (re.range "," ","))(re.++ (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))(re.++ ((_ re.loop 4 4) (re.range "0" "9")) (str.to_re "")))))) (re.++ (str.to_re "")(re.++ (re.union (str.to_re (str.++ "j" (str.++ "a" (str.++ "n" (str.++ "u" (str.++ "a" (str.++ "r" (str.++ "y" ""))))))))(re.union (str.to_re (str.++ "f" (str.++ "e" (str.++ "b" (str.++ "r" (str.++ "u" (str.++ "a" (str.++ "r" (str.++ "y" "")))))))))(re.union (str.to_re (str.++ "m" (str.++ "a" (str.++ "r" (str.++ "c" (str.++ "h" ""))))))(re.union (str.to_re (str.++ "a" (str.++ "p" (str.++ "r" (str.++ "i" (str.++ "l" ""))))))(re.union (str.to_re (str.++ "m" (str.++ "a" (str.++ "y" ""))))(re.union (str.to_re (str.++ "j" (str.++ "u" (str.++ "n" (str.++ "e" "")))))(re.union (str.to_re (str.++ "j" (str.++ "u" (str.++ "l" (str.++ "y" "")))))(re.union (str.to_re (str.++ "a" (str.++ "u" (str.++ "g" (str.++ "u" (str.++ "s" (str.++ "t" "")))))))(re.union (str.to_re (str.++ "s" (str.++ "e" (str.++ "p" (str.++ "t" (str.++ "e" (str.++ "m" (str.++ "b" (str.++ "e" (str.++ "r" ""))))))))))(re.union (str.to_re (str.++ "o" (str.++ "c" (str.++ "t" (str.++ "o" (str.++ "b" (str.++ "e" (str.++ "r" ""))))))))(re.union (str.to_re (str.++ "n" (str.++ "o" (str.++ "v" (str.++ "e" (str.++ "m" (str.++ "b" (str.++ "e" (str.++ "r" ""))))))))) (str.to_re (str.++ "d" (str.++ "e" (str.++ "c" (str.++ "e" (str.++ "m" (str.++ "b" (str.++ "e" (str.++ "r" ""))))))))))))))))))))(re.++ (re.* (re.range "," ","))(re.++ (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))(re.++ ((_ re.loop 4 4) (re.range "0" "9")) (str.to_re "")))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "Y" (str.++ "q" (str.++ "v" (str.++ "-" (str.++ "Y" (str.++ "d" (str.++ " " (str.++ "P" (str.++ "." (str.++ " " (str.++ "R" (str.++ "." (str.++ " " (str.++ "O" (str.++ "'" (str.++ "I" (str.++ "b" (str.++ "a" (str.++ "g" (str.++ "e" (str.++ " " (str.++ "I" (str.++ "I" (str.++ "I" "")))))))))))))))))))))))))

(define-fun Witness2 () String (str.++ "F" (str.++ "f" (str.++ "-" (str.++ "C" (str.++ "a" (str.++ " " (str.++ "Z" (str.++ "." (str.++ " " (str.++ "O" (str.++ "'" (str.++ "N" (str.++ "e" (str.++ "a" (str.++ " " (str.++ "J" (str.++ "r" (str.++ "." "")))))))))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.++ (re.++ (re.range "A" "Z")(re.++ (re.+ (re.range "a" "z")) (re.opt (re.++ (re.range "-" "-")(re.++ (re.range "A" "Z") (re.+ (re.range "a" "z")))))))(re.++ ((_ re.loop 0 2) (re.++ (re.range " " " ") (re.++ (re.range "A" "Z") (re.range "." "."))))(re.++ (re.range " " " ")(re.++ (re.union (re.++ (re.range "A" "Z") (re.* (re.range "a" "z"))) (re.++ (str.to_re (str.++ "O" (str.++ "'" "")))(re.++ (re.range "A" "Z") (re.++ ((_ re.loop 2 2) (re.range "a" "z")) (re.* (re.range "a" "z")))))) (re.opt (re.++ (re.range " " " ") (re.union (str.to_re (str.++ "J" (str.++ "r" (str.++ "." ""))))(re.union (str.to_re (str.++ "S" (str.++ "r" (str.++ "." ""))))(re.union (str.to_re (str.++ "I" (str.++ "V" "")))(re.union (str.to_re (str.++ "I" (str.++ "I" (str.++ "I" "")))) (str.to_re (str.++ "I" (str.++ "I" ""))))))))))))) (str.to_re "")))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "8" (str.++ "1" (str.++ "8" (str.++ "5" (str.++ "8" (str.++ "8" (str.++ "3" (str.++ "8" (str.++ "7" (str.++ "B" (str.++ "3" (str.++ "9" "")))))))))))))

(define-fun Witness2 () String (str.++ "5" (str.++ "9" (str.++ "3" (str.++ "4" (str.++ "7" (str.++ "9" (str.++ "8" (str.++ "8" (str.++ "9" (str.++ "B" (str.++ "9" (str.++ "9" "")))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.opt (str.to_re (str.++ "N" (str.++ "L" ""))))(re.++ ((_ re.loop 9 9) (re.range "0" "9"))(re.++ (re.range "B" "B")(re.++ ((_ re.loop 2 2) (re.range "0" "9")) (str.to_re ""))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "7" (str.++ "8" (str.++ "2" (str.++ "7" (str.++ "-" (str.++ "0" (str.++ "0" (str.++ "-" (str.++ "1" (str.++ "3" (str.++ " " (str.++ "2" (str.++ "2" (str.++ ":" (str.++ "0" (str.++ "9" (str.++ ":" (str.++ "0" (str.++ "9" ""))))))))))))))))))))

(define-fun Witness2 () String (str.++ "1" (str.++ "5" (str.++ "9" (str.++ "7" (str.++ "-" (str.++ "1" (str.++ "7" (str.++ "-" (str.++ "1" (str.++ "9" (str.++ "\u{85}" (str.++ "0" (str.++ "7" (str.++ ":" (str.++ "1" (str.++ "5" (str.++ ":" (str.++ "4" (str.++ "8" ""))))))))))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ ((_ re.loop 4 4) (re.range "0" "9"))(re.++ (re.range "-" "-")(re.++ (re.++ (re.range "0" "1") (re.range "0" "9"))(re.++ (re.range "-" "-")(re.++ (re.++ (re.range "0" "3") (re.range "0" "9"))(re.++ (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))(re.++ (re.union (re.++ (re.range "0" "1") (re.range "0" "9")) (re.++ (re.range "2" "2") (re.range "0" "3")))(re.++ (re.range ":" ":")(re.++ (re.++ (re.range "0" "5") (re.range "0" "9"))(re.++ (re.range ":" ":")(re.++ (re.++ (re.range "0" "5") (re.range "0" "9")) (str.to_re "")))))))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "k" (str.++ "k" (str.++ "x" (str.++ "z" (str.++ "x" (str.++ "a" "")))))))

(define-fun Witness2 () String (str.++ "r" (str.++ "g" (str.++ "y" ""))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.+ (re.range "a" "z"))(re.++ (re.* (re.range "0" "9"))(re.++ (re.+ (re.range "a" "z")) (str.to_re "")))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "1" (str.++ "0" "")))

(define-fun Witness2 () String (str.++ "0" (str.++ "4" "")))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.union (re.++ (re.opt (re.range "0" "0")) (re.range "1" "9")) (re.++ (re.range "1" "1") (re.range "0" "2"))) (str.to_re "")))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "1" (str.++ "4" (str.++ "8" (str.++ "6" (str.++ "9" (str.++ " " (str.++ "8" (str.++ "1" (str.++ "5" (str.++ "0" "")))))))))))

(define-fun Witness2 () String (str.++ "0" (str.++ "1" (str.++ "9" (str.++ "9" (str.++ "5" (str.++ " " "")))))))

(assert (= regexA (re.++ (re.++ (str.to_re "") ((_ re.loop 5 5) (re.range "0" "9"))) (re.++ (re.opt (re.union (re.range " " " ") (re.range "-" "-")))(re.++ (re.opt ((_ re.loop 4 4) (re.range "0" "9"))) (str.to_re ""))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "g" (str.++ "6" "")))

(define-fun Witness2 () String (str.++ "h" (str.++ "3" "")))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.++ (re.union (re.range "A" "H") (re.range "a" "h")) (re.range "1" "8")) (str.to_re "")))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "0" (str.++ "1" (str.++ "." (str.++ "t" (str.++ "D" ""))))))

(define-fun Witness2 () String (str.++ "A" (str.++ "9" (str.++ "." (str.++ "z" (str.++ "." (str.++ "Z" (str.++ "Z" (str.++ "z" (str.++ "Y" (str.++ "g" "")))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.+ (re.++ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))(re.++ (re.opt (re.++ ((_ re.loop 0 61) (re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z"))))) (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z"))))) (re.range "." "."))))(re.++ ((_ re.loop 2 6) (re.union (re.range "A" "Z") (re.range "a" "z"))) (str.to_re ""))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "8" (str.++ "@" (str.++ "l" (str.++ "y" (str.++ "." (str.++ "z" (str.++ "4" (str.++ "." (str.++ "Z" (str.++ "t" (str.++ "." (str.++ "m" (str.++ "p" ""))))))))))))))

(define-fun Witness2 () String (str.++ "9" (str.++ "\u{aa}" (str.++ "z" (str.++ "G" (str.++ "K" (str.++ "8" (str.++ "@" (str.++ "P" (str.++ "\u{e6}" (str.++ "8" (str.++ "k" (str.++ "." (str.++ "s" (str.++ "o" (str.++ "s" (str.++ "T" "")))))))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.++ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))(re.++ (re.* (re.++ (re.* (re.union (re.range "-" ".")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))) (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))))(re.++ (re.range "@" "@")(re.++ (re.+ (re.++ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))(re.++ (re.* (re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))))(re.++ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z"))) (re.range "." "."))))) ((_ re.loop 2 9) (re.union (re.range "A" "Z") (re.range "a" "z"))))))) (str.to_re "")))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "\u{f9}" ""))

(define-fun Witness2 () String (str.++ "8" ""))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))(re.++ (re.* (re.++ (re.range " " " ") (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))))) (str.to_re ""))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "6" (str.++ "/" (str.++ "J" (str.++ "a" (str.++ "n" (str.++ "/" (str.++ "7" (str.++ "8" (str.++ "8" (str.++ "9" "")))))))))))

(define-fun Witness2 () String (str.++ "2" (str.++ "9" (str.++ "/" (str.++ "S" (str.++ "e" (str.++ "p" (str.++ "/" (str.++ "9" (str.++ "2" (str.++ "8" (str.++ "8" ""))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.union (re.range "0" "9")(re.union (re.++ (re.range "0" "2") (re.range "0" "9")) (re.++ (re.range "3" "3") (re.range "0" "1"))))(re.++ (re.range "/" "/")(re.++ (re.union (str.to_re (str.++ "J" (str.++ "a" (str.++ "n" ""))))(re.union (str.to_re (str.++ "F" (str.++ "e" (str.++ "b" ""))))(re.union (str.to_re (str.++ "M" (str.++ "a" (str.++ "r" ""))))(re.union (str.to_re (str.++ "A" (str.++ "p" (str.++ "r" ""))))(re.union (str.to_re (str.++ "M" (str.++ "a" (str.++ "y" ""))))(re.union (str.to_re (str.++ "J" (str.++ "u" (str.++ "n" ""))))(re.union (str.to_re (str.++ "J" (str.++ "u" (str.++ "l" ""))))(re.union (str.to_re (str.++ "A" (str.++ "u" (str.++ "g" ""))))(re.union (str.to_re (str.++ "S" (str.++ "e" (str.++ "p" ""))))(re.union (str.to_re (str.++ "O" (str.++ "c" (str.++ "t" ""))))(re.union (str.to_re (str.++ "N" (str.++ "o" (str.++ "v" "")))) (str.to_re (str.++ "D" (str.++ "e" (str.++ "c" "")))))))))))))))(re.++ (re.range "/" "/")(re.++ ((_ re.loop 4 4) (re.range "0" "9")) (str.to_re "")))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "\u{fc}" (str.++ "\u{da}" (str.++ "\u{ba}" (str.++ "i" "")))))

(define-fun Witness2 () String (str.++ "c" ""))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))(re.++ (re.* (re.union (re.range "\u{00}" "\u{09}") (re.range "\u{0b}" "\u{ff}"))) (str.to_re ""))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "6" (str.++ "5" (str.++ "9" (str.++ "8" "")))))

(define-fun Witness2 () String (str.++ "7" (str.++ "4" (str.++ "0" (str.++ "4" "")))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.range "1" "9")(re.++ ((_ re.loop 3 3) (re.range "0" "9")) (str.to_re ""))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "." (str.++ "\u{85}" (str.++ "\u{ab}" (str.++ "g" (str.++ "." (str.++ "\u{a0}" (str.++ "N" (str.++ "g" (str.++ " " (str.++ "X" (str.++ "\u{0d}" (str.++ "G" (str.++ "." (str.++ "\u{a0}" (str.++ "L" (str.++ "\u{0c}" (str.++ "N" (str.++ "N" (str.++ "w" (str.++ "\u{cf}" (str.++ "\u{0b}" ""))))))))))))))))))))))

(define-fun Witness2 () String (str.++ "Y" (str.++ "u" (str.++ "i" (str.++ "t" (str.++ "\u{85}" (str.++ "\u{a0}" (str.++ "K" (str.++ "p" (str.++ "h" (str.++ "\u{85}" (str.++ "\u{a0}" (str.++ "Z" (str.++ "." (str.++ "\u{a0}" (str.++ "V" (str.++ "-" (str.++ "z" (str.++ "'" (str.++ "\u{b8}" ""))))))))))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.* (re.++ (re.* (re.union (re.range "\u{00}" "\u{09}") (re.range "\u{0b}" "\u{ff}")))(re.++ (re.range "." ".") (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))))(re.++ (re.+ (re.++ (re.range "A" "Z")(re.++ (re.+ (re.range "a" "z")) (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))))))(re.++ (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))(re.++ (re.* (re.++ (re.range "A" "Z")(re.++ (re.opt (re.range "." ".")) (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))))(re.++ (re.++ (re.range "A" "Z") (re.+ (re.union (re.range "'" "'")(re.union (re.range "-" "-")(re.union (re.range "A" "Z") (re.range "a" "z"))))))(re.++ (re.* (re.union (re.range "\u{00}" "\u{09}") (re.range "\u{0b}" "\u{ff}"))) (str.to_re ""))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "0" (str.++ "8" (str.++ "8" (str.++ "4" (str.++ "2" ""))))))

(define-fun Witness2 () String (str.++ "0" (str.++ "2" (str.++ "5" (str.++ "8" (str.++ "8" (str.++ "-" (str.++ "4" (str.++ "8" (str.++ "8" (str.++ "5" "")))))))))))

(assert (= regexA (re.union (re.++ (str.to_re "")(re.++ (re.union (re.++ ((_ re.loop 5 5) (re.range "0" "9"))(re.++ (re.range "-" "-") ((_ re.loop 4 4) (re.range "0" "9")))) ((_ re.loop 5 5) (re.range "0" "9"))) (str.to_re ""))) (re.++ (str.to_re "")(re.++ (re.++ (re.union (re.range "A" "Z") (re.range "a" "z"))(re.++ (re.range "0" "9")(re.++ (re.union (re.range "A" "Z") (re.range "a" "z"))(re.++ (re.range " " " ")(re.++ (re.range "0" "9")(re.++ (re.union (re.range "A" "Z") (re.range "a" "z")) (re.range "0" "9"))))))) (str.to_re ""))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "8" ""))

(define-fun Witness2 () String (str.++ "$" (str.++ "7" (str.++ "9" (str.++ "," (str.++ "0" (str.++ "9" (str.++ "0" (str.++ "," (str.++ "8" (str.++ "1" (str.++ "8" (str.++ "," (str.++ "7" (str.++ "1" (str.++ "8" (str.++ "," (str.++ "8" (str.++ "7" (str.++ "9" ""))))))))))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.opt (re.range "$" "$"))(re.++ (re.union (re.+ (re.range "0" "9")) (re.++ ((_ re.loop 1 3) (re.range "0" "9")) (re.* (re.++ (re.range "," ",") ((_ re.loop 3 3) (re.range "0" "9"))))))(re.++ (re.opt (re.++ (re.range "." ".") (re.++ ((_ re.loop 2 2) (re.range "0" "9")) (re.* (re.range "0" "9"))))) (str.to_re "")))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "-" (str.++ "1" (str.++ "8" (str.++ "0" (str.++ "." (str.++ "0" (str.++ "0" (str.++ "0" "")))))))))

(define-fun Witness2 () String (str.++ "6" (str.++ "9" (str.++ "." (str.++ "8" "")))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.opt (re.range "-" "-")) (re.union (re.++ (re.union (re.++ (re.opt (re.range "1" "1"))(re.++ (re.range "0" "7") (re.range "0" "9"))) (re.++ (re.opt (re.range "1" "9")) (re.range "0" "9")))(re.++ (re.range "." ".")(re.++ ((_ re.loop 1 6) (re.range "0" "9")) (str.to_re "")))) (re.++ (re.opt (re.range "1" "1"))(re.++ (re.range "1" "8")(re.++ (str.to_re (str.++ "0" (str.++ "." "")))(re.++ ((_ re.loop 1 6) (re.range "0" "0")) (str.to_re ""))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String "")

(define-fun Witness2 () String (str.++ "\u{f0}" (str.++ "\u{d0}" "")))

(assert (= regexA (re.++ (re.* (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))) (str.to_re ""))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "2" (str.++ "2" (str.++ "." (str.++ "2" (str.++ "9" ""))))))

(define-fun Witness2 () String (str.++ "8" (str.++ "." (str.++ "1" (str.++ "0" "")))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.union (str.to_re (str.++ "2" (str.++ "0" "")))(re.union (str.to_re (str.++ "2" (str.++ "1" "")))(re.union (str.to_re (str.++ "2" (str.++ "2" "")))(re.union (str.to_re (str.++ "2" (str.++ "3" "")))(re.union (re.++ (re.range "0" "1") (re.range "0" "9")) (re.range "0" "9"))))))(re.++ ((_ re.loop 1 2) (re.++ (re.union (re.range "." ".") (re.range ":" ":"))(re.++ (re.range "0" "5") (re.range "0" "9")))) (str.to_re ""))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "S" (str.++ "x" (str.++ "\u{ac}" ""))))

(define-fun Witness2 () String (str.++ "\u{e6}" ""))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.union (re.union (re.range "\u{00}" "R") (re.range "T" "\u{ff}"))(re.union (re.++ (re.range "S" "S") (re.union (re.range "\u{00}" "D") (re.range "F" "\u{ff}"))) (re.++ (str.to_re (str.++ "S" (str.++ "E" ""))) (re.union (re.range "\u{00}" "O") (re.range "Q" "\u{ff}"))))) (re.* (re.union (re.range "\u{00}" "\u{09}") (re.range "\u{0b}" "\u{ff}")))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "1" (str.++ "0" (str.++ "0" ""))))

(define-fun Witness2 () String (str.++ "1" (str.++ "0" (str.++ "0" ""))))

(assert (= regexA (re.union (re.++ (str.to_re "")(re.++ (str.to_re (str.++ "1" (str.++ "0" (str.++ "0" "")))) (str.to_re "")))(re.union (re.++ (str.to_re "")(re.++ (str.to_re (str.++ "1" (str.++ "0" (str.++ "0" ""))))(re.++ (re.union (re.range "\u{00}" "\u{09}") (re.range "\u{0b}" "\u{ff}"))(re.++ (str.to_re (str.++ "0" (str.++ "0" ""))) (str.to_re ""))))) (re.++ (str.to_re "")(re.++ ((_ re.loop 0 2) (re.range "0" "9"))(re.++ (re.opt (re.++ (re.range "." ".") ((_ re.loop 1 2) (re.range "0" "9"))))(re.++ (re.* (re.range " " " "))(re.++ (re.opt (re.range "%" "%")) (str.to_re ""))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "c" (str.++ "a" (str.++ "." (str.++ "f" (str.++ "6" ""))))))

(define-fun Witness2 () String (str.++ "Q" (str.++ "\u{ba}" (str.++ "#" (str.++ "." (str.++ "Z" (str.++ "x" "")))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.+ (re.union (re.range "#" "#")(re.union (re.range "&" "&")(re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range ";" ";")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))))))(re.++ (re.range "." ".")(re.++ ((_ re.loop 2 6) (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))) (str.to_re "")))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "$" (str.++ "8" (str.++ "9" (str.++ "9" "")))))

(define-fun Witness2 () String (str.++ "$" (str.++ "8" (str.++ "1" (str.++ "8" (str.++ "." (str.++ "8" (str.++ "4" ""))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.union (re.range "$" "$") (str.to_re ""))(re.++ (re.union (re.++ (re.+ (re.range "1" "9"))(re.++ ((_ re.loop 0 2) (re.range "0" "9")) (re.* (re.++ (re.range "," ",") ((_ re.loop 3 3) (re.range "0" "9")))))) (re.++ (re.+ (re.range "1" "9")) (re.* (re.range "0" "9"))))(re.++ (re.opt (re.++ (re.range "." ".") ((_ re.loop 2 2) (re.range "0" "9")))) (str.to_re "")))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "9" ""))

(define-fun Witness2 () String (str.++ "1" (str.++ "0" (str.++ "0" (str.++ "0" (str.++ "." (str.++ "0" (str.++ "0" ""))))))))

(assert (= regexA (re.union (re.++ (str.to_re "")(re.++ (re.opt (re.range "-" "-"))(re.++ (str.to_re (str.++ "1" (str.++ "0" (str.++ "0" (str.++ "0" "")))))(re.++ (re.opt (re.++ (re.range "." ".") ((_ re.loop 1 3) (re.range "0" "0")))) (str.to_re "")))))(re.union (re.++ (str.to_re "")(re.++ (re.opt (re.range "-" "-"))(re.++ ((_ re.loop 1 3) (re.range "0" "9")) (str.to_re ""))))(re.union (re.++ (str.to_re "")(re.++ (re.opt (re.range "-" "-"))(re.++ ((_ re.loop 1 3) (re.range "0" "9"))(re.++ (re.++ (re.range "." ".") ((_ re.loop 1 3) (re.range "0" "9"))) (str.to_re ""))))) (re.++ (str.to_re "")(re.++ (re.opt (re.range "-" "-"))(re.++ (re.++ (re.range "." ".") ((_ re.loop 1 3) (re.range "0" "9"))) (str.to_re "")))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "\u{a3}" (str.++ "." (str.++ "j" (str.++ "p" (str.++ "e" (str.++ "g" "")))))))

(define-fun Witness2 () String (str.++ "\u{a4}" (str.++ "M" (str.++ "." (str.++ "j" (str.++ "p" (str.++ "e" (str.++ "g" ""))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.+ (re.union (re.range "\u{00}" "\u{09}") (re.range "\u{0b}" "\u{ff}")))(re.++ (re.range "." ".")(re.++ (re.union (str.to_re (str.++ "j" (str.++ "p" (str.++ "g" ""))))(re.union (str.to_re (str.++ "j" (str.++ "p" (str.++ "e" (str.++ "g" "")))))(re.union (str.to_re (str.++ "J" (str.++ "P" (str.++ "G" "")))) (str.to_re (str.++ "J" (str.++ "P" (str.++ "E" (str.++ "G" "")))))))) (str.to_re "")))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "#" (str.++ "8" (str.++ "D" (str.++ "9" (str.++ "C" (str.++ "A" (str.++ "c" ""))))))))

(define-fun Witness2 () String (str.++ "#" (str.++ "8" (str.++ "f" (str.++ "f" (str.++ "5" (str.++ "C" (str.++ "8" ""))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.range "#" "#")(re.++ ((_ re.loop 6 6) (re.union (re.range "0" "9")(re.union (re.range "A" "F") (re.range "a" "f")))) (str.to_re ""))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "7" (str.++ " " (str.++ "1" (str.++ "4" (str.++ "1" (str.++ " " (str.++ "8" (str.++ "5" (str.++ "9" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "9" ""))))))))))))))

(define-fun Witness2 () String (str.++ "." (str.++ "9" (str.++ "6" (str.++ "9" (str.++ "9" (str.++ "9" (str.++ "8" (str.++ "0" "")))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.opt (re.++ (re.opt (re.++ (re.range "0" "9") (re.opt (re.union (re.range " " " ") (re.range "-" "."))))) (re.union (re.++ (re.range "(" "(")(re.++ ((_ re.loop 3 3) (re.range "0" "9")) (re.range ")" ")"))) ((_ re.loop 3 3) (re.range "0" "9")))))(re.++ (re.opt (re.union (re.range " " " ") (re.range "-" ".")))(re.++ ((_ re.loop 3 3) (re.range "0" "9"))(re.++ (re.opt (re.union (re.range " " " ") (re.range "-" ".")))(re.++ ((_ re.loop 4 4) (re.range "0" "9")) (str.to_re "")))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "2" (str.++ "5" (str.++ "2" (str.++ "W" (str.++ "0" (str.++ "\u{c4}" (str.++ "0" (str.++ "\u{ea}" (str.++ "0" ""))))))))))

(define-fun Witness2 () String (str.++ "1" (str.++ "9" (str.++ "2" (str.++ "O" (str.++ "0" (str.++ "\u{cb}" (str.++ "0" (str.++ "$" (str.++ "0" ""))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.union (re.++ (re.union (re.range "0" "0")(re.union (str.to_re (str.++ "1" (str.++ "2" (str.++ "8" ""))))(re.union (str.to_re (str.++ "1" (str.++ "9" (str.++ "2" ""))))(re.union (str.to_re (str.++ "2" (str.++ "2" (str.++ "4" ""))))(re.union (str.to_re (str.++ "2" (str.++ "4" (str.++ "0" ""))))(re.union (str.to_re (str.++ "2" (str.++ "4" (str.++ "8" ""))))(re.union (str.to_re (str.++ "2" (str.++ "5" (str.++ "2" "")))) (str.to_re (str.++ "2" (str.++ "5" (str.++ "4" "")))))))))))(re.++ (re.union (re.range "\u{00}" "\u{09}") (re.range "\u{0b}" "\u{ff}"))(re.++ (re.range "0" "0")(re.++ (re.union (re.range "\u{00}" "\u{09}") (re.range "\u{0b}" "\u{ff}"))(re.++ (re.range "0" "0")(re.++ (re.union (re.range "\u{00}" "\u{09}") (re.range "\u{0b}" "\u{ff}")) (re.range "0" "0")))))))(re.union (re.++ (str.to_re (str.++ "2" (str.++ "5" (str.++ "5" ""))))(re.++ (re.union (re.range "\u{00}" "\u{09}") (re.range "\u{0b}" "\u{ff}"))(re.++ (re.union (re.range "0" "0")(re.union (str.to_re (str.++ "1" (str.++ "2" (str.++ "8" ""))))(re.union (str.to_re (str.++ "1" (str.++ "9" (str.++ "2" ""))))(re.union (str.to_re (str.++ "2" (str.++ "2" (str.++ "4" ""))))(re.union (str.to_re (str.++ "2" (str.++ "4" (str.++ "0" ""))))(re.union (str.to_re (str.++ "2" (str.++ "4" (str.++ "8" ""))))(re.union (str.to_re (str.++ "2" (str.++ "5" (str.++ "2" "")))) (str.to_re (str.++ "2" (str.++ "5" (str.++ "4" "")))))))))))(re.++ (re.union (re.range "\u{00}" "\u{09}") (re.range "\u{0b}" "\u{ff}"))(re.++ (re.range "0" "0")(re.++ (re.union (re.range "\u{00}" "\u{09}") (re.range "\u{0b}" "\u{ff}")) (re.range "0" "0")))))))(re.union (re.++ (str.to_re (str.++ "2" (str.++ "5" (str.++ "5" ""))))(re.++ (re.union (re.range "\u{00}" "\u{09}") (re.range "\u{0b}" "\u{ff}"))(re.++ (str.to_re (str.++ "2" (str.++ "5" (str.++ "5" ""))))(re.++ (re.union (re.range "\u{00}" "\u{09}") (re.range "\u{0b}" "\u{ff}"))(re.++ (re.union (re.range "0" "0")(re.union (str.to_re (str.++ "1" (str.++ "2" (str.++ "8" ""))))(re.union (str.to_re (str.++ "1" (str.++ "9" (str.++ "2" ""))))(re.union (str.to_re (str.++ "2" (str.++ "2" (str.++ "4" ""))))(re.union (str.to_re (str.++ "2" (str.++ "4" (str.++ "0" ""))))(re.union (str.to_re (str.++ "2" (str.++ "4" (str.++ "8" ""))))(re.union (str.to_re (str.++ "2" (str.++ "5" (str.++ "2" "")))) (str.to_re (str.++ "2" (str.++ "5" (str.++ "4" "")))))))))))(re.++ (re.union (re.range "\u{00}" "\u{09}") (re.range "\u{0b}" "\u{ff}")) (re.range "0" "0"))))))) (re.++ (str.to_re (str.++ "2" (str.++ "5" (str.++ "5" ""))))(re.++ (re.union (re.range "\u{00}" "\u{09}") (re.range "\u{0b}" "\u{ff}"))(re.++ (str.to_re (str.++ "2" (str.++ "5" (str.++ "5" ""))))(re.++ (re.union (re.range "\u{00}" "\u{09}") (re.range "\u{0b}" "\u{ff}"))(re.++ (str.to_re (str.++ "2" (str.++ "5" (str.++ "5" ""))))(re.++ (re.union (re.range "\u{00}" "\u{09}") (re.range "\u{0b}" "\u{ff}")) (re.union (re.range "0" "0")(re.union (str.to_re (str.++ "1" (str.++ "2" (str.++ "8" ""))))(re.union (str.to_re (str.++ "1" (str.++ "9" (str.++ "2" ""))))(re.union (str.to_re (str.++ "2" (str.++ "2" (str.++ "4" ""))))(re.union (str.to_re (str.++ "2" (str.++ "4" (str.++ "0" ""))))(re.union (str.to_re (str.++ "2" (str.++ "4" (str.++ "8" ""))))(re.union (str.to_re (str.++ "2" (str.++ "5" (str.++ "2" "")))) (str.to_re (str.++ "2" (str.++ "5" (str.++ "4" "")))))))))))))))))))) (str.to_re "")))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "9" ""))

(define-fun Witness2 () String (str.++ "1" (str.++ "6" (str.++ "." (str.++ "0" (str.++ "7" ""))))))

(assert (= regexA (re.union (re.++ (str.to_re "")(re.++ (re.opt (re.range "0" "2"))(re.++ (re.range "0" "3")(re.++ (re.opt (re.++ (re.range "." ".") ((_ re.loop 1 2) (re.range "0" "9")))) (str.to_re "")))))(re.union (re.++ (str.to_re "")(re.++ (re.opt (re.range "0" "1"))(re.++ (re.range "0" "9")(re.++ (re.opt (re.++ (re.range "." ".") ((_ re.loop 1 2) (re.range "0" "9")))) (str.to_re "")))))(re.union (re.++ (str.to_re "")(re.++ (re.opt (re.range "-" "-"))(re.++ (str.to_re (str.++ "2" (str.++ "4" "")))(re.++ (re.opt (re.++ (re.range "." ".") ((_ re.loop 1 2) (re.range "0" "0")))) (str.to_re ""))))) (re.++ (str.to_re "")(re.++ (re.range "0" "9")(re.++ (re.opt (re.++ (re.range "." ".") ((_ re.loop 1 2) (re.range "0" "9")))) (str.to_re "")))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "9" (str.++ "9" (str.++ "9" (str.++ " " (str.++ "9" (str.++ "9" (str.++ "1" (str.++ " " (str.++ "9" (str.++ "7" (str.++ "8" (str.++ "9" "")))))))))))))

(define-fun Witness2 () String (str.++ "(" (str.++ "5" (str.++ "8" (str.++ "8" (str.++ ")" (str.++ "2" (str.++ "9" (str.++ "8" (str.++ "9" (str.++ "4" (str.++ "8" (str.++ "8" "")))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.opt (re.union (re.++ (re.union (re.++ (re.range "(" "(")(re.++ ((_ re.loop 3 3) (re.range "0" "9")) (re.range ")" ")"))) ((_ re.loop 3 3) (re.range "0" "9"))) (re.union (re.range " " " ") (re.range "-" "."))) (re.union (re.++ (re.range "(" "(")(re.++ ((_ re.loop 3 3) (re.range "0" "9")) (re.range ")" ")"))) ((_ re.loop 3 3) (re.range "0" "9")))))(re.++ ((_ re.loop 3 3) (re.range "0" "9"))(re.++ (re.opt (re.union (re.range " " " ") (re.range "-" ".")))(re.++ ((_ re.loop 4 4) (re.range "0" "9"))(re.++ (re.opt (re.++ (re.opt (re.union (re.range " " " ") (re.range "-" ".")))(re.++ (re.union (re.++ (re.union (re.range "E" "E") (re.range "e" "e")) (str.to_re (str.++ "x" (str.++ "t" "")))) (re.union (re.range "X" "X") (re.range "x" "x")))(re.++ (re.opt (re.range "." "."))(re.++ (re.opt (re.union (re.range " " " ") (re.range "-" "."))) ((_ re.loop 4 4) (re.range "0" "9"))))))) (str.to_re "")))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "G" (str.++ "U" "")))

(define-fun Witness2 () String (str.++ "U" (str.++ "T" "")))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.union (str.to_re (str.++ "A" (str.++ "L" "")))(re.union (str.to_re (str.++ "A" (str.++ "K" "")))(re.union (str.to_re (str.++ "A" (str.++ "S" "")))(re.union (str.to_re (str.++ "A" (str.++ "Z" "")))(re.union (str.to_re (str.++ "A" (str.++ "R" "")))(re.union (str.to_re (str.++ "C" (str.++ "A" "")))(re.union (str.to_re (str.++ "C" (str.++ "O" "")))(re.union (str.to_re (str.++ "C" (str.++ "T" "")))(re.union (str.to_re (str.++ "D" (str.++ "E" "")))(re.union (str.to_re (str.++ "D" (str.++ "C" "")))(re.union (str.to_re (str.++ "F" (str.++ "M" "")))(re.union (str.to_re (str.++ "F" (str.++ "L" "")))(re.union (str.to_re (str.++ "G" (str.++ "A" "")))(re.union (str.to_re (str.++ "G" (str.++ "U" "")))(re.union (str.to_re (str.++ "H" (str.++ "I" "")))(re.union (str.to_re (str.++ "I" (str.++ "D" "")))(re.union (str.to_re (str.++ "I" (str.++ "L" "")))(re.union (str.to_re (str.++ "I" (str.++ "N" "")))(re.union (str.to_re (str.++ "I" (str.++ "A" "")))(re.union (str.to_re (str.++ "K" (str.++ "S" "")))(re.union (str.to_re (str.++ "K" (str.++ "Y" "")))(re.union (str.to_re (str.++ "L" (str.++ "A" "")))(re.union (str.to_re (str.++ "M" (str.++ "E" "")))(re.union (str.to_re (str.++ "M" (str.++ "H" "")))(re.union (str.to_re (str.++ "M" (str.++ "D" "")))(re.union (str.to_re (str.++ "M" (str.++ "A" "")))(re.union (str.to_re (str.++ "M" (str.++ "I" "")))(re.union (str.to_re (str.++ "M" (str.++ "N" "")))(re.union (str.to_re (str.++ "M" (str.++ "S" "")))(re.union (str.to_re (str.++ "M" (str.++ "O" "")))(re.union (str.to_re (str.++ "M" (str.++ "T" "")))(re.union (str.to_re (str.++ "N" (str.++ "E" "")))(re.union (str.to_re (str.++ "N" (str.++ "V" "")))(re.union (str.to_re (str.++ "N" (str.++ "H" "")))(re.union (str.to_re (str.++ "N" (str.++ "J" "")))(re.union (str.to_re (str.++ "N" (str.++ "M" "")))(re.union (str.to_re (str.++ "N" (str.++ "Y" "")))(re.union (str.to_re (str.++ "N" (str.++ "C" "")))(re.union (str.to_re (str.++ "N" (str.++ "D" "")))(re.union (str.to_re (str.++ "M" (str.++ "P" "")))(re.union (str.to_re (str.++ "O" (str.++ "H" "")))(re.union (str.to_re (str.++ "O" (str.++ "K" "")))(re.union (str.to_re (str.++ "O" (str.++ "R" "")))(re.union (str.to_re (str.++ "P" (str.++ "W" "")))(re.union (str.to_re (str.++ "P" (str.++ "A" "")))(re.union (str.to_re (str.++ "P" (str.++ "R" "")))(re.union (str.to_re (str.++ "R" (str.++ "I" "")))(re.union (str.to_re (str.++ "S" (str.++ "C" "")))(re.union (str.to_re (str.++ "S" (str.++ "D" "")))(re.union (str.to_re (str.++ "T" (str.++ "N" "")))(re.union (str.to_re (str.++ "T" (str.++ "X" "")))(re.union (str.to_re (str.++ "U" (str.++ "T" "")))(re.union (str.to_re (str.++ "V" (str.++ "T" "")))(re.union (str.to_re (str.++ "V" (str.++ "I" "")))(re.union (str.to_re (str.++ "V" (str.++ "A" "")))(re.union (str.to_re (str.++ "W" (str.++ "A" "")))(re.union (str.to_re (str.++ "W" (str.++ "V" "")))(re.union (str.to_re (str.++ "W" (str.++ "I" ""))) (str.to_re (str.++ "W" (str.++ "Y" ""))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) (str.to_re "")))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "0" (str.++ "0" (str.++ "3" (str.++ "3" "")))))

(define-fun Witness2 () String (str.++ "0" (str.++ "3" (str.++ "7" ""))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.++ (re.opt (re.range "0" "0")) ((_ re.loop 3 3) (re.range "0" "7"))) (str.to_re "")))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "Y" (str.++ "'" (str.++ "P" (str.++ " " (str.++ "g" (str.++ " " "")))))))

(define-fun Witness2 () String (str.++ "l" (str.++ "q" (str.++ "," (str.++ "s" (str.++ "M" (str.++ "'" (str.++ "Z" (str.++ " " (str.++ "Y" (str.++ "a" (str.++ "i" (str.++ "z" (str.++ "M" (str.++ "D" (str.++ "," (str.++ " " (str.++ "W" (str.++ "a" (str.++ "z" (str.++ "E" (str.++ "d" (str.++ "l" (str.++ " " ""))))))))))))))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.+ (re.++ (re.+ (re.union (re.range "A" "Z") (re.range "a" "z")))(re.++ (re.opt (re.union (re.range "'" "'") (re.range "," "."))) (re.* (re.union (re.range " " " ")(re.union (re.range "A" "Z") (re.range "a" "z")))))))(re.++ (re.range " " " ")(re.++ (re.+ (re.++ (re.+ (re.union (re.range "A" "Z") (re.range "a" "z")))(re.++ (re.opt (re.union (re.range "'" "'") (re.range "," "."))) (re.+ (re.union (re.range " " " ")(re.union (re.range "A" "Z") (re.range "a" "z"))))))) (str.to_re "")))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ " " ""))

(define-fun Witness2 () String (str.++ " " (str.++ "8" "")))

(assert (= regexA (re.++ (str.to_re "")(re.++ ((_ re.loop 0 5) (re.range "0" "9"))(re.++ (re.opt (re.range " " " "))(re.++ ((_ re.loop 0 6) (re.range "0" "9")) (str.to_re "")))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "Z" (str.++ "u" (str.++ "8" (str.++ "8" (str.++ "8" (str.++ "5" (str.++ "8" (str.++ "4" (str.++ "W" ""))))))))))

(define-fun Witness2 () String (str.++ "G" (str.++ "e" (str.++ "4" (str.++ "8" (str.++ "1" (str.++ "9" (str.++ "1" (str.++ "9" (str.++ "u" ""))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ ((_ re.loop 2 2) (re.union (re.range "A" "Z") (re.range "a" "z")))(re.++ ((_ re.loop 6 6) (re.range "0" "9"))(re.++ (re.union (re.range "A" "Z") (re.range "a" "z")) (str.to_re "")))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "x" (str.++ "@" (str.++ "0" (str.++ "G" (str.++ "8" (str.++ "-" "")))))))

(define-fun Witness2 () String (str.++ "f" (str.++ "." (str.++ "@" (str.++ "a" (str.++ "v" (str.++ "x" (str.++ "-" (str.++ "j" (str.++ "-" ""))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.+ (re.union (re.range "-" ".")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_") (re.range "a" "z"))))))(re.++ (re.range "@" "@")(re.++ (re.+ (re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))))(re.++ (re.union (re.range "\u{00}" "\u{09}") (re.range "\u{0b}" "\u{ff}"))(re.++ (re.+ (re.union (re.range "-" ".")(re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z"))))) (str.to_re "")))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "9" (str.++ "6" (str.++ "N" (str.++ "@" (str.++ "8" (str.++ "." (str.++ "Z" (str.++ "O" (str.++ "b" ""))))))))))

(define-fun Witness2 () String (str.++ "8" (str.++ "D" (str.++ "8" (str.++ "." (str.++ "9" (str.++ "@" (str.++ "y" (str.++ "-" (str.++ "\u{aa}" (str.++ "X" (str.++ "." (str.++ "z" (str.++ "D" (str.++ "v" (str.++ "i" ""))))))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.* (re.union (re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))) (re.+ (re.range "_" "_")))(re.union (re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))) (re.+ (re.range "-" "-")))(re.union (re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))) (re.+ (re.range "." "."))) (re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))) (re.+ (re.range "+" "+")))))))(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z"))))(re.++ (re.range "@" "@")(re.++ (re.* (re.union (re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))) (re.+ (re.range "-" "-"))) (re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))) (re.range "." "."))))(re.++ ((_ re.loop 1 63) (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))(re.++ (re.range "." ".")(re.++ ((_ re.loop 2 6) (re.union (re.range "A" "Z") (re.range "a" "z"))) (str.to_re "")))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "9" (str.++ "8" (str.++ "9" (str.++ "8" (str.++ "8" ""))))))

(define-fun Witness2 () String (str.++ "8" (str.++ "9" (str.++ "1" (str.++ "1" (str.++ "5" ""))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ ((_ re.loop 5 5) (re.range "0" "9"))(re.++ (re.opt (re.++ (re.opt (re.union (re.range " " " ")(re.union (re.range "-" "-") (re.range "/" "/")))) ((_ re.loop 4 4) (re.range "0" "9")))) (str.to_re ""))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "s" (str.++ "6" (str.++ "X" (str.++ "\u{85}" (str.++ "3" (str.++ "i" (str.++ "8" ""))))))))

(define-fun Witness2 () String (str.++ "Z" (str.++ "9" (str.++ "x" (str.++ "4" (str.++ "e" (str.++ "0" "")))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.union (re.range "A" "Z") (re.range "a" "z"))(re.++ (re.range "0" "9")(re.++ (re.union (re.range "A" "Z") (re.range "a" "z"))(re.++ (re.opt (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (re.range "0" "9")(re.++ (re.union (re.range "A" "Z") (re.range "a" "z"))(re.++ (re.range "0" "9") (str.to_re "")))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "f" (str.++ ":" (str.++ "\u{aa}" (str.++ "c" (str.++ "\u{5c}" (str.++ "\u{5c}" (str.++ "\u{85}" (str.++ "b" (str.++ "2" (str.++ "\u{1b}" (str.++ "z" (str.++ "i" (str.++ "p" ""))))))))))))))

(define-fun Witness2 () String (str.++ "n" (str.++ ":" (str.++ "\u{aa}" (str.++ "\u{e1}" (str.++ "\u{5c}" (str.++ "\u{5c}" (str.++ "\u{0b}" (str.++ "9" (str.++ "I" (str.++ "7" (str.++ "\u{c4}" (str.++ "\u{5c}" (str.++ "\u{f6}" (str.++ "\u{b5}" (str.++ "i" (str.++ "z" (str.++ "i" (str.++ "p" "")))))))))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.union (re.++ (re.range "A" "z")(re.++ (re.range ":" ":")(re.++ (re.+ (re.union (re.++ (re.range "\u{5c}" "\u{5c}") (re.+ (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "*" "+")(re.union (re.range "-" ".")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{85}" "\u{85}")(re.union (re.range "\u{a0}" "\u{a0}")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))))))))) (re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))) (re.range "\u{5c}" "\u{5c}")))) (re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))(re.++ (re.union (re.range "\u{00}" "\u{09}") (re.range "\u{0b}" "\u{ff}")) (str.to_re (str.++ "z" (str.++ "i" (str.++ "p" ""))))))))) (re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))(re.++ (re.union (re.range "\u{00}" "\u{09}") (re.range "\u{0b}" "\u{ff}")) (str.to_re (str.++ "Z" (str.++ "I" (str.++ "P" ""))))))) (str.to_re "")))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "1" (str.++ "-" (str.++ "0" (str.++ "9" (str.++ "9" (str.++ "2" (str.++ "9" (str.++ "2" (str.++ "7" (str.++ "8" (str.++ "2" (str.++ "8" "")))))))))))))

(define-fun Witness2 () String (str.++ "1" (str.++ "-" (str.++ "0" (str.++ "7" (str.++ "0" (str.++ "-" (str.++ "2" (str.++ "7" (str.++ "1" (str.++ "-" (str.++ "8" (str.++ "9" (str.++ "2" (str.++ "4" "")))))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.opt (re.++ (re.opt (re.range "1" "1"))(re.++ (re.++ (re.opt (re.range "-" "-")) ((_ re.loop 3 3) (re.range "0" "9"))) (re.opt (re.range "-" "-")))))(re.++ ((_ re.loop 3 3) (re.range "0" "9"))(re.++ (re.++ (re.opt (re.range "-" "-")) ((_ re.loop 4 4) (re.range "0" "9"))) (str.to_re "")))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "+" (str.++ "3" (str.++ "8" (str.++ "0" (str.++ "-" (str.++ "9" (str.++ "9" (str.++ "2" (str.++ "-" (str.++ "9" (str.++ "2" (str.++ "8" (str.++ "4" ""))))))))))))))

(define-fun Witness2 () String (str.++ "+" (str.++ "1" (str.++ "8" (str.++ "8" (str.++ "-" (str.++ "2" (str.++ "9" (str.++ "0" (str.++ "-" (str.++ "8" (str.++ "7" (str.++ "4" (str.++ "8" ""))))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.range "+" "+")(re.++ (re.range "0" "9")(re.++ ((_ re.loop 2 2) (re.range "0" "9"))(re.++ (re.range "-" "-")(re.++ ((_ re.loop 3 3) (re.range "0" "9"))(re.++ (re.range "-" "-")(re.++ ((_ re.loop 4 4) (re.range "0" "9")) (str.to_re "")))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "0" (str.++ "9" (str.++ ":" (str.++ "2" (str.++ "8" (str.++ "A" (str.++ "M" ""))))))))

(define-fun Witness2 () String (str.++ "2" (str.++ "3" (str.++ ":" (str.++ "1" (str.++ "2" (str.++ "M" (str.++ "A" ""))))))))

(assert (= regexA (re.union (re.++ (str.to_re "")(re.++ (re.union (re.range "0" "9")(re.union (re.++ (re.range "0" "1") (re.range "0" "9")) (re.++ (re.range "2" "2") (re.range "0" "3"))))(re.++ (re.range ":" ":")(re.++ (re.++ (re.range "0" "5") (re.range "0" "9"))(re.++ (re.opt (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ ((_ re.loop 2 2) (re.union (re.range "A" "A")(re.union (re.range "M" "M")(re.union (re.range "P" "P")(re.union (re.range "a" "a")(re.union (re.range "m" "m")(re.union (re.range "p" "p") (re.range "|" "|")))))))) (str.to_re ""))))))) (re.++ (str.to_re "")(re.++ (re.union (re.range "0" "9")(re.union (re.++ (re.range "1" "1") (re.range "0" "9")) (re.++ (re.range "2" "2") (re.range "0" "3"))))(re.++ (re.opt (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ ((_ re.loop 2 2) (re.union (re.range "A" "A")(re.union (re.range "M" "M")(re.union (re.range "P" "P")(re.union (re.range "a" "a")(re.union (re.range "m" "m")(re.union (re.range "p" "p") (re.range "|" "|")))))))) (str.to_re ""))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "z" (str.++ "1" (str.++ "p" (str.++ "a" (str.++ "_" (str.++ "@" (str.++ "t" (str.++ "l" (str.++ "e" (str.++ "n" (str.++ "." (str.++ "p" (str.++ "l" ""))))))))))))))

(define-fun Witness2 () String (str.++ "s" (str.++ "_" (str.++ "_" (str.++ "_" (str.++ "_" (str.++ "y" (str.++ "z" (str.++ "@" (str.++ "t" (str.++ "l" (str.++ "e" (str.++ "n" (str.++ "." (str.++ "p" (str.++ "l" ""))))))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.++ (re.range "a" "z") ((_ re.loop 2 24) (re.union (re.range "-" ".")(re.union (re.range "0" "9")(re.union (re.range "_" "_") (re.range "a" "z"))))))(re.++ (str.to_re (str.++ "@" (str.++ "t" (str.++ "l" (str.++ "e" (str.++ "n" (str.++ "." (str.++ "p" (str.++ "l" ""))))))))) (str.to_re ""))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "5" (str.++ "9" (str.++ "8" (str.++ "6" (str.++ "6" (str.++ "8" (str.++ "6" (str.++ "8" "")))))))))

(define-fun Witness2 () String (str.++ "9" (str.++ "9" (str.++ "1" (str.++ "8" (str.++ "," ""))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.+ (re.++ ((_ re.loop 4 4) (re.range "0" "9")) (re.opt (re.range "," ",")))) (str.to_re "")))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "2" (str.++ "9" (str.++ "1" (str.++ "0" (str.++ "1" (str.++ "1" (str.++ "V" (str.++ "2" (str.++ "5" ""))))))))))

(define-fun Witness2 () String (str.++ "9" (str.++ "9" (str.++ "6" (str.++ "9" (str.++ "0" (str.++ "8" (str.++ "\u{f7}" (str.++ "2" (str.++ "9" (str.++ "\u{1e}" (str.++ "2" (str.++ "3" (str.++ "\u{e3}" (str.++ "2" (str.++ "2" (str.++ "1" (str.++ "6" ""))))))))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ ((_ re.loop 4 4) (re.range "0" "9"))(re.++ (re.opt (re.union (re.range "\u{00}" "/") (re.range ":" "\u{ff}")))(re.++ (re.union (re.++ (re.range "0" "0") (re.range "1" "9")) (re.++ (re.range "1" "1") (re.range "0" "2")))(re.++ (re.opt (re.union (re.range "\u{00}" "/") (re.range ":" "\u{ff}")))(re.++ (re.union (re.++ (re.range "1" "2") (re.range "0" "9"))(re.union (re.++ (re.range "0" "0") (re.range "1" "9")) (re.++ (re.range "3" "3") (re.range "0" "1"))))(re.++ (re.opt (re.++ (re.opt (re.union (re.range "\u{00}" "/") (re.range ":" "\u{ff}")))(re.++ (re.union (re.++ (re.range "0" "1") (re.range "0" "9")) (re.++ (re.range "2" "2") (re.range "0" "3")))(re.++ (re.opt (re.union (re.range "\u{00}" "/") (re.range ":" "\u{ff}")))(re.++ (re.++ (re.range "0" "5") (re.range "0" "9"))(re.++ (re.opt (re.union (re.range "\u{00}" "/") (re.range ":" "\u{ff}"))) (re.opt (re.++ (re.range "0" "5") (re.range "0" "9"))))))))) (str.to_re ""))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "X" ""))

(define-fun Witness2 () String (str.++ "w" ""))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.union (re.range "A" "Z") (re.range "a" "z")) (str.to_re "")))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "\u{9d}" (str.++ "p" (str.++ "e" (str.++ "n" (str.++ "I" (str.++ "$" "")))))))

(define-fun Witness2 () String (str.++ "\u{f4}" (str.++ "P" (str.++ "e" (str.++ "n" (str.++ "i" (str.++ "s" "")))))))

(assert (= regexA (re.++ (re.* (re.union (re.range "\u{00}" "\u{09}") (re.range "\u{0b}" "\u{ff}")))(re.++ (re.union (re.range "P" "P") (re.range "p" "p"))(re.++ (str.to_re (str.++ "e" (str.++ "n" "")))(re.++ (re.union (re.range "1" "1")(re.union (re.range "I" "I") (re.range "i" "i")))(re.++ (re.union (re.range "$" "$") (re.range "s" "s")) (re.* (re.union (re.range "\u{00}" "\u{09}") (re.range "\u{0b}" "\u{ff}"))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "0" (str.++ "6" (str.++ "/" (str.++ "8" (str.++ "8" ""))))))

(define-fun Witness2 () String (str.++ "1" (str.++ "1" (str.++ "/" (str.++ "9" (str.++ "8" ""))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.union (re.++ (re.range "0" "0") (re.range "1" "9")) (re.++ (re.range "1" "1") (re.range "0" "2")))(re.++ (re.range "/" "/")(re.++ ((_ re.loop 2 2) (re.range "0" "9")) (str.to_re "")))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "t" ""))

(define-fun Witness2 () String (str.++ "-" (str.++ "1" "")))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.union (re.++ (re.+ (re.union (re.range "V" "V") (re.range "v" "v"))) (re.opt (re.++ (str.to_re (str.++ "e" (str.++ "r" (str.++ "d" (str.++ "a" (str.++ "d" (str.++ "e" ""))))))) (re.opt (str.to_re (str.++ "i" (str.++ "r" (str.++ "o" ""))))))))(re.union (re.++ (re.+ (re.union (re.range "F" "F") (re.range "f" "f"))) (re.opt (re.++ (str.to_re (str.++ "a" (str.++ "l" (str.++ "s" "")))) (re.union (re.range "e" "e") (re.range "o" "o")))))(re.union (re.++ (re.+ (re.union (re.range "T" "T") (re.range "t" "t"))) (re.opt (str.to_re (str.++ "r" (str.++ "u" (str.++ "e" ""))))))(re.union (re.range "0" "0") (re.++ (re.opt (re.union (re.range "+" "+") (re.range "-" "-"))) (re.range "1" "1")))))) (str.to_re "")))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "0" (str.++ "5" (str.++ "-" (str.++ "1" (str.++ "0" (str.++ "-" (str.++ "1" (str.++ "9" (str.++ "0" (str.++ "7" "")))))))))))

(define-fun Witness2 () String (str.++ "3" (str.++ "1" (str.++ "-" (str.++ "1" (str.++ "1" (str.++ "-" (str.++ "1" (str.++ "9" (str.++ "3" (str.++ "0" "")))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.union (re.++ (re.range "0" "0") (re.range "1" "9"))(re.union (re.++ (re.range "1" "2") (re.range "0" "9")) (re.++ (re.range "3" "3") (re.range "0" "1"))))(re.++ (re.range "-" "-")(re.++ (re.union (re.++ (re.range "0" "0") (re.range "1" "9"))(re.union (str.to_re (str.++ "1" (str.++ "1" "")))(re.union (str.to_re (str.++ "1" (str.++ "2" ""))) (str.to_re (str.++ "1" (str.++ "0" ""))))))(re.++ (re.range "-" "-")(re.++ (re.++ (str.to_re (str.++ "1" (str.++ "9" ""))) ((_ re.loop 2 2) (re.range "0" "9"))) (str.to_re "")))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "7" (str.++ "7" (str.++ "," (str.++ "6" (str.++ "8" (str.++ "9" "")))))))

(define-fun Witness2 () String (str.++ "9" (str.++ "1" (str.++ "8" (str.++ "," (str.++ "8" (str.++ "6" (str.++ "9" (str.++ "," (str.++ "0" (str.++ "9" (str.++ "5" ""))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.opt (re.range "$" "$"))(re.++ (re.union (re.++ (re.range "1" "9")(re.++ ((_ re.loop 0 2) (re.range "0" "9")) (re.* (re.++ (re.range "," ",") ((_ re.loop 3 3) (re.range "0" "9"))))))(re.union (re.++ (re.range "1" "9") (re.* (re.range "0" "9"))) (re.range "0" "0")))(re.++ (re.opt (re.++ (re.range "." ".") ((_ re.loop 2 2) (re.range "0" "9")))) (str.to_re "")))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "2" (str.++ "1" (str.++ "4" (str.++ "9" (str.++ "8" (str.++ "9" (str.++ "8" (str.++ "1" (str.++ "9" (str.++ "5" (str.++ "1" (str.++ "2" (str.++ "6" (str.++ "2" (str.++ "6" ""))))))))))))))))

(define-fun Witness2 () String (str.++ "2" (str.++ "0" (str.++ "1" (str.++ "4" (str.++ "3" (str.++ "8" (str.++ "9" (str.++ "7" (str.++ "7" (str.++ "9" (str.++ "9" (str.++ "9" (str.++ "2" (str.++ "7" (str.++ "0" ""))))))))))))))))

(assert (= regexA (re.++ (re.union (re.++ (str.to_re "") (str.to_re (str.++ "2" (str.++ "0" (str.++ "1" (str.++ "4" "")))))) (re.++ (str.to_re "") (str.to_re (str.++ "2" (str.++ "1" (str.++ "4" (str.++ "9" "")))))))(re.++ ((_ re.loop 11 11) (re.range "0" "9")) (str.to_re "")))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "\u{85}" (str.++ "\u{5c}" (str.++ "+" (str.++ "*" (str.++ "+" (str.++ "\u{0d}" "")))))))

(define-fun Witness2 () String (str.++ ">" (str.++ ">" (str.++ "-" (str.++ "*" (str.++ "<" (str.++ "+" (str.++ "\u{85}" ""))))))))

(assert (= regexA (re.++ (re.union (str.to_re "") (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (re.union (re.++ (re.union (re.+ (re.range ")" ")"))(re.union (re.+ (re.range "(" "("))(re.union (re.+ (re.range "}" "}"))(re.union (re.+ (re.range "{" "{"))(re.union (re.+ (re.range "]" "]"))(re.union (re.+ (re.range "[" "["))(re.union (re.+ (re.range "|" "|"))(re.union (re.+ (re.range "\u{5c}" "\u{5c}"))(re.union (re.+ (re.range "/" "/"))(re.union (re.+ (re.range ">" ">"))(re.union (re.+ (re.range "<" "<"))(re.union (re.+ (re.range "D" "D")) (re.union (re.range "!" "!")(re.union (re.range "#" "$")(re.union (re.range "0" "0")(re.union (re.range "@" "@")(re.union (re.range "O" "O")(re.union (re.range "S" "S")(re.union (re.range "X" "X")(re.union (re.range "Z" "Z")(re.union (re.range "o" "o") (re.range "x" "x"))))))))))))))))))))))(re.++ (re.opt (re.union (re.range "+" "+")(re.union (re.range "-" "-")(re.union (re.range "o" "o") (re.range "~" "~")))))(re.++ (re.opt (re.union (re.range "*" "*") (re.range "," ","))) (re.union (re.++ (re.range "<" "<") (re.union (re.range "+" "+")(re.union (re.range ":" ";") (re.range "=" "=")))) (re.union (re.range "+" "+") (re.range ":" "=")))))) (re.++ (re.union (re.+ (re.range ")" ")"))(re.union (re.+ (re.range "(" "("))(re.union (re.+ (re.range "}" "}"))(re.union (re.+ (re.range "{" "{"))(re.union (re.+ (re.range "]" "]"))(re.union (re.+ (re.range "[" "["))(re.union (re.+ (re.range "|" "|"))(re.union (re.+ (re.range "\u{5c}" "\u{5c}"))(re.union (re.+ (re.range "/" "/"))(re.union (re.+ (re.range ">" ">"))(re.union (re.+ (re.range "<" "<")) (re.+ (re.range "D" "D")))))))))))))(re.++ (re.opt (re.union (re.range "+" "+")(re.union (re.range "-" "-")(re.union (re.range "o" "o") (re.range "~" "~")))))(re.++ (re.union (re.range "8" "8")(re.union (re.range "X" "X") (re.range "x" "x"))) (re.opt (re.range "<" "<")))))) (re.union (str.to_re "") (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "9" (str.++ "1" (str.++ "1" (str.++ "2" (str.++ "9" (str.++ "8" "")))))))

(define-fun Witness2 () String (str.++ "5" (str.++ "8" (str.++ "9" (str.++ "5" (str.++ "8" (str.++ "8" (str.++ "3" ""))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.* (re.++ ((_ re.loop 3 3) (re.range "0" "9")) (re.opt (re.range "-" "-"))))(re.++ ((_ re.loop 6 7) (re.range "0" "9")) (str.to_re ""))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "4" (str.++ "8" (str.++ "." (str.++ "9" (str.++ "2" (str.++ "8" (str.++ "." (str.++ "2" (str.++ "9" (str.++ "1" (str.++ "-" (str.++ "9" "")))))))))))))

(define-fun Witness2 () String (str.++ "6" (str.++ "9" (str.++ "." (str.++ "3" (str.++ "8" (str.++ "2" (str.++ "." (str.++ "8" (str.++ "7" (str.++ "8" "")))))))))))

(assert (= regexA (re.union (re.++ (str.to_re "")(re.++ (re.++ ((_ re.loop 2 2) (re.range "0" "9"))(re.++ (re.range "." ".")(re.++ ((_ re.loop 3 3) (re.range "0" "9"))(re.++ (re.range "." ".")(re.++ ((_ re.loop 3 3) (re.range "0" "9"))(re.++ (re.range "-" "-") (re.range "0" "9"))))))) (str.to_re ""))) (re.++ (str.to_re "")(re.++ (re.++ ((_ re.loop 2 2) (re.range "0" "9"))(re.++ (re.range "." ".")(re.++ ((_ re.loop 3 3) (re.range "0" "9"))(re.++ (re.range "." ".") ((_ re.loop 3 3) (re.range "0" "9")))))) (str.to_re ""))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "M" (str.++ "a" (str.++ "r" (str.++ "c" (str.++ "h" ""))))))

(define-fun Witness2 () String (str.++ "D" (str.++ "e" (str.++ "c" (str.++ "e" (str.++ "m" (str.++ "b" (str.++ "e" (str.++ "r" "")))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.union (re.++ (re.range "J" "J") (re.union (str.to_re (str.++ "a" (str.++ "n" (str.++ "u" (str.++ "a" (str.++ "r" (str.++ "y" ""))))))) (re.++ (re.range "u" "u") (re.union (str.to_re (str.++ "n" (str.++ "e" ""))) (str.to_re (str.++ "l" (str.++ "y" "")))))))(re.union (str.to_re (str.++ "F" (str.++ "e" (str.++ "b" (str.++ "r" (str.++ "u" (str.++ "a" (str.++ "r" (str.++ "y" "")))))))))(re.union (re.++ (str.to_re (str.++ "M" (str.++ "a" ""))) (re.union (str.to_re (str.++ "r" (str.++ "c" (str.++ "h" "")))) (re.range "y" "y")))(re.union (re.++ (re.range "A" "A") (re.union (str.to_re (str.++ "p" (str.++ "r" (str.++ "i" (str.++ "l" ""))))) (str.to_re (str.++ "u" (str.++ "g" (str.++ "u" (str.++ "s" (str.++ "t" "")))))))) (re.++ (re.union (re.++ (re.union (str.to_re (str.++ "S" (str.++ "e" (str.++ "p" (str.++ "t" "")))))(re.union (str.to_re (str.++ "N" (str.++ "o" (str.++ "v" "")))) (str.to_re (str.++ "D" (str.++ "e" (str.++ "c" "")))))) (str.to_re (str.++ "e" (str.++ "m" "")))) (str.to_re (str.++ "O" (str.++ "c" (str.++ "t" (str.++ "o" "")))))) (str.to_re (str.++ "b" (str.++ "e" (str.++ "r" ""))))))))) (str.to_re "")))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "\u{85}" (str.++ "\u{22}" (str.++ "\u{22}" (str.++ "@" (str.++ "m" (str.++ "-" "")))))))

(define-fun Witness2 () String (str.++ "`" (str.++ "@" (str.++ "[" (str.++ "]" (str.++ " " (str.++ "\u{0a}" "")))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (re.++ (re.union (re.++ (re.+ (re.union (re.range "!" "!")(re.union (re.range "#" "'")(re.union (re.range "*" "+")(re.union (re.range "-" "-")(re.union (re.range "/" "9")(re.union (re.range "=" "=")(re.union (re.range "?" "?") (re.range "A" "~"))))))))) (re.* (re.++ (re.range "." ".") (re.+ (re.union (re.range "!" "!")(re.union (re.range "#" "'")(re.union (re.range "*" "+")(re.union (re.range "-" "-")(re.union (re.range "/" "9")(re.union (re.range "=" "=")(re.union (re.range "?" "?") (re.range "A" "~")))))))))))) (re.++ (re.range "\u{22}" "\u{22}")(re.++ (re.* (re.union (re.union (re.range "\u{00}" "\u{09}")(re.union (re.range "\u{0b}" "\u{0c}")(re.union (re.range "\u{0e}" "!")(re.union (re.range "#" "[") (re.range "]" "\u{ff}"))))) (re.++ (re.range "\u{5c}" "\u{5c}") (re.union (re.range "\u{00}" "\u{09}") (re.range "\u{0b}" "\u{ff}"))))) (re.range "\u{22}" "\u{22}"))))(re.++ (re.range "@" "@") (re.union (re.++ (re.union (re.range "A" "Z") (re.range "a" "z"))(re.++ (re.* (re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))))(re.++ (re.opt (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))) (re.* (re.++ (re.range "." ".")(re.++ (re.union (re.range "A" "Z") (re.range "a" "z"))(re.++ (re.* (re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z"))))) (re.opt (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z"))))))))))) (re.++ (re.range "[" "[")(re.++ (re.* (re.union (re.union (re.range "\u{00}" "\u{09}")(re.union (re.range "\u{0b}" "\u{0c}")(re.union (re.range "\u{0e}" "Z") (re.range "^" "\u{ff}")))) (re.++ (re.range "\u{5c}" "\u{5c}") (re.union (re.range "\u{00}" "\u{09}") (re.range "\u{0b}" "\u{ff}"))))) (re.range "]" "]"))))))(re.++ (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))) (str.to_re "")))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "3" (str.++ "1" "")))

(define-fun Witness2 () String (str.++ "0" (str.++ "8" "")))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.union (re.++ (re.opt (re.range "0" "0")) (re.range "1" "9"))(re.union (re.++ (re.range "1" "2") (re.range "0" "9"))(re.union (str.to_re (str.++ "3" (str.++ "0" ""))) (str.to_re (str.++ "3" (str.++ "1" "")))))) (str.to_re "")))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "8" (str.++ "/" (str.++ "3" (str.++ "0" (str.++ "/" (str.++ "2" (str.++ "5" (str.++ "4" (str.++ "7" ""))))))))))

(define-fun Witness2 () String (str.++ "5" (str.++ "/" (str.++ "2" (str.++ "1" (str.++ "/" (str.++ "1" (str.++ "1" (str.++ "6" (str.++ "8" ""))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.union (re.++ (re.opt (re.range "0" "0")) (re.range "1" "9")) (re.++ (re.range "1" "1") (re.range "0" "2")))(re.++ (re.range "/" "/")(re.++ (re.union (re.++ (re.range "0" "2") (re.range "0" "9"))(re.union (re.range "1" "9") (re.++ (re.range "3" "3") (re.range "0" "1"))))(re.++ (re.range "/" "/")(re.++ (re.++ (re.range "1" "2") ((_ re.loop 3 3) (re.range "0" "9"))) (str.to_re "")))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "h" (str.++ "t" (str.++ "t" (str.++ "p" (str.++ "s" (str.++ ":" (str.++ "/" (str.++ "/" (str.++ "w" (str.++ "w" (str.++ "w" (str.++ "\u{ce}" (str.++ "\u{cf}" (str.++ "." (str.++ "w" (str.++ "M" (str.++ "." (str.++ "h" (str.++ "." (str.++ "Y" (str.++ "H" ""))))))))))))))))))))))

(define-fun Witness2 () String (str.++ "h" (str.++ "t" (str.++ "t" (str.++ "p" (str.++ "s" (str.++ ":" (str.++ "/" (str.++ "/" (str.++ "\u{aa}" (str.++ "." (str.++ "\u{f3}" (str.++ "\u{f8}" (str.++ "\u{c8}" (str.++ "." (str.++ "D" (str.++ "Z" "")))))))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.++ (str.to_re (str.++ "h" (str.++ "t" (str.++ "t" (str.++ "p" "")))))(re.++ (re.opt (re.range "s" "s")) (str.to_re (str.++ ":" (str.++ "/" (str.++ "/" ""))))))(re.++ (re.opt (re.++ (str.to_re (str.++ "w" (str.++ "w" (str.++ "w" "")))) (re.union (re.range "\u{00}" "\u{09}") (re.range "\u{0b}" "\u{ff}"))))(re.++ (re.+ (re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))))(re.++ (re.* (re.++ (re.range "." ".") (re.+ (re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))))))(re.++ (re.+ (re.union (re.++ (re.range "." ".") ((_ re.loop 2 3) (re.union (re.range "A" "Z") (re.range "a" "z")))) (re.++ (re.range "." ".") (re.union (str.to_re (str.++ "a" (str.++ "e" (str.++ "r" (str.++ "o" "")))))(re.union (str.to_re (str.++ "c" (str.++ "o" (str.++ "o" (str.++ "p" "")))))(re.union (str.to_re (str.++ "i" (str.++ "n" (str.++ "f" (str.++ "o" "")))))(re.union (str.to_re (str.++ "m" (str.++ "u" (str.++ "s" (str.++ "e" (str.++ "u" (str.++ "m" ""))))))) (str.to_re (str.++ "n" (str.++ "a" (str.++ "m" (str.++ "e" ""))))))))))))(re.++ (re.opt (re.range "/" "/")) (str.to_re ""))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "\u{0f}" ""))

(define-fun Witness2 () String (str.++ "&" ""))

(assert (= regexA (re.++ (str.to_re "")(re.++ ((_ re.loop 1 1500) (re.range "\u{00}" "\u{ff}")) (str.to_re "")))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "-" (str.++ "9" (str.++ "0" ""))))

(define-fun Witness2 () String (str.++ "-" (str.++ "8" "")))

(assert (= regexA (re.union (re.++ (str.to_re "")(re.++ (re.opt (re.range "+" "+"))(re.++ (re.opt (re.range "1" "8"))(re.++ (re.range "0" "9")(re.++ (re.opt (re.++ (re.range "." ".") (re.+ (re.range "0" "9")))) (str.to_re ""))))))(re.union (re.++ (str.to_re "")(re.++ (str.to_re (str.++ "-" (str.++ "9" (str.++ "0" "")))) (str.to_re ""))) (re.++ (str.to_re "")(re.++ (re.range "-" "-") (re.++ (re.opt (re.range "1" "8"))(re.++ (re.range "0" "9")(re.++ (re.opt (re.++ (re.range "." ".") (re.+ (re.range "0" "9")))) (str.to_re ""))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "G" (str.++ "b" (str.++ "d" (str.++ "i" (str.++ "m" (str.++ "1" (str.++ "3" (str.++ "/" (str.++ "F" ""))))))))))

(define-fun Witness2 () String (str.++ "E" (str.++ "b" (str.++ "a" (str.++ "u" (str.++ "g" (str.++ "9" (str.++ "/" (str.++ "C" (str.++ "#" ""))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.range "A" "G")(re.++ (re.opt (re.union (re.range "#" "#") (re.range "b" "b")))(re.++ (re.opt (re.++ (re.union (re.++ (re.range "m" "m") (re.opt (str.to_re (str.++ "a" (str.++ "j" "")))))(re.union (re.range "M" "M")(re.union (str.to_re (str.++ "a" (str.++ "u" (str.++ "g" ""))))(re.union (str.to_re (str.++ "d" (str.++ "i" (str.++ "m" "")))) (str.to_re (str.++ "s" (str.++ "u" (str.++ "s" "")))))))) (re.opt (re.union (re.union (re.range "2" "7") (re.range "9" "9")) (str.to_re (str.++ "1" (str.++ "3" "")))))))(re.++ (re.opt (re.++ (re.range "/" "/")(re.++ (re.range "A" "G") (re.opt (re.union (re.range "#" "#") (re.range "b" "b")))))) (str.to_re ""))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "e" (str.++ "t" (str.++ "h" (str.++ "0" "")))))

(define-fun Witness2 () String (str.++ "e" (str.++ "t" (str.++ "h" (str.++ "9" (str.++ ":" (str.++ "9" "")))))))

(assert (= regexA (re.union (re.++ (str.to_re "") (re.++ (str.to_re (str.++ "e" (str.++ "t" (str.++ "h" ""))))(re.++ (re.range "0" "9") (str.to_re "")))) (re.++ (str.to_re "")(re.++ (str.to_re (str.++ "e" (str.++ "t" (str.++ "h" ""))))(re.++ (re.range "0" "9")(re.++ (re.range ":" ":")(re.++ (re.range "1" "9") (str.to_re "")))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "2" (str.++ "." (str.++ "4" (str.++ "9" (str.++ "%" ""))))))

(define-fun Witness2 () String (str.++ "3" (str.++ "4" (str.++ "." (str.++ "1" (str.++ "0" (str.++ "%" "")))))))

(assert (= regexA (re.union (re.++ (str.to_re "")(re.++ (re.range "0" "9")(re.++ (re.opt (re.range "%" "%")) (str.to_re ""))))(re.union (re.++ (str.to_re "")(re.++ (re.range "1" "1")(re.++ (re.range "0" "9")(re.++ (re.opt (re.range "%" "%")) (str.to_re "")))))(re.union (re.++ (str.to_re "")(re.++ (re.range "2" "2")(re.++ (re.range "0" "9")(re.++ (re.opt (re.range "%" "%")) (str.to_re "")))))(re.union (re.++ (str.to_re "")(re.++ (re.range "3" "3")(re.++ (re.range "0" "5")(re.++ (re.opt (re.range "%" "%")) (str.to_re "")))))(re.union (re.++ (str.to_re "")(re.++ (re.range "0" "9")(re.++ (re.range "." ".")(re.++ ((_ re.loop 1 2) (re.range "0" "9"))(re.++ (re.opt (re.range "%" "%")) (str.to_re ""))))))(re.union (re.++ (str.to_re "")(re.++ (re.range "1" "1")(re.++ (re.range "0" "9")(re.++ (re.range "." ".")(re.++ ((_ re.loop 1 2) (re.range "0" "9"))(re.++ (re.opt (re.range "%" "%")) (str.to_re "")))))))(re.union (re.++ (str.to_re "")(re.++ (re.range "2" "2")(re.++ (re.range "0" "9")(re.++ (re.range "." ".")(re.++ ((_ re.loop 1 2) (re.range "0" "9"))(re.++ (re.opt (re.range "%" "%")) (str.to_re "")))))))(re.union (re.++ (str.to_re "")(re.++ (re.range "3" "3")(re.++ (re.range "0" "4")(re.++ (re.range "." ".")(re.++ ((_ re.loop 1 2) (re.range "0" "9"))(re.++ (re.opt (re.range "%" "%")) (str.to_re ""))))))) (re.++ (str.to_re "")(re.++ (str.to_re (str.++ "3" (str.++ "5" "")))(re.++ (re.opt (re.range "%" "%")) (str.to_re ""))))))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "A" (str.++ "8" (str.++ "-" (str.++ "2" (str.++ "9" (str.++ "-" (str.++ "C" (str.++ "8" (str.++ "-" (str.++ "6" (str.++ "D" (str.++ "-" (str.++ "f" (str.++ "8" (str.++ "-" (str.++ "9" (str.++ "0" ""))))))))))))))))))

(define-fun Witness2 () String (str.++ "e" (str.++ "D" (str.++ "-" (str.++ "9" (str.++ "C" (str.++ "-" (str.++ "9" (str.++ "a" (str.++ "-" (str.++ "9" (str.++ "6" (str.++ "-" (str.++ "F" (str.++ "e" (str.++ "-" (str.++ "9" (str.++ "D" ""))))))))))))))))))

(assert (= regexA (re.union (re.++ (str.to_re "")(re.++ ((_ re.loop 2 2) (re.union (re.range "0" "9")(re.union (re.range "A" "F") (re.range "a" "f"))))(re.++ (re.range ":" ":")(re.++ ((_ re.loop 2 2) (re.union (re.range "0" "9")(re.union (re.range "A" "F") (re.range "a" "f"))))(re.++ (re.range ":" ":")(re.++ ((_ re.loop 2 2) (re.union (re.range "0" "9")(re.union (re.range "A" "F") (re.range "a" "f"))))(re.++ (re.range ":" ":")(re.++ ((_ re.loop 2 2) (re.union (re.range "0" "9")(re.union (re.range "A" "F") (re.range "a" "f"))))(re.++ (re.range ":" ":")(re.++ ((_ re.loop 2 2) (re.union (re.range "0" "9")(re.union (re.range "A" "F") (re.range "a" "f"))))(re.++ (re.range ":" ":")(re.++ ((_ re.loop 2 2) (re.union (re.range "0" "9")(re.union (re.range "A" "F") (re.range "a" "f")))) (str.to_re ""))))))))))))) (re.++ (str.to_re "")(re.++ ((_ re.loop 2 2) (re.union (re.range "0" "9")(re.union (re.range "A" "F") (re.range "a" "f"))))(re.++ (re.range "-" "-")(re.++ ((_ re.loop 2 2) (re.union (re.range "0" "9")(re.union (re.range "A" "F") (re.range "a" "f"))))(re.++ (re.range "-" "-")(re.++ ((_ re.loop 2 2) (re.union (re.range "0" "9")(re.union (re.range "A" "F") (re.range "a" "f"))))(re.++ (re.range "-" "-")(re.++ ((_ re.loop 2 2) (re.union (re.range "0" "9")(re.union (re.range "A" "F") (re.range "a" "f"))))(re.++ (re.range "-" "-")(re.++ ((_ re.loop 2 2) (re.union (re.range "0" "9")(re.union (re.range "A" "F") (re.range "a" "f"))))(re.++ (re.range "-" "-")(re.++ ((_ re.loop 2 2) (re.union (re.range "0" "9")(re.union (re.range "A" "F") (re.range "a" "f")))) (str.to_re ""))))))))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "+" (str.++ "8" (str.++ "6" (str.++ "\u{85}" (str.++ "-" (str.++ "1" (str.++ "3" (str.++ "4" (str.++ "9" (str.++ "5" (str.++ "8" (str.++ "8" (str.++ "8" (str.++ "5" (str.++ "9" (str.++ "5" "")))))))))))))))))

(define-fun Witness2 () String (str.++ "+" (str.++ "8" (str.++ "6" (str.++ "-" (str.++ "1" (str.++ "3" (str.++ "4" (str.++ "0" (str.++ "8" (str.++ "9" (str.++ "6" (str.++ "8" (str.++ "9" (str.++ "3" (str.++ "2" ""))))))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.++ (re.opt (re.range "+" "+")) (re.opt (str.to_re (str.++ "8" (str.++ "6" "")))))(re.++ (re.++ (re.opt (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))) (re.opt (re.range "-" "-")))(re.++ (re.++ (re.++ (str.to_re (str.++ "1" (str.++ "3" ""))) (re.range "0" "4"))(re.++ ((_ re.loop 4 4) (re.range "0" "9")) ((_ re.loop 4 4) (re.range "0" "9")))) (str.to_re "")))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "{" (str.++ "2" (str.++ "9" (str.++ "9" (str.++ "}" (str.++ "{" (str.++ "9" (str.++ "}" "")))))))))

(define-fun Witness2 () String (str.++ "{" (str.++ "1" (str.++ "8" (str.++ "}" (str.++ "{" (str.++ "2" (str.++ "}" (str.++ "q" (str.++ "\u{a0}" ""))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.range "{" "{")(re.++ (re.union (re.range "1" "9") (re.++ (re.range "1" "9") (re.+ (re.range "0" "9"))))(re.++ (str.to_re (str.++ "}" (str.++ "{" "")))(re.++ (re.union (re.range "1" "9") (re.++ (re.range "1" "9") (re.+ (re.range "0" "9"))))(re.++ (re.range "}" "}")(re.++ (re.* (re.union (re.range "\u{00}" "\u{09}") (re.range "\u{0b}" "\u{ff}"))) (str.to_re ""))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "5" ""))

(define-fun Witness2 () String (str.++ "+" (str.++ "4" (str.++ "." ""))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.opt (re.union (re.range "+" "+") (re.range "-" "-")))(re.++ (re.range "1" "9")(re.++ (re.* (re.range "0" "9"))(re.++ (re.opt (re.range "." "."))(re.++ (re.* (re.range "0" "0")) (str.to_re "")))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "-" (str.++ "." (str.++ "z" (str.++ "z" (str.++ "." (str.++ "9" (str.++ "9" (str.++ "@" (str.++ "z" (str.++ "-" (str.++ "." (str.++ "-" (str.++ "." (str.++ "9" "")))))))))))))))

(define-fun Witness2 () String (str.++ "b" (str.++ "." (str.++ "U" (str.++ "@" (str.++ "Y" (str.++ "." (str.++ "V" (str.++ "f" (str.++ "." (str.++ "-" (str.++ "." (str.++ "-" (str.++ "." (str.++ "o" (str.++ "r" (str.++ "-" (str.++ "b" (str.++ "." (str.++ "C" (str.++ "R" (str.++ "y" (str.++ "2" (str.++ "." (str.++ "9" (str.++ "K" (str.++ "k" (str.++ "." (str.++ "n" (str.++ "a" (str.++ "m" (str.++ "e" ""))))))))))))))))))))))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.+ (re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_") (re.range "a" "z"))))))(re.++ (re.* (re.++ (re.range "." ".") (re.+ (re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_") (re.range "a" "z"))))))))(re.++ (re.range "@" "@")(re.++ (re.+ (re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))))(re.++ (re.* (re.++ (re.range "." ".") (re.+ (re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))))))(re.++ (re.range "." ".")(re.++ (re.union ((_ re.loop 1 3) (re.range "0" "9"))(re.union ((_ re.loop 2 3) (re.union (re.range "A" "Z") (re.range "a" "z"))) (re.union (str.to_re (str.++ "a" (str.++ "e" (str.++ "r" (str.++ "o" "")))))(re.union (str.to_re (str.++ "c" (str.++ "o" (str.++ "o" (str.++ "p" "")))))(re.union (str.to_re (str.++ "i" (str.++ "n" (str.++ "f" (str.++ "o" "")))))(re.union (str.to_re (str.++ "m" (str.++ "u" (str.++ "s" (str.++ "e" (str.++ "u" (str.++ "m" ""))))))) (str.to_re (str.++ "n" (str.++ "a" (str.++ "m" (str.++ "e" ""))))))))))) (str.to_re "")))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "d" (str.++ "\u{aa}" (str.++ "L" (str.++ "\u{e1}" (str.++ "W" (str.++ "1" "")))))))

(define-fun Witness2 () String (str.++ "\u{f4}" (str.++ "\u{aa}" (str.++ "\u{ba}" (str.++ "h" (str.++ "\u{f4}" (str.++ "5" "")))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))) (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))(re.++ (re.++ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))) (re.opt (re.range "." "."))) (re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))(re.++ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))) (str.to_re ""))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "1" (str.++ "0" (str.++ "." (str.++ "9" "")))))

(define-fun Witness2 () String (str.++ "4" (str.++ "9" (str.++ "1" (str.++ "9" "")))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.union (re.++ (re.range "1" "3")(re.++ (re.* (re.range "0" "9")) (re.opt (re.++ (re.range "." ".") (re.range "0" "9")))))(re.union (re.++ (re.range "0" "0") (re.opt (re.++ (re.range "." ".") (re.range "0" "9"))))(re.union (re.++ (re.range "4" "4")(re.++ (re.* (re.range "0" "9")) (re.opt (str.to_re (str.++ "." (str.++ "0" "")))))) (re.++ (re.range "5" "5") (str.to_re (str.++ "." (str.++ "5" ""))))))) (str.to_re "")))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "p" (str.++ "l" (str.++ "\u{19}" (str.++ "p" (str.++ "y" (str.++ "b" (str.++ "\u{dd}" (str.++ "L" (str.++ "t" (str.++ "c" "")))))))))))

(define-fun Witness2 () String (str.++ "z" (str.++ "n" (str.++ "r" (str.++ "c" (str.++ "f" (str.++ "\u{ef}" (str.++ "r" (str.++ "\u{fc}" (str.++ "f" (str.++ " " (str.++ "H" (str.++ "n" (str.++ "s" ""))))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.+ (re.++ (re.+ (re.range "a" "z")) (re.union (re.range "\u{00}" "\u{09}") (re.range "\u{0b}" "\u{ff}"))))(re.++ (re.range "A" "Z")(re.++ (re.+ (re.range "a" "z")) (str.to_re "")))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "+" (str.++ "6" (str.++ "2" (str.++ "7" (str.++ "4" ""))))))

(define-fun Witness2 () String (str.++ "6" (str.++ "2" (str.++ "8" (str.++ "8" "")))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.union (str.to_re (str.++ "+" (str.++ "6" (str.++ "2" ""))))(re.union (str.to_re (str.++ "6" (str.++ "2" ""))) (re.range "0" "0")))(re.++ (re.range "2" "9")(re.++ (re.+ (re.range "0" "9")) (str.to_re "")))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "9" ""))

(define-fun Witness2 () String (str.++ "D" ""))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.+ (re.union (re.range " " " ")(re.union (re.range "\u{22}" "\u{22}")(re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))))) (str.to_re "")))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "H" ""))

(define-fun Witness2 () String (str.++ "P" ""))

(assert (= regexA (re.union (re.++ (str.to_re "")(re.++ (re.range "A" "A") (str.to_re "")))(re.union (re.++ (str.to_re "")(re.++ (re.range "C" "C") (str.to_re "")))(re.union (re.++ (str.to_re "")(re.++ (re.range "D" "D") (str.to_re "")))(re.union (re.++ (str.to_re "")(re.++ (re.range "F" "F") (str.to_re "")))(re.union (re.++ (str.to_re "")(re.++ (re.range "H" "H") (str.to_re "")))(re.union (re.++ (str.to_re "")(re.++ (re.range "K" "K") (str.to_re "")))(re.union (re.++ (str.to_re "")(re.++ (re.range "L" "L") (str.to_re "")))(re.union (re.++ (str.to_re "")(re.++ (re.range "M" "M") (str.to_re "")))(re.union (re.++ (str.to_re "")(re.++ (re.range "O" "O") (str.to_re ""))) (re.++ (str.to_re "")(re.++ (re.range "P" "P") (str.to_re ""))))))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "2" (str.++ "4" (str.++ ":" (str.++ "0" (str.++ "9" (str.++ ":" (str.++ "3" (str.++ "8" "")))))))))

(define-fun Witness2 () String (str.++ "0" (str.++ "2" (str.++ ":" (str.++ "4" (str.++ "8" (str.++ ":" (str.++ "4" (str.++ "1" "")))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.++ (re.range "0" "2")(re.++ (re.range "0" "4") (re.opt (re.union (re.opt (re.++ (re.opt (re.range ":" ":"))(re.++ (re.range "0" "5") (re.range "0" "9")))) (re.opt (re.++ (re.opt (re.range ":" ":"))(re.++ (re.range "0" "5")(re.++ (re.range "0" "9")(re.++ (re.opt (re.range ":" ":"))(re.++ (re.range "0" "5")(re.++ (re.range "0" "9") (re.opt (re.++ (re.range "." ".") (re.+ (re.range "0" "9"))))))))))))))) (str.to_re "")))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "1" (str.++ ":" (str.++ "4" (str.++ "1" (str.++ "\u{0d}" (str.++ "a" (str.++ "M" ""))))))))

(define-fun Witness2 () String (str.++ "9" (str.++ ":" (str.++ "0" (str.++ "1" "")))))

(assert (= regexA (re.union (re.++ (str.to_re "")(re.++ (re.union (re.range "1" "9") (re.++ (re.range "1" "1") (re.range "0" "2")))(re.++ (re.range ":" ":")(re.++ (re.++ (re.range "0" "5") (re.range "0" "9"))(re.++ (re.opt (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (re.union (str.to_re (str.++ "A" (str.++ "M" "")))(re.union (str.to_re (str.++ "P" (str.++ "M" "")))(re.union (str.to_re (str.++ "a" (str.++ "m" "")))(re.union (str.to_re (str.++ "p" (str.++ "m" "")))(re.union (str.to_re (str.++ "a" (str.++ "M" "")))(re.union (str.to_re (str.++ "A" (str.++ "m" "")))(re.union (str.to_re (str.++ "p" (str.++ "M" ""))) (re.++ (re.range "P" "P") ((_ re.loop 2 2) (re.range "m" "m")))))))))) (str.to_re "")))))))(re.union (re.++ (str.to_re "")(re.++ (re.union (re.range "0" "9")(re.union (re.++ (re.range "1" "1") (re.range "0" "9")) (re.++ (re.range "2" "2") (re.range "0" "3"))))(re.++ (re.range ":" ":")(re.++ (re.++ (re.range "0" "5") (re.range "0" "9")) (str.to_re "")))))(re.union (re.++ (str.to_re "")(re.++ (re.union (re.range "1" "9") (re.++ (re.range "1" "1") (re.range "0" "2")))(re.++ (re.opt (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (re.union (str.to_re (str.++ "A" (str.++ "M" "")))(re.union (str.to_re (str.++ "P" (str.++ "M" "")))(re.union (str.to_re (str.++ "a" (str.++ "m" "")))(re.union (str.to_re (str.++ "p" (str.++ "m" "")))(re.union (str.to_re (str.++ "a" (str.++ "M" "")))(re.union (str.to_re (str.++ "A" (str.++ "m" "")))(re.union (str.to_re (str.++ "p" (str.++ "M" ""))) (re.++ (re.range "P" "P") ((_ re.loop 2 2) (re.range "m" "m")))))))))) (str.to_re ""))))) (re.++ (str.to_re "")(re.++ (re.union (re.range "0" "9")(re.union (re.++ (re.range "1" "1") (re.range "0" "9")) (re.++ (re.range "2" "2") (re.range "0" "3")))) (str.to_re ""))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "D" (str.++ "t" (str.++ "X" (str.++ "f" (str.++ "e" (str.++ "Z" (str.++ "C" (str.++ "L" (str.++ "e" (str.++ ":" (str.++ "/" (str.++ "/" (str.++ "U" (str.++ "." (str.++ "-" (str.++ "/" (str.++ "g" (str.++ "J" (str.++ "/" (str.++ "M" (str.++ "U" (str.++ "6" (str.++ "." (str.++ "?" (str.++ "/" (str.++ "U" (str.++ "X" ""))))))))))))))))))))))))))))

(define-fun Witness2 () String (str.++ "-" (str.++ "-" (str.++ ":" (str.++ "2" (str.++ "3" (str.++ "9" (str.++ "/" (str.++ "z" (str.++ "?" (str.++ "\u{07}" "")))))))))))

(assert (= regexA (re.++ (re.opt (re.++ (re.+ (re.union (re.range "A" "Z") (re.range "a" "z"))) (str.to_re (str.++ ":" (str.++ "/" (str.++ "/" ""))))))(re.++ (re.++ (re.+ (re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_") (re.range "a" "z")))))) (re.* (re.++ (re.range "." ".") (re.+ (re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_") (re.range "a" "z")))))))))(re.++ (re.opt (re.++ (re.range ":" ":") (re.+ (re.range "0" "9"))))(re.++ (re.+ (re.++ (re.range "/" "/") (re.+ (re.union (re.range "-" ".")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_") (re.range "a" "z")))))))) (re.opt (re.++ (re.range "?" "?") (re.+ (re.union (re.range "\u{00}" "\u{09}") (re.range "\u{0b}" "\u{ff}")))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "6" (str.++ ":" (str.++ "2" (str.++ "9" "")))))

(define-fun Witness2 () String (str.++ "1" (str.++ "2" (str.++ ":" (str.++ "2" (str.++ "9" ""))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.union (re.range "1" "9")(re.union (re.++ (re.range "0" "0") (re.range "1" "9")) (re.++ (re.range "1" "1") (re.range "0" "2"))))(re.++ (re.range ":" ":")(re.++ (re.++ (re.range "0" "5") (re.range "0" "9")) (str.to_re "")))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "w" (str.++ "\u{12}" (str.++ "." (str.++ "\u{fd}" (str.++ "\u{e0}" (str.++ "\u{f9}" (str.++ "\u{c5}" (str.++ "\u{83}" "")))))))))

(define-fun Witness2 () String (str.++ "^" (str.++ "\u{a3}" (str.++ "\u{e1}" (str.++ "\u{ed}" (str.++ "." (str.++ "U" "")))))))

(assert (= regexA (re.++ (re.+ (re.union (re.range "\u{00}" "\u{09}") (re.range "\u{0b}" "\u{ff}")))(re.++ (re.range "." ".")(re.++ (re.+ (re.union (re.range "\u{00}" "-") (re.range "/" "\u{ff}"))) (str.to_re ""))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "+" (str.++ "4" (str.++ "9" ""))))

(define-fun Witness2 () String (str.++ "+" (str.++ "8" (str.++ "9" ""))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.opt (re.union (re.range "+" "+") (re.range "-" "-")))(re.++ (re.* (re.range "0" "9")) (str.to_re ""))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ " " (str.++ "8" "")))

(define-fun Witness2 () String (str.++ " " (str.++ "5" "")))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.union (re.++ (re.+ (re.range "1" "9"))(re.++ (re.* (re.range "0" "9")) (re.range " " " "))) (re.++ (re.range " " " ") (re.range "1" "9"))) (str.to_re "")))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "3" (str.++ "1" (str.++ "/" (str.++ "0" (str.++ "8" (str.++ "/" (str.++ "2" (str.++ "0" (str.++ "5" (str.++ "9" "")))))))))))

(define-fun Witness2 () String (str.++ "0" (str.++ "8" (str.++ "/" (str.++ "1" (str.++ "2" (str.++ "/" (str.++ "1" (str.++ "9" (str.++ "8" (str.++ "3" "")))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.union (re.++ (re.union (re.++ (re.union (re.++ (re.range "0" "0") (re.range "1" "9"))(re.union (re.++ (re.range "1" "1") (re.range "0" "9")) (re.++ (re.range "2" "2") (re.range "0" "8"))))(re.++ (re.range "/" "/") (re.union (re.++ (re.range "0" "0") (re.range "1" "9")) (re.++ (re.range "1" "1") (re.range "0" "2"))))) (re.union (re.++ (str.to_re (str.++ "3" (str.++ "1" (str.++ "/" "")))) (re.union (re.++ (re.range "0" "0") (re.union (re.range "1" "1")(re.union (re.range "3" "3")(re.union (re.range "5" "5") (re.range "7" "8"))))) (re.++ (re.range "1" "1") (re.union (re.range "0" "0") (re.range "2" "2"))))) (re.++ (re.union (str.to_re (str.++ "2" (str.++ "9" ""))) (str.to_re (str.++ "3" (str.++ "0" ""))))(re.++ (re.range "/" "/") (re.union (re.++ (re.range "0" "0") (re.union (re.range "," ",")(re.union (re.range "1" "1") (re.range "3" "9")))) (re.++ (re.range "1" "1") (re.range "0" "2")))))))(re.++ (re.range "/" "/") (re.++ (str.to_re (str.++ "2" (str.++ "0" "")))(re.++ (re.range "0" "9") (re.range "0" "9")))))(re.union (re.++ (re.union (re.++ (re.union (re.++ (re.range "0" "0") (re.range "1" "9"))(re.union (re.++ (re.range "1" "1") (re.range "0" "9")) (re.++ (re.range "2" "2") (re.range "0" "8"))))(re.++ (re.range "/" "/") (re.union (re.++ (re.range "0" "0") (re.range "1" "9")) (re.++ (re.range "1" "1") (re.range "0" "2"))))) (re.union (re.++ (str.to_re (str.++ "3" (str.++ "1" (str.++ "/" "")))) (re.union (re.++ (re.range "0" "0") (re.union (re.range "1" "1")(re.union (re.range "3" "3")(re.union (re.range "5" "5") (re.range "7" "8"))))) (re.++ (re.range "1" "1") (re.union (re.range "0" "0") (re.range "2" "2"))))) (re.++ (re.union (str.to_re (str.++ "2" (str.++ "9" ""))) (str.to_re (str.++ "3" (str.++ "0" ""))))(re.++ (re.range "/" "/") (re.union (re.++ (re.range "0" "0") (re.union (re.range "," ",")(re.union (re.range "1" "1") (re.range "3" "9")))) (re.++ (re.range "1" "1") (re.range "0" "2")))))))(re.++ (re.range "/" "/") (re.++ (str.to_re (str.++ "1" (str.++ "9" "")))(re.++ (re.range "0" "9") (re.range "0" "9")))))(re.union (re.++ (str.to_re (str.++ "2" (str.++ "9" (str.++ "/" (str.++ "0" (str.++ "2" (str.++ "/" (str.++ "2" (str.++ "0" ""))))))))) (re.union (re.++ (re.union (re.range "0" "0")(re.union (re.range "2" "2")(re.union (re.range "4" "4")(re.union (re.range "6" "6") (re.range "8" "8"))))) (re.union (re.range "0" "0")(re.union (re.range "4" "4") (re.range "8" "8")))) (re.++ (re.union (re.range "1" "1")(re.union (re.range "3" "3")(re.union (re.range "5" "5")(re.union (re.range "7" "7") (re.range "9" "9"))))) (re.union (re.range "2" "2") (re.range "6" "6"))))) (re.++ (str.to_re (str.++ "2" (str.++ "9" (str.++ "/" (str.++ "0" (str.++ "2" (str.++ "/" (str.++ "1" (str.++ "9" ""))))))))) (re.union (re.++ (re.union (re.range "0" "0")(re.union (re.range "2" "2")(re.union (re.range "4" "4")(re.union (re.range "6" "6") (re.range "8" "8"))))) (re.union (re.range "0" "0")(re.union (re.range "4" "4") (re.range "8" "8")))) (re.++ (re.union (re.range "1" "1")(re.union (re.range "3" "3")(re.union (re.range "5" "5")(re.union (re.range "7" "7") (re.range "9" "9"))))) (re.union (re.range "2" "2") (re.range "6" "6")))))))) (str.to_re "")))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "8" (str.++ "0" (str.++ "-" (str.++ "8" (str.++ "8" (str.++ "-" (str.++ "4" (str.++ "1" "")))))))))

(define-fun Witness2 () String (str.++ "4" (str.++ "9" (str.++ "-" (str.++ "9" (str.++ "9" (str.++ "-" (str.++ "5" (str.++ "3" "")))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ ((_ re.loop 2 2) (re.range "0" "9"))(re.++ (re.range "-" "-")(re.++ ((_ re.loop 2 2) (re.range "0" "9"))(re.++ (re.range "-" "-")(re.++ ((_ re.loop 2 2) (re.range "0" "9")) (str.to_re "")))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "1" (str.++ "8" (str.++ "9" (str.++ "8" (str.++ "9" (str.++ "5" (str.++ "." (str.++ "9" (str.++ "9" (str.++ "8" (str.++ "8" (str.++ "x" (str.++ "." (str.++ "." (str.++ "." (str.++ " " (str.++ "0" ""))))))))))))))))))

(define-fun Witness2 () String (str.++ "(" (str.++ "9" (str.++ "2" (str.++ "8" (str.++ "-" (str.++ "5" (str.++ "9" (str.++ "7" (str.++ "2" (str.++ "4" (str.++ "1" (str.++ "8" "")))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.opt (re.++ (re.opt (re.range "(" "("))(re.++ (re.range "0" "9")(re.++ (re.range "0" "9")(re.++ (re.range "0" "9") (re.opt (re.range ")" ")")))))))(re.++ (re.opt (re.union (re.range " " " ") (re.range "-" ".")))(re.++ (re.range "0" "9")(re.++ (re.range "0" "9")(re.++ (re.range "0" "9")(re.++ (re.opt (re.union (re.range " " " ") (re.range "-" ".")))(re.++ ((_ re.loop 4 4) (re.range "0" "9"))(re.++ (re.opt (re.++ (re.opt (re.union (re.range " " " ") (re.range "-" ".")))(re.++ (re.+ (re.union (re.range "." ".")(re.union (re.range "e" "e")(re.union (re.range "t" "t") (re.range "x" "x")))))(re.++ (re.opt (re.range " " " ")) (re.+ (re.range "0" "9")))))) (str.to_re ""))))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "_" (str.++ "8" (str.++ "@" (str.++ "\u{aa}" (str.++ "\u{e0}" (str.++ "Z" (str.++ "\u{b5}" (str.++ "." (str.++ "y" (str.++ "4" (str.++ "\u{aa}" ""))))))))))))

(define-fun Witness2 () String (str.++ "z" (str.++ "\u{0d}" (str.++ "&" (str.++ "l" (str.++ "t" (str.++ ";" (str.++ "q" (str.++ "J" (str.++ "-" (str.++ "\u{f8}" (str.++ "@" (str.++ "\u{f4}" (str.++ "\u{c8}" (str.++ "\u{aa}" (str.++ "\u{ec}" (str.++ "." (str.++ "6" (str.++ "3" (str.++ "\u{ba}" (str.++ "&" (str.++ "g" (str.++ "t" (str.++ ";" ""))))))))))))))))))))))))

(assert (= regexA (re.union (re.++ (str.to_re "")(re.++ (re.+ (re.union (re.range "A" "Z") (re.range "a" "z")))(re.++ (re.* (re.++ (re.opt (re.++ (re.union (re.range " " " ")(re.union (re.range "'" "'") (re.range "," "."))) (re.union (re.range " " " ")(re.union (re.range "A" "Z") (re.range "a" "z"))))) (re.* (re.union (re.range "A" "Z") (re.range "a" "z")))))(re.++ (re.+ (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (str.to_re (str.++ "&" (str.++ "l" (str.++ "t" (str.++ ";" "")))))(re.++ (re.++ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))(re.++ (re.* (re.union (re.range "-" ".")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))))(re.++ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))(re.++ (re.range "@" "@")(re.++ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))(re.++ (re.* (re.union (re.range "-" ".")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))))(re.++ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))(re.++ (re.range "." ".") ((_ re.loop 2 3) (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))))))))))(re.++ (str.to_re (str.++ "&" (str.++ "g" (str.++ "t" (str.++ ";" ""))))) (str.to_re "")))))))) (re.++ (str.to_re "")(re.++ (re.++ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))(re.++ (re.* (re.union (re.range "-" ".")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))))(re.++ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))(re.++ (re.range "@" "@")(re.++ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))(re.++ (re.* (re.union (re.range "-" ".")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))))(re.++ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))(re.++ (re.range "." ".") ((_ re.loop 2 3) (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))))))))))) (str.to_re ""))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "2" ""))

(define-fun Witness2 () String (str.++ "1" (str.++ "9" (str.++ "4" (str.++ "8" (str.++ "9" (str.++ "5" (str.++ "8" (str.++ "1" (str.++ "6" (str.++ "." (str.++ "4" ""))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.+ (re.range "0" "9"))(re.++ (re.opt (re.++ (re.range "." ".") (re.+ (re.range "0" "9")))) (str.to_re ""))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String "")

(define-fun Witness2 () String "")

(assert (= regexA (re.++ (str.to_re "")(re.++ ((_ re.loop 0 2) (re.range "0" "9"))(re.++ (re.opt (re.++ (re.range "." ".") ((_ re.loop 1 2) (re.range "0" "9")))) (str.to_re ""))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "," (str.++ "8" (str.++ "9" ""))))

(define-fun Witness2 () String (str.++ "-" (str.++ "8" (str.++ "." (str.++ "0" (str.++ "1" (str.++ "5" (str.++ "." (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "." (str.++ "0" (str.++ "8" (str.++ "2" (str.++ "." (str.++ "1" (str.++ "8" (str.++ "9" (str.++ "," (str.++ "8" "")))))))))))))))))))))

(assert (= regexA (re.union (re.++ (str.to_re "")(re.++ (re.opt (re.range "-" "-"))(re.++ ((_ re.loop 1 3) (re.range "0" "9"))(re.++ (re.range "." ".")(re.++ (re.* (re.++ ((_ re.loop 3 3) (re.range "0" "9")) (re.range "." ".")))(re.++ ((_ re.loop 3 3) (re.range "0" "9"))(re.++ (re.opt (re.++ (re.range "," ",") (re.+ (re.range "0" "9")))) (str.to_re "")))))))) (re.++ (str.to_re "")(re.++ (re.opt (re.range "-" "-"))(re.++ (re.* (re.range "0" "9"))(re.++ (re.opt (re.++ (re.range "," ",") (re.+ (re.range "0" "9")))) (str.to_re ""))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "0" (str.++ "5" (str.++ "/" (str.++ "0" (str.++ "8" (str.++ "/" (str.++ "1" (str.++ "9" (str.++ "8" (str.++ "1" "")))))))))))

(define-fun Witness2 () String (str.++ "0" (str.++ "9" (str.++ "/" (str.++ "0" (str.++ "2" (str.++ "/" (str.++ "8" (str.++ "9" (str.++ "8" (str.++ "1" "")))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.union (re.++ (re.union (re.++ (re.range "0" "0") (re.range "1" "9"))(re.union (re.++ (re.range "1" "2") (re.range "0" "9")) (re.++ (re.range "3" "3") (re.range "0" "1"))))(re.++ (re.range "/" "/")(re.++ (re.union (re.++ (re.range "0" "0") (re.union (re.range "1" "1")(re.union (re.range "3" "3")(re.union (re.range "5" "5") (re.range "7" "8"))))) (re.++ (re.range "1" "1") (re.union (re.range "0" "0") (re.range "2" "2"))))(re.++ (re.range "/" "/") (re.++ (re.union (str.to_re (str.++ "1" (str.++ "9" ""))) (re.++ (re.range "2" "9") (re.range "0" "9"))) ((_ re.loop 2 2) (re.range "0" "9")))))))(re.union (re.++ (re.union (re.++ (re.range "0" "0") (re.range "1" "9"))(re.union (re.++ (re.range "1" "2") (re.range "0" "9")) (str.to_re (str.++ "3" (str.++ "0" "")))))(re.++ (re.range "/" "/")(re.++ (re.union (re.++ (re.range "0" "0") (re.union (re.range "1" "1") (re.range "3" "9"))) (re.++ (re.range "1" "1") (re.range "0" "2")))(re.++ (re.range "/" "/") (re.++ (re.union (str.to_re (str.++ "1" (str.++ "9" ""))) (re.++ (re.range "2" "9") (re.range "0" "9"))) ((_ re.loop 2 2) (re.range "0" "9")))))))(re.union (re.++ (re.union (re.++ (re.range "0" "0") (re.range "1" "9"))(re.union (re.++ (re.range "1" "1") (re.range "0" "9")) (re.++ (re.range "2" "2") (re.range "0" "8"))))(re.++ (str.to_re (str.++ "/" (str.++ "0" (str.++ "2" (str.++ "/" ""))))) (re.++ (re.union (str.to_re (str.++ "1" (str.++ "9" ""))) (re.++ (re.range "2" "9") (re.range "0" "9"))) ((_ re.loop 2 2) (re.range "0" "9"))))) (re.++ (str.to_re (str.++ "2" (str.++ "9" (str.++ "/" (str.++ "0" (str.++ "2" (str.++ "/" ""))))))) (re.union (re.++ (re.union (re.++ (re.range "1" "1") (re.range "6" "9")) (re.++ (re.range "2" "9") (re.range "0" "9"))) (re.union (re.++ (re.range "0" "0") (re.union (re.range "4" "4") (re.range "8" "8")))(re.union (re.++ (re.union (re.range "2" "2")(re.union (re.range "4" "4")(re.union (re.range "6" "6") (re.range "8" "8")))) (re.union (re.range "0" "0")(re.union (re.range "4" "4") (re.range "8" "8")))) (re.++ (re.union (re.range "1" "1")(re.union (re.range "3" "3")(re.union (re.range "5" "5")(re.union (re.range "7" "7") (re.range "9" "9"))))) (re.union (re.range "2" "2") (re.range "6" "6")))))) (re.++ (re.union (str.to_re (str.++ "1" (str.++ "6" "")))(re.union (re.++ (re.union (re.range "2" "2")(re.union (re.range "4" "4")(re.union (re.range "6" "6") (re.range "8" "8")))) (re.union (re.range "0" "0")(re.union (re.range "4" "4") (re.range "8" "8")))) (re.++ (re.union (re.range "3" "3")(re.union (re.range "5" "5")(re.union (re.range "7" "7") (re.range "9" "9")))) (re.union (re.range "2" "2") (re.range "6" "6"))))) (str.to_re (str.++ "0" (str.++ "0" ""))))))))) (str.to_re "")))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ ":" (str.++ "9" (str.++ "1" (str.++ "c" (str.++ ":" (str.++ "f" (str.++ "8" (str.++ "9" (str.++ "8" (str.++ ":" (str.++ "F" (str.++ ":" (str.++ "f" (str.++ "f" (str.++ ":" (str.++ "2" (str.++ ":" (str.++ "F" (str.++ "0" (str.++ "f" (str.++ "f" (str.++ "f" (str.++ "f" (str.++ ":" (str.++ "2" (str.++ "0" (str.++ "8" (str.++ "." (str.++ "1" (str.++ "1" (str.++ "8" (str.++ "." (str.++ "1" (str.++ "1" (str.++ "9" (str.++ "." (str.++ "2" (str.++ "4" (str.++ "9" ""))))))))))))))))))))))))))))))))))))))))

(define-fun Witness2 () String (str.++ "5" (str.++ "8" (str.++ "9" (str.++ "8" (str.++ "7" (str.++ "9" (str.++ "0" (str.++ "8" (str.++ "8" (str.++ "7" (str.++ "3" (str.++ "9" (str.++ "4" (str.++ "8" (str.++ "9" (str.++ "3" (str.++ "9" (str.++ "8" (str.++ "9" (str.++ "6" "")))))))))))))))))))))

(assert (= regexA (re.union (re.++ (str.to_re "")(re.++ ((_ re.loop 20 20) (re.range "0" "9")) (str.to_re "")))(re.union (re.++ (str.to_re "")(re.++ (re.union ((_ re.loop 6 6) (re.++ (re.range ":" ":") ((_ re.loop 1 4) (re.union (re.range "0" "9")(re.union (re.range "A" "F") (re.range "a" "f")))))) (str.to_re (str.++ ":" (str.++ ":" ""))))(re.++ (str.to_re (str.++ "f" (str.++ "f" (str.++ "f" (str.++ "f" (str.++ ":" ""))))))(re.++ (re.union (re.++ (str.to_re (str.++ "2" (str.++ "5" ""))) (re.range "0" "5"))(re.union (re.++ (re.range "2" "2")(re.++ (re.range "0" "4") (re.range "0" "9")))(re.union (re.++ (re.range "1" "1")(re.++ (re.range "0" "9") (re.range "0" "9"))) ((_ re.loop 1 2) (re.range "0" "9")))))(re.++ ((_ re.loop 3 3) (re.++ (re.range "." ".") (re.union (re.++ (str.to_re (str.++ "2" (str.++ "5" ""))) (re.range "0" "5"))(re.union (re.++ (re.range "2" "2")(re.++ (re.range "0" "4") (re.range "0" "9")))(re.union (re.++ (re.range "1" "1")(re.++ (re.range "0" "9") (re.range "0" "9"))) ((_ re.loop 1 2) (re.range "0" "9"))))))) (str.to_re ""))))))(re.union (re.++ (str.to_re "")(re.++ (re.union ((_ re.loop 6 6) (re.++ (re.range ":" ":") ((_ re.loop 1 4) (re.union (re.range "0" "9")(re.union (re.range "A" "F") (re.range "a" "f")))))) (str.to_re (str.++ ":" (str.++ ":" ""))))(re.++ (str.to_re (str.++ "f" (str.++ "f" (str.++ "f" (str.++ "f" "")))))(re.++ ((_ re.loop 2 2) (re.++ (re.range ":" ":") ((_ re.loop 1 4) (re.union (re.range "0" "9")(re.union (re.range "A" "F") (re.range "a" "f")))))) (str.to_re "")))))(re.union (re.++ (str.to_re "")(re.++ ((_ re.loop 1 4) (re.union (re.range "0" "9")(re.union (re.range "A" "F") (re.range "a" "f"))))(re.++ (re.range " " " ")(re.++ ((_ re.loop 7 7) (re.++ (re.range ":" ":") ((_ re.loop 1 4) (re.union (re.range "0" "9")(re.union (re.range "A" "F") (re.range "a" "f")))))) (str.to_re "")))))(re.union (re.++ (str.to_re "")(re.++ (re.range ":" ":")(re.++ ((_ re.loop 1 6) (re.++ (re.range ":" ":")(re.++ ((_ re.loop 1 4) (re.union (re.range "0" "9")(re.union (re.range "A" "F") (re.range "a" "f")))) (re.opt (str.to_re (str.++ ":" (str.++ ":" ""))))))) (str.to_re ""))))(re.union (re.++ (str.to_re "")(re.++ ((_ re.loop 1 6) (re.++ (re.opt (str.to_re (str.++ ":" (str.++ ":" ""))))(re.++ ((_ re.loop 1 4) (re.union (re.range "0" "9")(re.union (re.range "A" "F") (re.range "a" "f")))) (re.range ":" ":"))))(re.++ (re.range ":" ":") (str.to_re "")))) (re.++ (str.to_re "")(re.++ (str.to_re (str.++ ":" (str.++ ":" ""))) (str.to_re "")))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "0" (str.++ "1" (str.++ "0" (str.++ "5" (str.++ "1" (str.++ "9" (str.++ "9" (str.++ "8" "")))))))))

(define-fun Witness2 () String (str.++ "9" (str.++ "3" (str.++ "3" (str.++ "2" (str.++ "8" (str.++ "8" "")))))))

(assert (= regexA (re.union (re.++ (str.to_re "")(re.++ (re.union (str.to_re (str.++ "1" (str.++ "0" "")))(re.union (str.to_re (str.++ "1" (str.++ "2" ""))) (re.++ (re.opt (re.range "0" "0")) (re.union (re.range "1" "1")(re.union (re.range "3" "3")(re.union (re.range "5" "5") (re.range "7" "8")))))))(re.++ (re.union (re.++ (re.range "3" "3") (re.range "0" "1"))(re.union (re.++ (re.range "1" "2") (re.range "0" "9")) (re.++ (re.opt (re.range "0" "0")) (re.range "1" "9"))))(re.++ (re.union (re.++ (re.range "1" "1")(re.++ (re.range "8" "9") ((_ re.loop 2 2) (re.range "0" "9")))) (re.++ (re.range "2" "9") ((_ re.loop 3 3) (re.range "0" "9")))) (str.to_re "")))))(re.union (re.++ (str.to_re "")(re.++ (re.union (str.to_re (str.++ "1" (str.++ "1" ""))) (re.++ (re.opt (re.range "0" "0")) (re.union (re.range "4" "4")(re.union (re.range "6" "6") (re.range "9" "9")))))(re.++ (re.union (str.to_re (str.++ "3" (str.++ "0" "")))(re.union (re.++ (re.range "1" "2") (re.range "0" "9")) (re.++ (re.opt (re.range "0" "0")) (re.range "1" "9"))))(re.++ (re.union (re.++ (re.range "1" "1")(re.++ (re.range "8" "9") ((_ re.loop 2 2) (re.range "0" "9")))) (re.++ (re.range "2" "9") ((_ re.loop 3 3) (re.range "0" "9")))) (str.to_re "")))))(re.union (re.++ (str.to_re "")(re.++ (re.++ (re.opt (re.range "0" "0")) (re.range "2" "2"))(re.++ (re.union (re.++ (re.range "2" "2") (re.range "0" "8"))(re.union (re.++ (re.range "1" "1") (re.range "0" "9")) (re.++ (re.opt (re.range "0" "0")) (re.range "1" "9"))))(re.++ (re.union (re.++ (re.range "1" "1")(re.++ (re.range "8" "9") ((_ re.loop 2 2) (re.range "0" "9")))) (re.++ (re.range "2" "9") ((_ re.loop 3 3) (re.range "0" "9")))) (str.to_re "")))))(re.union (re.++ (str.to_re "")(re.++ (re.++ (re.opt (re.range "0" "0")) (re.range "2" "2"))(re.++ (str.to_re (str.++ "2" (str.++ "9" "")))(re.++ (re.++ (re.union (re.range "2" "2")(re.union (re.range "4" "4")(re.union (re.range "6" "6") (re.range "8" "8"))))(re.++ (re.union (re.range "0" "0")(re.union (re.range "4" "4") (re.range "8" "8"))) (str.to_re (str.++ "0" (str.++ "0" ""))))) (str.to_re "")))))(re.union (re.++ (str.to_re "")(re.++ (re.++ (re.opt (re.range "0" "0")) (re.range "2" "2"))(re.++ (str.to_re (str.++ "2" (str.++ "9" "")))(re.++ (re.++ (re.union (re.range "3" "3")(re.union (re.range "5" "5")(re.union (re.range "7" "7") (re.range "9" "9"))))(re.++ (re.union (re.range "2" "2") (re.range "6" "6")) (str.to_re (str.++ "0" (str.++ "0" ""))))) (str.to_re "")))))(re.union (re.++ (str.to_re "")(re.++ (re.++ (re.opt (re.range "0" "0")) (re.range "2" "2"))(re.++ (str.to_re (str.++ "2" (str.++ "9" "")))(re.++ (re.++ (re.range "1" "1")(re.++ (re.range "8" "9")(re.++ (re.range "0" "0") (re.union (re.range "4" "4") (re.range "8" "8"))))) (str.to_re "")))))(re.union (re.++ (str.to_re "")(re.++ (re.++ (re.opt (re.range "0" "0")) (re.range "2" "2"))(re.++ (str.to_re (str.++ "2" (str.++ "9" "")))(re.++ (re.++ (re.range "2" "9")(re.++ (re.range "0" "9")(re.++ (re.range "0" "0") (re.union (re.range "4" "4") (re.range "8" "8"))))) (str.to_re "")))))(re.union (re.++ (str.to_re "")(re.++ (re.++ (re.opt (re.range "0" "0")) (re.range "2" "2"))(re.++ (str.to_re (str.++ "2" (str.++ "9" "")))(re.++ (re.++ (re.range "1" "1")(re.++ (re.range "8" "9")(re.++ (re.union (re.range "2" "2")(re.union (re.range "4" "4")(re.union (re.range "6" "6") (re.range "8" "8")))) (re.union (re.range "0" "0")(re.union (re.range "4" "4") (re.range "8" "8")))))) (str.to_re "")))))(re.union (re.++ (str.to_re "")(re.++ (re.++ (re.opt (re.range "0" "0")) (re.range "2" "2"))(re.++ (str.to_re (str.++ "2" (str.++ "9" "")))(re.++ (re.++ (re.range "2" "9")(re.++ (re.range "0" "9")(re.++ (re.union (re.range "2" "2")(re.union (re.range "4" "4")(re.union (re.range "6" "6") (re.range "8" "8")))) (re.union (re.range "0" "0")(re.union (re.range "4" "4") (re.range "8" "8")))))) (str.to_re "")))))(re.union (re.++ (str.to_re "")(re.++ (re.++ (re.opt (re.range "0" "0")) (re.range "2" "2"))(re.++ (str.to_re (str.++ "2" (str.++ "9" "")))(re.++ (re.++ (re.range "1" "1")(re.++ (re.range "8" "9")(re.++ (re.union (re.range "1" "1")(re.union (re.range "3" "3")(re.union (re.range "5" "5")(re.union (re.range "7" "7") (re.range "9" "9"))))) (re.union (re.range "2" "2") (re.range "6" "6"))))) (str.to_re ""))))) (re.++ (str.to_re "")(re.++ (re.++ (re.opt (re.range "0" "0")) (re.range "2" "2"))(re.++ (str.to_re (str.++ "2" (str.++ "9" "")))(re.++ (re.++ (re.range "2" "9")(re.++ (re.range "0" "9")(re.++ (re.union (re.range "1" "1")(re.union (re.range "3" "3")(re.union (re.range "5" "5")(re.union (re.range "7" "7") (re.range "9" "9"))))) (re.union (re.range "2" "2") (re.range "6" "6"))))) (str.to_re "")))))))))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "1" (str.++ "9" (str.++ "8" (str.++ "8" (str.++ "-" (str.++ "0" (str.++ "2" (str.++ "-" (str.++ "1" (str.++ "4" "")))))))))))

(define-fun Witness2 () String (str.++ "1" (str.++ "9" (str.++ "5" (str.++ "7" (str.++ "-" (str.++ "0" (str.++ "2" (str.++ "-" (str.++ "2" (str.++ "8" "")))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.union (re.++ (re.union (re.++ (str.to_re (str.++ "1" (str.++ "9" "")))(re.++ (re.range "0" "9") (re.range "0" "9"))) (re.++ (re.range "2" "2")(re.++ (re.range "0" "9")(re.++ (re.range "0" "9") (re.range "0" "9")))))(re.++ (re.range "-" "-")(re.++ (re.union (re.++ (re.range "0" "0") (re.union (re.range "1" "1")(re.union (re.range "3" "3")(re.union (re.range "5" "5") (re.range "7" "8")))))(re.union (str.to_re (str.++ "1" (str.++ "0" ""))) (str.to_re (str.++ "1" (str.++ "2" "")))))(re.++ (re.range "-" "-") (re.union (re.++ (re.range "0" "0") (re.range "1" "9"))(re.union (re.++ (re.range "1" "2") (re.range "0" "9")) (re.++ (re.range "3" "3") (re.range "0" "1"))))))))(re.union (re.++ (re.union (re.++ (str.to_re (str.++ "1" (str.++ "9" "")))(re.++ (re.range "0" "9") (re.range "0" "9"))) (re.++ (re.range "2" "2")(re.++ (re.range "0" "9")(re.++ (re.range "0" "9") (re.range "0" "9")))))(re.++ (re.range "-" "-")(re.++ (re.union (re.++ (re.range "0" "0") (re.union (re.range "4" "4")(re.union (re.range "6" "6") (re.range "9" "9")))) (str.to_re (str.++ "1" (str.++ "1" ""))))(re.++ (re.range "-" "-") (re.union (re.++ (re.range "0" "0") (re.range "1" "9"))(re.union (re.++ (re.range "1" "2") (re.range "0" "9")) (str.to_re (str.++ "3" (str.++ "0" "")))))))))(re.union (re.++ (re.union (re.++ (str.to_re (str.++ "1" (str.++ "9" "")))(re.++ (re.range "0" "9") (re.range "0" "9"))) (re.++ (re.range "2" "2")(re.++ (re.range "0" "9")(re.++ (re.range "0" "9") (re.range "0" "9")))))(re.++ (re.range "-" "-")(re.++ (str.to_re (str.++ "0" (str.++ "2" "")))(re.++ (re.range "-" "-") (re.union (re.++ (re.range "0" "0") (re.range "1" "9"))(re.union (re.++ (re.range "1" "1") (re.range "0" "9")) (re.++ (re.range "2" "2") (re.range "0" "8"))))))))(re.union (re.++ (re.++ (re.union (re.range "0" "0")(re.union (re.range "2" "2")(re.union (re.range "4" "4")(re.union (re.range "6" "6") (re.range "8" "8")))))(re.++ (re.union (re.range "0" "0")(re.union (re.range "4" "4") (re.range "8" "8"))) (str.to_re (str.++ "0" (str.++ "0" "")))))(re.++ (re.range "-" "-")(re.++ (str.to_re (str.++ "0" (str.++ "2" "")))(re.++ (re.range "-" "-") (str.to_re (str.++ "2" (str.++ "9" "")))))))(re.union (re.++ (re.++ (re.union (re.range "1" "1")(re.union (re.range "3" "3")(re.union (re.range "5" "5")(re.union (re.range "7" "7") (re.range "9" "9")))))(re.++ (re.union (re.range "2" "2") (re.range "6" "6")) (str.to_re (str.++ "0" (str.++ "0" "")))))(re.++ (re.range "-" "-")(re.++ (str.to_re (str.++ "0" (str.++ "2" "")))(re.++ (re.range "-" "-") (str.to_re (str.++ "2" (str.++ "9" "")))))))(re.union (re.++ (re.++ (re.range "0" "9")(re.++ (re.range "0" "9")(re.++ (re.range "0" "0") (re.union (re.range "4" "4") (re.range "8" "8")))))(re.++ (re.range "-" "-")(re.++ (str.to_re (str.++ "0" (str.++ "2" "")))(re.++ (re.range "-" "-") (str.to_re (str.++ "2" (str.++ "9" "")))))))(re.union (re.++ (re.++ (re.range "0" "9")(re.++ (re.range "0" "9")(re.++ (re.union (re.range "2" "2")(re.union (re.range "4" "4")(re.union (re.range "6" "6") (re.range "8" "8")))) (re.union (re.range "0" "0")(re.union (re.range "4" "4") (re.range "8" "8"))))))(re.++ (re.range "-" "-")(re.++ (str.to_re (str.++ "0" (str.++ "2" "")))(re.++ (re.range "-" "-") (str.to_re (str.++ "2" (str.++ "9" ""))))))) (re.++ (re.++ (re.range "0" "9")(re.++ (re.range "0" "9")(re.++ (re.union (re.range "1" "1")(re.union (re.range "3" "3")(re.union (re.range "5" "5")(re.union (re.range "7" "7") (re.range "9" "9"))))) (re.union (re.range "2" "2") (re.range "6" "6")))))(re.++ (re.range "-" "-")(re.++ (str.to_re (str.++ "0" (str.++ "2" "")))(re.++ (re.range "-" "-") (str.to_re (str.++ "2" (str.++ "9" "")))))))))))))) (str.to_re "")))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "A" (str.++ ":" (str.++ "\u{5c}" (str.++ "_" (str.++ "\u{5c}" (str.++ "\u{85}" (str.++ "\u{5c}" (str.++ "D" (str.++ "z" (str.++ "G" (str.++ "I" (str.++ "F" "")))))))))))))

(define-fun Witness2 () String (str.++ "w" (str.++ ":" (str.++ "\u{5c}" (str.++ "\u{fe}" (str.++ "\u{5c}" (str.++ " " (str.++ "\u{5c}" (str.++ " " (str.++ "\u{5c}" (str.++ "\u{ed}" (str.++ "l" (str.++ " " (str.++ "\u{5c}" (str.++ "Z" (str.++ "\u{ba}" (str.++ "P" (str.++ "\u{85}" (str.++ "\u{85}" (str.++ "\u{c3}" (str.++ "\u{5c}" (str.++ "s" (str.++ "r" (str.++ " " (str.++ "\u{5c}" (str.++ "\u{85}" (str.++ "\u{a6}" (str.++ "J" (str.++ "P" (str.++ "G" ""))))))))))))))))))))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.union (re.range "A" "Z") (re.range "a" "z"))(re.++ (str.to_re (str.++ ":" (str.++ "\u{5c}" "")))(re.++ (re.+ (re.++ (re.+ (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{85}" "\u{85}")(re.union (re.range "\u{a0}" "\u{a0}")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))))))) (re.range "\u{5c}" "\u{5c}")))(re.++ (re.+ (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{85}" "\u{85}")(re.union (re.range "\u{a0}" "\u{a0}")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))))))(re.++ (re.union (re.++ (re.union (re.range "\u{00}" "\u{09}") (re.range "\u{0b}" "\u{ff}")) (str.to_re (str.++ "j" (str.++ "p" (str.++ "g" "")))))(re.union (re.++ (re.union (re.range "\u{00}" "\u{09}") (re.range "\u{0b}" "\u{ff}")) (str.to_re (str.++ "J" (str.++ "P" (str.++ "G" "")))))(re.union (re.++ (re.union (re.range "\u{00}" "\u{09}") (re.range "\u{0b}" "\u{ff}")) (str.to_re (str.++ "g" (str.++ "i" (str.++ "f" "")))))(re.union (re.++ (re.union (re.range "\u{00}" "\u{09}") (re.range "\u{0b}" "\u{ff}")) (str.to_re (str.++ "G" (str.++ "I" (str.++ "F" "")))))(re.union (re.++ (re.union (re.range "\u{00}" "\u{09}") (re.range "\u{0b}" "\u{ff}")) (str.to_re (str.++ "B" (str.++ "N" (str.++ "G" ""))))) (re.++ (re.union (re.range "\u{00}" "\u{09}") (re.range "\u{0b}" "\u{ff}")) (str.to_re (str.++ "b" (str.++ "n" (str.++ "g" "")))))))))) (str.to_re "")))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "\u{09}" ""))

(define-fun Witness2 () String (str.++ "\u{09}" ""))

(assert (= regexA (re.++ (re.+ (re.union (re.range "\u{09}" "\u{09}") (re.range " " " "))) (str.to_re ""))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "\u{da}" (str.++ "\u{ba}" (str.++ "V" (str.++ "\u{a9}" (str.++ "\u{9d}" ""))))))

(define-fun Witness2 () String (str.++ "\u{e1}" ""))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.+ (re.union (re.range "\u{00}" " ")(re.union (re.range "\u{22}" "\u{22}")(re.union (re.range "," ".")(re.union (re.range "0" "9")(re.union (re.range "?" "?")(re.union (re.range "A" "]")(re.union (re.range "a" "z") (re.range "\u{7f}" "\u{ff}"))))))))) (str.to_re "")))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "8" (str.++ "8" (str.++ "9" (str.++ "8" (str.++ "-" (str.++ "2" (str.++ "9" (str.++ "3" (str.++ "4" (str.++ "1" "")))))))))))

(define-fun Witness2 () String (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "6" (str.++ "-" (str.++ "1" (str.++ "2" (str.++ "8" (str.++ "8" (str.++ "6" "")))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.union ((_ re.loop 3 3) (re.range "0" "9")) ((_ re.loop 4 4) (re.range "0" "9")))(re.++ (re.range "-" "-")(re.++ ((_ re.loop 5 5) (re.range "0" "9")) (str.to_re "")))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "\u{a0}" (str.++ "\u{a0}" (str.++ "9" (str.++ "\u{85}" (str.++ "%" (str.++ " " (str.++ "\u{a0}" ""))))))))

(define-fun Witness2 () String (str.++ "1" (str.++ "0" (str.++ "0" ""))))

(assert (= regexA (re.union (re.++ (str.to_re "")(re.++ (str.to_re (str.++ "1" (str.++ "0" (str.++ "0" "")))) (str.to_re ""))) (re.++ (str.to_re "")(re.++ (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ ((_ re.loop 0 2) (re.range "0" "9"))(re.++ (re.opt (re.++ (re.union (re.range "," ",") (re.range "." ".")) (re.* (re.range "0" "9"))))(re.++ (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (re.opt (re.range "%" "%"))(re.++ (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))) (str.to_re "")))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "0" (str.++ "5" (str.++ "5" (str.++ "2" (str.++ "9" ""))))))

(define-fun Witness2 () String (str.++ "9" (str.++ "8" (str.++ "8" (str.++ "6" (str.++ "3" ""))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.++ (re.union (re.range "0" "4") (re.range "6" "9")) ((_ re.loop 4 4) (re.range "0" "9"))) (str.to_re "")))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "1" (str.++ "8" (str.++ "|" (str.++ "4" (str.++ "3" ""))))))

(define-fun Witness2 () String (str.++ "0" (str.++ "8" (str.++ "|" (str.++ "2" (str.++ "0" ""))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.union (re.++ (re.opt (re.range "0" "1")) (re.range "0" "9")) (re.++ (re.range "2" "2") (re.range "0" "3")))(re.++ (re.union (re.range "." ".")(re.union (re.range ":" ":") (re.range "|" "|")))(re.++ (re.++ (re.range "0" "5") (re.range "0" "9")) (str.to_re "")))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "C" (str.++ "8" (str.++ "0" ""))))

(define-fun Witness2 () String (str.++ "u" (str.++ "8" (str.++ "9" ""))))

(assert (= regexA (re.++ (str.to_re "")(re.++ ((_ re.loop 3 3) (re.union (re.range "0" "9") (re.range "A" "z"))) (str.to_re "")))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "D" (str.++ "K" (str.++ "-" (str.++ "6" (str.++ "8" (str.++ "9" (str.++ "6" ""))))))))

(define-fun Witness2 () String (str.++ "3" (str.++ "3" (str.++ "8" (str.++ "9" "")))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.opt (str.to_re (str.++ "D" (str.++ "K" (str.++ "-" "")))))(re.++ ((_ re.loop 4 4) (re.range "0" "9")) (str.to_re ""))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "\u{aa}" (str.++ "\u{ea}" (str.++ "9" (str.++ "\u{aa}" (str.++ "\u{aa}" (str.++ "#" (str.++ "9" (str.++ "\u{0d}" (str.++ "\u{0a}" (str.++ " " (str.++ "\u{d2}" (str.++ "a" (str.++ "," (str.++ " " (str.++ "G" (str.++ "Y" (str.++ " " (str.++ "8" (str.++ "0" (str.++ "5" (str.++ "7" (str.++ "9" "")))))))))))))))))))))))

(define-fun Witness2 () String (str.++ "\u{b5}" (str.++ "\u{b5}" (str.++ "o" (str.++ "T" (str.++ "\u{0d}" (str.++ "\u{0a}" (str.++ "7" (str.++ "\u{ba}" (str.++ "\u{c6}" (str.++ "," (str.++ " " (str.++ "g" (str.++ "z" (str.++ " " (str.++ "8" (str.++ "1" (str.++ "9" (str.++ "9" (str.++ "2" ""))))))))))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.++ ((_ re.loop 3 3) (re.union (re.range " " " ")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))) (re.* (re.union (re.range " " " ")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))))(re.++ (re.opt (re.++ (re.union (re.range "A" "Z") (re.range "a" "z")) (re.range "." ".")))(re.++ (re.opt (re.++ (re.* (re.union (re.range " " " ")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))))(re.++ (re.range "#" "#") (re.+ (re.range "0" "9")))))(re.++ (re.union (str.to_re (str.++ "\u{0d}" (str.++ "\u{0a}" ""))) (re.range " " " "))(re.++ (re.++ ((_ re.loop 3 3) (re.union (re.range " " " ")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))) (re.* (re.union (re.range " " " ")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))))(re.++ (str.to_re (str.++ "," (str.++ " " "")))(re.++ ((_ re.loop 2 2) (re.union (re.range "A" "Z") (re.range "a" "z")))(re.++ (re.range " " " ")(re.++ ((_ re.loop 5 5) (re.range "0" "9"))(re.++ (re.opt (re.++ (re.range "-" "-") ((_ re.loop 4 4) (re.range "0" "9")))) (str.to_re ""))))))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "0" (str.++ "," (str.++ "0" ""))))

(define-fun Witness2 () String (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "." (str.++ "3" (str.++ "6" (str.++ "2" (str.++ "," (str.++ "9" (str.++ "6" "")))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.union (re.++ (re.range "1" "9")(re.++ ((_ re.loop 0 2) (re.range "0" "9"))(re.++ (re.* (re.++ (re.range "." ".") ((_ re.loop 3 3) (re.range "0" "9")))) (re.opt (re.++ (re.range "," ",") ((_ re.loop 0 2) (re.range "0" "9")))))))(re.union (re.++ (re.range "1" "9")(re.++ (re.* (re.range "0" "9")) (re.opt (re.++ (re.range "," ",") ((_ re.loop 0 2) (re.range "0" "9"))))))(re.union (re.++ (re.range "0" "0") (re.opt (re.++ (re.range "," ",") ((_ re.loop 0 2) (re.range "0" "9"))))) (re.opt (re.++ (re.range "," ",") ((_ re.loop 1 2) (re.range "0" "9"))))))) (str.to_re "")))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "A" (str.++ "6" (str.++ "X" (str.++ "\u{0d}" (str.++ "3" (str.++ "L" (str.++ "2" ""))))))))

(define-fun Witness2 () String (str.++ "9" (str.++ "4" (str.++ "7" (str.++ "4" (str.++ "9" ""))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.union (re.++ ((_ re.loop 5 5) (re.range "0" "9"))(re.++ (re.range "-" "-") ((_ re.loop 4 4) (re.range "0" "9"))))(re.union ((_ re.loop 5 5) (re.range "0" "9")) (re.++ (re.range "A" "Z")(re.++ (re.range "0" "9")(re.++ (re.range "A" "Z")(re.++ (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))(re.++ (re.range "0" "9")(re.++ (re.range "A" "Z") (re.range "0" "9"))))))))) (str.to_re "")))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "(" (str.++ " " (str.++ "F" (str.++ "2" (str.++ "8" (str.++ "." (str.++ "," (str.++ ")" (str.++ ")" (str.++ "_" (str.++ "9" (str.++ "8" (str.++ "-" (str.++ "." (str.++ " " (str.++ "4" (str.++ "8" (str.++ "6" (str.++ "9" ""))))))))))))))))))))

(define-fun Witness2 () String (str.++ "(" (str.++ " " (str.++ "\u{00}" (str.++ "5" (str.++ "0" (str.++ ")" (str.++ "," (str.++ "." (str.++ ")" (str.++ ")" (str.++ ")" (str.++ " " (str.++ "*" (str.++ "0" (str.++ "1" (str.++ " " (str.++ "-" (str.++ " " (str.++ "8" (str.++ "6" (str.++ "1" (str.++ "6" "")))))))))))))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.opt (re.range "(" "("))(re.++ (re.range " " " ")(re.++ (re.union (re.range "\u{00}" "/") (re.range "2" "\u{ff}"))(re.++ ((_ re.loop 2 2) (re.range "0" "9"))(re.++ (re.* (re.union (re.range ")" ")") (re.range "," "/")))(re.++ (re.opt (re.range " " " "))(re.++ (re.union (re.range "\u{00}" "/") (re.range "2" "\u{ff}"))(re.++ ((_ re.loop 2 2) (re.range "0" "9"))(re.++ (re.opt (re.range " " " "))(re.++ (re.opt (re.range "-" "-"))(re.++ (re.opt (re.range "/" "/"))(re.++ (re.opt (re.range "." "."))(re.++ (re.range " " " ")(re.++ ((_ re.loop 4 4) (re.range "0" "9")) (str.to_re ""))))))))))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "2" (str.++ "7" (str.++ "4" (str.++ "-" (str.++ "4" (str.++ "8" (str.++ "9" (str.++ "5" (str.++ "8" (str.++ "9" (str.++ "D" ""))))))))))))

(define-fun Witness2 () String (str.++ "6" (str.++ "9" (str.++ "9" (str.++ "-" (str.++ "9" (str.++ "9" (str.++ "8" (str.++ "3" (str.++ "9" (str.++ "9" (str.++ "A" ""))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ ((_ re.loop 3 3) (re.range "0" "9"))(re.++ (re.opt (re.range "-" "-"))(re.++ ((_ re.loop 2 2) (re.range "0" "9"))(re.++ (re.opt (re.range "-" "-"))(re.++ ((_ re.loop 4 4) (re.range "0" "9"))(re.++ (re.union (re.range "A" "A")(re.union (re.++ (re.range "B" "B") (re.opt (re.range "1" "7")))(re.union (re.union (re.range "M" "M") (re.range "T" "T"))(re.union (re.++ (re.range "C" "C") (re.range "1" "4")) (re.range "D" "D"))))) (str.to_re ""))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "&" (str.++ "a" (str.++ "m" (str.++ "p" (str.++ ";" (str.++ "#" (str.++ "2" (str.++ "4" (str.++ "5" (str.++ ";" "")))))))))))

(define-fun Witness2 () String (str.++ "&" (str.++ "a" (str.++ "m" (str.++ "p" (str.++ ";" (str.++ "#" (str.++ "0" (str.++ "4" (str.++ "8" (str.++ ";" "")))))))))))

(assert (= regexA (re.union (str.to_re (str.++ "&" (str.++ "#" (str.++ "2" (str.++ "1" (str.++ "0" (str.++ ";" "")))))))(re.union (str.to_re (str.++ "&" (str.++ "#" (str.++ "2" (str.++ "1" (str.++ "1" (str.++ ";" "")))))))(re.union (str.to_re (str.++ "&" (str.++ "#" (str.++ "2" (str.++ "1" (str.++ "2" (str.++ ";" "")))))))(re.union (str.to_re (str.++ "&" (str.++ "#" (str.++ "2" (str.++ "1" (str.++ "3" (str.++ ";" "")))))))(re.union (str.to_re (str.++ "&" (str.++ "#" (str.++ "2" (str.++ "1" (str.++ "4" (str.++ ";" "")))))))(re.union (str.to_re (str.++ "&" (str.++ "#" (str.++ "2" (str.++ "1" (str.++ "6" (str.++ ";" "")))))))(re.union (str.to_re (str.++ "&" (str.++ "#" (str.++ "2" (str.++ "4" (str.++ "0" (str.++ ";" "")))))))(re.union (str.to_re (str.++ "&" (str.++ "#" (str.++ "2" (str.++ "4" (str.++ "2" (str.++ ";" "")))))))(re.union (str.to_re (str.++ "&" (str.++ "#" (str.++ "2" (str.++ "4" (str.++ "3" (str.++ ";" "")))))))(re.union (str.to_re (str.++ "&" (str.++ "#" (str.++ "2" (str.++ "4" (str.++ "4" (str.++ ";" "")))))))(re.union (str.to_re (str.++ "&" (str.++ "#" (str.++ "2" (str.++ "4" (str.++ "5" (str.++ ";" "")))))))(re.union (str.to_re (str.++ "&" (str.++ "#" (str.++ "2" (str.++ "4" (str.++ "6" (str.++ ";" "")))))))(re.union (str.to_re (str.++ "&" (str.++ "#" (str.++ "2" (str.++ "4" (str.++ "8" (str.++ ";" "")))))))(re.union (str.to_re (str.++ "&" (str.++ "a" (str.++ "m" (str.++ "p" (str.++ ";" (str.++ "#" (str.++ "0" (str.++ "4" (str.++ "8" (str.++ ";" "")))))))))))(re.union (str.to_re (str.++ "&" (str.++ "a" (str.++ "m" (str.++ "p" (str.++ ";" (str.++ "#" (str.++ "0" (str.++ "7" (str.++ "9" (str.++ ";" "")))))))))))(re.union (str.to_re (str.++ "&" (str.++ "a" (str.++ "m" (str.++ "p" (str.++ ";" (str.++ "#" (str.++ "1" (str.++ "1" (str.++ "1" (str.++ ";" "")))))))))))(re.union (str.to_re (str.++ "&" (str.++ "a" (str.++ "m" (str.++ "p" (str.++ ";" (str.++ "#" (str.++ "2" (str.++ "1" (str.++ "0" (str.++ ";" "")))))))))))(re.union (str.to_re (str.++ "&" (str.++ "a" (str.++ "m" (str.++ "p" (str.++ ";" (str.++ "#" (str.++ "2" (str.++ "1" (str.++ "1" (str.++ ";" "")))))))))))(re.union (str.to_re (str.++ "&" (str.++ "a" (str.++ "m" (str.++ "p" (str.++ ";" (str.++ "#" (str.++ "2" (str.++ "1" (str.++ "2" (str.++ ";" "")))))))))))(re.union (str.to_re (str.++ "&" (str.++ "a" (str.++ "m" (str.++ "p" (str.++ ";" (str.++ "#" (str.++ "2" (str.++ "1" (str.++ "3" (str.++ ";" "")))))))))))(re.union (str.to_re (str.++ "&" (str.++ "a" (str.++ "m" (str.++ "p" (str.++ ";" (str.++ "#" (str.++ "2" (str.++ "1" (str.++ "4" (str.++ ";" "")))))))))))(re.union (str.to_re (str.++ "&" (str.++ "a" (str.++ "m" (str.++ "p" (str.++ ";" (str.++ "#" (str.++ "2" (str.++ "1" (str.++ "6" (str.++ ";" "")))))))))))(re.union (str.to_re (str.++ "&" (str.++ "a" (str.++ "m" (str.++ "p" (str.++ ";" (str.++ "O" (str.++ "g" (str.++ "r" (str.++ "a" (str.++ "v" (str.++ "e" (str.++ ";" "")))))))))))))(re.union (str.to_re (str.++ "&" (str.++ "a" (str.++ "m" (str.++ "p" (str.++ ";" (str.++ "O" (str.++ "a" (str.++ "c" (str.++ "u" (str.++ "t" (str.++ "e" (str.++ ";" "")))))))))))))(re.union (str.to_re (str.++ "&" (str.++ "a" (str.++ "m" (str.++ "p" (str.++ ";" (str.++ "O" (str.++ "c" (str.++ "i" (str.++ "r" (str.++ "c" (str.++ ";" ""))))))))))))(re.union (str.to_re (str.++ "&" (str.++ "a" (str.++ "m" (str.++ "p" (str.++ ";" (str.++ "O" (str.++ "t" (str.++ "i" (str.++ "l" (str.++ "d" (str.++ "e" (str.++ ";" "")))))))))))))(re.union (str.to_re (str.++ "&" (str.++ "a" (str.++ "m" (str.++ "p" (str.++ ";" (str.++ "O" (str.++ "u" (str.++ "m" (str.++ "l" (str.++ ";" "")))))))))))(re.union (str.to_re (str.++ "&" (str.++ "a" (str.++ "m" (str.++ "p" (str.++ ";" (str.++ "O" (str.++ "s" (str.++ "l" (str.++ "a" (str.++ "s" (str.++ "h" (str.++ ";" "")))))))))))))(re.union (str.to_re (str.++ "&" (str.++ "a" (str.++ "m" (str.++ "p" (str.++ ";" (str.++ "#" (str.++ "2" (str.++ "4" (str.++ "2" (str.++ ";" "")))))))))))(re.union (str.to_re (str.++ "&" (str.++ "a" (str.++ "m" (str.++ "p" (str.++ ";" (str.++ "#" (str.++ "2" (str.++ "4" (str.++ "3" (str.++ ";" "")))))))))))(re.union (str.to_re (str.++ "&" (str.++ "a" (str.++ "m" (str.++ "p" (str.++ ";" (str.++ "#" (str.++ "2" (str.++ "4" (str.++ "4" (str.++ ";" "")))))))))))(re.union (str.to_re (str.++ "&" (str.++ "a" (str.++ "m" (str.++ "p" (str.++ ";" (str.++ "#" (str.++ "2" (str.++ "4" (str.++ "5" (str.++ ";" "")))))))))))(re.union (str.to_re (str.++ "&" (str.++ "a" (str.++ "m" (str.++ "p" (str.++ ";" (str.++ "o" (str.++ "g" (str.++ "r" (str.++ "a" (str.++ "v" (str.++ "e" (str.++ ";" "")))))))))))))(re.union (str.to_re (str.++ "&" (str.++ "a" (str.++ "m" (str.++ "p" (str.++ ";" (str.++ "o" (str.++ "a" (str.++ "c" (str.++ "u" (str.++ "t" (str.++ "e" (str.++ ";" "")))))))))))))(re.union (str.to_re (str.++ "&" (str.++ "a" (str.++ "m" (str.++ "p" (str.++ ";" (str.++ "o" (str.++ "c" (str.++ "i" (str.++ "r" (str.++ "c" (str.++ ";" ""))))))))))))(re.union (str.to_re (str.++ "&" (str.++ "a" (str.++ "m" (str.++ "p" (str.++ ";" (str.++ "o" (str.++ "t" (str.++ "i" (str.++ "l" (str.++ "d" (str.++ "e" (str.++ ";" "")))))))))))))(re.union (str.to_re (str.++ "&" (str.++ "a" (str.++ "m" (str.++ "p" (str.++ ";" (str.++ "o" (str.++ "u" (str.++ "m" (str.++ "l" (str.++ ";" ""))))))))))) (str.to_re (str.++ "&" (str.++ "a" (str.++ "m" (str.++ "p" (str.++ ";" (str.++ "o" (str.++ "s" (str.++ "l" (str.++ "a" (str.++ "s" (str.++ "h" (str.++ ";" ""))))))))))))))))))))))))))))))))))))))))))))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "J" ""))

(define-fun Witness2 () String (str.++ "D" ""))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.union (re.range "A" "Z") (re.range "a" "z")) (str.to_re "")))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "1" (str.++ "8" (str.++ "7" (str.++ "8" "")))))

(define-fun Witness2 () String (str.++ "1" (str.++ "8" (str.++ "7" (str.++ "4" "")))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.union (re.++ (str.to_re (str.++ "1" (str.++ "8" "")))(re.++ (re.range "5" "9") (re.range "0" "9")))(re.union (re.++ (re.union (str.to_re (str.++ "1" (str.++ "9" ""))) (str.to_re (str.++ "2" (str.++ "0" "")))) ((_ re.loop 2 2) (re.range "0" "9"))) (str.to_re (str.++ "2" (str.++ "1" (str.++ "0" (str.++ "0" ""))))))) (str.to_re "")))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "#" (str.++ "A" (str.++ "F" (str.++ "b" "")))))

(define-fun Witness2 () String (str.++ "f" (str.++ "8" (str.++ "0" (str.++ "9" (str.++ "5" (str.++ "9" "")))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.opt (re.range "#" "#"))(re.++ ((_ re.loop 1 2) ((_ re.loop 3 3) (re.union (re.range "0" "9")(re.union (re.range "A" "F") (re.range "a" "f"))))) (str.to_re ""))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "5" (str.++ "9" (str.++ "." (str.++ "3" "")))))

(define-fun Witness2 () String (str.++ "7" ""))

(assert (= regexA (re.++ (str.to_re "")(re.++ ((_ re.loop 1 15) (re.range "0" "9"))(re.++ (re.opt (re.++ (re.range "." ".") ((_ re.loop 1 2) (re.range "0" "9")))) (str.to_re ""))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "8" (str.++ "3" (str.++ "." (str.++ "4" (str.++ "." (str.++ "6" (str.++ "." (str.++ "2" (str.++ "8" ""))))))))))

(define-fun Witness2 () String (str.++ "2" (str.++ "5" (str.++ "4" (str.++ "2" (str.++ "4" (str.++ "4" (str.++ "." (str.++ "2" (str.++ "." (str.++ "8" (str.++ "7" ""))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.++ ((_ re.loop 3 3) (re.union (re.++ (str.to_re (str.++ "2" (str.++ "5" ""))) (re.range "0" "4")) (re.++ (re.union (re.++ (re.range "2" "2") (re.range "0" "4"))(re.union (re.++ (re.range "1" "1") (re.range "0" "9")) (re.opt (re.range "1" "9"))))(re.++ (re.range "0" "9") (re.range "." "."))))) (re.union (re.++ (str.to_re (str.++ "2" (str.++ "5" ""))) (re.range "0" "4")) (re.++ (re.union (re.++ (re.range "2" "2") (re.range "0" "4"))(re.union (re.++ (re.range "1" "1") (re.range "0" "9")) (re.opt (re.range "1" "9")))) (re.range "0" "9")))) (str.to_re "")))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "5" ""))

(define-fun Witness2 () String (str.++ "3" ""))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.range "1" "5") (str.to_re "")))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "8" (str.++ "9" (str.++ "." (str.++ "0" (str.++ "8" (str.++ "3" (str.++ "-" (str.++ "9" (str.++ "2" (str.++ "2" "")))))))))))

(define-fun Witness2 () String (str.++ "9" (str.++ "5" (str.++ "." (str.++ "8" (str.++ "7" (str.++ "8" "")))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ ((_ re.loop 2 2) (re.range "0" "9"))(re.++ (re.range "." ".")(re.++ ((_ re.loop 3 3) (re.range "0" "9"))(re.++ (re.opt (re.++ (re.range "-" "-") ((_ re.loop 3 3) (re.range "0" "9")))) (str.to_re ""))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "9" (str.++ "4" (str.++ "1" (str.++ "3" (str.++ " " (str.++ "8" (str.++ "A" (str.++ "B" "")))))))))

(define-fun Witness2 () String (str.++ "G" (str.++ "I" (str.++ "R" (str.++ " " (str.++ "0" (str.++ "A" (str.++ "A" ""))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.union (re.++ (re.union (re.range "0" "9")(re.union (re.range "A" "P")(re.union (re.range "R" "U")(re.union (re.range "W" "W") (re.range "Y" "Z")))))(re.++ (re.union (re.range "0" "9")(re.union (re.range "A" "H") (re.range "K" "Y")))(re.++ (re.opt (re.union (re.range "0" "9")(re.union (re.range "A" "A")(re.union (re.range "E" "E")(re.union (re.range "H" "H")(re.union (re.range "M" "N")(re.union (re.range "P" "P")(re.union (re.range "R" "R")(re.union (re.range "T" "T")(re.union (re.range "V" "V") (re.range "X" "Y")))))))))))(re.++ (re.opt (re.union (re.range "0" "9")(re.union (re.range "A" "B")(re.union (re.range "E" "E")(re.union (re.range "H" "H")(re.union (re.range "M" "N")(re.union (re.range "P" "P")(re.union (re.range "R" "R") (re.range "V" "Y")))))))))(re.++ ((_ re.loop 1 2) (re.range " " " "))(re.++ (re.range "0" "9") ((_ re.loop 2 2) (re.union (re.range "A" "B")(re.union (re.range "D" "H")(re.union (re.range "J" "J")(re.union (re.range "L" "L")(re.union (re.range "N" "U") (re.range "W" "Z"))))))))))))) (str.to_re (str.++ "G" (str.++ "I" (str.++ "R" (str.++ " " (str.++ "0" (str.++ "A" (str.++ "A" ""))))))))) (str.to_re "")))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "\u{8f}" (str.++ "\u{e0}" (str.++ "F" (str.++ "\u{cb}" (str.++ "4" (str.++ "2" (str.++ "9" (str.++ "2" (str.++ "1" (str.++ "3" (str.++ "\u{ff}" (str.++ "f" (str.++ "4" ""))))))))))))))

(define-fun Witness2 () String (str.++ ":" (str.++ "\u{e6}" (str.++ "I" (str.++ "\u{d5}" (str.++ "8" (str.++ "2" (str.++ "1" (str.++ "9" (str.++ "8" (str.++ "3" "")))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ ((_ re.loop 4 4) (re.union (re.range "\u{00}" "/") (re.range ":" "\u{ff}")))(re.++ ((_ re.loop 6 6) (re.range "0" "9"))(re.++ (re.opt (re.++ (re.union (re.range "\u{00}" "\u{09}") (re.range "\u{0b}" "\u{ff}"))(re.++ (re.union (re.range "\u{00}" "/") (re.range ":" "\u{ff}")) (re.range "0" "9")))) (str.to_re "")))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "1" (str.++ "2" (str.++ "/" (str.++ "2" (str.++ "3" (str.++ "/" (str.++ "1" (str.++ "9" (str.++ "9" (str.++ "8" "")))))))))))

(define-fun Witness2 () String (str.++ "1" (str.++ "2" (str.++ "/" (str.++ "3" (str.++ "1" (str.++ "/" (str.++ "2" (str.++ "0" (str.++ "0" (str.++ "1" "")))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.union (re.++ (re.range "0" "0") (re.range "1" "9")) (re.++ (re.range "1" "1") (re.range "0" "2")))(re.++ (re.range "/" "/")(re.++ (re.union (re.union (re.++ (re.range "0" "0") (re.range "1" "9")) (re.++ (re.range "2" "2") (re.range "0" "9"))) (re.++ (re.range "3" "3") (re.range "0" "1")))(re.++ (re.range "/" "/")(re.++ (re.union (re.++ (str.to_re (str.++ "1" (str.++ "9" "")))(re.++ (re.range "0" "9") (re.range "0" "9"))) (re.++ (str.to_re (str.++ "2" (str.++ "0" (str.++ "0" "")))) (re.range "0" "3"))) (str.to_re "")))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "z" (str.++ "y" (str.++ "\u{c5}" (str.++ "K" (str.++ "\u{ee}" (str.++ "4" "")))))))

(define-fun Witness2 () String (str.++ "t" (str.++ "\u{b5}" (str.++ "\u{aa}" (str.++ "z" (str.++ "\u{aa}" ""))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.union (re.range "A" "Z") (re.range "a" "z"))(re.++ ((_ re.loop 3 14) (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))) (str.to_re ""))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "f" (str.++ "r" (str.++ "s" (str.++ "|" (str.++ "9" (str.++ "3" (str.++ "8" (str.++ "7" (str.++ "5" (str.++ "8" (str.++ " " (str.++ "x" (str.++ "8" (str.++ "v" "")))))))))))))))

(define-fun Witness2 () String (str.++ "I" (str.++ "A" (str.++ "S" (str.++ "1" (str.++ "0" (str.++ "8" (str.++ "9" (str.++ "1" (str.++ "8" (str.++ "|" (str.++ "E" (str.++ "E" (str.++ "X" ""))))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ ((_ re.loop 3 4) (re.union (re.range "A" "Z") (re.range "a" "z")))(re.++ (re.opt (re.union (re.range " " " ")(re.union (re.range "-" "-") (re.range "|" "|"))))(re.++ ((_ re.loop 6 6) (re.range "0" "9"))(re.++ (re.opt (re.union (re.range " " " ")(re.union (re.range "-" "-") (re.range "|" "|"))))(re.++ ((_ re.loop 3 3) (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))) (str.to_re "")))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "z" (str.++ "l" (str.++ "z" (str.++ "N" (str.++ "\u{ee}" (str.++ "\u{b5}" "")))))))

(define-fun Witness2 () String (str.++ "8" (str.++ "P" (str.++ "\u{cd}" (str.++ "y" (str.++ "_" (str.++ "\u{ba}" "")))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.++ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))(re.++ ((_ re.loop 4 18) (re.union (re.range " " " ")(re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))))) (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))) (str.to_re "")))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "C" (str.++ "N" (str.++ "=" (str.++ "x" (str.++ "," (str.++ "O" (str.++ "U" (str.++ "=" (str.++ "\u{85}" (str.++ "\u{0a}" (str.++ "\u{f9}" (str.++ "," (str.++ "D" (str.++ "C" (str.++ "=" (str.++ "\u{db}" (str.++ "," (str.++ "," (str.++ "D" (str.++ "C" (str.++ "=" (str.++ ";" "")))))))))))))))))))))))

(define-fun Witness2 () String (str.++ "C" (str.++ "N" (str.++ "=" (str.++ "\u{a0}" (str.++ "," (str.++ "O" (str.++ "U" (str.++ "=" (str.++ "\u{85}" (str.++ "," (str.++ "O" (str.++ "U" (str.++ "=" (str.++ "\u{f3}" (str.++ "," (str.++ "O" (str.++ "U" (str.++ "=" (str.++ "\u{0a}" (str.++ "," (str.++ "O" (str.++ "U" (str.++ "=" (str.++ "\u{ba}" (str.++ "\u{a0}" (str.++ "," (str.++ "O" (str.++ "U" (str.++ "=" (str.++ "\u{e6}" (str.++ "," (str.++ "D" (str.++ "C" (str.++ "=" (str.++ "\u{ec}" (str.++ "," (str.++ "," (str.++ "D" (str.++ "C" (str.++ "=" (str.++ "E" (str.++ "z" "")))))))))))))))))))))))))))))))))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.++ (re.+ (re.++ (str.to_re (str.++ "C" (str.++ "N" (str.++ "=" ""))))(re.++ (re.+ (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "&" "'")(re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range ";" ";")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{85}" "\u{85}")(re.union (re.range "\u{a0}" "\u{a0}")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))))))))) (re.range "," ","))))(re.++ (re.* (re.++ (str.to_re (str.++ "O" (str.++ "U" (str.++ "=" ""))))(re.++ (re.+ (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "&" "'")(re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range ";" ";")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{85}" "\u{85}")(re.union (re.range "\u{a0}" "\u{a0}")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))))))))) (re.range "," ",")))) (re.++ ((_ re.loop 2 2) (re.++ (str.to_re (str.++ "D" (str.++ "C" (str.++ "=" ""))))(re.++ (re.+ (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "&" "'")(re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range ";" ";")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{85}" "\u{85}")(re.union (re.range "\u{a0}" "\u{a0}")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))))))))) (re.* (re.range "," ","))))) (re.* (re.++ (str.to_re (str.++ "D" (str.++ "C" (str.++ "=" ""))))(re.++ (re.+ (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "&" "'")(re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range ";" ";")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{85}" "\u{85}")(re.union (re.range "\u{a0}" "\u{a0}")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))))))))) (re.* (re.range "," ",")))))))) (str.to_re "")))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "3" (str.++ "5" (str.++ "2" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "5" (str.++ "7" (str.++ "5" (str.++ "8" (str.++ "8" (str.++ "8" (str.++ "7" (str.++ "9" (str.++ "8" (str.++ "9" "")))))))))))))))))

(define-fun Witness2 () String (str.++ "3" (str.++ "5" (str.++ "8" (str.++ "4" (str.++ "4" (str.++ "2" (str.++ "9" (str.++ "4" (str.++ "3" (str.++ "8" (str.++ "3" (str.++ "3" (str.++ "3" (str.++ "8" (str.++ "3" (str.++ "8" "")))))))))))))))))

(assert (= regexA (re.union (re.++ (str.to_re "")(re.++ (str.to_re (str.++ "3" (str.++ "5" (str.++ "2" ""))))(re.++ (re.range "8" "9") (re.union (re.++ ((_ re.loop 11 11) (re.range "0" "9")) (str.to_re "")) (re.++ ((_ re.loop 12 12) (re.range "0" "9")) (str.to_re "")))))) (re.++ (str.to_re "")(re.++ (str.to_re (str.++ "3" (str.++ "5" "")))(re.++ (re.range "3" "8") (re.union (re.++ ((_ re.loop 12 12) (re.range "0" "9")) (str.to_re "")) (re.++ ((_ re.loop 13 13) (re.range "0" "9")) (str.to_re "")))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "6" (str.++ "*" (str.++ "1" (str.++ "0" (str.++ "0" (str.++ "*" (str.++ "1" ""))))))))

(define-fun Witness2 () String (str.++ "1" (str.++ "*" (str.++ "2" (str.++ "8" (str.++ "*" (str.++ "2" "")))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.+ (re.range "0" "9"))(re.++ (re.range "*" "*")(re.++ (re.+ (re.range "0" "9"))(re.++ (re.range "*" "*")(re.++ (re.+ (re.range "0" "9")) (str.to_re "")))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "h" (str.++ "t" (str.++ "t" (str.++ "p" (str.++ ":" (str.++ "/" (str.++ "/" (str.++ "m" (str.++ "." (str.++ "-" (str.++ "." (str.++ "." (str.++ "M" (str.++ "y" "")))))))))))))))

(define-fun Witness2 () String (str.++ "h" (str.++ "t" (str.++ "t" (str.++ "p" (str.++ ":" (str.++ "/" (str.++ "/" (str.++ "." (str.++ "." (str.++ "9" (str.++ "." (str.++ "-" (str.++ "/" ""))))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.union (str.to_re (str.++ "h" (str.++ "t" ""))) (re.range "f" "f"))(re.++ (str.to_re (str.++ "t" (str.++ "p" "")))(re.++ (re.opt (re.range "s" "s"))(re.++ (str.to_re (str.++ ":" (str.++ "/" (str.++ "/" ""))))(re.++ (re.+ (re.union (re.range "-" ".")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_") (re.range "a" "z"))))))(re.++ (re.++ ((_ re.loop 2 2) (re.++ (re.range "." ".") (re.+ (re.union (re.range "-" ".")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_") (re.range "a" "z")))))))) (re.* (re.++ (re.range "." ".") (re.+ (re.union (re.range "-" ".")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_") (re.range "a" "z")))))))))(re.++ (re.opt (re.range "/" "/"))(re.++ (re.opt (re.* (re.union (re.range "#" "'")(re.union (re.range "+" "9")(re.union (re.range ";" ";")(re.union (re.range "?" "?")(re.union (re.range "A" "Z")(re.union (re.range "\u{5c}" "\u{5c}")(re.union (re.range "_" "_") (re.range "a" "z")))))))))) (str.to_re ""))))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "9" (str.++ "2" (str.++ "9" (str.++ "." (str.++ "4" (str.++ "2" (str.++ "9" (str.++ "." (str.++ "5" (str.++ "7" (str.++ "9" (str.++ "/" (str.++ "3" (str.++ "3" (str.++ "8" (str.++ "1" (str.++ "-" (str.++ "0" (str.++ "8" ""))))))))))))))))))))

(define-fun Witness2 () String (str.++ "9" (str.++ "8" (str.++ "4" (str.++ "." (str.++ "4" (str.++ "6" (str.++ "8" (str.++ "." (str.++ "9" (str.++ "1" (str.++ "4" (str.++ "/" (str.++ "2" (str.++ "4" (str.++ "6" (str.++ "9" (str.++ "-" (str.++ "0" (str.++ "8" ""))))))))))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ ((_ re.loop 2 3) (re.range "0" "9"))(re.++ (re.range "." ".")(re.++ ((_ re.loop 3 3) (re.range "0" "9"))(re.++ (re.range "." ".")(re.++ ((_ re.loop 3 3) (re.range "0" "9"))(re.++ (re.range "/" "/")(re.++ ((_ re.loop 4 4) (re.range "0" "9"))(re.++ (re.range "-" "-")(re.++ ((_ re.loop 2 2) (re.range "0" "9")) (str.to_re "")))))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "8" (str.++ "5" (str.++ "0" (str.++ "\u{a0}" (str.++ "o" (str.++ "u" (str.++ "z" (str.++ "x" (str.++ "\u{a0}" (str.++ "Y" (str.++ "O" (str.++ "z" (str.++ "M" ""))))))))))))))

(define-fun Witness2 () String (str.++ "9" (str.++ "8" (str.++ "4" (str.++ "\u{0c}" (str.++ "8" (str.++ "\u{e9}" (str.++ " " (str.++ "d" (str.++ "z" (str.++ " " (str.++ "t" (str.++ "Z" (str.++ "T" (str.++ "w" (str.++ "\u{0d}" ""))))))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.++ ((_ re.loop 3 3) (re.range "0" "9")) (re.* (re.range "0" "9")))(re.++ (re.opt (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ ((_ re.loop 0 5) (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))(re.++ (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))(re.++ ((_ re.loop 2 30) (re.union (re.range "A" "Z") (re.range "a" "z")))(re.++ (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))(re.++ ((_ re.loop 2 15) (re.union (re.range "A" "Z") (re.range "a" "z")))(re.++ (re.opt (re.range "." "."))(re.++ (re.opt (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ ((_ re.loop 0 5) (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))) (str.to_re ""))))))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "8" (str.++ "3" (str.++ "." (str.++ "0" "")))))

(define-fun Witness2 () String (str.++ "-" (str.++ "1" (str.++ "8" (str.++ "0" (str.++ "." (str.++ "0" "")))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.opt (re.union (re.range "+" "+") (re.range "-" "-")))(re.++ (re.union (re.++ (re.range "0" "9")(re.++ (re.range "." ".") ((_ re.loop 1 6) (re.range "0" "9"))))(re.union (re.++ (re.range "1" "9")(re.++ (re.range "0" "9")(re.++ (re.range "." ".") ((_ re.loop 1 6) (re.range "0" "9")))))(re.union (re.++ (re.range "1" "1")(re.++ (re.range "1" "7")(re.++ (re.range "0" "9")(re.++ (re.range "." ".") ((_ re.loop 1 6) (re.range "0" "9")))))) (re.++ (str.to_re (str.++ "1" (str.++ "8" (str.++ "0" (str.++ "." ""))))) ((_ re.loop 1 6) (re.range "0" "0")))))) (str.to_re ""))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "D" (str.++ "7" (str.++ "8" (str.++ "M" (str.++ "N" (str.++ "7" (str.++ "4" (str.++ "W" (str.++ "X" (str.++ "9" (str.++ "2" (str.++ "2" (str.++ "4" (str.++ "9" (str.++ "4" (str.++ "8" (str.++ "0" ""))))))))))))))))))

(define-fun Witness2 () String (str.++ "0" (str.++ "1" (str.++ "8" (str.++ "I" (str.++ "V" (str.++ "3" (str.++ "9" (str.++ "3" (str.++ "X" (str.++ "4" (str.++ "C" (str.++ "E" (str.++ "5" (str.++ "9" (str.++ "8" (str.++ "5" (str.++ "3" ""))))))))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ ((_ re.loop 3 3) (re.union (re.range "0" "9") (re.range "A" "Z")))(re.++ ((_ re.loop 2 2) (re.range "A" "Z"))(re.++ ((_ re.loop 2 2) (re.range "0" "9"))(re.++ (re.union (re.range "0" "9") (re.range "A" "Z"))(re.++ (re.union (re.range "0" "9") (re.range "X" "X"))(re.++ ((_ re.loop 3 3) (re.union (re.range "0" "9") (re.range "A" "Z")))(re.++ ((_ re.loop 5 5) (re.range "0" "9")) (str.to_re "")))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "\u{0d}" (str.++ "\u{0b}" (str.++ "\u{85}" (str.++ "0" (str.++ "2" (str.++ "-" (str.++ "7" (str.++ "6" (str.++ "9" (str.++ "9" (str.++ "3" (str.++ "2" "")))))))))))))

(define-fun Witness2 () String (str.++ "S" (str.++ "z" (str.++ "s" (str.++ "o" (str.++ "J" (str.++ "O" (str.++ "\u{0d}" (str.++ "6" (str.++ "8" (str.++ "\u{a0}" (str.++ "\u{a0}" (str.++ "7" (str.++ "9" (str.++ "5" (str.++ "8" (str.++ "8" (str.++ "0" ""))))))))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.++ (re.opt (re.++ (re.++ (re.union (re.range "S" "S") (re.range "s" "s")) (re.union (re.range "R" "T")(re.union (re.range "X" "Z")(re.union (re.range "r" "t") (re.range "x" "z")))))(re.++ (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (re.opt (re.union (re.range "S" "S")(re.union (re.range "X" "Z")(re.union (re.range "s" "s") (re.range "x" "z")))))(re.++ (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))) ((_ re.loop 2 3) (re.union (re.range "A" "Z") (re.range "a" "z"))))))))(re.++ (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (re.++ (re.range "0" "9") (re.range "0" "9"))(re.++ (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (re.opt (re.range "-" "-"))(re.++ (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))) ((_ re.loop 6 7) (re.range "0" "9")))))))) (str.to_re "")))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "A" (str.++ "y" (str.++ "," (str.++ "\u{85}" (str.++ "I" (str.++ "I" (str.++ "I" (str.++ "Z" (str.++ "\u{ba}" (str.++ "-" (str.++ "V" (str.++ "D" (str.++ "\u{b5}" (str.++ "\u{b5}" (str.++ "9" (str.++ "\u{c6}" (str.++ "\u{f6}" (str.++ "." (str.++ "P" ""))))))))))))))))))))

(define-fun Witness2 () String (str.++ "X" (str.++ "j" (str.++ "\u{ee}" (str.++ "\u{c6}" (str.++ "D" (str.++ "," (str.++ " " (str.++ "I" (str.++ "V" (str.++ "," (str.++ "\u{0c}" (str.++ "A" (str.++ "." (str.++ "\u{0b}" (str.++ "\u{b5}" (str.++ "8" (str.++ "." ""))))))))))))))))))

(assert (= regexA (re.++ (re.++ (re.range "A" "Z")(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))(re.++ (re.opt (re.range "-" "-"))(re.++ (re.opt (re.range "A" "Z")) (re.* (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))))))(re.++ (re.range "," ",")(re.++ (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))(re.++ (re.opt (re.union (str.to_re (str.++ "J" (str.++ "r" (str.++ "." ""))))(re.union (str.to_re (str.++ "S" (str.++ "r" (str.++ "." ""))))(re.union (str.to_re (str.++ "I" (str.++ "V" "")))(re.union (str.to_re (str.++ "I" (str.++ "I" (str.++ "I" "")))) (str.to_re (str.++ "I" (str.++ "I" ""))))))))(re.++ (re.opt (re.range "," ","))(re.++ (re.opt (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (re.++ (re.range "A" "Z")(re.++ (re.* (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))(re.++ (re.opt (re.range "-" "-"))(re.++ (re.opt (re.range "A" "Z"))(re.++ (re.* (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))) (re.opt (re.range "." ".")))))))(re.++ (re.opt (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))) (re.++ (re.opt (re.range "A" "Z"))(re.++ (re.* (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))) (re.opt (re.range "." "."))))))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "1" ""))

(define-fun Witness2 () String (str.++ "1" (str.++ "9" "")))

(assert (= regexA (re.union (re.++ (str.to_re "")(re.++ (re.range "1" "9") (str.to_re "")))(re.union (re.++ (str.to_re "")(re.++ (re.range "1" "4")(re.++ (re.range "0" "9") (str.to_re "")))) (re.++ (str.to_re "")(re.++ (str.to_re (str.++ "5" (str.++ "0" ""))) (str.to_re "")))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "4" (str.++ "9" (str.++ "0" (str.++ "3" (str.++ "0" (str.++ "1" (str.++ "6" (str.++ "0" (str.++ "8" (str.++ "8" (str.++ "3" (str.++ "8" (str.++ "8" (str.++ "4" (str.++ "0" (str.++ "8" "")))))))))))))))))

(define-fun Witness2 () String (str.++ "4" (str.++ "9" (str.++ "0" (str.++ "3" (str.++ "0" (str.++ "0" (str.++ "9" (str.++ "1" (str.++ "3" (str.++ "8" (str.++ "9" (str.++ "9" (str.++ "8" (str.++ "8" (str.++ "6" (str.++ "9" "")))))))))))))))))

(assert (= regexA (re.union (re.++ (str.to_re "")(re.++ (re.range "4" "4")(re.++ ((_ re.loop 12 12) (re.range "0" "9")) (str.to_re ""))))(re.union (re.++ (str.to_re "")(re.++ (re.range "4" "4")(re.++ (re.range "0" "8")(re.++ ((_ re.loop 14 14) (re.range "0" "9")) (str.to_re "")))))(re.union (re.++ (str.to_re "")(re.++ (str.to_re (str.++ "4" (str.++ "9" "")))(re.++ (re.union (re.range "\u{00}" "/")(re.union (re.range "2" "2") (re.range "4" "\u{ff}")))(re.++ ((_ re.loop 13 13) (re.range "0" "9")) (str.to_re "")))))(re.union (re.++ (str.to_re "")(re.++ (str.to_re (str.++ "4" (str.++ "9" (str.++ "0" (str.++ "3" (str.++ "0" ""))))))(re.++ (re.range "0" "1")(re.++ ((_ re.loop 10 10) (re.range "0" "9")) (str.to_re "")))))(re.union (re.++ (str.to_re "")(re.++ (str.to_re (str.++ "4" (str.++ "9" (str.++ "0" (str.++ "3" (str.++ "3" ""))))))(re.++ (re.range "0" "4")(re.++ ((_ re.loop 10 10) (re.range "0" "9")) (str.to_re "")))))(re.union (re.++ (str.to_re "")(re.++ (str.to_re (str.++ "4" (str.++ "9" (str.++ "1" (str.++ "1" (str.++ "0" ""))))))(re.++ (re.union (re.range "\u{00}" "0") (re.range "3" "\u{ff}"))(re.++ ((_ re.loop 10 10) (re.range "0" "9")) (str.to_re "")))))(re.union (re.++ (str.to_re "")(re.++ (str.to_re (str.++ "4" (str.++ "9" (str.++ "1" (str.++ "1" (str.++ "7" ""))))))(re.++ (re.range "0" "3")(re.++ ((_ re.loop 10 10) (re.range "0" "9")) (str.to_re "")))))(re.union (re.++ (str.to_re "")(re.++ (str.to_re (str.++ "4" (str.++ "9" (str.++ "1" (str.++ "1" (str.++ "8" ""))))))(re.++ (re.union (re.range "\u{00}" "/") (re.range "3" "\u{ff}"))(re.++ ((_ re.loop 10 10) (re.range "0" "9")) (str.to_re ""))))) (re.++ (str.to_re "")(re.++ (str.to_re (str.++ "4" (str.++ "9" (str.++ "3" ""))))(re.++ (re.union (re.range "\u{00}" "5") (re.range "7" "\u{ff}"))(re.++ ((_ re.loop 12 12) (re.range "0" "9")) (str.to_re "")))))))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String "")

(define-fun Witness2 () String "")

(assert (= regexA (re.union (re.++ (str.to_re (str.++ "S" (str.++ "E" (str.++ "L" (str.++ "E" (str.++ "C" (str.++ "T" "")))))))(re.++ (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))(re.++ (re.+ (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "(" "*")(re.union (re.range "," ",")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{85}" "\u{85}")(re.union (re.range "\u{a0}" "\u{a0}")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))))))))(re.++ (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))(re.++ (str.to_re (str.++ "F" (str.++ "R" (str.++ "O" (str.++ "M" "")))))(re.++ (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))) (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))))))))) (str.to_re ""))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "q" (str.++ "C" (str.++ "8" (str.++ "@" (str.++ "H" (str.++ "." (str.++ "m" ""))))))))

(define-fun Witness2 () String (str.++ "9" (str.++ "N" (str.++ "@" (str.++ "Y" (str.++ "S" (str.++ "." (str.++ "a" ""))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.+ (re.union (re.range "0" "9") (re.range "A" "z")))(re.++ (re.range "@" "@")(re.++ (re.+ (re.union (re.range "A" "Z") (re.range "a" "z")))(re.++ (re.range "." ".")(re.++ (re.+ (re.union (re.range "A" "Z") (re.range "a" "z"))) (str.to_re "")))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "5" (str.++ "4" (str.++ "8" (str.++ "9" (str.++ "1" (str.++ "0" (str.++ "9" (str.++ "9" (str.++ "3" (str.++ "5" (str.++ "7" (str.++ "9" (str.++ "1" (str.++ "5" (str.++ "0" (str.++ "9" "")))))))))))))))))

(define-fun Witness2 () String (str.++ "5" (str.++ "1" (str.++ "6" (str.++ "8" (str.++ "8" (str.++ "5" (str.++ "2" (str.++ "8" (str.++ "8" (str.++ "9" (str.++ "2" (str.++ "5" (str.++ "9" (str.++ "9" (str.++ "5" (str.++ "3" "")))))))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.range "5" "5")(re.++ (re.range "1" "5")(re.++ ((_ re.loop 14 14) (re.range "0" "9")) (str.to_re "")))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "1" (str.++ "3" (str.++ "0" (str.++ "0" (str.++ "3" (str.++ "5" (str.++ "8" (str.++ "6" (str.++ "4" (str.++ "3" "")))))))))))

(define-fun Witness2 () String (str.++ "(" (str.++ "0" (str.++ "|" (str.++ ")" (str.++ "3" (str.++ "1" (str.++ "9" (str.++ "9" (str.++ "9" (str.++ "9" (str.++ "3" (str.++ "1" "")))))))))))))

(assert (= regexA (re.union (re.++ (str.to_re "")(re.++ (str.to_re (str.++ "1" (str.++ "3" (str.++ "0" (str.++ "0" "")))))(re.++ (re.opt (re.union (re.range " " " ")(re.union (re.range "-" "-") (re.range "|" "|"))))(re.++ ((_ re.loop 3 3) (re.range "0" "9"))(re.++ (re.opt (re.union (re.range " " " ")(re.union (re.range "-" "-") (re.range "|" "|"))))(re.++ ((_ re.loop 3 3) (re.range "0" "9")) (str.to_re "")))))))(re.union (re.union (re.++ (str.to_re "") (str.to_re (str.++ "1" (str.++ "9" (str.++ "0" (str.++ "0" "")))))) (re.++ (str.to_re (str.++ "1" (str.++ "9" (str.++ "0" (str.++ "2" "")))))(re.++ (re.opt (re.union (re.range " " " ")(re.union (re.range "-" "-") (re.range "|" "|"))))(re.++ ((_ re.loop 3 3) (re.range "0" "9"))(re.++ (re.opt (re.union (re.range " " " ")(re.union (re.range "-" "-") (re.range "|" "|"))))(re.++ ((_ re.loop 3 3) (re.range "0" "9")) (str.to_re "")))))))(re.union (re.++ (str.to_re "")(re.++ (str.to_re (str.++ "1" (str.++ "8" (str.++ "0" (str.++ "0" "")))))(re.++ (re.opt (re.union (re.range " " " ")(re.union (re.range "-" "-") (re.range "|" "|"))))(re.++ ((_ re.loop 3 3) (re.range "0" "9"))(re.++ (re.opt (re.union (re.range " " " ")(re.union (re.range "-" "-") (re.range "|" "|"))))(re.++ ((_ re.loop 3 3) (re.range "0" "9")) (str.to_re "")))))))(re.union (re.++ (str.to_re "")(re.++ (re.opt (re.range "(" "("))(re.++ (re.range "0" "0")(re.++ (re.union (re.range "2" "3")(re.union (re.range "7" "8") (re.range "|" "|")))(re.++ (re.opt (re.range ")" ")"))(re.++ (re.opt (re.union (re.range " " " ") (re.range "-" "-")))(re.++ ((_ re.loop 4 4) (re.range "0" "9"))(re.++ (re.opt (re.union (re.range " " " ")(re.union (re.range "-" "-") (re.range "|" "|"))))(re.++ ((_ re.loop 4 4) (re.range "0" "9")) (str.to_re ""))))))))))(re.union (re.++ (str.to_re "")(re.++ (str.to_re (str.++ "+" (str.++ "6" (str.++ "1" ""))))(re.++ (re.opt (re.union (re.range " " " ")(re.union (re.range "-" "-") (re.range "|" "|"))))(re.++ (re.union (re.range "2" "3")(re.union (re.range "7" "8") (re.range "|" "|")))(re.++ (re.opt (re.union (re.range " " " ")(re.union (re.range "-" "-") (re.range "|" "|"))))(re.++ ((_ re.loop 4 4) (re.range "0" "9"))(re.++ (re.opt (re.union (re.range " " " ")(re.union (re.range "-" "-") (re.range "|" "|"))))(re.++ ((_ re.loop 4 4) (re.range "0" "9")) (str.to_re "")))))))))(re.union (re.++ (str.to_re "")(re.++ (str.to_re (str.++ "1" (str.++ "3" "")))(re.++ ((_ re.loop 4 4) (re.range "0" "9")) (str.to_re "")))) (re.++ (str.to_re "")(re.++ (str.to_re (str.++ "0" (str.++ "4" "")))(re.++ ((_ re.loop 2 3) (re.range "0" "9"))(re.++ ((_ re.loop 6 6) (re.range "0" "9")) (str.to_re "")))))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "0" (str.++ "." (str.++ "3" (str.++ "8" (str.++ "." (str.++ "2" (str.++ "5" (str.++ "5" (str.++ "." (str.++ "2" (str.++ "4" (str.++ "9" "")))))))))))))

(define-fun Witness2 () String (str.++ "0" (str.++ "." (str.++ "2" (str.++ "4" (str.++ "2" (str.++ "." (str.++ "2" (str.++ "5" (str.++ "2" (str.++ "." (str.++ "2" (str.++ "3" (str.++ "9" ""))))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ ((_ re.loop 3 3) (re.++ (re.union (re.range "0" "0")(re.union (re.++ (re.range "1" "1") ((_ re.loop 0 2) (re.range "0" "9")))(re.union (re.++ (re.range "2" "2") (re.opt (re.range "0" "9")))(re.union (re.++ (re.range "2" "2")(re.++ (re.range "0" "4") (re.range "0" "9")))(re.union (re.++ (str.to_re (str.++ "2" (str.++ "5" ""))) (re.range "0" "5")) (re.++ (re.range "3" "9") (re.opt (re.range "0" "9")))))))) (re.range "." ".")))(re.++ (re.union (re.range "0" "0")(re.union (re.++ (re.range "1" "1") ((_ re.loop 0 2) (re.range "0" "9")))(re.union (re.++ (re.range "2" "2") (re.opt (re.range "0" "9")))(re.union (re.++ (re.range "2" "2")(re.++ (re.range "0" "4") (re.range "0" "9")))(re.union (re.++ (str.to_re (str.++ "2" (str.++ "5" ""))) (re.range "0" "5")) (re.++ (re.range "3" "9") (re.opt (re.range "0" "9")))))))) (str.to_re ""))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "(" (str.++ "4" (str.++ "7" (str.++ "4" (str.++ " " (str.++ "1" (str.++ "8" (str.++ "0" (str.++ "-" (str.++ "3" (str.++ "4" (str.++ "9" (str.++ "3" ""))))))))))))))

(define-fun Witness2 () String (str.++ "(" (str.++ "7" (str.++ "4" (str.++ "7" (str.++ " " (str.++ "9" (str.++ "4" (str.++ "8" (str.++ "." (str.++ "5" (str.++ "7" (str.++ "5" (str.++ "8" ""))))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.opt (re.++ (re.opt (re.range "(" "("))(re.++ ((_ re.loop 3 3) (re.range "0" "9"))(re.++ (re.opt (re.range ")" ".")) (re.opt (re.range " " " "))))))(re.++ ((_ re.loop 3 3) (re.range "0" "9"))(re.++ (re.opt (re.range "-" "."))(re.++ ((_ re.loop 4 4) (re.range "0" "9")) (str.to_re ""))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "3" (str.++ "9" (str.++ "4" (str.++ "0" "")))))

(define-fun Witness2 () String (str.++ "7" (str.++ "0" (str.++ "8" (str.++ "8" (str.++ "8" (str.++ "2" (str.++ "1" (str.++ "0" "")))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.* (re.++ (re.range "1" "9")(re.++ ((_ re.loop 3 3) (re.range "0" "9")) (re.opt (re.range "," ",")))))(re.++ (re.++ (re.range "1" "9") ((_ re.loop 3 3) (re.range "0" "9"))) (str.to_re ""))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "6" (str.++ "5" (str.++ "4" (str.++ "8" (str.++ "1" (str.++ "9" (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "0" (str.++ "8" (str.++ "9" (str.++ "9" (str.++ "8" (str.++ "2" (str.++ "0" "")))))))))))))))))

(define-fun Witness2 () String (str.++ "6" (str.++ "5" (str.++ "4" (str.++ "9" (str.++ "3" (str.++ "5" (str.++ "1" (str.++ "2" (str.++ "8" (str.++ "8" (str.++ "6" (str.++ "9" (str.++ "8" (str.++ "1" (str.++ "9" (str.++ "8" "")))))))))))))))))

(assert (= regexA (re.union (re.++ (str.to_re "")(re.++ (str.to_re (str.++ "6" (str.++ "0" (str.++ "1" (str.++ "1" "")))))(re.++ ((_ re.loop 12 12) (re.range "0" "9")) (str.to_re "")))) (re.++ (str.to_re "")(re.++ (str.to_re (str.++ "6" (str.++ "5" "")))(re.++ ((_ re.loop 14 14) (re.range "0" "9")) (str.to_re "")))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "9" (str.++ "5" (str.++ "4" (str.++ "8" (str.++ "1" (str.++ "8" (str.++ "1" (str.++ "4" (str.++ "7" (str.++ "9" "")))))))))))

(define-fun Witness2 () String (str.++ "3" (str.++ "8" (str.++ "4" (str.++ "7" (str.++ "2" (str.++ "1" (str.++ "3" (str.++ "6" (str.++ "9" ""))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.opt (str.to_re (str.++ "B" (str.++ "G" ""))))(re.++ (re.union ((_ re.loop 9 9) (re.range "0" "9")) ((_ re.loop 10 10) (re.range "0" "9"))) (str.to_re ""))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "T" (str.++ "L" (str.++ "9" (str.++ "5" (str.++ "0" (str.++ "3" (str.++ "9" (str.++ "8" (str.++ "9" (str.++ "4" "")))))))))))

(define-fun Witness2 () String (str.++ "S" (str.++ "K" (str.++ "4" (str.++ "6" (str.++ "0" (str.++ "8" "")))))))

(assert (= regexA (re.union (re.++ (str.to_re "")(re.++ (re.union (re.++ (re.range "H" "H") (re.union (re.range "P" "P")(re.union (re.range "T" "U") (re.range "Y" "Z"))))(re.union (re.++ (re.range "N" "N") (re.union (re.range "A" "D")(re.union (re.range "F" "H")(re.union (re.range "J" "O")(re.union (re.range "R" "U") (re.range "W" "Z"))))))(re.union (str.to_re (str.++ "O" (str.++ "V" "")))(re.union (re.++ (re.range "S" "S") (re.union (re.range "C" "E")(re.union (re.range "G" "H")(re.union (re.range "J" "K")(re.union (re.range "M" "P")(re.union (re.range "R" "U") (re.range "W" "Z"))))))) (re.++ (re.range "T" "T") (re.union (re.range "A" "A")(re.union (re.range "F" "G")(re.union (re.range "L" "M")(re.union (re.range "Q" "R") (re.range "V" "V"))))))))))(re.++ ((_ re.loop 4 4) (re.range "0" "9"))(re.++ (re.opt (re.union (str.to_re (str.++ "N" (str.++ "E" "")))(re.union (str.to_re (str.++ "N" (str.++ "W" "")))(re.union (str.to_re (str.++ "S" (str.++ "E" ""))) (str.to_re (str.++ "S" (str.++ "W" ""))))))) (str.to_re ""))))) (re.++ (re.++ (re.union (re.++ (re.range "H" "H") (re.union (re.range "P" "P")(re.union (re.range "T" "U") (re.range "Y" "Z"))))(re.union (re.++ (re.range "N" "N") (re.union (re.range "A" "D")(re.union (re.range "F" "H")(re.union (re.range "J" "O")(re.union (re.range "R" "U") (re.range "W" "Z"))))))(re.union (str.to_re (str.++ "O" (str.++ "V" "")))(re.union (re.++ (re.range "S" "S") (re.union (re.range "C" "E")(re.union (re.range "G" "H")(re.union (re.range "J" "K")(re.union (re.range "M" "P")(re.union (re.range "R" "U") (re.range "W" "Z"))))))) (re.++ (re.range "T" "T") (re.union (re.range "A" "A")(re.union (re.range "F" "G")(re.union (re.range "L" "M")(re.union (re.range "Q" "R") (re.range "V" "V")))))))))) (re.union ((_ re.loop 4 4) (re.range "0" "9"))(re.union ((_ re.loop 6 6) (re.range "0" "9"))(re.union ((_ re.loop 8 8) (re.range "0" "9")) ((_ re.loop 10 10) (re.range "0" "9")))))) (str.to_re "")))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "2" ""))

(define-fun Witness2 () String (str.++ "1" (str.++ "0" "")))

(assert (= regexA (re.union (re.++ (str.to_re "")(re.++ (re.range "0" "9") (str.to_re ""))) (re.++ (str.to_re "")(re.++ (str.to_re (str.++ "1" (str.++ "0" ""))) (str.to_re ""))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "i" (str.++ "-" (str.++ "3" ""))))

(define-fun Witness2 () String (str.++ "4" (str.++ "1" (str.++ "C" (str.++ "W" (str.++ "8" ""))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.* (re.++ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))(re.++ (re.opt (re.++ ((_ re.loop 0 61) (re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z"))))) (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z"))))) (re.range "." "."))))(re.++ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))(re.++ (re.opt (re.++ ((_ re.loop 0 61) (re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z"))))) (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z"))))) (str.to_re "")))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "/" (str.++ "5" (str.++ "8" (str.++ "0" "")))))

(define-fun Witness2 () String (str.++ "0" (str.++ "0" (str.++ "/" (str.++ "9" (str.++ "5" ""))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.* (re.range "0" "9"))(re.++ (re.range "/" "/")(re.++ (re.range "1" "9")(re.++ (re.* (re.range "0" "9")) (str.to_re ""))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "1" (str.++ "5" (str.++ ":" (str.++ "0" (str.++ "9" ""))))))

(define-fun Witness2 () String (str.++ "2" (str.++ "1" (str.++ ":" (str.++ "2" (str.++ "9" ""))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.union (re.range "0" "9")(re.union (re.++ (re.range "0" "0") (re.range "0" "9"))(re.union (re.++ (re.range "1" "1") (re.range "0" "9")) (re.++ (re.range "2" "2") (re.range "0" "3")))))(re.++ (re.range ":" ":")(re.++ (re.union (re.range "0" "9") (re.++ (re.range "0" "5") (re.range "0" "9"))) (str.to_re "")))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "2" (str.++ "4" (str.++ "-" (str.++ "8" "")))))

(define-fun Witness2 () String (str.++ "4" (str.++ "/" (str.++ "8" ""))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.range "0" "9")(re.++ (re.* (re.range "0" "9"))(re.++ (re.union (re.range "-" "-") (re.range "/" "/"))(re.++ (re.range "0" "9")(re.++ (re.* (re.range "0" "9")) (str.to_re "")))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "-" ""))

(define-fun Witness2 () String (str.++ "-" ""))

(assert (= regexA (re.union (re.++ (str.to_re "")(re.++ (re.opt (re.range "-" "-"))(re.++ ((_ re.loop 0 2) (re.range "0" "9"))(re.++ (re.opt (re.++ (re.range "." ".") ((_ re.loop 1 2) (re.range "0" "9")))) (str.to_re ""))))) (re.++ (str.to_re "")(re.++ (re.opt (re.range "-" "-"))(re.++ (str.to_re (str.++ "1" (str.++ "0" (str.++ "0" ""))))(re.++ (re.opt (re.++ (re.range "." ".") ((_ re.loop 1 2) (re.range "0" "0")))) (str.to_re ""))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "9" (str.++ "7" (str.++ "(" (str.++ "6" (str.++ "6" (str.++ ")" (str.++ "5" (str.++ "4" (str.++ "9" (str.++ "3" (str.++ "-" (str.++ "9" (str.++ "3" (str.++ "1" (str.++ "8" ""))))))))))))))))

(define-fun Witness2 () String (str.++ "9" (str.++ "9" (str.++ "(" (str.++ "6" (str.++ "9" (str.++ ")" (str.++ "9" (str.++ "4" (str.++ "9" (str.++ "8" (str.++ "-" (str.++ "9" (str.++ "5" (str.++ "9" (str.++ "0" ""))))))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.opt ((_ re.loop 2 2) (re.range "0" "9")))(re.++ (re.++ (re.range "(" "(") ((_ re.loop 2 2) (re.range "0" "9")))(re.++ (re.range ")" ")")(re.++ (re.union ((_ re.loop 3 3) (re.range "0" "9")) ((_ re.loop 4 4) (re.range "0" "9")))(re.++ (re.range "-" "-")(re.++ ((_ re.loop 4 4) (re.range "0" "9")) (str.to_re ""))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "-" (str.++ "." (str.++ "6" (str.++ "8" (str.++ "6" (str.++ "E" (str.++ "+" (str.++ "8" "")))))))))

(define-fun Witness2 () String (str.++ "," (str.++ "0" (str.++ "3" (str.++ "9" (str.++ "," (str.++ "1" (str.++ "E" (str.++ "1" (str.++ "9" (str.++ "9" "")))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.opt (re.union (re.range "+" "+") (re.range "-" "-")))(re.++ (re.* (re.range "0" "9"))(re.++ (re.opt (re.+ (re.++ (re.union (re.range "," ",") (re.range "." ".")) ((_ re.loop 3 3) (re.range "0" "9")))))(re.++ (re.opt (re.++ (re.union (re.range "," ",") (re.range "." ".")) (re.+ (re.range "0" "9"))))(re.++ (re.opt (re.++ (re.union (re.range "E" "E") (re.range "e" "e"))(re.++ (re.opt (re.union (re.range "+" "+") (re.range "-" "-"))) (re.+ (re.range "0" "9"))))) (str.to_re "")))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "1" (str.++ "9" (str.++ "9" (str.++ "5" (str.++ "8" ""))))))

(define-fun Witness2 () String (str.++ "3" (str.++ "1" (str.++ "8" (str.++ "7" (str.++ "9" (str.++ "-" (str.++ "9" (str.++ "9" (str.++ "8" (str.++ "1" "")))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ ((_ re.loop 5 5) (re.range "0" "9"))(re.++ (re.opt (re.++ (re.range "-" "-") ((_ re.loop 4 4) (re.range "0" "9")))) (str.to_re ""))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "e" (str.++ "Y" (str.++ "t" (str.++ "Z" (str.++ "A" (str.++ "A" (str.++ "0" (str.++ "I" "")))))))))

(define-fun Witness2 () String (str.++ "o" (str.++ "I" (str.++ "L" (str.++ "E" (str.++ "k" (str.++ "B" (str.++ "2" (str.++ "d" "")))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ ((_ re.loop 4 4) (re.union (re.range "A" "Z") (re.range "a" "z")))(re.++ ((_ re.loop 2 2) (re.union (re.range "A" "Z") (re.range "a" "z")))(re.++ ((_ re.loop 2 2) (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))) ((_ re.loop 0 3) (re.union (re.range "0" "9") (re.range "X" "X")))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "D" (str.++ "O" (str.++ "M" (str.++ "A" (str.++ "I" (str.++ "N" (str.++ "\u{5c}" (str.++ "\u{cd}" (str.++ "\u{aa}" (str.++ "\u{aa}" (str.++ "A" (str.++ "8" (str.++ "\u{d0}" ""))))))))))))))

(define-fun Witness2 () String (str.++ "D" (str.++ "O" (str.++ "M" (str.++ "A" (str.++ "I" (str.++ "N" (str.++ "\u{5c}" (str.++ "3" (str.++ "9" ""))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (str.to_re (str.++ "D" (str.++ "O" (str.++ "M" (str.++ "A" (str.++ "I" (str.++ "N" (str.++ "\u{5c}" ""))))))))(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))) (str.to_re ""))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "+" (str.++ "8" (str.++ "9" (str.++ "\u{85}" (str.++ "(" (str.++ "8" (str.++ "3" (str.++ ")" (str.++ " " (str.++ "8" (str.++ "9" (str.++ "8" (str.++ "3" (str.++ "9" "")))))))))))))))

(define-fun Witness2 () String (str.++ "+" (str.++ "3" (str.++ "9" (str.++ "\u{85}" (str.++ "(" (str.++ "2" (str.++ "1" (str.++ ")" (str.++ "\u{85}" (str.++ "9" (str.++ "8" (str.++ "8" (str.++ "9" (str.++ "0" "")))))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.++ (re.range "+" "+")(re.++ (re.range "1" "9")(re.++ (re.opt (re.range "0" "9"))(re.++ (re.opt (re.range "0" "9"))(re.++ (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))(re.++ (re.range "(" "(")(re.++ (re.range "1" "9")(re.++ ((_ re.loop 1 5) (re.range "0" "9"))(re.++ (re.range ")" ")") (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))))))))))(re.++ (re.range "1" "9")(re.++ ((_ re.loop 4 9) (re.range "0" "9")) (str.to_re "")))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "0" (str.++ "3" (str.++ "." (str.++ "0" (str.++ "2" (str.++ "." (str.++ "1" (str.++ "6" (str.++ "5" (str.++ "3" "")))))))))))

(define-fun Witness2 () String (str.++ "1" (str.++ "." (str.++ "0" (str.++ "5" (str.++ "." (str.++ "1" (str.++ "8" (str.++ "1" (str.++ "1" ""))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.union (re.++ (re.union (re.++ (re.opt (re.range "0" "0")) (re.range "1" "9"))(re.union (re.++ (re.range "1" "2") (re.range "0" "9")) (re.++ (re.range "3" "3") (re.range "0" "1"))))(re.++ (re.range "." ".")(re.++ (re.union (re.++ (re.range "0" "0") (re.union (re.range "1" "1")(re.union (re.range "3" "3")(re.union (re.range "5" "5") (re.range "7" "8")))))(re.union (re.union (re.range "1" "1")(re.union (re.range "3" "3")(re.union (re.range "5" "5") (re.range "7" "8")))) (re.++ (re.range "1" "1") (re.union (re.range "0" "0") (re.range "2" "2")))))(re.++ (re.range "." ".") (re.++ (re.union (re.++ (re.range "1" "1") (re.range "6" "9")) (re.++ (re.range "2" "9") (re.range "0" "9"))) ((_ re.loop 2 2) (re.range "0" "9")))))))(re.union (re.++ (re.union (re.++ (re.opt (re.range "0" "0")) (re.range "1" "9"))(re.union (re.++ (re.range "1" "2") (re.range "0" "9")) (str.to_re (str.++ "3" (str.++ "0" "")))))(re.++ (re.range "." ".")(re.++ (re.union (re.++ (re.range "0" "0") (re.union (re.range "1" "1") (re.range "3" "9")))(re.union (re.union (re.range "1" "1") (re.range "3" "9")) (re.++ (re.range "1" "1") (re.range "0" "2"))))(re.++ (re.range "." ".") (re.++ (re.union (re.++ (re.range "1" "1") (re.range "6" "9")) (re.++ (re.range "2" "9") (re.range "0" "9"))) ((_ re.loop 2 2) (re.range "0" "9")))))))(re.union (re.++ (re.union (re.++ (re.opt (re.range "0" "0")) (re.range "1" "9"))(re.union (re.++ (re.range "1" "1") (re.range "0" "9")) (re.++ (re.range "2" "2") (re.range "0" "8"))))(re.++ (re.range "." ".")(re.++ (re.opt (re.range "0" "0"))(re.++ (str.to_re (str.++ "2" (str.++ "." ""))) (re.++ (re.union (re.++ (re.range "1" "1") (re.range "6" "9")) (re.++ (re.range "2" "9") (re.range "0" "9"))) ((_ re.loop 2 2) (re.range "0" "9"))))))) (re.++ (str.to_re (str.++ "2" (str.++ "9" (str.++ "." ""))))(re.++ (re.opt (re.range "0" "0"))(re.++ (str.to_re (str.++ "2" (str.++ "." ""))) (re.union (re.++ (re.union (re.++ (re.range "1" "1") (re.range "6" "9")) (re.++ (re.range "2" "9") (re.range "0" "9"))) (re.union (re.++ (re.range "0" "0") (re.union (re.range "4" "4") (re.range "8" "8")))(re.union (re.++ (re.union (re.range "2" "2")(re.union (re.range "4" "4")(re.union (re.range "6" "6") (re.range "8" "8")))) (re.union (re.range "0" "0")(re.union (re.range "4" "4") (re.range "8" "8")))) (re.++ (re.union (re.range "1" "1")(re.union (re.range "3" "3")(re.union (re.range "5" "5")(re.union (re.range "7" "7") (re.range "9" "9"))))) (re.union (re.range "2" "2") (re.range "6" "6")))))) (re.++ (re.union (str.to_re (str.++ "1" (str.++ "6" "")))(re.union (re.++ (re.union (re.range "2" "2")(re.union (re.range "4" "4")(re.union (re.range "6" "6") (re.range "8" "8")))) (re.union (re.range "0" "0")(re.union (re.range "4" "4") (re.range "8" "8")))) (re.++ (re.union (re.range "3" "3")(re.union (re.range "5" "5")(re.union (re.range "7" "7") (re.range "9" "9")))) (re.union (re.range "2" "2") (re.range "6" "6"))))) (str.to_re (str.++ "0" (str.++ "0" ""))))))))))) (str.to_re "")))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "6" (str.++ "1" (str.++ "4" (str.++ "2" (str.++ "5" (str.++ "-" (str.++ "8" (str.++ "5" (str.++ "-" (str.++ "9" (str.++ "0" (str.++ "0" (str.++ "9" (str.++ ":" (str.++ "4" (str.++ "4" "")))))))))))))))))

(define-fun Witness2 () String (str.++ "9" (str.++ "1" (str.++ "4" (str.++ "8" (str.++ "-" (str.++ "8" (str.++ "9" (str.++ "-" (str.++ "9" (str.++ "1" (str.++ "Z" ""))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.opt (re.range "-" "-"))(re.++ (re.++ ((_ re.loop 4 4) (re.range "0" "9")) (re.* (re.range "0" "9")))(re.++ (re.range "-" "-")(re.++ ((_ re.loop 2 2) (re.range "0" "9"))(re.++ (re.range "-" "-")(re.++ ((_ re.loop 2 2) (re.range "0" "9"))(re.++ (re.union (re.range "Z" "Z") (re.++ (re.union (re.++ (re.opt (re.union (re.range "+" "+") (re.range "-" "-")))(re.++ (re.range "0" "1") (re.range "0" "9"))) (re.++ (re.range "2" "2") (re.range "0" "3")))(re.++ (re.range ":" ":")(re.++ (re.range "0" "5") (re.range "0" "9"))))) (str.to_re "")))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "`" ""))

(define-fun Witness2 () String (str.++ "^" ""))

(assert (= regexA (re.union (re.range "\u{00}" "/")(re.union (re.range ":" "@")(re.union (re.range "[" "`") (re.range "{" "\u{ff}"))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "-" (str.++ "@" (str.++ "o" (str.++ "-" (str.++ "-" (str.++ "." (str.++ "9" ""))))))))

(define-fun Witness2 () String (str.++ "8" (str.++ "." (str.++ "_" (str.++ "6" (str.++ "." (str.++ "r" (str.++ "." (str.++ "1" (str.++ "-" (str.++ "-" (str.++ "@" (str.++ "x" (str.++ "1" (str.++ "." (str.++ "9" (str.++ "8" (str.++ "." (str.++ "-" "")))))))))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.+ (re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "_" "_") (re.range "a" "z")))))(re.++ (re.* (re.++ (re.range "." ".") (re.+ (re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "_" "_") (re.range "a" "z")))))))(re.++ (re.range "@" "@")(re.++ (re.+ (re.union (re.range "-" "-")(re.union (re.range "0" "9") (re.range "a" "z"))))(re.++ (re.+ (re.++ (re.range "." ".") (re.+ (re.union (re.range "-" "-")(re.union (re.range "0" "9") (re.range "a" "z")))))) (str.to_re "")))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "\u{aa}" (str.++ "." (str.++ "d" (str.++ "@" (str.++ "\u{aa}" (str.++ "." (str.++ "\u{ba}" (str.++ "." (str.++ "\u{ca}" (str.++ "." (str.++ "R" (str.++ "z" (str.++ "." (str.++ "u" (str.++ "." (str.++ "a" (str.++ "A" (str.++ "z" "")))))))))))))))))))

(define-fun Witness2 () String (str.++ "7" (str.++ "." (str.++ "-" (str.++ "." (str.++ "\u{c6}" (str.++ "@" (str.++ "\u{b5}" (str.++ "-" (str.++ "_" (str.++ "." (str.++ "a" (str.++ "Z" (str.++ "L" (str.++ "s" "")))))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.+ (re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))))(re.++ (re.* (re.++ (re.range "." ".") (re.+ (re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))))))(re.++ (re.range "@" "@")(re.++ (re.+ (re.++ (re.+ (re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))) (re.range "." ".")))(re.++ ((_ re.loop 2 7) (re.union (re.range "A" "Z") (re.range "a" "z"))) (str.to_re "")))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "3" (str.++ "9" (str.++ "9" (str.++ "6" (str.++ "0" (str.++ "3" (str.++ "\u{a0}" (str.++ "2" (str.++ "3" ""))))))))))

(define-fun Witness2 () String (str.++ "4" (str.++ "9" (str.++ "8" (str.++ "8" (str.++ "1" (str.++ "1" (str.++ "\u{85}" (str.++ "3" (str.++ "0" ""))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ ((_ re.loop 4 4) (re.range "0" "9"))(re.++ (re.opt (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "-" "-")(re.union (re.range "/" "/")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))))(re.++ (re.union (re.++ (re.union (re.++ (re.range "0" "0") (re.union (re.range "1" "1")(re.union (re.range "3" "3")(re.union (re.range "5" "5") (re.range "7" "8"))))) (re.++ (re.range "1" "1") (re.union (re.range "0" "0") (re.range "2" "2"))))(re.++ (re.opt (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "-" "-")(re.union (re.range "/" "/")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))))) (re.union (re.++ (re.range "0" "2") (re.range "0" "9")) (re.++ (re.range "3" "3") (re.range "0" "1")))))(re.union (re.++ (re.union (re.++ (re.range "0" "0") (re.union (re.range "4" "4")(re.union (re.range "6" "6") (re.range "9" "9")))) (str.to_re (str.++ "1" (str.++ "1" ""))))(re.++ (re.opt (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "-" "-")(re.union (re.range "/" "/")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))))) (re.union (re.++ (re.range "0" "2") (re.range "0" "9")) (str.to_re (str.++ "3" (str.++ "0" "")))))) (re.++ (str.to_re (str.++ "0" (str.++ "2" "")))(re.++ (re.opt (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "-" "-")(re.union (re.range "/" "/")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))))(re.++ (re.range "0" "2") (re.range "0" "9")))))) (str.to_re "")))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "4" (str.++ "9" (str.++ "8" (str.++ "3" (str.++ "3" (str.++ "6" (str.++ "-" (str.++ "9" (str.++ "0" (str.++ "9" (str.++ "9" ""))))))))))))

(define-fun Witness2 () String (str.++ "(" (str.++ "8" (str.++ "9" (str.++ "9" (str.++ " " (str.++ "8" (str.++ "7" (str.++ "8" (str.++ "-" (str.++ "8" (str.++ "9" (str.++ "8" (str.++ "0" ""))))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.++ (re.union (re.++ (re.opt (re.range "(" "("))(re.++ (re.range "2" "9")(re.++ ((_ re.loop 2 2) (re.range "0" "9")) (re.opt (re.range ")" ")"))))) (re.++ (re.range "2" "9")(re.++ ((_ re.loop 2 2) (re.range "0" "9")) (re.opt (re.range "." ".")))))(re.++ (re.opt (re.range " " " "))(re.++ (re.range "2" "9")(re.++ ((_ re.loop 2 2) (re.range "0" "9"))(re.++ (re.range "-" ".") ((_ re.loop 4 4) (re.range "0" "9")))))))(re.++ (re.opt (re.++ (re.opt (re.range " " " "))(re.++ (re.union (re.range "X" "X") (re.range "x" "x"))(re.++ (re.opt (re.range " " " ")) ((_ re.loop 3 4) (re.range "0" "9")))))) (str.to_re ""))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "j" (str.++ "d" (str.++ "b" (str.++ "c" (str.++ ":" (str.++ "d" (str.++ "b" (str.++ "2" (str.++ ":" (str.++ "/" (str.++ "/" (str.++ "|" (str.++ "\u{b5}" (str.++ "\u{d1}" (str.++ "H" (str.++ ":" (str.++ "8" (str.++ "9" (str.++ "/" (str.++ "r" (str.++ "Y" (str.++ "G" (str.++ "|" (str.++ "1" (str.++ "#" (str.++ "$" (str.++ "#" (str.++ "g" "")))))))))))))))))))))))))))))

(define-fun Witness2 () String (str.++ "j" (str.++ "d" (str.++ "b" (str.++ "c" (str.++ ":" (str.++ "d" (str.++ "b" (str.++ "2" (str.++ ":" (str.++ "/" (str.++ "/" (str.++ "1" (str.++ "8" (str.++ "8" (str.++ "\u{cc}" (str.++ "6" (str.++ "9" (str.++ "J" (str.++ "2" (str.++ "3" (str.++ "7" (str.++ "\u{da}" (str.++ "2" (str.++ "5" (str.++ "5" (str.++ ":" (str.++ "8" (str.++ "9" (str.++ "/" (str.++ "|" "")))))))))))))))))))))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (str.to_re (str.++ "j" (str.++ "d" (str.++ "b" (str.++ "c" (str.++ ":" (str.++ "d" (str.++ "b" (str.++ "2" (str.++ ":" (str.++ "/" (str.++ "/" ""))))))))))))(re.++ (re.union (re.++ ((_ re.loop 3 3) (re.++ (re.union (re.++ (str.to_re (str.++ "2" (str.++ "5" ""))) (re.range "0" "5"))(re.union (re.++ (re.range "2" "2")(re.++ (re.range "0" "4") (re.range "0" "9"))) (re.++ (re.opt (re.range "0" "1"))(re.++ (re.range "0" "9") (re.opt (re.range "0" "9")))))) (re.union (re.range "\u{00}" "\u{09}") (re.range "\u{0b}" "\u{ff}")))) (re.union (re.++ (str.to_re (str.++ "2" (str.++ "5" ""))) (re.range "0" "5"))(re.union (re.++ (re.range "2" "2")(re.++ (re.range "0" "4") (re.range "0" "9"))) (re.++ (re.opt (re.range "0" "1"))(re.++ (re.range "0" "9") (re.opt (re.range "0" "9"))))))) (re.++ (re.* (re.++ (re.union (re.range "A" "Z")(re.union (re.range "a" "z") (re.range "|" "|")))(re.++ ((_ re.loop 0 61) (re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "|" "|")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))))(re.++ (re.opt (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))) (re.range "." ".")))))(re.++ (re.union (re.range "A" "Z")(re.union (re.range "a" "z") (re.range "|" "|")))(re.++ ((_ re.loop 0 61) (re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "|" "|")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))))) (re.opt (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))))))(re.++ (re.range ":" ":")(re.++ ((_ re.loop 1 5) (re.range "0" "9"))(re.++ (re.range "/" "/")(re.++ ((_ re.loop 1 16) (re.union (re.range "#" "$")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z") (re.range "|" "|"))))))) (str.to_re ""))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "M" ""))

(define-fun Witness2 () String (str.++ "f" (str.++ "e" (str.++ "m" (str.++ "a" (str.++ "l" (str.++ "e" "")))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.union (re.union (re.range "M" "M") (re.range "m" "m"))(re.union (str.to_re (str.++ "m" (str.++ "a" (str.++ "l" (str.++ "e" "")))))(re.union (str.to_re (str.++ "M" (str.++ "a" (str.++ "l" (str.++ "e" "")))))(re.union (re.union (re.range "F" "F") (re.range "f" "f"))(re.union (str.to_re (str.++ "f" (str.++ "e" (str.++ "m" (str.++ "a" (str.++ "l" (str.++ "e" ""))))))) (str.to_re (str.++ "F" (str.++ "e" (str.++ "m" (str.++ "a" (str.++ "l" (str.++ "e" "")))))))))))) (str.to_re "")))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "e" (str.++ "1" (str.++ "m" (str.++ " " (str.++ "9" (str.++ "u" (str.++ "8" ""))))))))

(define-fun Witness2 () String (str.++ "y" (str.++ "9" (str.++ "V" (str.++ "8" (str.++ "Q" (str.++ "8" "")))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.union (re.range "A" "Z") (re.range "a" "z"))(re.++ (re.range "0" "9")(re.++ (re.union (re.range "A" "Z") (re.range "a" "z"))(re.++ (re.union (re.union (re.range " " " ") (re.range "-" "-")) (str.to_re ""))(re.++ (re.range "0" "9")(re.++ (re.union (re.range "A" "Z") (re.range "a" "z"))(re.++ (re.range "0" "9") (str.to_re "")))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "9" (str.++ "9" (str.++ "8" (str.++ "/" "")))))

(define-fun Witness2 () String (str.++ "5" (str.++ "8" (str.++ "5" (str.++ "6" "")))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.+ (re.range "0" "9"))(re.++ (re.opt (re.range "/" "/"))(re.++ (re.* (re.range "0" "9")) (str.to_re "")))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "1" (str.++ "0" (str.++ "0" (str.++ "," (str.++ "0" (str.++ "0" "")))))))

(define-fun Witness2 () String (str.++ "1" ""))

(assert (= regexA (re.union (re.++ (str.to_re "") (re.++ (str.to_re (str.++ "1" (str.++ "0" (str.++ "0" "")))) (re.opt (re.++ (re.union (re.range "," ",") (re.range "." ".")) ((_ re.loop 1 2) (re.range "0" "0"))))))(re.union (re.++ ((_ re.loop 1 2) (re.range "0" "9"))(re.++ (re.union (re.range "," ",") (re.range "." ".")) ((_ re.loop 1 2) (re.range "0" "9")))) (re.++ ((_ re.loop 0 2) (re.range "0" "9")) (str.to_re ""))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "9" (str.++ "5" (str.++ "-" (str.++ "5" (str.++ "2" (str.++ "-" (str.++ "8" ""))))))))

(define-fun Witness2 () String (str.++ "-" (str.++ "9" (str.++ "-" ""))))

(assert (= regexA (re.++ (str.to_re "")(re.++ ((_ re.loop 0 2) (re.range "0" "9"))(re.++ (re.range "-" "-")(re.++ ((_ re.loop 0 2) (re.range "0" "9"))(re.++ (re.range "-" "-")(re.++ ((_ re.loop 0 4) (re.range "0" "9")) (str.to_re "")))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "l" ""))

(define-fun Witness2 () String (str.++ "I" (str.++ "\u{0d}" (str.++ "d" ""))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.+ (re.union (re.range "A" "Z") (re.range "a" "z")))(re.++ (re.opt (re.++ (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "'" "'")(re.union (re.range "-" "-")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))) (re.+ (re.union (re.range "A" "Z") (re.range "a" "z"))))) (str.to_re ""))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "9" (str.++ "7" "")))

(define-fun Witness2 () String (str.++ "6" (str.++ "5" (str.++ "5" (str.++ "3" (str.++ "4" ""))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.union (re.++ (re.opt (re.range "0" "5"))(re.++ (re.opt (re.range "0" "9"))(re.++ (re.opt (re.range "0" "9"))(re.++ (re.opt (re.range "0" "9")) (re.range "0" "9")))))(re.union (re.++ (re.range "6" "6")(re.++ (re.range "0" "4")(re.++ (re.range "0" "9")(re.++ (re.range "0" "9") (re.range "0" "9")))))(re.union (re.++ (str.to_re (str.++ "6" (str.++ "5" "")))(re.++ (re.range "0" "4")(re.++ (re.range "0" "9") (re.range "0" "9"))))(re.union (re.++ (str.to_re (str.++ "6" (str.++ "5" (str.++ "5" ""))))(re.++ (re.range "0" "2") (re.range "0" "9"))) (re.++ (str.to_re (str.++ "6" (str.++ "5" (str.++ "5" (str.++ "3" ""))))) (re.range "0" "5")))))) (str.to_re "")))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "1" (str.++ "0" "")))

(define-fun Witness2 () String (str.++ "4" (str.++ "9" "")))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.range "1" "9")(re.++ (re.* (re.range "0" "9"))(re.++ (re.opt (re.range "." "."))(re.++ (re.* (re.range "0" "0")) (str.to_re ""))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "w" (str.++ "Y" "")))

(define-fun Witness2 () String (str.++ "y" (str.++ "a" (str.++ "F" ""))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.+ (re.union (re.range "A" "Z") (re.range "a" "z")))(re.++ (re.* (re.++ (re.opt (re.++ (re.union (re.range "'" "'") (re.range "," ".")) (re.union (re.range "A" "Z") (re.range "a" "z")))) (re.* (re.union (re.range "A" "Z") (re.range "a" "z"))))) (str.to_re ""))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "w" (str.++ "w" (str.++ "w" (str.++ "\u{ad}" (str.++ "h" ""))))))

(define-fun Witness2 () String (str.++ "h" (str.++ "t" (str.++ "t" (str.++ "p" (str.++ ":" (str.++ "/" (str.++ "/" (str.++ "/" (str.++ "j" (str.++ "w" "")))))))))))

(assert (= regexA (re.++ (re.union (str.to_re (str.++ "h" (str.++ "t" (str.++ "t" (str.++ "p" (str.++ ":" (str.++ "/" (str.++ "/" "")))))))) (re.++ (str.to_re (str.++ "w" (str.++ "w" (str.++ "w" "")))) (re.union (re.range "\u{00}" "\u{09}") (re.range "\u{0b}" "\u{ff}")))) (re.* (re.union (re.range "." "9")(re.union (re.range "A" "Z")(re.union (re.range "a" "z") (re.range "~" "~"))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "\u{5c}" (str.++ "\u{5c}" (str.++ "E" (str.++ "3" (str.++ "\u{5c}" (str.++ "\u{ba}" (str.++ "\u{f8}" (str.++ "G" (str.++ "p" (str.++ "d" (str.++ "f" ""))))))))))))

(define-fun Witness2 () String (str.++ "\u{5c}" (str.++ "\u{5c}" (str.++ "\u{aa}" (str.++ "9" (str.++ "$" (str.++ "\u{5c}" (str.++ "\u{ba}" (str.++ "\u{b5}" (str.++ "p" (str.++ "r" (str.++ "p" (str.++ "d" (str.++ "f" ""))))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.union (re.++ (re.union (re.range "A" "Z") (re.range "a" "z")) (re.range ":" ":")) (re.++ (re.++ ((_ re.loop 2 2) (re.range "\u{5c}" "\u{5c}")) (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))) (re.opt (re.range "$" "$"))))(re.++ (re.+ (re.++ (re.range "\u{5c}" "\u{5c}") (re.++ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))(re.++ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))) (re.* (re.union (re.range "\u{00}" "\u{09}") (re.range "\u{0b}" "\u{ff}")))))))(re.++ (re.++ (re.union (re.range "\u{00}" "\u{09}") (re.range "\u{0b}" "\u{ff}")) (str.to_re (str.++ "p" (str.++ "d" (str.++ "f" ""))))) (str.to_re "")))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "/" (str.++ "\u{d2}" (str.++ "]" (str.++ ">" "")))))

(define-fun Witness2 () String (str.++ "<" (str.++ "\u{d0}" "")))

(assert (= regexA (re.union (re.++ (re.* (re.range "\u{00}" "\u{ff}"))(re.++ (re.range "<" "<") (re.* (re.range "\u{00}" "\u{ff}")))) (re.++ (re.range "/" "/")(re.++ (re.range "\u{00}" "\u{ff}")(re.++ (str.to_re (str.++ "]" (str.++ ">" ""))) (re.* (re.range "\u{00}" "\u{ff}"))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "L" (str.++ "Y" (str.++ "8" (str.++ "7" (str.++ "\u{0d}" (str.++ "Z" (str.++ "E" (str.++ "Z" "")))))))))

(define-fun Witness2 () String (str.++ "Y" (str.++ "Y" (str.++ "\u{a0}" (str.++ "0" (str.++ "8" (str.++ " " (str.++ "P" (str.++ "K" (str.++ "T" ""))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.++ (re.union (re.range "A" "H")(re.union (re.range "K" "P")(re.union (re.range "R" "S")(re.union (re.range "V" "W") (re.range "Y" "Y"))))) (re.union (re.range "A" "H")(re.union (re.range "J" "P") (re.range "R" "Y"))))(re.++ (re.opt (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (re.union (re.++ (re.range "0" "0") (re.range "2" "9")) (re.++ (re.range "1" "9") (re.range "0" "9")))(re.++ (re.opt (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ ((_ re.loop 3 3) (re.union (re.range "A" "H")(re.union (re.range "J" "P") (re.range "R" "Z")))) (str.to_re "")))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "$" (str.++ "4" "")))

(define-fun Witness2 () String (str.++ "8" (str.++ " " (str.++ "%" ""))))

(assert (= regexA (re.union (re.++ (str.to_re "")(re.++ (re.range "$" "$")(re.++ (re.union (re.++ ((_ re.loop 1 3) (re.range "0" "9"))(re.++ (re.opt (re.range "," ","))(re.++ (re.* (re.++ ((_ re.loop 3 3) (re.range "0" "9")) (re.opt (re.range "," ","))))(re.++ ((_ re.loop 3 3) (re.range "0" "9")) (re.opt (re.++ (re.range "." ".") ((_ re.loop 1 3) (re.range "0" "9")))))))) (re.++ ((_ re.loop 1 3) (re.range "0" "9")) (re.opt (re.++ (re.range "." ".") ((_ re.loop 2 2) (re.range "0" "9")))))) (str.to_re ""))))(re.union (re.++ (str.to_re "")(re.++ ((_ re.loop 1 2) (re.range "0" "9"))(re.++ (re.opt (re.++ (re.range "." ".") ((_ re.loop 1 2) (re.range "0" "9"))))(re.++ (re.* (re.range " " " "))(re.++ (re.range "%" "%") (str.to_re "")))))) (re.++ (str.to_re "")(re.++ (str.to_re (str.++ "1" (str.++ "0" (str.++ "0" (str.++ "%" ""))))) (str.to_re "")))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "+" (str.++ "4" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "5" (str.++ "5" ""))))))))

(define-fun Witness2 () String (str.++ "0" (str.++ "0" (str.++ "4" (str.++ "9" (str.++ "0" (str.++ "1" (str.++ "5" (str.++ "9" "")))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.opt (re.++ (re.union (str.to_re (str.++ "0" (str.++ "0" ""))) (re.range "+" "+")) (str.to_re (str.++ "4" (str.++ "9" "")))))(re.++ (re.++ (re.opt (re.range "0" "0"))(re.++ (re.range "1" "1")(re.++ (re.range "5" "7") (re.+ (re.range "0" "9"))))) (str.to_re ""))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "#" (str.++ "2" (str.++ "9" (str.++ "A" (str.++ "E" (str.++ "3" (str.++ "B" ""))))))))

(define-fun Witness2 () String (str.++ "#" (str.++ "2" (str.++ "3" (str.++ "e" "")))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.opt (re.range "#" "#"))(re.++ ((_ re.loop 3 3) (re.union (re.range "0" "9")(re.union (re.range "A" "F") (re.range "a" "f"))))(re.++ (re.opt ((_ re.loop 3 3) (re.union (re.range "0" "9")(re.union (re.range "A" "F") (re.range "a" "f"))))) (str.to_re "")))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "1" (str.++ "1" (str.++ "3" (str.++ "." (str.++ "8" (str.++ "5" (str.++ "." (str.++ "2" (str.++ "2" (str.++ "9" (str.++ "." (str.++ "7" (str.++ "9" ""))))))))))))))

(define-fun Witness2 () String (str.++ "1" (str.++ "7" (str.++ "3" (str.++ "." (str.++ "1" (str.++ "1" (str.++ "0" (str.++ "." (str.++ "2" (str.++ "4" (str.++ "6" (str.++ "." (str.++ "2" (str.++ "5" (str.++ "3" ""))))))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.union (re.++ (re.union (re.++ (str.to_re (str.++ "2" (str.++ "5" ""))) (re.range "0" "5"))(re.union (re.++ (re.range "2" "2")(re.++ (re.range "0" "4") (re.range "0" "9")))(re.union (re.++ (str.to_re (str.++ "1" (str.++ "9" ""))) (re.range "0" "1"))(re.union (re.++ (str.to_re (str.++ "1" (str.++ "9" ""))) (re.range "3" "9"))(re.union (re.++ (str.to_re (str.++ "1" (str.++ "8" ""))) (re.range "0" "9"))(re.union (re.++ (str.to_re (str.++ "1" (str.++ "7" ""))) (re.range "0" "1"))(re.union (re.++ (str.to_re (str.++ "1" (str.++ "7" ""))) (re.range "3" "9"))(re.union (re.++ (re.range "1" "1")(re.++ (re.range "3" "6") (re.range "0" "9")))(re.union (re.++ (str.to_re (str.++ "1" (str.++ "2" ""))) (re.range "8" "9"))(re.union (re.++ (str.to_re (str.++ "1" (str.++ "2" ""))) (re.range "0" "6"))(re.union (re.++ (re.range "1" "1")(re.++ (re.range "0" "1") (re.range "0" "9")))(re.union (re.++ (re.range "1" "1") (re.range "1" "9"))(re.union (re.++ (re.range "2" "9") (re.range "0" "9")) (re.range "0" "9"))))))))))))))(re.++ (re.range "." ".") (re.union (re.++ (str.to_re (str.++ "2" (str.++ "5" ""))) (re.range "0" "5"))(re.union (re.++ (re.range "2" "2")(re.++ (re.range "0" "4") (re.range "0" "9")))(re.union (re.++ (re.range "1" "1")(re.++ (re.range "0" "9") (re.range "0" "9")))(re.union (re.++ (re.range "1" "9") (re.range "0" "9")) (re.range "0" "9")))))))(re.union (re.++ (str.to_re (str.++ "1" (str.++ "9" (str.++ "2" (str.++ "." ""))))) (re.union (re.++ (str.to_re (str.++ "2" (str.++ "5" ""))) (re.range "0" "5"))(re.union (re.++ (re.range "2" "2")(re.++ (re.range "0" "4") (re.range "0" "9")))(re.union (re.++ (str.to_re (str.++ "1" (str.++ "6" ""))) (re.range "0" "7"))(re.union (str.to_re (str.++ "1" (str.++ "6" (str.++ "9" ""))))(re.union (re.++ (re.range "1" "1")(re.++ (re.range "0" "5") (re.range "0" "9")))(re.union (re.++ (re.range "1" "1")(re.++ (re.range "7" "9") (re.range "0" "9")))(re.union (re.++ (re.range "1" "9") (re.range "0" "9")) (re.range "0" "9"))))))))) (re.++ (str.to_re (str.++ "1" (str.++ "7" (str.++ "2" (str.++ "." ""))))) (re.union (re.++ (str.to_re (str.++ "2" (str.++ "5" ""))) (re.range "0" "5"))(re.union (re.++ (re.range "2" "2")(re.++ (re.range "0" "4") (re.range "0" "9")))(re.union (re.++ (re.range "1" "1")(re.++ (re.range "0" "9") (re.range "0" "9")))(re.union (re.++ (re.range "1" "1") (re.range "0" "5"))(re.union (re.++ (re.range "3" "3") (re.range "2" "9"))(re.union (re.++ (re.range "4" "9") (re.range "0" "9")) (re.range "0" "9"))))))))))(re.++ (re.range "." ".")(re.++ (re.union (re.++ (str.to_re (str.++ "2" (str.++ "5" ""))) (re.range "0" "5"))(re.union (re.++ (re.range "2" "2")(re.++ (re.range "0" "4") (re.range "0" "9")))(re.union (re.++ (re.range "1" "1")(re.++ (re.range "0" "9") (re.range "0" "9")))(re.union (re.++ (re.range "1" "9") (re.range "0" "9")) (re.range "0" "9")))))(re.++ (re.range "." ".")(re.++ (re.union (re.++ (str.to_re (str.++ "2" (str.++ "5" ""))) (re.range "0" "5"))(re.union (re.++ (re.range "2" "2")(re.++ (re.range "0" "4") (re.range "0" "9")))(re.union (re.++ (re.range "1" "1")(re.++ (re.range "0" "9") (re.range "0" "9")))(re.union (re.++ (re.range "1" "9") (re.range "0" "9")) (re.range "0" "9"))))) (str.to_re "")))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String "")

(define-fun Witness2 () String (str.++ "+" (str.++ "8" (str.++ "8" ""))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.opt (re.range "+" "+"))(re.++ (re.* (re.range "0" "9")) (str.to_re ""))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "\u{85}" (str.++ "\u{a0}" (str.++ "b" ""))))

(define-fun Witness2 () String (str.++ "\u{85}" (str.++ "9" (str.++ "\u{a0}" (str.++ "\u{a0}" (str.++ "\u{a0}" (str.++ "\u{a0}" (str.++ "6" ""))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.++ ((_ re.loop 3 3) (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "." ".")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "a" "z")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))))))) (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "." ".")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "a" "z")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))))))) (str.to_re "")))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "-" (str.++ "9" (str.++ "3" ""))))

(define-fun Witness2 () String (str.++ "-" (str.++ "7" (str.++ "." ""))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.opt (re.union (re.range "+" "+") (re.range "-" "-")))(re.++ (re.union (re.++ (re.* (re.range "0" "9"))(re.++ (re.opt (re.range "." ".")) (re.+ (re.range "0" "9")))) (re.++ (re.+ (re.range "0" "9"))(re.++ (re.opt (re.range "." ".")) (re.* (re.range "0" "9")))))(re.++ (re.opt (re.++ (re.union (re.range "E" "E") (re.range "e" "e"))(re.++ (re.opt (re.union (re.range "+" "+") (re.range "-" "-"))) (re.+ (re.range "0" "9"))))) (str.to_re "")))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "4" ""))

(define-fun Witness2 () String (str.++ "8" ""))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.range "0" "9")(re.++ (re.opt (re.++ (re.range "." ".") (re.+ (re.range "0" "9")))) (str.to_re ""))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "-" (str.++ "." "")))

(define-fun Witness2 () String (str.++ "9" (str.++ "," (str.++ "." ""))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.opt (re.union (re.range "-" "-") (re.range "0" "9")))(re.++ (re.* (re.union (re.range "," ",") (re.range "0" "9")))(re.++ (re.opt (re.range "." "."))(re.++ (re.* (re.range "0" "9")) (str.to_re ""))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "{" (str.++ "3" (str.++ "f" (str.++ "2" (str.++ "D" (str.++ "6" (str.++ "d" (str.++ "8" (str.++ "C" (str.++ "A" (str.++ "7" (str.++ "b" (str.++ "1" (str.++ "5" (str.++ "f" (str.++ "f" (str.++ "E" (str.++ "8" (str.++ "9" (str.++ "d" (str.++ "9" (str.++ "a" (str.++ "F" (str.++ "8" (str.++ "8" (str.++ "8" (str.++ "F" (str.++ "0" (str.++ "E" (str.++ "a" (str.++ "8" (str.++ "f" (str.++ "f" ""))))))))))))))))))))))))))))))))))

(define-fun Witness2 () String (str.++ "{" (str.++ "f" (str.++ "8" (str.++ "3" (str.++ "5" (str.++ "B" (str.++ "e" (str.++ "F" (str.++ "4" (str.++ "0" (str.++ "B" (str.++ "C" (str.++ "8" (str.++ "a" (str.++ "b" (str.++ "A" (str.++ "F" (str.++ "A" (str.++ "F" (str.++ "2" (str.++ "f" (str.++ "C" (str.++ "A" (str.++ "F" (str.++ "4" (str.++ "9" (str.++ "9" (str.++ "9" (str.++ "e" (str.++ "E" (str.++ "5" (str.++ "f" (str.++ "C" ""))))))))))))))))))))))))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.opt (re.range "{" "{"))(re.++ ((_ re.loop 32 32) (re.union (re.range "0" "9")(re.union (re.range "A" "F") (re.range "a" "f"))))(re.++ (re.opt (re.range "}" "}")) (str.to_re "")))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "N" (str.++ "," (str.++ "I" (str.++ "I" "")))))

(define-fun Witness2 () String (str.++ "X" ""))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.+ (re.union (re.range "A" "Z") (re.range "a" "z")))(re.++ (re.opt (re.++ (re.opt (re.++ (re.union (re.range "-" "-") (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))) (re.+ (re.union (re.range "A" "Z") (re.range "a" "z"))))) (re.opt (re.++ (re.range "," ",")(re.++ (re.opt (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))) (re.union (re.++ (re.union (re.union (re.range "J" "J") (re.range "j" "j")) (re.union (re.range "S" "S") (re.range "s" "s")))(re.++ (re.union (re.range "R" "R") (re.range "r" "r")) (re.opt (re.range "." "."))))(re.union (str.to_re (str.++ "I" (str.++ "I" "")))(re.union (str.to_re (str.++ "I" (str.++ "I" (str.++ "I" "")))) (str.to_re (str.++ "I" (str.++ "V" ""))))))))))) (str.to_re ""))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "9" (str.++ "4" (str.++ " " (str.++ "9" "")))))

(define-fun Witness2 () String (str.++ "8" (str.++ " " (str.++ "9" (str.++ "4" (str.++ "4" (str.++ " " (str.++ "8" (str.++ "8" (str.++ "8" ""))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.* (re.++ (re.union (re.range "0" "9")(re.union (re.++ (re.range "0" "9") (re.range "0" "9")) (re.++ (re.range "0" "9")(re.++ (re.range "0" "9") (re.range "0" "9"))))) (re.union (re.range " " " ") (re.range "\u{a0}" "\u{a0}"))))(re.++ (re.union (re.range "0" "9")(re.union (re.++ (re.range "0" "9") (re.range "0" "9")) (re.++ (re.range "0" "9")(re.++ (re.range "0" "9") (re.range "0" "9")))))(re.++ (re.opt (re.++ (re.union (re.range "," ",") (re.range "." ".")) (re.* (re.range "0" "9")))) (str.to_re "")))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String "")

(define-fun Witness2 () String "")

(assert (= regexA (re.++ (str.to_re "")(re.++ ((_ re.loop 0 10) (re.range "0" "9")) (str.to_re "")))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "+" (str.++ "4" (str.++ "9" (str.++ "1" (str.++ "3" (str.++ "1" (str.++ "8" (str.++ "7" (str.++ "9" (str.++ "9" (str.++ "8" (str.++ "3" (str.++ "8" (str.++ "5" (str.++ "8" (str.++ "8" "")))))))))))))))))

(define-fun Witness2 () String (str.++ "+" (str.++ "2" (str.++ "2" (str.++ "8" (str.++ "5" (str.++ "8" (str.++ "9" (str.++ "8" (str.++ "7" (str.++ "." (str.++ "8" (str.++ "8" "")))))))))))))

(assert (= regexA (re.union (re.++ (str.to_re "")(re.++ (re.opt (re.range "+" "+"))(re.++ (re.* (re.range "0" "9"))(re.++ (re.opt (re.range "." "."))(re.++ (re.* (re.range "0" "9"))(re.++ (re.+ (re.range "1" "9"))(re.++ (re.* (re.range "0" "9")) (str.to_re "")))))))) (re.++ (str.to_re "")(re.++ (re.opt (re.range "+" "+"))(re.++ (re.+ (re.range "1" "9"))(re.++ (re.* (re.range "0" "9"))(re.++ (re.range "." ".")(re.++ (re.* (re.range "0" "9")) (str.to_re ""))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "0" (str.++ "," (str.++ "9" (str.++ "9" (str.++ "8" (str.++ "." "")))))))

(define-fun Witness2 () String (str.++ "$" (str.++ "-" (str.++ "2" (str.++ "9" (str.++ "," (str.++ "8" (str.++ "7" (str.++ "4" (str.++ "," (str.++ "2" (str.++ "7" (str.++ "8" (str.++ "," (str.++ "9" (str.++ "8" (str.++ "9" "")))))))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.union (re.++ (re.opt (re.range "$" "$")) (re.opt (re.range "-" "-"))) (re.++ (re.opt (re.range "-" "-")) (re.opt (re.range "$" "$"))))(re.++ (re.opt (re.union (re.++ ((_ re.loop 1 3) (re.range "0" "9"))(re.++ (re.range "," ",")(re.++ (re.* (re.++ ((_ re.loop 3 3) (re.range "0" "9")) (re.range "," ","))) ((_ re.loop 3 3) (re.range "0" "9"))))) (re.+ (re.range "0" "9"))))(re.++ (re.opt (re.++ (re.range "." ".") (re.* (re.range "0" "9")))) (str.to_re "")))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String "")

(define-fun Witness2 () String "")

(assert (= regexA (re.union (re.++ (str.to_re "")(re.++ (re.++ (re.opt (re.range "+" "+"))(re.++ (re.opt (re.range "-" "-"))(re.++ (re.* (re.range " " " ")) (re.+ (re.range "0" "9")))))(re.++ (re.* (re.union (re.range " " " ")(re.union (re.range "," ",") (re.range "0" "9"))))(re.++ (re.* (re.union (re.range " " " ") (re.range "0" "9"))) (str.to_re ""))))) (re.++ (str.to_re "")(re.++ (re.* (re.range " " " ")) (str.to_re ""))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "}" (str.++ "@" (str.++ "8" (str.++ "." (str.++ "s" (str.++ "p" (str.++ "r" ""))))))))

(define-fun Witness2 () String (str.++ "&" (str.++ "@" (str.++ "8" (str.++ "o" (str.++ "." (str.++ "c" (str.++ "t" ""))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.+ (re.union (re.range "!" "!")(re.union (re.range "#" "'")(re.union (re.range "*" "-")(re.union (re.range "/" "9")(re.union (re.range "=" "=")(re.union (re.range "?" "?") (re.range "^" "~"))))))))(re.++ (re.* (re.++ (re.range "." ".") (re.+ (re.union (re.range "!" "!")(re.union (re.range "#" "'")(re.union (re.range "*" "-")(re.union (re.range "/" "9")(re.union (re.range "=" "=")(re.union (re.range "?" "?") (re.range "^" "~"))))))))))(re.++ (re.range "@" "@")(re.++ (re.+ (re.union (re.range "-" "-")(re.union (re.range "0" "9") (re.range "a" "z"))))(re.++ (re.* (re.++ (re.range "." ".") (re.+ (re.union (re.range "-" "-")(re.union (re.range "0" "9") (re.range "a" "z"))))))(re.++ (re.range "." ".")(re.++ (re.++ ((_ re.loop 2 2) (re.range "a" "z")) (re.* (re.range "a" "z"))) (str.to_re "")))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "b" (str.++ "a" (str.++ "h" (str.++ "," (str.++ "\u{a0}" (str.++ " " (str.++ "9" (str.++ "8" (str.++ "\u{a0}" (str.++ "\u{85}" (str.++ "j" (str.++ "z" (str.++ "e" (str.++ "\u{a0}" (str.++ "\u{0c}" (str.++ "\u{09}" (str.++ " " (str.++ "9" (str.++ "0" (str.++ "6" (str.++ "5" (str.++ "\u{85}" (str.++ " " (str.++ "\u{a0}" (str.++ "2" (str.++ "3" (str.++ ":" (str.++ "5" (str.++ "9" ""))))))))))))))))))))))))))))))

(define-fun Witness2 () String (str.++ "v" (str.++ "c" (str.++ "t" (str.++ "," (str.++ " " (str.++ "\u{0d}" (str.++ " " (str.++ "0" (str.++ " " (str.++ "\u{85}" (str.++ "m" (str.++ "l" (str.++ "m" (str.++ "\u{a0}" (str.++ "9" (str.++ "2" (str.++ "8" (str.++ "2" (str.++ " " (str.++ " " (str.++ "\u{a0}" (str.++ "\u{0d}" (str.++ "0" (str.++ "8" (str.++ ":" (str.++ "5" (str.++ "0" ""))))))))))))))))))))))))))))

(assert (= regexA (re.++ (re.opt (re.++ ((_ re.loop 3 3) (re.range "a" "z"))(re.++ (re.range "," ",") (re.+ (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))))))(re.++ ((_ re.loop 1 2) (re.range "0" "9"))(re.++ (re.+ (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ ((_ re.loop 3 3) (re.range "a" "z"))(re.++ (re.+ (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ ((_ re.loop 4 4) (re.range "0" "9"))(re.++ (re.+ (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (re.union (re.++ (re.range "0" "1") (re.range "0" "9")) (re.++ (re.range "2" "2") (re.range "0" "3")))(re.++ (re.range ":" ":") (re.++ (re.range "0" "5") (re.range "0" "9")))))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "0" (str.++ "2" (str.++ "." (str.++ "3" (str.++ "1" (str.++ "-" (str.++ "8" (str.++ "6" (str.++ "6" (str.++ "9" "")))))))))))

(define-fun Witness2 () String (str.++ "1" (str.++ "0" (str.++ "-" (str.++ "0" (str.++ "8" (str.++ "/" (str.++ "3" (str.++ "8" "")))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.union (re.++ (re.opt (re.range "0" "0")) (re.range "1" "9")) (re.++ (re.range "1" "1") (re.range "0" "2")))(re.++ (re.range "-" "/")(re.++ (re.union (re.++ (re.opt (re.range "0" "0")) (re.range "1" "9"))(re.union (re.++ (re.union (re.range "1" "2") (re.range "|" "|")) (re.range "0" "9")) (re.++ (re.range "3" "3") (re.union (re.range "0" "1") (re.range "|" "|")))))(re.++ (re.range "-" "/")(re.++ (re.union ((_ re.loop 4 4) (re.range "0" "9")) ((_ re.loop 2 2) (re.range "0" "9"))) (str.to_re "")))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "3" (str.++ "0" (str.++ "." (str.++ "0" (str.++ "8" (str.++ "-" (str.++ "1" (str.++ "9" (str.++ "8" (str.++ "1" "")))))))))))

(define-fun Witness2 () String (str.++ "3" (str.++ "0" (str.++ "-" (str.++ "8" (str.++ "/" (str.++ "9" "")))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.union (re.++ (re.union (re.++ (re.opt (re.range "0" "0")) (re.range "1" "9"))(re.union (re.++ (re.range "1" "2") (re.range "0" "9")) (re.++ (re.range "3" "3") (re.range "0" "1"))))(re.++ (re.range "-" "/")(re.++ (re.union (re.++ (re.opt (re.range "0" "0")) (re.union (re.range "1" "1")(re.union (re.range "3" "3")(re.union (re.range "5" "5") (re.range "7" "8"))))) (re.++ (re.range "1" "1") (re.union (re.range "0" "0") (re.range "2" "2"))))(re.++ (re.range "-" "/") (re.union (re.++ (re.opt (re.union (re.++ (re.range "1" "1") (re.range "6" "9")) (re.++ (re.range "2" "9") (re.range "0" "9")))) ((_ re.loop 2 2) (re.range "0" "9"))) (re.range "0" "9"))))))(re.union (re.++ (re.union (re.++ (re.opt (re.range "0" "0")) (re.range "1" "9"))(re.union (re.++ (re.range "1" "2") (re.range "0" "9")) (str.to_re (str.++ "3" (str.++ "0" "")))))(re.++ (re.range "-" "/")(re.++ (re.union (re.++ (re.opt (re.range "0" "0")) (re.union (re.range "1" "1") (re.range "3" "9"))) (re.++ (re.range "1" "1") (re.range "0" "2")))(re.++ (re.range "-" "/") (re.union (re.++ (re.opt (re.union (re.++ (re.range "1" "1") (re.range "6" "9")) (re.++ (re.range "2" "9") (re.range "0" "9")))) ((_ re.loop 2 2) (re.range "0" "9"))) (re.range "0" "9"))))))(re.union (re.++ (re.union (re.++ (re.opt (re.range "0" "0")) (re.range "1" "9"))(re.union (re.++ (re.range "1" "1") (re.range "0" "9")) (re.++ (re.range "2" "2") (re.range "0" "8"))))(re.++ (re.range "-" "/")(re.++ (re.opt (re.range "0" "0"))(re.++ (re.range "2" "2")(re.++ (re.range "-" "/") (re.union (re.++ (re.opt (re.union (re.++ (re.range "1" "1") (re.range "6" "9")) (re.++ (re.range "2" "9") (re.range "0" "9")))) ((_ re.loop 2 2) (re.range "0" "9"))) (re.range "0" "9"))))))) (re.++ (str.to_re (str.++ "2" (str.++ "9" "")))(re.++ (re.range "-" "/")(re.++ (re.opt (re.range "0" "0"))(re.++ (re.range "2" "2")(re.++ (re.range "-" "/") (re.union (re.++ (re.opt (re.union (re.++ (re.range "1" "1") (re.range "6" "9")) (re.++ (re.range "2" "9") (re.range "0" "9")))) (re.union (re.++ (re.range "0" "0") (re.union (re.range "4" "4") (re.range "8" "8")))(re.union (re.++ (re.union (re.range "2" "2")(re.union (re.range "4" "4")(re.union (re.range "6" "6") (re.range "8" "8")))) (re.union (re.range "0" "0")(re.union (re.range "4" "4") (re.range "8" "8")))) (re.++ (re.union (re.range "1" "1")(re.union (re.range "3" "3")(re.union (re.range "5" "5")(re.union (re.range "7" "7") (re.range "9" "9"))))) (re.union (re.range "2" "2") (re.range "6" "6"))))))(re.union (re.++ (re.union (str.to_re (str.++ "1" (str.++ "6" "")))(re.union (re.++ (re.union (re.range "2" "2")(re.union (re.range "4" "4")(re.union (re.range "6" "6") (re.range "8" "8")))) (re.union (re.range "0" "0")(re.union (re.range "4" "4") (re.range "8" "8")))) (re.++ (re.union (re.range "3" "3")(re.union (re.range "5" "5")(re.union (re.range "7" "7") (re.range "9" "9")))) (re.union (re.range "2" "2") (re.range "6" "6"))))) (str.to_re (str.++ "0" (str.++ "0" ""))))(re.union (str.to_re (str.++ "0" (str.++ "0" ""))) (re.union (re.range "0" "0")(re.union (re.range "4" "4") (re.range "8" "8")))))))))))))) (str.to_re "")))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "9" (str.++ "," (str.++ "8" (str.++ "2" "")))))

(define-fun Witness2 () String (str.++ "8" (str.++ "8" "")))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.* (re.++ (re.range "0" "9") (re.opt (re.range "," ","))))(re.++ (re.++ (re.range "0" "9") (re.range "0" "9")) (str.to_re ""))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "{" (str.++ "8" (str.++ "1" (str.++ "9" (str.++ "Z" (str.++ "Y" (str.++ "1" (str.++ "8" (str.++ "6" (str.++ "-" (str.++ "4" (str.++ "w" (str.++ "q" (str.++ "0" (str.++ "-" (str.++ "2" (str.++ "8" (str.++ "v" (str.++ "9" (str.++ "-" (str.++ "0" (str.++ "b" (str.++ "9" (str.++ "G" (str.++ "-" (str.++ "9" (str.++ "L" (str.++ "v" (str.++ "8" (str.++ "z" (str.++ "8" (str.++ "6" (str.++ "F" (str.++ "4" (str.++ "4" (str.++ "8" (str.++ "s" (str.++ "}" "")))))))))))))))))))))))))))))))))))))))

(define-fun Witness2 () String (str.++ "{" (str.++ "Z" (str.++ "L" (str.++ "5" (str.++ "8" (str.++ "2" (str.++ "5" (str.++ "q" (str.++ "a" (str.++ "-" (str.++ "7" (str.++ "k" (str.++ "r" (str.++ "B" (str.++ "-" (str.++ "9" (str.++ "8" (str.++ "2" (str.++ "2" (str.++ "-" (str.++ "A" (str.++ "P" (str.++ "8" (str.++ "8" (str.++ "-" (str.++ "e" (str.++ "8" (str.++ "8" (str.++ "V" (str.++ "6" (str.++ "n" (str.++ "m" (str.++ "n" (str.++ "c" (str.++ "X" (str.++ "4" (str.++ "5" (str.++ "}" "")))))))))))))))))))))))))))))))))))))))

(assert (= regexA (re.union (re.++ (str.to_re "")(re.++ (re.range "{" "{")(re.++ ((_ re.loop 8 8) (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z"))))(re.++ (re.range "-" "-")(re.++ ((_ re.loop 4 4) (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z"))))(re.++ (re.range "-" "-")(re.++ ((_ re.loop 4 4) (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z"))))(re.++ (re.range "-" "-")(re.++ ((_ re.loop 4 4) (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z"))))(re.++ (re.range "-" "-")(re.++ ((_ re.loop 12 12) (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z"))))(re.++ (re.range "}" "}") (str.to_re ""))))))))))))) (re.++ (str.to_re "")(re.++ ((_ re.loop 8 8) (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z"))))(re.++ (re.range "-" "-")(re.++ ((_ re.loop 4 4) (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z"))))(re.++ (re.range "-" "-")(re.++ ((_ re.loop 4 4) (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z"))))(re.++ (re.range "-" "-")(re.++ ((_ re.loop 4 4) (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z"))))(re.++ (re.range "-" "-")(re.++ ((_ re.loop 12 12) (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))) (str.to_re ""))))))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "d" (str.++ "J" (str.++ "x" (str.++ "E" (str.++ "5" (str.++ "6" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "8" (str.++ "s" (str.++ "x" (str.++ "A" (str.++ "a" (str.++ "j" (str.++ "G" (str.++ "6" (str.++ "5" "")))))))))))))))))))

(define-fun Witness2 () String (str.++ "J" (str.++ "e" (str.++ "z" (str.++ "N" (str.++ "8" (str.++ "8" (str.++ "9" (str.++ "9" (str.++ "8" (str.++ "4" (str.++ "g" (str.++ "z" (str.++ "n" (str.++ "r" (str.++ "V" (str.++ "P" (str.++ "9" (str.++ "3" "")))))))))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ ((_ re.loop 4 4) (re.union (re.range "A" "Z") (re.range "a" "z")))(re.++ ((_ re.loop 6 6) (re.range "0" "9"))(re.++ ((_ re.loop 6 6) (re.union (re.range "A" "Z") (re.range "a" "z")))(re.++ ((_ re.loop 2 2) (re.range "0" "9")) (str.to_re ""))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "6" (str.++ "8" (str.++ "1" (str.++ "9" (str.++ "3" (str.++ "7" (str.++ "4" (str.++ "3" (str.++ "9" (str.++ "4" "")))))))))))

(define-fun Witness2 () String (str.++ "9" (str.++ "8" (str.++ "9" (str.++ "\u{a0}" (str.++ "0" (str.++ "8" (str.++ "4" (str.++ "0" (str.++ "6" (str.++ "9" (str.++ "8" ""))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.opt (re.range "(" "("))(re.++ ((_ re.loop 3 3) (re.range "0" "9"))(re.++ (re.opt (re.range ")" ")"))(re.++ (re.opt (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "-" "-")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))))(re.++ ((_ re.loop 3 3) (re.range "0" "9"))(re.++ (re.opt (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "-" "-")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))))(re.++ ((_ re.loop 4 4) (re.range "0" "9")) (str.to_re "")))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "2" (str.++ "3" (str.++ "0" (str.++ "9" (str.++ "4" (str.++ "-" (str.++ "9" (str.++ "8" (str.++ "1" ""))))))))))

(define-fun Witness2 () String (str.++ "7" (str.++ "9" (str.++ "8" (str.++ "9" (str.++ "9" (str.++ "8" (str.++ "9" (str.++ "5" "")))))))))

(assert (= regexA (re.union (re.++ (str.to_re "")(re.++ ((_ re.loop 5 5) (re.range "0" "9"))(re.++ (re.range "-" "-")(re.++ ((_ re.loop 3 3) (re.range "0" "9")) (str.to_re "")))))(re.union (re.++ (str.to_re "")(re.++ ((_ re.loop 2 2) (re.range "0" "9"))(re.++ (re.range "." ".")(re.++ ((_ re.loop 3 3) (re.range "0" "9"))(re.++ (re.range "-" "-")(re.++ ((_ re.loop 3 3) (re.range "0" "9")) (str.to_re ""))))))) (re.++ (str.to_re "")(re.++ ((_ re.loop 8 8) (re.range "0" "9")) (str.to_re "")))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "0" (str.++ "7" (str.++ "/" (str.++ "4" (str.++ "-" (str.++ "7" (str.++ "8" (str.++ "2" (str.++ "9" ""))))))))))

(define-fun Witness2 () String (str.++ "0" (str.++ "9" (str.++ "/" (str.++ "7" (str.++ "-" (str.++ "0" (str.++ "9" ""))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.union (re.range "1" "9")(re.union (re.++ (re.range "0" "0") (re.range "1" "9"))(re.union (re.++ (re.range "1" "2") (re.range "0" "9")) (re.++ (re.range "3" "3") (re.range "0" "1")))))(re.++ (re.union (re.range "-" "-") (re.range "/" "/"))(re.++ (re.union (re.union (re.range "1" "9") (re.++ (re.range "0" "0") (re.range "1" "9"))) (re.++ (re.range "1" "1") (re.range "0" "2")))(re.++ (re.union (re.range "-" "-") (re.range "/" "/"))(re.++ (re.union (re.++ (re.range "0" "9") (re.range "0" "9")) (re.++ (re.range "0" "9")(re.++ (re.range "0" "9")(re.++ (re.range "0" "9") (re.range "0" "9"))))) (str.to_re "")))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "4" (str.++ "y" "")))

(define-fun Witness2 () String (str.++ "9" ""))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.+ (re.union (re.range " " " ")(re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z"))))) (str.to_re "")))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "Z" (str.++ "n" "")))

(define-fun Witness2 () String (str.++ "A" (str.++ "c" "")))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.union (re.++ (re.range "A" "A") (re.union (re.range "c" "c")(re.union (re.range "g" "g")(re.union (re.range "l" "m") (re.range "r" "u")))))(re.union (re.++ (re.range "B" "B") (re.opt (re.union (re.range "a" "a")(re.union (re.range "e" "e")(re.union (re.range "h" "i")(re.union (re.range "k" "k") (re.range "r" "r")))))))(re.union (re.++ (re.range "C" "C") (re.opt (re.union (re.range "a" "a")(re.union (re.range "d" "f")(re.union (re.range "l" "m")(re.union (re.range "o" "o")(re.union (re.range "r" "s") (re.range "u" "u"))))))))(re.union (re.++ (re.range "D" "D") (re.union (re.range "b" "b")(re.union (re.range "s" "s") (re.range "y" "y"))))(re.union (re.++ (re.range "E" "E") (re.union (re.range "r" "s") (re.range "u" "u")))(re.union (re.++ (re.range "F" "F") (re.opt (re.union (re.range "e" "f") (re.range "m" "m"))))(re.union (re.++ (re.range "G" "G") (re.union (re.range "a" "a") (re.range "d" "e")))(re.union (re.++ (re.range "H" "H") (re.opt (re.union (re.range "e" "g")(re.union (re.range "o" "o") (re.range "s" "s")))))(re.union (re.++ (re.range "I" "I") (re.opt (re.union (re.range "k" "k") (re.range "n" "n"))))(re.union (re.++ (re.range "K" "K") (re.opt (re.range "r" "r")))(re.union (re.++ (re.range "L" "L") (re.union (re.range "a" "a")(re.union (re.range "i" "i")(re.union (re.range "r" "r") (re.range "u" "u")))))(re.union (re.++ (re.range "M" "M") (re.union (re.range "d" "d")(re.union (re.range "g" "g")(re.union (re.range "n" "o") (re.range "t" "t")))))(re.union (re.++ (re.range "N" "N") (re.union (re.range "a" "b")(re.union (re.range "d" "e")(re.union (re.range "i" "i") (re.range "o" "p")))))(re.union (re.++ (re.range "O" "O") (re.opt (re.range "s" "s")))(re.union (re.++ (re.range "P" "P") (re.opt (re.union (re.range "a" "b")(re.union (re.range "d" "d")(re.union (re.range "m" "m")(re.union (re.range "o" "o")(re.union (re.range "r" "r") (re.range "t" "u"))))))))(re.union (re.++ (re.range "R" "R") (re.union (re.range "a" "b")(re.union (re.range "e" "h")(re.union (re.range "n" "n") (re.range "u" "u")))))(re.union (re.++ (re.range "S" "S") (re.opt (re.union (re.range "b" "c")(re.union (re.range "e" "e")(re.union (re.range "g" "g")(re.union (re.range "i" "i")(re.union (re.range "m" "n") (re.range "r" "r"))))))))(re.union (re.++ (re.range "T" "T") (re.union (re.range "a" "c")(re.union (re.range "e" "e")(re.union (re.range "h" "i") (re.range "l" "l")))))(re.union (re.++ (re.range "U" "U") (re.opt (re.++ (re.range "u" "u") (re.union (re.range "b" "b")(re.union (re.range "h" "h")(re.union (re.range "o" "q") (re.range "s" "t")))))))(re.union (re.range "V" "W")(re.union (str.to_re (str.++ "X" (str.++ "e" "")))(re.union (re.++ (re.range "Y" "Y") (re.opt (re.range "b" "b"))) (re.++ (re.range "Z" "Z") (re.union (re.range "n" "n") (re.range "r" "r"))))))))))))))))))))))))) (str.to_re "")))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "<" (str.++ ">" "")))

(define-fun Witness2 () String (str.++ "<" (str.++ "O" (str.++ "\u{93}" (str.++ "\u{7f}" (str.++ ">" ""))))))

(assert (= regexA (re.++ (re.range "<" "<")(re.++ (re.* (re.union (re.range "\u{00}" "=") (re.range "?" "\u{ff}"))) (re.range ">" ">")))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String "")

(define-fun Witness2 () String "")

(assert (= regexA (re.union (re.++ ((_ re.loop 8 8) (re.union (re.range "0" "9")(re.union (re.range "A" "F") (re.range "a" "f"))))(re.++ (re.range "-" "-")(re.++ ((_ re.loop 4 4) (re.union (re.range "0" "9")(re.union (re.range "A" "F") (re.range "a" "f"))))(re.++ (re.range "-" "-")(re.++ ((_ re.loop 4 4) (re.union (re.range "0" "9")(re.union (re.range "A" "F") (re.range "a" "f"))))(re.++ (re.range "-" "-")(re.++ ((_ re.loop 4 4) (re.union (re.range "0" "9")(re.union (re.range "A" "F") (re.range "a" "f"))))(re.++ (re.range "-" "-") ((_ re.loop 12 12) (re.union (re.range "0" "9")(re.union (re.range "A" "F") (re.range "a" "f")))))))))))) (str.to_re ""))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "1" (str.++ "2" (str.++ "/" (str.++ "1" (str.++ "9" (str.++ "/" (str.++ "8" (str.++ "9" (str.++ "2" (str.++ "9" "")))))))))))

(define-fun Witness2 () String (str.++ "0" (str.++ "8" (str.++ "/" (str.++ "1" (str.++ "2" (str.++ "/" (str.++ "9" (str.++ "9" (str.++ "7" (str.++ "2" "")))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.union (str.to_re "")(re.union (re.++ (re.range "0" "0") (re.range "1" "9")) (re.++ (re.range "1" "1") (re.range "0" "2"))))(re.++ (re.range "/" "/")(re.++ (re.union (re.++ (re.range "0" "0") (re.range "1" "9"))(re.union (re.++ (re.range "1" "1") (re.range "0" "9"))(re.union (re.++ (re.range "2" "2") (re.range "0" "9")) (re.++ (re.range "3" "3") (re.range "0" "1")))))(re.++ (re.range "/" "/")(re.++ ((_ re.loop 4 4) (re.range "0" "9")) (str.to_re "")))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "9" (str.++ "3" (str.++ "8" (str.++ "8" (str.++ "6" (str.++ "8" (str.++ "3" (str.++ "0" (str.++ "5" ""))))))))))

(define-fun Witness2 () String (str.++ "9" (str.++ "9" (str.++ "8" (str.++ "7" (str.++ "9" (str.++ "9" (str.++ "0" (str.++ "9" (str.++ "9" ""))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.++ (re.range "9" "9") ((_ re.loop 2 2) (re.range "0" "9")))(re.++ (re.opt (re.union (re.range " " " ") (re.range "-" "-")))(re.++ (re.union (re.++ (re.range "7" "7") (re.range "0" "9")) (re.++ (re.range "8" "8") (re.range "0" "8")))(re.++ (re.opt (re.union (re.range " " " ") (re.range "-" "-")))(re.++ ((_ re.loop 4 4) (re.range "0" "9")) (str.to_re "")))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "9" (str.++ "9" (str.++ "." ""))))

(define-fun Witness2 () String (str.++ "4" (str.++ "." (str.++ "1" (str.++ "1" "")))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.++ (re.range "1" "9") (re.opt (re.range "0" "9")))(re.++ (re.opt (re.++ (re.range "." ".") (re.opt (re.union (re.opt (re.range "0" "0"))(re.union (re.opt (re.range "1" "9")) (re.++ (re.range "1" "1") (re.opt (re.range "0" "1")))))))) (str.to_re ""))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "@" ""))

(define-fun Witness2 () String (str.++ "@" (str.++ "\u{e5}" (str.++ "?" ""))))

(assert (= regexA (re.+ (re.union (re.range "\u{00}" "/")(re.union (re.range ":" "@")(re.union (re.range "[" "`") (re.range "{" "\u{ff}")))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "Z" (str.++ "N" (str.++ "y" (str.++ "G" "")))))

(define-fun Witness2 () String (str.++ "v" (str.++ "y" (str.++ "d" (str.++ "l" (str.++ "d" (str.++ "y" (str.++ "'" (str.++ " " (str.++ "z" ""))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.+ (re.union (re.range "A" "Z") (re.range "a" "z")))(re.++ (re.* (re.++ (re.opt (re.++ (re.union (re.range " " " ")(re.union (re.range "'" "'") (re.range "," "."))) (re.union (re.range " " " ")(re.union (re.range "A" "Z") (re.range "a" "z"))))) (re.* (re.union (re.range "A" "Z") (re.range "a" "z"))))) (str.to_re ""))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "2" ""))

(define-fun Witness2 () String (str.++ "9" (str.++ "9" (str.++ "\u{a2}" (str.++ "6" "")))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.* (re.range "0" "9"))(re.++ (re.range "0" "9")(re.++ (re.* (re.union (str.to_re "")(re.union (re.++ (re.union (re.range "\u{00}" "\u{09}") (re.range "\u{0b}" "\u{ff}"))(re.++ (re.* (re.range "0" "9")) (re.range "0" "9"))) (str.to_re "")))) (str.to_re "")))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "h" (str.++ "t" (str.++ "t" (str.++ "p" (str.++ ":" (str.++ "/" (str.++ "/" (str.++ "h" (str.++ "t" (str.++ "t" (str.++ "p" (str.++ ":" (str.++ "/" (str.++ "/" (str.++ "w" (str.++ "w" (str.++ "w" (str.++ "w" (str.++ "w" (str.++ "w" (str.++ "P" (str.++ "." (str.++ "k" (str.++ "Y" (str.++ "\u{f2}" (str.++ "\u{80}" "")))))))))))))))))))))))))))

(define-fun Witness2 () String (str.++ "h" (str.++ "t" (str.++ "t" (str.++ "p" (str.++ ":" (str.++ "/" (str.++ "/" (str.++ "." (str.++ "." (str.++ "V" (str.++ "\u{84}" (str.++ "\u{89}" (str.++ "2" (str.++ "." (str.++ "h" (str.++ "Z" (str.++ "\u{91}" ""))))))))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.++ (re.* (str.to_re (str.++ "h" (str.++ "t" (str.++ "t" (str.++ "p" (str.++ ":" (str.++ "/" (str.++ "/" "")))))))))(re.++ (re.* (re.union (str.to_re (str.++ "w" (str.++ "w" (str.++ "w" "")))) (re.* (re.union (re.range "\u{00}" "\u{09}")(re.union (re.range "\u{0b}" ",") (re.range "." "\u{ff}"))))))(re.++ (re.* (re.range "." "."))(re.++ (re.+ (re.union (re.range "\u{00}" "\u{09}")(re.union (re.range "\u{0b}" ",") (re.range "." "\u{ff}"))))(re.++ (re.range "." ".") (re.++ ((_ re.loop 2 3) (re.union (re.range "A" "Z") (re.range "a" "z"))) (re.* (re.union (re.range "\u{00}" "\u{09}")(re.union (re.range "\u{0b}" "=") (re.range "?" "\u{ff}")))))))))) (str.to_re "")))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "0" (str.++ "_" (str.++ "8" (str.++ "U" "")))))

(define-fun Witness2 () String (str.++ "4" (str.++ "9" (str.++ "4" ""))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z"))))(re.++ (re.* (re.++ (re.opt (re.++ (re.range "_" "_") (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z"))))) (re.* (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))))) (str.to_re ""))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "\u{22}" (str.++ "," (str.++ "\u{22}" ""))))

(define-fun Witness2 () String (str.++ "\u{22}" (str.++ "\u{18}" (str.++ "\u{22}" ""))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.range "\u{22}" "\u{22}")(re.++ (re.+ (re.union (re.range "\u{00}" "!") (re.range "#" "\u{ff}")))(re.++ (re.range "\u{22}" "\u{22}") (str.to_re "")))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "1" (str.++ "2" (str.++ "9" (str.++ "\u{85}" (str.++ "4" (str.++ "4" (str.++ "9" (str.++ "2" "")))))))))

(define-fun Witness2 () String (str.++ "1" (str.++ "2" (str.++ "0" (str.++ "3" (str.++ "\u{85}" (str.++ "8" (str.++ "5" (str.++ "3" (str.++ "9" ""))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.union (re.++ (re.union (re.++ (re.union (re.++ (re.opt (re.range "0" "0")) (re.union (re.range "1" "1")(re.union (re.range "3" "3")(re.union (re.range "5" "5") (re.range "7" "8"))))) (re.++ (re.range "1" "1") (re.union (re.range "0" "0") (re.range "2" "2"))))(re.++ (re.opt (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "-" "-")(re.union (re.range "/" "/")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))))) (re.union (re.++ (re.opt (re.range "0" "0")) (re.range "1" "9"))(re.union (re.++ (re.range "1" "2") (re.range "0" "9")) (re.++ (re.range "3" "3") (re.range "0" "1"))))))(re.union (re.++ (re.union (re.++ (re.opt (re.range "0" "0")) (re.union (re.range "4" "4")(re.union (re.range "6" "6") (re.range "9" "9")))) (str.to_re (str.++ "1" (str.++ "1" ""))))(re.++ (re.opt (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "-" "-")(re.union (re.range "/" "/")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))))) (re.union (re.++ (re.opt (re.range "0" "0")) (re.range "1" "9"))(re.union (re.++ (re.range "1" "2") (re.range "0" "9")) (str.to_re (str.++ "3" (str.++ "0" ""))))))) (re.++ (re.opt (re.range "0" "0"))(re.++ (re.range "2" "2")(re.++ (re.opt (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "-" "-")(re.union (re.range "/" "/")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))))) (re.union (re.++ (re.opt (re.range "0" "0")) (re.range "1" "9")) (re.++ (re.range "1" "2") (re.range "0" "9"))))))))(re.++ (re.opt (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "-" "-")(re.union (re.range "/" "/")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))))(re.++ ((_ re.loop 2 2) (re.range "0" "9")) (re.union (re.++ (re.union (re.range "0" "0")(re.union (re.range "2" "2")(re.union (re.range "4" "4")(re.union (re.range "6" "6") (re.range "8" "8"))))) (re.union (re.range "0" "0")(re.union (re.range "4" "4") (re.range "8" "8")))) (re.++ (re.union (re.range "1" "1")(re.union (re.range "3" "3")(re.union (re.range "5" "5")(re.union (re.range "7" "7") (re.range "9" "9"))))) (re.union (re.range "2" "2") (re.range "6" "6"))))))) (re.++ (re.union (re.++ (re.union (re.++ (re.opt (re.range "0" "0")) (re.union (re.range "1" "1")(re.union (re.range "3" "3")(re.union (re.range "5" "5") (re.range "7" "8"))))) (re.++ (re.range "1" "1") (re.union (re.range "0" "0") (re.range "2" "2"))))(re.++ (re.opt (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "-" "-")(re.union (re.range "/" "/")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))))) (re.union (re.++ (re.opt (re.range "0" "0")) (re.range "1" "9"))(re.union (re.++ (re.range "1" "2") (re.range "0" "9")) (re.++ (re.range "3" "3") (re.range "0" "1"))))))(re.union (re.++ (re.union (re.++ (re.opt (re.range "0" "0")) (re.union (re.range "4" "4")(re.union (re.range "6" "6") (re.range "9" "9")))) (str.to_re (str.++ "1" (str.++ "1" ""))))(re.++ (re.opt (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "-" "-")(re.union (re.range "/" "/")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))))) (re.union (re.++ (re.opt (re.range "0" "0")) (re.range "1" "9"))(re.union (re.++ (re.range "1" "2") (re.range "0" "9")) (str.to_re (str.++ "3" (str.++ "0" ""))))))) (re.++ (re.opt (re.range "0" "0"))(re.++ (re.range "2" "2")(re.++ (re.opt (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "-" "-")(re.union (re.range "/" "/")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))))) (re.union (re.++ (re.opt (re.range "0" "0")) (re.range "1" "9"))(re.union (re.++ (re.range "1" "1") (re.range "0" "9")) (re.++ (re.range "2" "2") (re.range "0" "8")))))))))(re.++ (re.opt (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "-" "-")(re.union (re.range "/" "/")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))))(re.++ ((_ re.loop 2 2) (re.range "0" "9")) (re.union (re.++ (re.union (re.range "0" "0")(re.union (re.range "2" "2")(re.union (re.range "4" "4")(re.union (re.range "6" "6") (re.range "8" "8"))))) (re.union (re.range "1" "3")(re.union (re.range "5" "7") (re.range "9" "9")))) (re.++ (re.union (re.range "1" "1")(re.union (re.range "3" "3")(re.union (re.range "5" "5")(re.union (re.range "7" "7") (re.range "9" "9"))))) (re.union (re.range "0" "1")(re.union (re.range "3" "5") (re.range "7" "9")))))))))(re.++ (re.opt (re.++ (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))) (re.++ (re.union (re.++ (re.opt (re.range "0" "0")) (re.range "1" "9")) (re.++ (re.range "1" "1") (re.range "0" "2")))(re.++ (re.range ":" ":")(re.++ (re.++ (re.range "0" "5") (re.range "0" "9"))(re.++ (re.union (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))) (re.++ (re.range ":" ":")(re.++ (re.++ (re.range "0" "5") (re.range "0" "9")) (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))))) ((_ re.loop 2 2) (re.union (re.range "A" "A")(re.union (re.range "M" "M")(re.union (re.range "P" "P")(re.union (re.range "a" "a")(re.union (re.range "m" "m")(re.union (re.range "p" "p") (re.range "|" "|")))))))))))))) (str.to_re ""))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "(" (str.++ "8" (str.++ "9" (str.++ "8" (str.++ ")" (str.++ "-" (str.++ " " (str.++ "9" (str.++ "9" (str.++ "7" (str.++ " " (str.++ "9" (str.++ "6" (str.++ "4" (str.++ "9" ""))))))))))))))))

(define-fun Witness2 () String (str.++ "1" (str.++ "-" (str.++ "(" (str.++ "9" (str.++ "4" (str.++ "1" (str.++ ")" (str.++ "\u{0c}" (str.++ " " (str.++ "8" (str.++ "2" (str.++ "8" (str.++ "\u{0c}" (str.++ "." (str.++ "\u{85}" (str.++ " " (str.++ "9" (str.++ "8" (str.++ "5" (str.++ "2" "")))))))))))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.opt (re.++ (re.range "1" "1")(re.++ (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))) (re.opt (re.range "-" "/")))))(re.++ (re.union (re.++ (re.range "(" "(")(re.++ ((_ re.loop 3 3) (re.range "0" "9")) (re.range ")" ")"))) ((_ re.loop 3 3) (re.range "0" "9")))(re.++ (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (re.opt (re.range "-" "/"))(re.++ (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ ((_ re.loop 3 3) (re.range "0" "9"))(re.++ (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (re.opt (re.range "-" "/"))(re.++ (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ ((_ re.loop 4 4) (re.range "0" "9"))(re.++ (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (re.* (re.++ (re.union (re.union (re.range "X" "X") (re.range "x" "x")) (re.++ (re.union (re.range "E" "E") (re.range "e" "e"))(re.++ (re.union (re.range "X" "X") (re.range "x" "x")) (re.union (re.range "T" "T") (re.range "t" "t")))))(re.++ (re.opt (re.range "." "."))(re.++ (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))) (re.+ (re.range "0" "9")))))) (str.to_re ""))))))))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ ":" (str.++ ":" (str.++ "_" (str.++ "-" "")))))

(define-fun Witness2 () String (str.++ "g" (str.++ "z" (str.++ "4" ""))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.+ (re.union (re.range ":" ":")(re.union (re.range "A" "Z")(re.union (re.range "_" "_") (re.range "a" "z")))))(re.++ (re.* (re.union (re.range "-" ".")(re.union (re.range "0" ":")(re.union (re.range "A" "Z")(re.union (re.range "_" "_") (re.range "a" "z")))))) (str.to_re ""))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "f" (str.++ "t" (str.++ "p" (str.++ ":" (str.++ "/" (str.++ "/" (str.++ "F" (str.++ "7" (str.++ "-" (str.++ "." (str.++ "-" (str.++ "." (str.++ "0" (str.++ "." (str.++ "h" (str.++ "-" (str.++ "." (str.++ "9" (str.++ "a" (str.++ "." (str.++ "I" (str.++ "N" (str.++ "W" (str.++ ":" (str.++ "9" (str.++ "/" "")))))))))))))))))))))))))))

(define-fun Witness2 () String (str.++ "f" (str.++ "t" (str.++ "p" (str.++ ":" (str.++ "/" (str.++ "/" (str.++ "-" (str.++ "." (str.++ "T" (str.++ "." (str.++ "Z" (str.++ "y" (str.++ "t" ""))))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.++ (re.union (re.++ (str.to_re (str.++ "h" (str.++ "t" (str.++ "t" (str.++ "p" ""))))) (re.opt (re.range "s" "s"))) (str.to_re (str.++ "f" (str.++ "t" (str.++ "p" "")))))(re.++ (str.to_re (str.++ ":" (str.++ "/" (str.++ "/" ""))))(re.++ (re.union (re.++ (re.opt (re.range "[" "["))(re.++ ((_ re.loop 3 3) (re.++ ((_ re.loop 1 3) (re.range "0" "9")) (re.range "." ".")))(re.++ ((_ re.loop 1 3) (re.range "0" "9")) (re.opt (re.range "]" "]"))))) (re.++ (re.+ (re.++ (re.+ (re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z"))))) (re.range "." "."))) ((_ re.loop 2 4) (re.union (re.range "A" "Z") (re.range "a" "z")))))(re.++ (re.opt (re.++ (re.range ":" ":") (re.+ (re.range "0" "9"))))(re.++ (re.* (re.++ (re.range "/" "/") (re.+ (re.union (re.range "#" "'")(re.union (re.range "+" ".")(re.union (re.range "0" "9")(re.union (re.range ";" ";")(re.union (re.range "=" "=")(re.union (re.range "?" "?")(re.union (re.range "A" "Z")(re.union (re.range "\u{5c}" "\u{5c}")(re.union (re.range "_" "_")(re.union (re.range "a" "z") (re.range "~" "~")))))))))))))) (re.opt (re.range "/" "/"))))))) (str.to_re "")))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "." (str.++ "8" "")))

(define-fun Witness2 () String (str.++ "4" (str.++ "." (str.++ "5" ""))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.* (re.opt (re.range "0" "9")))(re.++ (re.opt (re.union (re.++ (re.range "." ".") (re.range "0" "9")) (re.++ (re.range "." ".") ((_ re.loop 2 2) (re.range "0" "9"))))) (str.to_re ""))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "T" ""))

(define-fun Witness2 () String (str.++ "9" ""))

(assert (= regexA (re.++ (str.to_re "")(re.++ ((_ re.loop 1 20) (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))) (str.to_re "")))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "P" (str.++ "a" (str.++ "t" (str.++ "t" (str.++ "e" (str.++ "r" (str.++ "n" (str.++ " " (str.++ "t" (str.++ "h" (str.++ "a" (str.++ "t" (str.++ " " (str.++ "m" (str.++ "a" (str.++ "t" (str.++ "c" (str.++ "h" (str.++ "e" (str.++ "s" (str.++ " " (str.++ "a" (str.++ "l" (str.++ "l" (str.++ " " (str.++ "D" (str.++ "V" (str.++ "L" (str.++ "A" (str.++ " " (str.++ "V" (str.++ "e" (str.++ "h" (str.++ "i" (str.++ "c" (str.++ "l" (str.++ "e" (str.++ " " (str.++ "R" (str.++ "e" (str.++ "g" (str.++ "i" (str.++ "s" (str.++ "t" (str.++ "r" (str.++ "a" (str.++ "t" (str.++ "i" (str.++ "o" (str.++ "n" (str.++ " " (str.++ "M" (str.++ "a" (str.++ "r" (str.++ "k" (str.++ "s" (str.++ " " (str.++ "V" (str.++ "R" (str.++ "M" (str.++ "\u{cb}" (str.++ " " (str.++ "A" (str.++ "l" (str.++ "l" (str.++ "o" (str.++ "w" (str.++ "s" (str.++ " " (str.++ "f" (str.++ "o" (str.++ "r" (str.++ " " (str.++ "a" (str.++ "n" (str.++ " " (str.++ "o" (str.++ "p" (str.++ "t" (str.++ "i" (str.++ "o" (str.++ "n" (str.++ "a" (str.++ "l" (str.++ " " (str.++ "s" (str.++ "i" (str.++ "n" (str.++ "g" (str.++ "l" (str.++ "e" (str.++ " " (str.++ "s" (str.++ "p" (str.++ "a" (str.++ "c" (str.++ "e" (str.++ " " (str.++ "b" (str.++ "e" (str.++ "t" (str.++ "w" (str.++ "e" (str.++ "e" (str.++ "n" (str.++ " " (str.++ "s" (str.++ "e" (str.++ "g" (str.++ "m" (str.++ "e" (str.++ "n" (str.++ "t" (str.++ "s" (str.++ "\u{e7}" ""))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(define-fun Witness2 () String (str.++ "P" (str.++ "a" (str.++ "t" (str.++ "t" (str.++ "e" (str.++ "r" (str.++ "n" (str.++ " " (str.++ "t" (str.++ "h" (str.++ "a" (str.++ "t" (str.++ " " (str.++ "m" (str.++ "a" (str.++ "t" (str.++ "c" (str.++ "h" (str.++ "e" (str.++ "s" (str.++ " " (str.++ "a" (str.++ "l" (str.++ "l" (str.++ " " (str.++ "D" (str.++ "V" (str.++ "L" (str.++ "A" (str.++ " " (str.++ "V" (str.++ "e" (str.++ "h" (str.++ "i" (str.++ "c" (str.++ "l" (str.++ "e" (str.++ " " (str.++ "R" (str.++ "e" (str.++ "g" (str.++ "i" (str.++ "s" (str.++ "t" (str.++ "r" (str.++ "a" (str.++ "t" (str.++ "i" (str.++ "o" (str.++ "n" (str.++ " " (str.++ "M" (str.++ "a" (str.++ "r" (str.++ "k" (str.++ "s" (str.++ " " (str.++ "V" (str.++ "R" (str.++ "M" (str.++ "\u{c9}" (str.++ " " (str.++ "A" (str.++ "l" (str.++ "l" (str.++ "o" (str.++ "w" (str.++ "s" (str.++ " " (str.++ "f" (str.++ "o" (str.++ "r" (str.++ " " (str.++ "a" (str.++ "n" (str.++ " " (str.++ "o" (str.++ "p" (str.++ "t" (str.++ "i" (str.++ "o" (str.++ "n" (str.++ "a" (str.++ "l" (str.++ " " (str.++ "s" (str.++ "i" (str.++ "n" (str.++ "g" (str.++ "l" (str.++ "e" (str.++ " " (str.++ "s" (str.++ "p" (str.++ "a" (str.++ "c" (str.++ "e" (str.++ " " (str.++ "b" (str.++ "e" (str.++ "t" (str.++ "w" (str.++ "e" (str.++ "e" (str.++ "n" (str.++ " " (str.++ "s" (str.++ "e" (str.++ "g" (str.++ "m" (str.++ "e" (str.++ "n" (str.++ "t" (str.++ "s" (str.++ "\u{ea}" ""))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(assert (= regexA (re.++ (str.to_re (str.++ "P" (str.++ "a" (str.++ "t" (str.++ "t" (str.++ "e" (str.++ "r" (str.++ "n" (str.++ " " (str.++ "t" (str.++ "h" (str.++ "a" (str.++ "t" (str.++ " " (str.++ "m" (str.++ "a" (str.++ "t" (str.++ "c" (str.++ "h" (str.++ "e" (str.++ "s" (str.++ " " (str.++ "a" (str.++ "l" (str.++ "l" (str.++ " " (str.++ "D" (str.++ "V" (str.++ "L" (str.++ "A" (str.++ " " (str.++ "V" (str.++ "e" (str.++ "h" (str.++ "i" (str.++ "c" (str.++ "l" (str.++ "e" (str.++ " " (str.++ "R" (str.++ "e" (str.++ "g" (str.++ "i" (str.++ "s" (str.++ "t" (str.++ "r" (str.++ "a" (str.++ "t" (str.++ "i" (str.++ "o" (str.++ "n" (str.++ " " (str.++ "M" (str.++ "a" (str.++ "r" (str.++ "k" (str.++ "s" (str.++ " " ""))))))))))))))))))))))))))))))))))))))))))))))))))))))))))(re.++ (str.to_re (str.++ "V" (str.++ "R" (str.++ "M" ""))))(re.++ (re.union (re.range "\u{00}" "\u{09}") (re.range "\u{0b}" "\u{ff}"))(re.++ (str.to_re (str.++ " " (str.++ "A" (str.++ "l" (str.++ "l" (str.++ "o" (str.++ "w" (str.++ "s" (str.++ " " (str.++ "f" (str.++ "o" (str.++ "r" (str.++ " " (str.++ "a" (str.++ "n" (str.++ " " (str.++ "o" (str.++ "p" (str.++ "t" (str.++ "i" (str.++ "o" (str.++ "n" (str.++ "a" (str.++ "l" (str.++ " " (str.++ "s" (str.++ "i" (str.++ "n" (str.++ "g" (str.++ "l" (str.++ "e" (str.++ " " (str.++ "s" (str.++ "p" (str.++ "a" (str.++ "c" (str.++ "e" (str.++ " " (str.++ "b" (str.++ "e" (str.++ "t" (str.++ "w" (str.++ "e" (str.++ "e" (str.++ "n" (str.++ " " (str.++ "s" (str.++ "e" (str.++ "g" (str.++ "m" (str.++ "e" (str.++ "n" (str.++ "t" (str.++ "s" "")))))))))))))))))))))))))))))))))))))))))))))))))))))) (re.union (re.range "\u{00}" "\u{09}") (re.range "\u{0b}" "\u{ff}"))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "2" (str.++ "5" (str.++ "0" (str.++ "." (str.++ "2" (str.++ "5" (str.++ "3" (str.++ "." (str.++ "1" (str.++ "6" (str.++ "." (str.++ "1" (str.++ "0" (str.++ "8" (str.++ "/" (str.++ "3" (str.++ "2" ""))))))))))))))))))

(define-fun Witness2 () String (str.++ "1" (str.++ "." (str.++ "1" (str.++ "8" (str.++ "9" (str.++ "." (str.++ "2" (str.++ "5" (str.++ "0" (str.++ "." (str.++ "2" (str.++ "3" (str.++ "7" (str.++ "/" (str.++ "8" ""))))))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ ((_ re.loop 3 3) (re.++ (re.union (re.++ (str.to_re (str.++ "2" (str.++ "5" ""))) (re.range "0" "5"))(re.union (re.++ (re.range "2" "2")(re.++ (re.range "0" "4") (re.range "0" "9")))(re.union (re.++ (re.range "1" "1") ((_ re.loop 2 2) (re.range "0" "9"))) ((_ re.loop 1 2) (re.range "0" "9"))))) (re.range "." ".")))(re.++ (re.union (re.++ (str.to_re (str.++ "2" (str.++ "5" ""))) (re.range "0" "5"))(re.union (re.++ (re.range "2" "2")(re.++ (re.range "0" "4") (re.range "0" "9")))(re.union (re.++ (re.range "1" "1") ((_ re.loop 2 2) (re.range "0" "9"))) ((_ re.loop 1 2) (re.range "0" "9")))))(re.++ (re.++ (re.range "/" "/") (re.union (re.range "0" "9")(re.union (re.++ (re.range "0" "2") (re.range "0" "9")) (re.++ (re.range "3" "3") (re.range "0" "2"))))) (str.to_re "")))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "\u{cf}" (str.++ "o" "")))

(define-fun Witness2 () String (str.++ "\u{97}" (str.++ "l" (str.++ "\u{de}" ""))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.union (re.range "\u{00}" "!")(re.union (re.range "#" ")")(re.union (re.range "+" "-")(re.union (re.range "0" "9")(re.union (re.range ";" ";")(re.union (re.range "=" "=")(re.union (re.range "@" "[")(re.union (re.range "]" "{") (re.range "}" "\u{ff}")))))))))(re.++ ((_ re.loop 0 254) (re.union (re.range "\u{00}" "!")(re.union (re.range "#" ")")(re.union (re.range "+" ".")(re.union (re.range "0" "9")(re.union (re.range ";" ";")(re.union (re.range "=" "=")(re.union (re.range "@" "[")(re.union (re.range "]" "{") (re.range "}" "\u{ff}")))))))))) (str.to_re ""))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "S" (str.++ "o" (str.++ "u" (str.++ "r" (str.++ "c" (str.++ "e" (str.++ ":" ""))))))))

(define-fun Witness2 () String (str.++ "S" (str.++ "o" (str.++ "u" (str.++ "r" (str.++ "c" (str.++ "e" (str.++ ":" ""))))))))

(assert (= regexA (str.to_re (str.++ "S" (str.++ "o" (str.++ "u" (str.++ "r" (str.++ "c" (str.++ "e" (str.++ ":" ""))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "S" (str.++ "i" (str.++ "r" (str.++ " " (str.++ "F" (str.++ "v" "")))))))

(define-fun Witness2 () String (str.++ "R" (str.++ "e" (str.++ "v" (str.++ "\u{1f}" (str.++ "S" (str.++ "z" (str.++ "z" (str.++ "-" (str.++ "G" (str.++ "s" (str.++ "z" (str.++ "b" "")))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.opt (re.++ (re.union (str.to_re (str.++ "S" (str.++ "i" (str.++ "r" ""))))(re.union (re.++ (str.to_re (str.++ "D" (str.++ "r" ""))) (re.union (re.range "\u{00}" "\u{09}") (re.range "\u{0b}" "\u{ff}")))(re.union (re.++ (str.to_re (str.++ "M" (str.++ "r" ""))) (re.union (re.range "\u{00}" "\u{09}") (re.range "\u{0b}" "\u{ff}")))(re.union (re.++ (str.to_re (str.++ "M" (str.++ "r" (str.++ "s" "")))) (re.union (re.range "\u{00}" "\u{09}") (re.range "\u{0b}" "\u{ff}")))(re.union (re.++ (str.to_re (str.++ "M" (str.++ "s" ""))) (re.union (re.range "\u{00}" "\u{09}") (re.range "\u{0b}" "\u{ff}"))) (re.++ (str.to_re (str.++ "R" (str.++ "e" (str.++ "v" "")))) (re.union (re.range "\u{00}" "\u{09}") (re.range "\u{0b}" "\u{ff}")))))))) (re.opt (re.range " " " "))))(re.++ (re.union (re.++ (re.range "A" "Z")(re.++ (re.range "." ".") (re.opt (re.++ (re.range "A" "Z") (re.range "." ".")))))(re.union (re.++ (re.range "A" "Z") (re.+ (re.range "a" "z")))(re.union (re.++ (re.range "A" "Z")(re.++ (re.+ (re.range "a" "z"))(re.++ (re.range "-" "-")(re.++ (re.range "A" "Z") (re.+ (re.range "a" "z")))))) (re.++ (re.range "A" "Z")(re.++ (re.* (re.range "a" "z"))(re.++ (re.range " " " ")(re.++ (re.range "A" "Z") (re.* (re.range "a" "z"))))))))) (str.to_re ""))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "3" (str.++ "8" (str.++ "9" (str.++ "8" (str.++ "9" (str.++ "9" "")))))))

(define-fun Witness2 () String (str.++ "8" (str.++ "9" (str.++ "2" (str.++ "6" (str.++ "9" (str.++ "9" "")))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ ((_ re.loop 6 6) (re.range "0" "9")) (str.to_re "")))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "2" (str.++ "7" (str.++ "/" (str.++ "1" (str.++ "2" (str.++ "/" (str.++ "7" (str.++ "8" "")))))))))

(define-fun Witness2 () String (str.++ "1" (str.++ "9" (str.++ "/" (str.++ "0" (str.++ "8" (str.++ "/" (str.++ "7" (str.++ "5" "")))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.union (re.++ (re.union (re.++ (re.range "0" "0") (re.range "1" "9"))(re.union (re.++ (re.range "1" "2") (re.range "0" "9")) (re.++ (re.range "3" "3") (re.range "0" "1"))))(re.++ (re.range "/" "/")(re.++ (re.union (re.++ (re.range "0" "0") (re.union (re.range "1" "1")(re.union (re.range "3" "3")(re.union (re.range "5" "5") (re.range "7" "8"))))) (re.++ (re.range "1" "1") (re.union (re.range "0" "0") (re.range "2" "2"))))(re.++ (re.range "/" "/") ((_ re.loop 2 2) (re.range "0" "9"))))))(re.union (re.++ (re.union (re.++ (re.range "0" "0") (re.range "1" "9"))(re.union (re.++ (re.range "1" "2") (re.range "0" "9")) (str.to_re (str.++ "3" (str.++ "0" "")))))(re.++ (re.range "/" "/")(re.++ (re.union (re.++ (re.range "0" "0") (re.union (re.range "1" "1") (re.range "3" "9"))) (re.++ (re.range "1" "1") (re.range "0" "2")))(re.++ (re.range "/" "/") ((_ re.loop 2 2) (re.range "0" "9"))))))(re.union (re.++ (re.union (re.++ (re.range "0" "0") (re.range "1" "9"))(re.union (re.++ (re.range "1" "1") (re.range "0" "9")) (re.++ (re.range "2" "2") (re.range "0" "8"))))(re.++ (str.to_re (str.++ "/" (str.++ "0" (str.++ "2" (str.++ "/" ""))))) ((_ re.loop 2 2) (re.range "0" "9")))) (re.++ (str.to_re (str.++ "2" (str.++ "9" (str.++ "/" (str.++ "0" (str.++ "2" (str.++ "/" ""))))))) (re.union (re.union (re.++ (re.range "0" "0") (re.union (re.range "4" "4") (re.range "8" "8")))(re.union (re.++ (re.union (re.range "2" "2")(re.union (re.range "4" "4")(re.union (re.range "6" "6") (re.range "8" "8")))) (re.union (re.range "0" "0")(re.union (re.range "4" "4") (re.range "8" "8")))) (re.++ (re.union (re.range "1" "1")(re.union (re.range "3" "3")(re.union (re.range "5" "5")(re.union (re.range "7" "7") (re.range "9" "9"))))) (re.union (re.range "2" "2") (re.range "6" "6"))))) (str.to_re (str.++ "0" (str.++ "0" "")))))))) (str.to_re "")))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "2" (str.++ "5" (str.++ "4" (str.++ "." (str.++ "2" (str.++ "5" (str.++ "2" (str.++ "." (str.++ "2" (str.++ "2" (str.++ "7" (str.++ "." (str.++ "1" (str.++ "3" (str.++ "0" ""))))))))))))))))

(define-fun Witness2 () String (str.++ "1" (str.++ "9" (str.++ "8" (str.++ "." (str.++ "4" (str.++ "2" (str.++ "." (str.++ "2" (str.++ "5" (str.++ "3" (str.++ "." (str.++ "4" (str.++ "3" ""))))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.++ (re.union (re.range "0" "9")(re.union (re.++ (re.range "1" "9") (re.range "0" "9"))(re.union (re.++ (re.range "2" "2")(re.++ (re.range "0" "4") (re.range "0" "9")))(re.union (re.++ (str.to_re (str.++ "2" (str.++ "5" ""))) (re.range "0" "5")) (re.++ (re.range "1" "1")(re.++ (re.range "0" "9") (re.range "0" "9"))))))) ((_ re.loop 3 3) (re.++ (re.range "." ".") (re.union (re.range "0" "9")(re.union (re.++ (re.range "1" "9") (re.range "0" "9"))(re.union (re.++ (re.range "2" "2")(re.++ (re.range "0" "4") (re.range "0" "9")))(re.union (re.++ (str.to_re (str.++ "2" (str.++ "5" ""))) (re.range "0" "5")) (re.++ (re.range "1" "1")(re.++ (re.range "0" "9") (re.range "0" "9")))))))))) (str.to_re "")))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "8" (str.++ "9" (str.++ "0" (str.++ "9" "")))))

(define-fun Witness2 () String (str.++ "8" (str.++ "8" (str.++ "0" (str.++ "4" "")))))

(assert (= regexA (re.++ (str.to_re "")(re.++ ((_ re.loop 4 4) (re.range "0" "9")) (str.to_re "")))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "+" (str.++ "3" (str.++ "9" (str.++ "3" (str.++ "6" (str.++ "|" (str.++ "7" (str.++ "6" (str.++ "9" (str.++ "2" (str.++ "9" (str.++ "9" (str.++ "1" ""))))))))))))))

(define-fun Witness2 () String (str.++ "+" (str.++ "3" (str.++ "9" (str.++ "3" (str.++ "3" (str.++ "9" (str.++ "5" (str.++ "8" (str.++ "9" (str.++ "5" (str.++ "7" (str.++ "7" (str.++ "8" ""))))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.opt (str.to_re (str.++ "+" (str.++ "3" (str.++ "9" "")))))(re.++ (re.union (re.++ (str.to_re (str.++ "3" (str.++ "8" ""))) (re.union (re.range "," ",")(re.union (re.range "0" "0")(re.union (re.range "8" "9") (re.range "{" "}")))))(re.union (re.++ (str.to_re (str.++ "3" (str.++ "4" ""))) (re.union (re.range "0" "0")(re.union (re.range "7" "9") (re.range "{" "}"))))(re.union (re.++ (str.to_re (str.++ "3" (str.++ "6" ""))) (re.union (re.range "0" "0")(re.union (re.range "6" "6")(re.union (re.range "8" "8") (re.range "|" "|")))))(re.union (re.++ (str.to_re (str.++ "3" (str.++ "3" ""))) (re.union (re.range "0" "0")(re.union (re.range "3" "9") (re.range "{" "}")))) (re.++ (str.to_re (str.++ "3" (str.++ "2" ""))) (re.union (re.range "," ",")(re.union (re.range "8" "9")(re.union (re.range "{" "{") (re.range "}" "}")))))))))(re.++ ((_ re.loop 7 7) (re.range "0" "9")) (str.to_re "")))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "\u{b5}" (str.++ "y" (str.++ "\u{aa}" (str.++ "@" (str.++ "[" (str.++ "1" (str.++ "0" (str.++ "." (str.++ "9" (str.++ "2" (str.++ "." (str.++ "9" (str.++ "4" (str.++ "." (str.++ "9" ""))))))))))))))))

(define-fun Witness2 () String (str.++ "\u{e2}" (str.++ "@" (str.++ "[" (str.++ "9" (str.++ "." (str.++ "1" (str.++ "." (str.++ "9" (str.++ "." (str.++ "6" (str.++ "9" (str.++ "]" "")))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.+ (re.union (re.range "-" ".")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))))(re.++ (re.range "@" "@")(re.++ (re.union (re.++ (re.range "[" "[")(re.++ ((_ re.loop 1 3) (re.range "0" "9"))(re.++ (re.range "." ".")(re.++ ((_ re.loop 1 3) (re.range "0" "9"))(re.++ (re.range "." ".")(re.++ ((_ re.loop 1 3) (re.range "0" "9")) (re.range "." "."))))))) (re.+ (re.++ (re.+ (re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))) (re.range "." "."))))(re.++ (re.union ((_ re.loop 2 4) (re.union (re.range "A" "Z") (re.range "a" "z"))) ((_ re.loop 1 3) (re.range "0" "9")))(re.++ (re.opt (re.range "]" "]")) (str.to_re "")))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "h" (str.++ "t" (str.++ "t" (str.++ "p" (str.++ ":" (str.++ "/" (str.++ "/" (str.++ "o" (str.++ "u" (str.++ "8" (str.++ "_" (str.++ "." (str.++ "p" (str.++ "." (str.++ "Z" (str.++ "h" (str.++ "B" (str.++ "/" (str.++ "8" (str.++ "3" (str.++ "." (str.++ "y" (str.++ "t" (str.++ "w" (str.++ "?" (str.++ "9" (str.++ "=" (str.++ "x" (str.++ "_" (str.++ "&" (str.++ "z" (str.++ "=" (str.++ "K" (str.++ "x" "")))))))))))))))))))))))))))))))))))

(define-fun Witness2 () String (str.++ "h" (str.++ "t" (str.++ "t" (str.++ "p" (str.++ ":" (str.++ "/" (str.++ "/" (str.++ "z" (str.++ "." (str.++ "-" (str.++ "S" (str.++ "." (str.++ "9" (str.++ "." (str.++ "F" (str.++ "k" "")))))))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.++ (str.to_re (str.++ "h" (str.++ "t" (str.++ "t" (str.++ "p" (str.++ ":" (str.++ "/" (str.++ "/" ""))))))))(re.++ (re.+ (re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_") (re.range "a" "z"))))))(re.++ (re.* (re.++ (re.range "." ".") (re.+ (re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_") (re.range "a" "z"))))))))(re.++ (re.range "." ".")(re.++ ((_ re.loop 2 4) (re.union (re.range "A" "Z") (re.range "a" "z")))(re.++ (re.* (re.++ (re.range "/" "/") (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_") (re.range "a" "z")))))))(re.++ (re.opt (re.++ (re.range "/" "/")(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_") (re.range "a" "z")))))(re.++ (re.range "." ".")(re.++ ((_ re.loop 2 4) (re.union (re.range "A" "Z") (re.range "a" "z"))) (re.opt (re.++ (re.range "?" "?")(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_") (re.range "a" "z")))))(re.++ (re.range "=" "=") (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_") (re.range "a" "z")))))))))))))) (re.* (re.++ (re.range "&" "&")(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_") (re.range "a" "z")))))(re.++ (re.range "=" "=") (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_") (re.range "a" "z")))))))))))))))) (str.to_re "")))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "h" (str.++ "t" (str.++ "t" (str.++ "p" (str.++ ":" (str.++ "/" (str.++ "/" (str.++ "w" (str.++ "w" (str.++ "w" (str.++ "." (str.++ "\u{ed}" (str.++ "n" (str.++ "." (str.++ "c" (str.++ "o" (str.++ "o" (str.++ "p" "")))))))))))))))))))

(define-fun Witness2 () String (str.++ "\u{09}" (str.++ "\u{be}" (str.++ "e" (str.++ "." (str.++ "i" (str.++ "n" (str.++ "f" (str.++ "o" "")))))))))

(assert (= regexA (re.++ (re.union (str.to_re (str.++ "h" (str.++ "t" (str.++ "t" (str.++ "p" (str.++ ":" (str.++ "/" (str.++ "/" "")))))))) (str.to_re ""))(re.++ (re.opt (str.to_re (str.++ "w" (str.++ "w" (str.++ "w" (str.++ "." ""))))))(re.++ (re.+ (re.union (re.range "\u{00}" "-") (re.range "/" "\u{ff}")))(re.++ (re.range "." ".")(re.++ (re.union ((_ re.loop 2 2) (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))) (re.union (str.to_re (str.++ "c" (str.++ "o" (str.++ "m" ""))))(re.union (str.to_re (str.++ "n" (str.++ "e" (str.++ "t" ""))))(re.union (str.to_re (str.++ "o" (str.++ "r" (str.++ "g" ""))))(re.union (str.to_re (str.++ "e" (str.++ "d" (str.++ "u" ""))))(re.union (str.to_re (str.++ "i" (str.++ "n" (str.++ "t" ""))))(re.union (str.to_re (str.++ "m" (str.++ "i" (str.++ "l" ""))))(re.union (str.to_re (str.++ "g" (str.++ "o" (str.++ "v" ""))))(re.union (str.to_re (str.++ "a" (str.++ "r" (str.++ "p" (str.++ "a" "")))))(re.union (str.to_re (str.++ "b" (str.++ "i" (str.++ "z" ""))))(re.union (str.to_re (str.++ "a" (str.++ "e" (str.++ "r" (str.++ "o" "")))))(re.union (str.to_re (str.++ "n" (str.++ "a" (str.++ "m" (str.++ "e" "")))))(re.union (str.to_re (str.++ "c" (str.++ "o" (str.++ "o" (str.++ "p" "")))))(re.union (str.to_re (str.++ "i" (str.++ "n" (str.++ "f" (str.++ "o" "")))))(re.union (str.to_re (str.++ "p" (str.++ "r" (str.++ "o" "")))) (str.to_re (str.++ "m" (str.++ "u" (str.++ "s" (str.++ "e" (str.++ "u" (str.++ "m" "")))))))))))))))))))))) (str.to_re ""))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "9" (str.++ "7" (str.++ "." (str.++ "9" "")))))

(define-fun Witness2 () String (str.++ "$" (str.++ "5" (str.++ "9" (str.++ "0" (str.++ "," (str.++ "2" (str.++ "9" (str.++ "3" (str.++ "," (str.++ "2" (str.++ "9" (str.++ "3" (str.++ "." ""))))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.opt (re.range "$" "$"))(re.++ (re.union (re.++ (re.opt (re.++ (re.range "1" "9") (re.range "," ",")))(re.++ ((_ re.loop 0 3) (re.++ ((_ re.loop 3 3) (re.range "0" "9")) (re.range "," ","))) ((_ re.loop 3 3) (re.range "0" "9")))) ((_ re.loop 0 16) (re.range "0" "9")))(re.++ (re.opt (re.++ (re.range "." ".") ((_ re.loop 0 3) (re.range "0" "9")))) (str.to_re "")))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "0" (str.++ "4" (str.++ "/" (str.++ "3" (str.++ "1" (str.++ "/" (str.++ "2" (str.++ "1" (str.++ "9" (str.++ "9" (str.++ "\u{a0}" (str.++ " " (str.++ "\u{85}" (str.++ "P" "")))))))))))))))

(define-fun Witness2 () String (str.++ "1" (str.++ "2" (str.++ "/" (str.++ "2" (str.++ "1" (str.++ "/" (str.++ "1" (str.++ "7" (str.++ "9" (str.++ "9" "")))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.union (re.++ (re.range "0" "0") (re.range "0" "9")) (re.++ (re.range "1" "1") (re.range "0" "2")))(re.++ (re.range "/" "/")(re.++ (re.union (re.++ (re.range "0" "2") (re.range "0" "9")) (re.++ (re.range "3" "3") (re.range "0" "1")))(re.++ (re.range "/" "/")(re.++ (re.union (re.++ (re.range "2" "2") (re.range "0" "1")) (re.++ (re.range "1" "1") (re.range "6" "9")))(re.++ ((_ re.loop 2 2) (re.range "0" "9"))(re.++ (re.* (re.++ (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))(re.++ (re.union (re.++ (re.range "0" "0") (re.range "0" "9")) (re.++ (re.range "1" "1") (re.range "0" "2"))) ((_ re.loop 1 2) (re.++ (re.range ":" ":")(re.++ (re.range "0" "5") (re.range "0" "9")))))))(re.++ (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (re.opt (re.++ (re.union (re.range "A" "A")(re.union (re.range "P" "P")(re.union (re.range "a" "a") (re.range "p" "p")))) ((_ re.loop 0 2) (re.union (re.range "M" "M") (re.range "m" "m"))))) (str.to_re "")))))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "9" (str.++ "3" (str.++ "4" (str.++ "," (str.++ "6" (str.++ "5" (str.++ "9" ""))))))))

(define-fun Witness2 () String (str.++ "7" (str.++ "2" (str.++ "," (str.++ "8" (str.++ "8" (str.++ "9" "")))))))

(assert (= regexA (re.union (re.++ (str.to_re "")(re.++ (re.range "0" "0") (str.to_re "")))(re.union (re.++ (str.to_re "")(re.++ (re.range "1" "9")(re.++ (re.* (re.range "0" "9")) (str.to_re "")))) (re.++ (str.to_re "")(re.++ (re.range "1" "9")(re.++ ((_ re.loop 0 2) (re.range "0" "9"))(re.++ (re.++ (re.range "," ",") ((_ re.loop 3 3) (re.range "0" "9"))) (str.to_re "")))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "\u{aa}" (str.++ "\u{ba}" (str.++ "\u{fc}" (str.++ "\u{aa}" (str.++ "@" (str.++ "\u{d5}" (str.++ "." (str.++ "\u{b5}" (str.++ "e" ""))))))))))

(define-fun Witness2 () String (str.++ "\u{aa}" (str.++ "@" (str.++ "I" (str.++ "\u{b5}" (str.++ "9" (str.++ "\u{f5}" (str.++ "\u{f6}" (str.++ "r" (str.++ "\u{aa}" (str.++ "9" (str.++ "5" (str.++ "." (str.++ "7" (str.++ "." (str.++ "\u{b5}" (str.++ "\u{b5}" (str.++ "v" (str.++ "\u{b5}" "")))))))))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.++ (re.union (re.union (re.range "!" "!")(re.union (re.range "#" "'")(re.union (re.range "*" "+")(re.union (re.range "-" "-")(re.union (re.range "/" "9")(re.union (re.range "=" "=")(re.union (re.range "?" "?")(re.union (re.range "A" "Z")(re.union (re.range "^" "~")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))))))) (re.++ (re.union (re.range "!" "!")(re.union (re.range "#" "'")(re.union (re.range "*" "+")(re.union (re.range "-" "-")(re.union (re.range "/" "9")(re.union (re.range "=" "=")(re.union (re.range "?" "?")(re.union (re.range "A" "Z")(re.union (re.range "^" "~")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))))))(re.++ (re.* (re.union (re.range "!" "!")(re.union (re.range "#" "'")(re.union (re.range "*" "+")(re.union (re.range "-" "9")(re.union (re.range "=" "=")(re.union (re.range "?" "?")(re.union (re.range "A" "Z")(re.union (re.range "^" "~")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))))))) (re.union (re.range "!" "!")(re.union (re.range "#" "'")(re.union (re.range "*" "+")(re.union (re.range "-" "-")(re.union (re.range "/" "9")(re.union (re.range "=" "=")(re.union (re.range "?" "?")(re.union (re.range "A" "Z")(re.union (re.range "^" "~")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))))))))))(re.++ (re.range "@" "@")(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))(re.++ (re.* (re.++ (re.range "-" ".") (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))))(re.++ (re.range "." ".")(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))) (re.* (re.++ (re.range "-" ".") (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))))))))))) (str.to_re "")))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "9" (str.++ "5" (str.++ "5" (str.++ "1" (str.++ "0" (str.++ "9" (str.++ "/" (str.++ "1" (str.++ "7" (str.++ "9" "")))))))))))

(define-fun Witness2 () String (str.++ "0" (str.++ "9" (str.++ "6" (str.++ "2" (str.++ "0" (str.++ "8" (str.++ "/" (str.++ "8" (str.++ "9" (str.++ "4" "")))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ ((_ re.loop 2 2) (re.range "0" "9"))(re.++ (re.union (str.to_re (str.++ "0" (str.++ "1" "")))(re.union (str.to_re (str.++ "0" (str.++ "2" "")))(re.union (str.to_re (str.++ "0" (str.++ "3" "")))(re.union (str.to_re (str.++ "0" (str.++ "4" "")))(re.union (str.to_re (str.++ "0" (str.++ "5" "")))(re.union (str.to_re (str.++ "0" (str.++ "6" "")))(re.union (str.to_re (str.++ "0" (str.++ "7" "")))(re.union (str.to_re (str.++ "0" (str.++ "8" "")))(re.union (str.to_re (str.++ "0" (str.++ "9" "")))(re.union (str.to_re (str.++ "1" (str.++ "0" "")))(re.union (str.to_re (str.++ "1" (str.++ "1" "")))(re.union (str.to_re (str.++ "1" (str.++ "2" "")))(re.union (str.to_re (str.++ "5" (str.++ "1" "")))(re.union (str.to_re (str.++ "5" (str.++ "2" "")))(re.union (str.to_re (str.++ "5" (str.++ "3" "")))(re.union (str.to_re (str.++ "5" (str.++ "4" "")))(re.union (str.to_re (str.++ "5" (str.++ "5" "")))(re.union (str.to_re (str.++ "5" (str.++ "6" "")))(re.union (str.to_re (str.++ "5" (str.++ "7" "")))(re.union (str.to_re (str.++ "5" (str.++ "8" "")))(re.union (str.to_re (str.++ "5" (str.++ "9" "")))(re.union (str.to_re (str.++ "6" (str.++ "0" "")))(re.union (str.to_re (str.++ "6" (str.++ "1" ""))) (str.to_re (str.++ "6" (str.++ "2" ""))))))))))))))))))))))))))(re.++ (re.union (re.++ (re.range "0" "0") (re.range "1" "9"))(re.union (re.++ (re.range "1" "2") (re.range "0" "9")) (re.++ (re.range "3" "3") (re.range "0" "1"))))(re.++ (re.range "/" "/")(re.++ ((_ re.loop 3 4) (re.range "0" "9")) (str.to_re "")))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "6" (str.++ "\u{0d}" (str.++ "." (str.++ "j" (str.++ "P" (str.++ "G" "")))))))

(define-fun Witness2 () String (str.++ "L" (str.++ "." (str.++ "g" (str.++ "I" (str.++ "f" ""))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.union (re.++ (re.union (re.range "A" "Z") (re.range "a" "z")) (re.* (re.union (re.range "\u{00}" "\u{09}") (re.range "\u{0b}" "\u{ff}")))) (re.++ (re.range "1" "9") (re.* (re.union (re.range "\u{00}" "\u{09}") (re.range "\u{0b}" "\u{ff}")))))(re.++ (re.range "." ".")(re.++ (re.union (re.++ (re.union (re.range "J" "J") (re.range "j" "j"))(re.++ (re.union (re.range "P" "P") (re.range "p" "p")) (re.union (re.range "G" "G") (re.range "g" "g")))) (re.++ (re.union (re.range "G" "G") (re.range "g" "g"))(re.++ (re.union (re.range "I" "I") (re.range "i" "i")) (re.union (re.range "F" "F") (re.range "f" "f"))))) (str.to_re "")))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "9" (str.++ ":" (str.++ "4" (str.++ "7" (str.++ "a" (str.++ "m" "")))))))

(define-fun Witness2 () String (str.++ "1" (str.++ "2" (str.++ ":" (str.++ "2" (str.++ "9" (str.++ "A" (str.++ "m" ""))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.union (re.range "1" "9")(re.union (re.++ (re.range "1" "1") (re.range "0" "2")) (re.++ (re.range "0" "0") (re.range "1" "9"))))(re.++ (re.++ (re.range ":" ":")(re.++ (re.range "0" "5")(re.++ (re.range "0" "9")(re.++ (re.union (re.range "A" "A")(re.union (re.range "P" "P")(re.union (re.range "a" "a") (re.range "p" "p")))) (re.union (re.range "M" "M") (re.range "m" "m")))))) (str.to_re ""))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "1" (str.++ "2" (str.++ ":" (str.++ "0" (str.++ "7" ""))))))

(define-fun Witness2 () String (str.++ "8" (str.++ ":" (str.++ "2" (str.++ "8" "")))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.++ (re.union (re.++ (re.opt (re.range "0" "0")) (re.range "1" "9")) (re.++ (re.range "1" "1") (re.range "0" "2")))(re.++ (re.range ":" ":") (re.++ (re.range "0" "5") (re.range "0" "9")))) (str.to_re "")))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "0" (str.++ "6" (str.++ "9" (str.++ "6" (str.++ "-" (str.++ "1" (str.++ "3" (str.++ "7" (str.++ "9" (str.++ "8" (str.++ "7" (str.++ "7" (str.++ "9" ""))))))))))))))

(define-fun Witness2 () String (str.++ "0" (str.++ "6" (str.++ "0" (str.++ "9" (str.++ "1" (str.++ "2" (str.++ "9" (str.++ "8" (str.++ "8" (str.++ "0" (str.++ "3" (str.++ "7" "")))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.range "0" "0")(re.++ (re.++ (re.range "6" "6")(re.++ (re.union (re.range "0" "0")(re.union (re.range "4" "7") (re.range "9" "9"))) (re.union (re.range "0" "0")(re.union (re.range "4" "4")(re.union (re.range "6" "6") (re.range "9" "9"))))))(re.++ (re.opt (re.range "-" "-"))(re.++ (re.opt (re.range "1" "1"))(re.++ (re.range "1" "9")(re.++ ((_ re.loop 6 6) (re.range "0" "9")) (str.to_re ""))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "{" (str.++ "s" (str.++ "c" (str.++ "\u{02}" "")))))

(define-fun Witness2 () String (str.++ "{" (str.++ "\u{1c}" (str.++ "X" (str.++ "D" (str.++ "\u{c0}" (str.++ "\u{f0}" "")))))))

(assert (= regexA (re.union (re.++ (str.to_re "")(re.++ (re.range "{" "{") (re.+ (re.union (re.range "\u{00}" "\u{09}") (re.range "\u{0b}" "\u{ff}")))))(re.union (re.++ (str.to_re "")(re.++ (re.range "\u{5c}" "\u{5c}") (re.+ (re.union (re.range "\u{00}" "\u{09}") (re.range "\u{0b}" "\u{ff}"))))) (re.* (re.range "}" "}"))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "0" (str.++ "'" (str.++ "@" (str.++ "p" (str.++ "." (str.++ "\u{aa}" "")))))))

(define-fun Witness2 () String (str.++ "\u{de}" (str.++ "'" (str.++ "-" (str.++ "@" (str.++ "\u{e8}" (str.++ "." (str.++ "n" (str.++ "s" (str.++ "-" (str.++ "\u{f0}" (str.++ "." (str.++ "\u{b5}" (str.++ "-" (str.++ "\u{f3}" (str.++ "." (str.++ "\u{aa}" "")))))))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))(re.++ (re.* (re.union (re.union (re.range "'" "'")(re.union (re.range "+" "+") (re.range "-" "."))) (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))))(re.++ (re.range "@" "@")(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))(re.++ (re.* (re.++ (re.range "-" ".") (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))))(re.++ (re.range "." ".")(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))(re.++ (re.* (re.++ (re.range "-" ".") (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))))) (str.to_re ""))))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "9" (str.++ "3" (str.++ "9" (str.++ "." "")))))

(define-fun Witness2 () String (str.++ "." (str.++ "8" (str.++ "7" (str.++ "E" (str.++ "+" (str.++ "9" (str.++ "8" ""))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.opt (re.union (re.++ (re.opt (re.union (re.range "+" "+") (re.range "-" "-"))) (re.opt (re.range "$" "$"))) (re.++ (re.opt (re.range "$" "$")) (re.opt (re.union (re.range "+" "+") (re.range "-" "-"))))))(re.++ (re.union (re.++ ((_ re.loop 1 3) (re.range "0" "9"))(re.++ (re.* (re.union (re.++ (re.range "," ",") ((_ re.loop 3 3) (re.range "0" "9"))) (re.range "0" "9"))) (re.opt (re.++ (re.range "." ".") (re.union (re.* (re.range "0" "9")) (re.++ (re.+ (re.range "0" "9"))(re.++ (re.union (re.range "E" "E") (re.range "e" "e"))(re.++ (re.union (re.range "+" "+") (re.range "-" "-")) (re.+ (re.range "0" "9")))))))))) (re.++ (re.range "." ".")(re.++ (re.+ (re.range "0" "9")) (re.opt (re.++ (re.union (re.range "E" "E") (re.range "e" "e"))(re.++ (re.union (re.range "+" "+") (re.range "-" "-")) (re.+ (re.range "0" "9")))))))) (str.to_re ""))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "0" (str.++ "2" (str.++ "/" (str.++ "2" (str.++ "9" (str.++ "/" (str.++ "8" (str.++ "6" (str.++ "3" (str.++ "6" "")))))))))))

(define-fun Witness2 () String (str.++ "0" (str.++ "2" (str.++ "/" (str.++ "2" (str.++ "9" (str.++ "/" (str.++ "8" (str.++ "8" (str.++ "9" (str.++ "6" "")))))))))))

(assert (= regexA (re.union (re.++ (str.to_re "")(re.++ (re.union (str.to_re (str.++ "1" (str.++ "0" "")))(re.union (str.to_re (str.++ "1" (str.++ "2" ""))) (re.++ (re.opt (re.range "0" "0")) (re.union (re.range "1" "1")(re.union (re.range "3" "3")(re.union (re.range "5" "5") (re.range "7" "8")))))))(re.++ (re.range "/" "/")(re.++ (re.union (re.++ (re.range "3" "3") (re.range "0" "1"))(re.union (re.++ (re.range "1" "2") (re.range "0" "9")) (re.++ (re.opt (re.range "0" "0")) (re.range "1" "9"))))(re.++ (re.range "/" "/")(re.++ (re.union (re.++ (re.range "1" "1")(re.++ (re.range "8" "9") ((_ re.loop 2 2) (re.range "0" "9")))) (re.++ (re.range "2" "9") ((_ re.loop 3 3) (re.range "0" "9")))) (str.to_re "")))))))(re.union (re.++ (str.to_re "")(re.++ (re.union (str.to_re (str.++ "1" (str.++ "1" ""))) (re.++ (re.opt (re.range "0" "0")) (re.union (re.range "4" "4")(re.union (re.range "6" "6") (re.range "9" "9")))))(re.++ (re.range "/" "/")(re.++ (re.union (str.to_re (str.++ "3" (str.++ "0" "")))(re.union (re.++ (re.range "1" "2") (re.range "0" "9")) (re.++ (re.opt (re.range "0" "0")) (re.range "1" "9"))))(re.++ (re.range "/" "/")(re.++ (re.union (re.++ (re.range "1" "1")(re.++ (re.range "8" "9") ((_ re.loop 2 2) (re.range "0" "9")))) (re.++ (re.range "2" "9") ((_ re.loop 3 3) (re.range "0" "9")))) (str.to_re "")))))))(re.union (re.++ (str.to_re "")(re.++ (re.++ (re.opt (re.range "0" "0")) (re.range "2" "2"))(re.++ (re.range "/" "/")(re.++ (re.union (re.++ (re.range "2" "2") (re.range "0" "8"))(re.union (re.++ (re.range "1" "1") (re.range "0" "9")) (re.++ (re.opt (re.range "0" "0")) (re.range "1" "9"))))(re.++ (re.range "/" "/")(re.++ (re.union (re.++ (re.range "1" "1")(re.++ (re.range "8" "9") ((_ re.loop 2 2) (re.range "0" "9")))) (re.++ (re.range "2" "9") ((_ re.loop 3 3) (re.range "0" "9")))) (str.to_re "")))))))(re.union (re.++ (str.to_re "")(re.++ (re.++ (re.opt (re.range "0" "0")) (re.range "2" "2"))(re.++ (re.range "/" "/")(re.++ (str.to_re (str.++ "2" (str.++ "9" "")))(re.++ (re.range "/" "/")(re.++ (re.++ (re.union (re.range "2" "2")(re.union (re.range "4" "4")(re.union (re.range "6" "6") (re.range "8" "8"))))(re.++ (re.union (re.range "0" "0")(re.union (re.range "4" "4") (re.range "8" "8"))) (str.to_re (str.++ "0" (str.++ "0" ""))))) (str.to_re "")))))))(re.union (re.++ (str.to_re "")(re.++ (re.++ (re.opt (re.range "0" "0")) (re.range "2" "2"))(re.++ (re.range "/" "/")(re.++ (str.to_re (str.++ "2" (str.++ "9" "")))(re.++ (re.range "/" "/")(re.++ (re.++ (re.union (re.range "3" "3")(re.union (re.range "5" "5")(re.union (re.range "7" "7") (re.range "9" "9"))))(re.++ (re.union (re.range "2" "2") (re.range "6" "6")) (str.to_re (str.++ "0" (str.++ "0" ""))))) (str.to_re "")))))))(re.union (re.++ (str.to_re "")(re.++ (re.++ (re.opt (re.range "0" "0")) (re.range "2" "2"))(re.++ (re.range "/" "/")(re.++ (str.to_re (str.++ "2" (str.++ "9" "")))(re.++ (re.range "/" "/")(re.++ (re.++ (re.range "1" "1")(re.++ (re.range "8" "9")(re.++ (re.range "0" "0") (re.union (re.range "4" "4") (re.range "8" "8"))))) (str.to_re "")))))))(re.union (re.++ (str.to_re "")(re.++ (re.++ (re.opt (re.range "0" "0")) (re.range "2" "2"))(re.++ (re.range "/" "/")(re.++ (str.to_re (str.++ "2" (str.++ "9" "")))(re.++ (re.range "/" "/")(re.++ (re.++ (re.range "2" "9")(re.++ (re.range "0" "9")(re.++ (re.range "0" "0") (re.union (re.range "4" "4") (re.range "8" "8"))))) (str.to_re "")))))))(re.union (re.++ (str.to_re "")(re.++ (re.++ (re.opt (re.range "0" "0")) (re.range "2" "2"))(re.++ (re.range "/" "/")(re.++ (str.to_re (str.++ "2" (str.++ "9" "")))(re.++ (re.range "/" "/")(re.++ (re.++ (re.range "1" "1")(re.++ (re.range "8" "9")(re.++ (re.union (re.range "2" "2")(re.union (re.range "4" "4")(re.union (re.range "6" "6") (re.range "8" "8")))) (re.union (re.range "0" "0")(re.union (re.range "4" "4") (re.range "8" "8")))))) (str.to_re "")))))))(re.union (re.++ (str.to_re "")(re.++ (re.++ (re.opt (re.range "0" "0")) (re.range "2" "2"))(re.++ (re.range "/" "/")(re.++ (str.to_re (str.++ "2" (str.++ "9" "")))(re.++ (re.range "/" "/")(re.++ (re.++ (re.range "2" "9")(re.++ (re.range "0" "9")(re.++ (re.union (re.range "2" "2")(re.union (re.range "4" "4")(re.union (re.range "6" "6") (re.range "8" "8")))) (re.union (re.range "0" "0")(re.union (re.range "4" "4") (re.range "8" "8")))))) (str.to_re "")))))))(re.union (re.++ (str.to_re "")(re.++ (re.++ (re.opt (re.range "0" "0")) (re.range "2" "2"))(re.++ (re.range "/" "/")(re.++ (str.to_re (str.++ "2" (str.++ "9" "")))(re.++ (re.range "/" "/")(re.++ (re.++ (re.range "1" "1")(re.++ (re.range "8" "9")(re.++ (re.union (re.range "1" "1")(re.union (re.range "3" "3")(re.union (re.range "5" "5")(re.union (re.range "7" "7") (re.range "9" "9"))))) (re.union (re.range "2" "2") (re.range "6" "6"))))) (str.to_re ""))))))) (re.++ (str.to_re "")(re.++ (re.++ (re.opt (re.range "0" "0")) (re.range "2" "2"))(re.++ (re.range "/" "/")(re.++ (str.to_re (str.++ "2" (str.++ "9" "")))(re.++ (re.range "/" "/")(re.++ (re.++ (re.range "2" "9")(re.++ (re.range "0" "9")(re.++ (re.union (re.range "1" "1")(re.union (re.range "3" "3")(re.union (re.range "5" "5")(re.union (re.range "7" "7") (re.range "9" "9"))))) (re.union (re.range "2" "2") (re.range "6" "6"))))) (str.to_re "")))))))))))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "2" (str.++ "@" (str.++ "s" (str.++ "." (str.++ "8" (str.++ "3" "")))))))

(define-fun Witness2 () String (str.++ "j" (str.++ "@" (str.++ "5" (str.++ "." (str.++ "6" ""))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))(re.++ (re.* (re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))))(re.++ (re.range "@" "@")(re.++ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))(re.++ (re.* (re.union (re.range "-" ".")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))))(re.++ (re.range "." ".")(re.++ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))(re.++ (re.* (re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))) (str.to_re ""))))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "2" (str.++ "8" (str.++ "-" (str.++ "9" (str.++ "9" (str.++ "8" (str.++ "5" (str.++ "9" (str.++ "9" (str.++ "9" "")))))))))))

(define-fun Witness2 () String (str.++ "8" (str.++ "-" (str.++ "6" (str.++ "5" (str.++ "0" (str.++ "7" (str.++ "9" (str.++ "0" (str.++ "2" ""))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.range "1" "9")(re.++ (re.opt (re.range "0" "9"))(re.++ (re.range "-" "-")(re.++ ((_ re.loop 7 7) (re.range "0" "9")) (str.to_re ""))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "0" (str.++ "5" (str.++ "0" (str.++ "-" (str.++ "5" (str.++ "6" (str.++ "9" (str.++ "8" (str.++ "8" (str.++ "8" (str.++ "9" ""))))))))))))

(define-fun Witness2 () String (str.++ "0" (str.++ "5" (str.++ "2" (str.++ "-" (str.++ "4" (str.++ "0" (str.++ "9" (str.++ "8" (str.++ "9" (str.++ "7" (str.++ "5" ""))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.opt (re.range "0" "0"))(re.++ (re.++ (re.range "5" "5") (re.union (re.range "0" "0")(re.union (re.range "2" "2") (re.range "4" "4"))))(re.++ (re.opt (re.range "-" "-"))(re.++ ((_ re.loop 7 7) (re.range "0" "9")) (str.to_re ""))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "-" (str.++ " " (str.++ "$" (str.++ " " (str.++ "6" ""))))))

(define-fun Witness2 () String (str.++ " " (str.++ " " (str.++ " " (str.++ " " (str.++ "8" (str.++ "9" (str.++ "9" (str.++ "9" "")))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.opt (re.union (re.range "+" "+") (re.range "-" "-")))(re.++ (re.* (re.range " " " "))(re.++ (re.opt (re.range "$" "$"))(re.++ (re.* (re.range " " " "))(re.++ (re.union (re.+ (re.range "0" "9")) (re.++ ((_ re.loop 1 3) (re.range "0" "9")) (re.* (re.++ (re.range "," ",") ((_ re.loop 3 3) (re.range "0" "9"))))))(re.++ (re.opt (re.++ (re.range "." ".") ((_ re.loop 0 2) (re.range "0" "9")))) (str.to_re ""))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "-" (str.++ "\u{09}" (str.++ "z" ""))))

(define-fun Witness2 () String (str.++ " " (str.++ "x" (str.++ " " (str.++ "v" (str.++ "-" (str.++ "'" (str.++ "-" (str.++ "\u{09}" (str.++ "x" (str.++ "\u{0d}" (str.++ "-" (str.++ "-" (str.++ "-" (str.++ "-" "")))))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.* (re.union (re.range "." ".") (re.range "a" "z")))(re.++ (re.opt (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (re.+ (re.++ (re.+ (re.union (re.range "'" "'")(re.union (re.range "-" "-") (re.range "a" "z")))) (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))))(re.++ (re.+ (re.union (re.range "'" "'")(re.union (re.range "-" "-") (re.range "a" "z")))) (str.to_re ""))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "H" (str.++ "R" (str.++ "-" (str.++ "8" (str.++ "8" (str.++ "8" (str.++ "8" (str.++ "6" "")))))))))

(define-fun Witness2 () String (str.++ "H" (str.++ "R" (str.++ "-" (str.++ "2" (str.++ "5" (str.++ "4" (str.++ "9" (str.++ "9" "")))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (str.to_re (str.++ "H" (str.++ "R" (str.++ "-" ""))))(re.++ ((_ re.loop 5 5) (re.range "0" "9")) (str.to_re ""))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "8" (str.++ "8" (str.++ "1" (str.++ "-" (str.++ "8" (str.++ "8" (str.++ "1" (str.++ "-" (str.++ "3" (str.++ "8" (str.++ "0" (str.++ "6" "")))))))))))))

(define-fun Witness2 () String (str.++ "9" (str.++ "9" (str.++ "9" (str.++ "-" (str.++ "3" (str.++ "0" (str.++ "7" (str.++ "-" (str.++ "8" (str.++ "0" (str.++ "7" (str.++ "5" "")))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.union (re.++ (re.range "(" "(")(re.++ (re.range "2" "9")(re.++ ((_ re.loop 2 2) (re.range "0" "9"))(re.++ (re.range ")" ")") (re.opt (re.range " " " ")))))) (re.++ (re.range "2" "9")(re.++ ((_ re.loop 2 2) (re.range "0" "9")) (re.range "-" "-"))))(re.++ (re.range "2" "9")(re.++ ((_ re.loop 2 2) (re.range "0" "9"))(re.++ (re.range "-" "-")(re.++ ((_ re.loop 4 4) (re.range "0" "9")) (str.to_re "")))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "8" (str.++ "9" (str.++ "3" (str.++ "1" (str.++ " " (str.++ "Y" (str.++ "X" ""))))))))

(define-fun Witness2 () String (str.++ "8" (str.++ "9" (str.++ "4" (str.++ "8" (str.++ "\u{85}" (str.++ "L" (str.++ "W" ""))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.range "1" "9")(re.++ ((_ re.loop 3 3) (re.range "0" "9"))(re.++ (re.opt (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ ((_ re.loop 2 2) (re.union (re.range "A" "Z") (re.range "a" "z"))) (str.to_re ""))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "F" (str.++ "T" (str.++ ":" (str.++ "/" (str.++ "/" (str.++ "W" (str.++ "W" (str.++ "W" (str.++ "w" (str.++ "w" (str.++ "w" (str.++ "." (str.++ "W" (str.++ "W" (str.++ "W" (str.++ "w" (str.++ "w" (str.++ "w" (str.++ "." (str.++ "W" (str.++ "W" (str.++ "W" (str.++ "w" (str.++ "w" (str.++ "w" (str.++ "w" (str.++ "w" (str.++ "w" (str.++ "." (str.++ "3" (str.++ "9" (str.++ "9" (str.++ "0" (str.++ "9" (str.++ "4" (str.++ "0" (str.++ "9" (str.++ "." (str.++ ":" (str.++ "0" "")))))))))))))))))))))))))))))))))))))))))

(define-fun Witness2 () String (str.++ "W" (str.++ "W" (str.++ "W" (str.++ "." (str.++ "w" (str.++ "w" (str.++ "w" (str.++ "w" (str.++ "w" (str.++ "w" (str.++ "." (str.++ "w" (str.++ "w" (str.++ "w" (str.++ "." (str.++ "w" (str.++ "w" (str.++ "w" (str.++ "W" (str.++ "W" (str.++ "W" (str.++ "w" (str.++ "w" (str.++ "w" (str.++ "." (str.++ "W" (str.++ "W" (str.++ "W" (str.++ "." (str.++ "W" (str.++ "W" (str.++ "W" (str.++ "." (str.++ "8" (str.++ "1" (str.++ "9" (str.++ "6" (str.++ "5" (str.++ "9" (str.++ "." (str.++ ":" (str.++ "1" "")))))))))))))))))))))))))))))))))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.opt (re.++ (re.union (str.to_re (str.++ "h" (str.++ "t" (str.++ "t" (str.++ "p" "")))))(re.union (str.to_re (str.++ "H" (str.++ "T" (str.++ "T" (str.++ "P" "")))))(re.union (str.to_re (str.++ "h" (str.++ "t" (str.++ "t" (str.++ "p" (str.++ "s" ""))))))(re.union (str.to_re (str.++ "H" (str.++ "T" (str.++ "T" (str.++ "P" (str.++ "S" ""))))))(re.union (str.to_re (str.++ "f" (str.++ "t" (str.++ "p" "")))) (re.++ (str.to_re (str.++ "F" (str.++ "T" ""))) (re.opt (re.range "P" "P")))))))) (str.to_re (str.++ ":" (str.++ "/" (str.++ "/" ""))))))(re.++ (re.+ (re.++ (re.+ (re.union (str.to_re (str.++ "w" (str.++ "w" (str.++ "w" "")))) (str.to_re (str.++ "W" (str.++ "W" (str.++ "W" "")))))) (re.range "." ".")))(re.++ (re.union (re.++ ((_ re.loop 3 3) ((_ re.loop 1 3) (re.range "0" "9")))(re.++ ((_ re.loop 1 3) (re.range "0" "9")) (re.range "." "."))) (re.++ (re.* (re.++ (re.+ (re.union (re.range "!" "!")(re.union (re.range "'" "*")(re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "~" "~")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))))))) (re.range "." ".")))(re.++ (re.opt (re.++ (re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "^" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))) ((_ re.loop 0 61) (re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))))))(re.++ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))(re.++ (re.range "." ".") ((_ re.loop 2 6) (re.range "a" "z")))))))(re.++ (re.opt (re.++ (re.range ":" ":") ((_ re.loop 1 4) (re.range "0" "9"))))(re.++ (re.union (re.* (re.range "/" "/")) (re.++ (re.+ (re.++ (re.+ (re.range "/" "/")) (re.+ (re.union (re.range "!" "!")(re.union (re.range "#" ".")(re.union (re.range "0" ";")(re.union (re.range "=" "=")(re.union (re.range "?" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "~" "~")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))))))))) (re.* (re.range "/" "/")))) (str.to_re "")))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "0" (str.++ "0" (str.++ "9" (str.++ "0" (str.++ "2" (str.++ "." (str.++ "5" (str.++ "9" (str.++ "7" (str.++ "k" "")))))))))))

(define-fun Witness2 () String (str.++ "0" (str.++ "9" (str.++ "1" (str.++ "-" (str.++ "3" ""))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.* (re.range "0" "0"))(re.++ (re.++ ((_ re.loop 1 3) (re.range "0" "9")) (re.* (re.++ (re.opt (re.range "." ".")) ((_ re.loop 3 3) (re.range "0" "9")))))(re.++ (re.opt (re.range "-" "-"))(re.++ (re.union (re.range "0" "9")(re.union (re.range "K" "K") (re.range "k" "k"))) (str.to_re ""))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "5" (str.++ "3" (str.++ "7" (str.++ "8" (str.++ "9" (str.++ "7" (str.++ "7" (str.++ "8" (str.++ "8" ""))))))))))

(define-fun Witness2 () String (str.++ "8" (str.++ "9" (str.++ "9" (str.++ "0" (str.++ "9" (str.++ "2" (str.++ "8" (str.++ "7" (str.++ "6" (str.++ "8" (str.++ "5" (str.++ "4" "")))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.* (re.union (re.range "B" "B") (re.range "G" "G")))(re.++ (re.union (re.++ (re.range "1" "9") ((_ re.loop 8 8) (re.range "0" "9"))) (re.++ (re.range "1" "9") ((_ re.loop 11 11) (re.range "0" "9")))) (str.to_re ""))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "N" (str.++ "A" (str.++ "M" ""))))

(define-fun Witness2 () String (str.++ "G" (str.++ "H" (str.++ "A" ""))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.union (re.++ (re.range "A" "A") (re.union (str.to_re (str.++ "B" (str.++ "W" "")))(re.union (str.to_re (str.++ "F" (str.++ "G" "")))(re.union (str.to_re (str.++ "G" (str.++ "O" "")))(re.union (str.to_re (str.++ "I" (str.++ "A" "")))(re.union (re.++ (re.range "L" "L") (re.range "A" "B"))(re.union (re.++ (re.range "N" "N") (re.union (re.range "D" "D") (re.range "T" "T")))(re.union (re.++ (re.range "R" "R") (re.union (re.range "E" "E")(re.union (re.range "G" "G") (re.range "M" "M"))))(re.union (str.to_re (str.++ "S" (str.++ "M" "")))(re.union (re.++ (re.range "T" "T") (re.union (re.range "A" "A") (re.range "F" "G")))(re.union (re.++ (re.range "U" "U") (re.range "S" "T")) (str.to_re (str.++ "Z" (str.++ "E" ""))))))))))))))(re.union (re.++ (re.range "B" "B") (re.union (str.to_re (str.++ "D" (str.++ "I" "")))(re.union (re.++ (re.range "E" "E") (re.union (re.range "L" "L") (re.range "N" "N")))(re.union (str.to_re (str.++ "F" (str.++ "A" "")))(re.union (re.++ (re.range "G" "G") (re.union (re.range "D" "D") (re.range "R" "R")))(re.union (re.++ (re.range "H" "H") (re.range "R" "S"))(re.union (str.to_re (str.++ "I" (str.++ "H" "")))(re.union (re.++ (re.range "L" "L") (re.union (re.range "M" "M")(re.union (re.range "R" "R") (re.range "Z" "Z"))))(re.union (str.to_re (str.++ "M" (str.++ "U" "")))(re.union (str.to_re (str.++ "O" (str.++ "L" "")))(re.union (re.++ (re.range "R" "R") (re.union (re.range "A" "B") (re.range "N" "N")))(re.union (str.to_re (str.++ "T" (str.++ "N" "")))(re.union (str.to_re (str.++ "V" (str.++ "T" ""))) (str.to_re (str.++ "W" (str.++ "A" ""))))))))))))))))(re.union (re.++ (re.range "C" "C") (re.union (re.++ (re.range "A" "A") (re.union (re.range "F" "F") (re.range "N" "N")))(re.union (str.to_re (str.++ "C" (str.++ "K" "")))(re.union (re.++ (re.range "H" "H") (re.union (re.range "E" "E")(re.union (re.range "L" "L") (re.range "N" "N"))))(re.union (str.to_re (str.++ "I" (str.++ "V" "")))(re.union (str.to_re (str.++ "M" (str.++ "R" "")))(re.union (re.++ (re.range "O" "O") (re.union (re.range "D" "D")(re.union (re.range "G" "G") (re.range "K" "M"))))(re.union (str.to_re (str.++ "P" (str.++ "V" "")))(re.union (str.to_re (str.++ "R" (str.++ "I" "")))(re.union (str.to_re (str.++ "U" (str.++ "B" "")))(re.union (str.to_re (str.++ "X" (str.++ "R" "")))(re.union (re.++ (re.range "Y" "Y") (re.union (re.range "M" "M") (re.range "P" "P"))) (str.to_re (str.++ "Z" (str.++ "E" "")))))))))))))))(re.union (re.++ (re.range "D" "D") (re.union (str.to_re (str.++ "E" (str.++ "U" "")))(re.union (str.to_re (str.++ "J" (str.++ "I" "")))(re.union (str.to_re (str.++ "M" (str.++ "A" "")))(re.union (str.to_re (str.++ "N" (str.++ "K" "")))(re.union (str.to_re (str.++ "O" (str.++ "M" ""))) (str.to_re (str.++ "Z" (str.++ "A" "")))))))))(re.union (re.++ (re.range "E" "E") (re.union (str.to_re (str.++ "C" (str.++ "U" "")))(re.union (str.to_re (str.++ "G" (str.++ "Y" "")))(re.union (str.to_re (str.++ "R" (str.++ "I" "")))(re.union (re.++ (re.range "S" "S") (re.union (re.range "H" "H")(re.union (re.range "P" "P") (re.range "T" "T")))) (str.to_re (str.++ "T" (str.++ "H" ""))))))))(re.union (re.++ (re.range "F" "F") (re.union (str.to_re (str.++ "I" (str.++ "N" "")))(re.union (str.to_re (str.++ "J" (str.++ "I" "")))(re.union (str.to_re (str.++ "L" (str.++ "K" "")))(re.union (re.++ (re.range "R" "R") (re.union (re.range "A" "A") (re.range "O" "O"))) (str.to_re (str.++ "S" (str.++ "M" ""))))))))(re.union (re.++ (re.range "G" "G") (re.union (str.to_re (str.++ "A" (str.++ "B" "")))(re.union (str.to_re (str.++ "B" (str.++ "R" "")))(re.union (str.to_re (str.++ "E" (str.++ "O" "")))(re.union (str.to_re (str.++ "G" (str.++ "Y" "")))(re.union (str.to_re (str.++ "H" (str.++ "A" "")))(re.union (re.++ (re.range "I" "I") (re.union (re.range "B" "B") (re.range "N" "N")))(re.union (str.to_re (str.++ "L" (str.++ "P" "")))(re.union (str.to_re (str.++ "M" (str.++ "B" "")))(re.union (str.to_re (str.++ "N" (str.++ "Q" "")))(re.union (str.to_re (str.++ "N" (str.++ "B" "")))(re.union (re.++ (re.range "R" "R") (re.union (re.range "C" "D") (re.range "L" "L")))(re.union (str.to_re (str.++ "T" (str.++ "M" ""))) (re.++ (re.range "U" "U") (re.union (re.range "F" "F")(re.union (re.range "M" "M") (re.range "Y" "Y")))))))))))))))))(re.union (re.++ (re.range "H" "H") (re.union (str.to_re (str.++ "K" (str.++ "G" "")))(re.union (str.to_re (str.++ "M" (str.++ "D" "")))(re.union (str.to_re (str.++ "N" (str.++ "D" "")))(re.union (str.to_re (str.++ "R" (str.++ "V" "")))(re.union (str.to_re (str.++ "T" (str.++ "I" ""))) (str.to_re (str.++ "U" (str.++ "N" "")))))))))(re.union (re.++ (re.range "I" "I") (re.union (str.to_re (str.++ "D" (str.++ "N" "")))(re.union (str.to_re (str.++ "M" (str.++ "N" "")))(re.union (str.to_re (str.++ "N" (str.++ "D" "")))(re.union (str.to_re (str.++ "O" (str.++ "T" "")))(re.union (re.++ (re.range "R" "R") (re.union (re.range "L" "L")(re.union (re.range "N" "N") (re.range "Q" "Q"))))(re.union (re.++ (re.range "S" "S") (re.union (re.range "L" "L") (re.range "R" "R"))) (str.to_re (str.++ "T" (str.++ "A" ""))))))))))(re.union (re.++ (re.range "J" "J") (re.union (str.to_re (str.++ "A" (str.++ "M" "")))(re.union (str.to_re (str.++ "E" (str.++ "Y" "")))(re.union (str.to_re (str.++ "O" (str.++ "R" ""))) (str.to_re (str.++ "P" (str.++ "N" "")))))))(re.union (re.++ (re.range "K" "K") (re.union (str.to_re (str.++ "A" (str.++ "Z" "")))(re.union (str.to_re (str.++ "E" (str.++ "N" "")))(re.union (str.to_re (str.++ "G" (str.++ "Z" "")))(re.union (str.to_re (str.++ "H" (str.++ "M" "")))(re.union (str.to_re (str.++ "I" (str.++ "R" "")))(re.union (str.to_re (str.++ "N" (str.++ "A" "")))(re.union (str.to_re (str.++ "O" (str.++ "R" ""))) (str.to_re (str.++ "W" (str.++ "T" "")))))))))))(re.union (re.++ (re.range "L" "L") (re.union (str.to_re (str.++ "A" (str.++ "O" "")))(re.union (re.++ (re.range "B" "B") (re.union (re.range "N" "N")(re.union (re.range "R" "R") (re.range "Y" "Y"))))(re.union (str.to_re (str.++ "C" (str.++ "A" "")))(re.union (str.to_re (str.++ "I" (str.++ "E" "")))(re.union (str.to_re (str.++ "K" (str.++ "A" "")))(re.union (str.to_re (str.++ "S" (str.++ "O" "")))(re.union (str.to_re (str.++ "T" (str.++ "U" "")))(re.union (str.to_re (str.++ "U" (str.++ "X" ""))) (str.to_re (str.++ "V" (str.++ "A" ""))))))))))))(re.union (re.++ (re.range "M" "M") (re.union (re.++ (re.range "A" "A") (re.union (re.range "C" "C")(re.union (re.range "F" "F") (re.range "R" "R"))))(re.union (str.to_re (str.++ "C" (str.++ "O" "")))(re.union (re.++ (re.range "D" "D") (re.union (re.range "A" "A")(re.union (re.range "G" "G") (re.range "V" "V"))))(re.union (str.to_re (str.++ "E" (str.++ "X" "")))(re.union (str.to_re (str.++ "H" (str.++ "L" "")))(re.union (str.to_re (str.++ "K" (str.++ "D" "")))(re.union (re.++ (re.range "L" "L") (re.union (re.range "I" "I") (re.range "T" "T")))(re.union (str.to_re (str.++ "M" (str.++ "R" "")))(re.union (re.++ (re.range "N" "N") (re.union (re.range "E" "E")(re.union (re.range "G" "G") (re.range "P" "P"))))(re.union (str.to_re (str.++ "O" (str.++ "Z" "")))(re.union (str.to_re (str.++ "R" (str.++ "T" "")))(re.union (str.to_re (str.++ "S" (str.++ "R" "")))(re.union (str.to_re (str.++ "T" (str.++ "Q" "")))(re.union (str.to_re (str.++ "U" (str.++ "S" "")))(re.union (str.to_re (str.++ "W" (str.++ "I" ""))) (re.++ (re.range "Y" "Y") (re.range "S" "T"))))))))))))))))))(re.union (re.++ (re.range "N" "N") (re.union (str.to_re (str.++ "A" (str.++ "M" "")))(re.union (str.to_re (str.++ "C" (str.++ "L" "")))(re.union (str.to_re (str.++ "E" (str.++ "R" "")))(re.union (str.to_re (str.++ "F" (str.++ "K" "")))(re.union (str.to_re (str.++ "G" (str.++ "A" "")))(re.union (re.++ (re.range "I" "I") (re.union (re.range "C" "C") (re.range "U" "U")))(re.union (str.to_re (str.++ "L" (str.++ "D" "")))(re.union (str.to_re (str.++ "O" (str.++ "R" "")))(re.union (str.to_re (str.++ "P" (str.++ "L" "")))(re.union (str.to_re (str.++ "R" (str.++ "U" ""))) (str.to_re (str.++ "Z" (str.++ "L" ""))))))))))))))(re.union (str.to_re (str.++ "O" (str.++ "M" (str.++ "N" ""))))(re.union (re.++ (re.range "P" "P") (re.union (re.++ (re.range "A" "A") (re.union (re.range "K" "K") (re.range "N" "N")))(re.union (str.to_re (str.++ "C" (str.++ "N" "")))(re.union (str.to_re (str.++ "E" (str.++ "R" "")))(re.union (str.to_re (str.++ "H" (str.++ "L" "")))(re.union (str.to_re (str.++ "L" (str.++ "W" "")))(re.union (str.to_re (str.++ "N" (str.++ "G" "")))(re.union (str.to_re (str.++ "O" (str.++ "L" "")))(re.union (re.++ (re.range "R" "R") (re.union (re.range "I" "I")(re.union (re.range "K" "K")(re.union (re.range "T" "T") (re.range "Y" "Y")))))(re.union (str.to_re (str.++ "S" (str.++ "E" ""))) (str.to_re (str.++ "Y" (str.++ "F" "")))))))))))))(re.union (str.to_re (str.++ "Q" (str.++ "A" (str.++ "T" ""))))(re.union (re.++ (re.range "R" "R") (re.union (str.to_re (str.++ "E" (str.++ "U" "")))(re.union (str.to_re (str.++ "O" (str.++ "U" "")))(re.union (str.to_re (str.++ "U" (str.++ "S" ""))) (str.to_re (str.++ "W" (str.++ "A" "")))))))(re.union (re.++ (re.range "S" "S") (re.union (str.to_re (str.++ "A" (str.++ "U" "")))(re.union (str.to_re (str.++ "D" (str.++ "N" "")))(re.union (str.to_re (str.++ "E" (str.++ "N" "")))(re.union (re.++ (re.range "G" "G") (re.union (re.range "P" "P") (re.range "S" "S")))(re.union (str.to_re (str.++ "H" (str.++ "N" "")))(re.union (str.to_re (str.++ "J" (str.++ "M" "")))(re.union (re.++ (re.range "L" "L") (re.union (re.range "B" "B")(re.union (re.range "E" "E") (re.range "V" "V"))))(re.union (str.to_re (str.++ "M" (str.++ "R" "")))(re.union (str.to_re (str.++ "O" (str.++ "M" "")))(re.union (str.to_re (str.++ "P" (str.++ "M" "")))(re.union (str.to_re (str.++ "R" (str.++ "B" "")))(re.union (str.to_re (str.++ "T" (str.++ "P" "")))(re.union (str.to_re (str.++ "U" (str.++ "R" "")))(re.union (re.++ (re.range "V" "V") (re.union (re.range "K" "K") (re.range "N" "N")))(re.union (re.++ (re.range "W" "W") (re.union (re.range "E" "E") (re.range "Z" "Z"))) (re.++ (re.range "Y" "Y") (re.union (re.range "C" "C") (re.range "R" "R")))))))))))))))))))(re.union (re.++ (re.range "T" "T") (re.union (re.++ (re.range "C" "C") (re.union (re.range "A" "A") (re.range "D" "D")))(re.union (str.to_re (str.++ "G" (str.++ "O" "")))(re.union (str.to_re (str.++ "H" (str.++ "A" "")))(re.union (str.to_re (str.++ "J" (str.++ "K" "")))(re.union (re.++ (re.range "K" "K") (re.range "L" "M"))(re.union (str.to_re (str.++ "L" (str.++ "S" "")))(re.union (str.to_re (str.++ "O" (str.++ "N" "")))(re.union (str.to_re (str.++ "T" (str.++ "O" "")))(re.union (re.++ (re.range "U" "U") (re.union (re.range "N" "N")(re.union (re.range "R" "R") (re.range "V" "V"))))(re.union (str.to_re (str.++ "W" (str.++ "N" ""))) (str.to_re (str.++ "Z" (str.++ "A" ""))))))))))))))(re.union (re.++ (re.range "U" "U") (re.union (str.to_re (str.++ "E" (str.++ "N" "")))(re.union (str.to_re (str.++ "G" (str.++ "A" "")))(re.union (str.to_re (str.++ "K" (str.++ "R" "")))(re.union (str.to_re (str.++ "M" (str.++ "I" "")))(re.union (str.to_re (str.++ "R" (str.++ "Y" "")))(re.union (str.to_re (str.++ "S" (str.++ "A" ""))) (str.to_re (str.++ "Z" (str.++ "B" ""))))))))))(re.union (re.++ (re.range "V" "V") (re.union (str.to_re (str.++ "A" (str.++ "T" "")))(re.union (str.to_re (str.++ "C" (str.++ "T" "")))(re.union (str.to_re (str.++ "G" (str.++ "B" "")))(re.union (str.to_re (str.++ "I" (str.++ "R" "")))(re.union (str.to_re (str.++ "N" (str.++ "M" ""))) (str.to_re (str.++ "U" (str.++ "T" "")))))))))(re.union (re.++ (re.range "W" "W") (re.union (str.to_re (str.++ "L" (str.++ "F" ""))) (str.to_re (str.++ "S" (str.++ "M" "")))))(re.union (str.to_re (str.++ "Y" (str.++ "E" (str.++ "M" "")))) (re.++ (re.range "Z" "Z") (re.union (str.to_re (str.++ "A" (str.++ "F" "")))(re.union (str.to_re (str.++ "M" (str.++ "B" ""))) (str.to_re (str.++ "W" (str.++ "E" "")))))))))))))))))))))))))))))) (str.to_re "")))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "2" (str.++ "1" (str.++ "6" (str.++ "4" (str.++ "7" ""))))))

(define-fun Witness2 () String (str.++ "4" (str.++ "1" (str.++ "0" (str.++ "8" (str.++ "8" ""))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ ((_ re.loop 5 5) (re.range "0" "9"))(re.++ (re.opt (re.++ (re.range "-" "-") ((_ re.loop 3 3) (re.range "0" "9")))) (str.to_re ""))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "0" ""))

(define-fun Witness2 () String (str.++ "4" (str.++ "." (str.++ "6" (str.++ "5" "")))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.* (re.range "0" "9"))(re.++ (re.range "0" "9")(re.++ (re.opt (re.++ (re.range "." ".")(re.++ (re.opt (re.range "0" "9")) (re.range "0" "9")))) (str.to_re "")))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "\u{fe}" (str.++ "\u{ed}" (str.++ "5" ""))))

(define-fun Witness2 () String (str.++ "\u{e2}" ""))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))) (re.union ((_ re.loop 3 3) (re.++ (re.range "," ",")(re.++ (re.opt (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (re.union (re.++ (str.to_re (str.++ "V" (str.++ "e" (str.++ "r" (str.++ "s" (str.++ "i" (str.++ "o" (str.++ "n" (str.++ "=" ""))))))))) ((_ re.loop 1 4) (re.++ ((_ re.loop 1 2) (re.range "0" "9")) (re.opt (re.range "." ".")))))(re.union (re.++ (str.to_re (str.++ "C" (str.++ "u" (str.++ "l" (str.++ "t" (str.++ "u" (str.++ "r" (str.++ "e" (str.++ "=" ""))))))))) (re.union (str.to_re (str.++ "n" (str.++ "e" (str.++ "u" (str.++ "t" (str.++ "r" (str.++ "a" (str.++ "l" "")))))))) (re.++ ((_ re.loop 2 2) (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))(re.++ (re.range "-" "-") ((_ re.loop 2 2) (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))))))) (re.++ (str.to_re (str.++ "P" (str.++ "u" (str.++ "b" (str.++ "l" (str.++ "i" (str.++ "c" (str.++ "K" (str.++ "e" (str.++ "y" (str.++ "T" (str.++ "o" (str.++ "k" (str.++ "e" (str.++ "n" (str.++ "=" "")))))))))))))))) ((_ re.loop 16 16) (re.union (re.range "0" "9")(re.union (re.range "A" "F") (re.range "a" "f"))))))) (re.opt (re.++ (re.range "," ",") (re.opt (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))))))))) (str.to_re ""))) (str.to_re "")))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "\u{9d}" ""))

(define-fun Witness2 () String (str.++ "x" (str.++ "\u{83}" (str.++ "\u{01}" ""))))

(assert (= regexA (re.++ (str.to_re "")(re.++ ((_ re.loop 1 10) (re.union (re.union (re.range "\u{00}" "\u{09}") (re.range "\u{0b}" "\u{ff}")) (re.union (re.range "\u{0a}" "\u{0a}") (re.range "\u{0d}" "\u{0d}")))) (str.to_re "")))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "Y" (str.++ "A" (str.++ "J" (str.++ "2" (str.++ "7" (str.++ "5" (str.++ "0" (str.++ "7" (str.++ "5" (str.++ "8" (str.++ "8" ""))))))))))))

(define-fun Witness2 () String (str.++ "Z" (str.++ "A" (str.++ "Z" (str.++ "8" (str.++ "0" (str.++ "8" (str.++ "8" (str.++ "9" (str.++ "7" (str.++ "1" (str.++ "8" ""))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ ((_ re.loop 3 3) (re.range "A" "Z"))(re.++ ((_ re.loop 8 8) (re.range "0" "9")) (str.to_re ""))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "\u{0c}" (str.++ "," (str.++ "5" (str.++ " " (str.++ "\u{0a}" (str.++ "\u{85}" (str.++ "\u{a0}" (str.++ "\u{0c}" "")))))))))

(define-fun Witness2 () String (str.++ "\u{85}" (str.++ "," (str.++ "\u{0c}" (str.++ "\u{a0}" (str.++ "\u{a0}" ""))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (re.+ (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "A" "Z")(re.union (re.range "a" "z")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))))(re.++ (re.range "," ",")(re.++ (re.+ (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "0" "9")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))))(re.++ (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))) (str.to_re "")))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "1" (str.++ "1" (str.++ "/" (str.++ "2" (str.++ "0" (str.++ "/" (str.++ "2" (str.++ "0" (str.++ "8" (str.++ "8" (str.++ "\u{85}" (str.++ "2" (str.++ "0" (str.++ ":" (str.++ "1" (str.++ "8" (str.++ ":" (str.++ "4" (str.++ "1" ""))))))))))))))))))))

(define-fun Witness2 () String (str.++ "0" (str.++ "8" (str.++ "/" (str.++ "2" (str.++ "0" (str.++ "/" (str.++ "1" (str.++ "9" (str.++ "9" (str.++ "5" (str.++ "\u{a0}" (str.++ "2" (str.++ "0" (str.++ ":" (str.++ "3" (str.++ "4" "")))))))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.union (re.++ (re.range "0" "0") (re.range "0" "9")) (re.++ (re.range "1" "1") (re.range "0" "2")))(re.++ (re.range "/" "/")(re.++ (re.union (re.++ (re.range "0" "2") (re.range "0" "9")) (re.++ (re.range "3" "3") (re.range "0" "1")))(re.++ (re.range "/" "/")(re.++ (re.union (re.++ (re.range "2" "2") (re.range "0" "1")) (re.++ (re.range "1" "1") (re.range "6" "9")))(re.++ ((_ re.loop 2 2) (re.range "0" "9"))(re.++ (re.opt (re.++ (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))(re.++ (re.union (re.++ (re.range "0" "1") (re.range "0" "9")) (re.++ (re.range "2" "2") (re.range "0" "3"))) ((_ re.loop 1 2) (re.++ (re.range ":" ":")(re.++ (re.range "0" "5") (re.range "0" "9"))))))) (str.to_re "")))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "N" (str.++ "A" (str.++ "M" (str.++ "E" (str.++ "4" (str.++ "9" (str.++ "7" (str.++ "0" (str.++ "2" (str.++ "9" (str.++ "9" (str.++ "9" "")))))))))))))

(define-fun Witness2 () String (str.++ "N" (str.++ "A" (str.++ "M" (str.++ "E" (str.++ "8" (str.++ "9" (str.++ ">" ""))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (str.to_re (str.++ "N" (str.++ "A" (str.++ "M" (str.++ "E" "")))))(re.++ (re.opt (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (re.opt (re.range "<" "<"))(re.++ (re.* (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))(re.++ (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (re.* (re.range "0" "9"))(re.++ (re.opt (re.range ">" ">")) (str.to_re "")))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "6" (str.++ "4" (str.++ "8" (str.++ "0" (str.++ "4" (str.++ "2" (str.++ "8" (str.++ "8" "")))))))))

(define-fun Witness2 () String (str.++ "6" (str.++ "9" (str.++ "1" (str.++ "9" (str.++ "9" (str.++ "9" (str.++ "2" (str.++ "8" "")))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.range "6" "6")(re.++ ((_ re.loop 7 7) (re.range "0" "9")) (str.to_re ""))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "z" (str.++ "O" (str.++ "N" (str.++ "o" (str.++ "9" (str.++ "8" (str.++ "9" (str.++ "9" (str.++ "9" (str.++ "9" "")))))))))))

(define-fun Witness2 () String (str.++ "J" (str.++ "T" (str.++ "h" (str.++ "Z" (str.++ "3" (str.++ "8" (str.++ "0" (str.++ "9" (str.++ "5" (str.++ "4" "")))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ ((_ re.loop 3 4) (re.union (re.range "A" "Z") (re.range "a" "z")))(re.++ ((_ re.loop 6 6) (re.range "0" "9")) (str.to_re ""))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "-" ""))

(define-fun Witness2 () String (str.++ "-" (str.++ "." (str.++ "9" ""))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.opt (re.range "-" "-"))(re.++ (re.* (re.range "0" "9"))(re.++ (re.opt (re.++ (re.range "." ".") (re.+ (re.range "0" "9")))) (str.to_re "")))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "8" (str.++ "8" (str.++ "." (str.++ "1" (str.++ "." (str.++ "9" (str.++ "9" (str.++ "." (str.++ "0" ""))))))))))

(define-fun Witness2 () String (str.++ "1" (str.++ "." (str.++ "3" (str.++ "8" (str.++ "." (str.++ "2" (str.++ "4" (str.++ "." (str.++ "3" ""))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ ((_ re.loop 3 3) (re.++ (re.union (re.++ (re.range "1" "1") ((_ re.loop 0 2) (re.range "0" "9")))(re.union (re.++ (re.range "3" "9") (re.opt (re.range "0" "9")))(re.union (re.++ (re.range "2" "2") (re.opt (re.union ((_ re.loop 1 2) (re.range "0" "5")) (re.range "0" "9")))) (re.range "0" "0")))) (re.range "." ".")))(re.++ (re.union (re.++ (re.range "1" "1") ((_ re.loop 0 2) (re.range "0" "9")))(re.union (re.++ (re.range "3" "9") (re.opt (re.range "0" "9")))(re.union (re.++ (re.range "2" "2") (re.opt (re.union ((_ re.loop 1 2) (re.range "0" "5")) (re.range "0" "9")))) (re.range "0" "0")))) (str.to_re ""))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "d" (str.++ "&" "")))

(define-fun Witness2 () String (str.++ "P" (str.++ "-" (str.++ "t" ""))))

(assert (= regexA (re.union (re.++ (str.to_re "")(re.++ (re.union (re.range "A" "Z") (re.range "a" "z"))(re.++ (re.* (re.union (re.range "-" "-")(re.union (re.range "A" "Z")(re.union (re.range "_" "_") (re.range "a" "z")))))(re.++ (re.* (re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))))(re.++ (re.union (re.range "\u{00}" "\u{08}")(re.union (re.range "\u{0e}" "\u{1f}")(re.union (re.range "!" "\u{84}")(re.union (re.range "\u{86}" "\u{9f}") (re.range "\u{a1}" "\u{ff}"))))) (str.to_re ""))))))(re.union (re.++ (str.to_re "")(re.++ (re.union (re.range "A" "Z") (re.range "a" "z"))(re.++ (re.* (re.union (re.range "-" "-")(re.union (re.range "0" "9") (re.range "_" "_"))))(re.++ (re.union (re.range "\u{00}" "\u{08}")(re.union (re.range "\u{0e}" "\u{1f}")(re.union (re.range "!" "\u{84}")(re.union (re.range "\u{86}" "\u{9f}") (re.range "\u{a1}" "\u{ff}"))))) (str.to_re ""))))) (re.++ (str.to_re "")(re.++ (re.* (re.union (re.range "A" "Z") (re.range "a" "z")))(re.++ (re.union (re.range "\u{00}" "\u{08}")(re.union (re.range "\u{0e}" "\u{1f}")(re.union (re.range "!" "\u{84}")(re.union (re.range "\u{86}" "\u{9f}") (re.range "\u{a1}" "\u{ff}"))))) (str.to_re ""))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "<" (str.++ " " (str.++ " " (str.++ " " (str.++ " " (str.++ "b" (str.++ "a" (str.++ "l" (str.++ "i" (str.++ "s" (str.++ "e" (str.++ "|" (str.++ "\u{90}" (str.++ "\u{ee}" (str.++ "<" (str.++ "/" (str.++ "b" (str.++ "a" (str.++ "l" (str.++ "i" (str.++ "s" (str.++ "e" (str.++ ">" ""))))))))))))))))))))))))

(define-fun Witness2 () String (str.++ "<" (str.++ " " (str.++ "b" (str.++ "a" (str.++ "l" (str.++ "i" (str.++ "s" (str.++ "e" (str.++ "|" (str.++ "u" (str.++ "<" (str.++ "/" (str.++ "b" (str.++ "a" (str.++ "l" (str.++ "i" (str.++ "s" (str.++ "e" (str.++ " " (str.++ " " (str.++ ">" ""))))))))))))))))))))))

(assert (= regexA (re.++ (re.range "<" "<")(re.++ (re.* (re.range " " " "))(re.++ (str.to_re (str.++ "b" (str.++ "a" (str.++ "l" (str.++ "i" (str.++ "s" (str.++ "e" "")))))))(re.++ (re.union (re.range "\u{0a}" "\u{0a}")(re.union (re.range " " " ")(re.union (re.range "(" "*")(re.union (re.range "." ".")(re.union (re.range ":" ":")(re.union (re.range ">" ">") (re.range "|" "|")))))))(re.++ (re.* (re.union (re.union (re.range "\u{00}" "\u{09}") (re.range "\u{0b}" "\u{ff}")) (re.range "\u{0a}" "\u{0a}")))(re.++ (str.to_re (str.++ "<" (str.++ "/" (str.++ "b" (str.++ "a" (str.++ "l" (str.++ "i" (str.++ "s" (str.++ "e" "")))))))))(re.++ (re.* (re.range " " " ")) (re.range ">" ">"))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "1" (str.++ "8" "")))

(define-fun Witness2 () String (str.++ "1" (str.++ "8" (str.++ "8" (str.++ "4" (str.++ "1" (str.++ "8" (str.++ "," (str.++ "8" (str.++ "9" (str.++ "9" (str.++ "," (str.++ "4" (str.++ "8" (str.++ "0" (str.++ "," (str.++ "9" (str.++ "8" (str.++ "4" "")))))))))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.opt (re.range "$" "$"))(re.++ (re.union ((_ re.loop 1 20) (re.range "0" "9"))(re.union (re.++ ((_ re.loop 1 2) (re.range "0" "9")) ((_ re.loop 0 6) (re.++ (re.opt (re.range "," ",")) ((_ re.loop 3 3) (re.range "0" "9"))))) (re.++ ((_ re.loop 3 3) (re.range "0" "9")) ((_ re.loop 0 5) (re.++ (re.opt (re.range "," ",")) ((_ re.loop 3 3) (re.range "0" "9"))))))) (str.to_re ""))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "4" (str.++ "9" (str.++ "8" (str.++ "9" (str.++ "3" ""))))))

(define-fun Witness2 () String (str.++ "1" (str.++ "8" (str.++ "5" (str.++ "8" (str.++ "2" ""))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ ((_ re.loop 5 5) (re.range "0" "9")) (str.to_re "")))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "C" (str.++ "-" (str.++ "4" (str.++ "9" (str.++ "8" (str.++ "8" (str.++ "6" (str.++ "8" (str.++ "5" ""))))))))))

(define-fun Witness2 () String (str.++ "H" (str.++ "-" (str.++ "3" (str.++ "2" (str.++ "9" (str.++ "9" (str.++ "3" (str.++ "0" (str.++ "7" ""))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.range "A" "Z")(re.++ (re.range "-" "-")(re.++ ((_ re.loop 7 7) (re.range "0" "9")) (str.to_re "")))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "C" (str.++ "\u{cb}" (str.++ "\u{cf}" (str.++ "-" (str.++ "\u{dd}" (str.++ "\u{e1}" (str.++ "\u{85}" (str.++ "\u{85}" (str.++ "Z" (str.++ "\u{cc}" (str.++ "\u{aa}" (str.++ "A" (str.++ "N" (str.++ "Q" "")))))))))))))))

(define-fun Witness2 () String (str.++ "B" (str.++ "." (str.++ "\u{aa}" (str.++ "z" (str.++ "\u{aa}" (str.++ "9" (str.++ "-" (str.++ "W" (str.++ "\u{b5}" (str.++ " " (str.++ "R" (str.++ "Z" (str.++ "\u{b5}" (str.++ "\u{c9}" (str.++ "9" (str.++ "-" (str.++ "3" (str.++ "J" (str.++ "r" (str.++ "." "")))))))))))))))))))))

(assert (= regexA (re.++ (re.++ (re.range "A" "Z")(re.++ (re.opt (re.range "." "."))(re.++ (re.* (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))(re.++ (re.opt (re.range "-" "-"))(re.++ (re.opt (re.range "A" "Z")) (re.* (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))))))))(re.++ (re.opt (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (re.union (re.++ (re.range "A" "Z") (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))) (re.++ (re.opt (re.range "A" "Z")) (re.opt (re.range "." "."))))(re.++ (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))(re.++ (re.++ (re.opt (re.range "A" "Z"))(re.++ ((_ re.loop 0 3) (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))(re.++ (re.range "A" "Z")(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))(re.++ (re.opt (re.range "-" "-"))(re.++ (re.opt (re.range "A" "Z")) (re.* (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))))))))(re.++ (re.union (re.++ (re.range "," ",") (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))) (str.to_re "")) (re.union (str.to_re (str.++ "J" (str.++ "r" (str.++ "." ""))))(re.union (str.to_re (str.++ "S" (str.++ "r" (str.++ "." ""))))(re.union (str.to_re (str.++ "I" (str.++ "V" "")))(re.union (str.to_re (str.++ "I" (str.++ "I" (str.++ "I" ""))))(re.union (str.to_re (str.++ "I" (str.++ "I" ""))) (str.to_re ""))))))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "$" (str.++ "9" "")))

(define-fun Witness2 () String (str.++ "$" (str.++ "5" (str.++ "8" (str.++ "," (str.++ "9" (str.++ "9" (str.++ "3" ""))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.opt (re.range "$" "$"))(re.++ (re.union (re.++ ((_ re.loop 1 3) (re.range "0" "9"))(re.++ (re.opt (re.range "," ","))(re.++ (re.* (re.++ ((_ re.loop 3 3) (re.range "0" "9")) (re.opt (re.range "," ","))))(re.++ ((_ re.loop 3 3) (re.range "0" "9")) (re.opt (re.++ (re.range "." ".") ((_ re.loop 1 3) (re.range "0" "9")))))))) (re.++ ((_ re.loop 1 3) (re.range "0" "9")) (re.opt (re.++ (re.range "." ".") ((_ re.loop 2 2) (re.range "0" "9")))))) (str.to_re ""))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "Z" (str.++ "6" (str.++ " " (str.++ "1" (str.++ "S" (str.++ "B" "")))))))

(define-fun Witness2 () String (str.++ "T" (str.++ "2" (str.++ "S" (str.++ "0" (str.++ "Z" (str.++ "X" "")))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.union (re.++ (str.to_re (str.++ "G" (str.++ "I" (str.++ "R" ""))))(re.++ (re.opt (re.range " " " ")) (str.to_re (str.++ "0" (str.++ "A" (str.++ "A" "")))))) (re.++ (re.union (re.range "A" "P")(re.union (re.range "R" "U")(re.union (re.range "W" "W") (re.range "Y" "Z"))))(re.++ (re.union (re.range "0" "9")(re.union ((_ re.loop 2 2) (re.range "0" "9"))(re.union (re.++ (re.union (re.range "A" "H") (re.range "K" "Y")) (re.range "0" "9"))(re.union (re.++ (re.union (re.range "A" "H") (re.range "K" "Y"))(re.++ (re.range "0" "9") (re.range "0" "9")))(re.union (re.++ (re.range "0" "9") (re.union (re.range "A" "H")(re.union (re.range "J" "K")(re.union (re.range "S" "U") (re.range "W" "W"))))) (re.++ (re.union (re.range "A" "H") (re.range "K" "Y"))(re.++ (re.range "0" "9") (re.union (re.range "A" "B")(re.union (re.range "E" "E")(re.union (re.range "H" "H")(re.union (re.range "M" "N")(re.union (re.range "P" "P")(re.union (re.range "R" "R") (re.range "V" "Y"))))))))))))))(re.++ (re.opt (re.range " " " "))(re.++ (re.range "0" "9") ((_ re.loop 2 2) (re.union (re.range "A" "B")(re.union (re.range "D" "H")(re.union (re.range "J" "J")(re.union (re.range "L" "L")(re.union (re.range "N" "N")(re.union (re.range "P" "U") (re.range "W" "Z"))))))))))))) (str.to_re "")))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "r" (str.++ "-" (str.++ "b" (str.++ "4" (str.++ "s" (str.++ "z" (str.++ "." (str.++ "a" (str.++ "c" (str.++ "." (str.++ "u" (str.++ "k" "")))))))))))))

(define-fun Witness2 () String (str.++ "i" (str.++ "x" (str.++ "3" (str.++ "o" (str.++ "r" (str.++ "." (str.++ "a" (str.++ "c" (str.++ "." (str.++ "u" (str.++ "k" ""))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.union (re.++ (re.range "a" "z") (re.range "0" "9"))(re.union (re.++ (re.range "0" "9") (re.range "a" "z"))(re.union (re.++ (re.union (re.range "0" "9") (re.range "a" "z"))(re.++ ((_ re.loop 1 2) (re.union (re.range "-" "-")(re.union (re.range "0" "9") (re.range "a" "z")))) (re.union (re.range "0" "9") (re.range "a" "z")))) (re.++ (re.union (re.range "0" "9") (re.range "a" "z"))(re.++ (re.union (re.range "-" "-")(re.union (re.range "0" "9") (re.range "a" "z")))(re.++ (re.union (re.++ (re.union (re.range "-" "-")(re.union (re.range "0" "9") (re.range "a" "z"))) (re.union (re.range "0" "9") (re.range "a" "z"))) (re.++ (re.union (re.range "0" "9") (re.range "a" "z")) (re.union (re.range "-" "-")(re.union (re.range "0" "9") (re.range "a" "z")))))(re.++ (re.* (re.union (re.range "-" "-")(re.union (re.range "0" "9") (re.range "a" "z")))) (re.union (re.range "0" "9") (re.range "a" "z")))))))))(re.++ (re.range "." ".")(re.++ (re.union (str.to_re (str.++ "c" (str.++ "o" "")))(re.union (str.to_re (str.++ "m" (str.++ "e" "")))(re.union (str.to_re (str.++ "o" (str.++ "r" (str.++ "g" ""))))(re.union (str.to_re (str.++ "l" (str.++ "t" (str.++ "d" ""))))(re.union (str.to_re (str.++ "p" (str.++ "l" (str.++ "c" ""))))(re.union (str.to_re (str.++ "n" (str.++ "e" (str.++ "t" ""))))(re.union (str.to_re (str.++ "s" (str.++ "c" (str.++ "h" ""))))(re.union (str.to_re (str.++ "a" (str.++ "c" "")))(re.union (str.to_re (str.++ "m" (str.++ "o" (str.++ "d" ""))))(re.union (str.to_re (str.++ "n" (str.++ "h" (str.++ "s" ""))))(re.union (str.to_re (str.++ "p" (str.++ "o" (str.++ "l" (str.++ "i" (str.++ "c" (str.++ "e" ""))))))) (str.to_re (str.++ "g" (str.++ "o" (str.++ "v" "")))))))))))))))(re.++ (str.to_re (str.++ "." (str.++ "u" (str.++ "k" "")))) (str.to_re ""))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "F" (str.++ "R" (str.++ "\u{85}" (str.++ "9" (str.++ "0" (str.++ "5" (str.++ "1" (str.++ "4" (str.++ "3" (str.++ "7" (str.++ "8" (str.++ "5" (str.++ "7" (str.++ "8" "")))))))))))))))

(define-fun Witness2 () String (str.++ "T" (str.++ "F" (str.++ "1" (str.++ "9" (str.++ "2" (str.++ "3" (str.++ "8" (str.++ "0" (str.++ "7" (str.++ "9" (str.++ "9" ""))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.opt (str.to_re (str.++ "F" (str.++ "R" ""))))(re.++ (re.opt (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ ((_ re.loop 2 2) (re.union (re.range "0" "9")(re.union (re.range "A" "H")(re.union (re.range "J" "N") (re.range "P" "Z")))))(re.++ ((_ re.loop 9 9) (re.range "0" "9")) (str.to_re ""))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "9" (str.++ "3" (str.++ "t" (str.++ "0" (str.++ "\u{09}" (str.++ "2" (str.++ "4" (str.++ "8" (str.++ "\u{0c}" (str.++ "2" (str.++ "5" (str.++ "5" "")))))))))))))

(define-fun Witness2 () String (str.++ "2" (str.++ "4" (str.++ "9" (str.++ "\u{22}" (str.++ "5" (str.++ "-" (str.++ "4" (str.++ "2" (str.++ "\u{0e}" (str.++ "1" (str.++ "6" (str.++ "8" "")))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ ((_ re.loop 3 3) (re.++ (re.union (re.++ (re.opt (re.range "1" "9")) (re.range "0" "9"))(re.union (re.++ (re.range "1" "1")(re.++ (re.range "0" "9") (re.range "0" "9")))(re.union (re.++ (re.range "2" "2")(re.++ (re.range "0" "4") (re.range "0" "9"))) (re.++ (str.to_re (str.++ "2" (str.++ "5" ""))) (re.range "0" "5"))))) (re.union (re.range "\u{00}" "\u{09}") (re.range "\u{0b}" "\u{ff}"))))(re.++ (re.union (re.++ (re.opt (re.range "1" "9")) (re.range "0" "9"))(re.union (re.++ (re.range "1" "1")(re.++ (re.range "0" "9") (re.range "0" "9")))(re.union (re.++ (re.range "2" "2")(re.++ (re.range "0" "4") (re.range "0" "9"))) (re.++ (str.to_re (str.++ "2" (str.++ "5" ""))) (re.range "0" "5"))))) (str.to_re ""))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "9" (str.++ " " (str.++ "\u{09}" ""))))

(define-fun Witness2 () String (str.++ "3" (str.++ "." (str.++ "6" (str.++ "%" "")))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ ((_ re.loop 0 2) (re.range "0" "9"))(re.++ (re.opt (re.++ (re.opt (re.range "." ".")) (re.* (re.range "0" "9"))))(re.++ (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (re.opt (re.range "%" "%"))(re.++ (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))) (str.to_re ""))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String "")

(define-fun Witness2 () String "")

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.* (re.union (re.range "\u{00}" ";")(re.union (re.range "=" "=")(re.union (re.range "?" "]") (re.range "_" "\u{ff}"))))) (str.to_re "")))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "9" (str.++ "6" (str.++ "2" (str.++ "3" (str.++ "9" (str.++ "-" (str.++ "9" (str.++ "9" (str.++ "-" (str.++ "9" (str.++ "5" (str.++ "3" (str.++ "9" (str.++ "8" (str.++ "9" (str.++ "4" (str.++ "4" (str.++ "8" (str.++ "7" (str.++ "8" (str.++ "8" (str.++ "-" (str.++ "9" (str.++ "8" (str.++ "-" (str.++ "7" (str.++ "9" (str.++ "2" (str.++ "8" (str.++ "8" (str.++ "7" (str.++ "6" "")))))))))))))))))))))))))))))))))

(define-fun Witness2 () String "")

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.* (re.++ ((_ re.loop 5 5) (re.range "0" "9"))(re.++ (re.range "-" "-")(re.++ ((_ re.loop 2 2) (re.range "0" "9"))(re.++ (re.range "-" "-") ((_ re.loop 7 7) (re.range "0" "9"))))))) (str.to_re "")))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "Z" (str.++ "8" (str.++ "_" (str.++ "." (str.++ "." (str.++ "." (str.++ "s" ""))))))))

(define-fun Witness2 () String (str.++ "g" (str.++ " " (str.++ "\u{f8}" (str.++ "%" (str.++ " " (str.++ "c" (str.++ " " (str.++ "r" "")))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))(re.++ (re.+ (re.union (re.++ (re.* (re.range "A" "Z")) (re.++ (re.* (re.range "a" "z"))(re.++ (re.* (re.range "0" "9"))(re.++ (re.* (re.range "%" "%"))(re.++ (re.* (re.range "&" "&"))(re.++ (re.* (re.range "'" "'"))(re.++ (re.* (re.range "+" "+"))(re.++ (re.* (re.range "-" "-"))(re.++ (re.* (re.range "@" "@"))(re.++ (re.* (re.range "_" "_")) (re.* (re.range "." ".")))))))))))) (re.++ (re.range " " " ") (re.union (re.range "\u{00}" "\u{1f}") (re.range "!" "\u{ff}"))))) (str.to_re ""))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "1" (str.++ "8" (str.++ "2" (str.++ "5" (str.++ "3" ""))))))

(define-fun Witness2 () String (str.++ "0" ""))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.union (re.range "0" "0") (re.union (re.++ (re.range "1" "9") ((_ re.loop 0 3) (re.range "0" "9")))(re.union (re.++ (re.range "1" "5") ((_ re.loop 4 4) (re.range "0" "9"))) (re.++ (re.range "6" "6")(re.++ (re.range "0" "5")(re.++ (re.range "0" "5") (re.union (re.++ (re.range "0" "2") (re.range "0" "9")) (re.++ (re.range "3" "3") (re.range "0" "5"))))))))) (str.to_re "")))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "2" (str.++ "1" (str.++ ":" (str.++ "5" (str.++ "2" (str.++ "\u{0d}" (str.++ "P" (str.++ "M" "")))))))))

(define-fun Witness2 () String (str.++ "2" (str.++ "0" (str.++ ":" (str.++ "5" (str.++ "5" (str.++ "A" (str.++ "M" ""))))))))

(assert (= regexA (re.union (re.++ (str.to_re "")(re.++ (re.union (re.range "0" "9")(re.union (re.++ (re.range "0" "1") (re.range "0" "9")) (re.++ (re.range "2" "2") (re.range "0" "3"))))(re.++ (re.range ":" ":")(re.++ (re.++ (re.range "0" "5") (re.range "0" "9"))(re.++ (re.opt (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (re.union (str.to_re (str.++ "A" (str.++ "M" "")))(re.union (str.to_re (str.++ "P" (str.++ "M" "")))(re.union (str.to_re (str.++ "a" (str.++ "m" "")))(re.union (str.to_re (str.++ "p" (str.++ "m" "")))(re.union (str.to_re (str.++ "a" (str.++ "M" "")))(re.union (str.to_re (str.++ "A" (str.++ "m" "")))(re.union (str.to_re (str.++ "p" (str.++ "M" ""))) (re.++ (re.range "P" "P") ((_ re.loop 2 2) (re.range "m" "m")))))))))) (str.to_re ""))))))) (re.++ (str.to_re "")(re.++ (re.union (re.range "0" "9")(re.union (re.++ (re.range "1" "1") (re.range "0" "9")) (re.++ (re.range "2" "2") (re.range "0" "3"))))(re.++ (re.opt (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (re.union (str.to_re (str.++ "A" (str.++ "M" "")))(re.union (str.to_re (str.++ "P" (str.++ "M" "")))(re.union (str.to_re (str.++ "a" (str.++ "m" "")))(re.union (str.to_re (str.++ "p" (str.++ "m" "")))(re.union (str.to_re (str.++ "a" (str.++ "M" "")))(re.union (str.to_re (str.++ "A" (str.++ "m" "")))(re.union (str.to_re (str.++ "p" (str.++ "M" ""))) (re.++ (re.range "P" "P") ((_ re.loop 2 2) (re.range "m" "m")))))))))) (str.to_re ""))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "\u{85}" (str.++ "\u{a0}" (str.++ "\u{a0}" (str.++ "\u{09}" "")))))

(define-fun Witness2 () String (str.++ "\u{85}" (str.++ "\u{85}" (str.++ "\u{a0}" (str.++ "\u{0a}" (str.++ "\u{85}" (str.++ "9" "")))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.++ (re.* (re.range "0" "9"))(re.++ (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (re.opt (re.range "-" "-"))(re.++ (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))) (re.* (re.range "0" "9")))))) (str.to_re "")))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "h" (str.++ "t" (str.++ "t" (str.++ "p" (str.++ "s" (str.++ ":" (str.++ "/" (str.++ "/" (str.++ "8" (str.++ "." (str.++ "x" (str.++ "y" (str.++ "/" (str.++ "\u{ef}" "")))))))))))))))

(define-fun Witness2 () String (str.++ "h" (str.++ "t" (str.++ "t" (str.++ "p" (str.++ "s" (str.++ ":" (str.++ "/" (str.++ "/" (str.++ "-" (str.++ "." (str.++ "x" (str.++ "y" (str.++ ":" (str.++ "8" (str.++ "/" (str.++ "L" "")))))))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.union (str.to_re (str.++ "h" (str.++ "t" (str.++ "t" (str.++ "p" "")))))(re.union (str.to_re (str.++ "h" (str.++ "t" (str.++ "t" (str.++ "p" (str.++ "s" "")))))) (str.to_re (str.++ "f" (str.++ "t" (str.++ "p" ""))))))(re.++ (str.to_re (str.++ ":" (str.++ "/" (str.++ "/" ""))))(re.++ (re.+ (re.union (re.range "-" ".")(re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))))(re.++ (re.range "." ".")(re.++ ((_ re.loop 2 3) (re.union (re.range "A" "Z") (re.range "a" "z")))(re.++ (re.opt (re.++ (re.range ":" ":") (re.* (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z"))))))(re.++ (re.opt (re.range "/" "/"))(re.++ (re.* (re.union (re.range "#" "'")(re.union (re.range "+" "9")(re.union (re.range ";" ";")(re.union (re.range "=" "=")(re.union (re.range "?" "?")(re.union (re.range "A" "Z")(re.union (re.range "\u{5c}" "\u{5c}")(re.union (re.range "_" "_")(re.union (re.range "a" "z") (re.range "~" "~")))))))))))(re.++ (re.union (re.range "\u{00}" "\u{08}")(re.union (re.range "\u{0e}" "\u{1f}")(re.union (re.range "!" "'")(re.union (re.range "*" "+")(re.union (re.range "-" "-")(re.union (re.range "/" "\u{84}")(re.union (re.range "\u{86}" "\u{9f}") (re.range "\u{a1}" "\u{ff}")))))))) (str.to_re "")))))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "+" (str.++ "6" (str.++ "4" (str.++ "(" (str.++ "8" (str.++ "0" (str.++ "0" (str.++ ")" (str.++ " " (str.++ "5" (str.++ "7" (str.++ "6" (str.++ "3" (str.++ "9" "")))))))))))))))

(define-fun Witness2 () String (str.++ "6" (str.++ "4" (str.++ "\u{a0}" (str.++ "\u{09}" (str.++ "8" (str.++ "0" (str.++ "0" (str.++ "." (str.++ "9" (str.++ "8" (str.++ "4" (str.++ "1" (str.++ "9" (str.++ "8" (str.++ "5" (str.++ "9" "")))))))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.union (re.++ (re.union (re.++ (re.opt (re.range "+" "+"))(re.++ (str.to_re (str.++ "6" (str.++ "4" "")))(re.++ (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (re.opt (re.range "-" ".")) (re.range "3" "9"))))) (re.++ (re.opt (re.range "(" "("))(re.++ (re.range "0" "0")(re.++ (re.range "3" "9") (re.opt (re.range ")" ")"))))))(re.++ (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (re.opt (re.range "-" "."))(re.++ ((_ re.loop 3 3) (re.range "0" "9"))(re.++ (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (re.opt (re.range "-" ".")) ((_ re.loop 4 4) (re.range "0" "9"))))))))(re.union (re.++ (re.union (re.++ (re.opt (re.range "+" "+"))(re.++ (str.to_re (str.++ "6" (str.++ "4" "")))(re.++ (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (re.opt (re.union (re.range "(" "(") (re.range "-" ".")))(re.++ (re.range "2" "2")(re.++ (re.range "0" "9") (re.opt (re.union (re.range ")" ")") (re.range "-" "."))))))))) (re.++ (re.opt (re.range "(" "("))(re.++ (str.to_re (str.++ "0" (str.++ "2" "")))(re.++ (re.range "0" "9") (re.opt (re.range ")" ")"))))))(re.++ (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (re.opt (re.range "-" "."))(re.++ ((_ re.loop 3 3) (re.range "0" "9"))(re.++ (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (re.opt (re.range "-" ".")) ((_ re.loop 3 5) (re.range "0" "9")))))))) (re.++ (re.union (re.++ (re.opt (re.range "+" "+"))(re.++ (str.to_re (str.++ "6" (str.++ "4" "")))(re.++ (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (re.opt (re.range "-" "."))(re.++ (re.opt (re.union (re.range "(" "(") (re.range "-" ".")))(re.++ (str.to_re (str.++ "8" (str.++ "0" (str.++ "0" "")))) (re.opt (re.union (re.range ")" ")") (re.range "-" "."))))))))) (re.++ (re.opt (re.union (re.range "(" "(") (re.range "-" ".")))(re.++ (str.to_re (str.++ "0" (str.++ "8" (str.++ "0" (str.++ "0" ""))))) (re.opt (re.union (re.range ")" ")") (re.range "-" "."))))))(re.++ (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (re.opt (re.range "-" "."))(re.++ ((_ re.loop 3 3) (re.range "0" "9"))(re.++ (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (re.opt (re.range "-" ".")) (re.union ((_ re.loop 2 2) (re.range "0" "9")) ((_ re.loop 5 5) (re.range "0" "9"))))))))))) (str.to_re "")))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "6" (str.++ "2" (str.++ "8" (str.++ "0" "")))))

(define-fun Witness2 () String (str.++ "2" (str.++ "8" "")))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.range "1" "9")(re.++ (re.* (re.range "0" "9"))(re.++ (re.opt (re.range "." "."))(re.++ (re.* (re.range "0" "0")) (str.to_re ""))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "9" (str.++ "0" (str.++ "\u{b0}" (str.++ "'" (str.++ " " (str.++ "'" (str.++ "2" (str.++ "8" (str.++ "." (str.++ "8" (str.++ "\u{b4}" (str.++ "'" (str.++ " " (str.++ "'" (str.++ "N" ""))))))))))))))))

(define-fun Witness2 () String (str.++ "9" (str.++ "0" (str.++ "\u{b0}" (str.++ "'" (str.++ " " (str.++ "'" (str.++ "7" (str.++ "1" (str.++ "." (str.++ "9" (str.++ "\u{b4}" (str.++ "'" (str.++ " " (str.++ "'" (str.++ "S" ""))))))))))))))))

(assert (= regexA (re.++ (re.union (re.++ (re.range "0" "8") (re.range "0" "9")) (str.to_re (str.++ "9" (str.++ "0" ""))))(re.++ (str.to_re (str.++ "\u{b0}" (str.++ "'" (str.++ " " (str.++ "'" "")))))(re.++ (re.range "0" "9")(re.++ (re.range "0" "9")(re.++ (re.range "." ".")(re.++ (re.range "0" "9")(re.++ (str.to_re (str.++ "\u{b4}" (str.++ "'" (str.++ " " (str.++ "'" ""))))) (re.union (re.range "N" "N") (re.range "S" "S")))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "n" (str.++ "." (str.++ "+" (str.++ "@" (str.++ "[" (str.++ "1" (str.++ "0" (str.++ "6" (str.++ "." (str.++ "[" (str.++ "2" (str.++ "5" (str.++ "5" (str.++ "." (str.++ "[" (str.++ "9" (str.++ "4" (str.++ "." (str.++ "2" (str.++ "1" (str.++ "1" (str.++ "]" "")))))))))))))))))))))))

(define-fun Witness2 () String (str.++ ";" (str.++ "@" (str.++ "[" (str.++ "2" (str.++ "5" (str.++ "5" (str.++ "." (str.++ "2" (str.++ "5" (str.++ "5" (str.++ "." (str.++ "[" (str.++ "2" (str.++ "4" (str.++ "7" (str.++ "." (str.++ "9" (str.++ "4" "")))))))))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.+ (re.union (re.range "&" "'")(re.union (re.range "+" "+")(re.union (re.range "-" "-")(re.union (re.range "/" "9")(re.union (re.range ";" ";")(re.union (re.range "A" "Z")(re.union (re.range "^" "_") (re.range "a" "z")))))))))(re.++ (re.* (re.++ (re.range "." ".") (re.+ (re.union (re.range "&" "'")(re.union (re.range "+" "+")(re.union (re.range "-" "-")(re.union (re.range "/" "9")(re.union (re.range ";" ";")(re.union (re.range "A" "Z")(re.union (re.range "^" "_") (re.range "a" "z")))))))))))(re.++ (re.range "@" "@")(re.++ (re.union (re.++ ((_ re.loop 3 3) (re.++ (re.opt (re.range "[" "["))(re.++ (re.union (re.++ (str.to_re (str.++ "2" (str.++ "5" ""))) (re.range "0" "5"))(re.union (re.++ (re.range "2" "2")(re.++ (re.range "0" "4") (re.range "0" "9"))) (re.++ (re.opt (re.range "0" "1"))(re.++ (re.range "0" "9") (re.opt (re.range "0" "9")))))) (re.range "." "."))))(re.++ (re.union (re.++ (str.to_re (str.++ "2" (str.++ "5" ""))) (re.range "0" "5"))(re.union (re.++ (re.range "2" "2")(re.++ (re.range "0" "4") (re.range "0" "9"))) (re.++ (re.opt (re.range "0" "1"))(re.++ (re.range "0" "9") (re.opt (re.range "0" "9")))))) (re.opt (re.range "]" "]")))) (re.++ (re.+ (re.++ (re.+ (re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z"))))) (re.range "." ".")))(re.++ (re.++ ((_ re.loop 2 2) (re.union (re.range "A" "Z") (re.range "a" "z"))) (re.* (re.union (re.range "A" "Z") (re.range "a" "z")))) (re.opt (re.range "." "."))))) (str.to_re ""))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "6" (str.++ "5" (str.++ "9" (str.++ "9" (str.++ "2" (str.++ "8" (str.++ "8" (str.++ "9" "")))))))))

(define-fun Witness2 () String (str.++ "A" (str.++ "T" (str.++ "8" (str.++ "3" (str.++ "1" (str.++ "8" (str.++ "7" (str.++ "4" (str.++ "4" (str.++ "6" "")))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.opt (str.to_re (str.++ "A" (str.++ "T" ""))))(re.++ (re.opt (re.range "U" "U"))(re.++ ((_ re.loop 8 8) (re.range "0" "9")) (str.to_re "")))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "X" (str.++ "1" (str.++ "9" (str.++ "8" (str.++ "9" (str.++ "4" "")))))))

(define-fun Witness2 () String (str.++ "^" (str.++ "9" (str.++ "9" (str.++ "7" (str.++ "8" (str.++ "9" "")))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.range "S" "s")(re.++ (re.opt (re.union (re.range " " " ") (re.range "-" "-")))(re.++ (re.range "1" "9")(re.++ ((_ re.loop 2 2) (re.range "0" "9"))(re.++ (re.opt (re.union (re.range " " " ") (re.range "-" "-")))(re.++ ((_ re.loop 2 2) (re.range "0" "9")) (str.to_re ""))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "z" (str.++ "9" (str.++ "6" (str.++ "9" (str.++ "2" (str.++ "9" (str.++ "7" (str.++ "7" (str.++ "8" (str.++ "r" "")))))))))))

(define-fun Witness2 () String (str.++ "P" (str.++ "6" (str.++ "7" (str.++ "0" (str.++ "0" (str.++ "1" (str.++ "8" (str.++ "4" (str.++ "3" (str.++ "V" "")))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.opt (re.range "A" "z"))(re.++ ((_ re.loop 8 8) (re.range "0" "9"))(re.++ (re.range "A" "z") (str.to_re "")))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "f" (str.++ "t" (str.++ "p" (str.++ ":" (str.++ "/" (str.++ "/" "")))))))

(define-fun Witness2 () String (str.++ "h" (str.++ "t" (str.++ "t" (str.++ "p" (str.++ ":" (str.++ "/" (str.++ "/" (str.++ "y" (str.++ ":" (str.++ "@" (str.++ "8" (str.++ "e" (str.++ "." (str.++ "2" (str.++ "4" (str.++ "9" (str.++ "." (str.++ "2" (str.++ "1" (str.++ "9" (str.++ "." (str.++ "1" (str.++ "8" (str.++ "." (str.++ "2" (str.++ "4" (str.++ "3" (str.++ ":" (str.++ "8" (str.++ "8" (str.++ "8" (str.++ "8" "")))))))))))))))))))))))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.opt (re.++ (re.union (str.to_re (str.++ "h" (str.++ "t" (str.++ "t" (str.++ "p" "")))))(re.union (str.to_re (str.++ "h" (str.++ "t" (str.++ "t" (str.++ "p" (str.++ "s" ""))))))(re.union (str.to_re (str.++ "f" (str.++ "t" (str.++ "p" ""))))(re.union (str.to_re (str.++ "t" (str.++ "e" (str.++ "l" (str.++ "n" (str.++ "e" (str.++ "t" "")))))))(re.union (str.to_re (str.++ "g" (str.++ "o" (str.++ "p" (str.++ "h" (str.++ "e" (str.++ "r" "")))))))(re.union (str.to_re (str.++ "m" (str.++ "s" (str.++ "-" (str.++ "h" (str.++ "e" (str.++ "l" (str.++ "p" ""))))))))(re.union (str.to_re (str.++ "f" (str.++ "i" (str.++ "l" (str.++ "e" ""))))) (str.to_re (str.++ "n" (str.++ "o" (str.++ "t" (str.++ "e" (str.++ "s" ""))))))))))))) (str.to_re (str.++ ":" (str.++ "/" (str.++ "/" ""))))))(re.++ (re.opt (re.++ (re.range "a" "z")(re.++ (re.* (re.union (re.range "!" "!")(re.union (re.range "$" ".")(re.union (re.range "0" "9")(re.union (re.range ";" ";")(re.union (re.range "=" "=")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "~" "~")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))))))))(re.++ (re.range ":" ":")(re.++ (re.* (re.union (re.range "\u{00}" "\u{09}") (re.range "\u{0b}" "\u{ff}"))) (re.range "@" "@"))))))(re.++ (re.opt (re.++ (re.* (re.++ (re.union (re.range "0" "9") (re.range "a" "z"))(re.++ (re.* (re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))))(re.++ (re.* (re.union (re.range "0" "9") (re.range "a" "z"))) (re.range "." ".")))))(re.++ (re.union (re.++ (re.union (re.range "0" "9") (re.range "a" "z"))(re.++ (re.* (re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))))(re.++ (re.* (re.union (re.range "0" "9") (re.range "a" "z"))) (re.opt (re.++ (re.range "." ".") (re.+ (re.union (re.range "0" "9") (re.range "a" "z")))))))) (re.++ ((_ re.loop 3 3) (re.++ (re.union (re.++ (str.to_re (str.++ "2" (str.++ "5" ""))) (re.range "0" "5"))(re.union (re.++ (re.range "2" "2")(re.++ (re.range "0" "4") (re.range "0" "9"))) (re.++ (re.opt (re.range "0" "1"))(re.++ (re.range "0" "9") (re.opt (re.range "0" "9")))))) (re.range "." "."))) (re.union (re.++ (str.to_re (str.++ "2" (str.++ "5" ""))) (re.range "0" "5"))(re.union (re.++ (re.range "2" "2")(re.++ (re.range "0" "4") (re.range "0" "9"))) (re.++ (re.opt (re.range "0" "1"))(re.++ (re.range "0" "9") (re.opt (re.range "0" "9")))))))) (re.opt (re.++ (re.range ":" ":") (re.+ (re.range "0" "9")))))))(re.++ (re.opt (re.++ (re.* (re.++ (re.range "/" "/") (re.+ (re.union (re.union (re.range "!" "!")(re.union (re.range "$" "$")(re.union (re.range "(" ")")(re.union (re.range "+" "+")(re.union (re.range "-" ".")(re.union (re.range "0" "9")(re.union (re.range ";" ";")(re.union (re.range "=" "=")(re.union (re.range "A" "[")(re.union (re.range "]" "~")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))))))) (re.++ (re.range "%" "%")(re.++ (re.range "0" "9") (re.range "0" "9")))))))(re.++ (re.range "/" "/")(re.++ (re.* (re.union (re.union (re.range "!" "!")(re.union (re.range "$" "$")(re.union (re.range "(" ")")(re.union (re.range "+" "+")(re.union (re.range "-" ".")(re.union (re.range "0" "9")(re.union (re.range ";" ";")(re.union (re.range "=" "=")(re.union (re.range "A" "[")(re.union (re.range "]" "~")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))))))) (re.++ (re.range "%" "%")(re.++ (re.range "0" "9") (re.range "0" "9")))))(re.++ (re.opt (re.++ (re.range "?" "?") (re.+ (re.union (re.range "\u{00}" "\u{22}") (re.range "$" "\u{ff}"))))) (re.opt (re.++ (re.range "#" "#")(re.++ (re.union (re.range "0" "9") (re.range "a" "z")) (re.* (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))))))))))) (str.to_re ""))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "1" ""))

(define-fun Witness2 () String (str.++ "1" (str.++ "1" (str.++ "1" (str.++ "1" (str.++ "9" (str.++ "9" (str.++ "." (str.++ "4" "")))))))))

(assert (= regexA (re.union (re.++ (str.to_re "")(re.++ (re.range "1" "1") (str.to_re ""))) (re.++ (str.to_re "")(re.++ (re.+ (re.range "1" "1"))(re.++ (re.* (re.range "0" "9"))(re.++ (re.+ (re.range "." "."))(re.++ (re.* (re.range "0" "9"))(re.++ (re.range "1" "5") (str.to_re ""))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "0" (str.++ "8" (str.++ "0" (str.++ "8" (str.++ "8" (str.++ "8" (str.++ "1" (str.++ "2" (str.++ "8" (str.++ "6" "")))))))))))

(define-fun Witness2 () String (str.++ "+" (str.++ "3" (str.++ "1" (str.++ " " (str.++ "0" (str.++ "9" (str.++ "7" (str.++ "1" (str.++ "8" (str.++ "9" (str.++ "9" (str.++ "6" (str.++ "4" (str.++ "8" "")))))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.union (re.++ (re.union (str.to_re (str.++ "+" (str.++ "3" (str.++ "1" "")))) (str.to_re (str.++ "0" (str.++ "0" (str.++ "3" (str.++ "1" ""))))))(re.++ (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))(re.++ (str.to_re (str.++ "(" (str.++ "0" (str.++ ")" "")))) ((_ re.loop 9 9) (re.range "0" "9")))))(re.union (re.++ (re.union (str.to_re (str.++ "+" (str.++ "3" (str.++ "1" "")))) (str.to_re (str.++ "0" (str.++ "0" (str.++ "3" (str.++ "1" ""))))))(re.++ (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))(re.++ (re.range "0" "0") ((_ re.loop 9 9) (re.range "0" "9"))))) (re.++ (re.range "0" "0") ((_ re.loop 9 9) (re.range "0" "9"))))) (str.to_re "")))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "5" (str.++ "'" (str.++ "1" (str.++ "1" (str.++ "&" (str.++ "q" (str.++ "u" (str.++ "o" (str.++ "t" (str.++ ";" "")))))))))))

(define-fun Witness2 () String (str.++ "6" (str.++ "4" (str.++ "'" (str.++ "9" (str.++ "\u{af}" (str.++ "1" (str.++ "1" (str.++ "&" (str.++ "q" (str.++ "u" (str.++ "o" (str.++ "t" (str.++ ";" ""))))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.opt (re.range "0" "9"))(re.++ (re.range "0" "9")(re.++ (re.range "'" "'")(re.++ (re.opt (re.union (re.range "0" "9") (re.++ (re.range "1" "1") (re.range "0" "1"))))(re.++ (re.opt (re.union (re.range "\u{00}" "\u{09}") (re.range "\u{0b}" "\u{ff}")))(re.++ (re.union (re.range "0" "9") (re.++ (re.range "1" "1") (re.range "0" "1")))(re.++ (str.to_re (str.++ "&" (str.++ "q" (str.++ "u" (str.++ "o" (str.++ "t" (str.++ ";" ""))))))) (str.to_re "")))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "1" (str.++ "2" (str.++ "-" (str.++ "0" (str.++ "2" (str.++ "-" (str.++ "8" (str.++ "4" (str.++ "8" (str.++ "0" "")))))))))))

(define-fun Witness2 () String (str.++ "0" (str.++ "8" (str.++ "-" (str.++ "0" (str.++ "2" (str.++ "-" (str.++ "5" (str.++ "0" (str.++ "7" (str.++ "6" "")))))))))))

(assert (= regexA (re.union (re.++ (re.union (re.union (re.++ (re.range "0" "0") (re.range "1" "9")) (re.++ (re.range "1" "2") (re.range "0" "9"))) (re.++ (re.range "3" "3") (re.range "0" "1")))(re.++ (re.union (re.range "-" "-") (re.range "/" "/"))(re.++ (re.union (re.++ (re.range "0" "0") (re.union (re.range "1" "1")(re.union (re.range "3" "3")(re.union (re.range "5" "5") (re.range "7" "8"))))) (re.++ (re.range "1" "1") (re.union (re.range "0" "0") (re.range "2" "2"))))(re.++ (re.union (re.range "-" "-") (re.range "/" "/"))(re.++ (re.range "1" "9")(re.++ (re.range "0" "9")(re.++ (re.range "0" "9") (re.range "0" "9"))))))))(re.union (re.++ (re.union (re.union (re.++ (re.range "0" "0") (re.range "1" "9")) (re.++ (re.range "1" "2") (re.range "0" "9"))) (str.to_re (str.++ "3" (str.++ "0" ""))))(re.++ (re.union (re.range "-" "-") (re.range "/" "/"))(re.++ (re.union (re.++ (re.range "0" "0") (re.union (re.range "1" "1") (re.range "3" "9"))) (re.++ (re.range "1" "1") (re.range "0" "2")))(re.++ (re.union (re.range "-" "-") (re.range "/" "/"))(re.++ (re.range "1" "9")(re.++ (re.range "0" "9")(re.++ (re.range "0" "9") (re.range "0" "9"))))))))(re.union (re.++ (re.union (re.++ (re.range "0" "0") (re.range "1" "9")) (re.++ (re.range "1" "2") (re.range "0" "9")))(re.++ (re.union (re.range "-" "-") (re.range "/" "/"))(re.++ (str.to_re (str.++ "0" (str.++ "2" "")))(re.++ (re.union (re.range "-" "-") (re.range "/" "/"))(re.++ (re.range "1" "9")(re.++ (re.range "0" "9") (re.union (re.++ (re.union (re.range "0" "0")(re.union (re.range "2" "2")(re.union (re.range "4" "4")(re.union (re.range "6" "6") (re.range "8" "8"))))) (re.union (re.range "0" "0")(re.union (re.range "4" "4") (re.range "8" "8")))) (re.++ (re.union (re.range "1" "1")(re.union (re.range "3" "3")(re.union (re.range "5" "5")(re.union (re.range "7" "7") (re.range "9" "9"))))) (re.union (re.range "2" "2") (re.range "6" "6")))))))))) (re.++ (re.union (re.++ (re.range "0" "0") (re.range "1" "9")) (re.++ (re.range "1" "2") (re.range "0" "8")))(re.++ (re.union (re.range "-" "-") (re.range "/" "/"))(re.++ (str.to_re (str.++ "0" (str.++ "2" "")))(re.++ (re.union (re.range "-" "-") (re.range "/" "/"))(re.++ (re.range "1" "9")(re.++ (re.range "0" "9")(re.++ (re.range "0" "9") (re.range "0" "9")))))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "9" (str.++ "5" (str.++ "6" (str.++ "8" (str.++ "9" ""))))))

(define-fun Witness2 () String (str.++ "9" (str.++ "5" (str.++ "8" (str.++ "0" (str.++ "9" (str.++ "9" (str.++ "8" (str.++ "9" "")))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ ((_ re.loop 5 5) (re.range "0" "9"))(re.++ (re.opt ((_ re.loop 3 3) (re.range "0" "9"))) (str.to_re ""))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "2" (str.++ "." (str.++ "0" ""))))

(define-fun Witness2 () String (str.++ "2" (str.++ "." (str.++ "0" ""))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.union (re.++ (re.range "0" "1")(re.++ (re.range "." ".") (re.range "0" "9")))(re.union (re.++ (re.range "0" "1")(re.++ (re.range "," ",") (re.range "0" "9")))(re.union (str.to_re (str.++ "2" (str.++ "." (str.++ "0" "")))) (str.to_re (str.++ "2" (str.++ "," (str.++ "0" ""))))))) (str.to_re "")))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String "")

(define-fun Witness2 () String (str.++ "0" (str.++ "8" "")))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.opt (re.union (re.++ (re.opt (re.range "0" "0")) (re.range "1" "9")) (re.++ (re.range "1" "1") (re.range "0" "1"))))(re.++ (re.union (re.opt (re.++ (re.range "." ".") ((_ re.loop 0 2) (re.range "0" "9")))) (re.++ (re.range "0" "0") (re.++ (re.range "." ".") ((_ re.loop 0 2) (re.range "0" "9"))))) (str.to_re ""))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "4" (str.++ "1" (str.++ "5" (str.++ "0" (str.++ "0" (str.++ "8" (str.++ "4" (str.++ "8" (str.++ "3" (str.++ "8" "")))))))))))

(define-fun Witness2 () String (str.++ "8" (str.++ "9" (str.++ "8" ""))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.union (re.++ (str.to_re (str.++ "4" (str.++ "2" (str.++ "9" (str.++ "4" (str.++ "9" (str.++ "6" (str.++ "7" (str.++ "2" (str.++ "9" "")))))))))) (re.range "0" "6"))(re.union (re.++ (str.to_re (str.++ "4" (str.++ "2" (str.++ "9" (str.++ "4" (str.++ "9" (str.++ "6" (str.++ "7" (str.++ "2" "")))))))))(re.++ (re.range "0" "8") (re.range "0" "9")))(re.union (re.++ (str.to_re (str.++ "4" (str.++ "2" (str.++ "9" (str.++ "4" (str.++ "9" (str.++ "6" (str.++ "7" ""))))))))(re.++ (re.range "0" "1") ((_ re.loop 2 2) (re.range "0" "9"))))(re.union (re.++ (str.to_re (str.++ "4" (str.++ "2" (str.++ "9" (str.++ "4" (str.++ "9" (str.++ "6" "")))))))(re.++ (re.range "0" "6") ((_ re.loop 3 3) (re.range "0" "9"))))(re.union (re.++ (str.to_re (str.++ "4" (str.++ "2" (str.++ "9" (str.++ "4" (str.++ "9" ""))))))(re.++ (re.range "0" "5") ((_ re.loop 4 4) (re.range "0" "9"))))(re.union (re.++ (str.to_re (str.++ "4" (str.++ "2" (str.++ "9" (str.++ "4" "")))))(re.++ (re.range "0" "8") ((_ re.loop 5 5) (re.range "0" "9"))))(re.union (re.++ (str.to_re (str.++ "4" (str.++ "2" (str.++ "9" ""))))(re.++ (re.range "0" "3") ((_ re.loop 6 6) (re.range "0" "9"))))(re.union (re.++ (str.to_re (str.++ "4" (str.++ "2" "")))(re.++ (re.range "0" "8") ((_ re.loop 7 7) (re.range "0" "9"))))(re.union (re.++ (re.range "4" "4")(re.++ (re.range "0" "1") ((_ re.loop 8 8) (re.range "0" "9"))))(re.union (re.++ (re.range "1" "3") ((_ re.loop 9 9) (re.range "0" "9")))(re.union (re.++ (re.range "1" "9") ((_ re.loop 8 8) (re.range "0" "9")))(re.union (re.++ (re.range "1" "9") ((_ re.loop 7 7) (re.range "0" "9")))(re.union (re.++ (re.range "1" "9") ((_ re.loop 6 6) (re.range "0" "9")))(re.union (re.++ (re.range "1" "9") ((_ re.loop 5 5) (re.range "0" "9")))(re.union (re.++ (re.range "1" "9") ((_ re.loop 4 4) (re.range "0" "9")))(re.union (re.++ (re.range "1" "9") ((_ re.loop 3 3) (re.range "0" "9")))(re.union (re.++ (re.range "1" "9") ((_ re.loop 2 2) (re.range "0" "9")))(re.union (re.++ (re.range "1" "9") (re.range "0" "9")) (re.range "0" "9"))))))))))))))))))) (str.to_re "")))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "." (str.++ "9" (str.++ "1" ""))))

(define-fun Witness2 () String (str.++ "7" (str.++ "," (str.++ "." ""))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.opt (re.union (re.range "+" "+") (re.range "-" "-")))(re.++ (re.opt (re.++ ((_ re.loop 1 3) (re.range "0" "9")) (re.opt (re.range "," ","))))(re.++ (re.* (re.++ ((_ re.loop 3 3) (re.range "0" "9")) (re.opt (re.range "," ","))))(re.++ (re.opt (re.range "." "."))(re.++ (re.* (re.range "0" "9")) (str.to_re "")))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "Q" (str.++ "_" (str.++ "V" (str.++ "z" (str.++ "@" (str.++ "0" (str.++ "." (str.++ "9" (str.++ "." (str.++ "Z" (str.++ "c" (str.++ "y" "")))))))))))))

(define-fun Witness2 () String (str.++ "y" (str.++ "Z" (str.++ "1" (str.++ "4" (str.++ "3" (str.++ "1" (str.++ "6" (str.++ "Z" (str.++ "8" (str.++ "@" (str.++ "9" (str.++ "8" (str.++ "4" (str.++ "." (str.++ "w" (str.++ "Z" (str.++ "Z" ""))))))))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z"))))(re.++ (re.* (re.++ (re.opt (re.union (re.range "-" ".") (re.range "_" "_"))) (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z"))))))(re.++ (re.range "@" "@") (re.union (re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z"))))(re.++ (re.* (re.++ (re.opt (re.union (re.range "-" ".") (re.range "_" "_"))) (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z"))))))(re.++ (re.range "." ".") (re.++ ((_ re.loop 2 2) (re.union (re.range "A" "Z") (re.range "a" "z"))) (re.* (re.union (re.range "A" "Z") (re.range "a" "z"))))))) (re.++ ((_ re.loop 3 3) (re.++ (re.+ (re.range "0" "9")) (re.range "." "."))) (re.+ (re.range "0" "9"))))))) (str.to_re "")))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "0" (str.++ "\u{a8}" (str.++ "3" ""))))

(define-fun Witness2 () String (str.++ "0" (str.++ "\u{99}" (str.++ "0" (str.++ "0" (str.++ "7" ""))))))

(assert (= regexA (re.union (re.++ (str.to_re "")(re.++ (re.opt (re.range "0" "0"))(re.++ (re.union (re.range "\u{00}" "\u{09}") (re.range "\u{0b}" "\u{ff}"))(re.++ ((_ re.loop 1 2) (re.range "0" "0"))(re.++ (re.range "1" "9") (str.to_re ""))))))(re.union (re.++ (str.to_re "")(re.++ (re.opt (re.range "0" "0"))(re.++ (re.union (re.range "\u{00}" "\u{09}") (re.range "\u{0b}" "\u{ff}"))(re.++ (re.range "1" "9")(re.++ ((_ re.loop 0 2) (re.range "0" "9")) (str.to_re ""))))))(re.union (re.++ (str.to_re "")(re.++ (re.union (re.range "1" "1") (re.++ (re.range "1" "1")(re.++ (re.union (re.range "\u{00}" "\u{09}") (re.range "\u{0b}" "\u{ff}")) ((_ re.loop 1 3) (re.range "0" "0"))))) (str.to_re ""))) (re.++ (str.to_re "")(re.++ (re.opt (re.range "0" "0"))(re.++ (re.union (re.range "\u{00}" "\u{09}") (re.range "\u{0b}" "\u{ff}"))(re.++ (re.range "0" "0")(re.++ (re.range "1" "9")(re.++ (re.range "0" "9") (str.to_re ""))))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "9" (str.++ "9" (str.++ "5" (str.++ "4" (str.++ "-" (str.++ "0" (str.++ "8" (str.++ "-" (str.++ "0" (str.++ "1" "")))))))))))

(define-fun Witness2 () String (str.++ "9" (str.++ "0" (str.++ "8" (str.++ "2" (str.++ "-" (str.++ "0" (str.++ "4" (str.++ "-" (str.++ "0" (str.++ "8" "")))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ ((_ re.loop 4 4) (re.range "0" "9"))(re.++ (re.range "-" "-")(re.++ (re.union (re.++ (re.union (re.++ (re.range "0" "0") (re.union (re.range "1" "1")(re.union (re.range "3" "3")(re.union (re.range "5" "5") (re.range "7" "8"))))) (re.union (str.to_re (str.++ "1" (str.++ "0" ""))) (str.to_re (str.++ "1" (str.++ "2" "")))))(re.++ (re.range "-" "-") (re.union (re.++ (re.range "0" "0") (re.range "1" "9"))(re.union (re.++ (re.range "1" "2") (re.range "0" "9")) (re.++ (re.range "3" "3") (re.range "0" "1"))))))(re.union (re.++ (str.to_re (str.++ "0" (str.++ "2" (str.++ "-" "")))) (re.union (re.++ (re.range "0" "0") (re.range "1" "9")) (re.++ (re.range "1" "2") (re.range "0" "9")))) (re.++ (re.union (re.++ (re.range "0" "0") (re.union (re.range "4" "4")(re.union (re.range "6" "6") (re.range "9" "9")))) (str.to_re (str.++ "1" (str.++ "1" ""))))(re.++ (re.range "-" "-") (re.union (re.++ (re.range "0" "0") (re.range "1" "9"))(re.union (re.++ (re.range "1" "2") (re.range "0" "9")) (str.to_re (str.++ "3" (str.++ "0" ""))))))))) (str.to_re "")))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "+" (str.++ "4" (str.++ "4" (str.++ "6" (str.++ "6" (str.++ "4" (str.++ "8" (str.++ "\u{09}" (str.++ "5" (str.++ "9" (str.++ "8" (str.++ "9" (str.++ "5" (str.++ "1" (str.++ "#" (str.++ "7" (str.++ "7" (str.++ "6" (str.++ "8" ""))))))))))))))))))))

(define-fun Witness2 () String (str.++ "(" (str.++ "0" (str.++ "8" (str.++ "7" (str.++ " " (str.++ "9" (str.++ "9" (str.++ "9" (str.++ "8" (str.++ "\u{85}" (str.++ "1" (str.++ "3" (str.++ "2" (str.++ "6" "")))))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.union (re.++ (re.union (re.++ (str.to_re (str.++ "+" (str.++ "4" (str.++ "4" ""))))(re.++ (re.opt (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))) ((_ re.loop 4 4) (re.range "0" "9")))) (re.++ (re.opt (re.range "(" "("))(re.++ (re.range "0" "0")(re.++ ((_ re.loop 4 4) (re.range "0" "9")) (re.opt (re.range ")" ")"))))))(re.++ (re.opt (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ ((_ re.loop 3 3) (re.range "0" "9"))(re.++ (re.opt (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))) ((_ re.loop 3 3) (re.range "0" "9"))))))(re.union (re.++ (re.union (re.++ (str.to_re (str.++ "+" (str.++ "4" (str.++ "4" ""))))(re.++ (re.opt (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))) ((_ re.loop 3 3) (re.range "0" "9")))) (re.++ (re.opt (re.range "(" "("))(re.++ (re.range "0" "0")(re.++ ((_ re.loop 3 3) (re.range "0" "9")) (re.opt (re.range ")" ")"))))))(re.++ (re.opt (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ ((_ re.loop 3 3) (re.range "0" "9"))(re.++ (re.opt (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))) ((_ re.loop 4 4) (re.range "0" "9")))))) (re.++ (re.union (re.++ (str.to_re (str.++ "+" (str.++ "4" (str.++ "4" ""))))(re.++ (re.opt (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))) ((_ re.loop 2 2) (re.range "0" "9")))) (re.++ (re.opt (re.range "(" "("))(re.++ (re.range "0" "0")(re.++ ((_ re.loop 2 2) (re.range "0" "9")) (re.opt (re.range ")" ")"))))))(re.++ (re.opt (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ ((_ re.loop 4 4) (re.range "0" "9"))(re.++ (re.opt (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))) ((_ re.loop 4 4) (re.range "0" "9"))))))))(re.++ (re.opt (re.++ (re.opt (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (re.range "#" "#") (re.union ((_ re.loop 4 4) (re.range "0" "9")) ((_ re.loop 3 3) (re.range "0" "9")))))) (str.to_re ""))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "6" (str.++ "2" (str.++ "4" (str.++ "5" (str.++ "8" ""))))))

(define-fun Witness2 () String (str.++ "2" (str.++ "9" (str.++ "8" (str.++ "0" (str.++ "7" ""))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.union ((_ re.loop 2 2) (re.range "1" "9"))(re.union (re.++ (re.range "0" "9") (re.range "1" "9")) (re.++ (re.range "1" "9") (re.range "0" "9"))))(re.++ ((_ re.loop 3 3) (re.range "0" "9")) (str.to_re ""))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "9" (str.++ "7" (str.++ "8" (str.++ "." (str.++ "3" (str.++ "." (str.++ "4" (str.++ "0" (str.++ "0" (str.++ "2" (str.++ "8" (str.++ "." (str.++ "8" (str.++ "8" "")))))))))))))))

(define-fun Witness2 () String (str.++ "2" (str.++ "8" (str.++ "9" (str.++ "." (str.++ "9" (str.++ "." (str.++ "8" (str.++ "0" (str.++ "8" (str.++ "3" (str.++ "5" (str.++ "." (str.++ "8" ""))))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.+ (re.range "0" "9"))(re.++ (re.range "." ".")(re.++ (re.range "0" "9")(re.++ (re.range "." ".")(re.++ (re.range "0" "9")(re.++ (re.range "0" "1")(re.++ (re.range "0" "9")(re.++ (re.range "0" "3")(re.++ (re.range "0" "9")(re.++ (re.range "." ".")(re.++ (re.range "1" "9")(re.++ (re.* (re.range "0" "9")) (str.to_re ""))))))))))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "5" (str.++ "8" (str.++ "6" (str.++ "0" "")))))

(define-fun Witness2 () String (str.++ "3" (str.++ "9" (str.++ "4" (str.++ "0" "")))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.range "2" "7")(re.++ ((_ re.loop 3 3) (re.range "0" "9")) (str.to_re ""))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "0" (str.++ "5" (str.++ "7" (str.++ "9" (str.++ "7" (str.++ "9" (str.++ "7" (str.++ "4" (str.++ "9" ""))))))))))

(define-fun Witness2 () String (str.++ "0" (str.++ "5" (str.++ "7" (str.++ "7" (str.++ "8" (str.++ "8" (str.++ "6" (str.++ "9" (str.++ "2" ""))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.range "0" "0")(re.++ (re.union (re.++ (re.range "5" "5") (re.range "0" "8")) (re.++ (re.range "6" "6") (re.union (re.range "4" "4") (re.range "7" "7"))))(re.++ (re.opt (re.range "-" "-"))(re.++ (re.range "1" "9")(re.++ ((_ re.loop 5 5) (re.range "0" "9")) (str.to_re "")))))))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)







(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)


(define-fun Witness1 () String (str.++ "\u{84}" (str.++ "\u{19}" "")))

(define-fun Witness2 () String (str.++ "\u{85}" (str.++ "\u{17}" "")))

(assert (= regexA (re.++ (str.to_re "")(re.++ ((_ re.loop 0 16) (re.union (re.union (re.range "\u{00}" "\u{09}") (re.range "\u{0b}" "\u{ff}")) (re.range "\u{0a}" "\u{0a}"))) (str.to_re "")))))


(assert (str.in_re x regexA))

(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)

(reset)
(set-logic QF_S)
(declare-const x String)
(assert (str.in_re x (re.inter
    ((_ re.^ 100) (re.++ (re.* re.allchar) (str.to_re "a")))
    (re.* ((_ re.^ 100) (re.++ (re.* re.allchar) (str.to_re "a"))))
)))
(check-sat)

(reset)
(set-logic QF_S)
(declare-const x String)
(assert (str.in_re x (str.to_re "qwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnm")))
(check-sat)

(reset)
(set-logic QF_S)
(declare-const x String)
(assert (str.in_re x (
    (_ re.loop 300 300)
    (re.union (str.to_re "aaa") (str.to_re "bbb"))
)))
(check-sat)

(reset)
(set-logic QF_S)
(declare-const x String)
(assert (str.in_re x (re.inter
    ((_ re.^ 30) (re.++ (re.* re.allchar) (str.to_re "a")))
    ((_ re.^ 60) (re.++ (re.* re.allchar) (str.to_re "a")))
    ((_ re.^ 90) (re.++ (re.* re.allchar) (str.to_re "a")))
)))
(check-sat)

(reset)
(set-logic QF_S)
(declare-const x String)
(assert (str.in_re x (re.inter
    ((_ re.^ 1) (re.++ (re.* re.allchar) (str.to_re "a")))
    ((_ re.^ 2) (re.++ (re.* re.allchar) (str.to_re "a")))
    ((_ re.^ 3) (re.++ (re.* re.allchar) (str.to_re "a")))
)))
(check-sat)

(reset)
(set-logic QF_S)
(declare-const x String)
(assert (str.in_re x (re.inter
    ((_ re.^ 3) (re.++ (re.* re.allchar) (str.to_re "a")))
    ((_ re.^ 6) (re.++ (re.* re.allchar) (str.to_re "a")))
    ((_ re.^ 9) (re.++ (re.* re.allchar) (str.to_re "a")))
)))
(check-sat)

(reset)
(set-logic QF_S)
(declare-const x String)
(assert (str.in_re x (
    (_ re.loop 10 10)
    (re.union (str.to_re "aaa") (str.to_re "bbb"))
)))
(check-sat)

(reset)
(set-logic QF_S)
(declare-const x String)
(assert (str.in_re x (
    (_ re.loop 3000 3000)
    (re.union (str.to_re "aaa") (str.to_re "bbb"))
)))
(check-sat)

(reset)
(set-logic QF_S)
(declare-const x String)
(assert (str.in_re x ((_ re.^ 10000) (str.to_re "bazz"))))
(check-sat)

(reset)
(set-logic QF_S)
(declare-const x String)
(assert (str.in_re x (re.inter
    ((_ re.^ 10) (re.++ (re.* re.allchar) (str.to_re "a")))
    ((_ re.^ 20) (re.++ (re.* re.allchar) (str.to_re "a")))
    ((_ re.^ 30) (re.++ (re.* re.allchar) (str.to_re "a")))
)))
(check-sat)

(reset)
(set-logic QF_S)
(declare-const x String)
(assert (str.in_re x (str.to_re "qwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnm")))
(check-sat)

(reset)
(set-logic QF_S)
(declare-const x String)
(assert (str.in_re x (re.inter
    ((_ re.^ 10) (re.++ (re.* re.allchar) (str.to_re "a")))
    (re.* ((_ re.^ 10) (re.++ (re.* re.allchar) (str.to_re "a"))))
)))
(check-sat)

(reset)
(set-logic QF_S)
(declare-const x String)
(assert (str.in_re x (str.to_re "qwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnm")))
(check-sat)

(reset)
(set-logic QF_S)
(declare-const x String)
(assert (str.in_re x (
    (_ re.loop 1000 1000)
    (re.union (str.to_re "aaa") (str.to_re "bbb"))
)))
(check-sat)

(reset)
(set-logic QF_S)
(declare-const x String)
(assert (str.in_re x (
    (_ re.loop 30 30)
    (re.union (str.to_re "aaa") (str.to_re "bbb"))
)))
(check-sat)

(reset)
(set-logic QF_S)
(declare-const x String)
(assert (str.in_re x (str.to_re "qwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnm")))
(check-sat)

(reset)
(set-logic QF_S)
(declare-const x String)
(assert (str.in_re x (str.to_re "qwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnm")))
(check-sat)

(reset)
(set-logic QF_S)
(declare-const x String)
(assert (str.in_re x (re.inter
    ((_ re.^ 3) (re.++ (re.* re.allchar) (str.to_re "a")))
    (re.* ((_ re.^ 3) (re.++ (re.* re.allchar) (str.to_re "a"))))
)))
(check-sat)

(reset)
(set-logic QF_S)
(declare-const x String)
(assert (str.in_re x (
    (_ re.loop 100 100)
    (re.union (str.to_re "aaa") (str.to_re "bbb"))
)))
(check-sat)

(reset)
(set-logic QF_S)
(declare-const x String)
(assert (str.in_re x (re.inter
    ((_ re.^ 30) (re.++ (re.* re.allchar) (str.to_re "a")))
    (re.* ((_ re.^ 30) (re.++ (re.* re.allchar) (str.to_re "a"))))
)))
(check-sat)

(reset)
(set-logic QF_S)
(declare-const x String)
(assert (str.in_re x ((_ re.^ 5) (str.to_re "bazz"))))
(check-sat)

(reset)
(set-logic QF_S)
(declare-const x String)
(assert (str.in_re x ((_ re.^ 20) (str.to_re "bazz"))))
(check-sat)

(reset)
(set-logic QF_S)






(declare-const x String)
(assert (str.in_re x (re.inter (re.++ (re.++ re.all (re.range "0" "9")) ((_ re.^ 5) re.allchar)) (re.++ (re.++ re.all (re.union (re.range (_ char #x0) "/") (re.range ":" (_ char #xFF)))) ((_ re.^ 5) re.allchar)))))
(check-sat)


(reset)
(set-logic QF_S)
(declare-const x String)

(assert (str.in_re x (re.inter
    (re.++ re.all (str.to_re "a") ((_ re.^ 10) re.allchar))
    (re.++ re.all (str.to_re "b") ((_ re.^ 10) re.allchar))
)))

(check-sat)


(reset)
(set-logic QF_S)
(declare-const x String)

(assert (str.in_re x (re.inter
    (re.++ re.all (str.to_re "a") ((_ re.^ 3) re.allchar))
    (re.++ re.all (str.to_re "b") ((_ re.^ 3) re.allchar))
)))

(check-sat)


(reset)
(set-logic QF_S)
(declare-const x String)

(assert (str.in_re x (re.inter
    (re.++ re.all (str.to_re "a") ((_ re.^ 5) re.allchar))
    (re.++ re.all (str.to_re "b") ((_ re.^ 5) re.allchar))
)))

(check-sat)


(reset)
(set-logic QF_S)






(declare-const x String)
(assert (str.in_re x (re.inter (re.++ (re.++ re.all (re.range "0" "9")) ((_ re.^ 10) re.allchar)) (re.++ (re.++ re.all (re.union (re.range (_ char #x0) "/") (re.range ":" (_ char #x7F)))) ((_ re.^ 10) re.allchar)))))
(check-sat)


(reset)
(set-logic QF_S)






(declare-const x String)
(assert (str.in_re x (re.inter (re.++ (re.++ re.all (re.range "0" "9")) ((_ re.^ 20) re.allchar)) (re.++ (re.++ re.all (re.union (re.range (_ char #x0) "/") (re.range ":" (_ char #x7F)))) ((_ re.^ 20) re.allchar)))))
(check-sat)


(reset)
(set-logic QF_S)
(declare-const x String)

(assert (str.in_re x (re.inter
    (re.++ re.all (str.to_re "a") ((_ re.^ 100) re.allchar))
    (re.++ re.all (str.to_re "b") ((_ re.^ 100) re.allchar))
)))

(check-sat)


(reset)
(set-logic QF_S)






(declare-const x String)
(assert (str.in_re x (re.inter (re.++ (re.++ re.all (re.range "0" "9")) ((_ re.^ 15) re.allchar)) (re.++ (re.++ re.all (re.union (re.range (_ char #x0) "/") (re.range ":" (_ char #x7F)))) ((_ re.^ 15) re.allchar)))))
(check-sat)


(reset)
(set-logic QF_S)
(declare-const x String)

(assert (str.in_re x (re.inter
    (re.++ re.all (str.to_re "a") ((_ re.^ 1) re.allchar))
    (re.++ re.all (str.to_re "b") ((_ re.^ 1) re.allchar))
)))

(check-sat)


(reset)
(set-logic QF_S)
(declare-const x String)

(assert (str.in_re x
    (re.+ (re.++ re.all (str.to_re "a") ((_ re.^ 5) re.allchar)))
))

(check-sat)


(reset)
(set-logic QF_S)
(declare-const x String)

(assert (str.in_re x
    (re.+ (re.++ re.all (str.to_re "a") ((_ re.^ 10) re.allchar)))
))

(check-sat)


(reset)
(set-logic QF_S)
(declare-const x String)

(assert (str.in_re x
    (re.+ (re.++ re.all (str.to_re "a") ((_ re.^ 3) re.allchar)))
))

(check-sat)


(reset)
(set-logic QF_S)
(declare-const x String)

(assert (str.in_re x
    (re.+ (re.++ re.all (str.to_re "a") ((_ re.^ 1000) re.allchar)))
))

(check-sat)


(reset)
(set-logic QF_S)
(declare-const x String)

(assert (str.in_re x
    (re.+ (re.++ re.all (str.to_re "a") ((_ re.^ 100) re.allchar)))
))

(check-sat)


(reset)








(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const regexB RegLan)
(declare-const x String)

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.+ (re.union (re.range "-" "-")(re.union (re.range "A" "Z")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))(re.++ (re.range "@" "@")(re.++ (re.+ (re.++ (re.+ (re.union (re.range "-" "-")(re.union (re.range "A" "Z")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))) (re.range "." ".")))(re.++ (re.+ (re.union (re.range "-" "-")(re.union (re.range "A" "Z")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))) (str.to_re ""))))))))

(assert (= regexB (re.++ (str.to_re "")(re.++ (re.+ (re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))))(re.++ (re.range "@" "@")(re.++ (re.+ (re.++ (re.+ (re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))) (re.range "." ".")))(re.++ (re.+ (re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))) (str.to_re ""))))))))



(assert (str.in_re x regexA))
(assert (not (str.in_re x regexB)))
(check-sat)

(reset)








(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const regexB RegLan)
(declare-const x String)

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.union (re.range "0" "8")(re.union (re.range "A" "Z") (re.range "b" "z")))(re.++ (re.* (re.++ (re.opt (re.range "-" ".")) (re.+ (re.union (re.range "0" "8")(re.union (re.range "A" "Z") (re.range "b" "z"))))))(re.++ (re.range "@" "@")(re.++ (re.+ (re.union (re.range "0" "8")(re.union (re.range "A" "Z") (re.range "b" "z"))))(re.++ (re.* (re.++ (re.opt (re.range "-" ".")) (re.+ (re.union (re.range "0" "8")(re.union (re.range "A" "Z") (re.range "b" "z"))))))(re.++ (str.to_re (str.++ "." (str.++ " " "")))(re.++ (re.++ (re.union (re.range "A" "Z") (re.range "b" "z")) (re.+ (re.union (re.range "A" "Z") (re.range "b" "z")))) (str.to_re "")))))))))))

(assert (= regexB (re.++ (str.to_re "")(re.++ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))(re.++ (re.* (re.++ (re.opt (re.range "-" ".")) (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z"))))))(re.++ (re.range "@" "@")(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z"))))(re.++ (re.* (re.++ (re.opt (re.range "-" ".")) (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z"))))))(re.++ (str.to_re (str.++ "." (str.++ " " "")))(re.++ (re.++ (re.union (re.range "A" "Z") (re.range "a" "z")) (re.+ (re.union (re.range "A" "Z") (re.range "a" "z")))) (str.to_re "")))))))))))



(assert (str.in_re x regexA))
(assert (not (str.in_re x regexB)))
(check-sat)

(reset)








(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const regexB RegLan)
(declare-const x String)

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.+ (re.++ (re.++ (re.+ (re.union (re.range "A" "Z")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))(re.++ (re.* (re.++ (re.union (re.range "+" "+") (re.range "-" ".")) (re.+ (re.union (re.range "A" "Z")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))(re.++ (re.range "@" "@")(re.++ (re.+ (re.union (re.range "A" "Z")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))(re.++ (re.* (re.++ (re.range "-" ".") (re.+ (re.union (re.range "A" "Z")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))(re.++ (re.range "." ".")(re.++ (re.+ (re.union (re.range "A" "Z")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))) (re.* (re.++ (re.range "-" ".") (re.+ (re.union (re.range "A" "Z")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))))))))))(re.++ (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (re.opt (re.range "," ",")) (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))))))) (str.to_re "")))))

(assert (= regexB (re.++ (str.to_re "")(re.++ (re.+ (re.++ (re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))(re.++ (re.* (re.++ (re.union (re.range "+" "+") (re.range "-" ".")) (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))))(re.++ (re.range "@" "@")(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))(re.++ (re.* (re.++ (re.range "-" ".") (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))))(re.++ (re.range "." ".")(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))) (re.* (re.++ (re.range "-" ".") (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))))))))))))(re.++ (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (re.opt (re.range "," ",")) (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))))))) (str.to_re "")))))



(assert (str.in_re x regexA))
(assert (not (str.in_re x regexB)))
(check-sat)

(reset)








(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const regexB RegLan)
(declare-const x String)

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.* (re.union (re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))) (re.+ (re.range " " " ")))(re.union (re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))) (re.+ (re.range "-" "-")))(re.union (re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))) (re.+ (re.range "." "."))) (re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))) (re.+ (re.range "+" "+")))))))(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z"))))(re.++ (re.range "@" "@")(re.++ (re.* (re.union (re.++ (re.+ (re.union (re.range "A" "Z")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))) (re.+ (re.range "-" "-"))) (re.++ (re.+ (re.union (re.range "A" "Z")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))) (re.range "." "."))))(re.++ ((_ re.loop 1 63) (re.union (re.range "A" "Z")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))(re.++ (re.range "." ".")(re.++ ((_ re.loop 2 6) (re.union (re.range "A" "Z") (re.range "a" "z"))) (str.to_re "")))))))))))

(assert (= regexB (re.++ (str.to_re "")(re.++ (re.* (re.union (re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))) (re.+ (re.range " " " ")))(re.union (re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))) (re.+ (re.range "-" "-")))(re.union (re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))) (re.+ (re.range "." "."))) (re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))) (re.+ (re.range "+" "+")))))))(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z"))))(re.++ (re.range "@" "@")(re.++ (re.* (re.union (re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))) (re.+ (re.range "-" "-"))) (re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))) (re.range "." "."))))(re.++ ((_ re.loop 1 63) (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))(re.++ (re.range "." ".")(re.++ ((_ re.loop 2 6) (re.union (re.range "A" "Z") (re.range "a" "z"))) (str.to_re "")))))))))))



(assert (str.in_re x regexA))
(assert (not (str.in_re x regexB)))
(check-sat)

(reset)








(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const regexB RegLan)
(declare-const x String)

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.opt (re.union (re.range "+" "+") (re.range "-" "-")))(re.++ (re.union (re.++ (re.* (re.range "0" "8"))(re.++ (re.opt (re.range "." ".")) (re.+ (re.range "0" "8")))) (re.++ (re.+ (re.range "0" "8"))(re.++ (re.opt (re.range "." ".")) (re.* (re.range "0" "8")))))(re.++ (re.opt (re.++ (re.union (re.range "E" "E") (re.range "e" "e"))(re.++ (re.opt (re.union (re.range "+" "+") (re.range "-" "-"))) (re.+ (re.range "0" "8"))))) (str.to_re "")))))))

(assert (= regexB (re.++ (str.to_re "")(re.++ (re.opt (re.union (re.range "+" "+") (re.range "-" "-")))(re.++ (re.union (re.++ (re.* (re.range "0" "9"))(re.++ (re.opt (re.range "." ".")) (re.+ (re.range "0" "9")))) (re.++ (re.+ (re.range "0" "9"))(re.++ (re.opt (re.range "." ".")) (re.* (re.range "0" "9")))))(re.++ (re.opt (re.++ (re.union (re.range "E" "E") (re.range "e" "e"))(re.++ (re.opt (re.union (re.range "+" "+") (re.range "-" "-"))) (re.+ (re.range "0" "9"))))) (str.to_re "")))))))



(assert (str.in_re x regexA))
(assert (not (str.in_re x regexB)))
(check-sat)

(reset)








(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const regexB RegLan)
(declare-const x String)

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.+ (re.union (re.range "A" "Z")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))(re.++ (re.* (re.++ (re.union (re.range "+" "+") (re.range "-" ".")) (re.+ (re.union (re.range "A" "Z")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))(re.++ (re.range "@" "@")(re.++ (re.+ (re.union (re.range "A" "Z")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))(re.++ (re.* (re.++ (re.range "-" ".") (re.+ (re.union (re.range "A" "Z")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))(re.++ (re.range "." ".")(re.++ (re.+ (re.union (re.range "A" "Z")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))(re.++ (re.* (re.++ (re.range "-" ".") (re.+ (re.union (re.range "A" "Z")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))(re.++ (re.* (re.++ (re.union (re.range "," ",") (re.range ";" ";"))(re.++ (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (re.+ (re.union (re.range "A" "Z")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))(re.++ (re.* (re.++ (re.union (re.range "+" "+") (re.range "-" ".")) (re.+ (re.union (re.range "A" "Z")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))(re.++ (re.range "@" "@")(re.++ (re.+ (re.union (re.range "A" "Z")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))(re.++ (re.* (re.++ (re.range "-" ".") (re.+ (re.union (re.range "A" "Z")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))(re.++ (re.range "." ".")(re.++ (re.+ (re.union (re.range "A" "Z")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))) (re.* (re.++ (re.range "-" ".") (re.+ (re.union (re.range "A" "Z")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))))))))))))) (str.to_re "")))))))))))))

(assert (= regexB (re.++ (str.to_re "")(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))(re.++ (re.* (re.++ (re.union (re.range "+" "+") (re.range "-" ".")) (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))))(re.++ (re.range "@" "@")(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))(re.++ (re.* (re.++ (re.range "-" ".") (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))))(re.++ (re.range "." ".")(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))(re.++ (re.* (re.++ (re.range "-" ".") (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))))(re.++ (re.* (re.++ (re.union (re.range "," ",") (re.range ";" ";"))(re.++ (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))(re.++ (re.* (re.++ (re.union (re.range "+" "+") (re.range "-" ".")) (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))))(re.++ (re.range "@" "@")(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))(re.++ (re.* (re.++ (re.range "-" ".") (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))))(re.++ (re.range "." ".")(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))) (re.* (re.++ (re.range "-" ".") (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))))))))))))))) (str.to_re "")))))))))))))



(assert (str.in_re x regexA))
(assert (not (str.in_re x regexB)))
(check-sat)

(reset)








(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const regexB RegLan)
(declare-const x String)

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.opt (re.range "$" "$"))(re.++ (re.union (re.++ ((_ re.loop 1 3) (re.range "1" "9"))(re.++ (re.opt (re.range "," ","))(re.++ (re.* (re.++ ((_ re.loop 3 3) (re.range "1" "9")) (re.opt (re.range "," ","))))(re.++ ((_ re.loop 3 3) (re.range "1" "9")) (re.opt (re.++ (re.range "." ".") ((_ re.loop 0 2) (re.range "1" "9"))))))))(re.union (re.++ ((_ re.loop 1 3) (re.range "1" "9")) (re.opt (re.++ (re.range "." ".") ((_ re.loop 0 2) (re.range "1" "9"))))) (re.++ (re.range "." ".") (re.opt ((_ re.loop 1 2) (re.range "1" "9")))))) (str.to_re ""))))))

(assert (= regexB (re.++ (str.to_re "")(re.++ (re.opt (re.range "$" "$"))(re.++ (re.union (re.++ ((_ re.loop 1 3) (re.range "0" "9"))(re.++ (re.opt (re.range "," ","))(re.++ (re.* (re.++ ((_ re.loop 3 3) (re.range "0" "9")) (re.opt (re.range "," ","))))(re.++ ((_ re.loop 3 3) (re.range "0" "9")) (re.opt (re.++ (re.range "." ".") ((_ re.loop 0 2) (re.range "0" "9"))))))))(re.union (re.++ ((_ re.loop 1 3) (re.range "0" "9")) (re.opt (re.++ (re.range "." ".") ((_ re.loop 0 2) (re.range "0" "9"))))) (re.++ (re.range "." ".") (re.opt ((_ re.loop 1 2) (re.range "0" "9")))))) (str.to_re ""))))))



(assert (str.in_re x regexA))
(assert (not (str.in_re x regexB)))
(check-sat)

(reset)








(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const regexB RegLan)
(declare-const x String)

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.+ (re.++ (re.+ (re.union (re.range "-" ".")(re.union (re.range "0" "8")(re.union (re.range "A" "Z") (re.range "b" "z")))))(re.++ (re.range "@" "@")(re.++ (re.+ (re.union (re.range "-" ".")(re.union (re.range "0" "8")(re.union (re.range "A" "Z") (re.range "b" "z")))))(re.++ (re.range "." ".") ((_ re.loop 1 25) ((_ re.loop 2 5) (re.union (re.range "A" "Z") (re.range "b" "z")))))))))(re.++ (re.* (re.+ (re.++ (re.+ (re.union (re.range "-" ".")(re.union (re.range "0" "8")(re.union (re.range "A" "Z") (re.range "b" "z")))))(re.++ (re.range "@" "@")(re.++ (re.+ (re.union (re.range "-" ".")(re.union (re.range "0" "8")(re.union (re.range "A" "Z") (re.range "b" "z")))))(re.++ (re.range "." ".") ((_ re.loop 1 25) ((_ re.loop 2 5) (re.union (re.range "A" "Z") (re.range "b" "z")))))))))) (str.to_re ""))))))

(assert (= regexB (re.++ (str.to_re "")(re.++ (re.+ (re.++ (re.+ (re.union (re.range "-" ".")(re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))))(re.++ (re.range "@" "@")(re.++ (re.+ (re.union (re.range "-" ".")(re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))))(re.++ (re.range "." ".") ((_ re.loop 1 25) ((_ re.loop 2 5) (re.union (re.range "A" "Z") (re.range "a" "z")))))))))(re.++ (re.* (re.+ (re.++ (re.+ (re.union (re.range "-" ".")(re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))))(re.++ (re.range "@" "@")(re.++ (re.+ (re.union (re.range "-" ".")(re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))))(re.++ (re.range "." ".") ((_ re.loop 1 25) ((_ re.loop 2 5) (re.union (re.range "A" "Z") (re.range "a" "z")))))))))) (str.to_re ""))))))



(assert (str.in_re x regexA))
(assert (not (str.in_re x regexB)))
(check-sat)

(reset)








(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const regexB RegLan)
(declare-const x String)

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.+ (re.union (re.range "-" ".")(re.union (re.range "1" "9")(re.union (re.range "A" "Z")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))(re.++ (re.range "@" "@")(re.++ (re.union ((_ re.loop 1 67) (re.union (re.range "-" "-")(re.union (re.range "1" "9")(re.union (re.range "A" "Z")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))) (re.++ (re.+ (re.union (re.range "-" "-")(re.union (re.range "1" "9")(re.union (re.range "A" "Z")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))(re.++ (re.range "." ".") ((_ re.loop 1 67) (re.union (re.range "-" "-")(re.union (re.range "1" "9")(re.union (re.range "A" "Z")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))))))(re.++ (re.range "." ".")(re.++ (re.++ ((_ re.loop 2 4) (re.union (re.range "1" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))) (re.opt (re.++ (re.range "." ".") ((_ re.loop 2 2) (re.union (re.range "1" "9")(re.union (re.range "A" "A")(re.union (re.range "Z" "Z") (re.range "a" "z")))))))) (str.to_re "")))))))))

(assert (= regexB (re.++ (str.to_re "")(re.++ (re.+ (re.union (re.range "-" ".")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))))(re.++ (re.range "@" "@")(re.++ (re.union ((_ re.loop 1 67) (re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))) (re.++ (re.+ (re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))))(re.++ (re.range "." ".") ((_ re.loop 1 67) (re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))))))(re.++ (re.range "." ".")(re.++ (re.++ ((_ re.loop 2 4) (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))) (re.opt (re.++ (re.range "." ".") ((_ re.loop 2 2) (re.union (re.range "0" "9")(re.union (re.range "A" "A")(re.union (re.range "Z" "Z") (re.range "a" "z")))))))) (str.to_re "")))))))))



(assert (str.in_re x regexA))
(assert (not (str.in_re x regexB)))
(check-sat)

(reset)








(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const regexB RegLan)
(declare-const x String)

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.opt (re.union ((_ re.loop 2 2) (re.range "A" "Z"))(re.union (re.++ ((_ re.loop 2 2) (re.range "a" "z"))(re.++ (re.range " " " ")(re.++ ((_ re.loop 2 2) (re.range "1" "9"))(re.++ (re.range " " " ") ((_ re.loop 1 2) (re.range "A" "Z")))))) (re.++ ((_ re.loop 1 2) (re.range "a" "z"))(re.++ (re.range " " " ") ((_ re.loop 1 4) (re.range "1" "9")))))))(re.++ (re.opt (re.union ((_ re.loop 3 3) (re.range "A" "Z")) (re.++ ((_ re.loop 3 3) (re.range "a" "z"))(re.++ (re.range " " " ") ((_ re.loop 1 4) (re.range "1" "9")))))) (str.to_re ""))))))

(assert (= regexB (re.++ (str.to_re "")(re.++ (re.opt (re.union ((_ re.loop 2 2) (re.range "A" "Z"))(re.union (re.++ ((_ re.loop 2 2) (re.range "a" "z"))(re.++ (re.range " " " ")(re.++ ((_ re.loop 2 2) (re.range "0" "9"))(re.++ (re.range " " " ") ((_ re.loop 1 2) (re.range "A" "Z")))))) (re.++ ((_ re.loop 1 2) (re.range "a" "z"))(re.++ (re.range " " " ") ((_ re.loop 1 4) (re.range "0" "9")))))))(re.++ (re.opt (re.union ((_ re.loop 3 3) (re.range "A" "Z")) (re.++ ((_ re.loop 3 3) (re.range "a" "z"))(re.++ (re.range " " " ") ((_ re.loop 1 4) (re.range "0" "9")))))) (str.to_re ""))))))



(assert (str.in_re x regexA))
(assert (not (str.in_re x regexB)))
(check-sat)

(reset)








(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const regexB RegLan)
(declare-const x String)


(define-fun Witness () String "")

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.opt (re.union ((_ re.loop 2 2) (re.range "A" "Z"))(re.union (re.++ ((_ re.loop 2 2) (re.range "a" "z"))(re.++ (re.range " " " ")(re.++ ((_ re.loop 2 2) (re.range "0" "9"))(re.++ (re.range " " " ") ((_ re.loop 1 2) (re.range "A" "Z")))))) (re.++ ((_ re.loop 1 2) (re.range "a" "z"))(re.++ (re.range " " " ") ((_ re.loop 1 4) (re.range "0" "9")))))))(re.++ (re.opt (re.union ((_ re.loop 3 3) (re.range "A" "Z")) (re.++ ((_ re.loop 3 3) (re.range "a" "z"))(re.++ (re.range " " " ") ((_ re.loop 1 4) (re.range "0" "9")))))) (str.to_re ""))))))

(assert (= regexB (re.++ (str.to_re "")(re.++ (re.+ (re.union (re.range "-" ".")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))))(re.++ (re.range "@" "@")(re.++ (re.union ((_ re.loop 1 67) (re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))) (re.++ (re.+ (re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))))(re.++ (re.range "." ".") ((_ re.loop 1 67) (re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))))))(re.++ (re.range "." ".")(re.++ (re.++ ((_ re.loop 2 4) (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))) (re.opt (re.++ (re.range "." ".") ((_ re.loop 2 2) (re.union (re.range "0" "9")(re.union (re.range "A" "A")(re.union (re.range "Z" "Z") (re.range "a" "z")))))))) (str.to_re "")))))))))



(assert (str.in_re x regexA))
(assert (not (str.in_re x regexB)))

(assert (str.in_re Witness regexA))
(assert (not (str.in_re Witness regexB)))
(check-sat)

(reset)








(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const regexB RegLan)
(declare-const x String)


(define-fun Witness () String (str.++ "9" (str.++ "@" (str.++ "Z" (str.++ "u" (str.++ "7" (str.++ "z" (str.++ "g" (str.++ "Y" (str.++ "y" (str.++ "A" (str.++ "0" (str.++ "7" (str.++ "8" (str.++ "7" (str.++ "W" (str.++ "9" (str.++ "9" (str.++ "x" (str.++ "8" (str.++ "t" (str.++ "9" (str.++ "9" (str.++ "y" (str.++ "8" (str.++ "B" (str.++ "y" (str.++ "5" (str.++ "4" (str.++ "0" (str.++ "a" (str.++ "8" (str.++ "8" (str.++ "8" (str.++ "m" (str.++ "5" (str.++ "1" (str.++ "H" (str.++ "Y" (str.++ "W" (str.++ "7" (str.++ "9" (str.++ "g" (str.++ "p" (str.++ "D" (str.++ "J" (str.++ "9" (str.++ "8" (str.++ "6" (str.++ "A" (str.++ "8" (str.++ "I" (str.++ "d" (str.++ "X" (str.++ "Z" (str.++ "v" (str.++ "i" (str.++ "A" (str.++ "y" (str.++ "R" (str.++ "z" (str.++ "2" (str.++ "q" (str.++ "I" (str.++ "9" (str.++ "_" (str.++ "." (str.++ "x" (str.++ "w" "")))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.* (re.union (re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))) (re.+ (re.range " " " ")))(re.union (re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))) (re.+ (re.range "-" "-")))(re.union (re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))) (re.+ (re.range "." "."))) (re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))) (re.+ (re.range "+" "+")))))))(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z"))))(re.++ (re.range "@" "@")(re.++ (re.* (re.union (re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))) (re.+ (re.range "-" "-"))) (re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))) (re.range "." "."))))(re.++ ((_ re.loop 1 63) (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))(re.++ (re.range "." ".")(re.++ ((_ re.loop 2 6) (re.union (re.range "A" "Z") (re.range "a" "z"))) (str.to_re "")))))))))))

(assert (= regexB (re.++ (str.to_re "")(re.++ (re.+ (re.++ (re.+ (re.union (re.range "-" ".")(re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))))(re.++ (re.range "@" "@")(re.++ (re.+ (re.union (re.range "-" ".")(re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))))(re.++ (re.range "." ".") ((_ re.loop 1 25) ((_ re.loop 2 5) (re.union (re.range "A" "Z") (re.range "a" "z")))))))))(re.++ (re.* (re.+ (re.++ (re.+ (re.union (re.range "-" ".")(re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))))(re.++ (re.range "@" "@")(re.++ (re.+ (re.union (re.range "-" ".")(re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))))(re.++ (re.range "." ".") ((_ re.loop 1 25) ((_ re.loop 2 5) (re.union (re.range "A" "Z") (re.range "a" "z")))))))))) (str.to_re ""))))))



(assert (str.in_re x regexA))
(assert (not (str.in_re x regexB)))

(assert (str.in_re Witness regexA))
(assert (not (str.in_re Witness regexB)))
(check-sat)

(reset)








(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const regexB RegLan)
(declare-const x String)


(define-fun Witness () String (str.++ "q" (str.++ "@" (str.++ "8" (str.++ "." (str.++ "w" (str.++ "l" "")))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.* (re.union (re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))) (re.+ (re.range " " " ")))(re.union (re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))) (re.+ (re.range "-" "-")))(re.union (re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))) (re.+ (re.range "." "."))) (re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))) (re.+ (re.range "+" "+")))))))(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z"))))(re.++ (re.range "@" "@")(re.++ (re.* (re.union (re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))) (re.+ (re.range "-" "-"))) (re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))) (re.range "." "."))))(re.++ ((_ re.loop 1 63) (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))(re.++ (re.range "." ".")(re.++ ((_ re.loop 2 6) (re.union (re.range "A" "Z") (re.range "a" "z"))) (str.to_re "")))))))))))

(assert (= regexB (re.++ (str.to_re "")(re.++ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))(re.++ (re.* (re.++ (re.opt (re.range "-" ".")) (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z"))))))(re.++ (re.range "@" "@")(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z"))))(re.++ (re.* (re.++ (re.opt (re.range "-" ".")) (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z"))))))(re.++ (str.to_re (str.++ "." (str.++ " " "")))(re.++ (re.++ (re.union (re.range "A" "Z") (re.range "a" "z")) (re.+ (re.union (re.range "A" "Z") (re.range "a" "z")))) (str.to_re "")))))))))))



(assert (str.in_re x regexA))
(assert (not (str.in_re x regexB)))

(assert (str.in_re Witness regexA))
(assert (not (str.in_re Witness regexB)))
(check-sat)

(reset)








(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const regexB RegLan)
(declare-const x String)


(define-fun Witness () String (str.++ "." ""))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.opt (re.range "$" "$"))(re.++ (re.union (re.++ ((_ re.loop 1 3) (re.range "0" "9"))(re.++ (re.opt (re.range "," ","))(re.++ (re.* (re.++ ((_ re.loop 3 3) (re.range "0" "9")) (re.opt (re.range "," ","))))(re.++ ((_ re.loop 3 3) (re.range "0" "9")) (re.opt (re.++ (re.range "." ".") ((_ re.loop 0 2) (re.range "0" "9"))))))))(re.union (re.++ ((_ re.loop 1 3) (re.range "0" "9")) (re.opt (re.++ (re.range "." ".") ((_ re.loop 0 2) (re.range "0" "9"))))) (re.++ (re.range "." ".") (re.opt ((_ re.loop 1 2) (re.range "0" "9")))))) (str.to_re ""))))))

(assert (= regexB (re.++ (str.to_re "")(re.++ (re.+ (re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))))(re.++ (re.range "@" "@")(re.++ (re.+ (re.++ (re.+ (re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))) (re.range "." ".")))(re.++ (re.+ (re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))) (str.to_re ""))))))))



(assert (str.in_re x regexA))
(assert (not (str.in_re x regexB)))

(assert (str.in_re Witness regexA))
(assert (not (str.in_re Witness regexB)))
(check-sat)

(reset)








(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const regexB RegLan)
(declare-const x String)


(define-fun Witness () String (str.++ "y" (str.++ "@" (str.++ "\u{ba}" (str.++ "." (str.++ "8" (str.++ "." (str.++ "6" (str.++ "-" (str.++ "-" (str.++ "6" (str.++ "." (str.++ "c" (str.++ "C" ""))))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.* (re.union (re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))) (re.+ (re.range " " " ")))(re.union (re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))) (re.+ (re.range "-" "-")))(re.union (re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))) (re.+ (re.range "." "."))) (re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))) (re.+ (re.range "+" "+")))))))(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z"))))(re.++ (re.range "@" "@")(re.++ (re.* (re.union (re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))) (re.+ (re.range "-" "-"))) (re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))) (re.range "." "."))))(re.++ ((_ re.loop 1 63) (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))(re.++ (re.range "." ".")(re.++ ((_ re.loop 2 6) (re.union (re.range "A" "Z") (re.range "a" "z"))) (str.to_re "")))))))))))

(assert (= regexB (re.++ (str.to_re "")(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))(re.++ (re.* (re.++ (re.union (re.range "+" "+") (re.range "-" ".")) (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))))(re.++ (re.range "@" "@")(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))(re.++ (re.* (re.++ (re.range "-" ".") (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))))(re.++ (re.range "." ".")(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))(re.++ (re.* (re.++ (re.range "-" ".") (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))))(re.++ (re.* (re.++ (re.union (re.range "," ",") (re.range ";" ";"))(re.++ (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))(re.++ (re.* (re.++ (re.union (re.range "+" "+") (re.range "-" ".")) (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))))(re.++ (re.range "@" "@")(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))(re.++ (re.* (re.++ (re.range "-" ".") (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))))(re.++ (re.range "." ".")(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))) (re.* (re.++ (re.range "-" ".") (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))))))))))))))) (str.to_re "")))))))))))))



(assert (str.in_re x regexA))
(assert (not (str.in_re x regexB)))

(assert (str.in_re Witness regexA))
(assert (not (str.in_re Witness regexB)))
(check-sat)

(reset)








(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const regexB RegLan)
(declare-const x String)


(define-fun Witness () String (str.++ "\u{f4}" (str.++ "@" (str.++ "M" (str.++ "." (str.++ "\u{aa}" (str.++ "-" (str.++ "." (str.++ "1" (str.++ "5" ""))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.+ (re.union (re.range "-" ".")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))))(re.++ (re.range "@" "@")(re.++ (re.union ((_ re.loop 1 67) (re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))) (re.++ (re.+ (re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))))(re.++ (re.range "." ".") ((_ re.loop 1 67) (re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))))))(re.++ (re.range "." ".")(re.++ (re.++ ((_ re.loop 2 4) (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))) (re.opt (re.++ (re.range "." ".") ((_ re.loop 2 2) (re.union (re.range "0" "9")(re.union (re.range "A" "A")(re.union (re.range "Z" "Z") (re.range "a" "z")))))))) (str.to_re "")))))))))

(assert (= regexB (re.++ (str.to_re "")(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))(re.++ (re.* (re.++ (re.union (re.range "+" "+") (re.range "-" ".")) (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))))(re.++ (re.range "@" "@")(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))(re.++ (re.* (re.++ (re.range "-" ".") (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))))(re.++ (re.range "." ".")(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))(re.++ (re.* (re.++ (re.range "-" ".") (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))))(re.++ (re.* (re.++ (re.union (re.range "," ",") (re.range ";" ";"))(re.++ (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))(re.++ (re.* (re.++ (re.union (re.range "+" "+") (re.range "-" ".")) (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))))(re.++ (re.range "@" "@")(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))(re.++ (re.* (re.++ (re.range "-" ".") (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))))(re.++ (re.range "." ".")(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))) (re.* (re.++ (re.range "-" ".") (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))))))))))))))) (str.to_re "")))))))))))))



(assert (str.in_re x regexA))
(assert (not (str.in_re x regexB)))

(assert (str.in_re Witness regexA))
(assert (not (str.in_re Witness regexB)))
(check-sat)

(reset)








(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const regexB RegLan)
(declare-const x String)


(define-fun Witness () String (str.++ "1" (str.++ "@" (str.++ "6" (str.++ "." (str.++ "_" ""))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))(re.++ (re.* (re.++ (re.union (re.range "+" "+") (re.range "-" ".")) (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))))(re.++ (re.range "@" "@")(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))(re.++ (re.* (re.++ (re.range "-" ".") (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))))(re.++ (re.range "." ".")(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))(re.++ (re.* (re.++ (re.range "-" ".") (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))))(re.++ (re.* (re.++ (re.union (re.range "," ",") (re.range ";" ";"))(re.++ (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))(re.++ (re.* (re.++ (re.union (re.range "+" "+") (re.range "-" ".")) (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))))(re.++ (re.range "@" "@")(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))(re.++ (re.* (re.++ (re.range "-" ".") (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))))(re.++ (re.range "." ".")(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))) (re.* (re.++ (re.range "-" ".") (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))))))))))))))) (str.to_re "")))))))))))))

(assert (= regexB (re.++ (str.to_re "")(re.++ (re.+ (re.++ (re.+ (re.union (re.range "-" ".")(re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))))(re.++ (re.range "@" "@")(re.++ (re.+ (re.union (re.range "-" ".")(re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))))(re.++ (re.range "." ".") ((_ re.loop 1 25) ((_ re.loop 2 5) (re.union (re.range "A" "Z") (re.range "a" "z")))))))))(re.++ (re.* (re.+ (re.++ (re.+ (re.union (re.range "-" ".")(re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))))(re.++ (re.range "@" "@")(re.++ (re.+ (re.union (re.range "-" ".")(re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))))(re.++ (re.range "." ".") ((_ re.loop 1 25) ((_ re.loop 2 5) (re.union (re.range "A" "Z") (re.range "a" "z")))))))))) (str.to_re ""))))))



(assert (str.in_re x regexA))
(assert (not (str.in_re x regexB)))

(assert (str.in_re Witness regexA))
(assert (not (str.in_re Witness regexB)))
(check-sat)

(reset)








(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const regexB RegLan)
(declare-const x String)


(define-fun Witness () String (str.++ "6" (str.++ "@" (str.++ "d" (str.++ "." (str.++ "9" (str.++ "." (str.++ "v" (str.++ "\u{ef}" (str.++ "." (str.++ "k" (str.++ "-" (str.++ "-" (str.++ "Z" (str.++ "." (str.++ "i" (str.++ "h" "")))))))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.* (re.union (re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))) (re.+ (re.range " " " ")))(re.union (re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))) (re.+ (re.range "-" "-")))(re.union (re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))) (re.+ (re.range "." "."))) (re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))) (re.+ (re.range "+" "+")))))))(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z"))))(re.++ (re.range "@" "@")(re.++ (re.* (re.union (re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))) (re.+ (re.range "-" "-"))) (re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))) (re.range "." "."))))(re.++ ((_ re.loop 1 63) (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))(re.++ (re.range "." ".")(re.++ ((_ re.loop 2 6) (re.union (re.range "A" "Z") (re.range "a" "z"))) (str.to_re "")))))))))))

(assert (= regexB (re.++ (str.to_re "")(re.++ (re.+ (re.++ (re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))(re.++ (re.* (re.++ (re.union (re.range "+" "+") (re.range "-" ".")) (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))))(re.++ (re.range "@" "@")(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))(re.++ (re.* (re.++ (re.range "-" ".") (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))))(re.++ (re.range "." ".")(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))) (re.* (re.++ (re.range "-" ".") (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))))))))))))(re.++ (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (re.opt (re.range "," ",")) (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))))))) (str.to_re "")))))



(assert (str.in_re x regexA))
(assert (not (str.in_re x regexB)))

(assert (str.in_re Witness regexA))
(assert (not (str.in_re Witness regexB)))
(check-sat)

(reset)








(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const regexB RegLan)
(declare-const x String)


(define-fun Witness () String (str.++ "8" ""))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.opt (re.union (re.range "+" "+") (re.range "-" "-")))(re.++ (re.union (re.++ (re.* (re.range "0" "9"))(re.++ (re.opt (re.range "." ".")) (re.+ (re.range "0" "9")))) (re.++ (re.+ (re.range "0" "9"))(re.++ (re.opt (re.range "." ".")) (re.* (re.range "0" "9")))))(re.++ (re.opt (re.++ (re.union (re.range "E" "E") (re.range "e" "e"))(re.++ (re.opt (re.union (re.range "+" "+") (re.range "-" "-"))) (re.+ (re.range "0" "9"))))) (str.to_re "")))))))

(assert (= regexB (re.++ (str.to_re "")(re.++ (re.* (re.union (re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))) (re.+ (re.range " " " ")))(re.union (re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))) (re.+ (re.range "-" "-")))(re.union (re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))) (re.+ (re.range "." "."))) (re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))) (re.+ (re.range "+" "+")))))))(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z"))))(re.++ (re.range "@" "@")(re.++ (re.* (re.union (re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))) (re.+ (re.range "-" "-"))) (re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))) (re.range "." "."))))(re.++ ((_ re.loop 1 63) (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))(re.++ (re.range "." ".")(re.++ ((_ re.loop 2 6) (re.union (re.range "A" "Z") (re.range "a" "z"))) (str.to_re "")))))))))))



(assert (str.in_re x regexA))
(assert (not (str.in_re x regexB)))

(assert (str.in_re Witness regexA))
(assert (not (str.in_re Witness regexB)))
(check-sat)

(reset)








(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const regexB RegLan)
(declare-const x String)


(define-fun Witness () String "")

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.opt (re.union ((_ re.loop 2 2) (re.range "A" "Z"))(re.union (re.++ ((_ re.loop 2 2) (re.range "a" "z"))(re.++ (re.range " " " ")(re.++ ((_ re.loop 2 2) (re.range "0" "9"))(re.++ (re.range " " " ") ((_ re.loop 1 2) (re.range "A" "Z")))))) (re.++ ((_ re.loop 1 2) (re.range "a" "z"))(re.++ (re.range " " " ") ((_ re.loop 1 4) (re.range "0" "9")))))))(re.++ (re.opt (re.union ((_ re.loop 3 3) (re.range "A" "Z")) (re.++ ((_ re.loop 3 3) (re.range "a" "z"))(re.++ (re.range " " " ") ((_ re.loop 1 4) (re.range "0" "9")))))) (str.to_re ""))))))

(assert (= regexB (re.++ (str.to_re "")(re.++ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))(re.++ (re.* (re.++ (re.opt (re.range "-" ".")) (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z"))))))(re.++ (re.range "@" "@")(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z"))))(re.++ (re.* (re.++ (re.opt (re.range "-" ".")) (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z"))))))(re.++ (str.to_re (str.++ "." (str.++ " " "")))(re.++ (re.++ (re.union (re.range "A" "Z") (re.range "a" "z")) (re.+ (re.union (re.range "A" "Z") (re.range "a" "z")))) (str.to_re "")))))))))))



(assert (str.in_re x regexA))
(assert (not (str.in_re x regexB)))

(assert (str.in_re Witness regexA))
(assert (not (str.in_re Witness regexB)))
(check-sat)

(reset)








(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const regexB RegLan)
(declare-const x String)


(define-fun Witness () String (str.++ "w" (str.++ "@" (str.++ "8" (str.++ "." (str.++ "\u{e6}" ""))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.+ (re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))))(re.++ (re.range "@" "@")(re.++ (re.+ (re.++ (re.+ (re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))) (re.range "." ".")))(re.++ (re.+ (re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))) (str.to_re ""))))))))

(assert (= regexB (re.++ (str.to_re "")(re.++ (re.opt (re.union ((_ re.loop 2 2) (re.range "A" "Z"))(re.union (re.++ ((_ re.loop 2 2) (re.range "a" "z"))(re.++ (re.range " " " ")(re.++ ((_ re.loop 2 2) (re.range "0" "9"))(re.++ (re.range " " " ") ((_ re.loop 1 2) (re.range "A" "Z")))))) (re.++ ((_ re.loop 1 2) (re.range "a" "z"))(re.++ (re.range " " " ") ((_ re.loop 1 4) (re.range "0" "9")))))))(re.++ (re.opt (re.union ((_ re.loop 3 3) (re.range "A" "Z")) (re.++ ((_ re.loop 3 3) (re.range "a" "z"))(re.++ (re.range " " " ") ((_ re.loop 1 4) (re.range "0" "9")))))) (str.to_re ""))))))



(assert (str.in_re x regexA))
(assert (not (str.in_re x regexB)))

(assert (str.in_re Witness regexA))
(assert (not (str.in_re Witness regexB)))
(check-sat)

(reset)








(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const regexB RegLan)
(declare-const x String)


(define-fun Witness () String (str.++ "x" (str.++ "@" (str.++ "9" (str.++ "." (str.++ " " (str.++ "R" (str.++ "P" ""))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))(re.++ (re.* (re.++ (re.opt (re.range "-" ".")) (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z"))))))(re.++ (re.range "@" "@")(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z"))))(re.++ (re.* (re.++ (re.opt (re.range "-" ".")) (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z"))))))(re.++ (str.to_re (str.++ "." (str.++ " " "")))(re.++ (re.++ (re.union (re.range "A" "Z") (re.range "a" "z")) (re.+ (re.union (re.range "A" "Z") (re.range "a" "z")))) (str.to_re "")))))))))))

(assert (= regexB (re.++ (str.to_re "")(re.++ (re.opt (re.union ((_ re.loop 2 2) (re.range "A" "Z"))(re.union (re.++ ((_ re.loop 2 2) (re.range "a" "z"))(re.++ (re.range " " " ")(re.++ ((_ re.loop 2 2) (re.range "0" "9"))(re.++ (re.range " " " ") ((_ re.loop 1 2) (re.range "A" "Z")))))) (re.++ ((_ re.loop 1 2) (re.range "a" "z"))(re.++ (re.range " " " ") ((_ re.loop 1 4) (re.range "0" "9")))))))(re.++ (re.opt (re.union ((_ re.loop 3 3) (re.range "A" "Z")) (re.++ ((_ re.loop 3 3) (re.range "a" "z"))(re.++ (re.range " " " ") ((_ re.loop 1 4) (re.range "0" "9")))))) (str.to_re ""))))))



(assert (str.in_re x regexA))
(assert (not (str.in_re x regexB)))

(assert (str.in_re Witness regexA))
(assert (not (str.in_re Witness regexB)))
(check-sat)

(reset)








(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const regexB RegLan)
(declare-const x String)


(define-fun Witness () String (str.++ "0" (str.++ "-" (str.++ "@" (str.++ "I" (str.++ "." (str.++ "-" "")))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.+ (re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))))(re.++ (re.range "@" "@")(re.++ (re.+ (re.++ (re.+ (re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))) (re.range "." ".")))(re.++ (re.+ (re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))) (str.to_re ""))))))))

(assert (= regexB (re.++ (str.to_re "")(re.++ (re.* (re.union (re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))) (re.+ (re.range " " " ")))(re.union (re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))) (re.+ (re.range "-" "-")))(re.union (re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))) (re.+ (re.range "." "."))) (re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))) (re.+ (re.range "+" "+")))))))(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z"))))(re.++ (re.range "@" "@")(re.++ (re.* (re.union (re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))) (re.+ (re.range "-" "-"))) (re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))) (re.range "." "."))))(re.++ ((_ re.loop 1 63) (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))(re.++ (re.range "." ".")(re.++ ((_ re.loop 2 6) (re.union (re.range "A" "Z") (re.range "a" "z"))) (str.to_re "")))))))))))



(assert (str.in_re x regexA))
(assert (not (str.in_re x regexB)))

(assert (str.in_re Witness regexA))
(assert (not (str.in_re Witness regexB)))
(check-sat)

(reset)








(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const regexB RegLan)
(declare-const x String)


(define-fun Witness () String (str.++ "S" (str.++ "@" (str.++ "H" (str.++ "." (str.++ "_" ""))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))(re.++ (re.* (re.++ (re.union (re.range "+" "+") (re.range "-" ".")) (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))))(re.++ (re.range "@" "@")(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))(re.++ (re.* (re.++ (re.range "-" ".") (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))))(re.++ (re.range "." ".")(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))(re.++ (re.* (re.++ (re.range "-" ".") (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))))(re.++ (re.* (re.++ (re.union (re.range "," ",") (re.range ";" ";"))(re.++ (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))(re.++ (re.* (re.++ (re.union (re.range "+" "+") (re.range "-" ".")) (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))))(re.++ (re.range "@" "@")(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))(re.++ (re.* (re.++ (re.range "-" ".") (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))))(re.++ (re.range "." ".")(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))) (re.* (re.++ (re.range "-" ".") (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))))))))))))))) (str.to_re "")))))))))))))

(assert (= regexB (re.++ (str.to_re "")(re.++ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))(re.++ (re.* (re.++ (re.opt (re.range "-" ".")) (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z"))))))(re.++ (re.range "@" "@")(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z"))))(re.++ (re.* (re.++ (re.opt (re.range "-" ".")) (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z"))))))(re.++ (str.to_re (str.++ "." (str.++ " " "")))(re.++ (re.++ (re.union (re.range "A" "Z") (re.range "a" "z")) (re.+ (re.union (re.range "A" "Z") (re.range "a" "z")))) (str.to_re "")))))))))))



(assert (str.in_re x regexA))
(assert (not (str.in_re x regexB)))

(assert (str.in_re Witness regexA))
(assert (not (str.in_re Witness regexB)))
(check-sat)

(reset)








(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const regexB RegLan)
(declare-const x String)


(define-fun Witness () String (str.++ "5" (str.++ "@" (str.++ "-" (str.++ "." (str.++ "q" (str.++ "l" (str.++ "." (str.++ "@" (str.++ "8" (str.++ "." (str.++ "w" (str.++ "T" "")))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.+ (re.++ (re.+ (re.union (re.range "-" ".")(re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))))(re.++ (re.range "@" "@")(re.++ (re.+ (re.union (re.range "-" ".")(re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))))(re.++ (re.range "." ".") ((_ re.loop 1 25) ((_ re.loop 2 5) (re.union (re.range "A" "Z") (re.range "a" "z")))))))))(re.++ (re.* (re.+ (re.++ (re.+ (re.union (re.range "-" ".")(re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))))(re.++ (re.range "@" "@")(re.++ (re.+ (re.union (re.range "-" ".")(re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))))(re.++ (re.range "." ".") ((_ re.loop 1 25) ((_ re.loop 2 5) (re.union (re.range "A" "Z") (re.range "a" "z")))))))))) (str.to_re ""))))))

(assert (= regexB (re.++ (str.to_re "")(re.++ (re.+ (re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))))(re.++ (re.range "@" "@")(re.++ (re.+ (re.++ (re.+ (re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))) (re.range "." ".")))(re.++ (re.+ (re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))) (str.to_re ""))))))))



(assert (str.in_re x regexA))
(assert (not (str.in_re x regexB)))

(assert (str.in_re Witness regexA))
(assert (not (str.in_re Witness regexB)))
(check-sat)

(reset)








(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const regexB RegLan)
(declare-const x String)


(define-fun Witness () String (str.++ "4" ""))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.opt (re.range "$" "$"))(re.++ (re.union (re.++ ((_ re.loop 1 3) (re.range "0" "9"))(re.++ (re.opt (re.range "," ","))(re.++ (re.* (re.++ ((_ re.loop 3 3) (re.range "0" "9")) (re.opt (re.range "," ","))))(re.++ ((_ re.loop 3 3) (re.range "0" "9")) (re.opt (re.++ (re.range "." ".") ((_ re.loop 0 2) (re.range "0" "9"))))))))(re.union (re.++ ((_ re.loop 1 3) (re.range "0" "9")) (re.opt (re.++ (re.range "." ".") ((_ re.loop 0 2) (re.range "0" "9"))))) (re.++ (re.range "." ".") (re.opt ((_ re.loop 1 2) (re.range "0" "9")))))) (str.to_re ""))))))

(assert (= regexB (re.++ (str.to_re "")(re.++ (re.+ (re.++ (re.+ (re.union (re.range "-" ".")(re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))))(re.++ (re.range "@" "@")(re.++ (re.+ (re.union (re.range "-" ".")(re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))))(re.++ (re.range "." ".") ((_ re.loop 1 25) ((_ re.loop 2 5) (re.union (re.range "A" "Z") (re.range "a" "z")))))))))(re.++ (re.* (re.+ (re.++ (re.+ (re.union (re.range "-" ".")(re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))))(re.++ (re.range "@" "@")(re.++ (re.+ (re.union (re.range "-" ".")(re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))))(re.++ (re.range "." ".") ((_ re.loop 1 25) ((_ re.loop 2 5) (re.union (re.range "A" "Z") (re.range "a" "z")))))))))) (str.to_re ""))))))



(assert (str.in_re x regexA))
(assert (not (str.in_re x regexB)))

(assert (str.in_re Witness regexA))
(assert (not (str.in_re Witness regexB)))
(check-sat)

(reset)








(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const regexB RegLan)
(declare-const x String)


(define-fun Witness () String (str.++ "w" (str.++ "@" (str.++ "7" (str.++ "." (str.++ "L" (str.++ "." (str.++ "I" (str.++ "8" "")))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.+ (re.union (re.range "-" ".")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))))(re.++ (re.range "@" "@")(re.++ (re.union ((_ re.loop 1 67) (re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))) (re.++ (re.+ (re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))))(re.++ (re.range "." ".") ((_ re.loop 1 67) (re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))))))(re.++ (re.range "." ".")(re.++ (re.++ ((_ re.loop 2 4) (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))) (re.opt (re.++ (re.range "." ".") ((_ re.loop 2 2) (re.union (re.range "0" "9")(re.union (re.range "A" "A")(re.union (re.range "Z" "Z") (re.range "a" "z")))))))) (str.to_re "")))))))))

(assert (= regexB (re.++ (str.to_re "")(re.++ (re.+ (re.++ (re.+ (re.union (re.range "-" ".")(re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))))(re.++ (re.range "@" "@")(re.++ (re.+ (re.union (re.range "-" ".")(re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))))(re.++ (re.range "." ".") ((_ re.loop 1 25) ((_ re.loop 2 5) (re.union (re.range "A" "Z") (re.range "a" "z")))))))))(re.++ (re.* (re.+ (re.++ (re.+ (re.union (re.range "-" ".")(re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))))(re.++ (re.range "@" "@")(re.++ (re.+ (re.union (re.range "-" ".")(re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))))(re.++ (re.range "." ".") ((_ re.loop 1 25) ((_ re.loop 2 5) (re.union (re.range "A" "Z") (re.range "a" "z")))))))))) (str.to_re ""))))))



(assert (str.in_re x regexA))
(assert (not (str.in_re x regexB)))

(assert (str.in_re Witness regexA))
(assert (not (str.in_re Witness regexB)))
(check-sat)

(reset)








(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const regexB RegLan)
(declare-const x String)


(define-fun Witness () String (str.++ "4" ""))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.opt (re.union (re.range "+" "+") (re.range "-" "-")))(re.++ (re.union (re.++ (re.* (re.range "0" "9"))(re.++ (re.opt (re.range "." ".")) (re.+ (re.range "0" "9")))) (re.++ (re.+ (re.range "0" "9"))(re.++ (re.opt (re.range "." ".")) (re.* (re.range "0" "9")))))(re.++ (re.opt (re.++ (re.union (re.range "E" "E") (re.range "e" "e"))(re.++ (re.opt (re.union (re.range "+" "+") (re.range "-" "-"))) (re.+ (re.range "0" "9"))))) (str.to_re "")))))))

(assert (= regexB (re.++ (str.to_re "")(re.++ (re.+ (re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))))(re.++ (re.range "@" "@")(re.++ (re.+ (re.++ (re.+ (re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))) (re.range "." ".")))(re.++ (re.+ (re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))) (str.to_re ""))))))))



(assert (str.in_re x regexA))
(assert (not (str.in_re x regexB)))

(assert (str.in_re Witness regexA))
(assert (not (str.in_re Witness regexB)))
(check-sat)

(reset)








(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const regexB RegLan)
(declare-const x String)


(define-fun Witness () String (str.++ "5" ""))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.opt (re.union (re.range "+" "+") (re.range "-" "-")))(re.++ (re.union (re.++ (re.* (re.range "0" "9"))(re.++ (re.opt (re.range "." ".")) (re.+ (re.range "0" "9")))) (re.++ (re.+ (re.range "0" "9"))(re.++ (re.opt (re.range "." ".")) (re.* (re.range "0" "9")))))(re.++ (re.opt (re.++ (re.union (re.range "E" "E") (re.range "e" "e"))(re.++ (re.opt (re.union (re.range "+" "+") (re.range "-" "-"))) (re.+ (re.range "0" "9"))))) (str.to_re "")))))))

(assert (= regexB (re.++ (str.to_re "")(re.++ (re.opt (re.union ((_ re.loop 2 2) (re.range "A" "Z"))(re.union (re.++ ((_ re.loop 2 2) (re.range "a" "z"))(re.++ (re.range " " " ")(re.++ ((_ re.loop 2 2) (re.range "0" "9"))(re.++ (re.range " " " ") ((_ re.loop 1 2) (re.range "A" "Z")))))) (re.++ ((_ re.loop 1 2) (re.range "a" "z"))(re.++ (re.range " " " ") ((_ re.loop 1 4) (re.range "0" "9")))))))(re.++ (re.opt (re.union ((_ re.loop 3 3) (re.range "A" "Z")) (re.++ ((_ re.loop 3 3) (re.range "a" "z"))(re.++ (re.range " " " ") ((_ re.loop 1 4) (re.range "0" "9")))))) (str.to_re ""))))))



(assert (str.in_re x regexA))
(assert (not (str.in_re x regexB)))

(assert (str.in_re Witness regexA))
(assert (not (str.in_re Witness regexB)))
(check-sat)

(reset)








(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const regexB RegLan)
(declare-const x String)


(define-fun Witness () String (str.++ "J" (str.++ "@" (str.++ "8" (str.++ "." (str.++ " " (str.++ "K" (str.++ "B" ""))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))(re.++ (re.* (re.++ (re.opt (re.range "-" ".")) (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z"))))))(re.++ (re.range "@" "@")(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z"))))(re.++ (re.* (re.++ (re.opt (re.range "-" ".")) (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z"))))))(re.++ (str.to_re (str.++ "." (str.++ " " "")))(re.++ (re.++ (re.union (re.range "A" "Z") (re.range "a" "z")) (re.+ (re.union (re.range "A" "Z") (re.range "a" "z")))) (str.to_re "")))))))))))

(assert (= regexB (re.++ (str.to_re "")(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))(re.++ (re.* (re.++ (re.union (re.range "+" "+") (re.range "-" ".")) (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))))(re.++ (re.range "@" "@")(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))(re.++ (re.* (re.++ (re.range "-" ".") (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))))(re.++ (re.range "." ".")(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))(re.++ (re.* (re.++ (re.range "-" ".") (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))))(re.++ (re.* (re.++ (re.union (re.range "," ",") (re.range ";" ";"))(re.++ (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))(re.++ (re.* (re.++ (re.union (re.range "+" "+") (re.range "-" ".")) (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))))(re.++ (re.range "@" "@")(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))(re.++ (re.* (re.++ (re.range "-" ".") (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))))(re.++ (re.range "." ".")(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))) (re.* (re.++ (re.range "-" ".") (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))))))))))))))) (str.to_re "")))))))))))))



(assert (str.in_re x regexA))
(assert (not (str.in_re x regexB)))

(assert (str.in_re Witness regexA))
(assert (not (str.in_re Witness regexB)))
(check-sat)

(reset)








(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const regexB RegLan)
(declare-const x String)


(define-fun Witness () String (str.++ "z" (str.++ "@" (str.++ "T" (str.++ "." (str.++ "J" (str.++ "." (str.++ "4" (str.++ "T" "")))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.+ (re.union (re.range "-" ".")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))))(re.++ (re.range "@" "@")(re.++ (re.union ((_ re.loop 1 67) (re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))) (re.++ (re.+ (re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))))(re.++ (re.range "." ".") ((_ re.loop 1 67) (re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))))))(re.++ (re.range "." ".")(re.++ (re.++ ((_ re.loop 2 4) (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))) (re.opt (re.++ (re.range "." ".") ((_ re.loop 2 2) (re.union (re.range "0" "9")(re.union (re.range "A" "A")(re.union (re.range "Z" "Z") (re.range "a" "z")))))))) (str.to_re "")))))))))

(assert (= regexB (re.++ (str.to_re "")(re.++ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))(re.++ (re.* (re.++ (re.opt (re.range "-" ".")) (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z"))))))(re.++ (re.range "@" "@")(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z"))))(re.++ (re.* (re.++ (re.opt (re.range "-" ".")) (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z"))))))(re.++ (str.to_re (str.++ "." (str.++ " " "")))(re.++ (re.++ (re.union (re.range "A" "Z") (re.range "a" "z")) (re.+ (re.union (re.range "A" "Z") (re.range "a" "z")))) (str.to_re "")))))))))))



(assert (str.in_re x regexA))
(assert (not (str.in_re x regexB)))

(assert (str.in_re Witness regexA))
(assert (not (str.in_re Witness regexB)))
(check-sat)

(reset)








(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const regexB RegLan)
(declare-const x String)


(define-fun Witness () String (str.++ "P" (str.++ "@" (str.++ "\u{ba}" (str.++ "." (str.++ "-" ""))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.+ (re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))))(re.++ (re.range "@" "@")(re.++ (re.+ (re.++ (re.+ (re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))) (re.range "." ".")))(re.++ (re.+ (re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))) (str.to_re ""))))))))

(assert (= regexB (re.++ (str.to_re "")(re.++ (re.+ (re.++ (re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))(re.++ (re.* (re.++ (re.union (re.range "+" "+") (re.range "-" ".")) (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))))(re.++ (re.range "@" "@")(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))(re.++ (re.* (re.++ (re.range "-" ".") (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))))(re.++ (re.range "." ".")(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))) (re.* (re.++ (re.range "-" ".") (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))))))))))))(re.++ (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (re.opt (re.range "," ",")) (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))))))) (str.to_re "")))))



(assert (str.in_re x regexA))
(assert (not (str.in_re x regexB)))

(assert (str.in_re Witness regexA))
(assert (not (str.in_re Witness regexB)))
(check-sat)

(reset)








(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const regexB RegLan)
(declare-const x String)


(define-fun Witness () String (str.++ "b" (str.++ "@" (str.++ "\u{ba}" (str.++ "." (str.++ "2" ""))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.+ (re.++ (re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))(re.++ (re.* (re.++ (re.union (re.range "+" "+") (re.range "-" ".")) (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))))(re.++ (re.range "@" "@")(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))(re.++ (re.* (re.++ (re.range "-" ".") (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))))(re.++ (re.range "." ".")(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))) (re.* (re.++ (re.range "-" ".") (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))))))))))))(re.++ (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (re.opt (re.range "," ",")) (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))))))) (str.to_re "")))))

(assert (= regexB (re.++ (str.to_re "")(re.++ (re.opt (re.union ((_ re.loop 2 2) (re.range "A" "Z"))(re.union (re.++ ((_ re.loop 2 2) (re.range "a" "z"))(re.++ (re.range " " " ")(re.++ ((_ re.loop 2 2) (re.range "0" "9"))(re.++ (re.range " " " ") ((_ re.loop 1 2) (re.range "A" "Z")))))) (re.++ ((_ re.loop 1 2) (re.range "a" "z"))(re.++ (re.range " " " ") ((_ re.loop 1 4) (re.range "0" "9")))))))(re.++ (re.opt (re.union ((_ re.loop 3 3) (re.range "A" "Z")) (re.++ ((_ re.loop 3 3) (re.range "a" "z"))(re.++ (re.range " " " ") ((_ re.loop 1 4) (re.range "0" "9")))))) (str.to_re ""))))))



(assert (str.in_re x regexA))
(assert (not (str.in_re x regexB)))

(assert (str.in_re Witness regexA))
(assert (not (str.in_re Witness regexB)))
(check-sat)

(reset)








(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const regexB RegLan)
(declare-const x String)


(define-fun Witness () String (str.++ "A" (str.++ "@" (str.++ "r" (str.++ "." (str.++ "C" (str.++ "H" (str.++ "X" (str.++ "l" (str.++ "B" ""))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.* (re.union (re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))) (re.+ (re.range " " " ")))(re.union (re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))) (re.+ (re.range "-" "-")))(re.union (re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))) (re.+ (re.range "." "."))) (re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))) (re.+ (re.range "+" "+")))))))(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z"))))(re.++ (re.range "@" "@")(re.++ (re.* (re.union (re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))) (re.+ (re.range "-" "-"))) (re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))) (re.range "." "."))))(re.++ ((_ re.loop 1 63) (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))(re.++ (re.range "." ".")(re.++ ((_ re.loop 2 6) (re.union (re.range "A" "Z") (re.range "a" "z"))) (str.to_re "")))))))))))

(assert (= regexB (re.++ (str.to_re "")(re.++ (re.+ (re.union (re.range "-" ".")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))))(re.++ (re.range "@" "@")(re.++ (re.union ((_ re.loop 1 67) (re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))) (re.++ (re.+ (re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))))(re.++ (re.range "." ".") ((_ re.loop 1 67) (re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))))))(re.++ (re.range "." ".")(re.++ (re.++ ((_ re.loop 2 4) (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))) (re.opt (re.++ (re.range "." ".") ((_ re.loop 2 2) (re.union (re.range "0" "9")(re.union (re.range "A" "A")(re.union (re.range "Z" "Z") (re.range "a" "z")))))))) (str.to_re "")))))))))



(assert (str.in_re x regexA))
(assert (not (str.in_re x regexB)))

(assert (str.in_re Witness regexA))
(assert (not (str.in_re Witness regexB)))
(check-sat)

(reset)








(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const regexB RegLan)
(declare-const x String)


(define-fun Witness () String (str.++ "8" ""))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.opt (re.range "$" "$"))(re.++ (re.union (re.++ ((_ re.loop 1 3) (re.range "0" "9"))(re.++ (re.opt (re.range "," ","))(re.++ (re.* (re.++ ((_ re.loop 3 3) (re.range "0" "9")) (re.opt (re.range "," ","))))(re.++ ((_ re.loop 3 3) (re.range "0" "9")) (re.opt (re.++ (re.range "." ".") ((_ re.loop 0 2) (re.range "0" "9"))))))))(re.union (re.++ ((_ re.loop 1 3) (re.range "0" "9")) (re.opt (re.++ (re.range "." ".") ((_ re.loop 0 2) (re.range "0" "9"))))) (re.++ (re.range "." ".") (re.opt ((_ re.loop 1 2) (re.range "0" "9")))))) (str.to_re ""))))))

(assert (= regexB (re.++ (str.to_re "")(re.++ (re.+ (re.union (re.range "-" ".")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))))(re.++ (re.range "@" "@")(re.++ (re.union ((_ re.loop 1 67) (re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))) (re.++ (re.+ (re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))))(re.++ (re.range "." ".") ((_ re.loop 1 67) (re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))))))(re.++ (re.range "." ".")(re.++ (re.++ ((_ re.loop 2 4) (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))) (re.opt (re.++ (re.range "." ".") ((_ re.loop 2 2) (re.union (re.range "0" "9")(re.union (re.range "A" "A")(re.union (re.range "Z" "Z") (re.range "a" "z")))))))) (str.to_re "")))))))))



(assert (str.in_re x regexA))
(assert (not (str.in_re x regexB)))

(assert (str.in_re Witness regexA))
(assert (not (str.in_re Witness regexB)))
(check-sat)

(reset)








(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const regexB RegLan)
(declare-const x String)


(define-fun Witness () String (str.++ "." (str.++ "@" (str.++ "J" (str.++ "." (str.++ "x" (str.++ "J" "")))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.+ (re.++ (re.+ (re.union (re.range "-" ".")(re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))))(re.++ (re.range "@" "@")(re.++ (re.+ (re.union (re.range "-" ".")(re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))))(re.++ (re.range "." ".") ((_ re.loop 1 25) ((_ re.loop 2 5) (re.union (re.range "A" "Z") (re.range "a" "z")))))))))(re.++ (re.* (re.+ (re.++ (re.+ (re.union (re.range "-" ".")(re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))))(re.++ (re.range "@" "@")(re.++ (re.+ (re.union (re.range "-" ".")(re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))))(re.++ (re.range "." ".") ((_ re.loop 1 25) ((_ re.loop 2 5) (re.union (re.range "A" "Z") (re.range "a" "z")))))))))) (str.to_re ""))))))

(assert (= regexB (re.++ (str.to_re "")(re.++ (re.opt (re.union (re.range "+" "+") (re.range "-" "-")))(re.++ (re.union (re.++ (re.* (re.range "0" "9"))(re.++ (re.opt (re.range "." ".")) (re.+ (re.range "0" "9")))) (re.++ (re.+ (re.range "0" "9"))(re.++ (re.opt (re.range "." ".")) (re.* (re.range "0" "9")))))(re.++ (re.opt (re.++ (re.union (re.range "E" "E") (re.range "e" "e"))(re.++ (re.opt (re.union (re.range "+" "+") (re.range "-" "-"))) (re.+ (re.range "0" "9"))))) (str.to_re "")))))))



(assert (str.in_re x regexA))
(assert (not (str.in_re x regexB)))

(assert (str.in_re Witness regexA))
(assert (not (str.in_re Witness regexB)))
(check-sat)

(reset)








(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const regexB RegLan)
(declare-const x String)


(define-fun Witness () String (str.++ "e" (str.++ "@" (str.++ "j" (str.++ "." (str.++ "f" (str.++ "o" "")))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.+ (re.++ (re.+ (re.union (re.range "-" ".")(re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))))(re.++ (re.range "@" "@")(re.++ (re.+ (re.union (re.range "-" ".")(re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))))(re.++ (re.range "." ".") ((_ re.loop 1 25) ((_ re.loop 2 5) (re.union (re.range "A" "Z") (re.range "a" "z")))))))))(re.++ (re.* (re.+ (re.++ (re.+ (re.union (re.range "-" ".")(re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))))(re.++ (re.range "@" "@")(re.++ (re.+ (re.union (re.range "-" ".")(re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))))(re.++ (re.range "." ".") ((_ re.loop 1 25) ((_ re.loop 2 5) (re.union (re.range "A" "Z") (re.range "a" "z")))))))))) (str.to_re ""))))))

(assert (= regexB (re.++ (str.to_re "")(re.++ (re.opt (re.union ((_ re.loop 2 2) (re.range "A" "Z"))(re.union (re.++ ((_ re.loop 2 2) (re.range "a" "z"))(re.++ (re.range " " " ")(re.++ ((_ re.loop 2 2) (re.range "0" "9"))(re.++ (re.range " " " ") ((_ re.loop 1 2) (re.range "A" "Z")))))) (re.++ ((_ re.loop 1 2) (re.range "a" "z"))(re.++ (re.range " " " ") ((_ re.loop 1 4) (re.range "0" "9")))))))(re.++ (re.opt (re.union ((_ re.loop 3 3) (re.range "A" "Z")) (re.++ ((_ re.loop 3 3) (re.range "a" "z"))(re.++ (re.range " " " ") ((_ re.loop 1 4) (re.range "0" "9")))))) (str.to_re ""))))))



(assert (str.in_re x regexA))
(assert (not (str.in_re x regexB)))

(assert (str.in_re Witness regexA))
(assert (not (str.in_re Witness regexB)))
(check-sat)

(reset)








(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const regexB RegLan)
(declare-const x String)


(define-fun Witness () String (str.++ "." (str.++ "@" (str.++ "\u{aa}" (str.++ "." (str.++ "\u{aa}" (str.++ "." (str.++ "O" (str.++ "5" "")))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.+ (re.union (re.range "-" ".")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))))(re.++ (re.range "@" "@")(re.++ (re.union ((_ re.loop 1 67) (re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))) (re.++ (re.+ (re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))))(re.++ (re.range "." ".") ((_ re.loop 1 67) (re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))))))(re.++ (re.range "." ".")(re.++ (re.++ ((_ re.loop 2 4) (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))) (re.opt (re.++ (re.range "." ".") ((_ re.loop 2 2) (re.union (re.range "0" "9")(re.union (re.range "A" "A")(re.union (re.range "Z" "Z") (re.range "a" "z")))))))) (str.to_re "")))))))))

(assert (= regexB (re.++ (str.to_re "")(re.++ (re.+ (re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))))(re.++ (re.range "@" "@")(re.++ (re.+ (re.++ (re.+ (re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))) (re.range "." ".")))(re.++ (re.+ (re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))) (str.to_re ""))))))))



(assert (str.in_re x regexA))
(assert (not (str.in_re x regexB)))

(assert (str.in_re Witness regexA))
(assert (not (str.in_re Witness regexB)))
(check-sat)

(reset)








(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const regexB RegLan)
(declare-const x String)


(define-fun Witness () String (str.++ "1" (str.++ "@" (str.++ "z" (str.++ "." (str.++ " " (str.++ "x" (str.++ "z" ""))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))(re.++ (re.* (re.++ (re.opt (re.range "-" ".")) (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z"))))))(re.++ (re.range "@" "@")(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z"))))(re.++ (re.* (re.++ (re.opt (re.range "-" ".")) (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z"))))))(re.++ (str.to_re (str.++ "." (str.++ " " "")))(re.++ (re.++ (re.union (re.range "A" "Z") (re.range "a" "z")) (re.+ (re.union (re.range "A" "Z") (re.range "a" "z")))) (str.to_re "")))))))))))

(assert (= regexB (re.++ (str.to_re "")(re.++ (re.+ (re.++ (re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))(re.++ (re.* (re.++ (re.union (re.range "+" "+") (re.range "-" ".")) (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))))(re.++ (re.range "@" "@")(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))(re.++ (re.* (re.++ (re.range "-" ".") (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))))(re.++ (re.range "." ".")(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))) (re.* (re.++ (re.range "-" ".") (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))))))))))))(re.++ (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (re.opt (re.range "," ",")) (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))))))) (str.to_re "")))))



(assert (str.in_re x regexA))
(assert (not (str.in_re x regexB)))

(assert (str.in_re Witness regexA))
(assert (not (str.in_re Witness regexB)))
(check-sat)

(reset)








(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const regexB RegLan)
(declare-const x String)


(define-fun Witness () String (str.++ "8" (str.++ "@" (str.++ "8" (str.++ "." (str.++ "a" ""))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))(re.++ (re.* (re.++ (re.union (re.range "+" "+") (re.range "-" ".")) (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))))(re.++ (re.range "@" "@")(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))(re.++ (re.* (re.++ (re.range "-" ".") (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))))(re.++ (re.range "." ".")(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))(re.++ (re.* (re.++ (re.range "-" ".") (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))))(re.++ (re.* (re.++ (re.union (re.range "," ",") (re.range ";" ";"))(re.++ (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))(re.++ (re.* (re.++ (re.union (re.range "+" "+") (re.range "-" ".")) (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))))(re.++ (re.range "@" "@")(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))(re.++ (re.* (re.++ (re.range "-" ".") (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))))(re.++ (re.range "." ".")(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))) (re.* (re.++ (re.range "-" ".") (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))))))))))))))) (str.to_re "")))))))))))))

(assert (= regexB (re.++ (str.to_re "")(re.++ (re.opt (re.union (re.range "+" "+") (re.range "-" "-")))(re.++ (re.union (re.++ (re.* (re.range "0" "9"))(re.++ (re.opt (re.range "." ".")) (re.+ (re.range "0" "9")))) (re.++ (re.+ (re.range "0" "9"))(re.++ (re.opt (re.range "." ".")) (re.* (re.range "0" "9")))))(re.++ (re.opt (re.++ (re.union (re.range "E" "E") (re.range "e" "e"))(re.++ (re.opt (re.union (re.range "+" "+") (re.range "-" "-"))) (re.+ (re.range "0" "9"))))) (str.to_re "")))))))



(assert (str.in_re x regexA))
(assert (not (str.in_re x regexB)))

(assert (str.in_re Witness regexA))
(assert (not (str.in_re Witness regexB)))
(check-sat)

(reset)








(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const regexB RegLan)
(declare-const x String)


(define-fun Witness () String (str.++ "j" (str.++ "@" (str.++ "I" (str.++ "." (str.++ "m" (str.++ "." (str.++ "k" (str.++ "8" "")))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.+ (re.union (re.range "-" ".")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))))(re.++ (re.range "@" "@")(re.++ (re.union ((_ re.loop 1 67) (re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))) (re.++ (re.+ (re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))))(re.++ (re.range "." ".") ((_ re.loop 1 67) (re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))))))(re.++ (re.range "." ".")(re.++ (re.++ ((_ re.loop 2 4) (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))) (re.opt (re.++ (re.range "." ".") ((_ re.loop 2 2) (re.union (re.range "0" "9")(re.union (re.range "A" "A")(re.union (re.range "Z" "Z") (re.range "a" "z")))))))) (str.to_re "")))))))))

(assert (= regexB (re.++ (str.to_re "")(re.++ (re.opt (re.union ((_ re.loop 2 2) (re.range "A" "Z"))(re.union (re.++ ((_ re.loop 2 2) (re.range "a" "z"))(re.++ (re.range " " " ")(re.++ ((_ re.loop 2 2) (re.range "0" "9"))(re.++ (re.range " " " ") ((_ re.loop 1 2) (re.range "A" "Z")))))) (re.++ ((_ re.loop 1 2) (re.range "a" "z"))(re.++ (re.range " " " ") ((_ re.loop 1 4) (re.range "0" "9")))))))(re.++ (re.opt (re.union ((_ re.loop 3 3) (re.range "A" "Z")) (re.++ ((_ re.loop 3 3) (re.range "a" "z"))(re.++ (re.range " " " ") ((_ re.loop 1 4) (re.range "0" "9")))))) (str.to_re ""))))))



(assert (str.in_re x regexA))
(assert (not (str.in_re x regexB)))

(assert (str.in_re Witness regexA))
(assert (not (str.in_re Witness regexB)))
(check-sat)

(reset)








(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const regexB RegLan)
(declare-const x String)


(define-fun Witness () String (str.++ "O" (str.++ "@" (str.++ "A" (str.++ "." (str.++ "Z" (str.++ "a" "")))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.+ (re.++ (re.+ (re.union (re.range "-" ".")(re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))))(re.++ (re.range "@" "@")(re.++ (re.+ (re.union (re.range "-" ".")(re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))))(re.++ (re.range "." ".") ((_ re.loop 1 25) ((_ re.loop 2 5) (re.union (re.range "A" "Z") (re.range "a" "z")))))))))(re.++ (re.* (re.+ (re.++ (re.+ (re.union (re.range "-" ".")(re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))))(re.++ (re.range "@" "@")(re.++ (re.+ (re.union (re.range "-" ".")(re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))))(re.++ (re.range "." ".") ((_ re.loop 1 25) ((_ re.loop 2 5) (re.union (re.range "A" "Z") (re.range "a" "z")))))))))) (str.to_re ""))))))

(assert (= regexB (re.++ (str.to_re "")(re.++ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))(re.++ (re.* (re.++ (re.opt (re.range "-" ".")) (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z"))))))(re.++ (re.range "@" "@")(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z"))))(re.++ (re.* (re.++ (re.opt (re.range "-" ".")) (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z"))))))(re.++ (str.to_re (str.++ "." (str.++ " " "")))(re.++ (re.++ (re.union (re.range "A" "Z") (re.range "a" "z")) (re.+ (re.union (re.range "A" "Z") (re.range "a" "z")))) (str.to_re "")))))))))))



(assert (str.in_re x regexA))
(assert (not (str.in_re x regexB)))

(assert (str.in_re Witness regexA))
(assert (not (str.in_re Witness regexB)))
(check-sat)

(reset)








(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const regexB RegLan)
(declare-const x String)


(define-fun Witness () String (str.++ "N" (str.++ "@" (str.++ "\u{aa}" (str.++ "." (str.++ "8" (str.++ "," (str.++ "_" (str.++ "@" (str.++ "F" (str.++ "." (str.++ "\u{aa}" ""))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))(re.++ (re.* (re.++ (re.union (re.range "+" "+") (re.range "-" ".")) (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))))(re.++ (re.range "@" "@")(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))(re.++ (re.* (re.++ (re.range "-" ".") (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))))(re.++ (re.range "." ".")(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))(re.++ (re.* (re.++ (re.range "-" ".") (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))))(re.++ (re.* (re.++ (re.union (re.range "," ",") (re.range ";" ";"))(re.++ (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))(re.++ (re.* (re.++ (re.union (re.range "+" "+") (re.range "-" ".")) (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))))(re.++ (re.range "@" "@")(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))(re.++ (re.* (re.++ (re.range "-" ".") (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))))(re.++ (re.range "." ".")(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))) (re.* (re.++ (re.range "-" ".") (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))))))))))))))) (str.to_re "")))))))))))))

(assert (= regexB (re.++ (str.to_re "")(re.++ (re.+ (re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))))(re.++ (re.range "@" "@")(re.++ (re.+ (re.++ (re.+ (re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))) (re.range "." ".")))(re.++ (re.+ (re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))) (str.to_re ""))))))))



(assert (str.in_re x regexA))
(assert (not (str.in_re x regexB)))

(assert (str.in_re Witness regexA))
(assert (not (str.in_re Witness regexB)))
(check-sat)

(reset)








(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const regexB RegLan)
(declare-const x String)


(define-fun Witness () String (str.++ "1" (str.++ "@" (str.++ "\u{df}" (str.++ "." (str.++ "\u{e7}" ""))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.+ (re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))))(re.++ (re.range "@" "@")(re.++ (re.+ (re.++ (re.+ (re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))) (re.range "." ".")))(re.++ (re.+ (re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))) (str.to_re ""))))))))

(assert (= regexB (re.++ (str.to_re "")(re.++ (re.opt (re.range "$" "$"))(re.++ (re.union (re.++ ((_ re.loop 1 3) (re.range "0" "9"))(re.++ (re.opt (re.range "," ","))(re.++ (re.* (re.++ ((_ re.loop 3 3) (re.range "0" "9")) (re.opt (re.range "," ","))))(re.++ ((_ re.loop 3 3) (re.range "0" "9")) (re.opt (re.++ (re.range "." ".") ((_ re.loop 0 2) (re.range "0" "9"))))))))(re.union (re.++ ((_ re.loop 1 3) (re.range "0" "9")) (re.opt (re.++ (re.range "." ".") ((_ re.loop 0 2) (re.range "0" "9"))))) (re.++ (re.range "." ".") (re.opt ((_ re.loop 1 2) (re.range "0" "9")))))) (str.to_re ""))))))



(assert (str.in_re x regexA))
(assert (not (str.in_re x regexB)))

(assert (str.in_re Witness regexA))
(assert (not (str.in_re Witness regexB)))
(check-sat)

(reset)








(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const regexB RegLan)
(declare-const x String)


(define-fun Witness () String (str.++ "9" (str.++ "@" (str.++ "9" (str.++ "." (str.++ "\u{aa}" (str.++ ";" (str.++ "\u{e8}" (str.++ "@" (str.++ "\u{b5}" (str.++ "." (str.++ "H" ""))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))(re.++ (re.* (re.++ (re.union (re.range "+" "+") (re.range "-" ".")) (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))))(re.++ (re.range "@" "@")(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))(re.++ (re.* (re.++ (re.range "-" ".") (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))))(re.++ (re.range "." ".")(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))(re.++ (re.* (re.++ (re.range "-" ".") (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))))(re.++ (re.* (re.++ (re.union (re.range "," ",") (re.range ";" ";"))(re.++ (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))(re.++ (re.* (re.++ (re.union (re.range "+" "+") (re.range "-" ".")) (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))))(re.++ (re.range "@" "@")(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))(re.++ (re.* (re.++ (re.range "-" ".") (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))))(re.++ (re.range "." ".")(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))) (re.* (re.++ (re.range "-" ".") (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))))))))))))))) (str.to_re "")))))))))))))

(assert (= regexB (re.++ (str.to_re "")(re.++ (re.+ (re.++ (re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))(re.++ (re.* (re.++ (re.union (re.range "+" "+") (re.range "-" ".")) (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))))(re.++ (re.range "@" "@")(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))(re.++ (re.* (re.++ (re.range "-" ".") (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))))(re.++ (re.range "." ".")(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))) (re.* (re.++ (re.range "-" ".") (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))))))))))))(re.++ (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (re.opt (re.range "," ",")) (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))))))) (str.to_re "")))))



(assert (str.in_re x regexA))
(assert (not (str.in_re x regexB)))

(assert (str.in_re Witness regexA))
(assert (not (str.in_re Witness regexB)))
(check-sat)

(reset)








(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const regexB RegLan)
(declare-const x String)


(define-fun Witness () String (str.++ "f" (str.++ "@" (str.++ "K" (str.++ "." (str.++ "\u{ee}" ""))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))(re.++ (re.* (re.++ (re.union (re.range "+" "+") (re.range "-" ".")) (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))))(re.++ (re.range "@" "@")(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))(re.++ (re.* (re.++ (re.range "-" ".") (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))))(re.++ (re.range "." ".")(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))(re.++ (re.* (re.++ (re.range "-" ".") (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))))(re.++ (re.* (re.++ (re.union (re.range "," ",") (re.range ";" ";"))(re.++ (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))(re.++ (re.* (re.++ (re.union (re.range "+" "+") (re.range "-" ".")) (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))))(re.++ (re.range "@" "@")(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))(re.++ (re.* (re.++ (re.range "-" ".") (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))))(re.++ (re.range "." ".")(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))) (re.* (re.++ (re.range "-" ".") (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))))))))))))))) (str.to_re "")))))))))))))

(assert (= regexB (re.++ (str.to_re "")(re.++ (re.opt (re.union ((_ re.loop 2 2) (re.range "A" "Z"))(re.union (re.++ ((_ re.loop 2 2) (re.range "a" "z"))(re.++ (re.range " " " ")(re.++ ((_ re.loop 2 2) (re.range "0" "9"))(re.++ (re.range " " " ") ((_ re.loop 1 2) (re.range "A" "Z")))))) (re.++ ((_ re.loop 1 2) (re.range "a" "z"))(re.++ (re.range " " " ") ((_ re.loop 1 4) (re.range "0" "9")))))))(re.++ (re.opt (re.union ((_ re.loop 3 3) (re.range "A" "Z")) (re.++ ((_ re.loop 3 3) (re.range "a" "z"))(re.++ (re.range " " " ") ((_ re.loop 1 4) (re.range "0" "9")))))) (str.to_re ""))))))



(assert (str.in_re x regexA))
(assert (not (str.in_re x regexB)))

(assert (str.in_re Witness regexA))
(assert (not (str.in_re Witness regexB)))
(check-sat)

(reset)








(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const regexB RegLan)
(declare-const x String)


(define-fun Witness () String (str.++ "9" (str.++ "@" (str.++ "f" (str.++ "." (str.++ "H" ""))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.+ (re.++ (re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))(re.++ (re.* (re.++ (re.union (re.range "+" "+") (re.range "-" ".")) (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))))(re.++ (re.range "@" "@")(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))(re.++ (re.* (re.++ (re.range "-" ".") (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))))(re.++ (re.range "." ".")(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))) (re.* (re.++ (re.range "-" ".") (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))))))))))))(re.++ (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (re.opt (re.range "," ",")) (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))))))) (str.to_re "")))))

(assert (= regexB (re.++ (str.to_re "")(re.++ (re.opt (re.union (re.range "+" "+") (re.range "-" "-")))(re.++ (re.union (re.++ (re.* (re.range "0" "9"))(re.++ (re.opt (re.range "." ".")) (re.+ (re.range "0" "9")))) (re.++ (re.+ (re.range "0" "9"))(re.++ (re.opt (re.range "." ".")) (re.* (re.range "0" "9")))))(re.++ (re.opt (re.++ (re.union (re.range "E" "E") (re.range "e" "e"))(re.++ (re.opt (re.union (re.range "+" "+") (re.range "-" "-"))) (re.+ (re.range "0" "9"))))) (str.to_re "")))))))



(assert (str.in_re x regexA))
(assert (not (str.in_re x regexB)))

(assert (str.in_re Witness regexA))
(assert (not (str.in_re Witness regexB)))
(check-sat)

(reset)








(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const regexB RegLan)
(declare-const x String)


(define-fun Witness () String (str.++ "9" (str.++ "@" (str.++ "6" (str.++ "." (str.++ "z" (str.++ "-" (str.++ "." (str.++ "9" (str.++ "Z" ""))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.+ (re.union (re.range "-" ".")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))))(re.++ (re.range "@" "@")(re.++ (re.union ((_ re.loop 1 67) (re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))) (re.++ (re.+ (re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))))(re.++ (re.range "." ".") ((_ re.loop 1 67) (re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))))))(re.++ (re.range "." ".")(re.++ (re.++ ((_ re.loop 2 4) (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))) (re.opt (re.++ (re.range "." ".") ((_ re.loop 2 2) (re.union (re.range "0" "9")(re.union (re.range "A" "A")(re.union (re.range "Z" "Z") (re.range "a" "z")))))))) (str.to_re "")))))))))

(assert (= regexB (re.++ (str.to_re "")(re.++ (re.+ (re.++ (re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))(re.++ (re.* (re.++ (re.union (re.range "+" "+") (re.range "-" ".")) (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))))(re.++ (re.range "@" "@")(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))(re.++ (re.* (re.++ (re.range "-" ".") (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))))(re.++ (re.range "." ".")(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))) (re.* (re.++ (re.range "-" ".") (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))))))))))))(re.++ (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (re.opt (re.range "," ",")) (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))))))) (str.to_re "")))))



(assert (str.in_re x regexA))
(assert (not (str.in_re x regexB)))

(assert (str.in_re Witness regexA))
(assert (not (str.in_re Witness regexB)))
(check-sat)

(reset)








(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const regexB RegLan)
(declare-const x String)


(define-fun Witness () String (str.++ "." (str.++ "@" (str.++ "z" (str.++ "." (str.++ "b" (str.++ "F" "")))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.+ (re.++ (re.+ (re.union (re.range "-" ".")(re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))))(re.++ (re.range "@" "@")(re.++ (re.+ (re.union (re.range "-" ".")(re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))))(re.++ (re.range "." ".") ((_ re.loop 1 25) ((_ re.loop 2 5) (re.union (re.range "A" "Z") (re.range "a" "z")))))))))(re.++ (re.* (re.+ (re.++ (re.+ (re.union (re.range "-" ".")(re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))))(re.++ (re.range "@" "@")(re.++ (re.+ (re.union (re.range "-" ".")(re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))))(re.++ (re.range "." ".") ((_ re.loop 1 25) ((_ re.loop 2 5) (re.union (re.range "A" "Z") (re.range "a" "z")))))))))) (str.to_re ""))))))

(assert (= regexB (re.++ (str.to_re "")(re.++ (re.opt (re.range "$" "$"))(re.++ (re.union (re.++ ((_ re.loop 1 3) (re.range "0" "9"))(re.++ (re.opt (re.range "," ","))(re.++ (re.* (re.++ ((_ re.loop 3 3) (re.range "0" "9")) (re.opt (re.range "," ","))))(re.++ ((_ re.loop 3 3) (re.range "0" "9")) (re.opt (re.++ (re.range "." ".") ((_ re.loop 0 2) (re.range "0" "9"))))))))(re.union (re.++ ((_ re.loop 1 3) (re.range "0" "9")) (re.opt (re.++ (re.range "." ".") ((_ re.loop 0 2) (re.range "0" "9"))))) (re.++ (re.range "." ".") (re.opt ((_ re.loop 1 2) (re.range "0" "9")))))) (str.to_re ""))))))



(assert (str.in_re x regexA))
(assert (not (str.in_re x regexB)))

(assert (str.in_re Witness regexA))
(assert (not (str.in_re Witness regexB)))
(check-sat)

(reset)








(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const regexB RegLan)
(declare-const x String)


(define-fun Witness () String (str.++ "3" (str.++ "+" (str.++ "R" (str.++ "@" (str.++ "d" (str.++ "." (str.++ "H" (str.++ "G" "")))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.* (re.union (re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))) (re.+ (re.range " " " ")))(re.union (re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))) (re.+ (re.range "-" "-")))(re.union (re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))) (re.+ (re.range "." "."))) (re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))) (re.+ (re.range "+" "+")))))))(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z"))))(re.++ (re.range "@" "@")(re.++ (re.* (re.union (re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))) (re.+ (re.range "-" "-"))) (re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))) (re.range "." "."))))(re.++ ((_ re.loop 1 63) (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))(re.++ (re.range "." ".")(re.++ ((_ re.loop 2 6) (re.union (re.range "A" "Z") (re.range "a" "z"))) (str.to_re "")))))))))))

(assert (= regexB (re.++ (str.to_re "")(re.++ (re.+ (re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))))(re.++ (re.range "@" "@")(re.++ (re.+ (re.++ (re.+ (re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))) (re.range "." ".")))(re.++ (re.+ (re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))) (str.to_re ""))))))))



(assert (str.in_re x regexA))
(assert (not (str.in_re x regexB)))

(assert (str.in_re Witness regexA))
(assert (not (str.in_re Witness regexB)))
(check-sat)

(reset)








(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const regexB RegLan)
(declare-const x String)


(define-fun Witness () String (str.++ "t" (str.++ "-" (str.++ "\u{aa}" (str.++ "@" (str.++ "\u{ec}" (str.++ "." (str.++ "\u{ba}" ""))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))(re.++ (re.* (re.++ (re.union (re.range "+" "+") (re.range "-" ".")) (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))))(re.++ (re.range "@" "@")(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))(re.++ (re.* (re.++ (re.range "-" ".") (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))))(re.++ (re.range "." ".")(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))(re.++ (re.* (re.++ (re.range "-" ".") (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))))(re.++ (re.* (re.++ (re.union (re.range "," ",") (re.range ";" ";"))(re.++ (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))(re.++ (re.* (re.++ (re.union (re.range "+" "+") (re.range "-" ".")) (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))))(re.++ (re.range "@" "@")(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))(re.++ (re.* (re.++ (re.range "-" ".") (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))))(re.++ (re.range "." ".")(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))) (re.* (re.++ (re.range "-" ".") (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))))))))))))))) (str.to_re "")))))))))))))

(assert (= regexB (re.++ (str.to_re "")(re.++ (re.* (re.union (re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))) (re.+ (re.range " " " ")))(re.union (re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))) (re.+ (re.range "-" "-")))(re.union (re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))) (re.+ (re.range "." "."))) (re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))) (re.+ (re.range "+" "+")))))))(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z"))))(re.++ (re.range "@" "@")(re.++ (re.* (re.union (re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))) (re.+ (re.range "-" "-"))) (re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))) (re.range "." "."))))(re.++ ((_ re.loop 1 63) (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))(re.++ (re.range "." ".")(re.++ ((_ re.loop 2 6) (re.union (re.range "A" "Z") (re.range "a" "z"))) (str.to_re "")))))))))))



(assert (str.in_re x regexA))
(assert (not (str.in_re x regexB)))

(assert (str.in_re Witness regexA))
(assert (not (str.in_re Witness regexB)))
(check-sat)

(reset)








(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const regexB RegLan)
(declare-const x String)


(define-fun Witness () String (str.++ "1" (str.++ "@" (str.++ "5" (str.++ "." (str.++ "M" (str.++ "z" "")))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.* (re.union (re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))) (re.+ (re.range " " " ")))(re.union (re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))) (re.+ (re.range "-" "-")))(re.union (re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))) (re.+ (re.range "." "."))) (re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))) (re.+ (re.range "+" "+")))))))(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z"))))(re.++ (re.range "@" "@")(re.++ (re.* (re.union (re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))) (re.+ (re.range "-" "-"))) (re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))) (re.range "." "."))))(re.++ ((_ re.loop 1 63) (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))(re.++ (re.range "." ".")(re.++ ((_ re.loop 2 6) (re.union (re.range "A" "Z") (re.range "a" "z"))) (str.to_re "")))))))))))

(assert (= regexB (re.++ (str.to_re "")(re.++ (re.opt (re.union (re.range "+" "+") (re.range "-" "-")))(re.++ (re.union (re.++ (re.* (re.range "0" "9"))(re.++ (re.opt (re.range "." ".")) (re.+ (re.range "0" "9")))) (re.++ (re.+ (re.range "0" "9"))(re.++ (re.opt (re.range "." ".")) (re.* (re.range "0" "9")))))(re.++ (re.opt (re.++ (re.union (re.range "E" "E") (re.range "e" "e"))(re.++ (re.opt (re.union (re.range "+" "+") (re.range "-" "-"))) (re.+ (re.range "0" "9"))))) (str.to_re "")))))))



(assert (str.in_re x regexA))
(assert (not (str.in_re x regexB)))

(assert (str.in_re Witness regexA))
(assert (not (str.in_re Witness regexB)))
(check-sat)

(reset)








(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const regexB RegLan)
(declare-const x String)


(define-fun Witness () String (str.++ "5" (str.++ "@" (str.++ "X" (str.++ "." (str.++ "B" (str.++ "V" (str.++ "." (str.++ "n" (str.++ "@" (str.++ "2" (str.++ "." (str.++ "X" (str.++ "S" (str.++ "." (str.++ "B" (str.++ "@" (str.++ "H" (str.++ "." (str.++ "." (str.++ "d" (str.++ "f" ""))))))))))))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.+ (re.++ (re.+ (re.union (re.range "-" ".")(re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))))(re.++ (re.range "@" "@")(re.++ (re.+ (re.union (re.range "-" ".")(re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))))(re.++ (re.range "." ".") ((_ re.loop 1 25) ((_ re.loop 2 5) (re.union (re.range "A" "Z") (re.range "a" "z")))))))))(re.++ (re.* (re.+ (re.++ (re.+ (re.union (re.range "-" ".")(re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))))(re.++ (re.range "@" "@")(re.++ (re.+ (re.union (re.range "-" ".")(re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))))(re.++ (re.range "." ".") ((_ re.loop 1 25) ((_ re.loop 2 5) (re.union (re.range "A" "Z") (re.range "a" "z")))))))))) (str.to_re ""))))))

(assert (= regexB (re.++ (str.to_re "")(re.++ (re.+ (re.++ (re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))(re.++ (re.* (re.++ (re.union (re.range "+" "+") (re.range "-" ".")) (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))))(re.++ (re.range "@" "@")(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))(re.++ (re.* (re.++ (re.range "-" ".") (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))))(re.++ (re.range "." ".")(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))) (re.* (re.++ (re.range "-" ".") (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))))))))))))(re.++ (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (re.opt (re.range "," ",")) (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))))))) (str.to_re "")))))



(assert (str.in_re x regexA))
(assert (not (str.in_re x regexB)))

(assert (str.in_re Witness regexA))
(assert (not (str.in_re Witness regexB)))
(check-sat)

(reset)








(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const regexB RegLan)
(declare-const x String)


(define-fun Witness () String (str.++ "8" (str.++ "@" (str.++ "B" (str.++ "." (str.++ "x" (str.++ "X" (str.++ "." (str.++ "@" (str.++ "." (str.++ "." (str.++ "Z" (str.++ "H" "")))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.+ (re.++ (re.+ (re.union (re.range "-" ".")(re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))))(re.++ (re.range "@" "@")(re.++ (re.+ (re.union (re.range "-" ".")(re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))))(re.++ (re.range "." ".") ((_ re.loop 1 25) ((_ re.loop 2 5) (re.union (re.range "A" "Z") (re.range "a" "z")))))))))(re.++ (re.* (re.+ (re.++ (re.+ (re.union (re.range "-" ".")(re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))))(re.++ (re.range "@" "@")(re.++ (re.+ (re.union (re.range "-" ".")(re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))))(re.++ (re.range "." ".") ((_ re.loop 1 25) ((_ re.loop 2 5) (re.union (re.range "A" "Z") (re.range "a" "z")))))))))) (str.to_re ""))))))

(assert (= regexB (re.++ (str.to_re "")(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))(re.++ (re.* (re.++ (re.union (re.range "+" "+") (re.range "-" ".")) (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))))(re.++ (re.range "@" "@")(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))(re.++ (re.* (re.++ (re.range "-" ".") (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))))(re.++ (re.range "." ".")(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))(re.++ (re.* (re.++ (re.range "-" ".") (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))))(re.++ (re.* (re.++ (re.union (re.range "," ",") (re.range ";" ";"))(re.++ (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))(re.++ (re.* (re.++ (re.union (re.range "+" "+") (re.range "-" ".")) (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))))(re.++ (re.range "@" "@")(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))(re.++ (re.* (re.++ (re.range "-" ".") (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))))(re.++ (re.range "." ".")(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))) (re.* (re.++ (re.range "-" ".") (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))))))))))))))) (str.to_re "")))))))))))))



(assert (str.in_re x regexA))
(assert (not (str.in_re x regexB)))

(assert (str.in_re Witness regexA))
(assert (not (str.in_re Witness regexB)))
(check-sat)

(reset)








(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const regexB RegLan)
(declare-const x String)


(define-fun Witness () String (str.++ "\u{e0}" (str.++ "@" (str.++ "0" (str.++ "." (str.++ "-" ""))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.+ (re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))))(re.++ (re.range "@" "@")(re.++ (re.+ (re.++ (re.+ (re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))) (re.range "." ".")))(re.++ (re.+ (re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))) (str.to_re ""))))))))

(assert (= regexB (re.++ (str.to_re "")(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))(re.++ (re.* (re.++ (re.union (re.range "+" "+") (re.range "-" ".")) (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))))(re.++ (re.range "@" "@")(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))(re.++ (re.* (re.++ (re.range "-" ".") (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))))(re.++ (re.range "." ".")(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))(re.++ (re.* (re.++ (re.range "-" ".") (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))))(re.++ (re.* (re.++ (re.union (re.range "," ",") (re.range ";" ";"))(re.++ (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))(re.++ (re.* (re.++ (re.union (re.range "+" "+") (re.range "-" ".")) (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))))(re.++ (re.range "@" "@")(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))(re.++ (re.* (re.++ (re.range "-" ".") (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))))(re.++ (re.range "." ".")(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))) (re.* (re.++ (re.range "-" ".") (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))))))))))))))) (str.to_re "")))))))))))))



(assert (str.in_re x regexA))
(assert (not (str.in_re x regexB)))

(assert (str.in_re Witness regexA))
(assert (not (str.in_re Witness regexB)))
(check-sat)

(reset)








(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const regexB RegLan)
(declare-const x String)


(define-fun Witness () String (str.++ "." ""))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.opt (re.range "$" "$"))(re.++ (re.union (re.++ ((_ re.loop 1 3) (re.range "0" "9"))(re.++ (re.opt (re.range "," ","))(re.++ (re.* (re.++ ((_ re.loop 3 3) (re.range "0" "9")) (re.opt (re.range "," ","))))(re.++ ((_ re.loop 3 3) (re.range "0" "9")) (re.opt (re.++ (re.range "." ".") ((_ re.loop 0 2) (re.range "0" "9"))))))))(re.union (re.++ ((_ re.loop 1 3) (re.range "0" "9")) (re.opt (re.++ (re.range "." ".") ((_ re.loop 0 2) (re.range "0" "9"))))) (re.++ (re.range "." ".") (re.opt ((_ re.loop 1 2) (re.range "0" "9")))))) (str.to_re ""))))))

(assert (= regexB (re.++ (str.to_re "")(re.++ (re.opt (re.union (re.range "+" "+") (re.range "-" "-")))(re.++ (re.union (re.++ (re.* (re.range "0" "9"))(re.++ (re.opt (re.range "." ".")) (re.+ (re.range "0" "9")))) (re.++ (re.+ (re.range "0" "9"))(re.++ (re.opt (re.range "." ".")) (re.* (re.range "0" "9")))))(re.++ (re.opt (re.++ (re.union (re.range "E" "E") (re.range "e" "e"))(re.++ (re.opt (re.union (re.range "+" "+") (re.range "-" "-"))) (re.+ (re.range "0" "9"))))) (str.to_re "")))))))



(assert (str.in_re x regexA))
(assert (not (str.in_re x regexB)))

(assert (str.in_re Witness regexA))
(assert (not (str.in_re Witness regexB)))
(check-sat)

(reset)








(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const regexB RegLan)
(declare-const x String)


(define-fun Witness () String (str.++ "3" ""))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.opt (re.union (re.range "+" "+") (re.range "-" "-")))(re.++ (re.union (re.++ (re.* (re.range "0" "9"))(re.++ (re.opt (re.range "." ".")) (re.+ (re.range "0" "9")))) (re.++ (re.+ (re.range "0" "9"))(re.++ (re.opt (re.range "." ".")) (re.* (re.range "0" "9")))))(re.++ (re.opt (re.++ (re.union (re.range "E" "E") (re.range "e" "e"))(re.++ (re.opt (re.union (re.range "+" "+") (re.range "-" "-"))) (re.+ (re.range "0" "9"))))) (str.to_re "")))))))

(assert (= regexB (re.++ (str.to_re "")(re.++ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))(re.++ (re.* (re.++ (re.opt (re.range "-" ".")) (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z"))))))(re.++ (re.range "@" "@")(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z"))))(re.++ (re.* (re.++ (re.opt (re.range "-" ".")) (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z"))))))(re.++ (str.to_re (str.++ "." (str.++ " " "")))(re.++ (re.++ (re.union (re.range "A" "Z") (re.range "a" "z")) (re.+ (re.union (re.range "A" "Z") (re.range "a" "z")))) (str.to_re "")))))))))))



(assert (str.in_re x regexA))
(assert (not (str.in_re x regexB)))

(assert (str.in_re Witness regexA))
(assert (not (str.in_re Witness regexB)))
(check-sat)

(reset)








(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const regexB RegLan)
(declare-const x String)


(define-fun Witness () String "")

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.opt (re.union ((_ re.loop 2 2) (re.range "A" "Z"))(re.union (re.++ ((_ re.loop 2 2) (re.range "a" "z"))(re.++ (re.range " " " ")(re.++ ((_ re.loop 2 2) (re.range "0" "9"))(re.++ (re.range " " " ") ((_ re.loop 1 2) (re.range "A" "Z")))))) (re.++ ((_ re.loop 1 2) (re.range "a" "z"))(re.++ (re.range " " " ") ((_ re.loop 1 4) (re.range "0" "9")))))))(re.++ (re.opt (re.union ((_ re.loop 3 3) (re.range "A" "Z")) (re.++ ((_ re.loop 3 3) (re.range "a" "z"))(re.++ (re.range " " " ") ((_ re.loop 1 4) (re.range "0" "9")))))) (str.to_re ""))))))

(assert (= regexB (re.++ (str.to_re "")(re.++ (re.+ (re.++ (re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))(re.++ (re.* (re.++ (re.union (re.range "+" "+") (re.range "-" ".")) (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))))(re.++ (re.range "@" "@")(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))(re.++ (re.* (re.++ (re.range "-" ".") (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))))(re.++ (re.range "." ".")(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))) (re.* (re.++ (re.range "-" ".") (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))))))))))))(re.++ (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (re.opt (re.range "," ",")) (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))))))) (str.to_re "")))))



(assert (str.in_re x regexA))
(assert (not (str.in_re x regexB)))

(assert (str.in_re Witness regexA))
(assert (not (str.in_re Witness regexB)))
(check-sat)

(reset)








(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const regexB RegLan)
(declare-const x String)


(define-fun Witness () String "")

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.opt (re.union ((_ re.loop 2 2) (re.range "A" "Z"))(re.union (re.++ ((_ re.loop 2 2) (re.range "a" "z"))(re.++ (re.range " " " ")(re.++ ((_ re.loop 2 2) (re.range "0" "9"))(re.++ (re.range " " " ") ((_ re.loop 1 2) (re.range "A" "Z")))))) (re.++ ((_ re.loop 1 2) (re.range "a" "z"))(re.++ (re.range " " " ") ((_ re.loop 1 4) (re.range "0" "9")))))))(re.++ (re.opt (re.union ((_ re.loop 3 3) (re.range "A" "Z")) (re.++ ((_ re.loop 3 3) (re.range "a" "z"))(re.++ (re.range " " " ") ((_ re.loop 1 4) (re.range "0" "9")))))) (str.to_re ""))))))

(assert (= regexB (re.++ (str.to_re "")(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))(re.++ (re.* (re.++ (re.union (re.range "+" "+") (re.range "-" ".")) (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))))(re.++ (re.range "@" "@")(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))(re.++ (re.* (re.++ (re.range "-" ".") (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))))(re.++ (re.range "." ".")(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))(re.++ (re.* (re.++ (re.range "-" ".") (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))))(re.++ (re.* (re.++ (re.union (re.range "," ",") (re.range ";" ";"))(re.++ (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))(re.++ (re.* (re.++ (re.union (re.range "+" "+") (re.range "-" ".")) (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))))(re.++ (re.range "@" "@")(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))(re.++ (re.* (re.++ (re.range "-" ".") (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))))(re.++ (re.range "." ".")(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))) (re.* (re.++ (re.range "-" ".") (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))))))))))))))) (str.to_re "")))))))))))))



(assert (str.in_re x regexA))
(assert (not (str.in_re x regexB)))

(assert (str.in_re Witness regexA))
(assert (not (str.in_re Witness regexB)))
(check-sat)

(reset)








(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const regexB RegLan)
(declare-const x String)


(define-fun Witness () String (str.++ "." (str.++ "4" (str.++ "1" (str.++ "7" "")))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.opt (re.union (re.range "+" "+") (re.range "-" "-")))(re.++ (re.union (re.++ (re.* (re.range "0" "9"))(re.++ (re.opt (re.range "." ".")) (re.+ (re.range "0" "9")))) (re.++ (re.+ (re.range "0" "9"))(re.++ (re.opt (re.range "." ".")) (re.* (re.range "0" "9")))))(re.++ (re.opt (re.++ (re.union (re.range "E" "E") (re.range "e" "e"))(re.++ (re.opt (re.union (re.range "+" "+") (re.range "-" "-"))) (re.+ (re.range "0" "9"))))) (str.to_re "")))))))

(assert (= regexB (re.++ (str.to_re "")(re.++ (re.opt (re.range "$" "$"))(re.++ (re.union (re.++ ((_ re.loop 1 3) (re.range "0" "9"))(re.++ (re.opt (re.range "," ","))(re.++ (re.* (re.++ ((_ re.loop 3 3) (re.range "0" "9")) (re.opt (re.range "," ","))))(re.++ ((_ re.loop 3 3) (re.range "0" "9")) (re.opt (re.++ (re.range "." ".") ((_ re.loop 0 2) (re.range "0" "9"))))))))(re.union (re.++ ((_ re.loop 1 3) (re.range "0" "9")) (re.opt (re.++ (re.range "." ".") ((_ re.loop 0 2) (re.range "0" "9"))))) (re.++ (re.range "." ".") (re.opt ((_ re.loop 1 2) (re.range "0" "9")))))) (str.to_re ""))))))



(assert (str.in_re x regexA))
(assert (not (str.in_re x regexB)))

(assert (str.in_re Witness regexA))
(assert (not (str.in_re Witness regexB)))
(check-sat)

(reset)








(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const regexB RegLan)
(declare-const x String)


(define-fun Witness () String (str.++ "9" ""))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.opt (re.union (re.range "+" "+") (re.range "-" "-")))(re.++ (re.union (re.++ (re.* (re.range "0" "9"))(re.++ (re.opt (re.range "." ".")) (re.+ (re.range "0" "9")))) (re.++ (re.+ (re.range "0" "9"))(re.++ (re.opt (re.range "." ".")) (re.* (re.range "0" "9")))))(re.++ (re.opt (re.++ (re.union (re.range "E" "E") (re.range "e" "e"))(re.++ (re.opt (re.union (re.range "+" "+") (re.range "-" "-"))) (re.+ (re.range "0" "9"))))) (str.to_re "")))))))

(assert (= regexB (re.++ (str.to_re "")(re.++ (re.+ (re.++ (re.+ (re.union (re.range "-" ".")(re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))))(re.++ (re.range "@" "@")(re.++ (re.+ (re.union (re.range "-" ".")(re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))))(re.++ (re.range "." ".") ((_ re.loop 1 25) ((_ re.loop 2 5) (re.union (re.range "A" "Z") (re.range "a" "z")))))))))(re.++ (re.* (re.+ (re.++ (re.+ (re.union (re.range "-" ".")(re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))))(re.++ (re.range "@" "@")(re.++ (re.+ (re.union (re.range "-" ".")(re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))))(re.++ (re.range "." ".") ((_ re.loop 1 25) ((_ re.loop 2 5) (re.union (re.range "A" "Z") (re.range "a" "z")))))))))) (str.to_re ""))))))



(assert (str.in_re x regexA))
(assert (not (str.in_re x regexB)))

(assert (str.in_re Witness regexA))
(assert (not (str.in_re Witness regexB)))
(check-sat)

(reset)








(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const regexB RegLan)
(declare-const x String)


(define-fun Witness () String (str.++ "." (str.++ "@" (str.++ "m" (str.++ "." (str.++ "-" (str.++ "." (str.++ "z" (str.++ "G" "")))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.+ (re.union (re.range "-" ".")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))))(re.++ (re.range "@" "@")(re.++ (re.union ((_ re.loop 1 67) (re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))) (re.++ (re.+ (re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))))(re.++ (re.range "." ".") ((_ re.loop 1 67) (re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))))))(re.++ (re.range "." ".")(re.++ (re.++ ((_ re.loop 2 4) (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))) (re.opt (re.++ (re.range "." ".") ((_ re.loop 2 2) (re.union (re.range "0" "9")(re.union (re.range "A" "A")(re.union (re.range "Z" "Z") (re.range "a" "z")))))))) (str.to_re "")))))))))

(assert (= regexB (re.++ (str.to_re "")(re.++ (re.opt (re.union (re.range "+" "+") (re.range "-" "-")))(re.++ (re.union (re.++ (re.* (re.range "0" "9"))(re.++ (re.opt (re.range "." ".")) (re.+ (re.range "0" "9")))) (re.++ (re.+ (re.range "0" "9"))(re.++ (re.opt (re.range "." ".")) (re.* (re.range "0" "9")))))(re.++ (re.opt (re.++ (re.union (re.range "E" "E") (re.range "e" "e"))(re.++ (re.opt (re.union (re.range "+" "+") (re.range "-" "-"))) (re.+ (re.range "0" "9"))))) (str.to_re "")))))))



(assert (str.in_re x regexA))
(assert (not (str.in_re x regexB)))

(assert (str.in_re Witness regexA))
(assert (not (str.in_re Witness regexB)))
(check-sat)

(reset)








(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const regexB RegLan)
(declare-const x String)


(define-fun Witness () String (str.++ "." ""))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.opt (re.range "$" "$"))(re.++ (re.union (re.++ ((_ re.loop 1 3) (re.range "0" "9"))(re.++ (re.opt (re.range "," ","))(re.++ (re.* (re.++ ((_ re.loop 3 3) (re.range "0" "9")) (re.opt (re.range "," ","))))(re.++ ((_ re.loop 3 3) (re.range "0" "9")) (re.opt (re.++ (re.range "." ".") ((_ re.loop 0 2) (re.range "0" "9"))))))))(re.union (re.++ ((_ re.loop 1 3) (re.range "0" "9")) (re.opt (re.++ (re.range "." ".") ((_ re.loop 0 2) (re.range "0" "9"))))) (re.++ (re.range "." ".") (re.opt ((_ re.loop 1 2) (re.range "0" "9")))))) (str.to_re ""))))))

(assert (= regexB (re.++ (str.to_re "")(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))(re.++ (re.* (re.++ (re.union (re.range "+" "+") (re.range "-" ".")) (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))))(re.++ (re.range "@" "@")(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))(re.++ (re.* (re.++ (re.range "-" ".") (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))))(re.++ (re.range "." ".")(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))(re.++ (re.* (re.++ (re.range "-" ".") (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))))(re.++ (re.* (re.++ (re.union (re.range "," ",") (re.range ";" ";"))(re.++ (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))(re.++ (re.* (re.++ (re.union (re.range "+" "+") (re.range "-" ".")) (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))))(re.++ (re.range "@" "@")(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))(re.++ (re.* (re.++ (re.range "-" ".") (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))))(re.++ (re.range "." ".")(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))) (re.* (re.++ (re.range "-" ".") (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))))))))))))))) (str.to_re "")))))))))))))



(assert (str.in_re x regexA))
(assert (not (str.in_re x regexB)))

(assert (str.in_re Witness regexA))
(assert (not (str.in_re Witness regexB)))
(check-sat)

(reset)








(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const regexB RegLan)
(declare-const x String)


(define-fun Witness () String "")

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.opt (re.union ((_ re.loop 2 2) (re.range "A" "Z"))(re.union (re.++ ((_ re.loop 2 2) (re.range "a" "z"))(re.++ (re.range " " " ")(re.++ ((_ re.loop 2 2) (re.range "0" "9"))(re.++ (re.range " " " ") ((_ re.loop 1 2) (re.range "A" "Z")))))) (re.++ ((_ re.loop 1 2) (re.range "a" "z"))(re.++ (re.range " " " ") ((_ re.loop 1 4) (re.range "0" "9")))))))(re.++ (re.opt (re.union ((_ re.loop 3 3) (re.range "A" "Z")) (re.++ ((_ re.loop 3 3) (re.range "a" "z"))(re.++ (re.range " " " ") ((_ re.loop 1 4) (re.range "0" "9")))))) (str.to_re ""))))))

(assert (= regexB (re.++ (str.to_re "")(re.++ (re.* (re.union (re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))) (re.+ (re.range " " " ")))(re.union (re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))) (re.+ (re.range "-" "-")))(re.union (re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))) (re.+ (re.range "." "."))) (re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))) (re.+ (re.range "+" "+")))))))(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z"))))(re.++ (re.range "@" "@")(re.++ (re.* (re.union (re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))) (re.+ (re.range "-" "-"))) (re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))) (re.range "." "."))))(re.++ ((_ re.loop 1 63) (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))(re.++ (re.range "." ".")(re.++ ((_ re.loop 2 6) (re.union (re.range "A" "Z") (re.range "a" "z"))) (str.to_re "")))))))))))



(assert (str.in_re x regexA))
(assert (not (str.in_re x regexB)))

(assert (str.in_re Witness regexA))
(assert (not (str.in_re Witness regexB)))
(check-sat)

(reset)








(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const regexB RegLan)
(declare-const x String)


(define-fun Witness () String (str.++ "9" ""))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.opt (re.union (re.range "+" "+") (re.range "-" "-")))(re.++ (re.union (re.++ (re.* (re.range "0" "9"))(re.++ (re.opt (re.range "." ".")) (re.+ (re.range "0" "9")))) (re.++ (re.+ (re.range "0" "9"))(re.++ (re.opt (re.range "." ".")) (re.* (re.range "0" "9")))))(re.++ (re.opt (re.++ (re.union (re.range "E" "E") (re.range "e" "e"))(re.++ (re.opt (re.union (re.range "+" "+") (re.range "-" "-"))) (re.+ (re.range "0" "9"))))) (str.to_re "")))))))

(assert (= regexB (re.++ (str.to_re "")(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))(re.++ (re.* (re.++ (re.union (re.range "+" "+") (re.range "-" ".")) (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))))(re.++ (re.range "@" "@")(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))(re.++ (re.* (re.++ (re.range "-" ".") (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))))(re.++ (re.range "." ".")(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))(re.++ (re.* (re.++ (re.range "-" ".") (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))))(re.++ (re.* (re.++ (re.union (re.range "," ",") (re.range ";" ";"))(re.++ (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))(re.++ (re.* (re.++ (re.union (re.range "+" "+") (re.range "-" ".")) (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))))(re.++ (re.range "@" "@")(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))(re.++ (re.* (re.++ (re.range "-" ".") (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))))(re.++ (re.range "." ".")(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))) (re.* (re.++ (re.range "-" ".") (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))))))))))))))) (str.to_re "")))))))))))))



(assert (str.in_re x regexA))
(assert (not (str.in_re x regexB)))

(assert (str.in_re Witness regexA))
(assert (not (str.in_re Witness regexB)))
(check-sat)

(reset)








(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const regexB RegLan)
(declare-const x String)


(define-fun Witness () String (str.++ "." ""))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.opt (re.range "$" "$"))(re.++ (re.union (re.++ ((_ re.loop 1 3) (re.range "0" "9"))(re.++ (re.opt (re.range "," ","))(re.++ (re.* (re.++ ((_ re.loop 3 3) (re.range "0" "9")) (re.opt (re.range "," ","))))(re.++ ((_ re.loop 3 3) (re.range "0" "9")) (re.opt (re.++ (re.range "." ".") ((_ re.loop 0 2) (re.range "0" "9"))))))))(re.union (re.++ ((_ re.loop 1 3) (re.range "0" "9")) (re.opt (re.++ (re.range "." ".") ((_ re.loop 0 2) (re.range "0" "9"))))) (re.++ (re.range "." ".") (re.opt ((_ re.loop 1 2) (re.range "0" "9")))))) (str.to_re ""))))))

(assert (= regexB (re.++ (str.to_re "")(re.++ (re.+ (re.++ (re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))(re.++ (re.* (re.++ (re.union (re.range "+" "+") (re.range "-" ".")) (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))))(re.++ (re.range "@" "@")(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))(re.++ (re.* (re.++ (re.range "-" ".") (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))))(re.++ (re.range "." ".")(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))) (re.* (re.++ (re.range "-" ".") (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))))))))))))(re.++ (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (re.opt (re.range "," ",")) (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))))))) (str.to_re "")))))



(assert (str.in_re x regexA))
(assert (not (str.in_re x regexB)))

(assert (str.in_re Witness regexA))
(assert (not (str.in_re Witness regexB)))
(check-sat)

(reset)








(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const regexB RegLan)
(declare-const x String)


(define-fun Witness () String (str.++ "." ""))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.opt (re.range "$" "$"))(re.++ (re.union (re.++ ((_ re.loop 1 3) (re.range "0" "9"))(re.++ (re.opt (re.range "," ","))(re.++ (re.* (re.++ ((_ re.loop 3 3) (re.range "0" "9")) (re.opt (re.range "," ","))))(re.++ ((_ re.loop 3 3) (re.range "0" "9")) (re.opt (re.++ (re.range "." ".") ((_ re.loop 0 2) (re.range "0" "9"))))))))(re.union (re.++ ((_ re.loop 1 3) (re.range "0" "9")) (re.opt (re.++ (re.range "." ".") ((_ re.loop 0 2) (re.range "0" "9"))))) (re.++ (re.range "." ".") (re.opt ((_ re.loop 1 2) (re.range "0" "9")))))) (str.to_re ""))))))

(assert (= regexB (re.++ (str.to_re "")(re.++ (re.* (re.union (re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))) (re.+ (re.range " " " ")))(re.union (re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))) (re.+ (re.range "-" "-")))(re.union (re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))) (re.+ (re.range "." "."))) (re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))) (re.+ (re.range "+" "+")))))))(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z"))))(re.++ (re.range "@" "@")(re.++ (re.* (re.union (re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))) (re.+ (re.range "-" "-"))) (re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))) (re.range "." "."))))(re.++ ((_ re.loop 1 63) (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))(re.++ (re.range "." ".")(re.++ ((_ re.loop 2 6) (re.union (re.range "A" "Z") (re.range "a" "z"))) (str.to_re "")))))))))))



(assert (str.in_re x regexA))
(assert (not (str.in_re x regexB)))

(assert (str.in_re Witness regexA))
(assert (not (str.in_re Witness regexB)))
(check-sat)

(reset)








(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const regexB RegLan)
(declare-const x String)


(define-fun Witness () String (str.++ "Y" (str.++ "-" (str.++ "@" (str.++ "b" (str.++ "." (str.++ "Y" (str.++ "O" ""))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.+ (re.++ (re.+ (re.union (re.range "-" ".")(re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))))(re.++ (re.range "@" "@")(re.++ (re.+ (re.union (re.range "-" ".")(re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))))(re.++ (re.range "." ".") ((_ re.loop 1 25) ((_ re.loop 2 5) (re.union (re.range "A" "Z") (re.range "a" "z")))))))))(re.++ (re.* (re.+ (re.++ (re.+ (re.union (re.range "-" ".")(re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))))(re.++ (re.range "@" "@")(re.++ (re.+ (re.union (re.range "-" ".")(re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))))(re.++ (re.range "." ".") ((_ re.loop 1 25) ((_ re.loop 2 5) (re.union (re.range "A" "Z") (re.range "a" "z")))))))))) (str.to_re ""))))))

(assert (= regexB (re.++ (str.to_re "")(re.++ (re.* (re.union (re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))) (re.+ (re.range " " " ")))(re.union (re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))) (re.+ (re.range "-" "-")))(re.union (re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))) (re.+ (re.range "." "."))) (re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))) (re.+ (re.range "+" "+")))))))(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z"))))(re.++ (re.range "@" "@")(re.++ (re.* (re.union (re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))) (re.+ (re.range "-" "-"))) (re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))) (re.range "." "."))))(re.++ ((_ re.loop 1 63) (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))(re.++ (re.range "." ".")(re.++ ((_ re.loop 2 6) (re.union (re.range "A" "Z") (re.range "a" "z"))) (str.to_re "")))))))))))



(assert (str.in_re x regexA))
(assert (not (str.in_re x regexB)))

(assert (str.in_re Witness regexA))
(assert (not (str.in_re Witness regexB)))
(check-sat)

(reset)








(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const regexB RegLan)
(declare-const x String)


(define-fun Witness () String (str.++ "G" (str.++ "@" (str.++ "o" (str.++ "." (str.++ " " (str.++ "N" (str.++ "q" ""))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))(re.++ (re.* (re.++ (re.opt (re.range "-" ".")) (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z"))))))(re.++ (re.range "@" "@")(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z"))))(re.++ (re.* (re.++ (re.opt (re.range "-" ".")) (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z"))))))(re.++ (str.to_re (str.++ "." (str.++ " " "")))(re.++ (re.++ (re.union (re.range "A" "Z") (re.range "a" "z")) (re.+ (re.union (re.range "A" "Z") (re.range "a" "z")))) (str.to_re "")))))))))))

(assert (= regexB (re.++ (str.to_re "")(re.++ (re.* (re.union (re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))) (re.+ (re.range " " " ")))(re.union (re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))) (re.+ (re.range "-" "-")))(re.union (re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))) (re.+ (re.range "." "."))) (re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))) (re.+ (re.range "+" "+")))))))(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z"))))(re.++ (re.range "@" "@")(re.++ (re.* (re.union (re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))) (re.+ (re.range "-" "-"))) (re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))) (re.range "." "."))))(re.++ ((_ re.loop 1 63) (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))(re.++ (re.range "." ".")(re.++ ((_ re.loop 2 6) (re.union (re.range "A" "Z") (re.range "a" "z"))) (str.to_re "")))))))))))



(assert (str.in_re x regexA))
(assert (not (str.in_re x regexB)))

(assert (str.in_re Witness regexA))
(assert (not (str.in_re Witness regexB)))
(check-sat)

(reset)








(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const regexB RegLan)
(declare-const x String)


(define-fun Witness () String "")

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.opt (re.union ((_ re.loop 2 2) (re.range "A" "Z"))(re.union (re.++ ((_ re.loop 2 2) (re.range "a" "z"))(re.++ (re.range " " " ")(re.++ ((_ re.loop 2 2) (re.range "0" "9"))(re.++ (re.range " " " ") ((_ re.loop 1 2) (re.range "A" "Z")))))) (re.++ ((_ re.loop 1 2) (re.range "a" "z"))(re.++ (re.range " " " ") ((_ re.loop 1 4) (re.range "0" "9")))))))(re.++ (re.opt (re.union ((_ re.loop 3 3) (re.range "A" "Z")) (re.++ ((_ re.loop 3 3) (re.range "a" "z"))(re.++ (re.range " " " ") ((_ re.loop 1 4) (re.range "0" "9")))))) (str.to_re ""))))))

(assert (= regexB (re.++ (str.to_re "")(re.++ (re.opt (re.union (re.range "+" "+") (re.range "-" "-")))(re.++ (re.union (re.++ (re.* (re.range "0" "9"))(re.++ (re.opt (re.range "." ".")) (re.+ (re.range "0" "9")))) (re.++ (re.+ (re.range "0" "9"))(re.++ (re.opt (re.range "." ".")) (re.* (re.range "0" "9")))))(re.++ (re.opt (re.++ (re.union (re.range "E" "E") (re.range "e" "e"))(re.++ (re.opt (re.union (re.range "+" "+") (re.range "-" "-"))) (re.+ (re.range "0" "9"))))) (str.to_re "")))))))



(assert (str.in_re x regexA))
(assert (not (str.in_re x regexB)))

(assert (str.in_re Witness regexA))
(assert (not (str.in_re Witness regexB)))
(check-sat)

(reset)








(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const regexB RegLan)
(declare-const x String)


(define-fun Witness () String (str.++ "6" (str.++ "@" (str.++ "9" (str.++ "." (str.++ "7" (str.++ "\u{a0}" "")))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.+ (re.++ (re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))(re.++ (re.* (re.++ (re.union (re.range "+" "+") (re.range "-" ".")) (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))))(re.++ (re.range "@" "@")(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))(re.++ (re.* (re.++ (re.range "-" ".") (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))))(re.++ (re.range "." ".")(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))) (re.* (re.++ (re.range "-" ".") (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))))))))))))(re.++ (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (re.opt (re.range "," ",")) (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))))))) (str.to_re "")))))

(assert (= regexB (re.++ (str.to_re "")(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))(re.++ (re.* (re.++ (re.union (re.range "+" "+") (re.range "-" ".")) (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))))(re.++ (re.range "@" "@")(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))(re.++ (re.* (re.++ (re.range "-" ".") (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))))(re.++ (re.range "." ".")(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))(re.++ (re.* (re.++ (re.range "-" ".") (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))))(re.++ (re.* (re.++ (re.union (re.range "," ",") (re.range ";" ";"))(re.++ (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))(re.++ (re.* (re.++ (re.union (re.range "+" "+") (re.range "-" ".")) (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))))(re.++ (re.range "@" "@")(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))(re.++ (re.* (re.++ (re.range "-" ".") (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))))(re.++ (re.range "." ".")(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))) (re.* (re.++ (re.range "-" ".") (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))))))))))))))) (str.to_re "")))))))))))))



(assert (str.in_re x regexA))
(assert (not (str.in_re x regexB)))

(assert (str.in_re Witness regexA))
(assert (not (str.in_re Witness regexB)))
(check-sat)

(reset)








(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const regexB RegLan)
(declare-const x String)


(define-fun Witness () String (str.++ "0" (str.++ "-" (str.++ "@" (str.++ "\u{aa}" (str.++ "." (str.++ "\u{ea}" (str.++ "." (str.++ "9" (str.++ "e" ""))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.+ (re.union (re.range "-" ".")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))))(re.++ (re.range "@" "@")(re.++ (re.union ((_ re.loop 1 67) (re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))) (re.++ (re.+ (re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))))(re.++ (re.range "." ".") ((_ re.loop 1 67) (re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))))))(re.++ (re.range "." ".")(re.++ (re.++ ((_ re.loop 2 4) (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))) (re.opt (re.++ (re.range "." ".") ((_ re.loop 2 2) (re.union (re.range "0" "9")(re.union (re.range "A" "A")(re.union (re.range "Z" "Z") (re.range "a" "z")))))))) (str.to_re "")))))))))

(assert (= regexB (re.++ (str.to_re "")(re.++ (re.* (re.union (re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))) (re.+ (re.range " " " ")))(re.union (re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))) (re.+ (re.range "-" "-")))(re.union (re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))) (re.+ (re.range "." "."))) (re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))) (re.+ (re.range "+" "+")))))))(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z"))))(re.++ (re.range "@" "@")(re.++ (re.* (re.union (re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))) (re.+ (re.range "-" "-"))) (re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))) (re.range "." "."))))(re.++ ((_ re.loop 1 63) (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))(re.++ (re.range "." ".")(re.++ ((_ re.loop 2 6) (re.union (re.range "A" "Z") (re.range "a" "z"))) (str.to_re "")))))))))))



(assert (str.in_re x regexA))
(assert (not (str.in_re x regexB)))

(assert (str.in_re Witness regexA))
(assert (not (str.in_re Witness regexB)))
(check-sat)

(reset)








(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const regexB RegLan)
(declare-const x String)


(define-fun Witness () String (str.++ "z" (str.++ "@" (str.++ "5" (str.++ "." (str.++ "\u{d0}" ""))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.+ (re.++ (re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))(re.++ (re.* (re.++ (re.union (re.range "+" "+") (re.range "-" ".")) (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))))(re.++ (re.range "@" "@")(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))(re.++ (re.* (re.++ (re.range "-" ".") (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))))(re.++ (re.range "." ".")(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))) (re.* (re.++ (re.range "-" ".") (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))))))))))))(re.++ (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (re.opt (re.range "," ",")) (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))))))) (str.to_re "")))))

(assert (= regexB (re.++ (str.to_re "")(re.++ (re.+ (re.++ (re.+ (re.union (re.range "-" ".")(re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))))(re.++ (re.range "@" "@")(re.++ (re.+ (re.union (re.range "-" ".")(re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))))(re.++ (re.range "." ".") ((_ re.loop 1 25) ((_ re.loop 2 5) (re.union (re.range "A" "Z") (re.range "a" "z")))))))))(re.++ (re.* (re.+ (re.++ (re.+ (re.union (re.range "-" ".")(re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))))(re.++ (re.range "@" "@")(re.++ (re.+ (re.union (re.range "-" ".")(re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))))(re.++ (re.range "." ".") ((_ re.loop 1 25) ((_ re.loop 2 5) (re.union (re.range "A" "Z") (re.range "a" "z")))))))))) (str.to_re ""))))))



(assert (str.in_re x regexA))
(assert (not (str.in_re x regexB)))

(assert (str.in_re Witness regexA))
(assert (not (str.in_re Witness regexB)))
(check-sat)

(reset)








(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const regexB RegLan)
(declare-const x String)


(define-fun Witness () String "")

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.opt (re.union ((_ re.loop 2 2) (re.range "A" "Z"))(re.union (re.++ ((_ re.loop 2 2) (re.range "a" "z"))(re.++ (re.range " " " ")(re.++ ((_ re.loop 2 2) (re.range "0" "9"))(re.++ (re.range " " " ") ((_ re.loop 1 2) (re.range "A" "Z")))))) (re.++ ((_ re.loop 1 2) (re.range "a" "z"))(re.++ (re.range " " " ") ((_ re.loop 1 4) (re.range "0" "9")))))))(re.++ (re.opt (re.union ((_ re.loop 3 3) (re.range "A" "Z")) (re.++ ((_ re.loop 3 3) (re.range "a" "z"))(re.++ (re.range " " " ") ((_ re.loop 1 4) (re.range "0" "9")))))) (str.to_re ""))))))

(assert (= regexB (re.++ (str.to_re "")(re.++ (re.+ (re.++ (re.+ (re.union (re.range "-" ".")(re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))))(re.++ (re.range "@" "@")(re.++ (re.+ (re.union (re.range "-" ".")(re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))))(re.++ (re.range "." ".") ((_ re.loop 1 25) ((_ re.loop 2 5) (re.union (re.range "A" "Z") (re.range "a" "z")))))))))(re.++ (re.* (re.+ (re.++ (re.+ (re.union (re.range "-" ".")(re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))))(re.++ (re.range "@" "@")(re.++ (re.+ (re.union (re.range "-" ".")(re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))))(re.++ (re.range "." ".") ((_ re.loop 1 25) ((_ re.loop 2 5) (re.union (re.range "A" "Z") (re.range "a" "z")))))))))) (str.to_re ""))))))



(assert (str.in_re x regexA))
(assert (not (str.in_re x regexB)))

(assert (str.in_re Witness regexA))
(assert (not (str.in_re Witness regexB)))
(check-sat)

(reset)








(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const regexB RegLan)
(declare-const x String)


(define-fun Witness () String (str.++ "\u{aa}" (str.++ "@" (str.++ "J" (str.++ "." (str.++ "_" ""))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))(re.++ (re.* (re.++ (re.union (re.range "+" "+") (re.range "-" ".")) (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))))(re.++ (re.range "@" "@")(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))(re.++ (re.* (re.++ (re.range "-" ".") (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))))(re.++ (re.range "." ".")(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))(re.++ (re.* (re.++ (re.range "-" ".") (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))))(re.++ (re.* (re.++ (re.union (re.range "," ",") (re.range ";" ";"))(re.++ (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))(re.++ (re.* (re.++ (re.union (re.range "+" "+") (re.range "-" ".")) (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))))(re.++ (re.range "@" "@")(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))(re.++ (re.* (re.++ (re.range "-" ".") (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))))(re.++ (re.range "." ".")(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))) (re.* (re.++ (re.range "-" ".") (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))))))))))))))) (str.to_re "")))))))))))))

(assert (= regexB (re.++ (str.to_re "")(re.++ (re.+ (re.union (re.range "-" ".")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))))(re.++ (re.range "@" "@")(re.++ (re.union ((_ re.loop 1 67) (re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))) (re.++ (re.+ (re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))))(re.++ (re.range "." ".") ((_ re.loop 1 67) (re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))))))(re.++ (re.range "." ".")(re.++ (re.++ ((_ re.loop 2 4) (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))) (re.opt (re.++ (re.range "." ".") ((_ re.loop 2 2) (re.union (re.range "0" "9")(re.union (re.range "A" "A")(re.union (re.range "Z" "Z") (re.range "a" "z")))))))) (str.to_re "")))))))))



(assert (str.in_re x regexA))
(assert (not (str.in_re x regexB)))

(assert (str.in_re Witness regexA))
(assert (not (str.in_re Witness regexB)))
(check-sat)

(reset)








(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const regexB RegLan)
(declare-const x String)


(define-fun Witness () String (str.++ "9" (str.++ "@" (str.++ "\u{e1}" (str.++ "." (str.++ "\u{aa}" ""))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))(re.++ (re.* (re.++ (re.union (re.range "+" "+") (re.range "-" ".")) (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))))(re.++ (re.range "@" "@")(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))(re.++ (re.* (re.++ (re.range "-" ".") (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))))(re.++ (re.range "." ".")(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))(re.++ (re.* (re.++ (re.range "-" ".") (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))))(re.++ (re.* (re.++ (re.union (re.range "," ",") (re.range ";" ";"))(re.++ (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))(re.++ (re.* (re.++ (re.union (re.range "+" "+") (re.range "-" ".")) (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))))(re.++ (re.range "@" "@")(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))(re.++ (re.* (re.++ (re.range "-" ".") (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))))(re.++ (re.range "." ".")(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))) (re.* (re.++ (re.range "-" ".") (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))))))))))))))) (str.to_re "")))))))))))))

(assert (= regexB (re.++ (str.to_re "")(re.++ (re.opt (re.range "$" "$"))(re.++ (re.union (re.++ ((_ re.loop 1 3) (re.range "0" "9"))(re.++ (re.opt (re.range "," ","))(re.++ (re.* (re.++ ((_ re.loop 3 3) (re.range "0" "9")) (re.opt (re.range "," ","))))(re.++ ((_ re.loop 3 3) (re.range "0" "9")) (re.opt (re.++ (re.range "." ".") ((_ re.loop 0 2) (re.range "0" "9"))))))))(re.union (re.++ ((_ re.loop 1 3) (re.range "0" "9")) (re.opt (re.++ (re.range "." ".") ((_ re.loop 0 2) (re.range "0" "9"))))) (re.++ (re.range "." ".") (re.opt ((_ re.loop 1 2) (re.range "0" "9")))))) (str.to_re ""))))))



(assert (str.in_re x regexA))
(assert (not (str.in_re x regexB)))

(assert (str.in_re Witness regexA))
(assert (not (str.in_re Witness regexB)))
(check-sat)

(reset)








(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const regexB RegLan)
(declare-const x String)


(define-fun Witness () String "")

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.opt (re.union ((_ re.loop 2 2) (re.range "A" "Z"))(re.union (re.++ ((_ re.loop 2 2) (re.range "a" "z"))(re.++ (re.range " " " ")(re.++ ((_ re.loop 2 2) (re.range "0" "9"))(re.++ (re.range " " " ") ((_ re.loop 1 2) (re.range "A" "Z")))))) (re.++ ((_ re.loop 1 2) (re.range "a" "z"))(re.++ (re.range " " " ") ((_ re.loop 1 4) (re.range "0" "9")))))))(re.++ (re.opt (re.union ((_ re.loop 3 3) (re.range "A" "Z")) (re.++ ((_ re.loop 3 3) (re.range "a" "z"))(re.++ (re.range " " " ") ((_ re.loop 1 4) (re.range "0" "9")))))) (str.to_re ""))))))

(assert (= regexB (re.++ (str.to_re "")(re.++ (re.+ (re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))))(re.++ (re.range "@" "@")(re.++ (re.+ (re.++ (re.+ (re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))) (re.range "." ".")))(re.++ (re.+ (re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))) (str.to_re ""))))))))



(assert (str.in_re x regexA))
(assert (not (str.in_re x regexB)))

(assert (str.in_re Witness regexA))
(assert (not (str.in_re Witness regexB)))
(check-sat)

(reset)








(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const regexB RegLan)
(declare-const x String)


(define-fun Witness () String (str.++ "2" (str.++ "@" (str.++ "\u{b5}" (str.++ "." (str.++ "2" ""))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.+ (re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))))(re.++ (re.range "@" "@")(re.++ (re.+ (re.++ (re.+ (re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))) (re.range "." ".")))(re.++ (re.+ (re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))) (str.to_re ""))))))))

(assert (= regexB (re.++ (str.to_re "")(re.++ (re.opt (re.union (re.range "+" "+") (re.range "-" "-")))(re.++ (re.union (re.++ (re.* (re.range "0" "9"))(re.++ (re.opt (re.range "." ".")) (re.+ (re.range "0" "9")))) (re.++ (re.+ (re.range "0" "9"))(re.++ (re.opt (re.range "." ".")) (re.* (re.range "0" "9")))))(re.++ (re.opt (re.++ (re.union (re.range "E" "E") (re.range "e" "e"))(re.++ (re.opt (re.union (re.range "+" "+") (re.range "-" "-"))) (re.+ (re.range "0" "9"))))) (str.to_re "")))))))



(assert (str.in_re x regexA))
(assert (not (str.in_re x regexB)))

(assert (str.in_re Witness regexA))
(assert (not (str.in_re Witness regexB)))
(check-sat)

(reset)








(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const regexB RegLan)
(declare-const x String)


(define-fun Witness () String (str.++ "9" (str.++ "@" (str.++ "6" (str.++ "." (str.++ " " (str.++ "A" (str.++ "z" ""))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))(re.++ (re.* (re.++ (re.opt (re.range "-" ".")) (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z"))))))(re.++ (re.range "@" "@")(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z"))))(re.++ (re.* (re.++ (re.opt (re.range "-" ".")) (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z"))))))(re.++ (str.to_re (str.++ "." (str.++ " " "")))(re.++ (re.++ (re.union (re.range "A" "Z") (re.range "a" "z")) (re.+ (re.union (re.range "A" "Z") (re.range "a" "z")))) (str.to_re "")))))))))))

(assert (= regexB (re.++ (str.to_re "")(re.++ (re.opt (re.range "$" "$"))(re.++ (re.union (re.++ ((_ re.loop 1 3) (re.range "0" "9"))(re.++ (re.opt (re.range "," ","))(re.++ (re.* (re.++ ((_ re.loop 3 3) (re.range "0" "9")) (re.opt (re.range "," ","))))(re.++ ((_ re.loop 3 3) (re.range "0" "9")) (re.opt (re.++ (re.range "." ".") ((_ re.loop 0 2) (re.range "0" "9"))))))))(re.union (re.++ ((_ re.loop 1 3) (re.range "0" "9")) (re.opt (re.++ (re.range "." ".") ((_ re.loop 0 2) (re.range "0" "9"))))) (re.++ (re.range "." ".") (re.opt ((_ re.loop 1 2) (re.range "0" "9")))))) (str.to_re ""))))))



(assert (str.in_re x regexA))
(assert (not (str.in_re x regexB)))

(assert (str.in_re Witness regexA))
(assert (not (str.in_re Witness regexB)))
(check-sat)

(reset)








(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const regexB RegLan)
(declare-const x String)


(define-fun Witness () String (str.++ "." ""))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.opt (re.range "$" "$"))(re.++ (re.union (re.++ ((_ re.loop 1 3) (re.range "0" "9"))(re.++ (re.opt (re.range "," ","))(re.++ (re.* (re.++ ((_ re.loop 3 3) (re.range "0" "9")) (re.opt (re.range "," ","))))(re.++ ((_ re.loop 3 3) (re.range "0" "9")) (re.opt (re.++ (re.range "." ".") ((_ re.loop 0 2) (re.range "0" "9"))))))))(re.union (re.++ ((_ re.loop 1 3) (re.range "0" "9")) (re.opt (re.++ (re.range "." ".") ((_ re.loop 0 2) (re.range "0" "9"))))) (re.++ (re.range "." ".") (re.opt ((_ re.loop 1 2) (re.range "0" "9")))))) (str.to_re ""))))))

(assert (= regexB (re.++ (str.to_re "")(re.++ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))(re.++ (re.* (re.++ (re.opt (re.range "-" ".")) (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z"))))))(re.++ (re.range "@" "@")(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z"))))(re.++ (re.* (re.++ (re.opt (re.range "-" ".")) (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z"))))))(re.++ (str.to_re (str.++ "." (str.++ " " "")))(re.++ (re.++ (re.union (re.range "A" "Z") (re.range "a" "z")) (re.+ (re.union (re.range "A" "Z") (re.range "a" "z")))) (str.to_re "")))))))))))



(assert (str.in_re x regexA))
(assert (not (str.in_re x regexB)))

(assert (str.in_re Witness regexA))
(assert (not (str.in_re Witness regexB)))
(check-sat)

(reset)








(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const regexB RegLan)
(declare-const x String)


(define-fun Witness () String (str.++ "." (str.++ "@" (str.++ "\u{aa}" (str.++ "." (str.++ "\u{aa}" (str.++ "." (str.++ "9" (str.++ "l" "")))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.+ (re.union (re.range "-" ".")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))))(re.++ (re.range "@" "@")(re.++ (re.union ((_ re.loop 1 67) (re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))) (re.++ (re.+ (re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))))(re.++ (re.range "." ".") ((_ re.loop 1 67) (re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))))))(re.++ (re.range "." ".")(re.++ (re.++ ((_ re.loop 2 4) (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))) (re.opt (re.++ (re.range "." ".") ((_ re.loop 2 2) (re.union (re.range "0" "9")(re.union (re.range "A" "A")(re.union (re.range "Z" "Z") (re.range "a" "z")))))))) (str.to_re "")))))))))

(assert (= regexB (re.++ (str.to_re "")(re.++ (re.opt (re.range "$" "$"))(re.++ (re.union (re.++ ((_ re.loop 1 3) (re.range "0" "9"))(re.++ (re.opt (re.range "," ","))(re.++ (re.* (re.++ ((_ re.loop 3 3) (re.range "0" "9")) (re.opt (re.range "," ","))))(re.++ ((_ re.loop 3 3) (re.range "0" "9")) (re.opt (re.++ (re.range "." ".") ((_ re.loop 0 2) (re.range "0" "9"))))))))(re.union (re.++ ((_ re.loop 1 3) (re.range "0" "9")) (re.opt (re.++ (re.range "." ".") ((_ re.loop 0 2) (re.range "0" "9"))))) (re.++ (re.range "." ".") (re.opt ((_ re.loop 1 2) (re.range "0" "9")))))) (str.to_re ""))))))



(assert (str.in_re x regexA))
(assert (not (str.in_re x regexB)))

(assert (str.in_re Witness regexA))
(assert (not (str.in_re Witness regexB)))
(check-sat)

(reset)








(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const regexB RegLan)
(declare-const x String)


(define-fun Witness () String (str.++ "\u{ba}" (str.++ "@" (str.++ "\u{aa}" (str.++ "." (str.++ "\u{b5}" (str.++ " " "")))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.+ (re.++ (re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))(re.++ (re.* (re.++ (re.union (re.range "+" "+") (re.range "-" ".")) (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))))(re.++ (re.range "@" "@")(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))(re.++ (re.* (re.++ (re.range "-" ".") (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))))(re.++ (re.range "." ".")(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))) (re.* (re.++ (re.range "-" ".") (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))))))))))))(re.++ (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (re.opt (re.range "," ",")) (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))))))) (str.to_re "")))))

(assert (= regexB (re.++ (str.to_re "")(re.++ (re.+ (re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))))(re.++ (re.range "@" "@")(re.++ (re.+ (re.++ (re.+ (re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))) (re.range "." ".")))(re.++ (re.+ (re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))) (str.to_re ""))))))))



(assert (str.in_re x regexA))
(assert (not (str.in_re x regexB)))

(assert (str.in_re Witness regexA))
(assert (not (str.in_re Witness regexB)))
(check-sat)

(reset)








(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const regexB RegLan)
(declare-const x String)


(define-fun Witness () String "")

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.opt (re.union ((_ re.loop 2 2) (re.range "A" "Z"))(re.union (re.++ ((_ re.loop 2 2) (re.range "a" "z"))(re.++ (re.range " " " ")(re.++ ((_ re.loop 2 2) (re.range "0" "9"))(re.++ (re.range " " " ") ((_ re.loop 1 2) (re.range "A" "Z")))))) (re.++ ((_ re.loop 1 2) (re.range "a" "z"))(re.++ (re.range " " " ") ((_ re.loop 1 4) (re.range "0" "9")))))))(re.++ (re.opt (re.union ((_ re.loop 3 3) (re.range "A" "Z")) (re.++ ((_ re.loop 3 3) (re.range "a" "z"))(re.++ (re.range " " " ") ((_ re.loop 1 4) (re.range "0" "9")))))) (str.to_re ""))))))

(assert (= regexB (re.++ (str.to_re "")(re.++ (re.opt (re.range "$" "$"))(re.++ (re.union (re.++ ((_ re.loop 1 3) (re.range "0" "9"))(re.++ (re.opt (re.range "," ","))(re.++ (re.* (re.++ ((_ re.loop 3 3) (re.range "0" "9")) (re.opt (re.range "," ","))))(re.++ ((_ re.loop 3 3) (re.range "0" "9")) (re.opt (re.++ (re.range "." ".") ((_ re.loop 0 2) (re.range "0" "9"))))))))(re.union (re.++ ((_ re.loop 1 3) (re.range "0" "9")) (re.opt (re.++ (re.range "." ".") ((_ re.loop 0 2) (re.range "0" "9"))))) (re.++ (re.range "." ".") (re.opt ((_ re.loop 1 2) (re.range "0" "9")))))) (str.to_re ""))))))



(assert (str.in_re x regexA))
(assert (not (str.in_re x regexB)))

(assert (str.in_re Witness regexA))
(assert (not (str.in_re Witness regexB)))
(check-sat)

(reset)








(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const regexB RegLan)
(declare-const x String)


(define-fun Witness () String (str.++ "a" (str.++ "@" (str.++ "\u{aa}" (str.++ "." (str.++ "z" (str.++ "h" "")))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.* (re.union (re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))) (re.+ (re.range " " " ")))(re.union (re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))) (re.+ (re.range "-" "-")))(re.union (re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))) (re.+ (re.range "." "."))) (re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))) (re.+ (re.range "+" "+")))))))(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z"))))(re.++ (re.range "@" "@")(re.++ (re.* (re.union (re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))) (re.+ (re.range "-" "-"))) (re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))) (re.range "." "."))))(re.++ ((_ re.loop 1 63) (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))(re.++ (re.range "." ".")(re.++ ((_ re.loop 2 6) (re.union (re.range "A" "Z") (re.range "a" "z"))) (str.to_re "")))))))))))

(assert (= regexB (re.++ (str.to_re "")(re.++ (re.opt (re.union ((_ re.loop 2 2) (re.range "A" "Z"))(re.union (re.++ ((_ re.loop 2 2) (re.range "a" "z"))(re.++ (re.range " " " ")(re.++ ((_ re.loop 2 2) (re.range "0" "9"))(re.++ (re.range " " " ") ((_ re.loop 1 2) (re.range "A" "Z")))))) (re.++ ((_ re.loop 1 2) (re.range "a" "z"))(re.++ (re.range " " " ") ((_ re.loop 1 4) (re.range "0" "9")))))))(re.++ (re.opt (re.union ((_ re.loop 3 3) (re.range "A" "Z")) (re.++ ((_ re.loop 3 3) (re.range "a" "z"))(re.++ (re.range " " " ") ((_ re.loop 1 4) (re.range "0" "9")))))) (str.to_re ""))))))



(assert (str.in_re x regexA))
(assert (not (str.in_re x regexB)))

(assert (str.in_re Witness regexA))
(assert (not (str.in_re Witness regexB)))
(check-sat)

(reset)








(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const regexB RegLan)
(declare-const x String)


(define-fun Witness () String (str.++ "\u{aa}" (str.++ "@" (str.++ "\u{aa}" (str.++ "." (str.++ "_" ""))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.+ (re.++ (re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))(re.++ (re.* (re.++ (re.union (re.range "+" "+") (re.range "-" ".")) (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))))(re.++ (re.range "@" "@")(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))(re.++ (re.* (re.++ (re.range "-" ".") (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))))(re.++ (re.range "." ".")(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))) (re.* (re.++ (re.range "-" ".") (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))))))))))))(re.++ (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (re.opt (re.range "," ",")) (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))))))) (str.to_re "")))))

(assert (= regexB (re.++ (str.to_re "")(re.++ (re.+ (re.union (re.range "-" ".")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))))(re.++ (re.range "@" "@")(re.++ (re.union ((_ re.loop 1 67) (re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))) (re.++ (re.+ (re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))))(re.++ (re.range "." ".") ((_ re.loop 1 67) (re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))))))(re.++ (re.range "." ".")(re.++ (re.++ ((_ re.loop 2 4) (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))) (re.opt (re.++ (re.range "." ".") ((_ re.loop 2 2) (re.union (re.range "0" "9")(re.union (re.range "A" "A")(re.union (re.range "Z" "Z") (re.range "a" "z")))))))) (str.to_re "")))))))))



(assert (str.in_re x regexA))
(assert (not (str.in_re x regexB)))

(assert (str.in_re Witness regexA))
(assert (not (str.in_re Witness regexB)))
(check-sat)

(reset)








(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const regexB RegLan)
(declare-const x String)


(define-fun Witness () String (str.++ "-" (str.++ "@" (str.++ "Y" (str.++ "." (str.++ "m" (str.++ "Y" (str.++ "M" (str.++ "z" (str.++ "x" (str.++ "n" "")))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.+ (re.++ (re.+ (re.union (re.range "-" ".")(re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))))(re.++ (re.range "@" "@")(re.++ (re.+ (re.union (re.range "-" ".")(re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))))(re.++ (re.range "." ".") ((_ re.loop 1 25) ((_ re.loop 2 5) (re.union (re.range "A" "Z") (re.range "a" "z")))))))))(re.++ (re.* (re.+ (re.++ (re.+ (re.union (re.range "-" ".")(re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))))(re.++ (re.range "@" "@")(re.++ (re.+ (re.union (re.range "-" ".")(re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))))(re.++ (re.range "." ".") ((_ re.loop 1 25) ((_ re.loop 2 5) (re.union (re.range "A" "Z") (re.range "a" "z")))))))))) (str.to_re ""))))))

(assert (= regexB (re.++ (str.to_re "")(re.++ (re.+ (re.union (re.range "-" ".")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))))(re.++ (re.range "@" "@")(re.++ (re.union ((_ re.loop 1 67) (re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))) (re.++ (re.+ (re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))))(re.++ (re.range "." ".") ((_ re.loop 1 67) (re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))))))(re.++ (re.range "." ".")(re.++ (re.++ ((_ re.loop 2 4) (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))) (re.opt (re.++ (re.range "." ".") ((_ re.loop 2 2) (re.union (re.range "0" "9")(re.union (re.range "A" "A")(re.union (re.range "Z" "Z") (re.range "a" "z")))))))) (str.to_re "")))))))))



(assert (str.in_re x regexA))
(assert (not (str.in_re x regexB)))

(assert (str.in_re Witness regexA))
(assert (not (str.in_re Witness regexB)))
(check-sat)

(reset)








(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const regexB RegLan)
(declare-const x String)


(define-fun Witness () String (str.++ "5" (str.++ "@" (str.++ "b" (str.++ "." (str.++ "\u{d6}" ""))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.+ (re.++ (re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))(re.++ (re.* (re.++ (re.union (re.range "+" "+") (re.range "-" ".")) (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))))(re.++ (re.range "@" "@")(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))(re.++ (re.* (re.++ (re.range "-" ".") (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))))(re.++ (re.range "." ".")(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))) (re.* (re.++ (re.range "-" ".") (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))))))))))))(re.++ (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (re.opt (re.range "," ",")) (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))))))) (str.to_re "")))))

(assert (= regexB (re.++ (str.to_re "")(re.++ (re.opt (re.range "$" "$"))(re.++ (re.union (re.++ ((_ re.loop 1 3) (re.range "0" "9"))(re.++ (re.opt (re.range "," ","))(re.++ (re.* (re.++ ((_ re.loop 3 3) (re.range "0" "9")) (re.opt (re.range "," ","))))(re.++ ((_ re.loop 3 3) (re.range "0" "9")) (re.opt (re.++ (re.range "." ".") ((_ re.loop 0 2) (re.range "0" "9"))))))))(re.union (re.++ ((_ re.loop 1 3) (re.range "0" "9")) (re.opt (re.++ (re.range "." ".") ((_ re.loop 0 2) (re.range "0" "9"))))) (re.++ (re.range "." ".") (re.opt ((_ re.loop 1 2) (re.range "0" "9")))))) (str.to_re ""))))))



(assert (str.in_re x regexA))
(assert (not (str.in_re x regexB)))

(assert (str.in_re Witness regexA))
(assert (not (str.in_re Witness regexB)))
(check-sat)

(reset)








(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const regexB RegLan)
(declare-const x String)


(define-fun Witness () String (str.++ "J" (str.++ "-" (str.++ "_" (str.++ "@" (str.++ "\u{ba}" (str.++ "." (str.++ "\u{aa}" ""))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.+ (re.++ (re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))(re.++ (re.* (re.++ (re.union (re.range "+" "+") (re.range "-" ".")) (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))))(re.++ (re.range "@" "@")(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))(re.++ (re.* (re.++ (re.range "-" ".") (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))))(re.++ (re.range "." ".")(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))) (re.* (re.++ (re.range "-" ".") (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))))))))))))(re.++ (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (re.opt (re.range "," ",")) (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))))))) (str.to_re "")))))

(assert (= regexB (re.++ (str.to_re "")(re.++ (re.* (re.union (re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))) (re.+ (re.range " " " ")))(re.union (re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))) (re.+ (re.range "-" "-")))(re.union (re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))) (re.+ (re.range "." "."))) (re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))) (re.+ (re.range "+" "+")))))))(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z"))))(re.++ (re.range "@" "@")(re.++ (re.* (re.union (re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))) (re.+ (re.range "-" "-"))) (re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))) (re.range "." "."))))(re.++ ((_ re.loop 1 63) (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))(re.++ (re.range "." ".")(re.++ ((_ re.loop 2 6) (re.union (re.range "A" "Z") (re.range "a" "z"))) (str.to_re "")))))))))))



(assert (str.in_re x regexA))
(assert (not (str.in_re x regexB)))

(assert (str.in_re Witness regexA))
(assert (not (str.in_re Witness regexB)))
(check-sat)

(reset)








(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const regexB RegLan)
(declare-const x String)


(define-fun Witness () String (str.++ "1" ""))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.opt (re.union (re.range "+" "+") (re.range "-" "-")))(re.++ (re.union (re.++ (re.* (re.range "0" "9"))(re.++ (re.opt (re.range "." ".")) (re.+ (re.range "0" "9")))) (re.++ (re.+ (re.range "0" "9"))(re.++ (re.opt (re.range "." ".")) (re.* (re.range "0" "9")))))(re.++ (re.opt (re.++ (re.union (re.range "E" "E") (re.range "e" "e"))(re.++ (re.opt (re.union (re.range "+" "+") (re.range "-" "-"))) (re.+ (re.range "0" "9"))))) (str.to_re "")))))))

(assert (= regexB (re.++ (str.to_re "")(re.++ (re.+ (re.++ (re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))(re.++ (re.* (re.++ (re.union (re.range "+" "+") (re.range "-" ".")) (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))))(re.++ (re.range "@" "@")(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))(re.++ (re.* (re.++ (re.range "-" ".") (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))))(re.++ (re.range "." ".")(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))) (re.* (re.++ (re.range "-" ".") (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))))))))))))(re.++ (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (re.opt (re.range "," ",")) (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))))))) (str.to_re "")))))



(assert (str.in_re x regexA))
(assert (not (str.in_re x regexB)))

(assert (str.in_re Witness regexA))
(assert (not (str.in_re Witness regexB)))
(check-sat)

(reset)








(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const regexB RegLan)
(declare-const x String)


(define-fun Witness () String (str.++ "H" (str.++ "@" (str.++ "6" (str.++ "." (str.++ "\u{e0}" ""))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.+ (re.++ (re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))(re.++ (re.* (re.++ (re.union (re.range "+" "+") (re.range "-" ".")) (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))))(re.++ (re.range "@" "@")(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))(re.++ (re.* (re.++ (re.range "-" ".") (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))))(re.++ (re.range "." ".")(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))) (re.* (re.++ (re.range "-" ".") (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))))))))))))(re.++ (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (re.opt (re.range "," ",")) (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))))))) (str.to_re "")))))

(assert (= regexB (re.++ (str.to_re "")(re.++ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))(re.++ (re.* (re.++ (re.opt (re.range "-" ".")) (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z"))))))(re.++ (re.range "@" "@")(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z"))))(re.++ (re.* (re.++ (re.opt (re.range "-" ".")) (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z"))))))(re.++ (str.to_re (str.++ "." (str.++ " " "")))(re.++ (re.++ (re.union (re.range "A" "Z") (re.range "a" "z")) (re.+ (re.union (re.range "A" "Z") (re.range "a" "z")))) (str.to_re "")))))))))))



(assert (str.in_re x regexA))
(assert (not (str.in_re x regexB)))

(assert (str.in_re Witness regexA))
(assert (not (str.in_re Witness regexB)))
(check-sat)

(reset)








(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const regexB RegLan)
(declare-const x String)


(define-fun Witness () String (str.++ "t" (str.++ "@" (str.++ "y" (str.++ "." (str.++ " " (str.++ "z" (str.++ "f" ""))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))(re.++ (re.* (re.++ (re.opt (re.range "-" ".")) (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z"))))))(re.++ (re.range "@" "@")(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z"))))(re.++ (re.* (re.++ (re.opt (re.range "-" ".")) (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z"))))))(re.++ (str.to_re (str.++ "." (str.++ " " "")))(re.++ (re.++ (re.union (re.range "A" "Z") (re.range "a" "z")) (re.+ (re.union (re.range "A" "Z") (re.range "a" "z")))) (str.to_re "")))))))))))

(assert (= regexB (re.++ (str.to_re "")(re.++ (re.+ (re.++ (re.+ (re.union (re.range "-" ".")(re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))))(re.++ (re.range "@" "@")(re.++ (re.+ (re.union (re.range "-" ".")(re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))))(re.++ (re.range "." ".") ((_ re.loop 1 25) ((_ re.loop 2 5) (re.union (re.range "A" "Z") (re.range "a" "z")))))))))(re.++ (re.* (re.+ (re.++ (re.+ (re.union (re.range "-" ".")(re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))))(re.++ (re.range "@" "@")(re.++ (re.+ (re.union (re.range "-" ".")(re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))))(re.++ (re.range "." ".") ((_ re.loop 1 25) ((_ re.loop 2 5) (re.union (re.range "A" "Z") (re.range "a" "z")))))))))) (str.to_re ""))))))



(assert (str.in_re x regexA))
(assert (not (str.in_re x regexB)))

(assert (str.in_re Witness regexA))
(assert (not (str.in_re Witness regexB)))
(check-sat)

(reset)








(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const regexB RegLan)
(declare-const x String)


(define-fun Witness () String (str.++ "8" ""))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.opt (re.range "$" "$"))(re.++ (re.union (re.++ ((_ re.loop 1 3) (re.range "0" "9"))(re.++ (re.opt (re.range "," ","))(re.++ (re.* (re.++ ((_ re.loop 3 3) (re.range "0" "9")) (re.opt (re.range "," ","))))(re.++ ((_ re.loop 3 3) (re.range "0" "9")) (re.opt (re.++ (re.range "." ".") ((_ re.loop 0 2) (re.range "0" "9"))))))))(re.union (re.++ ((_ re.loop 1 3) (re.range "0" "9")) (re.opt (re.++ (re.range "." ".") ((_ re.loop 0 2) (re.range "0" "9"))))) (re.++ (re.range "." ".") (re.opt ((_ re.loop 1 2) (re.range "0" "9")))))) (str.to_re ""))))))

(assert (= regexB (re.++ (str.to_re "")(re.++ (re.opt (re.union ((_ re.loop 2 2) (re.range "A" "Z"))(re.union (re.++ ((_ re.loop 2 2) (re.range "a" "z"))(re.++ (re.range " " " ")(re.++ ((_ re.loop 2 2) (re.range "0" "9"))(re.++ (re.range " " " ") ((_ re.loop 1 2) (re.range "A" "Z")))))) (re.++ ((_ re.loop 1 2) (re.range "a" "z"))(re.++ (re.range " " " ") ((_ re.loop 1 4) (re.range "0" "9")))))))(re.++ (re.opt (re.union ((_ re.loop 3 3) (re.range "A" "Z")) (re.++ ((_ re.loop 3 3) (re.range "a" "z"))(re.++ (re.range " " " ") ((_ re.loop 1 4) (re.range "0" "9")))))) (str.to_re ""))))))



(assert (str.in_re x regexA))
(assert (not (str.in_re x regexB)))

(assert (str.in_re Witness regexA))
(assert (not (str.in_re Witness regexB)))
(check-sat)

(reset)








(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const regexB RegLan)
(declare-const x String)


(define-fun Witness () String (str.++ "8" (str.++ "@" (str.++ "\u{e4}" (str.++ "." (str.++ "_" ""))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.+ (re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))))(re.++ (re.range "@" "@")(re.++ (re.+ (re.++ (re.+ (re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))) (re.range "." ".")))(re.++ (re.+ (re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))) (str.to_re ""))))))))

(assert (= regexB (re.++ (str.to_re "")(re.++ (re.+ (re.union (re.range "-" ".")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))))(re.++ (re.range "@" "@")(re.++ (re.union ((_ re.loop 1 67) (re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))) (re.++ (re.+ (re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))))(re.++ (re.range "." ".") ((_ re.loop 1 67) (re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))))))(re.++ (re.range "." ".")(re.++ (re.++ ((_ re.loop 2 4) (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))) (re.opt (re.++ (re.range "." ".") ((_ re.loop 2 2) (re.union (re.range "0" "9")(re.union (re.range "A" "A")(re.union (re.range "Z" "Z") (re.range "a" "z")))))))) (str.to_re "")))))))))



(assert (str.in_re x regexA))
(assert (not (str.in_re x regexB)))

(assert (str.in_re Witness regexA))
(assert (not (str.in_re Witness regexB)))
(check-sat)

(reset)








(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const regexB RegLan)
(declare-const x String)


(define-fun Witness () String (str.++ "S" (str.++ "@" (str.++ "5" (str.++ "." (str.++ "_" ""))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.+ (re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))))(re.++ (re.range "@" "@")(re.++ (re.+ (re.++ (re.+ (re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))) (re.range "." ".")))(re.++ (re.+ (re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))) (str.to_re ""))))))))

(assert (= regexB (re.++ (str.to_re "")(re.++ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))(re.++ (re.* (re.++ (re.opt (re.range "-" ".")) (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z"))))))(re.++ (re.range "@" "@")(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z"))))(re.++ (re.* (re.++ (re.opt (re.range "-" ".")) (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z"))))))(re.++ (str.to_re (str.++ "." (str.++ " " "")))(re.++ (re.++ (re.union (re.range "A" "Z") (re.range "a" "z")) (re.+ (re.union (re.range "A" "Z") (re.range "a" "z")))) (str.to_re "")))))))))))



(assert (str.in_re x regexA))
(assert (not (str.in_re x regexB)))

(assert (str.in_re Witness regexA))
(assert (not (str.in_re Witness regexB)))
(check-sat)

(reset)








(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const regexB RegLan)
(declare-const x String)


(define-fun Witness () String (str.++ "3" (str.++ "@" (str.++ "\u{aa}" (str.++ "." (str.++ "r" (str.++ "x" "")))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.* (re.union (re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))) (re.+ (re.range " " " ")))(re.union (re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))) (re.+ (re.range "-" "-")))(re.union (re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))) (re.+ (re.range "." "."))) (re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))) (re.+ (re.range "+" "+")))))))(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z"))))(re.++ (re.range "@" "@")(re.++ (re.* (re.union (re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))) (re.+ (re.range "-" "-"))) (re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))) (re.range "." "."))))(re.++ ((_ re.loop 1 63) (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))(re.++ (re.range "." ".")(re.++ ((_ re.loop 2 6) (re.union (re.range "A" "Z") (re.range "a" "z"))) (str.to_re "")))))))))))

(assert (= regexB (re.++ (str.to_re "")(re.++ (re.opt (re.range "$" "$"))(re.++ (re.union (re.++ ((_ re.loop 1 3) (re.range "0" "9"))(re.++ (re.opt (re.range "," ","))(re.++ (re.* (re.++ ((_ re.loop 3 3) (re.range "0" "9")) (re.opt (re.range "," ","))))(re.++ ((_ re.loop 3 3) (re.range "0" "9")) (re.opt (re.++ (re.range "." ".") ((_ re.loop 0 2) (re.range "0" "9"))))))))(re.union (re.++ ((_ re.loop 1 3) (re.range "0" "9")) (re.opt (re.++ (re.range "." ".") ((_ re.loop 0 2) (re.range "0" "9"))))) (re.++ (re.range "." ".") (re.opt ((_ re.loop 1 2) (re.range "0" "9")))))) (str.to_re ""))))))



(assert (str.in_re x regexA))
(assert (not (str.in_re x regexB)))

(assert (str.in_re Witness regexA))
(assert (not (str.in_re Witness regexB)))
(check-sat)

(reset)








(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const regexB RegLan)
(declare-const x String)


(define-fun Witness () String (str.++ "N" (str.++ "@" (str.++ "4" (str.++ "." (str.++ " " (str.++ "y" (str.++ "s" ""))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))(re.++ (re.* (re.++ (re.opt (re.range "-" ".")) (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z"))))))(re.++ (re.range "@" "@")(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z"))))(re.++ (re.* (re.++ (re.opt (re.range "-" ".")) (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z"))))))(re.++ (str.to_re (str.++ "." (str.++ " " "")))(re.++ (re.++ (re.union (re.range "A" "Z") (re.range "a" "z")) (re.+ (re.union (re.range "A" "Z") (re.range "a" "z")))) (str.to_re "")))))))))))

(assert (= regexB (re.++ (str.to_re "")(re.++ (re.+ (re.union (re.range "-" ".")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))))(re.++ (re.range "@" "@")(re.++ (re.union ((_ re.loop 1 67) (re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))) (re.++ (re.+ (re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))))(re.++ (re.range "." ".") ((_ re.loop 1 67) (re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))))))(re.++ (re.range "." ".")(re.++ (re.++ ((_ re.loop 2 4) (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))) (re.opt (re.++ (re.range "." ".") ((_ re.loop 2 2) (re.union (re.range "0" "9")(re.union (re.range "A" "A")(re.union (re.range "Z" "Z") (re.range "a" "z")))))))) (str.to_re "")))))))))



(assert (str.in_re x regexA))
(assert (not (str.in_re x regexB)))

(assert (str.in_re Witness regexA))
(assert (not (str.in_re Witness regexB)))
(check-sat)

(reset)








(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const regexB RegLan)
(declare-const x String)


(define-fun Witness () String (str.++ "9" ""))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.opt (re.union (re.range "+" "+") (re.range "-" "-")))(re.++ (re.union (re.++ (re.* (re.range "0" "9"))(re.++ (re.opt (re.range "." ".")) (re.+ (re.range "0" "9")))) (re.++ (re.+ (re.range "0" "9"))(re.++ (re.opt (re.range "." ".")) (re.* (re.range "0" "9")))))(re.++ (re.opt (re.++ (re.union (re.range "E" "E") (re.range "e" "e"))(re.++ (re.opt (re.union (re.range "+" "+") (re.range "-" "-"))) (re.+ (re.range "0" "9"))))) (str.to_re "")))))))

(assert (= regexB (re.++ (str.to_re "")(re.++ (re.+ (re.union (re.range "-" ".")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))))(re.++ (re.range "@" "@")(re.++ (re.union ((_ re.loop 1 67) (re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))) (re.++ (re.+ (re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))))(re.++ (re.range "." ".") ((_ re.loop 1 67) (re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))))))(re.++ (re.range "." ".")(re.++ (re.++ ((_ re.loop 2 4) (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))) (re.opt (re.++ (re.range "." ".") ((_ re.loop 2 2) (re.union (re.range "0" "9")(re.union (re.range "A" "A")(re.union (re.range "Z" "Z") (re.range "a" "z")))))))) (str.to_re "")))))))))



(assert (str.in_re x regexA))
(assert (not (str.in_re x regexB)))

(assert (str.in_re Witness regexA))
(assert (not (str.in_re Witness regexB)))
(check-sat)

(reset)








(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const regexB RegLan)
(declare-const x String)


(define-fun Witness () String (str.++ "8" (str.++ "@" (str.++ "0" (str.++ "." (str.++ " " (str.++ "P" (str.++ "C" ""))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))(re.++ (re.* (re.++ (re.opt (re.range "-" ".")) (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z"))))))(re.++ (re.range "@" "@")(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z"))))(re.++ (re.* (re.++ (re.opt (re.range "-" ".")) (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z"))))))(re.++ (str.to_re (str.++ "." (str.++ " " "")))(re.++ (re.++ (re.union (re.range "A" "Z") (re.range "a" "z")) (re.+ (re.union (re.range "A" "Z") (re.range "a" "z")))) (str.to_re "")))))))))))

(assert (= regexB (re.++ (str.to_re "")(re.++ (re.opt (re.union (re.range "+" "+") (re.range "-" "-")))(re.++ (re.union (re.++ (re.* (re.range "0" "9"))(re.++ (re.opt (re.range "." ".")) (re.+ (re.range "0" "9")))) (re.++ (re.+ (re.range "0" "9"))(re.++ (re.opt (re.range "." ".")) (re.* (re.range "0" "9")))))(re.++ (re.opt (re.++ (re.union (re.range "E" "E") (re.range "e" "e"))(re.++ (re.opt (re.union (re.range "+" "+") (re.range "-" "-"))) (re.+ (re.range "0" "9"))))) (str.to_re "")))))))



(assert (str.in_re x regexA))
(assert (not (str.in_re x regexB)))

(assert (str.in_re Witness regexA))
(assert (not (str.in_re Witness regexB)))
(check-sat)

(reset)








(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const regexB RegLan)
(declare-const x String)


(define-fun Witness () String (str.++ "G" (str.++ "@" (str.++ "F" (str.++ "." (str.++ " " (str.++ "N" (str.++ "p" ""))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))(re.++ (re.* (re.++ (re.opt (re.range "-" ".")) (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z"))))))(re.++ (re.range "@" "@")(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z"))))(re.++ (re.* (re.++ (re.opt (re.range "-" ".")) (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z"))))))(re.++ (str.to_re (str.++ "." (str.++ " " "")))(re.++ (re.++ (re.union (re.range "A" "Z") (re.range "a" "z")) (re.+ (re.union (re.range "A" "Z") (re.range "a" "z")))) (str.to_re "")))))))))))

(assert (= regexB (re.++ (str.to_re "")(re.++ (re.+ (re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))))(re.++ (re.range "@" "@")(re.++ (re.+ (re.++ (re.+ (re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))) (re.range "." ".")))(re.++ (re.+ (re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))) (str.to_re ""))))))))



(assert (str.in_re x regexA))
(assert (not (str.in_re x regexB)))

(assert (str.in_re Witness regexA))
(assert (not (str.in_re Witness regexB)))
(check-sat)

(reset)








(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const regexB RegLan)
(declare-const x String)


(define-fun Witness () String (str.++ "5" (str.++ "@" (str.++ "-" (str.++ "." (str.++ "\u{cd}" ""))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.+ (re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))))(re.++ (re.range "@" "@")(re.++ (re.+ (re.++ (re.+ (re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))) (re.range "." ".")))(re.++ (re.+ (re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))) (str.to_re ""))))))))

(assert (= regexB (re.++ (str.to_re "")(re.++ (re.+ (re.++ (re.+ (re.union (re.range "-" ".")(re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))))(re.++ (re.range "@" "@")(re.++ (re.+ (re.union (re.range "-" ".")(re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))))(re.++ (re.range "." ".") ((_ re.loop 1 25) ((_ re.loop 2 5) (re.union (re.range "A" "Z") (re.range "a" "z")))))))))(re.++ (re.* (re.+ (re.++ (re.+ (re.union (re.range "-" ".")(re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))))(re.++ (re.range "@" "@")(re.++ (re.+ (re.union (re.range "-" ".")(re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z")))))(re.++ (re.range "." ".") ((_ re.loop 1 25) ((_ re.loop 2 5) (re.union (re.range "A" "Z") (re.range "a" "z")))))))))) (str.to_re ""))))))



(assert (str.in_re x regexA))
(assert (not (str.in_re x regexB)))

(assert (str.in_re Witness regexA))
(assert (not (str.in_re Witness regexB)))
(check-sat)
